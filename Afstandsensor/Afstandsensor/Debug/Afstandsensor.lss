
Afstandsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000566  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800104  00800104  000005fe  2**0
                  ALLOC
  3 .stab         00001968  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005ea  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002558  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f8  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000290  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000034b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000197  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022a  00000000  00000000  0000376f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
static volatile int i = 0;
int16_t afstand = 0;
char resultAfstand[16];

void init_ports(void){
	DDRD = 0b11110111; //set PORTD1 as INPUT
  a6:	87 ef       	ldi	r24, 0xF7	; 247
  a8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	//PORTD |= (1 << PORTD2);// turn On the Pull-up
}
  ae:	08 95       	ret

000000b0 <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
  ba:	10 92 80 00 	sts	0x0080, r1
	
}
  be:	08 95       	ret

000000c0 <main>:

int main(void)
{
	ser_init();
  c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ser_init>
	init_ports();
  c4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	init_ext_int();
  c8:	0e 94 58 00 	call	0xb0	; 0xb0 <init_ext_int>
	
	sei();
  cc:	78 94       	sei
	
	while(1)
	{
		PORTB = (1<<PINB0);
  ce:	11 e0       	ldi	r17, 0x01	; 1
		_delay_ms(10);
		PORTB = 0x00;
		
		afstand = (pulse * 0.5) * 0.0343;
		
		itoa(afstand, resultAfstand, 10);
  d0:	ca e0       	ldi	r28, 0x0A	; 10
  d2:	d1 e0       	ldi	r29, 0x01	; 1
		ser_write(resultAfstand); ser_writeln(" cm");	 
  d4:	0f 2e       	mov	r0, r31
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ef 2e       	mov	r14, r31
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
	
	sei();
	
	while(1)
	{
		PORTB = (1<<PINB0);
  e0:	15 b9       	out	0x05, r17	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x26>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2c>
  ec:	00 00       	nop
		_delay_ms(10);
		PORTB = 0x00;
  ee:	15 b8       	out	0x05, r1	; 5
		
		afstand = (pulse * 0.5) * 0.0343;
  f0:	60 91 08 01 	lds	r22, 0x0108
  f4:	70 91 09 01 	lds	r23, 0x0109
  f8:	88 27       	eor	r24, r24
  fa:	77 fd       	sbrc	r23, 7
  fc:	80 95       	com	r24
  fe:	98 2f       	mov	r25, r24
 100:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__floatsisf>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	5f e3       	ldi	r21, 0x3F	; 63
 10c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__mulsf3>
 110:	28 e2       	ldi	r18, 0x28	; 40
 112:	3e e7       	ldi	r19, 0x7E	; 126
 114:	4c e0       	ldi	r20, 0x0C	; 12
 116:	5d e3       	ldi	r21, 0x3D	; 61
 118:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__mulsf3>
 11c:	0e 94 4a 01 	call	0x294	; 0x294 <__fixsfsi>
 120:	dc 01       	movw	r26, r24
 122:	cb 01       	movw	r24, r22
 124:	90 93 05 01 	sts	0x0105, r25
 128:	80 93 04 01 	sts	0x0104, r24
		
		itoa(afstand, resultAfstand, 10);
 12c:	be 01       	movw	r22, r28
 12e:	4a e0       	ldi	r20, 0x0A	; 10
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <itoa>
		ser_write(resultAfstand); ser_writeln(" cm");	 
 136:	ce 01       	movw	r24, r28
 138:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <ser_write>
 13c:	c7 01       	movw	r24, r14
 13e:	0e 94 07 01 	call	0x20e	; 0x20e <ser_writeln>
 142:	ce cf       	rjmp	.-100    	; 0xe0 <main+0x20>

00000144 <__vector_2>:
	}
}

ISR(INT1_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	if(i == 1)
 156:	80 91 06 01 	lds	r24, 0x0106
 15a:	90 91 07 01 	lds	r25, 0x0107
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 05       	cpc	r25, r1
 162:	81 f4       	brne	.+32     	; 0x184 <__vector_2+0x40>
	{
		TCCR1B = 0; //Stop de teller
 164:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1;
 168:	e4 e8       	ldi	r30, 0x84	; 132
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	90 93 09 01 	sts	0x0109, r25
 174:	80 93 08 01 	sts	0x0108, r24
		TCNT1 = 0;
 178:	11 82       	std	Z+1, r1	; 0x01
 17a:	10 82       	st	Z, r1
		i = 0;
 17c:	10 92 07 01 	sts	0x0107, r1
 180:	10 92 06 01 	sts	0x0106, r1
	}

	if(i==0)
 184:	80 91 06 01 	lds	r24, 0x0106
 188:	90 91 07 01 	lds	r25, 0x0107
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	49 f4       	brne	.+18     	; 0x1a2 <__vector_2+0x5e>
	{
		TCCR1B = (1<<CS10); //Start de teller
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 81 00 	sts	0x0081, r24
		i = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 07 01 	sts	0x0107, r25
 19e:	80 93 06 01 	sts	0x0106, r24
	}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <ser_init>:
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
 1b4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 1b8:	83 e3       	ldi	r24, 0x33	; 51
 1ba:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 1be:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	80 93 c2 00 	sts	0x00C2, r24
}
 1ce:	08 95       	ret

000001d0 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1d0:	e0 ec       	ldi	r30, 0xC0	; 192
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
 1da:	80 93 c6 00 	sts	0x00C6, r24
}
 1de:	08 95       	ret

000001e0 <ser_receive>:

// Low level receive
uint8_t ser_receive() {
    loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 1e0:	e0 ec       	ldi	r30, 0xC0	; 192
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <ser_receive+0x4>
    return UDR0;
 1ea:	80 91 c6 00 	lds	r24, 0x00C6
}
 1ee:	08 95       	ret

000001f0 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
 1f6:	88 81       	ld	r24, Y
 1f8:	88 23       	and	r24, r24
 1fa:	31 f0       	breq	.+12     	; 0x208 <ser_write+0x18>
    return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
 1fc:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
 1fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
 202:	89 91       	ld	r24, Y+
 204:	88 23       	and	r24, r24
 206:	d9 f7       	brne	.-10     	; 0x1fe <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
 20e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <ser_write>
	ser_transmit('\r');
 212:	8d e0       	ldi	r24, 0x0D	; 13
 214:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ser_transmit>
	ser_transmit('\n');
 218:	8a e0       	ldi	r24, 0x0A	; 10
 21a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ser_transmit>
}
 21e:	08 95       	ret

00000220 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	5c 01       	movw	r10, r24
 236:	d4 2f       	mov	r29, r20
	int i=0;
 238:	6c 01       	movw	r12, r24
 23a:	ee 24       	eor	r14, r14
 23c:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
 23e:	8b 01       	movw	r16, r22
 240:	01 50       	subi	r16, 0x01	; 1
 242:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
 244:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ser_receive>
 248:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
 24a:	dd 23       	and	r29, r29
 24c:	11 f0       	breq	.+4      	; 0x252 <ser_readln+0x32>
 24e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ser_transmit>
		if (c=='\r') {
 252:	cd 30       	cpi	r28, 0x0D	; 13
 254:	31 f4       	brne	.+12     	; 0x262 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
 256:	dd 23       	and	r29, r29
 258:	71 f0       	breq	.+28     	; 0x276 <ser_readln+0x56>
 25a:	8a e0       	ldi	r24, 0x0A	; 10
 25c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ser_transmit>
 260:	0a c0       	rjmp	.+20     	; 0x276 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
 262:	e0 16       	cp	r14, r16
 264:	f1 06       	cpc	r15, r17
 266:	74 f7       	brge	.-36     	; 0x244 <ser_readln+0x24>
			buf[i++]=c;
 268:	f6 01       	movw	r30, r12
 26a:	c1 93       	st	Z+, r28
 26c:	6f 01       	movw	r12, r30
 26e:	08 94       	sec
 270:	e1 1c       	adc	r14, r1
 272:	f1 1c       	adc	r15, r1
 274:	e7 cf       	rjmp	.-50     	; 0x244 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
 276:	ea 0c       	add	r14, r10
 278:	fb 1c       	adc	r15, r11
 27a:	f7 01       	movw	r30, r14
 27c:	10 82       	st	Z, r1
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	af 90       	pop	r10
 292:	08 95       	ret

00000294 <__fixsfsi>:
 294:	04 d0       	rcall	.+8      	; 0x29e <__fixunssfsi>
 296:	68 94       	set
 298:	b1 11       	cpse	r27, r1
 29a:	8d c0       	rjmp	.+282    	; 0x3b6 <__fp_szero>
 29c:	08 95       	ret

0000029e <__fixunssfsi>:
 29e:	70 d0       	rcall	.+224    	; 0x380 <__fp_splitA>
 2a0:	88 f0       	brcs	.+34     	; 0x2c4 <__fixunssfsi+0x26>
 2a2:	9f 57       	subi	r25, 0x7F	; 127
 2a4:	90 f0       	brcs	.+36     	; 0x2ca <__fixunssfsi+0x2c>
 2a6:	b9 2f       	mov	r27, r25
 2a8:	99 27       	eor	r25, r25
 2aa:	b7 51       	subi	r27, 0x17	; 23
 2ac:	a0 f0       	brcs	.+40     	; 0x2d6 <__fixunssfsi+0x38>
 2ae:	d1 f0       	breq	.+52     	; 0x2e4 <__fixunssfsi+0x46>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	1a f0       	brmi	.+6      	; 0x2c0 <__fixunssfsi+0x22>
 2ba:	ba 95       	dec	r27
 2bc:	c9 f7       	brne	.-14     	; 0x2b0 <__fixunssfsi+0x12>
 2be:	12 c0       	rjmp	.+36     	; 0x2e4 <__fixunssfsi+0x46>
 2c0:	b1 30       	cpi	r27, 0x01	; 1
 2c2:	81 f0       	breq	.+32     	; 0x2e4 <__fixunssfsi+0x46>
 2c4:	77 d0       	rcall	.+238    	; 0x3b4 <__fp_zero>
 2c6:	b1 e0       	ldi	r27, 0x01	; 1
 2c8:	08 95       	ret
 2ca:	74 c0       	rjmp	.+232    	; 0x3b4 <__fp_zero>
 2cc:	67 2f       	mov	r22, r23
 2ce:	78 2f       	mov	r23, r24
 2d0:	88 27       	eor	r24, r24
 2d2:	b8 5f       	subi	r27, 0xF8	; 248
 2d4:	39 f0       	breq	.+14     	; 0x2e4 <__fixunssfsi+0x46>
 2d6:	b9 3f       	cpi	r27, 0xF9	; 249
 2d8:	cc f3       	brlt	.-14     	; 0x2cc <__fixunssfsi+0x2e>
 2da:	86 95       	lsr	r24
 2dc:	77 95       	ror	r23
 2de:	67 95       	ror	r22
 2e0:	b3 95       	inc	r27
 2e2:	d9 f7       	brne	.-10     	; 0x2da <__fixunssfsi+0x3c>
 2e4:	3e f4       	brtc	.+14     	; 0x2f4 <__fixunssfsi+0x56>
 2e6:	90 95       	com	r25
 2e8:	80 95       	com	r24
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	08 95       	ret

000002f6 <__floatunsisf>:
 2f6:	e8 94       	clt
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <__floatsisf+0x12>

000002fa <__floatsisf>:
 2fa:	97 fb       	bst	r25, 7
 2fc:	3e f4       	brtc	.+14     	; 0x30c <__floatsisf+0x12>
 2fe:	90 95       	com	r25
 300:	80 95       	com	r24
 302:	70 95       	com	r23
 304:	61 95       	neg	r22
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	8f 4f       	sbci	r24, 0xFF	; 255
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	99 23       	and	r25, r25
 30e:	a9 f0       	breq	.+42     	; 0x33a <__floatsisf+0x40>
 310:	f9 2f       	mov	r31, r25
 312:	96 e9       	ldi	r25, 0x96	; 150
 314:	bb 27       	eor	r27, r27
 316:	93 95       	inc	r25
 318:	f6 95       	lsr	r31
 31a:	87 95       	ror	r24
 31c:	77 95       	ror	r23
 31e:	67 95       	ror	r22
 320:	b7 95       	ror	r27
 322:	f1 11       	cpse	r31, r1
 324:	f8 cf       	rjmp	.-16     	; 0x316 <__floatsisf+0x1c>
 326:	fa f4       	brpl	.+62     	; 0x366 <__floatsisf+0x6c>
 328:	bb 0f       	add	r27, r27
 32a:	11 f4       	brne	.+4      	; 0x330 <__floatsisf+0x36>
 32c:	60 ff       	sbrs	r22, 0
 32e:	1b c0       	rjmp	.+54     	; 0x366 <__floatsisf+0x6c>
 330:	6f 5f       	subi	r22, 0xFF	; 255
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	8f 4f       	sbci	r24, 0xFF	; 255
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	16 c0       	rjmp	.+44     	; 0x366 <__floatsisf+0x6c>
 33a:	88 23       	and	r24, r24
 33c:	11 f0       	breq	.+4      	; 0x342 <__floatsisf+0x48>
 33e:	96 e9       	ldi	r25, 0x96	; 150
 340:	11 c0       	rjmp	.+34     	; 0x364 <__floatsisf+0x6a>
 342:	77 23       	and	r23, r23
 344:	21 f0       	breq	.+8      	; 0x34e <__floatsisf+0x54>
 346:	9e e8       	ldi	r25, 0x8E	; 142
 348:	87 2f       	mov	r24, r23
 34a:	76 2f       	mov	r23, r22
 34c:	05 c0       	rjmp	.+10     	; 0x358 <__floatsisf+0x5e>
 34e:	66 23       	and	r22, r22
 350:	71 f0       	breq	.+28     	; 0x36e <__floatsisf+0x74>
 352:	96 e8       	ldi	r25, 0x86	; 134
 354:	86 2f       	mov	r24, r22
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	2a f0       	brmi	.+10     	; 0x366 <__floatsisf+0x6c>
 35c:	9a 95       	dec	r25
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	da f7       	brpl	.-10     	; 0x35c <__floatsisf+0x62>
 366:	88 0f       	add	r24, r24
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	97 f9       	bld	r25, 7
 36e:	08 95       	ret

00000370 <__fp_split3>:
 370:	57 fd       	sbrc	r21, 7
 372:	90 58       	subi	r25, 0x80	; 128
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	59 f0       	breq	.+22     	; 0x390 <__fp_splitA+0x10>
 37a:	5f 3f       	cpi	r21, 0xFF	; 255
 37c:	71 f0       	breq	.+28     	; 0x39a <__fp_splitA+0x1a>
 37e:	47 95       	ror	r20

00000380 <__fp_splitA>:
 380:	88 0f       	add	r24, r24
 382:	97 fb       	bst	r25, 7
 384:	99 1f       	adc	r25, r25
 386:	61 f0       	breq	.+24     	; 0x3a0 <__fp_splitA+0x20>
 388:	9f 3f       	cpi	r25, 0xFF	; 255
 38a:	79 f0       	breq	.+30     	; 0x3aa <__fp_splitA+0x2a>
 38c:	87 95       	ror	r24
 38e:	08 95       	ret
 390:	12 16       	cp	r1, r18
 392:	13 06       	cpc	r1, r19
 394:	14 06       	cpc	r1, r20
 396:	55 1f       	adc	r21, r21
 398:	f2 cf       	rjmp	.-28     	; 0x37e <__fp_split3+0xe>
 39a:	46 95       	lsr	r20
 39c:	f1 df       	rcall	.-30     	; 0x380 <__fp_splitA>
 39e:	08 c0       	rjmp	.+16     	; 0x3b0 <__fp_splitA+0x30>
 3a0:	16 16       	cp	r1, r22
 3a2:	17 06       	cpc	r1, r23
 3a4:	18 06       	cpc	r1, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	f1 cf       	rjmp	.-30     	; 0x38c <__fp_splitA+0xc>
 3aa:	86 95       	lsr	r24
 3ac:	71 05       	cpc	r23, r1
 3ae:	61 05       	cpc	r22, r1
 3b0:	08 94       	sec
 3b2:	08 95       	ret

000003b4 <__fp_zero>:
 3b4:	e8 94       	clt

000003b6 <__fp_szero>:
 3b6:	bb 27       	eor	r27, r27
 3b8:	66 27       	eor	r22, r22
 3ba:	77 27       	eor	r23, r23
 3bc:	cb 01       	movw	r24, r22
 3be:	97 f9       	bld	r25, 7
 3c0:	08 95       	ret

000003c2 <__mulsf3>:
 3c2:	0b d0       	rcall	.+22     	; 0x3da <__mulsf3x>
 3c4:	78 c0       	rjmp	.+240    	; 0x4b6 <__fp_round>
 3c6:	69 d0       	rcall	.+210    	; 0x49a <__fp_pscA>
 3c8:	28 f0       	brcs	.+10     	; 0x3d4 <__mulsf3+0x12>
 3ca:	6e d0       	rcall	.+220    	; 0x4a8 <__fp_pscB>
 3cc:	18 f0       	brcs	.+6      	; 0x3d4 <__mulsf3+0x12>
 3ce:	95 23       	and	r25, r21
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__mulsf3+0x12>
 3d2:	5a c0       	rjmp	.+180    	; 0x488 <__fp_inf>
 3d4:	5f c0       	rjmp	.+190    	; 0x494 <__fp_nan>
 3d6:	11 24       	eor	r1, r1
 3d8:	ee cf       	rjmp	.-36     	; 0x3b6 <__fp_szero>

000003da <__mulsf3x>:
 3da:	ca df       	rcall	.-108    	; 0x370 <__fp_split3>
 3dc:	a0 f3       	brcs	.-24     	; 0x3c6 <__mulsf3+0x4>

000003de <__mulsf3_pse>:
 3de:	95 9f       	mul	r25, r21
 3e0:	d1 f3       	breq	.-12     	; 0x3d6 <__mulsf3+0x14>
 3e2:	95 0f       	add	r25, r21
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	55 1f       	adc	r21, r21
 3e8:	62 9f       	mul	r22, r18
 3ea:	f0 01       	movw	r30, r0
 3ec:	72 9f       	mul	r23, r18
 3ee:	bb 27       	eor	r27, r27
 3f0:	f0 0d       	add	r31, r0
 3f2:	b1 1d       	adc	r27, r1
 3f4:	63 9f       	mul	r22, r19
 3f6:	aa 27       	eor	r26, r26
 3f8:	f0 0d       	add	r31, r0
 3fa:	b1 1d       	adc	r27, r1
 3fc:	aa 1f       	adc	r26, r26
 3fe:	64 9f       	mul	r22, r20
 400:	66 27       	eor	r22, r22
 402:	b0 0d       	add	r27, r0
 404:	a1 1d       	adc	r26, r1
 406:	66 1f       	adc	r22, r22
 408:	82 9f       	mul	r24, r18
 40a:	22 27       	eor	r18, r18
 40c:	b0 0d       	add	r27, r0
 40e:	a1 1d       	adc	r26, r1
 410:	62 1f       	adc	r22, r18
 412:	73 9f       	mul	r23, r19
 414:	b0 0d       	add	r27, r0
 416:	a1 1d       	adc	r26, r1
 418:	62 1f       	adc	r22, r18
 41a:	83 9f       	mul	r24, r19
 41c:	a0 0d       	add	r26, r0
 41e:	61 1d       	adc	r22, r1
 420:	22 1f       	adc	r18, r18
 422:	74 9f       	mul	r23, r20
 424:	33 27       	eor	r19, r19
 426:	a0 0d       	add	r26, r0
 428:	61 1d       	adc	r22, r1
 42a:	23 1f       	adc	r18, r19
 42c:	84 9f       	mul	r24, r20
 42e:	60 0d       	add	r22, r0
 430:	21 1d       	adc	r18, r1
 432:	82 2f       	mov	r24, r18
 434:	76 2f       	mov	r23, r22
 436:	6a 2f       	mov	r22, r26
 438:	11 24       	eor	r1, r1
 43a:	9f 57       	subi	r25, 0x7F	; 127
 43c:	50 40       	sbci	r21, 0x00	; 0
 43e:	8a f0       	brmi	.+34     	; 0x462 <__mulsf3_pse+0x84>
 440:	e1 f0       	breq	.+56     	; 0x47a <__mulsf3_pse+0x9c>
 442:	88 23       	and	r24, r24
 444:	4a f0       	brmi	.+18     	; 0x458 <__mulsf3_pse+0x7a>
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	bb 1f       	adc	r27, r27
 44c:	66 1f       	adc	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	91 50       	subi	r25, 0x01	; 1
 454:	50 40       	sbci	r21, 0x00	; 0
 456:	a9 f7       	brne	.-22     	; 0x442 <__mulsf3_pse+0x64>
 458:	9e 3f       	cpi	r25, 0xFE	; 254
 45a:	51 05       	cpc	r21, r1
 45c:	70 f0       	brcs	.+28     	; 0x47a <__mulsf3_pse+0x9c>
 45e:	14 c0       	rjmp	.+40     	; 0x488 <__fp_inf>
 460:	aa cf       	rjmp	.-172    	; 0x3b6 <__fp_szero>
 462:	5f 3f       	cpi	r21, 0xFF	; 255
 464:	ec f3       	brlt	.-6      	; 0x460 <__mulsf3_pse+0x82>
 466:	98 3e       	cpi	r25, 0xE8	; 232
 468:	dc f3       	brlt	.-10     	; 0x460 <__mulsf3_pse+0x82>
 46a:	86 95       	lsr	r24
 46c:	77 95       	ror	r23
 46e:	67 95       	ror	r22
 470:	b7 95       	ror	r27
 472:	f7 95       	ror	r31
 474:	e7 95       	ror	r30
 476:	9f 5f       	subi	r25, 0xFF	; 255
 478:	c1 f7       	brne	.-16     	; 0x46a <__mulsf3_pse+0x8c>
 47a:	fe 2b       	or	r31, r30
 47c:	88 0f       	add	r24, r24
 47e:	91 1d       	adc	r25, r1
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	97 f9       	bld	r25, 7
 486:	08 95       	ret

00000488 <__fp_inf>:
 488:	97 f9       	bld	r25, 7
 48a:	9f 67       	ori	r25, 0x7F	; 127
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	08 95       	ret

00000494 <__fp_nan>:
 494:	9f ef       	ldi	r25, 0xFF	; 255
 496:	80 ec       	ldi	r24, 0xC0	; 192
 498:	08 95       	ret

0000049a <__fp_pscA>:
 49a:	00 24       	eor	r0, r0
 49c:	0a 94       	dec	r0
 49e:	16 16       	cp	r1, r22
 4a0:	17 06       	cpc	r1, r23
 4a2:	18 06       	cpc	r1, r24
 4a4:	09 06       	cpc	r0, r25
 4a6:	08 95       	ret

000004a8 <__fp_pscB>:
 4a8:	00 24       	eor	r0, r0
 4aa:	0a 94       	dec	r0
 4ac:	12 16       	cp	r1, r18
 4ae:	13 06       	cpc	r1, r19
 4b0:	14 06       	cpc	r1, r20
 4b2:	05 06       	cpc	r0, r21
 4b4:	08 95       	ret

000004b6 <__fp_round>:
 4b6:	09 2e       	mov	r0, r25
 4b8:	03 94       	inc	r0
 4ba:	00 0c       	add	r0, r0
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__fp_round+0xc>
 4be:	88 23       	and	r24, r24
 4c0:	52 f0       	brmi	.+20     	; 0x4d6 <__fp_round+0x20>
 4c2:	bb 0f       	add	r27, r27
 4c4:	40 f4       	brcc	.+16     	; 0x4d6 <__fp_round+0x20>
 4c6:	bf 2b       	or	r27, r31
 4c8:	11 f4       	brne	.+4      	; 0x4ce <__fp_round+0x18>
 4ca:	60 ff       	sbrs	r22, 0
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__fp_round+0x20>
 4ce:	6f 5f       	subi	r22, 0xFF	; 255
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	08 95       	ret

000004d8 <itoa>:
 4d8:	fb 01       	movw	r30, r22
 4da:	9f 01       	movw	r18, r30
 4dc:	e8 94       	clt
 4de:	42 30       	cpi	r20, 0x02	; 2
 4e0:	c4 f0       	brlt	.+48     	; 0x512 <itoa+0x3a>
 4e2:	45 32       	cpi	r20, 0x25	; 37
 4e4:	b4 f4       	brge	.+44     	; 0x512 <itoa+0x3a>
 4e6:	4a 30       	cpi	r20, 0x0A	; 10
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <itoa+0x1c>
 4ea:	97 fb       	bst	r25, 7
 4ec:	1e f4       	brtc	.+6      	; 0x4f4 <itoa+0x1c>
 4ee:	90 95       	com	r25
 4f0:	81 95       	neg	r24
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	64 2f       	mov	r22, r20
 4f6:	77 27       	eor	r23, r23
 4f8:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodhi4>
 4fc:	80 5d       	subi	r24, 0xD0	; 208
 4fe:	8a 33       	cpi	r24, 0x3A	; 58
 500:	0c f0       	brlt	.+2      	; 0x504 <itoa+0x2c>
 502:	89 5d       	subi	r24, 0xD9	; 217
 504:	81 93       	st	Z+, r24
 506:	cb 01       	movw	r24, r22
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	a1 f7       	brne	.-24     	; 0x4f4 <itoa+0x1c>
 50c:	16 f4       	brtc	.+4      	; 0x512 <itoa+0x3a>
 50e:	5d e2       	ldi	r21, 0x2D	; 45
 510:	51 93       	st	Z+, r21
 512:	10 82       	st	Z, r1
 514:	c9 01       	movw	r24, r18
 516:	0c 94 8d 02 	jmp	0x51a	; 0x51a <strrev>

0000051a <strrev>:
 51a:	dc 01       	movw	r26, r24
 51c:	fc 01       	movw	r30, r24
 51e:	67 2f       	mov	r22, r23
 520:	71 91       	ld	r23, Z+
 522:	77 23       	and	r23, r23
 524:	e1 f7       	brne	.-8      	; 0x51e <strrev+0x4>
 526:	32 97       	sbiw	r30, 0x02	; 2
 528:	04 c0       	rjmp	.+8      	; 0x532 <strrev+0x18>
 52a:	7c 91       	ld	r23, X
 52c:	6d 93       	st	X+, r22
 52e:	70 83       	st	Z, r23
 530:	62 91       	ld	r22, -Z
 532:	ae 17       	cp	r26, r30
 534:	bf 07       	cpc	r27, r31
 536:	c8 f3       	brcs	.-14     	; 0x52a <strrev+0x10>
 538:	08 95       	ret

0000053a <__udivmodhi4>:
 53a:	aa 1b       	sub	r26, r26
 53c:	bb 1b       	sub	r27, r27
 53e:	51 e1       	ldi	r21, 0x11	; 17
 540:	07 c0       	rjmp	.+14     	; 0x550 <__udivmodhi4_ep>

00000542 <__udivmodhi4_loop>:
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	a6 17       	cp	r26, r22
 548:	b7 07       	cpc	r27, r23
 54a:	10 f0       	brcs	.+4      	; 0x550 <__udivmodhi4_ep>
 54c:	a6 1b       	sub	r26, r22
 54e:	b7 0b       	sbc	r27, r23

00000550 <__udivmodhi4_ep>:
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	5a 95       	dec	r21
 556:	a9 f7       	brne	.-22     	; 0x542 <__udivmodhi4_loop>
 558:	80 95       	com	r24
 55a:	90 95       	com	r25
 55c:	bc 01       	movw	r22, r24
 55e:	cd 01       	movw	r24, r26
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
