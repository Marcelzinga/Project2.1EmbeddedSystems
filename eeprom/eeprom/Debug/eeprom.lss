
eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ea  00800100  0000156c  00001600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  008002ea  008002ea  000017ea  2**0
                  ALLOC
  3 .stab         000018e4  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000346  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003418  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001647  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  00004b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba9  00000000  00000000  000051be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00005d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001406  00000000  00000000  0000669d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00007aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ec e6       	ldi	r30, 0x6C	; 108
     17e:	f5 e1       	ldi	r31, 0x15	; 21
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	aa 3e       	cpi	r26, 0xEA	; 234
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	aa ee       	ldi	r26, 0xEA	; 234
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ab 3d       	cpi	r26, 0xDB	; 219
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
     1a0:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <main>:
#include <stdlib.h>
#include "serial.h"
#include "keuze.h"

int main(void){
	ser_init();
     1a8:	0e 94 b2 04 	call	0x964	; 0x964 <ser_init>
	
    while(1)
    {
		geef_Opdracht();						
     1ac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <geef_Opdracht>
     1b0:	fd cf       	rjmp	.-6      	; 0x1ac <main+0x4>

000001b2 <set_Naam>:
	}	
}
*/
//________________________________________________________________________________________//
//Zetten van naam.
void set_Naam(char* n){
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
	for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     1ba:	c0 91 ea 02 	lds	r28, 0x02EA
     1be:	d0 91 eb 02 	lds	r29, 0x02EB
     1c2:	20 91 d9 02 	lds	r18, 0x02D9
     1c6:	30 91 da 02 	lds	r19, 0x02DA
     1ca:	2c 17       	cp	r18, r28
     1cc:	3d 07       	cpc	r19, r29
     1ce:	8c f0       	brlt	.+34     	; 0x1f2 <set_Naam+0x40>
	}	
}
*/
//________________________________________________________________________________________//
//Zetten van naam.
void set_Naam(char* n){
     1d0:	8c 01       	movw	r16, r24
     1d2:	0c 0f       	add	r16, r28
     1d4:	1d 1f       	adc	r17, r29
	for (int teller = locNaam; teller <= grensTellerNaam; teller++){
		eeprom_update_byte((uint8_t*)teller,n[teller]);
     1d6:	f8 01       	movw	r30, r16
     1d8:	61 91       	ld	r22, Z+
     1da:	8f 01       	movw	r16, r30
     1dc:	ce 01       	movw	r24, r28
     1de:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
}
*/
//________________________________________________________________________________________//
//Zetten van naam.
void set_Naam(char* n){
	for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     1e2:	21 96       	adiw	r28, 0x01	; 1
     1e4:	80 91 d9 02 	lds	r24, 0x02D9
     1e8:	90 91 da 02 	lds	r25, 0x02DA
     1ec:	8c 17       	cp	r24, r28
     1ee:	9d 07       	cpc	r25, r29
     1f0:	94 f7       	brge	.-28     	; 0x1d6 <set_Naam+0x24>
		eeprom_update_byte((uint8_t*)teller,n[teller]);
	}
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <return_Naam>:

//Retourneren van naam
void return_Naam(void){
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
	for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     204:	c0 91 ea 02 	lds	r28, 0x02EA
     208:	d0 91 eb 02 	lds	r29, 0x02EB
     20c:	80 91 d9 02 	lds	r24, 0x02D9
     210:	90 91 da 02 	lds	r25, 0x02DA
     214:	8c 17       	cp	r24, r28
     216:	9d 07       	cpc	r25, r29
     218:	8c f0       	brlt	.+34     	; 0x23c <return_Naam+0x40>
		eeprom_update_byte((uint8_t*)teller,n[teller]);
	}
}

//Retourneren van naam
void return_Naam(void){
     21a:	8e 01       	movw	r16, r28
     21c:	08 5d       	subi	r16, 0xD8	; 216
     21e:	1c 4f       	sbci	r17, 0xFC	; 252
	for (int teller = locNaam; teller <= grensTellerNaam; teller++){
		naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     220:	ce 01       	movw	r24, r28
     222:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     226:	f8 01       	movw	r30, r16
     228:	81 93       	st	Z+, r24
     22a:	8f 01       	movw	r16, r30
	}
}

//Retourneren van naam
void return_Naam(void){
	for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     22c:	21 96       	adiw	r28, 0x01	; 1
     22e:	80 91 d9 02 	lds	r24, 0x02D9
     232:	90 91 da 02 	lds	r25, 0x02DA
     236:	8c 17       	cp	r24, r28
     238:	9d 07       	cpc	r25, r29
     23a:	94 f7       	brge	.-28     	; 0x220 <return_Naam+0x24>
		naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(naamRes);
     23c:	88 e2       	ldi	r24, 0x28	; 40
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <set_Locatie>:

//Zetten van locatie.
void set_Locatie(char* l){
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8c 01       	movw	r16, r24
	for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     258:	c0 91 cb 02 	lds	r28, 0x02CB
     25c:	d0 91 cc 02 	lds	r29, 0x02CC
     260:	80 91 d7 02 	lds	r24, 0x02D7
     264:	90 91 d8 02 	lds	r25, 0x02D8
     268:	99 23       	and	r25, r25
     26a:	cc f0       	brlt	.+50     	; 0x29e <set_Locatie+0x50>
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     270:	f8 01       	movw	r30, r16
     272:	e8 0f       	add	r30, r24
     274:	f9 1f       	adc	r31, r25
     276:	ce 01       	movw	r24, r28
     278:	60 81       	ld	r22, Z
     27a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
	ser_writeln(naamRes);
}

//Zetten van locatie.
void set_Locatie(char* l){
	for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     27e:	21 96       	adiw	r28, 0x01	; 1
     280:	80 91 cb 02 	lds	r24, 0x02CB
     284:	90 91 cc 02 	lds	r25, 0x02CC
     288:	9e 01       	movw	r18, r28
     28a:	28 1b       	sub	r18, r24
     28c:	39 0b       	sbc	r19, r25
     28e:	c9 01       	movw	r24, r18
     290:	20 91 d7 02 	lds	r18, 0x02D7
     294:	30 91 d8 02 	lds	r19, 0x02D8
     298:	28 17       	cp	r18, r24
     29a:	39 07       	cpc	r19, r25
     29c:	4c f7       	brge	.-46     	; 0x270 <set_Locatie+0x22>
		eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
	}
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <return_Locatie>:

//Retourneren van locatie.
void return_Locatie(void){
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
	for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     2b8:	e0 90 cb 02 	lds	r14, 0x02CB
     2bc:	f0 90 cc 02 	lds	r15, 0x02CC
     2c0:	80 91 d7 02 	lds	r24, 0x02D7
     2c4:	90 91 d8 02 	lds	r25, 0x02D8
     2c8:	99 23       	and	r25, r25
     2ca:	ec f0       	brlt	.+58     	; 0x306 <return_Locatie+0x5e>
     2cc:	01 e0       	ldi	r16, 0x01	; 1
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	c0 e0       	ldi	r28, 0x00	; 0
     2d2:	d0 e0       	ldi	r29, 0x00	; 0
		locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     2d4:	0f 2e       	mov	r0, r31
     2d6:	fc ef       	ldi	r31, 0xFC	; 252
     2d8:	cf 2e       	mov	r12, r31
     2da:	f2 e0       	ldi	r31, 0x02	; 2
     2dc:	df 2e       	mov	r13, r31
     2de:	f0 2d       	mov	r31, r0
     2e0:	c7 01       	movw	r24, r14
     2e2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     2e6:	cc 0d       	add	r28, r12
     2e8:	dd 1d       	adc	r29, r13
     2ea:	88 83       	st	Y, r24
	}
}

//Retourneren van locatie.
void return_Locatie(void){
	for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     2ec:	08 94       	sec
     2ee:	e1 1c       	adc	r14, r1
     2f0:	f1 1c       	adc	r15, r1
     2f2:	e8 01       	movw	r28, r16
     2f4:	0f 5f       	subi	r16, 0xFF	; 255
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	80 91 d7 02 	lds	r24, 0x02D7
     2fc:	90 91 d8 02 	lds	r25, 0x02D8
     300:	8c 17       	cp	r24, r28
     302:	9d 07       	cpc	r25, r29
     304:	6c f7       	brge	.-38     	; 0x2e0 <return_Locatie+0x38>
		locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(locatieRes);
     306:	8c ef       	ldi	r24, 0xFC	; 252
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	df 90       	pop	r13
     31c:	cf 90       	pop	r12
     31e:	08 95       	ret

00000320 <set_Versie>:

//Zetten van versienummer.
void set_Versie(char* v){
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
	for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     32a:	c0 91 c9 02 	lds	r28, 0x02C9
     32e:	d0 91 ca 02 	lds	r29, 0x02CA
     332:	80 91 d5 02 	lds	r24, 0x02D5
     336:	90 91 d6 02 	lds	r25, 0x02D6
     33a:	99 23       	and	r25, r25
     33c:	cc f0       	brlt	.+50     	; 0x370 <set_Versie+0x50>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     342:	f8 01       	movw	r30, r16
     344:	e8 0f       	add	r30, r24
     346:	f9 1f       	adc	r31, r25
     348:	ce 01       	movw	r24, r28
     34a:	60 81       	ld	r22, Z
     34c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
	ser_writeln(locatieRes);
}

//Zetten van versienummer.
void set_Versie(char* v){
	for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     350:	21 96       	adiw	r28, 0x01	; 1
     352:	80 91 c9 02 	lds	r24, 0x02C9
     356:	90 91 ca 02 	lds	r25, 0x02CA
     35a:	9e 01       	movw	r18, r28
     35c:	28 1b       	sub	r18, r24
     35e:	39 0b       	sbc	r19, r25
     360:	c9 01       	movw	r24, r18
     362:	20 91 d5 02 	lds	r18, 0x02D5
     366:	30 91 d6 02 	lds	r19, 0x02D6
     36a:	28 17       	cp	r18, r24
     36c:	39 07       	cpc	r19, r25
     36e:	4c f7       	brge	.-46     	; 0x342 <set_Versie+0x22>
		eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
	}
}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	08 95       	ret

0000037a <return_Versie>:

//Retourneren versie nummer.
void return_Versie(void){
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
	for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     38a:	e0 90 c9 02 	lds	r14, 0x02C9
     38e:	f0 90 ca 02 	lds	r15, 0x02CA
     392:	80 91 d5 02 	lds	r24, 0x02D5
     396:	90 91 d6 02 	lds	r25, 0x02D6
     39a:	99 23       	and	r25, r25
     39c:	ec f0       	brlt	.+58     	; 0x3d8 <return_Versie+0x5e>
     39e:	01 e0       	ldi	r16, 0x01	; 1
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	c0 e0       	ldi	r28, 0x00	; 0
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
		versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     3a6:	0f 2e       	mov	r0, r31
     3a8:	f8 e7       	ldi	r31, 0x78	; 120
     3aa:	cf 2e       	mov	r12, r31
     3ac:	f3 e0       	ldi	r31, 0x03	; 3
     3ae:	df 2e       	mov	r13, r31
     3b0:	f0 2d       	mov	r31, r0
     3b2:	c7 01       	movw	r24, r14
     3b4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     3b8:	cc 0d       	add	r28, r12
     3ba:	dd 1d       	adc	r29, r13
     3bc:	88 83       	st	Y, r24
	}
}

//Retourneren versie nummer.
void return_Versie(void){
	for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     3be:	08 94       	sec
     3c0:	e1 1c       	adc	r14, r1
     3c2:	f1 1c       	adc	r15, r1
     3c4:	e8 01       	movw	r28, r16
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	80 91 d5 02 	lds	r24, 0x02D5
     3ce:	90 91 d6 02 	lds	r25, 0x02D6
     3d2:	8c 17       	cp	r24, r28
     3d4:	9d 07       	cpc	r25, r29
     3d6:	6c f7       	brge	.-38     	; 0x3b2 <return_Versie+0x38>
		versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(versieRes);
     3d8:	88 e7       	ldi	r24, 0x78	; 120
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	08 95       	ret

000003f2 <set_Temp>:

//Zetten van temperatuur grenswaarde.
void set_Temp(char* t){
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	8c 01       	movw	r16, r24
	for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     3fc:	c0 91 c7 02 	lds	r28, 0x02C7
     400:	d0 91 c8 02 	lds	r29, 0x02C8
     404:	80 91 d3 02 	lds	r24, 0x02D3
     408:	90 91 d4 02 	lds	r25, 0x02D4
     40c:	99 23       	and	r25, r25
     40e:	cc f0       	brlt	.+50     	; 0x442 <set_Temp+0x50>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     414:	f8 01       	movw	r30, r16
     416:	e8 0f       	add	r30, r24
     418:	f9 1f       	adc	r31, r25
     41a:	ce 01       	movw	r24, r28
     41c:	60 81       	ld	r22, Z
     41e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
	ser_writeln(versieRes);
}

//Zetten van temperatuur grenswaarde.
void set_Temp(char* t){
	for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     422:	21 96       	adiw	r28, 0x01	; 1
     424:	80 91 c7 02 	lds	r24, 0x02C7
     428:	90 91 c8 02 	lds	r25, 0x02C8
     42c:	9e 01       	movw	r18, r28
     42e:	28 1b       	sub	r18, r24
     430:	39 0b       	sbc	r19, r25
     432:	c9 01       	movw	r24, r18
     434:	20 91 d3 02 	lds	r18, 0x02D3
     438:	30 91 d4 02 	lds	r19, 0x02D4
     43c:	28 17       	cp	r18, r24
     43e:	39 07       	cpc	r19, r25
     440:	4c f7       	brge	.-46     	; 0x414 <set_Temp+0x22>
		eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
	}
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <return_Temp>:

//Retourneren van grenswaarde temperatuur.
void return_Temp(void){
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
	for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     45c:	e0 90 c7 02 	lds	r14, 0x02C7
     460:	f0 90 c8 02 	lds	r15, 0x02C8
     464:	80 91 d3 02 	lds	r24, 0x02D3
     468:	90 91 d4 02 	lds	r25, 0x02D4
     46c:	99 23       	and	r25, r25
     46e:	ec f0       	brlt	.+58     	; 0x4aa <return_Temp+0x5e>
     470:	01 e0       	ldi	r16, 0x01	; 1
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	c0 e0       	ldi	r28, 0x00	; 0
     476:	d0 e0       	ldi	r29, 0x00	; 0
		temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     478:	0f 2e       	mov	r0, r31
     47a:	fa ea       	ldi	r31, 0xAA	; 170
     47c:	cf 2e       	mov	r12, r31
     47e:	f3 e0       	ldi	r31, 0x03	; 3
     480:	df 2e       	mov	r13, r31
     482:	f0 2d       	mov	r31, r0
     484:	c7 01       	movw	r24, r14
     486:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     48a:	cc 0d       	add	r28, r12
     48c:	dd 1d       	adc	r29, r13
     48e:	88 83       	st	Y, r24
	}
}

//Retourneren van grenswaarde temperatuur.
void return_Temp(void){
	for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     490:	08 94       	sec
     492:	e1 1c       	adc	r14, r1
     494:	f1 1c       	adc	r15, r1
     496:	e8 01       	movw	r28, r16
     498:	0f 5f       	subi	r16, 0xFF	; 255
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
     49c:	80 91 d3 02 	lds	r24, 0x02D3
     4a0:	90 91 d4 02 	lds	r25, 0x02D4
     4a4:	8c 17       	cp	r24, r28
     4a6:	9d 07       	cpc	r25, r29
     4a8:	6c f7       	brge	.-38     	; 0x484 <return_Temp+0x38>
		temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(temperatuurRes);
     4aa:	8a ea       	ldi	r24, 0xAA	; 170
     4ac:	93 e0       	ldi	r25, 0x03	; 3
     4ae:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	08 95       	ret

000004c4 <set_Licht>:

//Zetten van lichtintensiteit grenswaarde.
void set_Licht(char* li){
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	8c 01       	movw	r16, r24
	for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     4ce:	c0 91 c5 02 	lds	r28, 0x02C5
     4d2:	d0 91 c6 02 	lds	r29, 0x02C6
     4d6:	80 91 d1 02 	lds	r24, 0x02D1
     4da:	90 91 d2 02 	lds	r25, 0x02D2
     4de:	99 23       	and	r25, r25
     4e0:	cc f0       	brlt	.+50     	; 0x514 <set_Licht+0x50>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     4e6:	f8 01       	movw	r30, r16
     4e8:	e8 0f       	add	r30, r24
     4ea:	f9 1f       	adc	r31, r25
     4ec:	ce 01       	movw	r24, r28
     4ee:	60 81       	ld	r22, Z
     4f0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
	ser_writeln(temperatuurRes);
}

//Zetten van lichtintensiteit grenswaarde.
void set_Licht(char* li){
	for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	80 91 c5 02 	lds	r24, 0x02C5
     4fa:	90 91 c6 02 	lds	r25, 0x02C6
     4fe:	9e 01       	movw	r18, r28
     500:	28 1b       	sub	r18, r24
     502:	39 0b       	sbc	r19, r25
     504:	c9 01       	movw	r24, r18
     506:	20 91 d1 02 	lds	r18, 0x02D1
     50a:	30 91 d2 02 	lds	r19, 0x02D2
     50e:	28 17       	cp	r18, r24
     510:	39 07       	cpc	r19, r25
     512:	4c f7       	brge	.-46     	; 0x4e6 <set_Licht+0x22>
		eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
	}
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	08 95       	ret

0000051e <return_Licht>:


//Retourneren van grenswaarde lichtintensiteit.
void return_Licht(void){
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
	for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     52a:	e0 90 c5 02 	lds	r14, 0x02C5
     52e:	f0 90 c6 02 	lds	r15, 0x02C6
     532:	80 91 d1 02 	lds	r24, 0x02D1
     536:	90 91 d2 02 	lds	r25, 0x02D2
     53a:	99 23       	and	r25, r25
     53c:	bc f0       	brlt	.+46     	; 0x56c <return_Licht+0x4e>
     53e:	01 e0       	ldi	r16, 0x01	; 1
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	d0 e0       	ldi	r29, 0x00	; 0
		lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     546:	c7 01       	movw	r24, r14
     548:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     54c:	c9 5a       	subi	r28, 0xA9	; 169
     54e:	dc 4f       	sbci	r29, 0xFC	; 252
     550:	88 83       	st	Y, r24
}


//Retourneren van grenswaarde lichtintensiteit.
void return_Licht(void){
	for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     552:	08 94       	sec
     554:	e1 1c       	adc	r14, r1
     556:	f1 1c       	adc	r15, r1
     558:	e8 01       	movw	r28, r16
     55a:	0f 5f       	subi	r16, 0xFF	; 255
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	80 91 d1 02 	lds	r24, 0x02D1
     562:	90 91 d2 02 	lds	r25, 0x02D2
     566:	8c 17       	cp	r24, r28
     568:	9d 07       	cpc	r25, r29
     56a:	6c f7       	brge	.-38     	; 0x546 <return_Licht+0x28>
		lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(lichtintRes);
     56c:	87 e5       	ldi	r24, 0x57	; 87
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	08 95       	ret

00000582 <set_MaxInrol>:

//Zetten van de maximale inrol.
void set_MaxInrol(char* in){
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	8c 01       	movw	r16, r24
	for (int teller = locMaxInrol; (teller - locMaxInrol) <= grensTellerMaxInrol; teller++){
     58c:	c0 91 c3 02 	lds	r28, 0x02C3
     590:	d0 91 c4 02 	lds	r29, 0x02C4
     594:	80 91 cf 02 	lds	r24, 0x02CF
     598:	90 91 d0 02 	lds	r25, 0x02D0
     59c:	99 23       	and	r25, r25
     59e:	cc f0       	brlt	.+50     	; 0x5d2 <set_MaxInrol+0x50>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_update_byte((uint8_t*)teller,in[teller - locMaxInrol]);
     5a4:	f8 01       	movw	r30, r16
     5a6:	e8 0f       	add	r30, r24
     5a8:	f9 1f       	adc	r31, r25
     5aa:	ce 01       	movw	r24, r28
     5ac:	60 81       	ld	r22, Z
     5ae:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
	ser_writeln(lichtintRes);
}

//Zetten van de maximale inrol.
void set_MaxInrol(char* in){
	for (int teller = locMaxInrol; (teller - locMaxInrol) <= grensTellerMaxInrol; teller++){
     5b2:	21 96       	adiw	r28, 0x01	; 1
     5b4:	80 91 c3 02 	lds	r24, 0x02C3
     5b8:	90 91 c4 02 	lds	r25, 0x02C4
     5bc:	9e 01       	movw	r18, r28
     5be:	28 1b       	sub	r18, r24
     5c0:	39 0b       	sbc	r19, r25
     5c2:	c9 01       	movw	r24, r18
     5c4:	20 91 cf 02 	lds	r18, 0x02CF
     5c8:	30 91 d0 02 	lds	r19, 0x02D0
     5cc:	28 17       	cp	r18, r24
     5ce:	39 07       	cpc	r19, r25
     5d0:	4c f7       	brge	.-46     	; 0x5a4 <set_MaxInrol+0x22>
		eeprom_update_byte((uint8_t*)teller,in[teller - locMaxInrol]);
	}
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <return_MaxInrol>:


//Retourneren van de maximale inrol waarde.
void return_MaxInrol(void){
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
	for (int teller = locMaxInrol; (teller - locMaxInrol) <= grensTellerMaxInrol; teller++){
     5e8:	e0 90 c3 02 	lds	r14, 0x02C3
     5ec:	f0 90 c4 02 	lds	r15, 0x02C4
     5f0:	80 91 cf 02 	lds	r24, 0x02CF
     5f4:	90 91 d0 02 	lds	r25, 0x02D0
     5f8:	99 23       	and	r25, r25
     5fa:	bc f0       	brlt	.+46     	; 0x62a <return_MaxInrol+0x4e>
     5fc:	01 e0       	ldi	r16, 0x01	; 1
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	c0 e0       	ldi	r28, 0x00	; 0
     602:	d0 e0       	ldi	r29, 0x00	; 0
		maxInrolRes[teller - locMaxInrol] = eeprom_read_byte((uint8_t*)teller);
     604:	c7 01       	movw	r24, r14
     606:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     60a:	cc 5d       	subi	r28, 0xDC	; 220
     60c:	dc 4f       	sbci	r29, 0xFC	; 252
     60e:	88 83       	st	Y, r24
}


//Retourneren van de maximale inrol waarde.
void return_MaxInrol(void){
	for (int teller = locMaxInrol; (teller - locMaxInrol) <= grensTellerMaxInrol; teller++){
     610:	08 94       	sec
     612:	e1 1c       	adc	r14, r1
     614:	f1 1c       	adc	r15, r1
     616:	e8 01       	movw	r28, r16
     618:	0f 5f       	subi	r16, 0xFF	; 255
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	80 91 cf 02 	lds	r24, 0x02CF
     620:	90 91 d0 02 	lds	r25, 0x02D0
     624:	8c 17       	cp	r24, r28
     626:	9d 07       	cpc	r25, r29
     628:	6c f7       	brge	.-38     	; 0x604 <return_MaxInrol+0x28>
		maxInrolRes[teller - locMaxInrol] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(maxInrolRes);
     62a:	84 e2       	ldi	r24, 0x24	; 36
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <set_MaxUitrol>:

//Zetten van de maximale uitrol.
void set_MaxUitrol(char* uit){
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	8c 01       	movw	r16, r24
	for (int teller = locMaxUitrol; (teller - locMaxUitrol) <= grensTellerMaxUitrol; teller++){
     64a:	c0 91 c1 02 	lds	r28, 0x02C1
     64e:	d0 91 c2 02 	lds	r29, 0x02C2
     652:	80 91 cd 02 	lds	r24, 0x02CD
     656:	90 91 ce 02 	lds	r25, 0x02CE
     65a:	99 23       	and	r25, r25
     65c:	cc f0       	brlt	.+50     	; 0x690 <set_MaxUitrol+0x50>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_update_byte((uint8_t*)teller,uit[teller - locMaxUitrol]);
     662:	f8 01       	movw	r30, r16
     664:	e8 0f       	add	r30, r24
     666:	f9 1f       	adc	r31, r25
     668:	ce 01       	movw	r24, r28
     66a:	60 81       	ld	r22, Z
     66c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__eeupd_byte_m328p>
	ser_writeln(maxInrolRes);
}

//Zetten van de maximale uitrol.
void set_MaxUitrol(char* uit){
	for (int teller = locMaxUitrol; (teller - locMaxUitrol) <= grensTellerMaxUitrol; teller++){
     670:	21 96       	adiw	r28, 0x01	; 1
     672:	80 91 c1 02 	lds	r24, 0x02C1
     676:	90 91 c2 02 	lds	r25, 0x02C2
     67a:	9e 01       	movw	r18, r28
     67c:	28 1b       	sub	r18, r24
     67e:	39 0b       	sbc	r19, r25
     680:	c9 01       	movw	r24, r18
     682:	20 91 cd 02 	lds	r18, 0x02CD
     686:	30 91 ce 02 	lds	r19, 0x02CE
     68a:	28 17       	cp	r18, r24
     68c:	39 07       	cpc	r19, r25
     68e:	4c f7       	brge	.-46     	; 0x662 <set_MaxUitrol+0x22>
		eeprom_update_byte((uint8_t*)teller,uit[teller - locMaxUitrol]);
	}
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <return_MaxUitrol>:


//Retourneren van de maximale uitrol waarde.
void return_MaxUitrol(void){
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	for (int teller = locMaxUitrol; (teller - locMaxUitrol) <= grensTellerMaxUitrol; teller++){
     6a6:	e0 90 c1 02 	lds	r14, 0x02C1
     6aa:	f0 90 c2 02 	lds	r15, 0x02C2
     6ae:	80 91 cd 02 	lds	r24, 0x02CD
     6b2:	90 91 ce 02 	lds	r25, 0x02CE
     6b6:	99 23       	and	r25, r25
     6b8:	bc f0       	brlt	.+46     	; 0x6e8 <return_MaxUitrol+0x4e>
     6ba:	01 e0       	ldi	r16, 0x01	; 1
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	c0 e0       	ldi	r28, 0x00	; 0
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
		maxUitrolRes[teller - locMaxUitrol] = eeprom_read_byte((uint8_t*)teller);
     6c2:	c7 01       	movw	r24, r14
     6c4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__eerd_byte_m328p>
     6c8:	c4 51       	subi	r28, 0x14	; 20
     6ca:	dd 4f       	sbci	r29, 0xFD	; 253
     6cc:	88 83       	st	Y, r24
}


//Retourneren van de maximale uitrol waarde.
void return_MaxUitrol(void){
	for (int teller = locMaxUitrol; (teller - locMaxUitrol) <= grensTellerMaxUitrol; teller++){
     6ce:	08 94       	sec
     6d0:	e1 1c       	adc	r14, r1
     6d2:	f1 1c       	adc	r15, r1
     6d4:	e8 01       	movw	r28, r16
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	80 91 cd 02 	lds	r24, 0x02CD
     6de:	90 91 ce 02 	lds	r25, 0x02CE
     6e2:	8c 17       	cp	r24, r28
     6e4:	9d 07       	cpc	r25, r29
     6e6:	6c f7       	brge	.-38     	; 0x6c2 <return_MaxUitrol+0x28>
		maxUitrolRes[teller - locMaxUitrol] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(maxUitrolRes);
     6e8:	8c ee       	ldi	r24, 0xEC	; 236
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <geef_Opdracht>:
char maxUitrolRes[4];

char opdracht[25];

//Starten van de keuze/
void geef_Opdracht(void){
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
	
	ser_writeln("Geef uw opdracht");
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
	ser_readln(opdracht, sizeof(opdracht), 1);
     70a:	cb e5       	ldi	r28, 0x5B	; 91
     70c:	d3 e0       	ldi	r29, 0x03	; 3
     70e:	ce 01       	movw	r24, r28
     710:	69 e1       	ldi	r22, 0x19	; 25
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
	
	//Functie oproepen om het zonnescherm een naam te geven.
	if(strcmp("set naam", opdracht) == 0){
     71a:	81 e1       	ldi	r24, 0x11	; 17
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	be 01       	movw	r22, r28
     720:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     724:	28 2f       	mov	r18, r24
     726:	39 2f       	mov	r19, r25
     728:	21 15       	cp	r18, r1
     72a:	31 05       	cpc	r19, r1
     72c:	81 f4       	brne	.+32     	; 0x74e <geef_Opdracht+0x50>
		ser_writeln("Zet de naam van uw zonnescherm");
     72e:	8a e1       	ldi	r24, 0x1A	; 26
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(naam, sizeof(naam), 1);
     736:	c0 e8       	ldi	r28, 0x80	; 128
     738:	d3 e0       	ldi	r29, 0x03	; 3
     73a:	ce 01       	movw	r24, r28
     73c:	68 e2       	ldi	r22, 0x28	; 40
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_Naam(naam);
     746:	ce 01       	movw	r24, r28
     748:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <set_Naam>
     74c:	08 c1       	rjmp	.+528    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de naam van het zonnescherm te ontvangen.
	else if(strcmp("return naam", opdracht) == 0){
     74e:	89 e3       	ldi	r24, 0x39	; 57
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	6b e5       	ldi	r22, 0x5B	; 91
     754:	73 e0       	ldi	r23, 0x03	; 3
     756:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     75a:	28 2f       	mov	r18, r24
     75c:	39 2f       	mov	r19, r25
     75e:	21 15       	cp	r18, r1
     760:	31 05       	cpc	r19, r1
     762:	19 f4       	brne	.+6      	; 0x76a <geef_Opdracht+0x6c>
		return_Naam();
     764:	0e 94 fe 00 	call	0x1fc	; 0x1fc <return_Naam>
     768:	fa c0       	rjmp	.+500    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om een locatie aan het zonnescherm toe te wijzen.
	else if(strcmp("set locatie", opdracht) == 0){
     76a:	85 e4       	ldi	r24, 0x45	; 69
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	6b e5       	ldi	r22, 0x5B	; 91
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     776:	28 2f       	mov	r18, r24
     778:	39 2f       	mov	r19, r25
     77a:	21 15       	cp	r18, r1
     77c:	31 05       	cpc	r19, r1
     77e:	81 f4       	brne	.+32     	; 0x7a0 <geef_Opdracht+0xa2>
		ser_writeln("Zet de locatie van uw zonnescherm");
     780:	81 e5       	ldi	r24, 0x51	; 81
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(locatie, sizeof(locatie), 1);
     788:	cd ea       	ldi	r28, 0xAD	; 173
     78a:	d3 e0       	ldi	r29, 0x03	; 3
     78c:	ce 01       	movw	r24, r28
     78e:	68 e2       	ldi	r22, 0x28	; 40
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_Locatie(locatie);
     798:	ce 01       	movw	r24, r28
     79a:	0e 94 27 01 	call	0x24e	; 0x24e <set_Locatie>
     79e:	df c0       	rjmp	.+446    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de locatie van het zonnescherm te ontvangen.
	else if(strcmp("return locatie", opdracht) == 0){
     7a0:	83 e7       	ldi	r24, 0x73	; 115
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	6b e5       	ldi	r22, 0x5B	; 91
     7a6:	73 e0       	ldi	r23, 0x03	; 3
     7a8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     7ac:	28 2f       	mov	r18, r24
     7ae:	39 2f       	mov	r19, r25
     7b0:	21 15       	cp	r18, r1
     7b2:	31 05       	cpc	r19, r1
     7b4:	19 f4       	brne	.+6      	; 0x7bc <geef_Opdracht+0xbe>
		return_Locatie();
     7b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <return_Locatie>
     7ba:	d1 c0       	rjmp	.+418    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om een versie nummer aan het zonnescherm te koppelen.
	else if(strcmp("set versie", opdracht) == 0){
     7bc:	82 e8       	ldi	r24, 0x82	; 130
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	6b e5       	ldi	r22, 0x5B	; 91
     7c2:	73 e0       	ldi	r23, 0x03	; 3
     7c4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     7c8:	28 2f       	mov	r18, r24
     7ca:	39 2f       	mov	r19, r25
     7cc:	21 15       	cp	r18, r1
     7ce:	31 05       	cpc	r19, r1
     7d0:	81 f4       	brne	.+32     	; 0x7f2 <geef_Opdracht+0xf4>
		ser_writeln("Zet de versie van uw zonnepaneel");
     7d2:	8d e8       	ldi	r24, 0x8D	; 141
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(versie, sizeof(versie), 1);
     7da:	c0 ef       	ldi	r28, 0xF0	; 240
     7dc:	d2 e0       	ldi	r29, 0x02	; 2
     7de:	ce 01       	movw	r24, r28
     7e0:	68 e0       	ldi	r22, 0x08	; 8
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_Versie(versie);
     7ea:	ce 01       	movw	r24, r28
     7ec:	0e 94 90 01 	call	0x320	; 0x320 <set_Versie>
     7f0:	b6 c0       	rjmp	.+364    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de versie nummer van het zonnescherm te ontvangen.
	else if(strcmp("return versie", opdracht) == 0){
     7f2:	8e ea       	ldi	r24, 0xAE	; 174
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	6b e5       	ldi	r22, 0x5B	; 91
     7f8:	73 e0       	ldi	r23, 0x03	; 3
     7fa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     7fe:	28 2f       	mov	r18, r24
     800:	39 2f       	mov	r19, r25
     802:	21 15       	cp	r18, r1
     804:	31 05       	cpc	r19, r1
     806:	19 f4       	brne	.+6      	; 0x80e <geef_Opdracht+0x110>
		return_Versie();
     808:	0e 94 bd 01 	call	0x37a	; 0x37a <return_Versie>
     80c:	a8 c0       	rjmp	.+336    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om temperatuur grenswaarde aan het zonnescherm te koppelen.
	else if(strcmp("set temp", opdracht) == 0){
     80e:	8c eb       	ldi	r24, 0xBC	; 188
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	6b e5       	ldi	r22, 0x5B	; 91
     814:	73 e0       	ldi	r23, 0x03	; 3
     816:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     81a:	28 2f       	mov	r18, r24
     81c:	39 2f       	mov	r19, r25
     81e:	21 15       	cp	r18, r1
     820:	31 05       	cpc	r19, r1
     822:	81 f4       	brne	.+32     	; 0x844 <geef_Opdracht+0x146>
		ser_writeln("Zet de temperatuur grenswaarde van uw zonnepaneel");
     824:	85 ec       	ldi	r24, 0xC5	; 197
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(temperatuur, sizeof(temperatuur), 1);
     82c:	c4 e5       	ldi	r28, 0x54	; 84
     82e:	d3 e0       	ldi	r29, 0x03	; 3
     830:	ce 01       	movw	r24, r28
     832:	63 e0       	ldi	r22, 0x03	; 3
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_Temp(temperatuur);
     83c:	ce 01       	movw	r24, r28
     83e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <set_Temp>
     842:	8d c0       	rjmp	.+282    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de temperatuur grenswaarde van het zonnescherm te ontvangen.
	else if(strcmp("return temp", opdracht) == 0){
     844:	87 ef       	ldi	r24, 0xF7	; 247
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	6b e5       	ldi	r22, 0x5B	; 91
     84a:	73 e0       	ldi	r23, 0x03	; 3
     84c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     850:	28 2f       	mov	r18, r24
     852:	39 2f       	mov	r19, r25
     854:	21 15       	cp	r18, r1
     856:	31 05       	cpc	r19, r1
     858:	19 f4       	brne	.+6      	; 0x860 <geef_Opdracht+0x162>
		return_Temp();
     85a:	0e 94 26 02 	call	0x44c	; 0x44c <return_Temp>
     85e:	7f c0       	rjmp	.+254    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om lichtintensiteit grenswaarde aan het zonnescherm te koppelen.
	else if(strcmp("set licht", opdracht) == 0){
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	6b e5       	ldi	r22, 0x5B	; 91
     866:	73 e0       	ldi	r23, 0x03	; 3
     868:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     86c:	28 2f       	mov	r18, r24
     86e:	39 2f       	mov	r19, r25
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	81 f4       	brne	.+32     	; 0x896 <geef_Opdracht+0x198>
		ser_writeln("Zet de lichtintensiteit grenswaarde van uw zonnepaneel");
     876:	8d e0       	ldi	r24, 0x0D	; 13
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(lichtint, sizeof(lichtint), 1);
     87e:	c4 e7       	ldi	r28, 0x74	; 116
     880:	d3 e0       	ldi	r29, 0x03	; 3
     882:	ce 01       	movw	r24, r28
     884:	64 e0       	ldi	r22, 0x04	; 4
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_Licht(lichtint);
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 62 02 	call	0x4c4	; 0x4c4 <set_Licht>
     894:	64 c0       	rjmp	.+200    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de lichtintensiteit grenswaarde van het zonnescherm te ontvangen.
	else if(strcmp("return licht", opdracht) == 0){
     896:	84 e4       	ldi	r24, 0x44	; 68
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	6b e5       	ldi	r22, 0x5B	; 91
     89c:	73 e0       	ldi	r23, 0x03	; 3
     89e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     8a2:	28 2f       	mov	r18, r24
     8a4:	39 2f       	mov	r19, r25
     8a6:	21 15       	cp	r18, r1
     8a8:	31 05       	cpc	r19, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <geef_Opdracht+0x1b4>
		return_Licht();
     8ac:	0e 94 8f 02 	call	0x51e	; 0x51e <return_Licht>
     8b0:	56 c0       	rjmp	.+172    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de maximale inrol waarde te geven.
	else if(strcmp("set inrol", opdracht) == 0){
     8b2:	81 e5       	ldi	r24, 0x51	; 81
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	6b e5       	ldi	r22, 0x5B	; 91
     8b8:	73 e0       	ldi	r23, 0x03	; 3
     8ba:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     8be:	28 2f       	mov	r18, r24
     8c0:	39 2f       	mov	r19, r25
     8c2:	21 15       	cp	r18, r1
     8c4:	31 05       	cpc	r19, r1
     8c6:	81 f4       	brne	.+32     	; 0x8e8 <geef_Opdracht+0x1ea>
		ser_writeln("Zet tot hoever de scherm kan inrollen in (cm)");
     8c8:	8b e5       	ldi	r24, 0x5B	; 91
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(maxInrol, sizeof(maxInrol), 1);
     8d0:	c0 e5       	ldi	r28, 0x50	; 80
     8d2:	d3 e0       	ldi	r29, 0x03	; 3
     8d4:	ce 01       	movw	r24, r28
     8d6:	64 e0       	ldi	r22, 0x04	; 4
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_MaxInrol(maxInrol);
     8e0:	ce 01       	movw	r24, r28
     8e2:	0e 94 c1 02 	call	0x582	; 0x582 <set_MaxInrol>
     8e6:	3b c0       	rjmp	.+118    	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de maximale inrol waarde te ontvangen.
	else if(strcmp("return inrol", opdracht) == 0){
     8e8:	89 e8       	ldi	r24, 0x89	; 137
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	6b e5       	ldi	r22, 0x5B	; 91
     8ee:	73 e0       	ldi	r23, 0x03	; 3
     8f0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     8f4:	28 2f       	mov	r18, r24
     8f6:	39 2f       	mov	r19, r25
     8f8:	21 15       	cp	r18, r1
     8fa:	31 05       	cpc	r19, r1
     8fc:	19 f4       	brne	.+6      	; 0x904 <__stack+0x5>
		return_MaxInrol();
     8fe:	0e 94 ee 02 	call	0x5dc	; 0x5dc <return_MaxInrol>
     902:	2d c0       	rjmp	.+90     	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de maximale uitrol waarde te geven.
	else if(strcmp("set uitrol", opdracht) == 0){
     904:	86 e9       	ldi	r24, 0x96	; 150
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	6b e5       	ldi	r22, 0x5B	; 91
     90a:	73 e0       	ldi	r23, 0x03	; 3
     90c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     910:	28 2f       	mov	r18, r24
     912:	39 2f       	mov	r19, r25
     914:	21 15       	cp	r18, r1
     916:	31 05       	cpc	r19, r1
     918:	81 f4       	brne	.+32     	; 0x93a <__stack+0x3b>
		ser_writeln("Zet tot hoever de scherm kan inrollen in (cm)");
     91a:	8b e5       	ldi	r24, 0x5B	; 91
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
		ser_readln(maxUitrol, sizeof(maxUitrol), 1);
     922:	c8 ef       	ldi	r28, 0xF8	; 248
     924:	d2 e0       	ldi	r29, 0x02	; 2
     926:	ce 01       	movw	r24, r28
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	0e 94 1c 05 	call	0xa38	; 0xa38 <ser_readln>
		set_MaxUitrol(maxUitrol);
     932:	ce 01       	movw	r24, r28
     934:	0e 94 20 03 	call	0x640	; 0x640 <set_MaxUitrol>
     938:	12 c0       	rjmp	.+36     	; 0x95e <__stack+0x5f>
	}
	
	//Functie oproepen om de maximale uitrol waarde te ontvangen.
	else if(strcmp("return uitrol", opdracht) == 0){
     93a:	81 ea       	ldi	r24, 0xA1	; 161
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	6b e5       	ldi	r22, 0x5B	; 91
     940:	73 e0       	ldi	r23, 0x03	; 3
     942:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <strcmp>
     946:	28 2f       	mov	r18, r24
     948:	39 2f       	mov	r19, r25
     94a:	21 15       	cp	r18, r1
     94c:	31 05       	cpc	r19, r1
     94e:	19 f4       	brne	.+6      	; 0x956 <__stack+0x57>
		return_MaxUitrol();
     950:	0e 94 4d 03 	call	0x69a	; 0x69a <return_MaxUitrol>
     954:	04 c0       	rjmp	.+8      	; 0x95e <__stack+0x5f>
	}
	
	//Invoer voldoet niet aan de eisen
	else{
		ser_writeln("Waarde is onjuist");
     956:	8f ea       	ldi	r24, 0xAF	; 175
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	0e 94 0a 05 	call	0xa14	; 0xa14 <ser_writeln>
	}
	
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     964:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     968:	83 e3       	ldi	r24, 0x33	; 51
     96a:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     96e:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     972:	88 e1       	ldi	r24, 0x18	; 24
     974:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     97e:	8b ed       	ldi	r24, 0xDB	; 219
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	90 93 d8 03 	sts	0x03D8, r25
     986:	80 93 d7 03 	sts	0x03D7, r24
}
     98a:	08 95       	ret

0000098c <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     98c:	e0 ec       	ldi	r30, 0xC0	; 192
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	90 81       	ld	r25, Z
     992:	95 ff       	sbrs	r25, 5
     994:	fd cf       	rjmp	.-6      	; 0x990 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     996:	80 93 c6 00 	sts	0x00C6, r24
}
     99a:	08 95       	ret

0000099c <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h 
void ser_stdio_putchar(char c, FILE *stream) {
     99c:	cf 93       	push	r28
     99e:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     9a0:	8a 30       	cpi	r24, 0x0A	; 10
     9a2:	19 f4       	brne	.+6      	; 0x9aa <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     9a4:	8d e0       	ldi	r24, 0x0D	; 13
     9a6:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
	}
	ser_transmit(c);
     9aa:	8c 2f       	mov	r24, r28
     9ac:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
}
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
    loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     9b4:	e0 ec       	ldi	r30, 0xC0	; 192
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	88 23       	and	r24, r24
     9bc:	ec f7       	brge	.-6      	; 0x9b8 <ser_receive+0x4>
    return UDR0;
     9be:	80 91 c6 00 	lds	r24, 0x00C6
}
     9c2:	08 95       	ret

000009c4 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     9ca:	88 81       	ld	r24, Y
     9cc:	88 23       	and	r24, r24
     9ce:	31 f0       	breq	.+12     	; 0x9dc <ser_write+0x18>
    return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     9d0:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     9d2:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     9d6:	89 91       	ld	r24, Y+
     9d8:	88 23       	and	r24, r24
     9da:	d9 f7       	brne	.-10     	; 0x9d2 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <ser_writeint>:

void ser_writeint(uint8_t *t) {
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
	int i=0;
	while (i <= t[i]) {
     9ea:	fc 01       	movw	r30, r24
     9ec:	81 91       	ld	r24, Z+
     9ee:	8f 01       	movw	r16, r30
		ser_transmit(s[i++]);
	}
}

void ser_writeint(uint8_t *t) {
	int i=0;
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
	while (i <= t[i]) {
		ser_transmit(t[i++]);
     9f4:	21 96       	adiw	r28, 0x01	; 1
     9f6:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
	}
}

void ser_writeint(uint8_t *t) {
	int i=0;
	while (i <= t[i]) {
     9fa:	f8 01       	movw	r30, r16
     9fc:	81 91       	ld	r24, Z+
     9fe:	8f 01       	movw	r16, r30
     a00:	28 2f       	mov	r18, r24
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	2c 17       	cp	r18, r28
     a06:	3d 07       	cpc	r19, r29
     a08:	ac f7       	brge	.-22     	; 0x9f4 <ser_writeint+0x12>
		ser_transmit(t[i++]);
	}
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     a14:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <ser_write>
	ser_transmit('\r');
     a18:	8d e0       	ldi	r24, 0x0D	; 13
     a1a:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
	ser_transmit('\n');
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
}
     a24:	08 95       	ret

00000a26 <ser_writelnint>:

void ser_writelnint(uint8_t* t){
	ser_writeint(t);
     a26:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <ser_writeint>
	ser_transmit('\r');
     a2a:	8d e0       	ldi	r24, 0x0D	; 13
     a2c:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
	ser_transmit('\n');
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
}
     a36:	08 95       	ret

00000a38 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	5c 01       	movw	r10, r24
     a4e:	d4 2f       	mov	r29, r20
	int i=0;
     a50:	6c 01       	movw	r12, r24
     a52:	ee 24       	eor	r14, r14
     a54:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     a56:	8b 01       	movw	r16, r22
     a58:	01 50       	subi	r16, 0x01	; 1
     a5a:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     a5c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <ser_receive>
     a60:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     a62:	dd 23       	and	r29, r29
     a64:	11 f0       	breq	.+4      	; 0xa6a <ser_readln+0x32>
     a66:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
		if (c=='\r') {
     a6a:	cd 30       	cpi	r28, 0x0D	; 13
     a6c:	31 f4       	brne	.+12     	; 0xa7a <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     a6e:	dd 23       	and	r29, r29
     a70:	71 f0       	breq	.+28     	; 0xa8e <ser_readln+0x56>
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	0e 94 c6 04 	call	0x98c	; 0x98c <ser_transmit>
     a78:	0a c0       	rjmp	.+20     	; 0xa8e <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     a7a:	e0 16       	cp	r14, r16
     a7c:	f1 06       	cpc	r15, r17
     a7e:	74 f7       	brge	.-36     	; 0xa5c <ser_readln+0x24>
			buf[i++]=c;
     a80:	f6 01       	movw	r30, r12
     a82:	c1 93       	st	Z+, r28
     a84:	6f 01       	movw	r12, r30
     a86:	08 94       	sec
     a88:	e1 1c       	adc	r14, r1
     a8a:	f1 1c       	adc	r15, r1
     a8c:	e7 cf       	rjmp	.-50     	; 0xa5c <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     a8e:	ea 0c       	add	r14, r10
     a90:	fb 1c       	adc	r15, r11
     a92:	f7 01       	movw	r30, r14
     a94:	10 82       	st	Z, r1
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	08 95       	ret

00000aac <vfprintf>:
     aac:	a5 e1       	ldi	r26, 0x15	; 21
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	ec e5       	ldi	r30, 0x5C	; 92
     ab2:	f5 e0       	ldi	r31, 0x05	; 5
     ab4:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__prologue_saves__>
     ab8:	4c 01       	movw	r8, r24
     aba:	7f 87       	std	Y+15, r23	; 0x0f
     abc:	6e 87       	std	Y+14, r22	; 0x0e
     abe:	fc 01       	movw	r30, r24
     ac0:	17 82       	std	Z+7, r1	; 0x07
     ac2:	16 82       	std	Z+6, r1	; 0x06
     ac4:	83 81       	ldd	r24, Z+3	; 0x03
     ac6:	81 fd       	sbrc	r24, 1
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <vfprintf+0x26>
     aca:	76 c3       	rjmp	.+1772   	; 0x11b8 <vfprintf+0x70c>
     acc:	4c 85       	ldd	r20, Y+12	; 0x0c
     ace:	5d 85       	ldd	r21, Y+13	; 0x0d
     ad0:	04 c0       	rjmp	.+8      	; 0xada <vfprintf+0x2e>
     ad2:	1e 01       	movw	r2, r28
     ad4:	08 94       	sec
     ad6:	21 1c       	adc	r2, r1
     ad8:	31 1c       	adc	r3, r1
     ada:	f4 01       	movw	r30, r8
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	ee 85       	ldd	r30, Y+14	; 0x0e
     ae0:	ff 85       	ldd	r31, Y+15	; 0x0f
     ae2:	93 fd       	sbrc	r25, 3
     ae4:	85 91       	lpm	r24, Z+
     ae6:	93 ff       	sbrs	r25, 3
     ae8:	81 91       	ld	r24, Z+
     aea:	ff 87       	std	Y+15, r31	; 0x0f
     aec:	ee 87       	std	Y+14, r30	; 0x0e
     aee:	88 23       	and	r24, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <vfprintf+0x48>
     af2:	5e c3       	rjmp	.+1724   	; 0x11b0 <vfprintf+0x704>
     af4:	85 32       	cpi	r24, 0x25	; 37
     af6:	41 f4       	brne	.+16     	; 0xb08 <vfprintf+0x5c>
     af8:	93 fd       	sbrc	r25, 3
     afa:	85 91       	lpm	r24, Z+
     afc:	93 ff       	sbrs	r25, 3
     afe:	81 91       	ld	r24, Z+
     b00:	ff 87       	std	Y+15, r31	; 0x0f
     b02:	ee 87       	std	Y+14, r30	; 0x0e
     b04:	85 32       	cpi	r24, 0x25	; 37
     b06:	59 f4       	brne	.+22     	; 0xb1e <vfprintf+0x72>
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	b4 01       	movw	r22, r8
     b0c:	4c 8b       	std	Y+20, r20	; 0x14
     b0e:	5d 8b       	std	Y+21, r21	; 0x15
     b10:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     b14:	4c 89       	ldd	r20, Y+20	; 0x14
     b16:	5d 89       	ldd	r21, Y+21	; 0x15
     b18:	5d 87       	std	Y+13, r21	; 0x0d
     b1a:	4c 87       	std	Y+12, r20	; 0x0c
     b1c:	d7 cf       	rjmp	.-82     	; 0xacc <vfprintf+0x20>
     b1e:	ff 24       	eor	r15, r15
     b20:	dd 24       	eor	r13, r13
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	10 32       	cpi	r17, 0x20	; 32
     b26:	b0 f4       	brcc	.+44     	; 0xb54 <vfprintf+0xa8>
     b28:	8b 32       	cpi	r24, 0x2B	; 43
     b2a:	69 f0       	breq	.+26     	; 0xb46 <vfprintf+0x9a>
     b2c:	8c 32       	cpi	r24, 0x2C	; 44
     b2e:	28 f4       	brcc	.+10     	; 0xb3a <vfprintf+0x8e>
     b30:	80 32       	cpi	r24, 0x20	; 32
     b32:	51 f0       	breq	.+20     	; 0xb48 <vfprintf+0x9c>
     b34:	83 32       	cpi	r24, 0x23	; 35
     b36:	71 f4       	brne	.+28     	; 0xb54 <vfprintf+0xa8>
     b38:	0b c0       	rjmp	.+22     	; 0xb50 <vfprintf+0xa4>
     b3a:	8d 32       	cpi	r24, 0x2D	; 45
     b3c:	39 f0       	breq	.+14     	; 0xb4c <vfprintf+0xa0>
     b3e:	80 33       	cpi	r24, 0x30	; 48
     b40:	49 f4       	brne	.+18     	; 0xb54 <vfprintf+0xa8>
     b42:	11 60       	ori	r17, 0x01	; 1
     b44:	2c c0       	rjmp	.+88     	; 0xb9e <vfprintf+0xf2>
     b46:	12 60       	ori	r17, 0x02	; 2
     b48:	14 60       	ori	r17, 0x04	; 4
     b4a:	29 c0       	rjmp	.+82     	; 0xb9e <vfprintf+0xf2>
     b4c:	18 60       	ori	r17, 0x08	; 8
     b4e:	27 c0       	rjmp	.+78     	; 0xb9e <vfprintf+0xf2>
     b50:	10 61       	ori	r17, 0x10	; 16
     b52:	25 c0       	rjmp	.+74     	; 0xb9e <vfprintf+0xf2>
     b54:	17 fd       	sbrc	r17, 7
     b56:	2e c0       	rjmp	.+92     	; 0xbb4 <vfprintf+0x108>
     b58:	28 2f       	mov	r18, r24
     b5a:	20 53       	subi	r18, 0x30	; 48
     b5c:	2a 30       	cpi	r18, 0x0A	; 10
     b5e:	98 f4       	brcc	.+38     	; 0xb86 <vfprintf+0xda>
     b60:	16 ff       	sbrs	r17, 6
     b62:	08 c0       	rjmp	.+16     	; 0xb74 <vfprintf+0xc8>
     b64:	8f 2d       	mov	r24, r15
     b66:	88 0f       	add	r24, r24
     b68:	f8 2e       	mov	r15, r24
     b6a:	ff 0c       	add	r15, r15
     b6c:	ff 0c       	add	r15, r15
     b6e:	f8 0e       	add	r15, r24
     b70:	f2 0e       	add	r15, r18
     b72:	15 c0       	rjmp	.+42     	; 0xb9e <vfprintf+0xf2>
     b74:	8d 2d       	mov	r24, r13
     b76:	88 0f       	add	r24, r24
     b78:	d8 2e       	mov	r13, r24
     b7a:	dd 0c       	add	r13, r13
     b7c:	dd 0c       	add	r13, r13
     b7e:	d8 0e       	add	r13, r24
     b80:	d2 0e       	add	r13, r18
     b82:	10 62       	ori	r17, 0x20	; 32
     b84:	0c c0       	rjmp	.+24     	; 0xb9e <vfprintf+0xf2>
     b86:	8e 32       	cpi	r24, 0x2E	; 46
     b88:	21 f4       	brne	.+8      	; 0xb92 <vfprintf+0xe6>
     b8a:	16 fd       	sbrc	r17, 6
     b8c:	11 c3       	rjmp	.+1570   	; 0x11b0 <vfprintf+0x704>
     b8e:	10 64       	ori	r17, 0x40	; 64
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0xf2>
     b92:	8c 36       	cpi	r24, 0x6C	; 108
     b94:	11 f4       	brne	.+4      	; 0xb9a <vfprintf+0xee>
     b96:	10 68       	ori	r17, 0x80	; 128
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0xf2>
     b9a:	88 36       	cpi	r24, 0x68	; 104
     b9c:	59 f4       	brne	.+22     	; 0xbb4 <vfprintf+0x108>
     b9e:	ee 85       	ldd	r30, Y+14	; 0x0e
     ba0:	ff 85       	ldd	r31, Y+15	; 0x0f
     ba2:	93 fd       	sbrc	r25, 3
     ba4:	85 91       	lpm	r24, Z+
     ba6:	93 ff       	sbrs	r25, 3
     ba8:	81 91       	ld	r24, Z+
     baa:	ff 87       	std	Y+15, r31	; 0x0f
     bac:	ee 87       	std	Y+14, r30	; 0x0e
     bae:	88 23       	and	r24, r24
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <vfprintf+0x108>
     bb2:	b8 cf       	rjmp	.-144    	; 0xb24 <vfprintf+0x78>
     bb4:	98 2f       	mov	r25, r24
     bb6:	95 54       	subi	r25, 0x45	; 69
     bb8:	93 30       	cpi	r25, 0x03	; 3
     bba:	18 f4       	brcc	.+6      	; 0xbc2 <vfprintf+0x116>
     bbc:	10 61       	ori	r17, 0x10	; 16
     bbe:	80 5e       	subi	r24, 0xE0	; 224
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <vfprintf+0x122>
     bc2:	98 2f       	mov	r25, r24
     bc4:	95 56       	subi	r25, 0x65	; 101
     bc6:	93 30       	cpi	r25, 0x03	; 3
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <vfprintf+0x120>
     bca:	a2 c1       	rjmp	.+836    	; 0xf10 <vfprintf+0x464>
     bcc:	1f 7e       	andi	r17, 0xEF	; 239
     bce:	16 fd       	sbrc	r17, 6
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x12a>
     bd2:	e6 e0       	ldi	r30, 0x06	; 6
     bd4:	fe 2e       	mov	r15, r30
     bd6:	1f 73       	andi	r17, 0x3F	; 63
     bd8:	85 36       	cpi	r24, 0x65	; 101
     bda:	11 f4       	brne	.+4      	; 0xbe0 <vfprintf+0x134>
     bdc:	10 64       	ori	r17, 0x40	; 64
     bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x140>
     be0:	86 36       	cpi	r24, 0x66	; 102
     be2:	11 f4       	brne	.+4      	; 0xbe8 <vfprintf+0x13c>
     be4:	10 68       	ori	r17, 0x80	; 128
     be6:	02 c0       	rjmp	.+4      	; 0xbec <vfprintf+0x140>
     be8:	f1 10       	cpse	r15, r1
     bea:	fa 94       	dec	r15
     bec:	17 ff       	sbrs	r17, 7
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <vfprintf+0x152>
     bf0:	fb e3       	ldi	r31, 0x3B	; 59
     bf2:	ff 15       	cp	r31, r15
     bf4:	48 f0       	brcs	.+18     	; 0xc08 <vfprintf+0x15c>
     bf6:	ef 2c       	mov	r14, r15
     bf8:	e3 94       	inc	r14
     bfa:	27 e0       	ldi	r18, 0x07	; 7
     bfc:	0d c0       	rjmp	.+26     	; 0xc18 <vfprintf+0x16c>
     bfe:	27 e0       	ldi	r18, 0x07	; 7
     c00:	2f 15       	cp	r18, r15
     c02:	30 f0       	brcs	.+12     	; 0xc10 <vfprintf+0x164>
     c04:	2f 2d       	mov	r18, r15
     c06:	07 c0       	rjmp	.+14     	; 0xc16 <vfprintf+0x16a>
     c08:	27 e0       	ldi	r18, 0x07	; 7
     c0a:	7c e3       	ldi	r23, 0x3C	; 60
     c0c:	e7 2e       	mov	r14, r23
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <vfprintf+0x16c>
     c10:	27 e0       	ldi	r18, 0x07	; 7
     c12:	67 e0       	ldi	r22, 0x07	; 7
     c14:	f6 2e       	mov	r15, r22
     c16:	ee 24       	eor	r14, r14
     c18:	ca 01       	movw	r24, r20
     c1a:	04 96       	adiw	r24, 0x04	; 4
     c1c:	9d 87       	std	Y+13, r25	; 0x0d
     c1e:	8c 87       	std	Y+12, r24	; 0x0c
     c20:	fa 01       	movw	r30, r20
     c22:	60 81       	ld	r22, Z
     c24:	71 81       	ldd	r23, Z+1	; 0x01
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	a1 01       	movw	r20, r2
     c2c:	0e 2d       	mov	r16, r14
     c2e:	0e 94 19 09 	call	0x1232	; 0x1232 <__ftoa_engine>
     c32:	5c 01       	movw	r10, r24
     c34:	c9 80       	ldd	r12, Y+1	; 0x01
     c36:	2c 2d       	mov	r18, r12
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	39 8b       	std	Y+17, r19	; 0x11
     c3c:	28 8b       	std	Y+16, r18	; 0x10
     c3e:	c0 fe       	sbrs	r12, 0
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <vfprintf+0x19c>
     c42:	38 89       	ldd	r19, Y+16	; 0x10
     c44:	33 ff       	sbrs	r19, 3
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <vfprintf+0x1a8>
     c48:	11 fd       	sbrc	r17, 1
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <vfprintf+0x1ac>
     c4c:	12 ff       	sbrs	r17, 2
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <vfprintf+0x1b0>
     c50:	00 e2       	ldi	r16, 0x20	; 32
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <vfprintf+0x1b2>
     c54:	0d e2       	ldi	r16, 0x2D	; 45
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x1b2>
     c58:	0b e2       	ldi	r16, 0x2B	; 43
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <vfprintf+0x1b2>
     c5c:	00 e0       	ldi	r16, 0x00	; 0
     c5e:	88 89       	ldd	r24, Y+16	; 0x10
     c60:	99 89       	ldd	r25, Y+17	; 0x11
     c62:	8c 70       	andi	r24, 0x0C	; 12
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	09 f4       	brne	.+2      	; 0xc6c <vfprintf+0x1c0>
     c6a:	3c c0       	rjmp	.+120    	; 0xce4 <vfprintf+0x238>
     c6c:	00 23       	and	r16, r16
     c6e:	11 f0       	breq	.+4      	; 0xc74 <vfprintf+0x1c8>
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <vfprintf+0x1ca>
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	8d 15       	cp	r24, r13
     c78:	58 f4       	brcc	.+22     	; 0xc90 <vfprintf+0x1e4>
     c7a:	d8 1a       	sub	r13, r24
     c7c:	13 fd       	sbrc	r17, 3
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <vfprintf+0x1e6>
     c80:	80 e2       	ldi	r24, 0x20	; 32
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	b4 01       	movw	r22, r8
     c86:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     c8a:	da 94       	dec	r13
     c8c:	c9 f7       	brne	.-14     	; 0xc80 <vfprintf+0x1d4>
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <vfprintf+0x1e6>
     c90:	dd 24       	eor	r13, r13
     c92:	00 23       	and	r16, r16
     c94:	29 f0       	breq	.+10     	; 0xca0 <vfprintf+0x1f4>
     c96:	80 2f       	mov	r24, r16
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	b4 01       	movw	r22, r8
     c9c:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     ca0:	88 89       	ldd	r24, Y+16	; 0x10
     ca2:	83 fd       	sbrc	r24, 3
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <vfprintf+0x204>
     ca6:	3c e6       	ldi	r19, 0x6C	; 108
     ca8:	e3 2e       	mov	r14, r19
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	f3 2e       	mov	r15, r19
     cae:	11 c0       	rjmp	.+34     	; 0xcd2 <vfprintf+0x226>
     cb0:	28 e6       	ldi	r18, 0x68	; 104
     cb2:	e2 2e       	mov	r14, r18
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	f2 2e       	mov	r15, r18
     cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <vfprintf+0x226>
     cba:	01 15       	cp	r16, r1
     cbc:	11 05       	cpc	r17, r1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x216>
     cc0:	80 52       	subi	r24, 0x20	; 32
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	b4 01       	movw	r22, r8
     cc6:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     cca:	08 94       	sec
     ccc:	e1 1c       	adc	r14, r1
     cce:	f1 1c       	adc	r15, r1
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <vfprintf+0x22e>
     cd2:	01 2f       	mov	r16, r17
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	00 71       	andi	r16, 0x10	; 16
     cd8:	10 70       	andi	r17, 0x00	; 0
     cda:	f7 01       	movw	r30, r14
     cdc:	84 91       	lpm	r24, Z
     cde:	88 23       	and	r24, r24
     ce0:	61 f7       	brne	.-40     	; 0xcba <vfprintf+0x20e>
     ce2:	63 c2       	rjmp	.+1222   	; 0x11aa <vfprintf+0x6fe>
     ce4:	17 ff       	sbrs	r17, 7
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <vfprintf+0x258>
     ce8:	ea 0c       	add	r14, r10
     cea:	f8 89       	ldd	r31, Y+16	; 0x10
     cec:	f4 ff       	sbrs	r31, 4
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <vfprintf+0x24c>
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	81 33       	cpi	r24, 0x31	; 49
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <vfprintf+0x24c>
     cf6:	ea 94       	dec	r14
     cf8:	1e 14       	cp	r1, r14
     cfa:	4c f5       	brge	.+82     	; 0xd4e <vfprintf+0x2a2>
     cfc:	28 e0       	ldi	r18, 0x08	; 8
     cfe:	2e 15       	cp	r18, r14
     d00:	48 f1       	brcs	.+82     	; 0xd54 <vfprintf+0x2a8>
     d02:	2c c0       	rjmp	.+88     	; 0xd5c <vfprintf+0x2b0>
     d04:	16 fd       	sbrc	r17, 6
     d06:	2a c0       	rjmp	.+84     	; 0xd5c <vfprintf+0x2b0>
     d08:	8f 2d       	mov	r24, r15
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	8a 15       	cp	r24, r10
     d0e:	9b 05       	cpc	r25, r11
     d10:	44 f0       	brlt	.+16     	; 0xd22 <vfprintf+0x276>
     d12:	3c ef       	ldi	r19, 0xFC	; 252
     d14:	a3 16       	cp	r10, r19
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	b3 06       	cpc	r11, r19
     d1a:	1c f0       	brlt	.+6      	; 0xd22 <vfprintf+0x276>
     d1c:	10 68       	ori	r17, 0x80	; 128
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <vfprintf+0x276>
     d20:	fa 94       	dec	r15
     d22:	ff 20       	and	r15, r15
     d24:	49 f0       	breq	.+18     	; 0xd38 <vfprintf+0x28c>
     d26:	e2 e0       	ldi	r30, 0x02	; 2
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	ec 0f       	add	r30, r28
     d2c:	fd 1f       	adc	r31, r29
     d2e:	ef 0d       	add	r30, r15
     d30:	f1 1d       	adc	r31, r1
     d32:	80 81       	ld	r24, Z
     d34:	80 33       	cpi	r24, 0x30	; 48
     d36:	a1 f3       	breq	.-24     	; 0xd20 <vfprintf+0x274>
     d38:	17 ff       	sbrs	r17, 7
     d3a:	10 c0       	rjmp	.+32     	; 0xd5c <vfprintf+0x2b0>
     d3c:	ef 2c       	mov	r14, r15
     d3e:	e3 94       	inc	r14
     d40:	8f 2d       	mov	r24, r15
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a8 16       	cp	r10, r24
     d46:	b9 06       	cpc	r11, r25
     d48:	44 f4       	brge	.+16     	; 0xd5a <vfprintf+0x2ae>
     d4a:	fa 18       	sub	r15, r10
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <vfprintf+0x2b0>
     d4e:	ee 24       	eor	r14, r14
     d50:	e3 94       	inc	r14
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <vfprintf+0x2b0>
     d54:	98 e0       	ldi	r25, 0x08	; 8
     d56:	e9 2e       	mov	r14, r25
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <vfprintf+0x2b0>
     d5a:	ff 24       	eor	r15, r15
     d5c:	17 ff       	sbrs	r17, 7
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <vfprintf+0x2c2>
     d60:	1a 14       	cp	r1, r10
     d62:	1b 04       	cpc	r1, r11
     d64:	3c f4       	brge	.+14     	; 0xd74 <vfprintf+0x2c8>
     d66:	95 01       	movw	r18, r10
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <vfprintf+0x2cc>
     d6e:	25 e0       	ldi	r18, 0x05	; 5
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x2cc>
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	00 23       	and	r16, r16
     d7a:	11 f0       	breq	.+4      	; 0xd80 <vfprintf+0x2d4>
     d7c:	2f 5f       	subi	r18, 0xFF	; 255
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	ff 20       	and	r15, r15
     d82:	29 f0       	breq	.+10     	; 0xd8e <vfprintf+0x2e2>
     d84:	8f 2d       	mov	r24, r15
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	28 0f       	add	r18, r24
     d8c:	39 1f       	adc	r19, r25
     d8e:	8d 2d       	mov	r24, r13
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	28 17       	cp	r18, r24
     d94:	39 07       	cpc	r19, r25
     d96:	14 f4       	brge	.+4      	; 0xd9c <vfprintf+0x2f0>
     d98:	d2 1a       	sub	r13, r18
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x2f2>
     d9c:	dd 24       	eor	r13, r13
     d9e:	61 2e       	mov	r6, r17
     da0:	77 24       	eor	r7, r7
     da2:	c3 01       	movw	r24, r6
     da4:	89 70       	andi	r24, 0x09	; 9
     da6:	90 70       	andi	r25, 0x00	; 0
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	49 f4       	brne	.+18     	; 0xdbe <vfprintf+0x312>
     dac:	06 c0       	rjmp	.+12     	; 0xdba <vfprintf+0x30e>
     dae:	80 e2       	ldi	r24, 0x20	; 32
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	b4 01       	movw	r22, r8
     db4:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     db8:	da 94       	dec	r13
     dba:	dd 20       	and	r13, r13
     dbc:	c1 f7       	brne	.-16     	; 0xdae <vfprintf+0x302>
     dbe:	00 23       	and	r16, r16
     dc0:	29 f0       	breq	.+10     	; 0xdcc <vfprintf+0x320>
     dc2:	80 2f       	mov	r24, r16
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	b4 01       	movw	r22, r8
     dc8:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     dcc:	63 fc       	sbrc	r6, 3
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <vfprintf+0x336>
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <vfprintf+0x332>
     dd2:	80 e3       	ldi	r24, 0x30	; 48
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	b4 01       	movw	r22, r8
     dd8:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     ddc:	da 94       	dec	r13
     dde:	dd 20       	and	r13, r13
     de0:	c1 f7       	brne	.-16     	; 0xdd2 <vfprintf+0x326>
     de2:	17 ff       	sbrs	r17, 7
     de4:	48 c0       	rjmp	.+144    	; 0xe76 <vfprintf+0x3ca>
     de6:	85 01       	movw	r16, r10
     de8:	b7 fe       	sbrs	r11, 7
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x344>
     dec:	00 e0       	ldi	r16, 0x00	; 0
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	66 24       	eor	r6, r6
     df2:	77 24       	eor	r7, r7
     df4:	95 01       	movw	r18, r10
     df6:	2e 19       	sub	r18, r14
     df8:	31 09       	sbc	r19, r1
     dfa:	3b 8b       	std	Y+19, r19	; 0x13
     dfc:	2a 8b       	std	Y+18, r18	; 0x12
     dfe:	25 01       	movw	r4, r10
     e00:	40 1a       	sub	r4, r16
     e02:	51 0a       	sbc	r5, r17
     e04:	42 0c       	add	r4, r2
     e06:	53 1c       	adc	r5, r3
     e08:	6f 2d       	mov	r22, r15
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	ee 24       	eor	r14, r14
     e0e:	ff 24       	eor	r15, r15
     e10:	e6 1a       	sub	r14, r22
     e12:	f7 0a       	sbc	r15, r23
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	0f 3f       	cpi	r16, 0xFF	; 255
     e18:	13 07       	cpc	r17, r19
     e1a:	29 f4       	brne	.+10     	; 0xe26 <vfprintf+0x37a>
     e1c:	8e e2       	ldi	r24, 0x2E	; 46
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	b4 01       	movw	r22, r8
     e22:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     e26:	a0 16       	cp	r10, r16
     e28:	b1 06       	cpc	r11, r17
     e2a:	54 f0       	brlt	.+20     	; 0xe40 <vfprintf+0x394>
     e2c:	2a 89       	ldd	r18, Y+18	; 0x12
     e2e:	3b 89       	ldd	r19, Y+19	; 0x13
     e30:	20 17       	cp	r18, r16
     e32:	31 07       	cpc	r19, r17
     e34:	2c f4       	brge	.+10     	; 0xe40 <vfprintf+0x394>
     e36:	f2 01       	movw	r30, r4
     e38:	e6 0d       	add	r30, r6
     e3a:	f7 1d       	adc	r31, r7
     e3c:	81 81       	ldd	r24, Z+1	; 0x01
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vfprintf+0x396>
     e40:	80 e3       	ldi	r24, 0x30	; 48
     e42:	01 50       	subi	r16, 0x01	; 1
     e44:	10 40       	sbci	r17, 0x00	; 0
     e46:	08 94       	sec
     e48:	61 1c       	adc	r6, r1
     e4a:	71 1c       	adc	r7, r1
     e4c:	0e 15       	cp	r16, r14
     e4e:	1f 05       	cpc	r17, r15
     e50:	2c f0       	brlt	.+10     	; 0xe5c <vfprintf+0x3b0>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	b4 01       	movw	r22, r8
     e56:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     e5a:	dc cf       	rjmp	.-72     	; 0xe14 <vfprintf+0x368>
     e5c:	0a 15       	cp	r16, r10
     e5e:	1b 05       	cpc	r17, r11
     e60:	41 f4       	brne	.+16     	; 0xe72 <vfprintf+0x3c6>
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	96 33       	cpi	r25, 0x36	; 54
     e66:	20 f4       	brcc	.+8      	; 0xe70 <vfprintf+0x3c4>
     e68:	95 33       	cpi	r25, 0x35	; 53
     e6a:	19 f4       	brne	.+6      	; 0xe72 <vfprintf+0x3c6>
     e6c:	38 89       	ldd	r19, Y+16	; 0x10
     e6e:	34 ff       	sbrs	r19, 4
     e70:	81 e3       	ldi	r24, 0x31	; 49
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	49 c0       	rjmp	.+146    	; 0xf08 <vfprintf+0x45c>
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	81 33       	cpi	r24, 0x31	; 49
     e7a:	11 f0       	breq	.+4      	; 0xe80 <vfprintf+0x3d4>
     e7c:	9f ee       	ldi	r25, 0xEF	; 239
     e7e:	c9 22       	and	r12, r25
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	b4 01       	movw	r22, r8
     e84:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     e88:	ff 20       	and	r15, r15
     e8a:	89 f0       	breq	.+34     	; 0xeae <vfprintf+0x402>
     e8c:	8e e2       	ldi	r24, 0x2E	; 46
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	b4 01       	movw	r22, r8
     e92:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     e96:	12 e0       	ldi	r17, 0x02	; 2
     e98:	f1 01       	movw	r30, r2
     e9a:	e1 0f       	add	r30, r17
     e9c:	f1 1d       	adc	r31, r1
     e9e:	1f 5f       	subi	r17, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	b4 01       	movw	r22, r8
     ea6:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     eaa:	fa 94       	dec	r15
     eac:	a9 f7       	brne	.-22     	; 0xe98 <vfprintf+0x3ec>
     eae:	64 fe       	sbrs	r6, 4
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <vfprintf+0x40c>
     eb2:	85 e4       	ldi	r24, 0x45	; 69
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <vfprintf+0x410>
     eb8:	85 e6       	ldi	r24, 0x65	; 101
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	b4 01       	movw	r22, r8
     ebe:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     ec2:	b7 fc       	sbrc	r11, 7
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <vfprintf+0x424>
     ec6:	a1 14       	cp	r10, r1
     ec8:	b1 04       	cpc	r11, r1
     eca:	41 f4       	brne	.+16     	; 0xedc <vfprintf+0x430>
     ecc:	c4 fe       	sbrs	r12, 4
     ece:	06 c0       	rjmp	.+12     	; 0xedc <vfprintf+0x430>
     ed0:	b0 94       	com	r11
     ed2:	a1 94       	neg	r10
     ed4:	b1 08       	sbc	r11, r1
     ed6:	b3 94       	inc	r11
     ed8:	8d e2       	ldi	r24, 0x2D	; 45
     eda:	01 c0       	rjmp	.+2      	; 0xede <vfprintf+0x432>
     edc:	8b e2       	ldi	r24, 0x2B	; 43
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	b4 01       	movw	r22, r8
     ee2:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     ee6:	80 e3       	ldi	r24, 0x30	; 48
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <vfprintf+0x448>
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	e6 ef       	ldi	r30, 0xF6	; 246
     eee:	ff ef       	ldi	r31, 0xFF	; 255
     ef0:	ae 0e       	add	r10, r30
     ef2:	bf 1e       	adc	r11, r31
     ef4:	fa e0       	ldi	r31, 0x0A	; 10
     ef6:	af 16       	cp	r10, r31
     ef8:	b1 04       	cpc	r11, r1
     efa:	bc f7       	brge	.-18     	; 0xeea <vfprintf+0x43e>
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	b4 01       	movw	r22, r8
     f00:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     f04:	c5 01       	movw	r24, r10
     f06:	c0 96       	adiw	r24, 0x30	; 48
     f08:	b4 01       	movw	r22, r8
     f0a:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     f0e:	4d c1       	rjmp	.+666    	; 0x11aa <vfprintf+0x6fe>
     f10:	83 36       	cpi	r24, 0x63	; 99
     f12:	31 f0       	breq	.+12     	; 0xf20 <vfprintf+0x474>
     f14:	83 37       	cpi	r24, 0x73	; 115
     f16:	89 f0       	breq	.+34     	; 0xf3a <vfprintf+0x48e>
     f18:	83 35       	cpi	r24, 0x53	; 83
     f1a:	09 f0       	breq	.+2      	; 0xf1e <vfprintf+0x472>
     f1c:	59 c0       	rjmp	.+178    	; 0xfd0 <vfprintf+0x524>
     f1e:	22 c0       	rjmp	.+68     	; 0xf64 <vfprintf+0x4b8>
     f20:	9a 01       	movw	r18, r20
     f22:	2e 5f       	subi	r18, 0xFE	; 254
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	3d 87       	std	Y+13, r19	; 0x0d
     f28:	2c 87       	std	Y+12, r18	; 0x0c
     f2a:	fa 01       	movw	r30, r20
     f2c:	80 81       	ld	r24, Z
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	e8 2e       	mov	r14, r24
     f34:	f1 2c       	mov	r15, r1
     f36:	51 01       	movw	r10, r2
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <vfprintf+0x4b4>
     f3a:	9a 01       	movw	r18, r20
     f3c:	2e 5f       	subi	r18, 0xFE	; 254
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	3d 87       	std	Y+13, r19	; 0x0d
     f42:	2c 87       	std	Y+12, r18	; 0x0c
     f44:	fa 01       	movw	r30, r20
     f46:	a0 80       	ld	r10, Z
     f48:	b1 80       	ldd	r11, Z+1	; 0x01
     f4a:	16 ff       	sbrs	r17, 6
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <vfprintf+0x4a8>
     f4e:	6f 2d       	mov	r22, r15
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <vfprintf+0x4ac>
     f54:	6f ef       	ldi	r22, 0xFF	; 255
     f56:	7f ef       	ldi	r23, 0xFF	; 255
     f58:	c5 01       	movw	r24, r10
     f5a:	0e 94 05 0a 	call	0x140a	; 0x140a <strnlen>
     f5e:	7c 01       	movw	r14, r24
     f60:	1f 77       	andi	r17, 0x7F	; 127
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <vfprintf+0x4e0>
     f64:	9a 01       	movw	r18, r20
     f66:	2e 5f       	subi	r18, 0xFE	; 254
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	3d 87       	std	Y+13, r19	; 0x0d
     f6c:	2c 87       	std	Y+12, r18	; 0x0c
     f6e:	fa 01       	movw	r30, r20
     f70:	a0 80       	ld	r10, Z
     f72:	b1 80       	ldd	r11, Z+1	; 0x01
     f74:	16 ff       	sbrs	r17, 6
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x4d2>
     f78:	6f 2d       	mov	r22, r15
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x4d6>
     f7e:	6f ef       	ldi	r22, 0xFF	; 255
     f80:	7f ef       	ldi	r23, 0xFF	; 255
     f82:	c5 01       	movw	r24, r10
     f84:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <strnlen_P>
     f88:	7c 01       	movw	r14, r24
     f8a:	10 68       	ori	r17, 0x80	; 128
     f8c:	13 fd       	sbrc	r17, 3
     f8e:	1c c0       	rjmp	.+56     	; 0xfc8 <vfprintf+0x51c>
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x4f2>
     f92:	80 e2       	ldi	r24, 0x20	; 32
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	b4 01       	movw	r22, r8
     f98:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     f9c:	da 94       	dec	r13
     f9e:	8d 2d       	mov	r24, r13
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	e8 16       	cp	r14, r24
     fa4:	f9 06       	cpc	r15, r25
     fa6:	a8 f3       	brcs	.-22     	; 0xf92 <vfprintf+0x4e6>
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <vfprintf+0x51c>
     faa:	f5 01       	movw	r30, r10
     fac:	17 fd       	sbrc	r17, 7
     fae:	85 91       	lpm	r24, Z+
     fb0:	17 ff       	sbrs	r17, 7
     fb2:	81 91       	ld	r24, Z+
     fb4:	5f 01       	movw	r10, r30
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	b4 01       	movw	r22, r8
     fba:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
     fbe:	d1 10       	cpse	r13, r1
     fc0:	da 94       	dec	r13
     fc2:	08 94       	sec
     fc4:	e1 08       	sbc	r14, r1
     fc6:	f1 08       	sbc	r15, r1
     fc8:	e1 14       	cp	r14, r1
     fca:	f1 04       	cpc	r15, r1
     fcc:	71 f7       	brne	.-36     	; 0xfaa <vfprintf+0x4fe>
     fce:	ed c0       	rjmp	.+474    	; 0x11aa <vfprintf+0x6fe>
     fd0:	84 36       	cpi	r24, 0x64	; 100
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <vfprintf+0x52c>
     fd4:	89 36       	cpi	r24, 0x69	; 105
     fd6:	71 f5       	brne	.+92     	; 0x1034 <vfprintf+0x588>
     fd8:	9a 01       	movw	r18, r20
     fda:	17 ff       	sbrs	r17, 7
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <vfprintf+0x546>
     fde:	2c 5f       	subi	r18, 0xFC	; 252
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	3d 87       	std	Y+13, r19	; 0x0d
     fe4:	2c 87       	std	Y+12, r18	; 0x0c
     fe6:	fa 01       	movw	r30, r20
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	a2 81       	ldd	r26, Z+2	; 0x02
     fee:	b3 81       	ldd	r27, Z+3	; 0x03
     ff0:	0b c0       	rjmp	.+22     	; 0x1008 <vfprintf+0x55c>
     ff2:	2e 5f       	subi	r18, 0xFE	; 254
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	3d 87       	std	Y+13, r19	; 0x0d
     ff8:	2c 87       	std	Y+12, r18	; 0x0c
     ffa:	fa 01       	movw	r30, r20
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	aa 27       	eor	r26, r26
    1002:	97 fd       	sbrc	r25, 7
    1004:	a0 95       	com	r26
    1006:	ba 2f       	mov	r27, r26
    1008:	01 2f       	mov	r16, r17
    100a:	0f 76       	andi	r16, 0x6F	; 111
    100c:	b7 ff       	sbrs	r27, 7
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <vfprintf+0x574>
    1010:	b0 95       	com	r27
    1012:	a0 95       	com	r26
    1014:	90 95       	com	r25
    1016:	81 95       	neg	r24
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	af 4f       	sbci	r26, 0xFF	; 255
    101c:	bf 4f       	sbci	r27, 0xFF	; 255
    101e:	00 68       	ori	r16, 0x80	; 128
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	a1 01       	movw	r20, r2
    1026:	2a e0       	ldi	r18, 0x0A	; 10
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__ultoa_invert>
    102e:	e8 2e       	mov	r14, r24
    1030:	e2 18       	sub	r14, r2
    1032:	41 c0       	rjmp	.+130    	; 0x10b6 <vfprintf+0x60a>
    1034:	85 37       	cpi	r24, 0x75	; 117
    1036:	21 f4       	brne	.+8      	; 0x1040 <vfprintf+0x594>
    1038:	1f 7e       	andi	r17, 0xEF	; 239
    103a:	2a e0       	ldi	r18, 0x0A	; 10
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	20 c0       	rjmp	.+64     	; 0x1080 <vfprintf+0x5d4>
    1040:	19 7f       	andi	r17, 0xF9	; 249
    1042:	8f 36       	cpi	r24, 0x6F	; 111
    1044:	a9 f0       	breq	.+42     	; 0x1070 <vfprintf+0x5c4>
    1046:	80 37       	cpi	r24, 0x70	; 112
    1048:	20 f4       	brcc	.+8      	; 0x1052 <vfprintf+0x5a6>
    104a:	88 35       	cpi	r24, 0x58	; 88
    104c:	09 f0       	breq	.+2      	; 0x1050 <vfprintf+0x5a4>
    104e:	b0 c0       	rjmp	.+352    	; 0x11b0 <vfprintf+0x704>
    1050:	0b c0       	rjmp	.+22     	; 0x1068 <vfprintf+0x5bc>
    1052:	80 37       	cpi	r24, 0x70	; 112
    1054:	21 f0       	breq	.+8      	; 0x105e <vfprintf+0x5b2>
    1056:	88 37       	cpi	r24, 0x78	; 120
    1058:	09 f0       	breq	.+2      	; 0x105c <vfprintf+0x5b0>
    105a:	aa c0       	rjmp	.+340    	; 0x11b0 <vfprintf+0x704>
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <vfprintf+0x5b4>
    105e:	10 61       	ori	r17, 0x10	; 16
    1060:	14 ff       	sbrs	r17, 4
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <vfprintf+0x5ca>
    1064:	14 60       	ori	r17, 0x04	; 4
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <vfprintf+0x5ca>
    1068:	14 ff       	sbrs	r17, 4
    106a:	08 c0       	rjmp	.+16     	; 0x107c <vfprintf+0x5d0>
    106c:	16 60       	ori	r17, 0x06	; 6
    106e:	06 c0       	rjmp	.+12     	; 0x107c <vfprintf+0x5d0>
    1070:	28 e0       	ldi	r18, 0x08	; 8
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <vfprintf+0x5d4>
    1076:	20 e1       	ldi	r18, 0x10	; 16
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <vfprintf+0x5d4>
    107c:	20 e1       	ldi	r18, 0x10	; 16
    107e:	32 e0       	ldi	r19, 0x02	; 2
    1080:	ca 01       	movw	r24, r20
    1082:	17 ff       	sbrs	r17, 7
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <vfprintf+0x5ec>
    1086:	04 96       	adiw	r24, 0x04	; 4
    1088:	9d 87       	std	Y+13, r25	; 0x0d
    108a:	8c 87       	std	Y+12, r24	; 0x0c
    108c:	fa 01       	movw	r30, r20
    108e:	60 81       	ld	r22, Z
    1090:	71 81       	ldd	r23, Z+1	; 0x01
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <vfprintf+0x5fc>
    1098:	02 96       	adiw	r24, 0x02	; 2
    109a:	9d 87       	std	Y+13, r25	; 0x0d
    109c:	8c 87       	std	Y+12, r24	; 0x0c
    109e:	fa 01       	movw	r30, r20
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a1 01       	movw	r20, r2
    10aa:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__ultoa_invert>
    10ae:	e8 2e       	mov	r14, r24
    10b0:	e2 18       	sub	r14, r2
    10b2:	01 2f       	mov	r16, r17
    10b4:	0f 77       	andi	r16, 0x7F	; 127
    10b6:	06 ff       	sbrs	r16, 6
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <vfprintf+0x620>
    10ba:	0e 7f       	andi	r16, 0xFE	; 254
    10bc:	ef 14       	cp	r14, r15
    10be:	30 f4       	brcc	.+12     	; 0x10cc <vfprintf+0x620>
    10c0:	04 ff       	sbrs	r16, 4
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <vfprintf+0x624>
    10c4:	02 fd       	sbrc	r16, 2
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <vfprintf+0x624>
    10c8:	0f 7e       	andi	r16, 0xEF	; 239
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x624>
    10cc:	1e 2d       	mov	r17, r14
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <vfprintf+0x626>
    10d0:	1f 2d       	mov	r17, r15
    10d2:	80 2f       	mov	r24, r16
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	04 ff       	sbrs	r16, 4
    10d8:	0c c0       	rjmp	.+24     	; 0x10f2 <vfprintf+0x646>
    10da:	fe 01       	movw	r30, r28
    10dc:	ee 0d       	add	r30, r14
    10de:	f1 1d       	adc	r31, r1
    10e0:	20 81       	ld	r18, Z
    10e2:	20 33       	cpi	r18, 0x30	; 48
    10e4:	11 f4       	brne	.+4      	; 0x10ea <vfprintf+0x63e>
    10e6:	09 7e       	andi	r16, 0xE9	; 233
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <vfprintf+0x650>
    10ea:	02 ff       	sbrs	r16, 2
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <vfprintf+0x64e>
    10ee:	1e 5f       	subi	r17, 0xFE	; 254
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <vfprintf+0x650>
    10f2:	86 78       	andi	r24, 0x86	; 134
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	09 f0       	breq	.+2      	; 0x10fc <vfprintf+0x650>
    10fa:	1f 5f       	subi	r17, 0xFF	; 255
    10fc:	a0 2e       	mov	r10, r16
    10fe:	bb 24       	eor	r11, r11
    1100:	03 fd       	sbrc	r16, 3
    1102:	12 c0       	rjmp	.+36     	; 0x1128 <vfprintf+0x67c>
    1104:	00 ff       	sbrs	r16, 0
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <vfprintf+0x676>
    1108:	fe 2c       	mov	r15, r14
    110a:	1d 15       	cp	r17, r13
    110c:	50 f4       	brcc	.+20     	; 0x1122 <vfprintf+0x676>
    110e:	fd 0c       	add	r15, r13
    1110:	f1 1a       	sub	r15, r17
    1112:	1d 2d       	mov	r17, r13
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <vfprintf+0x676>
    1116:	80 e2       	ldi	r24, 0x20	; 32
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b4 01       	movw	r22, r8
    111c:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
    1120:	1f 5f       	subi	r17, 0xFF	; 255
    1122:	1d 15       	cp	r17, r13
    1124:	c0 f3       	brcs	.-16     	; 0x1116 <vfprintf+0x66a>
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <vfprintf+0x684>
    1128:	1d 15       	cp	r17, r13
    112a:	10 f4       	brcc	.+4      	; 0x1130 <vfprintf+0x684>
    112c:	d1 1a       	sub	r13, r17
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <vfprintf+0x686>
    1130:	dd 24       	eor	r13, r13
    1132:	a4 fe       	sbrs	r10, 4
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <vfprintf+0x6a8>
    1136:	80 e3       	ldi	r24, 0x30	; 48
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	b4 01       	movw	r22, r8
    113c:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
    1140:	a2 fe       	sbrs	r10, 2
    1142:	1f c0       	rjmp	.+62     	; 0x1182 <vfprintf+0x6d6>
    1144:	a1 fe       	sbrs	r10, 1
    1146:	03 c0       	rjmp	.+6      	; 0x114e <vfprintf+0x6a2>
    1148:	88 e5       	ldi	r24, 0x58	; 88
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	10 c0       	rjmp	.+32     	; 0x116e <vfprintf+0x6c2>
    114e:	88 e7       	ldi	r24, 0x78	; 120
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0d c0       	rjmp	.+26     	; 0x116e <vfprintf+0x6c2>
    1154:	c5 01       	movw	r24, r10
    1156:	86 78       	andi	r24, 0x86	; 134
    1158:	90 70       	andi	r25, 0x00	; 0
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	91 f0       	breq	.+36     	; 0x1182 <vfprintf+0x6d6>
    115e:	a1 fc       	sbrc	r10, 1
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x6ba>
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <vfprintf+0x6bc>
    1166:	8b e2       	ldi	r24, 0x2B	; 43
    1168:	07 fd       	sbrc	r16, 7
    116a:	8d e2       	ldi	r24, 0x2D	; 45
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	b4 01       	movw	r22, r8
    1170:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <vfprintf+0x6d6>
    1176:	80 e3       	ldi	r24, 0x30	; 48
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	b4 01       	movw	r22, r8
    117c:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
    1180:	fa 94       	dec	r15
    1182:	ef 14       	cp	r14, r15
    1184:	c0 f3       	brcs	.-16     	; 0x1176 <vfprintf+0x6ca>
    1186:	ea 94       	dec	r14
    1188:	f1 01       	movw	r30, r2
    118a:	ee 0d       	add	r30, r14
    118c:	f1 1d       	adc	r31, r1
    118e:	80 81       	ld	r24, Z
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	b4 01       	movw	r22, r8
    1194:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
    1198:	ee 20       	and	r14, r14
    119a:	a9 f7       	brne	.-22     	; 0x1186 <vfprintf+0x6da>
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <vfprintf+0x6fe>
    119e:	80 e2       	ldi	r24, 0x20	; 32
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	b4 01       	movw	r22, r8
    11a4:	0e 94 10 0a 	call	0x1420	; 0x1420 <fputc>
    11a8:	da 94       	dec	r13
    11aa:	dd 20       	and	r13, r13
    11ac:	c1 f7       	brne	.-16     	; 0x119e <vfprintf+0x6f2>
    11ae:	8e cc       	rjmp	.-1764   	; 0xacc <vfprintf+0x20>
    11b0:	f4 01       	movw	r30, r8
    11b2:	86 81       	ldd	r24, Z+6	; 0x06
    11b4:	97 81       	ldd	r25, Z+7	; 0x07
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x710>
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	65 96       	adiw	r28, 0x15	; 21
    11be:	e2 e1       	ldi	r30, 0x12	; 18
    11c0:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__epilogue_restores__>

000011c4 <__prologue_saves__>:
    11c4:	2f 92       	push	r2
    11c6:	3f 92       	push	r3
    11c8:	4f 92       	push	r4
    11ca:	5f 92       	push	r5
    11cc:	6f 92       	push	r6
    11ce:	7f 92       	push	r7
    11d0:	8f 92       	push	r8
    11d2:	9f 92       	push	r9
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	ca 1b       	sub	r28, r26
    11ee:	db 0b       	sbc	r29, r27
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	09 94       	ijmp

000011fc <__epilogue_restores__>:
    11fc:	2a 88       	ldd	r2, Y+18	; 0x12
    11fe:	39 88       	ldd	r3, Y+17	; 0x11
    1200:	48 88       	ldd	r4, Y+16	; 0x10
    1202:	5f 84       	ldd	r5, Y+15	; 0x0f
    1204:	6e 84       	ldd	r6, Y+14	; 0x0e
    1206:	7d 84       	ldd	r7, Y+13	; 0x0d
    1208:	8c 84       	ldd	r8, Y+12	; 0x0c
    120a:	9b 84       	ldd	r9, Y+11	; 0x0b
    120c:	aa 84       	ldd	r10, Y+10	; 0x0a
    120e:	b9 84       	ldd	r11, Y+9	; 0x09
    1210:	c8 84       	ldd	r12, Y+8	; 0x08
    1212:	df 80       	ldd	r13, Y+7	; 0x07
    1214:	ee 80       	ldd	r14, Y+6	; 0x06
    1216:	fd 80       	ldd	r15, Y+5	; 0x05
    1218:	0c 81       	ldd	r16, Y+4	; 0x04
    121a:	1b 81       	ldd	r17, Y+3	; 0x03
    121c:	aa 81       	ldd	r26, Y+2	; 0x02
    121e:	b9 81       	ldd	r27, Y+1	; 0x01
    1220:	ce 0f       	add	r28, r30
    1222:	d1 1d       	adc	r29, r1
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	ed 01       	movw	r28, r26
    1230:	08 95       	ret

00001232 <__ftoa_engine>:
    1232:	28 30       	cpi	r18, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <__ftoa_engine+0x6>
    1236:	27 e0       	ldi	r18, 0x07	; 7
    1238:	33 27       	eor	r19, r19
    123a:	da 01       	movw	r26, r20
    123c:	99 0f       	add	r25, r25
    123e:	31 1d       	adc	r19, r1
    1240:	87 fd       	sbrc	r24, 7
    1242:	91 60       	ori	r25, 0x01	; 1
    1244:	00 96       	adiw	r24, 0x00	; 0
    1246:	61 05       	cpc	r22, r1
    1248:	71 05       	cpc	r23, r1
    124a:	39 f4       	brne	.+14     	; 0x125a <__ftoa_engine+0x28>
    124c:	32 60       	ori	r19, 0x02	; 2
    124e:	2e 5f       	subi	r18, 0xFE	; 254
    1250:	3d 93       	st	X+, r19
    1252:	30 e3       	ldi	r19, 0x30	; 48
    1254:	2a 95       	dec	r18
    1256:	e1 f7       	brne	.-8      	; 0x1250 <__ftoa_engine+0x1e>
    1258:	08 95       	ret
    125a:	9f 3f       	cpi	r25, 0xFF	; 255
    125c:	30 f0       	brcs	.+12     	; 0x126a <__ftoa_engine+0x38>
    125e:	80 38       	cpi	r24, 0x80	; 128
    1260:	71 05       	cpc	r23, r1
    1262:	61 05       	cpc	r22, r1
    1264:	09 f0       	breq	.+2      	; 0x1268 <__ftoa_engine+0x36>
    1266:	3c 5f       	subi	r19, 0xFC	; 252
    1268:	3c 5f       	subi	r19, 0xFC	; 252
    126a:	3d 93       	st	X+, r19
    126c:	91 30       	cpi	r25, 0x01	; 1
    126e:	08 f0       	brcs	.+2      	; 0x1272 <__ftoa_engine+0x40>
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	91 1d       	adc	r25, r1
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	1f 93       	push	r17
    127a:	0f 93       	push	r16
    127c:	ff 92       	push	r15
    127e:	ef 92       	push	r14
    1280:	19 2f       	mov	r17, r25
    1282:	98 7f       	andi	r25, 0xF8	; 248
    1284:	96 95       	lsr	r25
    1286:	e9 2f       	mov	r30, r25
    1288:	96 95       	lsr	r25
    128a:	96 95       	lsr	r25
    128c:	e9 0f       	add	r30, r25
    128e:	ff 27       	eor	r31, r31
    1290:	e6 53       	subi	r30, 0x36	; 54
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	99 27       	eor	r25, r25
    1296:	33 27       	eor	r19, r19
    1298:	ee 24       	eor	r14, r14
    129a:	ff 24       	eor	r15, r15
    129c:	a7 01       	movw	r20, r14
    129e:	e7 01       	movw	r28, r14
    12a0:	05 90       	lpm	r0, Z+
    12a2:	08 94       	sec
    12a4:	07 94       	ror	r0
    12a6:	28 f4       	brcc	.+10     	; 0x12b2 <__ftoa_engine+0x80>
    12a8:	36 0f       	add	r19, r22
    12aa:	e7 1e       	adc	r14, r23
    12ac:	f8 1e       	adc	r15, r24
    12ae:	49 1f       	adc	r20, r25
    12b0:	51 1d       	adc	r21, r1
    12b2:	66 0f       	add	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	06 94       	lsr	r0
    12bc:	a1 f7       	brne	.-24     	; 0x12a6 <__ftoa_engine+0x74>
    12be:	05 90       	lpm	r0, Z+
    12c0:	07 94       	ror	r0
    12c2:	28 f4       	brcc	.+10     	; 0x12ce <__ftoa_engine+0x9c>
    12c4:	e7 0e       	add	r14, r23
    12c6:	f8 1e       	adc	r15, r24
    12c8:	49 1f       	adc	r20, r25
    12ca:	56 1f       	adc	r21, r22
    12cc:	c1 1d       	adc	r28, r1
    12ce:	77 0f       	add	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	66 1f       	adc	r22, r22
    12d6:	06 94       	lsr	r0
    12d8:	a1 f7       	brne	.-24     	; 0x12c2 <__ftoa_engine+0x90>
    12da:	05 90       	lpm	r0, Z+
    12dc:	07 94       	ror	r0
    12de:	28 f4       	brcc	.+10     	; 0x12ea <__ftoa_engine+0xb8>
    12e0:	f8 0e       	add	r15, r24
    12e2:	49 1f       	adc	r20, r25
    12e4:	56 1f       	adc	r21, r22
    12e6:	c7 1f       	adc	r28, r23
    12e8:	d1 1d       	adc	r29, r1
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	66 1f       	adc	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	06 94       	lsr	r0
    12f4:	a1 f7       	brne	.-24     	; 0x12de <__ftoa_engine+0xac>
    12f6:	05 90       	lpm	r0, Z+
    12f8:	07 94       	ror	r0
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__ftoa_engine+0xd2>
    12fc:	49 0f       	add	r20, r25
    12fe:	56 1f       	adc	r21, r22
    1300:	c7 1f       	adc	r28, r23
    1302:	d8 1f       	adc	r29, r24
    1304:	99 0f       	add	r25, r25
    1306:	66 1f       	adc	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	06 94       	lsr	r0
    130e:	a9 f7       	brne	.-22     	; 0x12fa <__ftoa_engine+0xc8>
    1310:	84 91       	lpm	r24, Z
    1312:	10 95       	com	r17
    1314:	17 70       	andi	r17, 0x07	; 7
    1316:	41 f0       	breq	.+16     	; 0x1328 <__ftoa_engine+0xf6>
    1318:	d6 95       	lsr	r29
    131a:	c7 95       	ror	r28
    131c:	57 95       	ror	r21
    131e:	47 95       	ror	r20
    1320:	f7 94       	ror	r15
    1322:	e7 94       	ror	r14
    1324:	1a 95       	dec	r17
    1326:	c1 f7       	brne	.-16     	; 0x1318 <__ftoa_engine+0xe6>
    1328:	e0 e7       	ldi	r30, 0x70	; 112
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	68 94       	set
    132e:	15 90       	lpm	r1, Z+
    1330:	15 91       	lpm	r17, Z+
    1332:	35 91       	lpm	r19, Z+
    1334:	65 91       	lpm	r22, Z+
    1336:	95 91       	lpm	r25, Z+
    1338:	05 90       	lpm	r0, Z+
    133a:	7f e2       	ldi	r23, 0x2F	; 47
    133c:	73 95       	inc	r23
    133e:	e1 18       	sub	r14, r1
    1340:	f1 0a       	sbc	r15, r17
    1342:	43 0b       	sbc	r20, r19
    1344:	56 0b       	sbc	r21, r22
    1346:	c9 0b       	sbc	r28, r25
    1348:	d0 09       	sbc	r29, r0
    134a:	c0 f7       	brcc	.-16     	; 0x133c <__ftoa_engine+0x10a>
    134c:	e1 0c       	add	r14, r1
    134e:	f1 1e       	adc	r15, r17
    1350:	43 1f       	adc	r20, r19
    1352:	56 1f       	adc	r21, r22
    1354:	c9 1f       	adc	r28, r25
    1356:	d0 1d       	adc	r29, r0
    1358:	7e f4       	brtc	.+30     	; 0x1378 <__ftoa_engine+0x146>
    135a:	70 33       	cpi	r23, 0x30	; 48
    135c:	11 f4       	brne	.+4      	; 0x1362 <__ftoa_engine+0x130>
    135e:	8a 95       	dec	r24
    1360:	e6 cf       	rjmp	.-52     	; 0x132e <__ftoa_engine+0xfc>
    1362:	e8 94       	clt
    1364:	01 50       	subi	r16, 0x01	; 1
    1366:	30 f0       	brcs	.+12     	; 0x1374 <__ftoa_engine+0x142>
    1368:	08 0f       	add	r16, r24
    136a:	0a f4       	brpl	.+2      	; 0x136e <__ftoa_engine+0x13c>
    136c:	00 27       	eor	r16, r16
    136e:	02 17       	cp	r16, r18
    1370:	08 f4       	brcc	.+2      	; 0x1374 <__ftoa_engine+0x142>
    1372:	20 2f       	mov	r18, r16
    1374:	23 95       	inc	r18
    1376:	02 2f       	mov	r16, r18
    1378:	7a 33       	cpi	r23, 0x3A	; 58
    137a:	28 f0       	brcs	.+10     	; 0x1386 <__ftoa_engine+0x154>
    137c:	79 e3       	ldi	r23, 0x39	; 57
    137e:	7d 93       	st	X+, r23
    1380:	2a 95       	dec	r18
    1382:	e9 f7       	brne	.-6      	; 0x137e <__ftoa_engine+0x14c>
    1384:	10 c0       	rjmp	.+32     	; 0x13a6 <__ftoa_engine+0x174>
    1386:	7d 93       	st	X+, r23
    1388:	2a 95       	dec	r18
    138a:	89 f6       	brne	.-94     	; 0x132e <__ftoa_engine+0xfc>
    138c:	06 94       	lsr	r0
    138e:	97 95       	ror	r25
    1390:	67 95       	ror	r22
    1392:	37 95       	ror	r19
    1394:	17 95       	ror	r17
    1396:	17 94       	ror	r1
    1398:	e1 18       	sub	r14, r1
    139a:	f1 0a       	sbc	r15, r17
    139c:	43 0b       	sbc	r20, r19
    139e:	56 0b       	sbc	r21, r22
    13a0:	c9 0b       	sbc	r28, r25
    13a2:	d0 09       	sbc	r29, r0
    13a4:	98 f0       	brcs	.+38     	; 0x13cc <__ftoa_engine+0x19a>
    13a6:	23 95       	inc	r18
    13a8:	7e 91       	ld	r23, -X
    13aa:	73 95       	inc	r23
    13ac:	7a 33       	cpi	r23, 0x3A	; 58
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <__ftoa_engine+0x180>
    13b0:	70 e3       	ldi	r23, 0x30	; 48
    13b2:	7c 93       	st	X, r23
    13b4:	20 13       	cpse	r18, r16
    13b6:	b8 f7       	brcc	.-18     	; 0x13a6 <__ftoa_engine+0x174>
    13b8:	7e 91       	ld	r23, -X
    13ba:	70 61       	ori	r23, 0x10	; 16
    13bc:	7d 93       	st	X+, r23
    13be:	30 f0       	brcs	.+12     	; 0x13cc <__ftoa_engine+0x19a>
    13c0:	83 95       	inc	r24
    13c2:	71 e3       	ldi	r23, 0x31	; 49
    13c4:	7d 93       	st	X+, r23
    13c6:	70 e3       	ldi	r23, 0x30	; 48
    13c8:	2a 95       	dec	r18
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <__ftoa_engine+0x192>
    13cc:	11 24       	eor	r1, r1
    13ce:	ef 90       	pop	r14
    13d0:	ff 90       	pop	r15
    13d2:	0f 91       	pop	r16
    13d4:	1f 91       	pop	r17
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	99 27       	eor	r25, r25
    13dc:	87 fd       	sbrc	r24, 7
    13de:	90 95       	com	r25
    13e0:	08 95       	ret

000013e2 <strnlen_P>:
    13e2:	fc 01       	movw	r30, r24
    13e4:	05 90       	lpm	r0, Z+
    13e6:	61 50       	subi	r22, 0x01	; 1
    13e8:	70 40       	sbci	r23, 0x00	; 0
    13ea:	01 10       	cpse	r0, r1
    13ec:	d8 f7       	brcc	.-10     	; 0x13e4 <strnlen_P+0x2>
    13ee:	80 95       	com	r24
    13f0:	90 95       	com	r25
    13f2:	8e 0f       	add	r24, r30
    13f4:	9f 1f       	adc	r25, r31
    13f6:	08 95       	ret

000013f8 <strcmp>:
    13f8:	fb 01       	movw	r30, r22
    13fa:	dc 01       	movw	r26, r24
    13fc:	8d 91       	ld	r24, X+
    13fe:	01 90       	ld	r0, Z+
    1400:	80 19       	sub	r24, r0
    1402:	01 10       	cpse	r0, r1
    1404:	d9 f3       	breq	.-10     	; 0x13fc <strcmp+0x4>
    1406:	99 0b       	sbc	r25, r25
    1408:	08 95       	ret

0000140a <strnlen>:
    140a:	fc 01       	movw	r30, r24
    140c:	61 50       	subi	r22, 0x01	; 1
    140e:	70 40       	sbci	r23, 0x00	; 0
    1410:	01 90       	ld	r0, Z+
    1412:	01 10       	cpse	r0, r1
    1414:	d8 f7       	brcc	.-10     	; 0x140c <strnlen+0x2>
    1416:	80 95       	com	r24
    1418:	90 95       	com	r25
    141a:	8e 0f       	add	r24, r30
    141c:	9f 1f       	adc	r25, r31
    141e:	08 95       	ret

00001420 <fputc>:
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	8c 01       	movw	r16, r24
    142a:	eb 01       	movw	r28, r22
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	81 ff       	sbrs	r24, 1
    1430:	1b c0       	rjmp	.+54     	; 0x1468 <fputc+0x48>
    1432:	82 ff       	sbrs	r24, 2
    1434:	0d c0       	rjmp	.+26     	; 0x1450 <fputc+0x30>
    1436:	2e 81       	ldd	r18, Y+6	; 0x06
    1438:	3f 81       	ldd	r19, Y+7	; 0x07
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	64 f4       	brge	.+24     	; 0x145c <fputc+0x3c>
    1444:	e8 81       	ld	r30, Y
    1446:	f9 81       	ldd	r31, Y+1	; 0x01
    1448:	01 93       	st	Z+, r16
    144a:	f9 83       	std	Y+1, r31	; 0x01
    144c:	e8 83       	st	Y, r30
    144e:	06 c0       	rjmp	.+12     	; 0x145c <fputc+0x3c>
    1450:	e8 85       	ldd	r30, Y+8	; 0x08
    1452:	f9 85       	ldd	r31, Y+9	; 0x09
    1454:	80 2f       	mov	r24, r16
    1456:	09 95       	icall
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	31 f4       	brne	.+12     	; 0x1468 <fputc+0x48>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	9f 83       	std	Y+7, r25	; 0x07
    1464:	8e 83       	std	Y+6, r24	; 0x06
    1466:	02 c0       	rjmp	.+4      	; 0x146c <fputc+0x4c>
    1468:	0f ef       	ldi	r16, 0xFF	; 255
    146a:	1f ef       	ldi	r17, 0xFF	; 255
    146c:	c8 01       	movw	r24, r16
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <__ultoa_invert>:
    1478:	fa 01       	movw	r30, r20
    147a:	aa 27       	eor	r26, r26
    147c:	28 30       	cpi	r18, 0x08	; 8
    147e:	51 f1       	breq	.+84     	; 0x14d4 <__ultoa_invert+0x5c>
    1480:	20 31       	cpi	r18, 0x10	; 16
    1482:	81 f1       	breq	.+96     	; 0x14e4 <__ultoa_invert+0x6c>
    1484:	e8 94       	clt
    1486:	6f 93       	push	r22
    1488:	6e 7f       	andi	r22, 0xFE	; 254
    148a:	6e 5f       	subi	r22, 0xFE	; 254
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	af 4f       	sbci	r26, 0xFF	; 255
    1494:	b1 e0       	ldi	r27, 0x01	; 1
    1496:	3e d0       	rcall	.+124    	; 0x1514 <__ultoa_invert+0x9c>
    1498:	b4 e0       	ldi	r27, 0x04	; 4
    149a:	3c d0       	rcall	.+120    	; 0x1514 <__ultoa_invert+0x9c>
    149c:	67 0f       	add	r22, r23
    149e:	78 1f       	adc	r23, r24
    14a0:	89 1f       	adc	r24, r25
    14a2:	9a 1f       	adc	r25, r26
    14a4:	a1 1d       	adc	r26, r1
    14a6:	68 0f       	add	r22, r24
    14a8:	79 1f       	adc	r23, r25
    14aa:	8a 1f       	adc	r24, r26
    14ac:	91 1d       	adc	r25, r1
    14ae:	a1 1d       	adc	r26, r1
    14b0:	6a 0f       	add	r22, r26
    14b2:	71 1d       	adc	r23, r1
    14b4:	81 1d       	adc	r24, r1
    14b6:	91 1d       	adc	r25, r1
    14b8:	a1 1d       	adc	r26, r1
    14ba:	20 d0       	rcall	.+64     	; 0x14fc <__ultoa_invert+0x84>
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <__ultoa_invert+0x48>
    14be:	68 94       	set
    14c0:	3f 91       	pop	r19
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	26 9f       	mul	r18, r22
    14c6:	11 24       	eor	r1, r1
    14c8:	30 19       	sub	r19, r0
    14ca:	30 5d       	subi	r19, 0xD0	; 208
    14cc:	31 93       	st	Z+, r19
    14ce:	de f6       	brtc	.-74     	; 0x1486 <__ultoa_invert+0xe>
    14d0:	cf 01       	movw	r24, r30
    14d2:	08 95       	ret
    14d4:	46 2f       	mov	r20, r22
    14d6:	47 70       	andi	r20, 0x07	; 7
    14d8:	40 5d       	subi	r20, 0xD0	; 208
    14da:	41 93       	st	Z+, r20
    14dc:	b3 e0       	ldi	r27, 0x03	; 3
    14de:	0f d0       	rcall	.+30     	; 0x14fe <__ultoa_invert+0x86>
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__ultoa_invert+0x5c>
    14e2:	f6 cf       	rjmp	.-20     	; 0x14d0 <__ultoa_invert+0x58>
    14e4:	46 2f       	mov	r20, r22
    14e6:	4f 70       	andi	r20, 0x0F	; 15
    14e8:	40 5d       	subi	r20, 0xD0	; 208
    14ea:	4a 33       	cpi	r20, 0x3A	; 58
    14ec:	18 f0       	brcs	.+6      	; 0x14f4 <__ultoa_invert+0x7c>
    14ee:	49 5d       	subi	r20, 0xD9	; 217
    14f0:	31 fd       	sbrc	r19, 1
    14f2:	40 52       	subi	r20, 0x20	; 32
    14f4:	41 93       	st	Z+, r20
    14f6:	02 d0       	rcall	.+4      	; 0x14fc <__ultoa_invert+0x84>
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__ultoa_invert+0x6c>
    14fa:	ea cf       	rjmp	.-44     	; 0x14d0 <__ultoa_invert+0x58>
    14fc:	b4 e0       	ldi	r27, 0x04	; 4
    14fe:	a6 95       	lsr	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	ba 95       	dec	r27
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__ultoa_invert+0x86>
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 05       	cpc	r22, r1
    1510:	71 05       	cpc	r23, r1
    1512:	08 95       	ret
    1514:	9b 01       	movw	r18, r22
    1516:	ac 01       	movw	r20, r24
    1518:	0a 2e       	mov	r0, r26
    151a:	06 94       	lsr	r0
    151c:	57 95       	ror	r21
    151e:	47 95       	ror	r20
    1520:	37 95       	ror	r19
    1522:	27 95       	ror	r18
    1524:	ba 95       	dec	r27
    1526:	c9 f7       	brne	.-14     	; 0x151a <__ultoa_invert+0xa2>
    1528:	62 0f       	add	r22, r18
    152a:	73 1f       	adc	r23, r19
    152c:	84 1f       	adc	r24, r20
    152e:	95 1f       	adc	r25, r21
    1530:	a0 1d       	adc	r26, r0
    1532:	08 95       	ret

00001534 <__eerd_byte_m328p>:
    1534:	f9 99       	sbic	0x1f, 1	; 31
    1536:	fe cf       	rjmp	.-4      	; 0x1534 <__eerd_byte_m328p>
    1538:	92 bd       	out	0x22, r25	; 34
    153a:	81 bd       	out	0x21, r24	; 33
    153c:	f8 9a       	sbi	0x1f, 0	; 31
    153e:	99 27       	eor	r25, r25
    1540:	80 b5       	in	r24, 0x20	; 32
    1542:	08 95       	ret

00001544 <__eeupd_byte_m328p>:
    1544:	26 2f       	mov	r18, r22

00001546 <__eeupd_r18_m328p>:
    1546:	f9 99       	sbic	0x1f, 1	; 31
    1548:	fe cf       	rjmp	.-4      	; 0x1546 <__eeupd_r18_m328p>
    154a:	92 bd       	out	0x22, r25	; 34
    154c:	81 bd       	out	0x21, r24	; 33
    154e:	f8 9a       	sbi	0x1f, 0	; 31
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	00 b4       	in	r0, 0x20	; 32
    1554:	02 16       	cp	r0, r18
    1556:	39 f0       	breq	.+14     	; 0x1566 <__eeupd_r18_m328p+0x20>
    1558:	1f ba       	out	0x1f, r1	; 31
    155a:	20 bd       	out	0x20, r18	; 32
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	fa 9a       	sbi	0x1f, 2	; 31
    1562:	f9 9a       	sbi	0x1f, 1	; 31
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	08 95       	ret

00001568 <_exit>:
    1568:	f8 94       	cli

0000156a <__stop_program>:
    156a:	ff cf       	rjmp	.-2      	; 0x156a <__stop_program>
