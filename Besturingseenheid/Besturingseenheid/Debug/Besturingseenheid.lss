
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000560  00800100  0000260c  000026a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000260c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800660  00800660  00002c00  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00006958  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002760  00000000  00000000  00006b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0e  00000000  00000000  000092d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001620  00000000  00000000  0000a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  0000b708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000857  00000000  00000000  0000be9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3a  00000000  00000000  0000c6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000e52d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	ec e0       	ldi	r30, 0x0C	; 12
     1ba:	f6 e2       	ldi	r31, 0x26	; 38
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a0 36       	cpi	r26, 0x60	; 96
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	a0 e6       	ldi	r26, 0x60	; 96
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a6 39       	cpi	r26, 0x96	; 150
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c4 01 	call	0x388	; 0x388 <main>
     1dc:	0c 94 04 13 	jmp	0x2608	; 0x2608 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 60 06 	lds	r24, 0x0660
     262:	90 91 61 06 	lds	r25, 0x0661
}	
     266:	08 95       	ret

00000268 <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     268:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9c e9       	ldi	r25, 0x9C	; 156
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <getDistance+0x6>
     272:	00 c0       	rjmp	.+0      	; 0x274 <getDistance+0xc>
     274:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     276:	28 98       	cbi	0x05, 0	; 5
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	91 ee       	ldi	r25, 0xE1	; 225
     27c:	a4 e0       	ldi	r26, 0x04	; 4
     27e:	81 50       	subi	r24, 0x01	; 1
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	a0 40       	sbci	r26, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <getDistance+0x16>
     286:	00 c0       	rjmp	.+0      	; 0x288 <getDistance+0x20>
     288:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     28a:	60 91 6c 06 	lds	r22, 0x066C
     28e:	70 91 6d 06 	lds	r23, 0x066D
     292:	80 91 6e 06 	lds	r24, 0x066E
     296:	90 91 6f 06 	lds	r25, 0x066F
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e3       	ldi	r21, 0x3F	; 63
     2a2:	0e 94 2e 0b 	call	0x165c	; 0x165c <__mulsf3>
     2a6:	29 e9       	ldi	r18, 0x99	; 153
     2a8:	3b eb       	ldi	r19, 0xBB	; 187
     2aa:	46 e1       	ldi	r20, 0x16	; 22
     2ac:	5b e3       	ldi	r21, 0x3B	; 59
     2ae:	0e 94 2e 0b 	call	0x165c	; 0x165c <__mulsf3>
     2b2:	26 2f       	mov	r18, r22
     2b4:	37 2f       	mov	r19, r23
     2b6:	f8 2f       	mov	r31, r24
     2b8:	e9 2f       	mov	r30, r25
     2ba:	46 2f       	mov	r20, r22
     2bc:	57 2f       	mov	r21, r23
     2be:	68 2f       	mov	r22, r24
     2c0:	79 2f       	mov	r23, r25
     2c2:	40 93 66 06 	sts	0x0666, r20
     2c6:	50 93 67 06 	sts	0x0667, r21
     2ca:	60 93 68 06 	sts	0x0668, r22
     2ce:	70 93 69 06 	sts	0x0669, r23
	return afstand;
}
     2d2:	82 2f       	mov	r24, r18
     2d4:	93 2f       	mov	r25, r19
     2d6:	af 2f       	mov	r26, r31
     2d8:	be 2f       	mov	r27, r30
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	08 95       	ret

000002e0 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2e0:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e4:	68 2f       	mov	r22, r24
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__floatsisf>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 ea       	ldi	r20, 0xA0	; 160
     2f6:	5b e3       	ldi	r21, 0x3B	; 59
     2f8:	0e 94 2e 0b 	call	0x165c	; 0x165c <__mulsf3>
     2fc:	26 2f       	mov	r18, r22
     2fe:	37 2f       	mov	r19, r23
     300:	f8 2f       	mov	r31, r24
     302:	e9 2f       	mov	r30, r25
     304:	46 2f       	mov	r20, r22
     306:	57 2f       	mov	r21, r23
     308:	68 2f       	mov	r22, r24
     30a:	79 2f       	mov	r23, r25
     30c:	40 93 74 06 	sts	0x0674, r20
     310:	50 93 75 06 	sts	0x0675, r21
     314:	60 93 76 06 	sts	0x0676, r22
     318:	70 93 77 06 	sts	0x0677, r23
	ADCRes = (Volt - 0.5) * 100;
     31c:	82 2f       	mov	r24, r18
     31e:	93 2f       	mov	r25, r19
     320:	af 2f       	mov	r26, r31
     322:	be 2f       	mov	r27, r30
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 0f 0a 	call	0x141e	; 0x141e <__subsf3>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	48 ec       	ldi	r20, 0xC8	; 200
     33a:	52 e4       	ldi	r21, 0x42	; 66
     33c:	0e 94 2e 0b 	call	0x165c	; 0x165c <__mulsf3>
     340:	26 2f       	mov	r18, r22
     342:	37 2f       	mov	r19, r23
     344:	f8 2f       	mov	r31, r24
     346:	e9 2f       	mov	r30, r25
     348:	46 2f       	mov	r20, r22
     34a:	57 2f       	mov	r21, r23
     34c:	68 2f       	mov	r22, r24
     34e:	79 2f       	mov	r23, r25
     350:	40 93 98 06 	sts	0x0698, r20
     354:	50 93 99 06 	sts	0x0699, r21
     358:	60 93 9a 06 	sts	0x069A, r22
     35c:	70 93 9b 06 	sts	0x069B, r23
	return ADCRes;
}
     360:	82 2f       	mov	r24, r18
     362:	93 2f       	mov	r25, r19
     364:	af 2f       	mov	r26, r31
     366:	be 2f       	mov	r27, r30
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	08 95       	ret

0000036e <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36e:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     372:	08 95       	ret

00000374 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     378:	9c e9       	ldi	r25, 0x9C	; 156
     37a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     37c:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     380:	85 b5       	in	r24, 0x25	; 37
     382:	85 60       	ori	r24, 0x05	; 5
     384:	85 bd       	out	0x25, r24	; 37
}
     386:	08 95       	ret

00000388 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     388:	0e 94 cd 08 	call	0x119a	; 0x119a <init_scherm_ports>
	init_timer();
     38c:	0e 94 ba 01 	call	0x374	; 0x374 <init_timer>
	ser_init();
     390:	0e 94 46 08 	call	0x108c	; 0x108c <ser_init>
	ADC_init();
     394:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     398:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     39c:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     3a0:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     3a2:	0e 94 dd 05 	call	0xbba	; 0xbba <protocolCom>
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <main+0x1a>

000003a8 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	8f 92       	push	r8
     3b4:	9f 92       	push	r9
     3b6:	af 92       	push	r10
     3b8:	bf 92       	push	r11
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
	extraTime1++;
     3de:	80 91 62 06 	lds	r24, 0x0662
     3e2:	90 91 63 06 	lds	r25, 0x0663
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	90 93 63 06 	sts	0x0663, r25
     3ec:	80 93 62 06 	sts	0x0662, r24
	if(extraTime1>100){
     3f0:	80 91 62 06 	lds	r24, 0x0662
     3f4:	90 91 63 06 	lds	r25, 0x0663
     3f8:	85 36       	cpi	r24, 0x65	; 101
     3fa:	91 05       	cpc	r25, r1
     3fc:	6c f0       	brlt	.+26     	; 0x418 <__vector_14+0x70>
		timerVariable++;
     3fe:	80 91 60 06 	lds	r24, 0x0660
     402:	90 91 61 06 	lds	r25, 0x0661
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	90 93 61 06 	sts	0x0661, r25
     40c:	80 93 60 06 	sts	0x0660, r24
		extraTime1 = 0;
     410:	10 92 63 06 	sts	0x0663, r1
     414:	10 92 62 06 	sts	0x0662, r1
	}
	extraTime++;
     418:	80 91 64 06 	lds	r24, 0x0664
     41c:	90 91 65 06 	lds	r25, 0x0665
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 65 06 	sts	0x0665, r25
     426:	80 93 64 06 	sts	0x0664, r24
	if(extraTime>6000){
     42a:	80 91 64 06 	lds	r24, 0x0664
     42e:	90 91 65 06 	lds	r25, 0x0665
     432:	27 e1       	ldi	r18, 0x17	; 23
     434:	81 37       	cpi	r24, 0x71	; 113
     436:	92 07       	cpc	r25, r18
     438:	0c f4       	brge	.+2      	; 0x43c <__vector_14+0x94>
     43a:	9b c0       	rjmp	.+310    	; 0x572 <__vector_14+0x1ca>
		
		char* l = get_grensLight();
     43c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <get_grensLight>
		double grenslight;
		grenslight = strtod(l, NULL);
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <strtod>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24
		
		char* t = get_grensTemp();
     44c:	0e 94 13 05 	call	0xa26	; 0xa26 <get_grensTemp>
		double grenstemp;
		grenstemp = strtod(t, NULL);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <strtod>
     458:	4b 01       	movw	r8, r22
     45a:	5c 01       	movw	r10, r24
		printf("% 6.2f, % 6.2f", grenstemp, getTemp());
     45c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2a 97       	sbiw	r28, 0x0a	; 10
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	ed b7       	in	r30, 0x3d	; 61
     476:	fe b7       	in	r31, 0x3e	; 62
     478:	31 96       	adiw	r30, 0x01	; 1
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	31 e0       	ldi	r19, 0x01	; 1
     47e:	3a 83       	std	Y+2, r19	; 0x02
     480:	29 83       	std	Y+1, r18	; 0x01
     482:	82 82       	std	Z+2, r8	; 0x02
     484:	93 82       	std	Z+3, r9	; 0x03
     486:	a4 82       	std	Z+4, r10	; 0x04
     488:	b5 82       	std	Z+5, r11	; 0x05
     48a:	86 83       	std	Z+6, r24	; 0x06
     48c:	97 83       	std	Z+7, r25	; 0x07
     48e:	a0 87       	std	Z+8, r26	; 0x08
     490:	b1 87       	std	Z+9, r27	; 0x09
     492:	0e 94 46 12 	call	0x248c	; 0x248c <printf>
		printf("% 6.2f, %i", grenslight, getLight());
     496:	2d b7       	in	r18, 0x3d	; 61
     498:	3e b7       	in	r19, 0x3e	; 62
     49a:	26 5f       	subi	r18, 0xF6	; 246
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	3e bf       	out	0x3e, r19	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	2d bf       	out	0x3d, r18	; 61
     4a8:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     4ac:	ad b7       	in	r26, 0x3d	; 61
     4ae:	be b7       	in	r27, 0x3e	; 62
     4b0:	18 97       	sbiw	r26, 0x08	; 8
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	be bf       	out	0x3e, r27	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	ad bf       	out	0x3d, r26	; 61
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	2f e0       	ldi	r18, 0x0F	; 15
     4c4:	31 e0       	ldi	r19, 0x01	; 1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	3a 83       	std	Y+2, r19	; 0x02
     4cc:	29 83       	std	Y+1, r18	; 0x01
     4ce:	c2 82       	std	Z+2, r12	; 0x02
     4d0:	d3 82       	std	Z+3, r13	; 0x03
     4d2:	e4 82       	std	Z+4, r14	; 0x04
     4d4:	f5 82       	std	Z+5, r15	; 0x05
     4d6:	86 83       	std	Z+6, r24	; 0x06
     4d8:	17 82       	std	Z+7, r1	; 0x07
     4da:	0e 94 46 12 	call	0x248c	; 0x248c <printf>

		
		if(getLight()> grenslight && getTemp() > grenstemp && (getIn() % 2) == 0)
     4de:	2d b7       	in	r18, 0x3d	; 61
     4e0:	3e b7       	in	r19, 0x3e	; 62
     4e2:	28 5f       	subi	r18, 0xF8	; 248
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	3e bf       	out	0x3e, r19	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	2d bf       	out	0x3d, r18	; 61
     4f0:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     4f4:	68 2f       	mov	r22, r24
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__floatsisf>
     500:	a7 01       	movw	r20, r14
     502:	96 01       	movw	r18, r12
     504:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     508:	18 16       	cp	r1, r24
     50a:	74 f4       	brge	.+28     	; 0x528 <__vector_14+0x180>
     50c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     510:	a5 01       	movw	r20, r10
     512:	94 01       	movw	r18, r8
     514:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     518:	18 16       	cp	r1, r24
     51a:	34 f4       	brge	.+12     	; 0x528 <__vector_14+0x180>
     51c:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
     520:	80 fd       	sbrc	r24, 0
     522:	02 c0       	rjmp	.+4      	; 0x528 <__vector_14+0x180>
		{
			uitrollen();
     524:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <uitrollen>
		}
		if(getLight()< grenslight && getTemp() < grenstemp && (getIn() % 2) == 1)
     528:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     52c:	68 2f       	mov	r22, r24
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__floatsisf>
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__cmpsf2>
     540:	88 23       	and	r24, r24
     542:	9c f4       	brge	.+38     	; 0x56a <__vector_14+0x1c2>
     544:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     548:	a5 01       	movw	r20, r10
     54a:	94 01       	movw	r18, r8
     54c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__cmpsf2>
     550:	88 23       	and	r24, r24
     552:	5c f4       	brge	.+22     	; 0x56a <__vector_14+0x1c2>
     554:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
     558:	62 e0       	ldi	r22, 0x02	; 2
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	11 f4       	brne	.+4      	; 0x56a <__vector_14+0x1c2>
		{
			oprollen();
     566:	0e 94 56 09 	call	0x12ac	; 0x12ac <oprollen>
		}	
		
		// Resets de timer en de Totale timer ticks*/
		extraTime = 0;
     56a:	10 92 65 06 	sts	0x0665, r1
     56e:	10 92 64 06 	sts	0x0664, r1
	}
}
     572:	ff 91       	pop	r31
     574:	ef 91       	pop	r30
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <__vector_2>:

ISR(INT1_vect)
{
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
	if(i == 1)
     5ce:	80 91 6a 06 	lds	r24, 0x066A
     5d2:	90 91 6b 06 	lds	r25, 0x066B
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	91 05       	cpc	r25, r1
     5da:	d1 f4       	brne	.+52     	; 0x610 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     5dc:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     5e0:	c4 e8       	ldi	r28, 0x84	; 132
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	68 81       	ld	r22, Y
     5e6:	79 81       	ldd	r23, Y+1	; 0x01
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatunsisf>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	80 93 6c 06 	sts	0x066C, r24
     5f8:	90 93 6d 06 	sts	0x066D, r25
     5fc:	a0 93 6e 06 	sts	0x066E, r26
     600:	b0 93 6f 06 	sts	0x066F, r27
		TCNT1 = 0; //Reset duration
     604:	19 82       	std	Y+1, r1	; 0x01
     606:	18 82       	st	Y, r1
		i = 0; //Reset counter
     608:	10 92 6b 06 	sts	0x066B, r1
     60c:	10 92 6a 06 	sts	0x066A, r1
	}

	if(i==0)
     610:	80 91 6a 06 	lds	r24, 0x066A
     614:	90 91 6b 06 	lds	r25, 0x066B
     618:	00 97       	sbiw	r24, 0x00	; 0
     61a:	59 f4       	brne	.+22     	; 0x632 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     61c:	e1 e8       	ldi	r30, 0x81	; 129
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	81 60       	ori	r24, 0x01	; 1
     624:	80 83       	st	Z, r24
		i = 1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	90 93 6b 06 	sts	0x066B, r25
     62e:	80 93 6a 06 	sts	0x066A, r24
	}
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	7f 91       	pop	r23
     644:	6f 91       	pop	r22
     646:	5f 91       	pop	r21
     648:	4f 91       	pop	r20
     64a:	3f 91       	pop	r19
     64c:	2f 91       	pop	r18
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <set_maxUnroll>:
		}
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     662:	c0 91 cf 05 	lds	r28, 0x05CF
     666:	d0 91 d0 05 	lds	r29, 0x05D0
     66a:	80 91 db 05 	lds	r24, 0x05DB
     66e:	90 91 dc 05 	lds	r25, 0x05DC
     672:	99 23       	and	r25, r25
     674:	cc f0       	brlt	.+50     	; 0x6a8 <set_maxUnroll+0x50>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     67a:	f8 01       	movw	r30, r16
     67c:	e8 0f       	add	r30, r24
     67e:	f9 1f       	adc	r31, r25
     680:	ce 01       	movw	r24, r28
     682:	60 81       	ld	r22, Z
     684:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	80 91 cf 05 	lds	r24, 0x05CF
     68e:	90 91 d0 05 	lds	r25, 0x05D0
     692:	9e 01       	movw	r18, r28
     694:	28 1b       	sub	r18, r24
     696:	39 0b       	sbc	r19, r25
     698:	c9 01       	movw	r24, r18
     69a:	20 91 db 05 	lds	r18, 0x05DB
     69e:	30 91 dc 05 	lds	r19, 0x05DC
     6a2:	28 17       	cp	r18, r24
     6a4:	39 07       	cpc	r19, r25
     6a6:	4c f7       	brge	.-46     	; 0x67a <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <set_minUnroll>:
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     6bc:	c0 91 d1 05 	lds	r28, 0x05D1
     6c0:	d0 91 d2 05 	lds	r29, 0x05D2
     6c4:	80 91 dd 05 	lds	r24, 0x05DD
     6c8:	90 91 de 05 	lds	r25, 0x05DE
     6cc:	99 23       	and	r25, r25
     6ce:	cc f0       	brlt	.+50     	; 0x702 <set_minUnroll+0x50>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     6d4:	f8 01       	movw	r30, r16
     6d6:	e8 0f       	add	r30, r24
     6d8:	f9 1f       	adc	r31, r25
     6da:	ce 01       	movw	r24, r28
     6dc:	60 81       	ld	r22, Z
     6de:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     6e2:	21 96       	adiw	r28, 0x01	; 1
     6e4:	80 91 d1 05 	lds	r24, 0x05D1
     6e8:	90 91 d2 05 	lds	r25, 0x05D2
     6ec:	9e 01       	movw	r18, r28
     6ee:	28 1b       	sub	r18, r24
     6f0:	39 0b       	sbc	r19, r25
     6f2:	c9 01       	movw	r24, r18
     6f4:	20 91 dd 05 	lds	r18, 0x05DD
     6f8:	30 91 de 05 	lds	r19, 0x05DE
     6fc:	28 17       	cp	r18, r24
     6fe:	39 07       	cpc	r19, r25
     700:	4c f7       	brge	.-46     	; 0x6d4 <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <set_grensLicht>:
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     716:	c0 91 d3 05 	lds	r28, 0x05D3
     71a:	d0 91 d4 05 	lds	r29, 0x05D4
     71e:	80 91 df 05 	lds	r24, 0x05DF
     722:	90 91 e0 05 	lds	r25, 0x05E0
     726:	99 23       	and	r25, r25
     728:	cc f0       	brlt	.+50     	; 0x75c <set_grensLicht+0x50>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     72e:	f8 01       	movw	r30, r16
     730:	e8 0f       	add	r30, r24
     732:	f9 1f       	adc	r31, r25
     734:	ce 01       	movw	r24, r28
     736:	60 81       	ld	r22, Z
     738:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     73c:	21 96       	adiw	r28, 0x01	; 1
     73e:	80 91 d3 05 	lds	r24, 0x05D3
     742:	90 91 d4 05 	lds	r25, 0x05D4
     746:	9e 01       	movw	r18, r28
     748:	28 1b       	sub	r18, r24
     74a:	39 0b       	sbc	r19, r25
     74c:	c9 01       	movw	r24, r18
     74e:	20 91 df 05 	lds	r18, 0x05DF
     752:	30 91 e0 05 	lds	r19, 0x05E0
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	4c f7       	brge	.-46     	; 0x72e <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	08 95       	ret

00000766 <set_grensTemp>:
		}
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     770:	c0 91 d5 05 	lds	r28, 0x05D5
     774:	d0 91 d6 05 	lds	r29, 0x05D6
     778:	80 91 e1 05 	lds	r24, 0x05E1
     77c:	90 91 e2 05 	lds	r25, 0x05E2
     780:	99 23       	and	r25, r25
     782:	cc f0       	brlt	.+50     	; 0x7b6 <set_grensTemp+0x50>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     788:	f8 01       	movw	r30, r16
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	ce 01       	movw	r24, r28
     790:	60 81       	ld	r22, Z
     792:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     796:	21 96       	adiw	r28, 0x01	; 1
     798:	80 91 d5 05 	lds	r24, 0x05D5
     79c:	90 91 d6 05 	lds	r25, 0x05D6
     7a0:	9e 01       	movw	r18, r28
     7a2:	28 1b       	sub	r18, r24
     7a4:	39 0b       	sbc	r19, r25
     7a6:	c9 01       	movw	r24, r18
     7a8:	20 91 e1 05 	lds	r18, 0x05E1
     7ac:	30 91 e2 05 	lds	r19, 0x05E2
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	4c f7       	brge	.-46     	; 0x788 <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <set_Versie>:
		}
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7ca:	c0 91 d7 05 	lds	r28, 0x05D7
     7ce:	d0 91 d8 05 	lds	r29, 0x05D8
     7d2:	80 91 e3 05 	lds	r24, 0x05E3
     7d6:	90 91 e4 05 	lds	r25, 0x05E4
     7da:	99 23       	and	r25, r25
     7dc:	cc f0       	brlt	.+50     	; 0x810 <set_Versie+0x50>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     7e2:	f8 01       	movw	r30, r16
     7e4:	e8 0f       	add	r30, r24
     7e6:	f9 1f       	adc	r31, r25
     7e8:	ce 01       	movw	r24, r28
     7ea:	60 81       	ld	r22, Z
     7ec:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7f0:	21 96       	adiw	r28, 0x01	; 1
     7f2:	80 91 d7 05 	lds	r24, 0x05D7
     7f6:	90 91 d8 05 	lds	r25, 0x05D8
     7fa:	9e 01       	movw	r18, r28
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	c9 01       	movw	r24, r18
     802:	20 91 e3 05 	lds	r18, 0x05E3
     806:	30 91 e4 05 	lds	r19, 0x05E4
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	4c f7       	brge	.-46     	; 0x7e2 <set_Versie+0x22>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <set_Locatie>:
		}
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     824:	c0 91 d9 05 	lds	r28, 0x05D9
     828:	d0 91 da 05 	lds	r29, 0x05DA
     82c:	80 91 e5 05 	lds	r24, 0x05E5
     830:	90 91 e6 05 	lds	r25, 0x05E6
     834:	99 23       	and	r25, r25
     836:	cc f0       	brlt	.+50     	; 0x86a <set_Locatie+0x50>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     83c:	f8 01       	movw	r30, r16
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	ce 01       	movw	r24, r28
     844:	60 81       	ld	r22, Z
     846:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     84a:	21 96       	adiw	r28, 0x01	; 1
     84c:	80 91 d9 05 	lds	r24, 0x05D9
     850:	90 91 da 05 	lds	r25, 0x05DA
     854:	9e 01       	movw	r18, r28
     856:	28 1b       	sub	r18, r24
     858:	39 0b       	sbc	r19, r25
     85a:	c9 01       	movw	r24, r18
     85c:	20 91 e5 05 	lds	r18, 0x05E5
     860:	30 91 e6 05 	lds	r19, 0x05E6
     864:	28 17       	cp	r18, r24
     866:	39 07       	cpc	r19, r25
     868:	4c f7       	brge	.-46     	; 0x83c <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	08 95       	ret

00000874 <set_Naam>:
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     87c:	c0 91 70 06 	lds	r28, 0x0670
     880:	d0 91 71 06 	lds	r29, 0x0671
     884:	20 91 e7 05 	lds	r18, 0x05E7
     888:	30 91 e8 05 	lds	r19, 0x05E8
     88c:	2c 17       	cp	r18, r28
     88e:	3d 07       	cpc	r19, r29
     890:	8c f0       	brlt	.+34     	; 0x8b4 <set_Naam+0x40>
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     892:	8c 01       	movw	r16, r24
     894:	0c 0f       	add	r16, r28
     896:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     898:	f8 01       	movw	r30, r16
     89a:	61 91       	ld	r22, Z+
     89c:	8f 01       	movw	r16, r30
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 ef 12 	call	0x25de	; 0x25de <__eeupd_byte_m328p>
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     8a4:	21 96       	adiw	r28, 0x01	; 1
     8a6:	80 91 e7 05 	lds	r24, 0x05E7
     8aa:	90 91 e8 05 	lds	r25, 0x05E8
     8ae:	8c 17       	cp	r24, r28
     8b0:	9d 07       	cpc	r25, r29
     8b2:	94 f7       	brge	.-28     	; 0x898 <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <set_substring>:
			

//_______________________________________________________________________________________________//
	
	 void set_substring(){
			char * p1 = strstr (in_buf, "(");
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	97 e0       	ldi	r25, 0x07	; 7
     8c2:	68 e2       	ldi	r22, 0x28	; 40
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 ed 11 	call	0x23da	; 0x23da <strchr>
			p1[strlen(p1) -1] = '\0';
     8ca:	e8 2f       	mov	r30, r24
     8cc:	f9 2f       	mov	r31, r25
     8ce:	df 01       	movw	r26, r30
     8d0:	0d 90       	ld	r0, X+
     8d2:	00 20       	and	r0, r0
     8d4:	e9 f7       	brne	.-6      	; 0x8d0 <set_substring+0x12>
     8d6:	11 97       	sbiw	r26, 0x01	; 1
     8d8:	ae 1b       	sub	r26, r30
     8da:	bf 0b       	sbc	r27, r31
     8dc:	a8 0f       	add	r26, r24
     8de:	b9 1f       	adc	r27, r25
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	1c 92       	st	X, r1
			substring = p1 +1;
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	90 93 07 07 	sts	0x0707, r25
     8ea:	80 93 06 07 	sts	0x0706, r24
		}
     8ee:	08 95       	ret

000008f0 <get_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     8f8:	c0 91 70 06 	lds	r28, 0x0670
     8fc:	d0 91 71 06 	lds	r29, 0x0671
     900:	80 91 e7 05 	lds	r24, 0x05E7
     904:	90 91 e8 05 	lds	r25, 0x05E8
     908:	8c 17       	cp	r24, r28
     90a:	9d 07       	cpc	r25, r29
     90c:	8c f0       	brlt	.+34     	; 0x930 <__stack+0x31>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     90e:	8e 01       	movw	r16, r28
     910:	06 52       	subi	r16, 0x26	; 38
     912:	19 4f       	sbci	r17, 0xF9	; 249
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     914:	ce 01       	movw	r24, r28
     916:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     91a:	f8 01       	movw	r30, r16
     91c:	81 93       	st	Z+, r24
     91e:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	char* get_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     920:	21 96       	adiw	r28, 0x01	; 1
     922:	80 91 e7 05 	lds	r24, 0x05E7
     926:	90 91 e8 05 	lds	r25, 0x05E8
     92a:	8c 17       	cp	r24, r28
     92c:	9d 07       	cpc	r25, r29
     92e:	94 f7       	brge	.-28     	; 0x914 <__stack+0x15>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		return naamRes;
	}
     930:	8a ed       	ldi	r24, 0xDA	; 218
     932:	96 e0       	ldi	r25, 0x06	; 6
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <get_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     94e:	e0 90 d9 05 	lds	r14, 0x05D9
     952:	f0 90 da 05 	lds	r15, 0x05DA
     956:	80 91 e5 05 	lds	r24, 0x05E5
     95a:	90 91 e6 05 	lds	r25, 0x05E6
     95e:	99 23       	and	r25, r25
     960:	ec f0       	brlt	.+58     	; 0x99c <get_Locatie+0x5e>
     962:	01 e0       	ldi	r16, 0x01	; 1
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     96a:	0f 2e       	mov	r0, r31
     96c:	fb ea       	ldi	r31, 0xAB	; 171
     96e:	cf 2e       	mov	r12, r31
     970:	f6 e0       	ldi	r31, 0x06	; 6
     972:	df 2e       	mov	r13, r31
     974:	f0 2d       	mov	r31, r0
     976:	c7 01       	movw	r24, r14
     978:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     97c:	cc 0d       	add	r28, r12
     97e:	dd 1d       	adc	r29, r13
     980:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     982:	08 94       	sec
     984:	e1 1c       	adc	r14, r1
     986:	f1 1c       	adc	r15, r1
     988:	e8 01       	movw	r28, r16
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	80 91 e5 05 	lds	r24, 0x05E5
     992:	90 91 e6 05 	lds	r25, 0x05E6
     996:	8c 17       	cp	r24, r28
     998:	9d 07       	cpc	r25, r29
     99a:	6c f7       	brge	.-38     	; 0x976 <get_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		return locatieRes;
	}
     99c:	8b ea       	ldi	r24, 0xAB	; 171
     99e:	96 e0       	ldi	r25, 0x06	; 6
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret

000009b2 <get_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     9c2:	e0 90 d7 05 	lds	r14, 0x05D7
     9c6:	f0 90 d8 05 	lds	r15, 0x05D8
     9ca:	80 91 e3 05 	lds	r24, 0x05E3
     9ce:	90 91 e4 05 	lds	r25, 0x05E4
     9d2:	99 23       	and	r25, r25
     9d4:	ec f0       	brlt	.+58     	; 0xa10 <get_Versie+0x5e>
     9d6:	01 e0       	ldi	r16, 0x01	; 1
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	c0 e0       	ldi	r28, 0x00	; 0
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     9de:	0f 2e       	mov	r0, r31
     9e0:	f6 e2       	ldi	r31, 0x26	; 38
     9e2:	cf 2e       	mov	r12, r31
     9e4:	f7 e0       	ldi	r31, 0x07	; 7
     9e6:	df 2e       	mov	r13, r31
     9e8:	f0 2d       	mov	r31, r0
     9ea:	c7 01       	movw	r24, r14
     9ec:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     9f0:	cc 0d       	add	r28, r12
     9f2:	dd 1d       	adc	r29, r13
     9f4:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     9f6:	08 94       	sec
     9f8:	e1 1c       	adc	r14, r1
     9fa:	f1 1c       	adc	r15, r1
     9fc:	e8 01       	movw	r28, r16
     9fe:	0f 5f       	subi	r16, 0xFF	; 255
     a00:	1f 4f       	sbci	r17, 0xFF	; 255
     a02:	80 91 e3 05 	lds	r24, 0x05E3
     a06:	90 91 e4 05 	lds	r25, 0x05E4
     a0a:	8c 17       	cp	r24, r28
     a0c:	9d 07       	cpc	r25, r29
     a0e:	6c f7       	brge	.-38     	; 0x9ea <get_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		return versieRes;
	}
     a10:	86 e2       	ldi	r24, 0x26	; 38
     a12:	97 e0       	ldi	r25, 0x07	; 7
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	08 95       	ret

00000a26 <get_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     a36:	e0 90 d5 05 	lds	r14, 0x05D5
     a3a:	f0 90 d6 05 	lds	r15, 0x05D6
     a3e:	80 91 e1 05 	lds	r24, 0x05E1
     a42:	90 91 e2 05 	lds	r25, 0x05E2
     a46:	99 23       	and	r25, r25
     a48:	ec f0       	brlt	.+58     	; 0xa84 <get_grensTemp+0x5e>
     a4a:	01 e0       	ldi	r16, 0x01	; 1
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     a52:	0f 2e       	mov	r0, r31
     a54:	f7 ed       	ldi	r31, 0xD7	; 215
     a56:	cf 2e       	mov	r12, r31
     a58:	f6 e0       	ldi	r31, 0x06	; 6
     a5a:	df 2e       	mov	r13, r31
     a5c:	f0 2d       	mov	r31, r0
     a5e:	c7 01       	movw	r24, r14
     a60:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     a64:	cc 0d       	add	r28, r12
     a66:	dd 1d       	adc	r29, r13
     a68:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     a6a:	08 94       	sec
     a6c:	e1 1c       	adc	r14, r1
     a6e:	f1 1c       	adc	r15, r1
     a70:	e8 01       	movw	r28, r16
     a72:	0f 5f       	subi	r16, 0xFF	; 255
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	80 91 e1 05 	lds	r24, 0x05E1
     a7a:	90 91 e2 05 	lds	r25, 0x05E2
     a7e:	8c 17       	cp	r24, r28
     a80:	9d 07       	cpc	r25, r29
     a82:	6c f7       	brge	.-38     	; 0xa5e <get_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}
     a84:	87 ed       	ldi	r24, 0xD7	; 215
     a86:	96 e0       	ldi	r25, 0x06	; 6
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	08 95       	ret

00000a9a <get_grensLight>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     aa6:	e0 90 d3 05 	lds	r14, 0x05D3
     aaa:	f0 90 d4 05 	lds	r15, 0x05D4
     aae:	80 91 df 05 	lds	r24, 0x05DF
     ab2:	90 91 e0 05 	lds	r25, 0x05E0
     ab6:	99 23       	and	r25, r25
     ab8:	bc f0       	brlt	.+46     	; 0xae8 <get_grensLight+0x4e>
     aba:	01 e0       	ldi	r16, 0x01	; 1
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	c0 e0       	ldi	r28, 0x00	; 0
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     ac2:	c7 01       	movw	r24, r14
     ac4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     ac8:	c2 5d       	subi	r28, 0xD2	; 210
     aca:	d8 4f       	sbci	r29, 0xF8	; 248
     acc:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     ace:	08 94       	sec
     ad0:	e1 1c       	adc	r14, r1
     ad2:	f1 1c       	adc	r15, r1
     ad4:	e8 01       	movw	r28, r16
     ad6:	0f 5f       	subi	r16, 0xFF	; 255
     ad8:	1f 4f       	sbci	r17, 0xFF	; 255
     ada:	80 91 df 05 	lds	r24, 0x05DF
     ade:	90 91 e0 05 	lds	r25, 0x05E0
     ae2:	8c 17       	cp	r24, r28
     ae4:	9d 07       	cpc	r25, r29
     ae6:	6c f7       	brge	.-38     	; 0xac2 <get_grensLight+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}
     ae8:	8e e2       	ldi	r24, 0x2E	; 46
     aea:	97 e0       	ldi	r25, 0x07	; 7
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	08 95       	ret

00000afa <get_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     b06:	e0 90 d1 05 	lds	r14, 0x05D1
     b0a:	f0 90 d2 05 	lds	r15, 0x05D2
     b0e:	80 91 dd 05 	lds	r24, 0x05DD
     b12:	90 91 de 05 	lds	r25, 0x05DE
     b16:	99 23       	and	r25, r25
     b18:	bc f0       	brlt	.+46     	; 0xb48 <get_minUnroll+0x4e>
     b1a:	01 e0       	ldi	r16, 0x01	; 1
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	c0 e0       	ldi	r28, 0x00	; 0
     b20:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     b22:	c7 01       	movw	r24, r14
     b24:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     b28:	c4 56       	subi	r28, 0x64	; 100
     b2a:	d9 4f       	sbci	r29, 0xF9	; 249
     b2c:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     b2e:	08 94       	sec
     b30:	e1 1c       	adc	r14, r1
     b32:	f1 1c       	adc	r15, r1
     b34:	e8 01       	movw	r28, r16
     b36:	0f 5f       	subi	r16, 0xFF	; 255
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	80 91 dd 05 	lds	r24, 0x05DD
     b3e:	90 91 de 05 	lds	r25, 0x05DE
     b42:	8c 17       	cp	r24, r28
     b44:	9d 07       	cpc	r25, r29
     b46:	6c f7       	brge	.-38     	; 0xb22 <get_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return minUnrollRes;
	}
     b48:	8c e9       	ldi	r24, 0x9C	; 156
     b4a:	96 e0       	ldi	r25, 0x06	; 6
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	08 95       	ret

00000b5a <get_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b66:	e0 90 cf 05 	lds	r14, 0x05CF
     b6a:	f0 90 d0 05 	lds	r15, 0x05D0
     b6e:	80 91 db 05 	lds	r24, 0x05DB
     b72:	90 91 dc 05 	lds	r25, 0x05DC
     b76:	99 23       	and	r25, r25
     b78:	bc f0       	brlt	.+46     	; 0xba8 <get_maxUnroll+0x4e>
     b7a:	01 e0       	ldi	r16, 0x01	; 1
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     b82:	c7 01       	movw	r24, r14
     b84:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__eerd_byte_m328p>
     b88:	c4 5a       	subi	r28, 0xA4	; 164
     b8a:	d8 4f       	sbci	r29, 0xF8	; 248
     b8c:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b8e:	08 94       	sec
     b90:	e1 1c       	adc	r14, r1
     b92:	f1 1c       	adc	r15, r1
     b94:	e8 01       	movw	r28, r16
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	80 91 db 05 	lds	r24, 0x05DB
     b9e:	90 91 dc 05 	lds	r25, 0x05DC
     ba2:	8c 17       	cp	r24, r28
     ba4:	9d 07       	cpc	r25, r29
     ba6:	6c f7       	brge	.-38     	; 0xb82 <get_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return maxUnrollRes;
     ba8:	8c e5       	ldi	r24, 0x5C	; 92
     baa:	97 e0       	ldi	r25, 0x07	; 7
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <protocolCom>:
char *substring;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     bba:	2f 92       	push	r2
     bbc:	3f 92       	push	r3
     bbe:	4f 92       	push	r4
     bc0:	5f 92       	push	r5
     bc2:	6f 92       	push	r6
     bc4:	7f 92       	push	r7
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
	ser_write("Please enter ID");
     bde:	8a e1       	ldi	r24, 0x1A	; 26
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     be6:	c8 e0       	ldi	r28, 0x08	; 8
     be8:	d7 e0       	ldi	r29, 0x07	; 7
     bea:	ce 01       	movw	r24, r28
     bec:	6e e1       	ldi	r22, 0x1E	; 30
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	0e 94 8e 08 	call	0x111c	; 0x111c <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     bf6:	85 ec       	ldi	r24, 0xC5	; 197
     bf8:	95 e0       	ldi	r25, 0x05	; 5
     bfa:	be 01       	movw	r22, r28
     bfc:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     c00:	28 2f       	mov	r18, r24
     c02:	39 2f       	mov	r19, r25
	if(ret |= 0){
     c04:	21 15       	cp	r18, r1
     c06:	31 05       	cpc	r19, r1
     c08:	29 f0       	breq	.+10     	; 0xc14 <protocolCom+0x5a>
		ser_writeln("Sorry, wrong ID");
     c0a:	8a e2       	ldi	r24, 0x2A	; 42
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     c12:	29 c2       	rjmp	.+1106   	; 0x1066 <protocolCom+0x4ac>
	}
	else{
		ser_writeln("Please enter version");
     c14:	8a e3       	ldi	r24, 0x3A	; 58
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
		ser_readln(in_buf, sizeof(in_buf), 1);
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	97 e0       	ldi	r25, 0x07	; 7
     c20:	6e e1       	ldi	r22, 0x1E	; 30
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	0e 94 8e 08 	call	0x111c	; 0x111c <ser_readln>
		if(strncmp("get_Versie()", in_buf, 1)){
     c2a:	80 91 08 07 	lds	r24, 0x0708
     c2e:	87 36       	cpi	r24, 0x67	; 103
     c30:	09 f4       	brne	.+2      	; 0xc34 <protocolCom+0x7a>
     c32:	19 c2       	rjmp	.+1074   	; 0x1066 <protocolCom+0x4ac>
			ser_writeln("Wrong version");
     c34:	8f e4       	ldi	r24, 0x4F	; 79
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
			ser_writeln(get_Versie());
     c3c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <get_Versie>
     c40:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
		//}
		//else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     c44:	0d e5       	ldi	r16, 0x5D	; 93
     c46:	11 e0       	ldi	r17, 0x01	; 1
				ser_readln(in_buf, sizeof(in_buf), 1);
     c48:	c8 e0       	ldi	r28, 0x08	; 8
     c4a:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c4c:	0f 2e       	mov	r0, r31
     c4e:	f6 e7       	ldi	r31, 0x76	; 118
     c50:	ef 2e       	mov	r14, r31
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	ff 2e       	mov	r15, r31
     c56:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     c58:	0f 2e       	mov	r0, r31
     c5a:	fe e9       	ldi	r31, 0x9E	; 158
     c5c:	af 2e       	mov	r10, r31
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	bf 2e       	mov	r11, r31
     c62:	f0 2d       	mov	r31, r0
				if ((getIn() % 2) == 0){
					ser_writeln("999 Zonnescherm is al opgerold!");
     c64:	0f 2e       	mov	r0, r31
     c66:	f5 ea       	ldi	r31, 0xA5	; 165
     c68:	2f 2e       	mov	r2, r31
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	3f 2e       	mov	r3, r31
     c6e:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c70:	0f 2e       	mov	r0, r31
     c72:	f5 ec       	ldi	r31, 0xC5	; 197
     c74:	cf 2e       	mov	r12, r31
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	df 2e       	mov	r13, r31
     c7a:	f0 2d       	mov	r31, r0
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     c7c:	0f 2e       	mov	r0, r31
     c7e:	fc ec       	ldi	r31, 0xCC	; 204
     c80:	8f 2e       	mov	r8, r31
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	9f 2e       	mov	r9, r31
     c86:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c88:	0f 2e       	mov	r0, r31
     c8a:	f8 ee       	ldi	r31, 0xE8	; 232
     c8c:	6f 2e       	mov	r6, r31
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	7f 2e       	mov	r7, r31
     c92:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c94:	0f 2e       	mov	r0, r31
     c96:	f7 e0       	ldi	r31, 0x07	; 7
     c98:	4f 2e       	mov	r4, r31
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	5f 2e       	mov	r5, r31
     c9e:	f0 2d       	mov	r31, r0
			ser_writeln("Wrong version");
			ser_writeln(get_Versie());
		//}
		//else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     ca0:	c8 01       	movw	r24, r16
     ca2:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
				ser_readln(in_buf, sizeof(in_buf), 1);
     ca6:	ce 01       	movw	r24, r28
     ca8:	6e e1       	ldi	r22, 0x1E	; 30
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 8e 08 	call	0x111c	; 0x111c <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     cb2:	c7 01       	movw	r24, r14
     cb4:	be 01       	movw	r22, r28
     cb6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     cba:	28 2f       	mov	r18, r24
     cbc:	39 2f       	mov	r19, r25
     cbe:	21 15       	cp	r18, r1
     cc0:	31 05       	cpc	r19, r1
     cc2:	a1 f4       	brne	.+40     	; 0xcec <protocolCom+0x132>
				if ((getIn() % 2) == 1){
     cc4:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
     cc8:	62 e0       	ldi	r22, 0x02	; 2
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	21 f4       	brne	.+8      	; 0xcde <protocolCom+0x124>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     cd6:	8d e7       	ldi	r24, 0x7D	; 125
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
				} if((getIn() % 2) == 0){
     cde:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
     ce2:	80 fd       	sbrc	r24, 0
     ce4:	1e c0       	rjmp	.+60     	; 0xd22 <protocolCom+0x168>
					uitrollen();
     ce6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <uitrollen>
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <protocolCom+0x168>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     cec:	c5 01       	movw	r24, r10
     cee:	be 01       	movw	r22, r28
     cf0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     cf4:	28 2f       	mov	r18, r24
     cf6:	39 2f       	mov	r19, r25
     cf8:	21 15       	cp	r18, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	91 f4       	brne	.+36     	; 0xd22 <protocolCom+0x168>
				if ((getIn() % 2) == 0){
     cfe:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
     d02:	80 fd       	sbrc	r24, 0
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <protocolCom+0x152>
					ser_writeln("999 Zonnescherm is al opgerold!");
     d06:	c1 01       	movw	r24, r2
     d08:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
				} if((getIn() % 2) == 1){
     d0c:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 05       	cpc	r25, r1
     d1c:	11 f4       	brne	.+4      	; 0xd22 <protocolCom+0x168>
					oprollen();
     d1e:	0e 94 56 09 	call	0x12ac	; 0x12ac <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     d22:	c6 01       	movw	r24, r12
     d24:	be 01       	movw	r22, r28
     d26:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     d2a:	28 2f       	mov	r18, r24
     d2c:	39 2f       	mov	r19, r25
     d2e:	21 15       	cp	r18, r1
     d30:	31 05       	cpc	r19, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <protocolCom+0x17c>
     d34:	b5 cf       	rjmp	.-150    	; 0xca0 <protocolCom+0xe6>
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     d36:	c4 01       	movw	r24, r8
     d38:	be 01       	movw	r22, r28
     d3a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     d3e:	28 2f       	mov	r18, r24
     d40:	39 2f       	mov	r19, r25
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	e1 f4       	brne	.+56     	; 0xd80 <protocolCom+0x1c6>
				printf("202 TEMP= % 6.2f \n", getTemp());
     d48:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	00 d0       	rcall	.+0      	; 0xd52 <protocolCom+0x198>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <protocolCom+0x19a>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <protocolCom+0x19c>
     d56:	25 ed       	ldi	r18, 0xD5	; 213
     d58:	31 e0       	ldi	r19, 0x01	; 1
     d5a:	ed b7       	in	r30, 0x3d	; 61
     d5c:	fe b7       	in	r31, 0x3e	; 62
     d5e:	32 83       	std	Z+2, r19	; 0x02
     d60:	21 83       	std	Z+1, r18	; 0x01
     d62:	83 83       	std	Z+3, r24	; 0x03
     d64:	94 83       	std	Z+4, r25	; 0x04
     d66:	a5 83       	std	Z+5, r26	; 0x05
     d68:	b6 83       	std	Z+6, r27	; 0x06
     d6a:	0e 94 46 12 	call	0x248c	; 0x248c <printf>
     d6e:	8d b7       	in	r24, 0x3d	; 61
     d70:	9e b7       	in	r25, 0x3e	; 62
     d72:	06 96       	adiw	r24, 0x06	; 6
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	9e bf       	out	0x3e, r25	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	8d bf       	out	0x3d, r24	; 61
     d7e:	90 cf       	rjmp	.-224    	; 0xca0 <protocolCom+0xe6>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     d80:	c3 01       	movw	r24, r6
     d82:	be 01       	movw	r22, r28
     d84:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     d88:	28 2f       	mov	r18, r24
     d8a:	39 2f       	mov	r19, r25
     d8c:	21 15       	cp	r18, r1
     d8e:	31 05       	cpc	r19, r1
     d90:	49 f4       	brne	.+18     	; 0xda4 <protocolCom+0x1ea>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     d92:	87 ef       	ldi	r24, 0xF7	; 247
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     d9a:	0e 94 13 05 	call	0xa26	; 0xa26 <get_grensTemp>
     d9e:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     da2:	7e cf       	rjmp	.-260    	; 0xca0 <protocolCom+0xe6>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     da4:	c2 01       	movw	r24, r4
     da6:	be 01       	movw	r22, r28
     da8:	4e e0       	ldi	r20, 0x0E	; 14
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     db0:	28 2f       	mov	r18, r24
     db2:	39 2f       	mov	r19, r25
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	49 f4       	brne	.+18     	; 0xdcc <protocolCom+0x212>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				set_substring();
     dba:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_grensTemp(substring);
     dbe:	80 91 06 07 	lds	r24, 0x0706
     dc2:	90 91 07 07 	lds	r25, 0x0707
     dc6:	0e 94 b3 03 	call	0x766	; 0x766 <set_grensTemp>
     dca:	6a cf       	rjmp	.-300    	; 0xca0 <protocolCom+0xe6>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     dcc:	89 e1       	ldi	r24, 0x19	; 25
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	be 01       	movw	r22, r28
     dd2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     dd6:	28 2f       	mov	r18, r24
     dd8:	39 2f       	mov	r19, r25
     dda:	21 15       	cp	r18, r1
     ddc:	31 05       	cpc	r19, r1
     dde:	c1 f4       	brne	.+48     	; 0xe10 <protocolCom+0x256>
				printf("202 LIGHT %i \n", getLight());
     de0:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <protocolCom+0x22c>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <protocolCom+0x22e>
     de8:	ed b7       	in	r30, 0x3d	; 61
     dea:	fe b7       	in	r31, 0x3e	; 62
     dec:	31 96       	adiw	r30, 0x01	; 1
     dee:	23 e2       	ldi	r18, 0x23	; 35
     df0:	32 e0       	ldi	r19, 0x02	; 2
     df2:	ad b7       	in	r26, 0x3d	; 61
     df4:	be b7       	in	r27, 0x3e	; 62
     df6:	12 96       	adiw	r26, 0x02	; 2
     df8:	3c 93       	st	X, r19
     dfa:	2e 93       	st	-X, r18
     dfc:	11 97       	sbiw	r26, 0x01	; 1
     dfe:	82 83       	std	Z+2, r24	; 0x02
     e00:	13 82       	std	Z+3, r1	; 0x03
     e02:	0e 94 46 12 	call	0x248c	; 0x248c <printf>
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	48 cf       	rjmp	.-368    	; 0xca0 <protocolCom+0xe6>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     e10:	82 e3       	ldi	r24, 0x32	; 50
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	be 01       	movw	r22, r28
     e16:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     e1a:	28 2f       	mov	r18, r24
     e1c:	39 2f       	mov	r19, r25
     e1e:	21 15       	cp	r18, r1
     e20:	31 05       	cpc	r19, r1
     e22:	49 f4       	brne	.+18     	; 0xe36 <protocolCom+0x27c>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     e24:	82 e4       	ldi	r24, 0x42	; 66
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     e2c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <get_grensLight>
     e30:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     e34:	35 cf       	rjmp	.-406    	; 0xca0 <protocolCom+0xe6>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     e36:	83 e5       	ldi	r24, 0x53	; 83
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	be 01       	movw	r22, r28
     e3c:	4f e0       	ldi	r20, 0x0F	; 15
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     e44:	28 2f       	mov	r18, r24
     e46:	39 2f       	mov	r19, r25
     e48:	21 15       	cp	r18, r1
     e4a:	31 05       	cpc	r19, r1
     e4c:	49 f4       	brne	.+18     	; 0xe60 <protocolCom+0x2a6>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				set_substring();
     e4e:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_grensLicht(substring);
     e52:	80 91 06 07 	lds	r24, 0x0706
     e56:	90 91 07 07 	lds	r25, 0x0707
     e5a:	0e 94 86 03 	call	0x70c	; 0x70c <set_grensLicht>
     e5e:	20 cf       	rjmp	.-448    	; 0xca0 <protocolCom+0xe6>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     e60:	86 e6       	ldi	r24, 0x66	; 102
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	be 01       	movw	r22, r28
     e66:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     e6a:	28 2f       	mov	r18, r24
     e6c:	39 2f       	mov	r19, r25
     e6e:	21 15       	cp	r18, r1
     e70:	31 05       	cpc	r19, r1
     e72:	49 f4       	brne	.+18     	; 0xe86 <protocolCom+0x2cc>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     e74:	85 e7       	ldi	r24, 0x75	; 117
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     e7c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <get_maxUnroll>
     e80:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     e84:	0d cf       	rjmp	.-486    	; 0xca0 <protocolCom+0xe6>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     e86:	86 e8       	ldi	r24, 0x86	; 134
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	be 01       	movw	r22, r28
     e8c:	4f e0       	ldi	r20, 0x0F	; 15
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     e94:	28 2f       	mov	r18, r24
     e96:	39 2f       	mov	r19, r25
     e98:	21 15       	cp	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	49 f4       	brne	.+18     	; 0xeb0 <protocolCom+0x2f6>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				set_substring();
     e9e:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_maxUnroll(substring);
     ea2:	80 91 06 07 	lds	r24, 0x0706
     ea6:	90 91 07 07 	lds	r25, 0x0707
     eaa:	0e 94 2c 03 	call	0x658	; 0x658 <set_maxUnroll>
     eae:	f8 ce       	rjmp	.-528    	; 0xca0 <protocolCom+0xe6>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     eb0:	88 e9       	ldi	r24, 0x98	; 152
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	be 01       	movw	r22, r28
     eb6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     eba:	28 2f       	mov	r18, r24
     ebc:	39 2f       	mov	r19, r25
     ebe:	21 15       	cp	r18, r1
     ec0:	31 05       	cpc	r19, r1
     ec2:	49 f4       	brne	.+18     	; 0xed6 <protocolCom+0x31c>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     ec4:	87 ea       	ldi	r24, 0xA7	; 167
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     ecc:	0e 94 7d 05 	call	0xafa	; 0xafa <get_minUnroll>
     ed0:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     ed4:	e5 ce       	rjmp	.-566    	; 0xca0 <protocolCom+0xe6>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     ed6:	88 eb       	ldi	r24, 0xB8	; 184
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	be 01       	movw	r22, r28
     edc:	4f e0       	ldi	r20, 0x0F	; 15
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     ee4:	28 2f       	mov	r18, r24
     ee6:	39 2f       	mov	r19, r25
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	49 f4       	brne	.+18     	; 0xf00 <protocolCom+0x346>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				set_substring();
     eee:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_minUnroll(substring);
     ef2:	80 91 06 07 	lds	r24, 0x0706
     ef6:	90 91 07 07 	lds	r25, 0x0707
     efa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <set_minUnroll>
     efe:	d0 ce       	rjmp	.-608    	; 0xca0 <protocolCom+0xe6>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     f00:	8a ec       	ldi	r24, 0xCA	; 202
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	be 01       	movw	r22, r28
     f06:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     f0a:	28 2f       	mov	r18, r24
     f0c:	39 2f       	mov	r19, r25
     f0e:	21 15       	cp	r18, r1
     f10:	31 05       	cpc	r19, r1
     f12:	49 f4       	brne	.+18     	; 0xf26 <protocolCom+0x36c>
				ser_write("202 "),  ser_writeln(get_Naam());
     f14:	83 ed       	ldi	r24, 0xD3	; 211
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     f1c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <get_Naam>
     f20:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     f24:	bd ce       	rjmp	.-646    	; 0xca0 <protocolCom+0xe6>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     f26:	88 ed       	ldi	r24, 0xD8	; 216
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	be 01       	movw	r22, r28
     f2c:	48 e0       	ldi	r20, 0x08	; 8
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     f34:	28 2f       	mov	r18, r24
     f36:	39 2f       	mov	r19, r25
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f4       	brne	.+26     	; 0xf58 <protocolCom+0x39e>
				set_substring();
     f3e:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_Naam(substring);
     f42:	80 91 06 07 	lds	r24, 0x0706
     f46:	90 91 07 07 	lds	r25, 0x0707
     f4a:	0e 94 3a 04 	call	0x874	; 0x874 <set_Naam>
				printf("200 OK \n");
     f4e:	84 ee       	ldi	r24, 0xE4	; 228
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <puts>
     f56:	a4 ce       	rjmp	.-696    	; 0xca0 <protocolCom+0xe6>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     f58:	8c ee       	ldi	r24, 0xEC	; 236
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	be 01       	movw	r22, r28
     f5e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     f62:	28 2f       	mov	r18, r24
     f64:	39 2f       	mov	r19, r25
     f66:	21 15       	cp	r18, r1
     f68:	31 05       	cpc	r19, r1
     f6a:	49 f4       	brne	.+18     	; 0xf7e <protocolCom+0x3c4>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     f6c:	83 ed       	ldi	r24, 0xD3	; 211
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     f74:	0e 94 9f 04 	call	0x93e	; 0x93e <get_Locatie>
     f78:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     f7c:	91 ce       	rjmp	.-734    	; 0xca0 <protocolCom+0xe6>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     f7e:	89 ef       	ldi	r24, 0xF9	; 249
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	be 01       	movw	r22, r28
     f84:	4c e0       	ldi	r20, 0x0C	; 12
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     f8c:	28 2f       	mov	r18, r24
     f8e:	39 2f       	mov	r19, r25
     f90:	21 15       	cp	r18, r1
     f92:	31 05       	cpc	r19, r1
     f94:	69 f4       	brne	.+26     	; 0xfb0 <protocolCom+0x3f6>
				set_substring();
     f96:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_Locatie(substring);
     f9a:	80 91 06 07 	lds	r24, 0x0706
     f9e:	90 91 07 07 	lds	r25, 0x0707
     fa2:	0e 94 0d 04 	call	0x81a	; 0x81a <set_Locatie>
				
				printf("200 OK \n");
     fa6:	84 ee       	ldi	r24, 0xE4	; 228
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <puts>
     fae:	78 ce       	rjmp	.-784    	; 0xca0 <protocolCom+0xe6>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     fb0:	89 e0       	ldi	r24, 0x09	; 9
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	be 01       	movw	r22, r28
     fb6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
     fba:	28 2f       	mov	r18, r24
     fbc:	39 2f       	mov	r19, r25
     fbe:	21 15       	cp	r18, r1
     fc0:	31 05       	cpc	r19, r1
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <protocolCom+0x41c>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     fc4:	85 e1       	ldi	r24, 0x15	; 21
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
     fcc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <get_Versie>
     fd0:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
     fd4:	65 ce       	rjmp	.-822    	; 0xca0 <protocolCom+0xe6>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     fd6:	82 e2       	ldi	r24, 0x22	; 34
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	be 01       	movw	r22, r28
     fdc:	4c e0       	ldi	r20, 0x0C	; 12
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	0e 94 01 12 	call	0x2402	; 0x2402 <strncmp>
     fe4:	28 2f       	mov	r18, r24
     fe6:	39 2f       	mov	r19, r25
     fe8:	21 15       	cp	r18, r1
     fea:	31 05       	cpc	r19, r1
     fec:	69 f4       	brne	.+26     	; 0x1008 <protocolCom+0x44e>
					set_substring();
     fee:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
					set_Versie(substring);
     ff2:	80 91 06 07 	lds	r24, 0x0706
     ff6:	90 91 07 07 	lds	r25, 0x0707
     ffa:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <set_Versie>
					
					printf("200 OK \n");
     ffe:	84 ee       	ldi	r24, 0xE4	; 228
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <puts>
    1006:	4c ce       	rjmp	.-872    	; 0xca0 <protocolCom+0xe6>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
    1008:	81 e3       	ldi	r24, 0x31	; 49
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	be 01       	movw	r22, r28
    100e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
    1012:	28 2f       	mov	r18, r24
    1014:	39 2f       	mov	r19, r25
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	89 f4       	brne	.+34     	; 0x103e <protocolCom+0x484>
				if ((getIn() % 2) == 1){
    101c:	0e 94 c8 08 	call	0x1190	; 0x1190 <getIn>
    1020:	62 e0       	ldi	r22, 0x02	; 2
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	11 f4       	brne	.+4      	; 0x1032 <protocolCom+0x478>
					uitrollen();					
    102e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
    1032:	86 e3       	ldi	r24, 0x36	; 54
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
				abort();
    103a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
    103e:	8f e3       	ldi	r24, 0x3F	; 63
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	be 01       	movw	r22, r28
    1044:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <strcmp>
    1048:	28 2f       	mov	r18, r24
    104a:	39 2f       	mov	r19, r25
    104c:	21 15       	cp	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	29 f4       	brne	.+10     	; 0x105c <protocolCom+0x4a2>
				ser_writeln(
    1052:	84 e4       	ldi	r24, 0x44	; 68
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
    105a:	22 ce       	rjmp	.-956    	; 0xca0 <protocolCom+0xe6>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
    105c:	89 e8       	ldi	r24, 0x89	; 137
    105e:	95 e0       	ldi	r25, 0x05	; 5
    1060:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
    1064:	1d ce       	rjmp	.-966    	; 0xca0 <protocolCom+0xe6>
			}		
			}
			}
			}	
			}					
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	3f 90       	pop	r3
    1088:	2f 90       	pop	r2
    108a:	08 95       	ret

0000108c <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
    108c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
    1090:	83 e3       	ldi	r24, 0x33	; 51
    1092:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
    1096:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    109a:	88 e1       	ldi	r24, 0x18	; 24
    109c:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    10a0:	86 e0       	ldi	r24, 0x06	; 6
    10a2:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
    10a6:	89 ee       	ldi	r24, 0xE9	; 233
    10a8:	95 e0       	ldi	r25, 0x05	; 5
    10aa:	90 93 91 07 	sts	0x0791, r25
    10ae:	80 93 90 07 	sts	0x0790, r24
}
    10b2:	08 95       	ret

000010b4 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    10b4:	e0 ec       	ldi	r30, 0xC0	; 192
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	90 81       	ld	r25, Z
    10ba:	95 ff       	sbrs	r25, 5
    10bc:	fd cf       	rjmp	.-6      	; 0x10b8 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
    10be:	80 93 c6 00 	sts	0x00C6, r24
}
    10c2:	08 95       	ret

000010c4 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
    10c4:	cf 93       	push	r28
    10c6:	c8 2f       	mov	r28, r24
	if (c=='\n') {
    10c8:	8a 30       	cpi	r24, 0x0A	; 10
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
    10cc:	8d e0       	ldi	r24, 0x0D	; 13
    10ce:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>
	}
	ser_transmit(c);
    10d2:	8c 2f       	mov	r24, r28
    10d4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>
}
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    10dc:	e0 ec       	ldi	r30, 0xC0	; 192
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 23       	and	r24, r24
    10e4:	ec f7       	brge	.-6      	; 0x10e0 <ser_receive+0x4>
	return UDR0;
    10e6:	80 91 c6 00 	lds	r24, 0x00C6
}
    10ea:	08 95       	ret

000010ec <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    10f2:	88 81       	ld	r24, Y
    10f4:	88 23       	and	r24, r24
    10f6:	31 f0       	breq	.+12     	; 0x1104 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    10f8:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    10fa:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    10fe:	89 91       	ld	r24, Y+
    1100:	88 23       	and	r24, r24
    1102:	d9 f7       	brne	.-10     	; 0x10fa <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    110a:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
	ser_transmit('\r');
    110e:	8d e0       	ldi	r24, 0x0D	; 13
    1110:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>
	ser_transmit('\n');
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>
}
    111a:	08 95       	ret

0000111c <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	5c 01       	movw	r10, r24
    1132:	d4 2f       	mov	r29, r20
	int i=0;
    1134:	6c 01       	movw	r12, r24
    1136:	ee 24       	eor	r14, r14
    1138:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    113a:	8b 01       	movw	r16, r22
    113c:	01 50       	subi	r16, 0x01	; 1
    113e:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1140:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_receive>
    1144:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    1146:	dd 23       	and	r29, r29
    1148:	11 f0       	breq	.+4      	; 0x114e <ser_readln+0x32>
    114a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>
		if (c=='\r') {
    114e:	cd 30       	cpi	r28, 0x0D	; 13
    1150:	31 f4       	brne	.+12     	; 0x115e <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1152:	dd 23       	and	r29, r29
    1154:	71 f0       	breq	.+28     	; 0x1172 <ser_readln+0x56>
    1156:	8a e0       	ldi	r24, 0x0A	; 10
    1158:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_transmit>
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    115e:	e0 16       	cp	r14, r16
    1160:	f1 06       	cpc	r15, r17
    1162:	74 f7       	brge	.-36     	; 0x1140 <ser_readln+0x24>
			buf[i++]=c;
    1164:	f6 01       	movw	r30, r12
    1166:	c1 93       	st	Z+, r28
    1168:	6f 01       	movw	r12, r30
    116a:	08 94       	sec
    116c:	e1 1c       	adc	r14, r1
    116e:	f1 1c       	adc	r15, r1
    1170:	e7 cf       	rjmp	.-50     	; 0x1140 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    1172:	ea 0c       	add	r14, r10
    1174:	fb 1c       	adc	r15, r11
    1176:	f7 01       	movw	r30, r14
    1178:	10 82       	st	Z, r1
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	08 95       	ret

00001190 <getIn>:



int getIn(){
	return IN;
}
    1190:	80 91 72 06 	lds	r24, 0x0672
    1194:	90 91 73 06 	lds	r25, 0x0673
    1198:	08 95       	ret

0000119a <init_scherm_ports>:


init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    119a:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    119c:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    119e:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    11a0:	e9 e6       	ldi	r30, 0x69	; 105
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    11ae:	2d 9a       	sbi	0x05, 5	; 5
}
    11b0:	08 95       	ret

000011b2 <uitrollen>:

void uitrollen(){
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
	IN = (IN + 1);
    11be:	80 91 72 06 	lds	r24, 0x0672
    11c2:	90 91 73 06 	lds	r25, 0x0673
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	90 93 73 06 	sts	0x0673, r25
    11cc:	80 93 72 06 	sts	0x0672, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    11d0:	87 ef       	ldi	r24, 0xF7	; 247
    11d2:	95 e0       	ldi	r25, 0x05	; 5
    11d4:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    11d8:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    11da:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    11dc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <strtod>
    11e8:	6b 01       	movw	r12, r22
    11ea:	7c 01       	movw	r14, r24
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
    11ec:	cc ef       	ldi	r28, 0xFC	; 252
    11ee:	d5 e0       	ldi	r29, 0x05	; 5
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    11f0:	22 c0       	rjmp	.+68     	; 0x1236 <uitrollen+0x84>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    11f2:	2c 9a       	sbi	0x05, 4	; 5
    11f4:	8f e3       	ldi	r24, 0x3F	; 63
    11f6:	9d e0       	ldi	r25, 0x0D	; 13
    11f8:	a3 e0       	ldi	r26, 0x03	; 3
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	90 40       	sbci	r25, 0x00	; 0
    11fe:	a0 40       	sbci	r26, 0x00	; 0
    1200:	e1 f7       	brne	.-8      	; 0x11fa <uitrollen+0x48>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <uitrollen+0x52>
    1204:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1206:	2c 98       	cbi	0x05, 4	; 5
    1208:	8f e3       	ldi	r24, 0x3F	; 63
    120a:	9d e0       	ldi	r25, 0x0D	; 13
    120c:	a3 e0       	ldi	r26, 0x03	; 3
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	90 40       	sbci	r25, 0x00	; 0
    1212:	a0 40       	sbci	r26, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <uitrollen+0x5c>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <uitrollen+0x66>
    1218:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
    121a:	80 91 8c 07 	lds	r24, 0x078C
    121e:	90 91 8d 07 	lds	r25, 0x078D
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	90 93 8d 07 	sts	0x078D, r25
    1228:	80 93 8c 07 	sts	0x078C, r24
		if (j % 2 == 0){ser_write(".");}
    122c:	80 fd       	sbrc	r24, 0
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <uitrollen+0x84>
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1236:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    123a:	a7 01       	movw	r20, r14
    123c:	96 01       	movw	r18, r12
    123e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__cmpsf2>
    1242:	88 23       	and	r24, r24
    1244:	b4 f2       	brlt	.-84     	; 0x11f2 <uitrollen+0x40>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    1246:	10 92 8d 07 	sts	0x078D, r1
    124a:	10 92 8c 07 	sts	0x078C, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    124e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	00 d0       	rcall	.+0      	; 0x1258 <uitrollen+0xa6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <uitrollen+0xa8>
    125a:	00 d0       	rcall	.+0      	; 0x125c <uitrollen+0xaa>
    125c:	2e ef       	ldi	r18, 0xFE	; 254
    125e:	35 e0       	ldi	r19, 0x05	; 5
    1260:	ed b7       	in	r30, 0x3d	; 61
    1262:	fe b7       	in	r31, 0x3e	; 62
    1264:	32 83       	std	Z+2, r19	; 0x02
    1266:	21 83       	std	Z+1, r18	; 0x01
    1268:	83 83       	std	Z+3, r24	; 0x03
    126a:	94 83       	std	Z+4, r25	; 0x04
    126c:	a5 83       	std	Z+5, r26	; 0x05
    126e:	b6 83       	std	Z+6, r27	; 0x06
    1270:	0e 94 46 12 	call	0x248c	; 0x248c <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    1274:	8d b7       	in	r24, 0x3d	; 61
    1276:	9e b7       	in	r25, 0x3e	; 62
    1278:	06 96       	adiw	r24, 0x06	; 6
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	9e bf       	out	0x3e, r25	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	8d bf       	out	0x3d, r24	; 61
    1284:	8e e1       	ldi	r24, 0x1E	; 30
    1286:	96 e0       	ldi	r25, 0x06	; 6
    1288:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
    128c:	8f e3       	ldi	r24, 0x3F	; 63
    128e:	9d e0       	ldi	r25, 0x0D	; 13
    1290:	a3 e0       	ldi	r26, 0x03	; 3
    1292:	81 50       	subi	r24, 0x01	; 1
    1294:	90 40       	sbci	r25, 0x00	; 0
    1296:	a0 40       	sbci	r26, 0x00	; 0
    1298:	e1 f7       	brne	.-8      	; 0x1292 <uitrollen+0xe0>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <uitrollen+0xea>
    129c:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

000012ac <oprollen>:
	
	


void oprollen(){
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
	IN = (IN + 1);
    12bc:	80 91 72 06 	lds	r24, 0x0672
    12c0:	90 91 73 06 	lds	r25, 0x0673
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	90 93 73 06 	sts	0x0673, r25
    12ca:	80 93 72 06 	sts	0x0672, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    12ce:	87 ef       	ldi	r24, 0xF7	; 247
    12d0:	95 e0       	ldi	r25, 0x05	; 5
    12d2:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    12d6:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    12d8:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    12da:	0e 94 7d 05 	call	0xafa	; 0xafa <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <strtod>
    12e6:	6b 01       	movw	r12, r22
    12e8:	7c 01       	movw	r14, r24
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		printf("% 6.2f", x);
    12ea:	cc e3       	ldi	r28, 0x3C	; 60
    12ec:	d6 e0       	ldi	r29, 0x06	; 6
		printf("% 6.2f", getDistance());

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    12ee:	0c ef       	ldi	r16, 0xFC	; 252
    12f0:	15 e0       	ldi	r17, 0x05	; 5

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	
	while (getDistance()> x){
    12f2:	56 c0       	rjmp	.+172    	; 0x13a0 <oprollen+0xf4>

		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    12f4:	2c 9a       	sbi	0x05, 4	; 5
    12f6:	8f e3       	ldi	r24, 0x3F	; 63
    12f8:	9d e0       	ldi	r25, 0x0D	; 13
    12fa:	a3 e0       	ldi	r26, 0x03	; 3
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	a0 40       	sbci	r26, 0x00	; 0
    1302:	e1 f7       	brne	.-8      	; 0x12fc <oprollen+0x50>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <oprollen+0x5a>
    1306:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1308:	2c 98       	cbi	0x05, 4	; 5
    130a:	8f e3       	ldi	r24, 0x3F	; 63
    130c:	9d e0       	ldi	r25, 0x0D	; 13
    130e:	a3 e0       	ldi	r26, 0x03	; 3
    1310:	81 50       	subi	r24, 0x01	; 1
    1312:	90 40       	sbci	r25, 0x00	; 0
    1314:	a0 40       	sbci	r26, 0x00	; 0
    1316:	e1 f7       	brne	.-8      	; 0x1310 <oprollen+0x64>
    1318:	00 c0       	rjmp	.+0      	; 0x131a <oprollen+0x6e>
    131a:	00 00       	nop
		_delay_ms(DELAY_MS);
		printf("% 6.2f", x);
    131c:	00 d0       	rcall	.+0      	; 0x131e <oprollen+0x72>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <oprollen+0x74>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <oprollen+0x76>
    1322:	ad b7       	in	r26, 0x3d	; 61
    1324:	be b7       	in	r27, 0x3e	; 62
    1326:	12 96       	adiw	r26, 0x02	; 2
    1328:	dc 93       	st	X, r29
    132a:	ce 93       	st	-X, r28
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	ed b7       	in	r30, 0x3d	; 61
    1330:	fe b7       	in	r31, 0x3e	; 62
    1332:	c3 82       	std	Z+3, r12	; 0x03
    1334:	d4 82       	std	Z+4, r13	; 0x04
    1336:	e5 82       	std	Z+5, r14	; 0x05
    1338:	f6 82       	std	Z+6, r15	; 0x06
    133a:	0e 94 46 12 	call	0x248c	; 0x248c <printf>
		printf("% 6.2f", getDistance());
    133e:	2d b7       	in	r18, 0x3d	; 61
    1340:	3e b7       	in	r19, 0x3e	; 62
    1342:	2a 5f       	subi	r18, 0xFA	; 250
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	3e bf       	out	0x3e, r19	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	2d bf       	out	0x3d, r18	; 61
    1350:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	00 d0       	rcall	.+0      	; 0x135a <oprollen+0xae>
    135a:	00 d0       	rcall	.+0      	; 0x135c <oprollen+0xb0>
    135c:	00 d0       	rcall	.+0      	; 0x135e <oprollen+0xb2>
    135e:	ed b7       	in	r30, 0x3d	; 61
    1360:	fe b7       	in	r31, 0x3e	; 62
    1362:	d2 83       	std	Z+2, r29	; 0x02
    1364:	c1 83       	std	Z+1, r28	; 0x01
    1366:	83 83       	std	Z+3, r24	; 0x03
    1368:	94 83       	std	Z+4, r25	; 0x04
    136a:	a5 83       	std	Z+5, r26	; 0x05
    136c:	b6 83       	std	Z+6, r27	; 0x06
    136e:	0e 94 46 12 	call	0x248c	; 0x248c <printf>

		j += 1;
    1372:	80 91 8c 07 	lds	r24, 0x078C
    1376:	90 91 8d 07 	lds	r25, 0x078D
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	90 93 8d 07 	sts	0x078D, r25
    1380:	80 93 8c 07 	sts	0x078C, r24
		if (j % 2 == 0){ser_write(".");}
    1384:	2d b7       	in	r18, 0x3d	; 61
    1386:	3e b7       	in	r19, 0x3e	; 62
    1388:	2a 5f       	subi	r18, 0xFA	; 250
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	3e bf       	out	0x3e, r19	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	2d bf       	out	0x3d, r18	; 61
    1396:	80 fd       	sbrc	r24, 0
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <oprollen+0xf4>
    139a:	c8 01       	movw	r24, r16
    139c:	0e 94 76 08 	call	0x10ec	; 0x10ec <ser_write>

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	
	while (getDistance()> x){
    13a0:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13a4:	a7 01       	movw	r20, r14
    13a6:	96 01       	movw	r18, r12
    13a8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	0c f4       	brge	.+2      	; 0x13b2 <oprollen+0x106>
    13b0:	a1 cf       	rjmp	.-190    	; 0x12f4 <oprollen+0x48>
		printf("% 6.2f", getDistance());

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}			
	j = 0;
    13b2:	10 92 8d 07 	sts	0x078D, r1
    13b6:	10 92 8c 07 	sts	0x078C, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    13ba:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <oprollen+0x118>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <oprollen+0x11a>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <oprollen+0x11c>
    13c8:	2e ef       	ldi	r18, 0xFE	; 254
    13ca:	35 e0       	ldi	r19, 0x05	; 5
    13cc:	ed b7       	in	r30, 0x3d	; 61
    13ce:	fe b7       	in	r31, 0x3e	; 62
    13d0:	32 83       	std	Z+2, r19	; 0x02
    13d2:	21 83       	std	Z+1, r18	; 0x01
    13d4:	83 83       	std	Z+3, r24	; 0x03
    13d6:	94 83       	std	Z+4, r25	; 0x04
    13d8:	a5 83       	std	Z+5, r26	; 0x05
    13da:	b6 83       	std	Z+6, r27	; 0x06
    13dc:	0e 94 46 12 	call	0x248c	; 0x248c <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    13e0:	2d b7       	in	r18, 0x3d	; 61
    13e2:	3e b7       	in	r19, 0x3e	; 62
    13e4:	2a 5f       	subi	r18, 0xFA	; 250
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	3e bf       	out	0x3e, r19	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	2d bf       	out	0x3d, r18	; 61
    13f2:	83 e4       	ldi	r24, 0x43	; 67
    13f4:	96 e0       	ldi	r25, 0x06	; 6
    13f6:	0e 94 85 08 	call	0x110a	; 0x110a <ser_writeln>
    13fa:	8f e3       	ldi	r24, 0x3F	; 63
    13fc:	9d e0       	ldi	r25, 0x0D	; 13
    13fe:	a3 e0       	ldi	r26, 0x03	; 3
    1400:	81 50       	subi	r24, 0x01	; 1
    1402:	90 40       	sbci	r25, 0x00	; 0
    1404:	a0 40       	sbci	r26, 0x00	; 0
    1406:	e1 f7       	brne	.-8      	; 0x1400 <oprollen+0x154>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <oprollen+0x15e>
    140a:	00 00       	nop
	_delay_ms(DELAY_MS);
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	df 90       	pop	r13
    141a:	cf 90       	pop	r12
    141c:	08 95       	ret

0000141e <__subsf3>:
    141e:	50 58       	subi	r21, 0x80	; 128

00001420 <__addsf3>:
    1420:	bb 27       	eor	r27, r27
    1422:	aa 27       	eor	r26, r26
    1424:	0e d0       	rcall	.+28     	; 0x1442 <__addsf3x>
    1426:	dc c0       	rjmp	.+440    	; 0x15e0 <__fp_round>
    1428:	cd d0       	rcall	.+410    	; 0x15c4 <__fp_pscA>
    142a:	30 f0       	brcs	.+12     	; 0x1438 <__addsf3+0x18>
    142c:	d2 d0       	rcall	.+420    	; 0x15d2 <__fp_pscB>
    142e:	20 f0       	brcs	.+8      	; 0x1438 <__addsf3+0x18>
    1430:	31 f4       	brne	.+12     	; 0x143e <__addsf3+0x1e>
    1432:	9f 3f       	cpi	r25, 0xFF	; 255
    1434:	11 f4       	brne	.+4      	; 0x143a <__addsf3+0x1a>
    1436:	1e f4       	brtc	.+6      	; 0x143e <__addsf3+0x1e>
    1438:	c2 c0       	rjmp	.+388    	; 0x15be <__fp_nan>
    143a:	0e f4       	brtc	.+2      	; 0x143e <__addsf3+0x1e>
    143c:	e0 95       	com	r30
    143e:	e7 fb       	bst	r30, 7
    1440:	b8 c0       	rjmp	.+368    	; 0x15b2 <__fp_inf>

00001442 <__addsf3x>:
    1442:	e9 2f       	mov	r30, r25
    1444:	de d0       	rcall	.+444    	; 0x1602 <__fp_split3>
    1446:	80 f3       	brcs	.-32     	; 0x1428 <__addsf3+0x8>
    1448:	ba 17       	cp	r27, r26
    144a:	62 07       	cpc	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	84 07       	cpc	r24, r20
    1450:	95 07       	cpc	r25, r21
    1452:	18 f0       	brcs	.+6      	; 0x145a <__addsf3x+0x18>
    1454:	71 f4       	brne	.+28     	; 0x1472 <__addsf3x+0x30>
    1456:	9e f5       	brtc	.+102    	; 0x14be <__addsf3x+0x7c>
    1458:	f6 c0       	rjmp	.+492    	; 0x1646 <__fp_zero>
    145a:	0e f4       	brtc	.+2      	; 0x145e <__addsf3x+0x1c>
    145c:	e0 95       	com	r30
    145e:	0b 2e       	mov	r0, r27
    1460:	ba 2f       	mov	r27, r26
    1462:	a0 2d       	mov	r26, r0
    1464:	0b 01       	movw	r0, r22
    1466:	b9 01       	movw	r22, r18
    1468:	90 01       	movw	r18, r0
    146a:	0c 01       	movw	r0, r24
    146c:	ca 01       	movw	r24, r20
    146e:	a0 01       	movw	r20, r0
    1470:	11 24       	eor	r1, r1
    1472:	ff 27       	eor	r31, r31
    1474:	59 1b       	sub	r21, r25
    1476:	99 f0       	breq	.+38     	; 0x149e <__addsf3x+0x5c>
    1478:	59 3f       	cpi	r21, 0xF9	; 249
    147a:	50 f4       	brcc	.+20     	; 0x1490 <__addsf3x+0x4e>
    147c:	50 3e       	cpi	r21, 0xE0	; 224
    147e:	68 f1       	brcs	.+90     	; 0x14da <__addsf3x+0x98>
    1480:	1a 16       	cp	r1, r26
    1482:	f0 40       	sbci	r31, 0x00	; 0
    1484:	a2 2f       	mov	r26, r18
    1486:	23 2f       	mov	r18, r19
    1488:	34 2f       	mov	r19, r20
    148a:	44 27       	eor	r20, r20
    148c:	58 5f       	subi	r21, 0xF8	; 248
    148e:	f3 cf       	rjmp	.-26     	; 0x1476 <__addsf3x+0x34>
    1490:	46 95       	lsr	r20
    1492:	37 95       	ror	r19
    1494:	27 95       	ror	r18
    1496:	a7 95       	ror	r26
    1498:	f0 40       	sbci	r31, 0x00	; 0
    149a:	53 95       	inc	r21
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__addsf3x+0x4e>
    149e:	7e f4       	brtc	.+30     	; 0x14be <__addsf3x+0x7c>
    14a0:	1f 16       	cp	r1, r31
    14a2:	ba 0b       	sbc	r27, r26
    14a4:	62 0b       	sbc	r22, r18
    14a6:	73 0b       	sbc	r23, r19
    14a8:	84 0b       	sbc	r24, r20
    14aa:	ba f0       	brmi	.+46     	; 0x14da <__addsf3x+0x98>
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	a1 f0       	breq	.+40     	; 0x14d8 <__addsf3x+0x96>
    14b0:	ff 0f       	add	r31, r31
    14b2:	bb 1f       	adc	r27, r27
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	c2 f7       	brpl	.-16     	; 0x14ac <__addsf3x+0x6a>
    14bc:	0e c0       	rjmp	.+28     	; 0x14da <__addsf3x+0x98>
    14be:	ba 0f       	add	r27, r26
    14c0:	62 1f       	adc	r22, r18
    14c2:	73 1f       	adc	r23, r19
    14c4:	84 1f       	adc	r24, r20
    14c6:	48 f4       	brcc	.+18     	; 0x14da <__addsf3x+0x98>
    14c8:	87 95       	ror	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	9e 3f       	cpi	r25, 0xFE	; 254
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <__addsf3x+0x96>
    14d6:	b3 cf       	rjmp	.-154    	; 0x143e <__addsf3+0x1e>
    14d8:	93 95       	inc	r25
    14da:	88 0f       	add	r24, r24
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <__addsf3x+0x9e>
    14de:	99 27       	eor	r25, r25
    14e0:	ee 0f       	add	r30, r30
    14e2:	97 95       	ror	r25
    14e4:	87 95       	ror	r24
    14e6:	08 95       	ret

000014e8 <__cmpsf2>:
    14e8:	40 d0       	rcall	.+128    	; 0x156a <__fp_cmp>
    14ea:	08 f4       	brcc	.+2      	; 0x14ee <__cmpsf2+0x6>
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	08 95       	ret

000014f0 <__floatunsisf>:
    14f0:	e8 94       	clt
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <__floatsisf+0x12>

000014f4 <__floatsisf>:
    14f4:	97 fb       	bst	r25, 7
    14f6:	3e f4       	brtc	.+14     	; 0x1506 <__floatsisf+0x12>
    14f8:	90 95       	com	r25
    14fa:	80 95       	com	r24
    14fc:	70 95       	com	r23
    14fe:	61 95       	neg	r22
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	99 23       	and	r25, r25
    1508:	a9 f0       	breq	.+42     	; 0x1534 <__floatsisf+0x40>
    150a:	f9 2f       	mov	r31, r25
    150c:	96 e9       	ldi	r25, 0x96	; 150
    150e:	bb 27       	eor	r27, r27
    1510:	93 95       	inc	r25
    1512:	f6 95       	lsr	r31
    1514:	87 95       	ror	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f1 11       	cpse	r31, r1
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <__floatsisf+0x1c>
    1520:	fa f4       	brpl	.+62     	; 0x1560 <__floatsisf+0x6c>
    1522:	bb 0f       	add	r27, r27
    1524:	11 f4       	brne	.+4      	; 0x152a <__floatsisf+0x36>
    1526:	60 ff       	sbrs	r22, 0
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <__floatsisf+0x6c>
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <__floatsisf+0x6c>
    1534:	88 23       	and	r24, r24
    1536:	11 f0       	breq	.+4      	; 0x153c <__floatsisf+0x48>
    1538:	96 e9       	ldi	r25, 0x96	; 150
    153a:	11 c0       	rjmp	.+34     	; 0x155e <__floatsisf+0x6a>
    153c:	77 23       	and	r23, r23
    153e:	21 f0       	breq	.+8      	; 0x1548 <__floatsisf+0x54>
    1540:	9e e8       	ldi	r25, 0x8E	; 142
    1542:	87 2f       	mov	r24, r23
    1544:	76 2f       	mov	r23, r22
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <__floatsisf+0x5e>
    1548:	66 23       	and	r22, r22
    154a:	71 f0       	breq	.+28     	; 0x1568 <__floatsisf+0x74>
    154c:	96 e8       	ldi	r25, 0x86	; 134
    154e:	86 2f       	mov	r24, r22
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	2a f0       	brmi	.+10     	; 0x1560 <__floatsisf+0x6c>
    1556:	9a 95       	dec	r25
    1558:	66 0f       	add	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	da f7       	brpl	.-10     	; 0x1556 <__floatsisf+0x62>
    1560:	88 0f       	add	r24, r24
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	97 f9       	bld	r25, 7
    1568:	08 95       	ret

0000156a <__fp_cmp>:
    156a:	99 0f       	add	r25, r25
    156c:	00 08       	sbc	r0, r0
    156e:	55 0f       	add	r21, r21
    1570:	aa 0b       	sbc	r26, r26
    1572:	e0 e8       	ldi	r30, 0x80	; 128
    1574:	fe ef       	ldi	r31, 0xFE	; 254
    1576:	16 16       	cp	r1, r22
    1578:	17 06       	cpc	r1, r23
    157a:	e8 07       	cpc	r30, r24
    157c:	f9 07       	cpc	r31, r25
    157e:	c0 f0       	brcs	.+48     	; 0x15b0 <__fp_cmp+0x46>
    1580:	12 16       	cp	r1, r18
    1582:	13 06       	cpc	r1, r19
    1584:	e4 07       	cpc	r30, r20
    1586:	f5 07       	cpc	r31, r21
    1588:	98 f0       	brcs	.+38     	; 0x15b0 <__fp_cmp+0x46>
    158a:	62 1b       	sub	r22, r18
    158c:	73 0b       	sbc	r23, r19
    158e:	84 0b       	sbc	r24, r20
    1590:	95 0b       	sbc	r25, r21
    1592:	39 f4       	brne	.+14     	; 0x15a2 <__fp_cmp+0x38>
    1594:	0a 26       	eor	r0, r26
    1596:	61 f0       	breq	.+24     	; 0x15b0 <__fp_cmp+0x46>
    1598:	23 2b       	or	r18, r19
    159a:	24 2b       	or	r18, r20
    159c:	25 2b       	or	r18, r21
    159e:	21 f4       	brne	.+8      	; 0x15a8 <__fp_cmp+0x3e>
    15a0:	08 95       	ret
    15a2:	0a 26       	eor	r0, r26
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <__fp_cmp+0x3e>
    15a6:	a1 40       	sbci	r26, 0x01	; 1
    15a8:	a6 95       	lsr	r26
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	81 1d       	adc	r24, r1
    15ae:	81 1d       	adc	r24, r1
    15b0:	08 95       	ret

000015b2 <__fp_inf>:
    15b2:	97 f9       	bld	r25, 7
    15b4:	9f 67       	ori	r25, 0x7F	; 127
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	08 95       	ret

000015be <__fp_nan>:
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	80 ec       	ldi	r24, 0xC0	; 192
    15c2:	08 95       	ret

000015c4 <__fp_pscA>:
    15c4:	00 24       	eor	r0, r0
    15c6:	0a 94       	dec	r0
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	09 06       	cpc	r0, r25
    15d0:	08 95       	ret

000015d2 <__fp_pscB>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	12 16       	cp	r1, r18
    15d8:	13 06       	cpc	r1, r19
    15da:	14 06       	cpc	r1, r20
    15dc:	05 06       	cpc	r0, r21
    15de:	08 95       	ret

000015e0 <__fp_round>:
    15e0:	09 2e       	mov	r0, r25
    15e2:	03 94       	inc	r0
    15e4:	00 0c       	add	r0, r0
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__fp_round+0xc>
    15e8:	88 23       	and	r24, r24
    15ea:	52 f0       	brmi	.+20     	; 0x1600 <__fp_round+0x20>
    15ec:	bb 0f       	add	r27, r27
    15ee:	40 f4       	brcc	.+16     	; 0x1600 <__fp_round+0x20>
    15f0:	bf 2b       	or	r27, r31
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0x18>
    15f4:	60 ff       	sbrs	r22, 0
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__fp_round+0x20>
    15f8:	6f 5f       	subi	r22, 0xFF	; 255
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	8f 4f       	sbci	r24, 0xFF	; 255
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	08 95       	ret

00001602 <__fp_split3>:
    1602:	57 fd       	sbrc	r21, 7
    1604:	90 58       	subi	r25, 0x80	; 128
    1606:	44 0f       	add	r20, r20
    1608:	55 1f       	adc	r21, r21
    160a:	59 f0       	breq	.+22     	; 0x1622 <__fp_splitA+0x10>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	71 f0       	breq	.+28     	; 0x162c <__fp_splitA+0x1a>
    1610:	47 95       	ror	r20

00001612 <__fp_splitA>:
    1612:	88 0f       	add	r24, r24
    1614:	97 fb       	bst	r25, 7
    1616:	99 1f       	adc	r25, r25
    1618:	61 f0       	breq	.+24     	; 0x1632 <__fp_splitA+0x20>
    161a:	9f 3f       	cpi	r25, 0xFF	; 255
    161c:	79 f0       	breq	.+30     	; 0x163c <__fp_splitA+0x2a>
    161e:	87 95       	ror	r24
    1620:	08 95       	ret
    1622:	12 16       	cp	r1, r18
    1624:	13 06       	cpc	r1, r19
    1626:	14 06       	cpc	r1, r20
    1628:	55 1f       	adc	r21, r21
    162a:	f2 cf       	rjmp	.-28     	; 0x1610 <__fp_split3+0xe>
    162c:	46 95       	lsr	r20
    162e:	f1 df       	rcall	.-30     	; 0x1612 <__fp_splitA>
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <__fp_splitA+0x30>
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	18 06       	cpc	r1, r24
    1638:	99 1f       	adc	r25, r25
    163a:	f1 cf       	rjmp	.-30     	; 0x161e <__fp_splitA+0xc>
    163c:	86 95       	lsr	r24
    163e:	71 05       	cpc	r23, r1
    1640:	61 05       	cpc	r22, r1
    1642:	08 94       	sec
    1644:	08 95       	ret

00001646 <__fp_zero>:
    1646:	e8 94       	clt

00001648 <__fp_szero>:
    1648:	bb 27       	eor	r27, r27
    164a:	66 27       	eor	r22, r22
    164c:	77 27       	eor	r23, r23
    164e:	cb 01       	movw	r24, r22
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__gesf2>:
    1654:	8a df       	rcall	.-236    	; 0x156a <__fp_cmp>
    1656:	08 f4       	brcc	.+2      	; 0x165a <__gesf2+0x6>
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	08 95       	ret

0000165c <__mulsf3>:
    165c:	0b d0       	rcall	.+22     	; 0x1674 <__mulsf3x>
    165e:	c0 cf       	rjmp	.-128    	; 0x15e0 <__fp_round>
    1660:	b1 df       	rcall	.-158    	; 0x15c4 <__fp_pscA>
    1662:	28 f0       	brcs	.+10     	; 0x166e <__mulsf3+0x12>
    1664:	b6 df       	rcall	.-148    	; 0x15d2 <__fp_pscB>
    1666:	18 f0       	brcs	.+6      	; 0x166e <__mulsf3+0x12>
    1668:	95 23       	and	r25, r21
    166a:	09 f0       	breq	.+2      	; 0x166e <__mulsf3+0x12>
    166c:	a2 cf       	rjmp	.-188    	; 0x15b2 <__fp_inf>
    166e:	a7 cf       	rjmp	.-178    	; 0x15be <__fp_nan>
    1670:	11 24       	eor	r1, r1
    1672:	ea cf       	rjmp	.-44     	; 0x1648 <__fp_szero>

00001674 <__mulsf3x>:
    1674:	c6 df       	rcall	.-116    	; 0x1602 <__fp_split3>
    1676:	a0 f3       	brcs	.-24     	; 0x1660 <__mulsf3+0x4>

00001678 <__mulsf3_pse>:
    1678:	95 9f       	mul	r25, r21
    167a:	d1 f3       	breq	.-12     	; 0x1670 <__mulsf3+0x14>
    167c:	95 0f       	add	r25, r21
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	55 1f       	adc	r21, r21
    1682:	62 9f       	mul	r22, r18
    1684:	f0 01       	movw	r30, r0
    1686:	72 9f       	mul	r23, r18
    1688:	bb 27       	eor	r27, r27
    168a:	f0 0d       	add	r31, r0
    168c:	b1 1d       	adc	r27, r1
    168e:	63 9f       	mul	r22, r19
    1690:	aa 27       	eor	r26, r26
    1692:	f0 0d       	add	r31, r0
    1694:	b1 1d       	adc	r27, r1
    1696:	aa 1f       	adc	r26, r26
    1698:	64 9f       	mul	r22, r20
    169a:	66 27       	eor	r22, r22
    169c:	b0 0d       	add	r27, r0
    169e:	a1 1d       	adc	r26, r1
    16a0:	66 1f       	adc	r22, r22
    16a2:	82 9f       	mul	r24, r18
    16a4:	22 27       	eor	r18, r18
    16a6:	b0 0d       	add	r27, r0
    16a8:	a1 1d       	adc	r26, r1
    16aa:	62 1f       	adc	r22, r18
    16ac:	73 9f       	mul	r23, r19
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	62 1f       	adc	r22, r18
    16b4:	83 9f       	mul	r24, r19
    16b6:	a0 0d       	add	r26, r0
    16b8:	61 1d       	adc	r22, r1
    16ba:	22 1f       	adc	r18, r18
    16bc:	74 9f       	mul	r23, r20
    16be:	33 27       	eor	r19, r19
    16c0:	a0 0d       	add	r26, r0
    16c2:	61 1d       	adc	r22, r1
    16c4:	23 1f       	adc	r18, r19
    16c6:	84 9f       	mul	r24, r20
    16c8:	60 0d       	add	r22, r0
    16ca:	21 1d       	adc	r18, r1
    16cc:	82 2f       	mov	r24, r18
    16ce:	76 2f       	mov	r23, r22
    16d0:	6a 2f       	mov	r22, r26
    16d2:	11 24       	eor	r1, r1
    16d4:	9f 57       	subi	r25, 0x7F	; 127
    16d6:	50 40       	sbci	r21, 0x00	; 0
    16d8:	8a f0       	brmi	.+34     	; 0x16fc <__mulsf3_pse+0x84>
    16da:	e1 f0       	breq	.+56     	; 0x1714 <__mulsf3_pse+0x9c>
    16dc:	88 23       	and	r24, r24
    16de:	4a f0       	brmi	.+18     	; 0x16f2 <__mulsf3_pse+0x7a>
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	bb 1f       	adc	r27, r27
    16e6:	66 1f       	adc	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	91 50       	subi	r25, 0x01	; 1
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__mulsf3_pse+0x64>
    16f2:	9e 3f       	cpi	r25, 0xFE	; 254
    16f4:	51 05       	cpc	r21, r1
    16f6:	70 f0       	brcs	.+28     	; 0x1714 <__mulsf3_pse+0x9c>
    16f8:	5c cf       	rjmp	.-328    	; 0x15b2 <__fp_inf>
    16fa:	a6 cf       	rjmp	.-180    	; 0x1648 <__fp_szero>
    16fc:	5f 3f       	cpi	r21, 0xFF	; 255
    16fe:	ec f3       	brlt	.-6      	; 0x16fa <__mulsf3_pse+0x82>
    1700:	98 3e       	cpi	r25, 0xE8	; 232
    1702:	dc f3       	brlt	.-10     	; 0x16fa <__mulsf3_pse+0x82>
    1704:	86 95       	lsr	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b7 95       	ror	r27
    170c:	f7 95       	ror	r31
    170e:	e7 95       	ror	r30
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	c1 f7       	brne	.-16     	; 0x1704 <__mulsf3_pse+0x8c>
    1714:	fe 2b       	or	r31, r30
    1716:	88 0f       	add	r24, r24
    1718:	91 1d       	adc	r25, r1
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	97 f9       	bld	r25, 7
    1720:	08 95       	ret

00001722 <vfprintf>:
    1722:	a5 e1       	ldi	r26, 0x15	; 21
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e7 e9       	ldi	r30, 0x97	; 151
    1728:	fb e0       	ldi	r31, 0x0B	; 11
    172a:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__prologue_saves__>
    172e:	4c 01       	movw	r8, r24
    1730:	7f 87       	std	Y+15, r23	; 0x0f
    1732:	6e 87       	std	Y+14, r22	; 0x0e
    1734:	fc 01       	movw	r30, r24
    1736:	17 82       	std	Z+7, r1	; 0x07
    1738:	16 82       	std	Z+6, r1	; 0x06
    173a:	83 81       	ldd	r24, Z+3	; 0x03
    173c:	81 fd       	sbrc	r24, 1
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <vfprintf+0x26>
    1740:	76 c3       	rjmp	.+1772   	; 0x1e2e <vfprintf+0x70c>
    1742:	4c 85       	ldd	r20, Y+12	; 0x0c
    1744:	5d 85       	ldd	r21, Y+13	; 0x0d
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <vfprintf+0x2e>
    1748:	1e 01       	movw	r2, r28
    174a:	08 94       	sec
    174c:	21 1c       	adc	r2, r1
    174e:	31 1c       	adc	r3, r1
    1750:	f4 01       	movw	r30, r8
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	ee 85       	ldd	r30, Y+14	; 0x0e
    1756:	ff 85       	ldd	r31, Y+15	; 0x0f
    1758:	93 fd       	sbrc	r25, 3
    175a:	85 91       	lpm	r24, Z+
    175c:	93 ff       	sbrs	r25, 3
    175e:	81 91       	ld	r24, Z+
    1760:	ff 87       	std	Y+15, r31	; 0x0f
    1762:	ee 87       	std	Y+14, r30	; 0x0e
    1764:	88 23       	and	r24, r24
    1766:	09 f4       	brne	.+2      	; 0x176a <vfprintf+0x48>
    1768:	5e c3       	rjmp	.+1724   	; 0x1e26 <vfprintf+0x704>
    176a:	85 32       	cpi	r24, 0x25	; 37
    176c:	41 f4       	brne	.+16     	; 0x177e <vfprintf+0x5c>
    176e:	93 fd       	sbrc	r25, 3
    1770:	85 91       	lpm	r24, Z+
    1772:	93 ff       	sbrs	r25, 3
    1774:	81 91       	ld	r24, Z+
    1776:	ff 87       	std	Y+15, r31	; 0x0f
    1778:	ee 87       	std	Y+14, r30	; 0x0e
    177a:	85 32       	cpi	r24, 0x25	; 37
    177c:	59 f4       	brne	.+22     	; 0x1794 <vfprintf+0x72>
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	b4 01       	movw	r22, r8
    1782:	4c 8b       	std	Y+20, r20	; 0x14
    1784:	5d 8b       	std	Y+21, r21	; 0x15
    1786:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    178a:	4c 89       	ldd	r20, Y+20	; 0x14
    178c:	5d 89       	ldd	r21, Y+21	; 0x15
    178e:	5d 87       	std	Y+13, r21	; 0x0d
    1790:	4c 87       	std	Y+12, r20	; 0x0c
    1792:	d7 cf       	rjmp	.-82     	; 0x1742 <vfprintf+0x20>
    1794:	ff 24       	eor	r15, r15
    1796:	dd 24       	eor	r13, r13
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	10 32       	cpi	r17, 0x20	; 32
    179c:	b0 f4       	brcc	.+44     	; 0x17ca <vfprintf+0xa8>
    179e:	8b 32       	cpi	r24, 0x2B	; 43
    17a0:	69 f0       	breq	.+26     	; 0x17bc <vfprintf+0x9a>
    17a2:	8c 32       	cpi	r24, 0x2C	; 44
    17a4:	28 f4       	brcc	.+10     	; 0x17b0 <vfprintf+0x8e>
    17a6:	80 32       	cpi	r24, 0x20	; 32
    17a8:	51 f0       	breq	.+20     	; 0x17be <vfprintf+0x9c>
    17aa:	83 32       	cpi	r24, 0x23	; 35
    17ac:	71 f4       	brne	.+28     	; 0x17ca <vfprintf+0xa8>
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <vfprintf+0xa4>
    17b0:	8d 32       	cpi	r24, 0x2D	; 45
    17b2:	39 f0       	breq	.+14     	; 0x17c2 <vfprintf+0xa0>
    17b4:	80 33       	cpi	r24, 0x30	; 48
    17b6:	49 f4       	brne	.+18     	; 0x17ca <vfprintf+0xa8>
    17b8:	11 60       	ori	r17, 0x01	; 1
    17ba:	2c c0       	rjmp	.+88     	; 0x1814 <vfprintf+0xf2>
    17bc:	12 60       	ori	r17, 0x02	; 2
    17be:	14 60       	ori	r17, 0x04	; 4
    17c0:	29 c0       	rjmp	.+82     	; 0x1814 <vfprintf+0xf2>
    17c2:	18 60       	ori	r17, 0x08	; 8
    17c4:	27 c0       	rjmp	.+78     	; 0x1814 <vfprintf+0xf2>
    17c6:	10 61       	ori	r17, 0x10	; 16
    17c8:	25 c0       	rjmp	.+74     	; 0x1814 <vfprintf+0xf2>
    17ca:	17 fd       	sbrc	r17, 7
    17cc:	2e c0       	rjmp	.+92     	; 0x182a <vfprintf+0x108>
    17ce:	28 2f       	mov	r18, r24
    17d0:	20 53       	subi	r18, 0x30	; 48
    17d2:	2a 30       	cpi	r18, 0x0A	; 10
    17d4:	98 f4       	brcc	.+38     	; 0x17fc <vfprintf+0xda>
    17d6:	16 ff       	sbrs	r17, 6
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <vfprintf+0xc8>
    17da:	8f 2d       	mov	r24, r15
    17dc:	88 0f       	add	r24, r24
    17de:	f8 2e       	mov	r15, r24
    17e0:	ff 0c       	add	r15, r15
    17e2:	ff 0c       	add	r15, r15
    17e4:	f8 0e       	add	r15, r24
    17e6:	f2 0e       	add	r15, r18
    17e8:	15 c0       	rjmp	.+42     	; 0x1814 <vfprintf+0xf2>
    17ea:	8d 2d       	mov	r24, r13
    17ec:	88 0f       	add	r24, r24
    17ee:	d8 2e       	mov	r13, r24
    17f0:	dd 0c       	add	r13, r13
    17f2:	dd 0c       	add	r13, r13
    17f4:	d8 0e       	add	r13, r24
    17f6:	d2 0e       	add	r13, r18
    17f8:	10 62       	ori	r17, 0x20	; 32
    17fa:	0c c0       	rjmp	.+24     	; 0x1814 <vfprintf+0xf2>
    17fc:	8e 32       	cpi	r24, 0x2E	; 46
    17fe:	21 f4       	brne	.+8      	; 0x1808 <vfprintf+0xe6>
    1800:	16 fd       	sbrc	r17, 6
    1802:	11 c3       	rjmp	.+1570   	; 0x1e26 <vfprintf+0x704>
    1804:	10 64       	ori	r17, 0x40	; 64
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <vfprintf+0xf2>
    1808:	8c 36       	cpi	r24, 0x6C	; 108
    180a:	11 f4       	brne	.+4      	; 0x1810 <vfprintf+0xee>
    180c:	10 68       	ori	r17, 0x80	; 128
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vfprintf+0xf2>
    1810:	88 36       	cpi	r24, 0x68	; 104
    1812:	59 f4       	brne	.+22     	; 0x182a <vfprintf+0x108>
    1814:	ee 85       	ldd	r30, Y+14	; 0x0e
    1816:	ff 85       	ldd	r31, Y+15	; 0x0f
    1818:	93 fd       	sbrc	r25, 3
    181a:	85 91       	lpm	r24, Z+
    181c:	93 ff       	sbrs	r25, 3
    181e:	81 91       	ld	r24, Z+
    1820:	ff 87       	std	Y+15, r31	; 0x0f
    1822:	ee 87       	std	Y+14, r30	; 0x0e
    1824:	88 23       	and	r24, r24
    1826:	09 f0       	breq	.+2      	; 0x182a <vfprintf+0x108>
    1828:	b8 cf       	rjmp	.-144    	; 0x179a <vfprintf+0x78>
    182a:	98 2f       	mov	r25, r24
    182c:	95 54       	subi	r25, 0x45	; 69
    182e:	93 30       	cpi	r25, 0x03	; 3
    1830:	18 f4       	brcc	.+6      	; 0x1838 <vfprintf+0x116>
    1832:	10 61       	ori	r17, 0x10	; 16
    1834:	80 5e       	subi	r24, 0xE0	; 224
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <vfprintf+0x122>
    1838:	98 2f       	mov	r25, r24
    183a:	95 56       	subi	r25, 0x65	; 101
    183c:	93 30       	cpi	r25, 0x03	; 3
    183e:	08 f0       	brcs	.+2      	; 0x1842 <vfprintf+0x120>
    1840:	a2 c1       	rjmp	.+836    	; 0x1b86 <vfprintf+0x464>
    1842:	1f 7e       	andi	r17, 0xEF	; 239
    1844:	16 fd       	sbrc	r17, 6
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0x12a>
    1848:	e6 e0       	ldi	r30, 0x06	; 6
    184a:	fe 2e       	mov	r15, r30
    184c:	1f 73       	andi	r17, 0x3F	; 63
    184e:	85 36       	cpi	r24, 0x65	; 101
    1850:	11 f4       	brne	.+4      	; 0x1856 <vfprintf+0x134>
    1852:	10 64       	ori	r17, 0x40	; 64
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x140>
    1856:	86 36       	cpi	r24, 0x66	; 102
    1858:	11 f4       	brne	.+4      	; 0x185e <vfprintf+0x13c>
    185a:	10 68       	ori	r17, 0x80	; 128
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <vfprintf+0x140>
    185e:	f1 10       	cpse	r15, r1
    1860:	fa 94       	dec	r15
    1862:	17 ff       	sbrs	r17, 7
    1864:	07 c0       	rjmp	.+14     	; 0x1874 <vfprintf+0x152>
    1866:	fb e3       	ldi	r31, 0x3B	; 59
    1868:	ff 15       	cp	r31, r15
    186a:	48 f0       	brcs	.+18     	; 0x187e <vfprintf+0x15c>
    186c:	ef 2c       	mov	r14, r15
    186e:	e3 94       	inc	r14
    1870:	27 e0       	ldi	r18, 0x07	; 7
    1872:	0d c0       	rjmp	.+26     	; 0x188e <vfprintf+0x16c>
    1874:	27 e0       	ldi	r18, 0x07	; 7
    1876:	2f 15       	cp	r18, r15
    1878:	30 f0       	brcs	.+12     	; 0x1886 <vfprintf+0x164>
    187a:	2f 2d       	mov	r18, r15
    187c:	07 c0       	rjmp	.+14     	; 0x188c <vfprintf+0x16a>
    187e:	27 e0       	ldi	r18, 0x07	; 7
    1880:	7c e3       	ldi	r23, 0x3C	; 60
    1882:	e7 2e       	mov	r14, r23
    1884:	04 c0       	rjmp	.+8      	; 0x188e <vfprintf+0x16c>
    1886:	27 e0       	ldi	r18, 0x07	; 7
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	f6 2e       	mov	r15, r22
    188c:	ee 24       	eor	r14, r14
    188e:	ca 01       	movw	r24, r20
    1890:	04 96       	adiw	r24, 0x04	; 4
    1892:	9d 87       	std	Y+13, r25	; 0x0d
    1894:	8c 87       	std	Y+12, r24	; 0x0c
    1896:	fa 01       	movw	r30, r20
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	a1 01       	movw	r20, r2
    18a2:	0e 2d       	mov	r16, r14
    18a4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__ftoa_engine>
    18a8:	5c 01       	movw	r10, r24
    18aa:	c9 80       	ldd	r12, Y+1	; 0x01
    18ac:	2c 2d       	mov	r18, r12
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	39 8b       	std	Y+17, r19	; 0x11
    18b2:	28 8b       	std	Y+16, r18	; 0x10
    18b4:	c0 fe       	sbrs	r12, 0
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <vfprintf+0x19c>
    18b8:	38 89       	ldd	r19, Y+16	; 0x10
    18ba:	33 ff       	sbrs	r19, 3
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <vfprintf+0x1a8>
    18be:	11 fd       	sbrc	r17, 1
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <vfprintf+0x1ac>
    18c2:	12 ff       	sbrs	r17, 2
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <vfprintf+0x1b0>
    18c6:	00 e2       	ldi	r16, 0x20	; 32
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <vfprintf+0x1b2>
    18ca:	0d e2       	ldi	r16, 0x2D	; 45
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <vfprintf+0x1b2>
    18ce:	0b e2       	ldi	r16, 0x2B	; 43
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <vfprintf+0x1b2>
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	88 89       	ldd	r24, Y+16	; 0x10
    18d6:	99 89       	ldd	r25, Y+17	; 0x11
    18d8:	8c 70       	andi	r24, 0x0C	; 12
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	09 f4       	brne	.+2      	; 0x18e2 <vfprintf+0x1c0>
    18e0:	3c c0       	rjmp	.+120    	; 0x195a <vfprintf+0x238>
    18e2:	00 23       	and	r16, r16
    18e4:	11 f0       	breq	.+4      	; 0x18ea <vfprintf+0x1c8>
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x1ca>
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	8d 15       	cp	r24, r13
    18ee:	58 f4       	brcc	.+22     	; 0x1906 <vfprintf+0x1e4>
    18f0:	d8 1a       	sub	r13, r24
    18f2:	13 fd       	sbrc	r17, 3
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <vfprintf+0x1e6>
    18f6:	80 e2       	ldi	r24, 0x20	; 32
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	b4 01       	movw	r22, r8
    18fc:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1900:	da 94       	dec	r13
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <vfprintf+0x1d4>
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x1e6>
    1906:	dd 24       	eor	r13, r13
    1908:	00 23       	and	r16, r16
    190a:	29 f0       	breq	.+10     	; 0x1916 <vfprintf+0x1f4>
    190c:	80 2f       	mov	r24, r16
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	b4 01       	movw	r22, r8
    1912:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1916:	88 89       	ldd	r24, Y+16	; 0x10
    1918:	83 fd       	sbrc	r24, 3
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <vfprintf+0x204>
    191c:	3c e6       	ldi	r19, 0x6C	; 108
    191e:	e3 2e       	mov	r14, r19
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	f3 2e       	mov	r15, r19
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <vfprintf+0x226>
    1926:	28 e6       	ldi	r18, 0x68	; 104
    1928:	e2 2e       	mov	r14, r18
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	f2 2e       	mov	r15, r18
    192e:	0c c0       	rjmp	.+24     	; 0x1948 <vfprintf+0x226>
    1930:	01 15       	cp	r16, r1
    1932:	11 05       	cpc	r17, r1
    1934:	09 f0       	breq	.+2      	; 0x1938 <vfprintf+0x216>
    1936:	80 52       	subi	r24, 0x20	; 32
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	b4 01       	movw	r22, r8
    193c:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1940:	08 94       	sec
    1942:	e1 1c       	adc	r14, r1
    1944:	f1 1c       	adc	r15, r1
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <vfprintf+0x22e>
    1948:	01 2f       	mov	r16, r17
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	00 71       	andi	r16, 0x10	; 16
    194e:	10 70       	andi	r17, 0x00	; 0
    1950:	f7 01       	movw	r30, r14
    1952:	84 91       	lpm	r24, Z
    1954:	88 23       	and	r24, r24
    1956:	61 f7       	brne	.-40     	; 0x1930 <vfprintf+0x20e>
    1958:	63 c2       	rjmp	.+1222   	; 0x1e20 <vfprintf+0x6fe>
    195a:	17 ff       	sbrs	r17, 7
    195c:	0e c0       	rjmp	.+28     	; 0x197a <vfprintf+0x258>
    195e:	ea 0c       	add	r14, r10
    1960:	f8 89       	ldd	r31, Y+16	; 0x10
    1962:	f4 ff       	sbrs	r31, 4
    1964:	04 c0       	rjmp	.+8      	; 0x196e <vfprintf+0x24c>
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	81 33       	cpi	r24, 0x31	; 49
    196a:	09 f4       	brne	.+2      	; 0x196e <vfprintf+0x24c>
    196c:	ea 94       	dec	r14
    196e:	1e 14       	cp	r1, r14
    1970:	4c f5       	brge	.+82     	; 0x19c4 <vfprintf+0x2a2>
    1972:	28 e0       	ldi	r18, 0x08	; 8
    1974:	2e 15       	cp	r18, r14
    1976:	48 f1       	brcs	.+82     	; 0x19ca <vfprintf+0x2a8>
    1978:	2c c0       	rjmp	.+88     	; 0x19d2 <vfprintf+0x2b0>
    197a:	16 fd       	sbrc	r17, 6
    197c:	2a c0       	rjmp	.+84     	; 0x19d2 <vfprintf+0x2b0>
    197e:	8f 2d       	mov	r24, r15
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	8a 15       	cp	r24, r10
    1984:	9b 05       	cpc	r25, r11
    1986:	44 f0       	brlt	.+16     	; 0x1998 <vfprintf+0x276>
    1988:	3c ef       	ldi	r19, 0xFC	; 252
    198a:	a3 16       	cp	r10, r19
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	b3 06       	cpc	r11, r19
    1990:	1c f0       	brlt	.+6      	; 0x1998 <vfprintf+0x276>
    1992:	10 68       	ori	r17, 0x80	; 128
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <vfprintf+0x276>
    1996:	fa 94       	dec	r15
    1998:	ff 20       	and	r15, r15
    199a:	49 f0       	breq	.+18     	; 0x19ae <vfprintf+0x28c>
    199c:	e2 e0       	ldi	r30, 0x02	; 2
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	ec 0f       	add	r30, r28
    19a2:	fd 1f       	adc	r31, r29
    19a4:	ef 0d       	add	r30, r15
    19a6:	f1 1d       	adc	r31, r1
    19a8:	80 81       	ld	r24, Z
    19aa:	80 33       	cpi	r24, 0x30	; 48
    19ac:	a1 f3       	breq	.-24     	; 0x1996 <vfprintf+0x274>
    19ae:	17 ff       	sbrs	r17, 7
    19b0:	10 c0       	rjmp	.+32     	; 0x19d2 <vfprintf+0x2b0>
    19b2:	ef 2c       	mov	r14, r15
    19b4:	e3 94       	inc	r14
    19b6:	8f 2d       	mov	r24, r15
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a8 16       	cp	r10, r24
    19bc:	b9 06       	cpc	r11, r25
    19be:	44 f4       	brge	.+16     	; 0x19d0 <vfprintf+0x2ae>
    19c0:	fa 18       	sub	r15, r10
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <vfprintf+0x2b0>
    19c4:	ee 24       	eor	r14, r14
    19c6:	e3 94       	inc	r14
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <vfprintf+0x2b0>
    19ca:	98 e0       	ldi	r25, 0x08	; 8
    19cc:	e9 2e       	mov	r14, r25
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <vfprintf+0x2b0>
    19d0:	ff 24       	eor	r15, r15
    19d2:	17 ff       	sbrs	r17, 7
    19d4:	07 c0       	rjmp	.+14     	; 0x19e4 <vfprintf+0x2c2>
    19d6:	1a 14       	cp	r1, r10
    19d8:	1b 04       	cpc	r1, r11
    19da:	3c f4       	brge	.+14     	; 0x19ea <vfprintf+0x2c8>
    19dc:	95 01       	movw	r18, r10
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <vfprintf+0x2cc>
    19e4:	25 e0       	ldi	r18, 0x05	; 5
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <vfprintf+0x2cc>
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	00 23       	and	r16, r16
    19f0:	11 f0       	breq	.+4      	; 0x19f6 <vfprintf+0x2d4>
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	ff 20       	and	r15, r15
    19f8:	29 f0       	breq	.+10     	; 0x1a04 <vfprintf+0x2e2>
    19fa:	8f 2d       	mov	r24, r15
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	28 0f       	add	r18, r24
    1a02:	39 1f       	adc	r19, r25
    1a04:	8d 2d       	mov	r24, r13
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	14 f4       	brge	.+4      	; 0x1a12 <vfprintf+0x2f0>
    1a0e:	d2 1a       	sub	r13, r18
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <vfprintf+0x2f2>
    1a12:	dd 24       	eor	r13, r13
    1a14:	61 2e       	mov	r6, r17
    1a16:	77 24       	eor	r7, r7
    1a18:	c3 01       	movw	r24, r6
    1a1a:	89 70       	andi	r24, 0x09	; 9
    1a1c:	90 70       	andi	r25, 0x00	; 0
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	49 f4       	brne	.+18     	; 0x1a34 <vfprintf+0x312>
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <vfprintf+0x30e>
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	b4 01       	movw	r22, r8
    1a2a:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1a2e:	da 94       	dec	r13
    1a30:	dd 20       	and	r13, r13
    1a32:	c1 f7       	brne	.-16     	; 0x1a24 <vfprintf+0x302>
    1a34:	00 23       	and	r16, r16
    1a36:	29 f0       	breq	.+10     	; 0x1a42 <vfprintf+0x320>
    1a38:	80 2f       	mov	r24, r16
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	b4 01       	movw	r22, r8
    1a3e:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1a42:	63 fc       	sbrc	r6, 3
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <vfprintf+0x336>
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <vfprintf+0x332>
    1a48:	80 e3       	ldi	r24, 0x30	; 48
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	b4 01       	movw	r22, r8
    1a4e:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1a52:	da 94       	dec	r13
    1a54:	dd 20       	and	r13, r13
    1a56:	c1 f7       	brne	.-16     	; 0x1a48 <vfprintf+0x326>
    1a58:	17 ff       	sbrs	r17, 7
    1a5a:	48 c0       	rjmp	.+144    	; 0x1aec <vfprintf+0x3ca>
    1a5c:	85 01       	movw	r16, r10
    1a5e:	b7 fe       	sbrs	r11, 7
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <vfprintf+0x344>
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	66 24       	eor	r6, r6
    1a68:	77 24       	eor	r7, r7
    1a6a:	95 01       	movw	r18, r10
    1a6c:	2e 19       	sub	r18, r14
    1a6e:	31 09       	sbc	r19, r1
    1a70:	3b 8b       	std	Y+19, r19	; 0x13
    1a72:	2a 8b       	std	Y+18, r18	; 0x12
    1a74:	25 01       	movw	r4, r10
    1a76:	40 1a       	sub	r4, r16
    1a78:	51 0a       	sbc	r5, r17
    1a7a:	42 0c       	add	r4, r2
    1a7c:	53 1c       	adc	r5, r3
    1a7e:	6f 2d       	mov	r22, r15
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	ee 24       	eor	r14, r14
    1a84:	ff 24       	eor	r15, r15
    1a86:	e6 1a       	sub	r14, r22
    1a88:	f7 0a       	sbc	r15, r23
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	0f 3f       	cpi	r16, 0xFF	; 255
    1a8e:	13 07       	cpc	r17, r19
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <vfprintf+0x37a>
    1a92:	8e e2       	ldi	r24, 0x2E	; 46
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	b4 01       	movw	r22, r8
    1a98:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1a9c:	a0 16       	cp	r10, r16
    1a9e:	b1 06       	cpc	r11, r17
    1aa0:	54 f0       	brlt	.+20     	; 0x1ab6 <vfprintf+0x394>
    1aa2:	2a 89       	ldd	r18, Y+18	; 0x12
    1aa4:	3b 89       	ldd	r19, Y+19	; 0x13
    1aa6:	20 17       	cp	r18, r16
    1aa8:	31 07       	cpc	r19, r17
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <vfprintf+0x394>
    1aac:	f2 01       	movw	r30, r4
    1aae:	e6 0d       	add	r30, r6
    1ab0:	f7 1d       	adc	r31, r7
    1ab2:	81 81       	ldd	r24, Z+1	; 0x01
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <vfprintf+0x396>
    1ab6:	80 e3       	ldi	r24, 0x30	; 48
    1ab8:	01 50       	subi	r16, 0x01	; 1
    1aba:	10 40       	sbci	r17, 0x00	; 0
    1abc:	08 94       	sec
    1abe:	61 1c       	adc	r6, r1
    1ac0:	71 1c       	adc	r7, r1
    1ac2:	0e 15       	cp	r16, r14
    1ac4:	1f 05       	cpc	r17, r15
    1ac6:	2c f0       	brlt	.+10     	; 0x1ad2 <vfprintf+0x3b0>
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	b4 01       	movw	r22, r8
    1acc:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1ad0:	dc cf       	rjmp	.-72     	; 0x1a8a <vfprintf+0x368>
    1ad2:	0a 15       	cp	r16, r10
    1ad4:	1b 05       	cpc	r17, r11
    1ad6:	41 f4       	brne	.+16     	; 0x1ae8 <vfprintf+0x3c6>
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	96 33       	cpi	r25, 0x36	; 54
    1adc:	20 f4       	brcc	.+8      	; 0x1ae6 <vfprintf+0x3c4>
    1ade:	95 33       	cpi	r25, 0x35	; 53
    1ae0:	19 f4       	brne	.+6      	; 0x1ae8 <vfprintf+0x3c6>
    1ae2:	38 89       	ldd	r19, Y+16	; 0x10
    1ae4:	34 ff       	sbrs	r19, 4
    1ae6:	81 e3       	ldi	r24, 0x31	; 49
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	49 c0       	rjmp	.+146    	; 0x1b7e <vfprintf+0x45c>
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	81 33       	cpi	r24, 0x31	; 49
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <vfprintf+0x3d4>
    1af2:	9f ee       	ldi	r25, 0xEF	; 239
    1af4:	c9 22       	and	r12, r25
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	b4 01       	movw	r22, r8
    1afa:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1afe:	ff 20       	and	r15, r15
    1b00:	89 f0       	breq	.+34     	; 0x1b24 <vfprintf+0x402>
    1b02:	8e e2       	ldi	r24, 0x2E	; 46
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	b4 01       	movw	r22, r8
    1b08:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1b0c:	12 e0       	ldi	r17, 0x02	; 2
    1b0e:	f1 01       	movw	r30, r2
    1b10:	e1 0f       	add	r30, r17
    1b12:	f1 1d       	adc	r31, r1
    1b14:	1f 5f       	subi	r17, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	b4 01       	movw	r22, r8
    1b1c:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1b20:	fa 94       	dec	r15
    1b22:	a9 f7       	brne	.-22     	; 0x1b0e <vfprintf+0x3ec>
    1b24:	64 fe       	sbrs	r6, 4
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <vfprintf+0x40c>
    1b28:	85 e4       	ldi	r24, 0x45	; 69
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <vfprintf+0x410>
    1b2e:	85 e6       	ldi	r24, 0x65	; 101
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	b4 01       	movw	r22, r8
    1b34:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1b38:	b7 fc       	sbrc	r11, 7
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <vfprintf+0x424>
    1b3c:	a1 14       	cp	r10, r1
    1b3e:	b1 04       	cpc	r11, r1
    1b40:	41 f4       	brne	.+16     	; 0x1b52 <vfprintf+0x430>
    1b42:	c4 fe       	sbrs	r12, 4
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <vfprintf+0x430>
    1b46:	b0 94       	com	r11
    1b48:	a1 94       	neg	r10
    1b4a:	b1 08       	sbc	r11, r1
    1b4c:	b3 94       	inc	r11
    1b4e:	8d e2       	ldi	r24, 0x2D	; 45
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <vfprintf+0x432>
    1b52:	8b e2       	ldi	r24, 0x2B	; 43
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	b4 01       	movw	r22, r8
    1b58:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1b5c:	80 e3       	ldi	r24, 0x30	; 48
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <vfprintf+0x448>
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	e6 ef       	ldi	r30, 0xF6	; 246
    1b64:	ff ef       	ldi	r31, 0xFF	; 255
    1b66:	ae 0e       	add	r10, r30
    1b68:	bf 1e       	adc	r11, r31
    1b6a:	fa e0       	ldi	r31, 0x0A	; 10
    1b6c:	af 16       	cp	r10, r31
    1b6e:	b1 04       	cpc	r11, r1
    1b70:	bc f7       	brge	.-18     	; 0x1b60 <vfprintf+0x43e>
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	b4 01       	movw	r22, r8
    1b76:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1b7a:	c5 01       	movw	r24, r10
    1b7c:	c0 96       	adiw	r24, 0x30	; 48
    1b7e:	b4 01       	movw	r22, r8
    1b80:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1b84:	4d c1       	rjmp	.+666    	; 0x1e20 <vfprintf+0x6fe>
    1b86:	83 36       	cpi	r24, 0x63	; 99
    1b88:	31 f0       	breq	.+12     	; 0x1b96 <vfprintf+0x474>
    1b8a:	83 37       	cpi	r24, 0x73	; 115
    1b8c:	89 f0       	breq	.+34     	; 0x1bb0 <vfprintf+0x48e>
    1b8e:	83 35       	cpi	r24, 0x53	; 83
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <vfprintf+0x472>
    1b92:	59 c0       	rjmp	.+178    	; 0x1c46 <vfprintf+0x524>
    1b94:	22 c0       	rjmp	.+68     	; 0x1bda <vfprintf+0x4b8>
    1b96:	9a 01       	movw	r18, r20
    1b98:	2e 5f       	subi	r18, 0xFE	; 254
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	3d 87       	std	Y+13, r19	; 0x0d
    1b9e:	2c 87       	std	Y+12, r18	; 0x0c
    1ba0:	fa 01       	movw	r30, r20
    1ba2:	80 81       	ld	r24, Z
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	e8 2e       	mov	r14, r24
    1baa:	f1 2c       	mov	r15, r1
    1bac:	51 01       	movw	r10, r2
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <vfprintf+0x4b4>
    1bb0:	9a 01       	movw	r18, r20
    1bb2:	2e 5f       	subi	r18, 0xFE	; 254
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	3d 87       	std	Y+13, r19	; 0x0d
    1bb8:	2c 87       	std	Y+12, r18	; 0x0c
    1bba:	fa 01       	movw	r30, r20
    1bbc:	a0 80       	ld	r10, Z
    1bbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1bc0:	16 ff       	sbrs	r17, 6
    1bc2:	03 c0       	rjmp	.+6      	; 0x1bca <vfprintf+0x4a8>
    1bc4:	6f 2d       	mov	r22, r15
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <vfprintf+0x4ac>
    1bca:	6f ef       	ldi	r22, 0xFF	; 255
    1bcc:	7f ef       	ldi	r23, 0xFF	; 255
    1bce:	c5 01       	movw	r24, r10
    1bd0:	0e 94 0f 12 	call	0x241e	; 0x241e <strnlen>
    1bd4:	7c 01       	movw	r14, r24
    1bd6:	1f 77       	andi	r17, 0x7F	; 127
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <vfprintf+0x4e0>
    1bda:	9a 01       	movw	r18, r20
    1bdc:	2e 5f       	subi	r18, 0xFE	; 254
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	3d 87       	std	Y+13, r19	; 0x0d
    1be2:	2c 87       	std	Y+12, r18	; 0x0c
    1be4:	fa 01       	movw	r30, r20
    1be6:	a0 80       	ld	r10, Z
    1be8:	b1 80       	ldd	r11, Z+1	; 0x01
    1bea:	16 ff       	sbrs	r17, 6
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <vfprintf+0x4d2>
    1bee:	6f 2d       	mov	r22, r15
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <vfprintf+0x4d6>
    1bf4:	6f ef       	ldi	r22, 0xFF	; 255
    1bf6:	7f ef       	ldi	r23, 0xFF	; 255
    1bf8:	c5 01       	movw	r24, r10
    1bfa:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <strnlen_P>
    1bfe:	7c 01       	movw	r14, r24
    1c00:	10 68       	ori	r17, 0x80	; 128
    1c02:	13 fd       	sbrc	r17, 3
    1c04:	1c c0       	rjmp	.+56     	; 0x1c3e <vfprintf+0x51c>
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <vfprintf+0x4f2>
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	b4 01       	movw	r22, r8
    1c0e:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1c12:	da 94       	dec	r13
    1c14:	8d 2d       	mov	r24, r13
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	e8 16       	cp	r14, r24
    1c1a:	f9 06       	cpc	r15, r25
    1c1c:	a8 f3       	brcs	.-22     	; 0x1c08 <vfprintf+0x4e6>
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <vfprintf+0x51c>
    1c20:	f5 01       	movw	r30, r10
    1c22:	17 fd       	sbrc	r17, 7
    1c24:	85 91       	lpm	r24, Z+
    1c26:	17 ff       	sbrs	r17, 7
    1c28:	81 91       	ld	r24, Z+
    1c2a:	5f 01       	movw	r10, r30
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	b4 01       	movw	r22, r8
    1c30:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1c34:	d1 10       	cpse	r13, r1
    1c36:	da 94       	dec	r13
    1c38:	08 94       	sec
    1c3a:	e1 08       	sbc	r14, r1
    1c3c:	f1 08       	sbc	r15, r1
    1c3e:	e1 14       	cp	r14, r1
    1c40:	f1 04       	cpc	r15, r1
    1c42:	71 f7       	brne	.-36     	; 0x1c20 <vfprintf+0x4fe>
    1c44:	ed c0       	rjmp	.+474    	; 0x1e20 <vfprintf+0x6fe>
    1c46:	84 36       	cpi	r24, 0x64	; 100
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <vfprintf+0x52c>
    1c4a:	89 36       	cpi	r24, 0x69	; 105
    1c4c:	71 f5       	brne	.+92     	; 0x1caa <vfprintf+0x588>
    1c4e:	9a 01       	movw	r18, r20
    1c50:	17 ff       	sbrs	r17, 7
    1c52:	0a c0       	rjmp	.+20     	; 0x1c68 <vfprintf+0x546>
    1c54:	2c 5f       	subi	r18, 0xFC	; 252
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	3d 87       	std	Y+13, r19	; 0x0d
    1c5a:	2c 87       	std	Y+12, r18	; 0x0c
    1c5c:	fa 01       	movw	r30, r20
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	a2 81       	ldd	r26, Z+2	; 0x02
    1c64:	b3 81       	ldd	r27, Z+3	; 0x03
    1c66:	0b c0       	rjmp	.+22     	; 0x1c7e <vfprintf+0x55c>
    1c68:	2e 5f       	subi	r18, 0xFE	; 254
    1c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6c:	3d 87       	std	Y+13, r19	; 0x0d
    1c6e:	2c 87       	std	Y+12, r18	; 0x0c
    1c70:	fa 01       	movw	r30, r20
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	aa 27       	eor	r26, r26
    1c78:	97 fd       	sbrc	r25, 7
    1c7a:	a0 95       	com	r26
    1c7c:	ba 2f       	mov	r27, r26
    1c7e:	01 2f       	mov	r16, r17
    1c80:	0f 76       	andi	r16, 0x6F	; 111
    1c82:	b7 ff       	sbrs	r27, 7
    1c84:	08 c0       	rjmp	.+16     	; 0x1c96 <vfprintf+0x574>
    1c86:	b0 95       	com	r27
    1c88:	a0 95       	com	r26
    1c8a:	90 95       	com	r25
    1c8c:	81 95       	neg	r24
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	af 4f       	sbci	r26, 0xFF	; 255
    1c92:	bf 4f       	sbci	r27, 0xFF	; 255
    1c94:	00 68       	ori	r16, 0x80	; 128
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	a1 01       	movw	r20, r2
    1c9c:	2a e0       	ldi	r18, 0x0A	; 10
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	0e 94 89 12 	call	0x2512	; 0x2512 <__ultoa_invert>
    1ca4:	e8 2e       	mov	r14, r24
    1ca6:	e2 18       	sub	r14, r2
    1ca8:	41 c0       	rjmp	.+130    	; 0x1d2c <vfprintf+0x60a>
    1caa:	85 37       	cpi	r24, 0x75	; 117
    1cac:	21 f4       	brne	.+8      	; 0x1cb6 <vfprintf+0x594>
    1cae:	1f 7e       	andi	r17, 0xEF	; 239
    1cb0:	2a e0       	ldi	r18, 0x0A	; 10
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	20 c0       	rjmp	.+64     	; 0x1cf6 <vfprintf+0x5d4>
    1cb6:	19 7f       	andi	r17, 0xF9	; 249
    1cb8:	8f 36       	cpi	r24, 0x6F	; 111
    1cba:	a9 f0       	breq	.+42     	; 0x1ce6 <vfprintf+0x5c4>
    1cbc:	80 37       	cpi	r24, 0x70	; 112
    1cbe:	20 f4       	brcc	.+8      	; 0x1cc8 <vfprintf+0x5a6>
    1cc0:	88 35       	cpi	r24, 0x58	; 88
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <vfprintf+0x5a4>
    1cc4:	b0 c0       	rjmp	.+352    	; 0x1e26 <vfprintf+0x704>
    1cc6:	0b c0       	rjmp	.+22     	; 0x1cde <vfprintf+0x5bc>
    1cc8:	80 37       	cpi	r24, 0x70	; 112
    1cca:	21 f0       	breq	.+8      	; 0x1cd4 <vfprintf+0x5b2>
    1ccc:	88 37       	cpi	r24, 0x78	; 120
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <vfprintf+0x5b0>
    1cd0:	aa c0       	rjmp	.+340    	; 0x1e26 <vfprintf+0x704>
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <vfprintf+0x5b4>
    1cd4:	10 61       	ori	r17, 0x10	; 16
    1cd6:	14 ff       	sbrs	r17, 4
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <vfprintf+0x5ca>
    1cda:	14 60       	ori	r17, 0x04	; 4
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <vfprintf+0x5ca>
    1cde:	14 ff       	sbrs	r17, 4
    1ce0:	08 c0       	rjmp	.+16     	; 0x1cf2 <vfprintf+0x5d0>
    1ce2:	16 60       	ori	r17, 0x06	; 6
    1ce4:	06 c0       	rjmp	.+12     	; 0x1cf2 <vfprintf+0x5d0>
    1ce6:	28 e0       	ldi	r18, 0x08	; 8
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <vfprintf+0x5d4>
    1cec:	20 e1       	ldi	r18, 0x10	; 16
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x5d4>
    1cf2:	20 e1       	ldi	r18, 0x10	; 16
    1cf4:	32 e0       	ldi	r19, 0x02	; 2
    1cf6:	ca 01       	movw	r24, r20
    1cf8:	17 ff       	sbrs	r17, 7
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <vfprintf+0x5ec>
    1cfc:	04 96       	adiw	r24, 0x04	; 4
    1cfe:	9d 87       	std	Y+13, r25	; 0x0d
    1d00:	8c 87       	std	Y+12, r24	; 0x0c
    1d02:	fa 01       	movw	r30, r20
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	08 c0       	rjmp	.+16     	; 0x1d1e <vfprintf+0x5fc>
    1d0e:	02 96       	adiw	r24, 0x02	; 2
    1d10:	9d 87       	std	Y+13, r25	; 0x0d
    1d12:	8c 87       	std	Y+12, r24	; 0x0c
    1d14:	fa 01       	movw	r30, r20
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a1 01       	movw	r20, r2
    1d20:	0e 94 89 12 	call	0x2512	; 0x2512 <__ultoa_invert>
    1d24:	e8 2e       	mov	r14, r24
    1d26:	e2 18       	sub	r14, r2
    1d28:	01 2f       	mov	r16, r17
    1d2a:	0f 77       	andi	r16, 0x7F	; 127
    1d2c:	06 ff       	sbrs	r16, 6
    1d2e:	09 c0       	rjmp	.+18     	; 0x1d42 <vfprintf+0x620>
    1d30:	0e 7f       	andi	r16, 0xFE	; 254
    1d32:	ef 14       	cp	r14, r15
    1d34:	30 f4       	brcc	.+12     	; 0x1d42 <vfprintf+0x620>
    1d36:	04 ff       	sbrs	r16, 4
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <vfprintf+0x624>
    1d3a:	02 fd       	sbrc	r16, 2
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <vfprintf+0x624>
    1d3e:	0f 7e       	andi	r16, 0xEF	; 239
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x624>
    1d42:	1e 2d       	mov	r17, r14
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <vfprintf+0x626>
    1d46:	1f 2d       	mov	r17, r15
    1d48:	80 2f       	mov	r24, r16
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	04 ff       	sbrs	r16, 4
    1d4e:	0c c0       	rjmp	.+24     	; 0x1d68 <vfprintf+0x646>
    1d50:	fe 01       	movw	r30, r28
    1d52:	ee 0d       	add	r30, r14
    1d54:	f1 1d       	adc	r31, r1
    1d56:	20 81       	ld	r18, Z
    1d58:	20 33       	cpi	r18, 0x30	; 48
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <vfprintf+0x63e>
    1d5c:	09 7e       	andi	r16, 0xE9	; 233
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <vfprintf+0x650>
    1d60:	02 ff       	sbrs	r16, 2
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <vfprintf+0x64e>
    1d64:	1e 5f       	subi	r17, 0xFE	; 254
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <vfprintf+0x650>
    1d68:	86 78       	andi	r24, 0x86	; 134
    1d6a:	90 70       	andi	r25, 0x00	; 0
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <vfprintf+0x650>
    1d70:	1f 5f       	subi	r17, 0xFF	; 255
    1d72:	a0 2e       	mov	r10, r16
    1d74:	bb 24       	eor	r11, r11
    1d76:	03 fd       	sbrc	r16, 3
    1d78:	12 c0       	rjmp	.+36     	; 0x1d9e <vfprintf+0x67c>
    1d7a:	00 ff       	sbrs	r16, 0
    1d7c:	0d c0       	rjmp	.+26     	; 0x1d98 <vfprintf+0x676>
    1d7e:	fe 2c       	mov	r15, r14
    1d80:	1d 15       	cp	r17, r13
    1d82:	50 f4       	brcc	.+20     	; 0x1d98 <vfprintf+0x676>
    1d84:	fd 0c       	add	r15, r13
    1d86:	f1 1a       	sub	r15, r17
    1d88:	1d 2d       	mov	r17, r13
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <vfprintf+0x676>
    1d8c:	80 e2       	ldi	r24, 0x20	; 32
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	b4 01       	movw	r22, r8
    1d92:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1d96:	1f 5f       	subi	r17, 0xFF	; 255
    1d98:	1d 15       	cp	r17, r13
    1d9a:	c0 f3       	brcs	.-16     	; 0x1d8c <vfprintf+0x66a>
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <vfprintf+0x684>
    1d9e:	1d 15       	cp	r17, r13
    1da0:	10 f4       	brcc	.+4      	; 0x1da6 <vfprintf+0x684>
    1da2:	d1 1a       	sub	r13, r17
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <vfprintf+0x686>
    1da6:	dd 24       	eor	r13, r13
    1da8:	a4 fe       	sbrs	r10, 4
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <vfprintf+0x6a8>
    1dac:	80 e3       	ldi	r24, 0x30	; 48
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	b4 01       	movw	r22, r8
    1db2:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1db6:	a2 fe       	sbrs	r10, 2
    1db8:	1f c0       	rjmp	.+62     	; 0x1df8 <vfprintf+0x6d6>
    1dba:	a1 fe       	sbrs	r10, 1
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <vfprintf+0x6a2>
    1dbe:	88 e5       	ldi	r24, 0x58	; 88
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	10 c0       	rjmp	.+32     	; 0x1de4 <vfprintf+0x6c2>
    1dc4:	88 e7       	ldi	r24, 0x78	; 120
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <vfprintf+0x6c2>
    1dca:	c5 01       	movw	r24, r10
    1dcc:	86 78       	andi	r24, 0x86	; 134
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	91 f0       	breq	.+36     	; 0x1df8 <vfprintf+0x6d6>
    1dd4:	a1 fc       	sbrc	r10, 1
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <vfprintf+0x6ba>
    1dd8:	80 e2       	ldi	r24, 0x20	; 32
    1dda:	01 c0       	rjmp	.+2      	; 0x1dde <vfprintf+0x6bc>
    1ddc:	8b e2       	ldi	r24, 0x2B	; 43
    1dde:	07 fd       	sbrc	r16, 7
    1de0:	8d e2       	ldi	r24, 0x2D	; 45
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	b4 01       	movw	r22, r8
    1de6:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <vfprintf+0x6d6>
    1dec:	80 e3       	ldi	r24, 0x30	; 48
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	b4 01       	movw	r22, r8
    1df2:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1df6:	fa 94       	dec	r15
    1df8:	ef 14       	cp	r14, r15
    1dfa:	c0 f3       	brcs	.-16     	; 0x1dec <vfprintf+0x6ca>
    1dfc:	ea 94       	dec	r14
    1dfe:	f1 01       	movw	r30, r2
    1e00:	ee 0d       	add	r30, r14
    1e02:	f1 1d       	adc	r31, r1
    1e04:	80 81       	ld	r24, Z
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	b4 01       	movw	r22, r8
    1e0a:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1e0e:	ee 20       	and	r14, r14
    1e10:	a9 f7       	brne	.-22     	; 0x1dfc <vfprintf+0x6da>
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <vfprintf+0x6fe>
    1e14:	80 e2       	ldi	r24, 0x20	; 32
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	b4 01       	movw	r22, r8
    1e1a:	0e 94 1a 12 	call	0x2434	; 0x2434 <fputc>
    1e1e:	da 94       	dec	r13
    1e20:	dd 20       	and	r13, r13
    1e22:	c1 f7       	brne	.-16     	; 0x1e14 <vfprintf+0x6f2>
    1e24:	8e cc       	rjmp	.-1764   	; 0x1742 <vfprintf+0x20>
    1e26:	f4 01       	movw	r30, r8
    1e28:	86 81       	ldd	r24, Z+6	; 0x06
    1e2a:	97 81       	ldd	r25, Z+7	; 0x07
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <vfprintf+0x710>
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	9f ef       	ldi	r25, 0xFF	; 255
    1e32:	65 96       	adiw	r28, 0x15	; 21
    1e34:	e2 e1       	ldi	r30, 0x12	; 18
    1e36:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__epilogue_restores__>

00001e3a <__divmodhi4>:
    1e3a:	97 fb       	bst	r25, 7
    1e3c:	09 2e       	mov	r0, r25
    1e3e:	07 26       	eor	r0, r23
    1e40:	0a d0       	rcall	.+20     	; 0x1e56 <__divmodhi4_neg1>
    1e42:	77 fd       	sbrc	r23, 7
    1e44:	04 d0       	rcall	.+8      	; 0x1e4e <__divmodhi4_neg2>
    1e46:	43 d0       	rcall	.+134    	; 0x1ece <__udivmodhi4>
    1e48:	06 d0       	rcall	.+12     	; 0x1e56 <__divmodhi4_neg1>
    1e4a:	00 20       	and	r0, r0
    1e4c:	1a f4       	brpl	.+6      	; 0x1e54 <__divmodhi4_exit>

00001e4e <__divmodhi4_neg2>:
    1e4e:	70 95       	com	r23
    1e50:	61 95       	neg	r22
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255

00001e54 <__divmodhi4_exit>:
    1e54:	08 95       	ret

00001e56 <__divmodhi4_neg1>:
    1e56:	f6 f7       	brtc	.-4      	; 0x1e54 <__divmodhi4_exit>
    1e58:	90 95       	com	r25
    1e5a:	81 95       	neg	r24
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	08 95       	ret

00001e60 <__prologue_saves__>:
    1e60:	2f 92       	push	r2
    1e62:	3f 92       	push	r3
    1e64:	4f 92       	push	r4
    1e66:	5f 92       	push	r5
    1e68:	6f 92       	push	r6
    1e6a:	7f 92       	push	r7
    1e6c:	8f 92       	push	r8
    1e6e:	9f 92       	push	r9
    1e70:	af 92       	push	r10
    1e72:	bf 92       	push	r11
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	ca 1b       	sub	r28, r26
    1e8a:	db 0b       	sbc	r29, r27
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	09 94       	ijmp

00001e98 <__epilogue_restores__>:
    1e98:	2a 88       	ldd	r2, Y+18	; 0x12
    1e9a:	39 88       	ldd	r3, Y+17	; 0x11
    1e9c:	48 88       	ldd	r4, Y+16	; 0x10
    1e9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ea0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ea2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ea4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ea6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ea8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eaa:	b9 84       	ldd	r11, Y+9	; 0x09
    1eac:	c8 84       	ldd	r12, Y+8	; 0x08
    1eae:	df 80       	ldd	r13, Y+7	; 0x07
    1eb0:	ee 80       	ldd	r14, Y+6	; 0x06
    1eb2:	fd 80       	ldd	r15, Y+5	; 0x05
    1eb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1eb6:	1b 81       	ldd	r17, Y+3	; 0x03
    1eb8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eba:	b9 81       	ldd	r27, Y+1	; 0x01
    1ebc:	ce 0f       	add	r28, r30
    1ebe:	d1 1d       	adc	r29, r1
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	ed 01       	movw	r28, r26
    1ecc:	08 95       	ret

00001ece <__udivmodhi4>:
    1ece:	aa 1b       	sub	r26, r26
    1ed0:	bb 1b       	sub	r27, r27
    1ed2:	51 e1       	ldi	r21, 0x11	; 17
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <__udivmodhi4_ep>

00001ed6 <__udivmodhi4_loop>:
    1ed6:	aa 1f       	adc	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	a6 17       	cp	r26, r22
    1edc:	b7 07       	cpc	r27, r23
    1ede:	10 f0       	brcs	.+4      	; 0x1ee4 <__udivmodhi4_ep>
    1ee0:	a6 1b       	sub	r26, r22
    1ee2:	b7 0b       	sbc	r27, r23

00001ee4 <__udivmodhi4_ep>:
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	5a 95       	dec	r21
    1eea:	a9 f7       	brne	.-22     	; 0x1ed6 <__udivmodhi4_loop>
    1eec:	80 95       	com	r24
    1eee:	90 95       	com	r25
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	08 95       	ret

00001ef6 <strtod>:
    1ef6:	a0 e0       	ldi	r26, 0x00	; 0
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e1 e8       	ldi	r30, 0x81	; 129
    1efc:	ff e0       	ldi	r31, 0x0F	; 15
    1efe:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__+0x8>
    1f02:	5b 01       	movw	r10, r22
    1f04:	61 15       	cp	r22, r1
    1f06:	71 05       	cpc	r23, r1
    1f08:	21 f0       	breq	.+8      	; 0x1f12 <strtod+0x1c>
    1f0a:	db 01       	movw	r26, r22
    1f0c:	8c 93       	st	X, r24
    1f0e:	11 96       	adiw	r26, 0x01	; 1
    1f10:	9c 93       	st	X, r25
    1f12:	7c 01       	movw	r14, r24
    1f14:	e7 01       	movw	r28, r14
    1f16:	08 94       	sec
    1f18:	e1 1c       	adc	r14, r1
    1f1a:	f1 1c       	adc	r15, r1
    1f1c:	08 81       	ld	r16, Y
    1f1e:	67 01       	movw	r12, r14
    1f20:	80 2f       	mov	r24, r16
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 c2 11 	call	0x2384	; 0x2384 <isspace>
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	a1 f7       	brne	.-24     	; 0x1f14 <strtod+0x1e>
    1f2c:	0d 32       	cpi	r16, 0x2D	; 45
    1f2e:	41 f4       	brne	.+16     	; 0x1f40 <strtod+0x4a>
    1f30:	09 81       	ldd	r16, Y+1	; 0x01
    1f32:	42 e0       	ldi	r20, 0x02	; 2
    1f34:	c4 2e       	mov	r12, r20
    1f36:	d1 2c       	mov	r13, r1
    1f38:	cc 0e       	add	r12, r28
    1f3a:	dd 1e       	adc	r13, r29
    1f3c:	11 e0       	ldi	r17, 0x01	; 1
    1f3e:	09 c0       	rjmp	.+18     	; 0x1f52 <strtod+0x5c>
    1f40:	0b 32       	cpi	r16, 0x2B	; 43
    1f42:	31 f4       	brne	.+12     	; 0x1f50 <strtod+0x5a>
    1f44:	09 81       	ldd	r16, Y+1	; 0x01
    1f46:	32 e0       	ldi	r19, 0x02	; 2
    1f48:	c3 2e       	mov	r12, r19
    1f4a:	d1 2c       	mov	r13, r1
    1f4c:	cc 0e       	add	r12, r28
    1f4e:	dd 1e       	adc	r13, r29
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	e6 01       	movw	r28, r12
    1f54:	21 97       	sbiw	r28, 0x01	; 1
    1f56:	ce 01       	movw	r24, r28
    1f58:	60 e7       	ldi	r22, 0x70	; 112
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	43 e0       	ldi	r20, 0x03	; 3
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	0e 94 ca 11 	call	0x2394	; 0x2394 <strncasecmp_P>
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	d1 f4       	brne	.+52     	; 0x1f9c <strtod+0xa6>
    1f68:	e6 01       	movw	r28, r12
    1f6a:	22 96       	adiw	r28, 0x02	; 2
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	63 e7       	ldi	r22, 0x73	; 115
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	45 e0       	ldi	r20, 0x05	; 5
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	0e 94 ca 11 	call	0x2394	; 0x2394 <strncasecmp_P>
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <strtod+0x8c>
    1f7e:	e6 01       	movw	r28, r12
    1f80:	27 96       	adiw	r28, 0x07	; 7
    1f82:	a1 14       	cp	r10, r1
    1f84:	b1 04       	cpc	r11, r1
    1f86:	19 f0       	breq	.+6      	; 0x1f8e <strtod+0x98>
    1f88:	f5 01       	movw	r30, r10
    1f8a:	d1 83       	std	Z+1, r29	; 0x01
    1f8c:	c0 83       	st	Z, r28
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	90 e8       	ldi	r25, 0x80	; 128
    1f94:	11 23       	and	r17, r17
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <strtod+0xa4>
    1f98:	0a c1       	rjmp	.+532    	; 0x21ae <strtod+0x2b8>
    1f9a:	04 c1       	rjmp	.+520    	; 0x21a4 <strtod+0x2ae>
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	68 e7       	ldi	r22, 0x78	; 120
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	43 e0       	ldi	r20, 0x03	; 3
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	0e 94 ca 11 	call	0x2394	; 0x2394 <strncasecmp_P>
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	59 f4       	brne	.+22     	; 0x1fc4 <strtod+0xce>
    1fae:	a1 14       	cp	r10, r1
    1fb0:	b1 04       	cpc	r11, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <strtod+0xc0>
    1fb4:	f9 c0       	rjmp	.+498    	; 0x21a8 <strtod+0x2b2>
    1fb6:	c6 01       	movw	r24, r12
    1fb8:	02 96       	adiw	r24, 0x02	; 2
    1fba:	d5 01       	movw	r26, r10
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
    1fc2:	f2 c0       	rjmp	.+484    	; 0x21a8 <strtod+0x2b2>
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	ba 01       	movw	r22, r20
    1fca:	88 24       	eor	r8, r8
    1fcc:	99 24       	eor	r9, r9
    1fce:	00 53       	subi	r16, 0x30	; 48
    1fd0:	0a 30       	cpi	r16, 0x0A	; 10
    1fd2:	90 f5       	brcc	.+100    	; 0x2038 <strtod+0x142>
    1fd4:	12 60       	ori	r17, 0x02	; 2
    1fd6:	21 2f       	mov	r18, r17
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	c9 01       	movw	r24, r18
    1fdc:	88 70       	andi	r24, 0x08	; 8
    1fde:	90 70       	andi	r25, 0x00	; 0
    1fe0:	12 ff       	sbrs	r17, 2
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <strtod+0xfa>
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f5       	brne	.+90     	; 0x2042 <strtod+0x14c>
    1fe8:	08 94       	sec
    1fea:	81 1c       	adc	r8, r1
    1fec:	91 1c       	adc	r9, r1
    1fee:	29 c0       	rjmp	.+82     	; 0x2042 <strtod+0x14c>
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <strtod+0x104>
    1ff4:	08 94       	sec
    1ff6:	81 08       	sbc	r8, r1
    1ff8:	91 08       	sbc	r9, r1
    1ffa:	db 01       	movw	r26, r22
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	d2 e0       	ldi	r29, 0x02	; 2
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	aa 1f       	adc	r26, r26
    2006:	bb 1f       	adc	r27, r27
    2008:	da 95       	dec	r29
    200a:	d1 f7       	brne	.-12     	; 0x2000 <strtod+0x10a>
    200c:	48 0f       	add	r20, r24
    200e:	59 1f       	adc	r21, r25
    2010:	6a 1f       	adc	r22, r26
    2012:	7b 1f       	adc	r23, r27
    2014:	44 0f       	add	r20, r20
    2016:	55 1f       	adc	r21, r21
    2018:	66 1f       	adc	r22, r22
    201a:	77 1f       	adc	r23, r23
    201c:	40 0f       	add	r20, r16
    201e:	51 1d       	adc	r21, r1
    2020:	61 1d       	adc	r22, r1
    2022:	71 1d       	adc	r23, r1
    2024:	48 39       	cpi	r20, 0x98	; 152
    2026:	b9 e9       	ldi	r27, 0x99	; 153
    2028:	5b 07       	cpc	r21, r27
    202a:	b9 e9       	ldi	r27, 0x99	; 153
    202c:	6b 07       	cpc	r22, r27
    202e:	b9 e1       	ldi	r27, 0x19	; 25
    2030:	7b 07       	cpc	r23, r27
    2032:	38 f0       	brcs	.+14     	; 0x2042 <strtod+0x14c>
    2034:	14 60       	ori	r17, 0x04	; 4
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <strtod+0x14c>
    2038:	0e 3f       	cpi	r16, 0xFE	; 254
    203a:	39 f4       	brne	.+14     	; 0x204a <strtod+0x154>
    203c:	13 fd       	sbrc	r17, 3
    203e:	43 c0       	rjmp	.+134    	; 0x20c6 <strtod+0x1d0>
    2040:	18 60       	ori	r17, 0x08	; 8
    2042:	f6 01       	movw	r30, r12
    2044:	01 91       	ld	r16, Z+
    2046:	6f 01       	movw	r12, r30
    2048:	c2 cf       	rjmp	.-124    	; 0x1fce <strtod+0xd8>
    204a:	05 33       	cpi	r16, 0x35	; 53
    204c:	11 f0       	breq	.+4      	; 0x2052 <strtod+0x15c>
    204e:	05 31       	cpi	r16, 0x15	; 21
    2050:	d1 f5       	brne	.+116    	; 0x20c6 <strtod+0x1d0>
    2052:	d6 01       	movw	r26, r12
    2054:	ec 91       	ld	r30, X
    2056:	ed 32       	cpi	r30, 0x2D	; 45
    2058:	11 f4       	brne	.+4      	; 0x205e <strtod+0x168>
    205a:	10 61       	ori	r17, 0x10	; 16
    205c:	08 c0       	rjmp	.+16     	; 0x206e <strtod+0x178>
    205e:	eb 32       	cpi	r30, 0x2B	; 43
    2060:	29 f0       	breq	.+10     	; 0x206c <strtod+0x176>
    2062:	c6 01       	movw	r24, r12
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	21 e0       	ldi	r18, 0x01	; 1
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	08 c0       	rjmp	.+16     	; 0x207c <strtod+0x186>
    206c:	d6 01       	movw	r26, r12
    206e:	11 96       	adiw	r26, 0x01	; 1
    2070:	ec 91       	ld	r30, X
    2072:	11 97       	sbiw	r26, 0x01	; 1
    2074:	c6 01       	movw	r24, r12
    2076:	02 96       	adiw	r24, 0x02	; 2
    2078:	22 e0       	ldi	r18, 0x02	; 2
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	e0 53       	subi	r30, 0x30	; 48
    207e:	ea 30       	cpi	r30, 0x0A	; 10
    2080:	20 f0       	brcs	.+8      	; 0x208a <strtod+0x194>
    2082:	6c 01       	movw	r12, r24
    2084:	c2 1a       	sub	r12, r18
    2086:	d3 0a       	sbc	r13, r19
    2088:	1e c0       	rjmp	.+60     	; 0x20c6 <strtod+0x1d0>
    208a:	dc 01       	movw	r26, r24
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	fc e0       	ldi	r31, 0x0C	; 12
    2092:	20 38       	cpi	r18, 0x80	; 128
    2094:	3f 07       	cpc	r19, r31
    2096:	5c f4       	brge	.+22     	; 0x20ae <strtod+0x1b8>
    2098:	c9 01       	movw	r24, r18
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	28 0f       	add	r18, r24
    20a4:	39 1f       	adc	r19, r25
    20a6:	22 0f       	add	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	2e 0f       	add	r18, r30
    20ac:	31 1d       	adc	r19, r1
    20ae:	ed 91       	ld	r30, X+
    20b0:	e0 53       	subi	r30, 0x30	; 48
    20b2:	6d 01       	movw	r12, r26
    20b4:	ea 30       	cpi	r30, 0x0A	; 10
    20b6:	60 f3       	brcs	.-40     	; 0x2090 <strtod+0x19a>
    20b8:	14 ff       	sbrs	r17, 4
    20ba:	03 c0       	rjmp	.+6      	; 0x20c2 <strtod+0x1cc>
    20bc:	30 95       	com	r19
    20be:	21 95       	neg	r18
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	82 0e       	add	r8, r18
    20c4:	93 1e       	adc	r9, r19
    20c6:	c1 2f       	mov	r28, r17
    20c8:	d0 e0       	ldi	r29, 0x00	; 0
    20ca:	11 ff       	sbrs	r17, 1
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <strtod+0x1e8>
    20ce:	a1 14       	cp	r10, r1
    20d0:	b1 04       	cpc	r11, r1
    20d2:	29 f0       	breq	.+10     	; 0x20de <strtod+0x1e8>
    20d4:	c6 01       	movw	r24, r12
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	d5 01       	movw	r26, r10
    20da:	8d 93       	st	X+, r24
    20dc:	9c 93       	st	X, r25
    20de:	cb 01       	movw	r24, r22
    20e0:	ba 01       	movw	r22, r20
    20e2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatunsisf>
    20e6:	6b 01       	movw	r12, r22
    20e8:	7c 01       	movw	r14, r24
    20ea:	ce 01       	movw	r24, r28
    20ec:	83 70       	andi	r24, 0x03	; 3
    20ee:	90 70       	andi	r25, 0x00	; 0
    20f0:	83 30       	cpi	r24, 0x03	; 3
    20f2:	91 05       	cpc	r25, r1
    20f4:	21 f4       	brne	.+8      	; 0x20fe <strtod+0x208>
    20f6:	f7 fa       	bst	r15, 7
    20f8:	f0 94       	com	r15
    20fa:	f7 f8       	bld	r15, 7
    20fc:	f0 94       	com	r15
    20fe:	c7 01       	movw	r24, r14
    2100:	b6 01       	movw	r22, r12
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	a9 01       	movw	r20, r18
    2108:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__cmpsf2>
    210c:	88 23       	and	r24, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <strtod+0x21c>
    2110:	44 c0       	rjmp	.+136    	; 0x219a <strtod+0x2a4>
    2112:	97 fe       	sbrs	r9, 7
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <strtod+0x22e>
    2116:	90 94       	com	r9
    2118:	81 94       	neg	r8
    211a:	91 08       	sbc	r9, r1
    211c:	93 94       	inc	r9
    211e:	c7 ea       	ldi	r28, 0xA7	; 167
    2120:	d0 e0       	ldi	r29, 0x00	; 0
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <strtod+0x232>
    2124:	cf e8       	ldi	r28, 0x8F	; 143
    2126:	d0 e0       	ldi	r29, 0x00	; 0
    2128:	98 ee       	ldi	r25, 0xE8	; 232
    212a:	69 2e       	mov	r6, r25
    212c:	9f ef       	ldi	r25, 0xFF	; 255
    212e:	79 2e       	mov	r7, r25
    2130:	6c 0e       	add	r6, r28
    2132:	7d 1e       	adc	r7, r29
    2134:	20 e2       	ldi	r18, 0x20	; 32
    2136:	a2 2e       	mov	r10, r18
    2138:	b1 2c       	mov	r11, r1
    213a:	0f c0       	rjmp	.+30     	; 0x215a <strtod+0x264>
    213c:	fe 01       	movw	r30, r28
    213e:	05 91       	lpm	r16, Z+
    2140:	15 91       	lpm	r17, Z+
    2142:	25 91       	lpm	r18, Z+
    2144:	34 91       	lpm	r19, Z
    2146:	c7 01       	movw	r24, r14
    2148:	b6 01       	movw	r22, r12
    214a:	a9 01       	movw	r20, r18
    214c:	98 01       	movw	r18, r16
    214e:	0e 94 2e 0b 	call	0x165c	; 0x165c <__mulsf3>
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
    2156:	8a 18       	sub	r8, r10
    2158:	9b 08       	sbc	r9, r11
    215a:	8a 14       	cp	r8, r10
    215c:	9b 04       	cpc	r9, r11
    215e:	74 f7       	brge	.-36     	; 0x213c <strtod+0x246>
    2160:	24 97       	sbiw	r28, 0x04	; 4
    2162:	b5 94       	asr	r11
    2164:	a7 94       	ror	r10
    2166:	c6 15       	cp	r28, r6
    2168:	d7 05       	cpc	r29, r7
    216a:	b9 f7       	brne	.-18     	; 0x215a <strtod+0x264>
    216c:	c6 01       	movw	r24, r12
    216e:	d7 01       	movw	r26, r14
    2170:	2a 2f       	mov	r18, r26
    2172:	22 0f       	add	r18, r18
    2174:	2b 2f       	mov	r18, r27
    2176:	22 1f       	adc	r18, r18
    2178:	2f 3f       	cpi	r18, 0xFF	; 255
    217a:	49 f0       	breq	.+18     	; 0x218e <strtod+0x298>
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	a9 01       	movw	r20, r18
    2186:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__cmpsf2>
    218a:	88 23       	and	r24, r24
    218c:	31 f4       	brne	.+12     	; 0x219a <strtod+0x2a4>
    218e:	82 e2       	ldi	r24, 0x22	; 34
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	90 93 95 07 	sts	0x0795, r25
    2196:	80 93 94 07 	sts	0x0794, r24
    219a:	3c 2d       	mov	r19, r12
    219c:	2d 2d       	mov	r18, r13
    219e:	9e 2d       	mov	r25, r14
    21a0:	8f 2d       	mov	r24, r15
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <strtod+0x2ba>
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <strtod+0x2ba>
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	90 ec       	ldi	r25, 0xC0	; 192
    21ae:	8f e7       	ldi	r24, 0x7F	; 127
    21b0:	b9 01       	movw	r22, r18
    21b2:	ac 01       	movw	r20, r24
    21b4:	87 2f       	mov	r24, r23
    21b6:	92 2f       	mov	r25, r18
    21b8:	a5 2f       	mov	r26, r21
    21ba:	b4 2f       	mov	r27, r20
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	ee e0       	ldi	r30, 0x0E	; 14
    21c6:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__+0x8>

000021ca <abort>:
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	f8 94       	cli
    21d0:	0c 94 04 13 	jmp	0x2608	; 0x2608 <_exit>

000021d4 <__ftoa_engine>:
    21d4:	28 30       	cpi	r18, 0x08	; 8
    21d6:	08 f0       	brcs	.+2      	; 0x21da <__ftoa_engine+0x6>
    21d8:	27 e0       	ldi	r18, 0x07	; 7
    21da:	33 27       	eor	r19, r19
    21dc:	da 01       	movw	r26, r20
    21de:	99 0f       	add	r25, r25
    21e0:	31 1d       	adc	r19, r1
    21e2:	87 fd       	sbrc	r24, 7
    21e4:	91 60       	ori	r25, 0x01	; 1
    21e6:	00 96       	adiw	r24, 0x00	; 0
    21e8:	61 05       	cpc	r22, r1
    21ea:	71 05       	cpc	r23, r1
    21ec:	39 f4       	brne	.+14     	; 0x21fc <__ftoa_engine+0x28>
    21ee:	32 60       	ori	r19, 0x02	; 2
    21f0:	2e 5f       	subi	r18, 0xFE	; 254
    21f2:	3d 93       	st	X+, r19
    21f4:	30 e3       	ldi	r19, 0x30	; 48
    21f6:	2a 95       	dec	r18
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <__ftoa_engine+0x1e>
    21fa:	08 95       	ret
    21fc:	9f 3f       	cpi	r25, 0xFF	; 255
    21fe:	30 f0       	brcs	.+12     	; 0x220c <__ftoa_engine+0x38>
    2200:	80 38       	cpi	r24, 0x80	; 128
    2202:	71 05       	cpc	r23, r1
    2204:	61 05       	cpc	r22, r1
    2206:	09 f0       	breq	.+2      	; 0x220a <__ftoa_engine+0x36>
    2208:	3c 5f       	subi	r19, 0xFC	; 252
    220a:	3c 5f       	subi	r19, 0xFC	; 252
    220c:	3d 93       	st	X+, r19
    220e:	91 30       	cpi	r25, 0x01	; 1
    2210:	08 f0       	brcs	.+2      	; 0x2214 <__ftoa_engine+0x40>
    2212:	80 68       	ori	r24, 0x80	; 128
    2214:	91 1d       	adc	r25, r1
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	1f 93       	push	r17
    221c:	0f 93       	push	r16
    221e:	ff 92       	push	r15
    2220:	ef 92       	push	r14
    2222:	19 2f       	mov	r17, r25
    2224:	98 7f       	andi	r25, 0xF8	; 248
    2226:	96 95       	lsr	r25
    2228:	e9 2f       	mov	r30, r25
    222a:	96 95       	lsr	r25
    222c:	96 95       	lsr	r25
    222e:	e9 0f       	add	r30, r25
    2230:	ff 27       	eor	r31, r31
    2232:	eb 5f       	subi	r30, 0xFB	; 251
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	99 27       	eor	r25, r25
    2238:	33 27       	eor	r19, r19
    223a:	ee 24       	eor	r14, r14
    223c:	ff 24       	eor	r15, r15
    223e:	a7 01       	movw	r20, r14
    2240:	e7 01       	movw	r28, r14
    2242:	05 90       	lpm	r0, Z+
    2244:	08 94       	sec
    2246:	07 94       	ror	r0
    2248:	28 f4       	brcc	.+10     	; 0x2254 <__ftoa_engine+0x80>
    224a:	36 0f       	add	r19, r22
    224c:	e7 1e       	adc	r14, r23
    224e:	f8 1e       	adc	r15, r24
    2250:	49 1f       	adc	r20, r25
    2252:	51 1d       	adc	r21, r1
    2254:	66 0f       	add	r22, r22
    2256:	77 1f       	adc	r23, r23
    2258:	88 1f       	adc	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	06 94       	lsr	r0
    225e:	a1 f7       	brne	.-24     	; 0x2248 <__ftoa_engine+0x74>
    2260:	05 90       	lpm	r0, Z+
    2262:	07 94       	ror	r0
    2264:	28 f4       	brcc	.+10     	; 0x2270 <__ftoa_engine+0x9c>
    2266:	e7 0e       	add	r14, r23
    2268:	f8 1e       	adc	r15, r24
    226a:	49 1f       	adc	r20, r25
    226c:	56 1f       	adc	r21, r22
    226e:	c1 1d       	adc	r28, r1
    2270:	77 0f       	add	r23, r23
    2272:	88 1f       	adc	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	66 1f       	adc	r22, r22
    2278:	06 94       	lsr	r0
    227a:	a1 f7       	brne	.-24     	; 0x2264 <__ftoa_engine+0x90>
    227c:	05 90       	lpm	r0, Z+
    227e:	07 94       	ror	r0
    2280:	28 f4       	brcc	.+10     	; 0x228c <__ftoa_engine+0xb8>
    2282:	f8 0e       	add	r15, r24
    2284:	49 1f       	adc	r20, r25
    2286:	56 1f       	adc	r21, r22
    2288:	c7 1f       	adc	r28, r23
    228a:	d1 1d       	adc	r29, r1
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	66 1f       	adc	r22, r22
    2292:	77 1f       	adc	r23, r23
    2294:	06 94       	lsr	r0
    2296:	a1 f7       	brne	.-24     	; 0x2280 <__ftoa_engine+0xac>
    2298:	05 90       	lpm	r0, Z+
    229a:	07 94       	ror	r0
    229c:	20 f4       	brcc	.+8      	; 0x22a6 <__ftoa_engine+0xd2>
    229e:	49 0f       	add	r20, r25
    22a0:	56 1f       	adc	r21, r22
    22a2:	c7 1f       	adc	r28, r23
    22a4:	d8 1f       	adc	r29, r24
    22a6:	99 0f       	add	r25, r25
    22a8:	66 1f       	adc	r22, r22
    22aa:	77 1f       	adc	r23, r23
    22ac:	88 1f       	adc	r24, r24
    22ae:	06 94       	lsr	r0
    22b0:	a9 f7       	brne	.-22     	; 0x229c <__ftoa_engine+0xc8>
    22b2:	84 91       	lpm	r24, Z
    22b4:	10 95       	com	r17
    22b6:	17 70       	andi	r17, 0x07	; 7
    22b8:	41 f0       	breq	.+16     	; 0x22ca <__ftoa_engine+0xf6>
    22ba:	d6 95       	lsr	r29
    22bc:	c7 95       	ror	r28
    22be:	57 95       	ror	r21
    22c0:	47 95       	ror	r20
    22c2:	f7 94       	ror	r15
    22c4:	e7 94       	ror	r14
    22c6:	1a 95       	dec	r17
    22c8:	c1 f7       	brne	.-16     	; 0x22ba <__ftoa_engine+0xe6>
    22ca:	eb ea       	ldi	r30, 0xAB	; 171
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	68 94       	set
    22d0:	15 90       	lpm	r1, Z+
    22d2:	15 91       	lpm	r17, Z+
    22d4:	35 91       	lpm	r19, Z+
    22d6:	65 91       	lpm	r22, Z+
    22d8:	95 91       	lpm	r25, Z+
    22da:	05 90       	lpm	r0, Z+
    22dc:	7f e2       	ldi	r23, 0x2F	; 47
    22de:	73 95       	inc	r23
    22e0:	e1 18       	sub	r14, r1
    22e2:	f1 0a       	sbc	r15, r17
    22e4:	43 0b       	sbc	r20, r19
    22e6:	56 0b       	sbc	r21, r22
    22e8:	c9 0b       	sbc	r28, r25
    22ea:	d0 09       	sbc	r29, r0
    22ec:	c0 f7       	brcc	.-16     	; 0x22de <__ftoa_engine+0x10a>
    22ee:	e1 0c       	add	r14, r1
    22f0:	f1 1e       	adc	r15, r17
    22f2:	43 1f       	adc	r20, r19
    22f4:	56 1f       	adc	r21, r22
    22f6:	c9 1f       	adc	r28, r25
    22f8:	d0 1d       	adc	r29, r0
    22fa:	7e f4       	brtc	.+30     	; 0x231a <__ftoa_engine+0x146>
    22fc:	70 33       	cpi	r23, 0x30	; 48
    22fe:	11 f4       	brne	.+4      	; 0x2304 <__ftoa_engine+0x130>
    2300:	8a 95       	dec	r24
    2302:	e6 cf       	rjmp	.-52     	; 0x22d0 <__ftoa_engine+0xfc>
    2304:	e8 94       	clt
    2306:	01 50       	subi	r16, 0x01	; 1
    2308:	30 f0       	brcs	.+12     	; 0x2316 <__ftoa_engine+0x142>
    230a:	08 0f       	add	r16, r24
    230c:	0a f4       	brpl	.+2      	; 0x2310 <__ftoa_engine+0x13c>
    230e:	00 27       	eor	r16, r16
    2310:	02 17       	cp	r16, r18
    2312:	08 f4       	brcc	.+2      	; 0x2316 <__ftoa_engine+0x142>
    2314:	20 2f       	mov	r18, r16
    2316:	23 95       	inc	r18
    2318:	02 2f       	mov	r16, r18
    231a:	7a 33       	cpi	r23, 0x3A	; 58
    231c:	28 f0       	brcs	.+10     	; 0x2328 <__ftoa_engine+0x154>
    231e:	79 e3       	ldi	r23, 0x39	; 57
    2320:	7d 93       	st	X+, r23
    2322:	2a 95       	dec	r18
    2324:	e9 f7       	brne	.-6      	; 0x2320 <__ftoa_engine+0x14c>
    2326:	10 c0       	rjmp	.+32     	; 0x2348 <__ftoa_engine+0x174>
    2328:	7d 93       	st	X+, r23
    232a:	2a 95       	dec	r18
    232c:	89 f6       	brne	.-94     	; 0x22d0 <__ftoa_engine+0xfc>
    232e:	06 94       	lsr	r0
    2330:	97 95       	ror	r25
    2332:	67 95       	ror	r22
    2334:	37 95       	ror	r19
    2336:	17 95       	ror	r17
    2338:	17 94       	ror	r1
    233a:	e1 18       	sub	r14, r1
    233c:	f1 0a       	sbc	r15, r17
    233e:	43 0b       	sbc	r20, r19
    2340:	56 0b       	sbc	r21, r22
    2342:	c9 0b       	sbc	r28, r25
    2344:	d0 09       	sbc	r29, r0
    2346:	98 f0       	brcs	.+38     	; 0x236e <__ftoa_engine+0x19a>
    2348:	23 95       	inc	r18
    234a:	7e 91       	ld	r23, -X
    234c:	73 95       	inc	r23
    234e:	7a 33       	cpi	r23, 0x3A	; 58
    2350:	08 f0       	brcs	.+2      	; 0x2354 <__ftoa_engine+0x180>
    2352:	70 e3       	ldi	r23, 0x30	; 48
    2354:	7c 93       	st	X, r23
    2356:	20 13       	cpse	r18, r16
    2358:	b8 f7       	brcc	.-18     	; 0x2348 <__ftoa_engine+0x174>
    235a:	7e 91       	ld	r23, -X
    235c:	70 61       	ori	r23, 0x10	; 16
    235e:	7d 93       	st	X+, r23
    2360:	30 f0       	brcs	.+12     	; 0x236e <__ftoa_engine+0x19a>
    2362:	83 95       	inc	r24
    2364:	71 e3       	ldi	r23, 0x31	; 49
    2366:	7d 93       	st	X+, r23
    2368:	70 e3       	ldi	r23, 0x30	; 48
    236a:	2a 95       	dec	r18
    236c:	e1 f7       	brne	.-8      	; 0x2366 <__ftoa_engine+0x192>
    236e:	11 24       	eor	r1, r1
    2370:	ef 90       	pop	r14
    2372:	ff 90       	pop	r15
    2374:	0f 91       	pop	r16
    2376:	1f 91       	pop	r17
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	99 27       	eor	r25, r25
    237e:	87 fd       	sbrc	r24, 7
    2380:	90 95       	com	r25
    2382:	08 95       	ret

00002384 <isspace>:
    2384:	91 11       	cpse	r25, r1
    2386:	3d c1       	rjmp	.+634    	; 0x2602 <__ctype_isfalse>
    2388:	80 32       	cpi	r24, 0x20	; 32
    238a:	19 f0       	breq	.+6      	; 0x2392 <isspace+0xe>
    238c:	89 50       	subi	r24, 0x09	; 9
    238e:	85 50       	subi	r24, 0x05	; 5
    2390:	d0 f7       	brcc	.-12     	; 0x2386 <isspace+0x2>
    2392:	08 95       	ret

00002394 <strncasecmp_P>:
    2394:	fb 01       	movw	r30, r22
    2396:	dc 01       	movw	r26, r24
    2398:	41 50       	subi	r20, 0x01	; 1
    239a:	50 40       	sbci	r21, 0x00	; 0
    239c:	88 f0       	brcs	.+34     	; 0x23c0 <strncasecmp_P+0x2c>
    239e:	8d 91       	ld	r24, X+
    23a0:	81 34       	cpi	r24, 0x41	; 65
    23a2:	1c f0       	brlt	.+6      	; 0x23aa <strncasecmp_P+0x16>
    23a4:	8b 35       	cpi	r24, 0x5B	; 91
    23a6:	0c f4       	brge	.+2      	; 0x23aa <strncasecmp_P+0x16>
    23a8:	80 5e       	subi	r24, 0xE0	; 224
    23aa:	65 91       	lpm	r22, Z+
    23ac:	61 34       	cpi	r22, 0x41	; 65
    23ae:	1c f0       	brlt	.+6      	; 0x23b6 <strncasecmp_P+0x22>
    23b0:	6b 35       	cpi	r22, 0x5B	; 91
    23b2:	0c f4       	brge	.+2      	; 0x23b6 <strncasecmp_P+0x22>
    23b4:	60 5e       	subi	r22, 0xE0	; 224
    23b6:	86 1b       	sub	r24, r22
    23b8:	61 11       	cpse	r22, r1
    23ba:	71 f3       	breq	.-36     	; 0x2398 <strncasecmp_P+0x4>
    23bc:	99 0b       	sbc	r25, r25
    23be:	08 95       	ret
    23c0:	88 1b       	sub	r24, r24
    23c2:	fc cf       	rjmp	.-8      	; 0x23bc <strncasecmp_P+0x28>

000023c4 <strnlen_P>:
    23c4:	fc 01       	movw	r30, r24
    23c6:	05 90       	lpm	r0, Z+
    23c8:	61 50       	subi	r22, 0x01	; 1
    23ca:	70 40       	sbci	r23, 0x00	; 0
    23cc:	01 10       	cpse	r0, r1
    23ce:	d8 f7       	brcc	.-10     	; 0x23c6 <strnlen_P+0x2>
    23d0:	80 95       	com	r24
    23d2:	90 95       	com	r25
    23d4:	8e 0f       	add	r24, r30
    23d6:	9f 1f       	adc	r25, r31
    23d8:	08 95       	ret

000023da <strchr>:
    23da:	fc 01       	movw	r30, r24
    23dc:	81 91       	ld	r24, Z+
    23de:	86 17       	cp	r24, r22
    23e0:	21 f0       	breq	.+8      	; 0x23ea <strchr+0x10>
    23e2:	88 23       	and	r24, r24
    23e4:	d9 f7       	brne	.-10     	; 0x23dc <strchr+0x2>
    23e6:	99 27       	eor	r25, r25
    23e8:	08 95       	ret
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	cf 01       	movw	r24, r30
    23ee:	08 95       	ret

000023f0 <strcmp>:
    23f0:	fb 01       	movw	r30, r22
    23f2:	dc 01       	movw	r26, r24
    23f4:	8d 91       	ld	r24, X+
    23f6:	01 90       	ld	r0, Z+
    23f8:	80 19       	sub	r24, r0
    23fa:	01 10       	cpse	r0, r1
    23fc:	d9 f3       	breq	.-10     	; 0x23f4 <strcmp+0x4>
    23fe:	99 0b       	sbc	r25, r25
    2400:	08 95       	ret

00002402 <strncmp>:
    2402:	fb 01       	movw	r30, r22
    2404:	dc 01       	movw	r26, r24
    2406:	41 50       	subi	r20, 0x01	; 1
    2408:	50 40       	sbci	r21, 0x00	; 0
    240a:	30 f0       	brcs	.+12     	; 0x2418 <strncmp+0x16>
    240c:	8d 91       	ld	r24, X+
    240e:	01 90       	ld	r0, Z+
    2410:	80 19       	sub	r24, r0
    2412:	19 f4       	brne	.+6      	; 0x241a <strncmp+0x18>
    2414:	00 20       	and	r0, r0
    2416:	b9 f7       	brne	.-18     	; 0x2406 <strncmp+0x4>
    2418:	88 1b       	sub	r24, r24
    241a:	99 0b       	sbc	r25, r25
    241c:	08 95       	ret

0000241e <strnlen>:
    241e:	fc 01       	movw	r30, r24
    2420:	61 50       	subi	r22, 0x01	; 1
    2422:	70 40       	sbci	r23, 0x00	; 0
    2424:	01 90       	ld	r0, Z+
    2426:	01 10       	cpse	r0, r1
    2428:	d8 f7       	brcc	.-10     	; 0x2420 <strnlen+0x2>
    242a:	80 95       	com	r24
    242c:	90 95       	com	r25
    242e:	8e 0f       	add	r24, r30
    2430:	9f 1f       	adc	r25, r31
    2432:	08 95       	ret

00002434 <fputc>:
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	8c 01       	movw	r16, r24
    243e:	eb 01       	movw	r28, r22
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	81 ff       	sbrs	r24, 1
    2444:	1b c0       	rjmp	.+54     	; 0x247c <fputc+0x48>
    2446:	82 ff       	sbrs	r24, 2
    2448:	0d c0       	rjmp	.+26     	; 0x2464 <fputc+0x30>
    244a:	2e 81       	ldd	r18, Y+6	; 0x06
    244c:	3f 81       	ldd	r19, Y+7	; 0x07
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	28 17       	cp	r18, r24
    2454:	39 07       	cpc	r19, r25
    2456:	64 f4       	brge	.+24     	; 0x2470 <fputc+0x3c>
    2458:	e8 81       	ld	r30, Y
    245a:	f9 81       	ldd	r31, Y+1	; 0x01
    245c:	01 93       	st	Z+, r16
    245e:	f9 83       	std	Y+1, r31	; 0x01
    2460:	e8 83       	st	Y, r30
    2462:	06 c0       	rjmp	.+12     	; 0x2470 <fputc+0x3c>
    2464:	e8 85       	ldd	r30, Y+8	; 0x08
    2466:	f9 85       	ldd	r31, Y+9	; 0x09
    2468:	80 2f       	mov	r24, r16
    246a:	09 95       	icall
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	31 f4       	brne	.+12     	; 0x247c <fputc+0x48>
    2470:	8e 81       	ldd	r24, Y+6	; 0x06
    2472:	9f 81       	ldd	r25, Y+7	; 0x07
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	9f 83       	std	Y+7, r25	; 0x07
    2478:	8e 83       	std	Y+6, r24	; 0x06
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <fputc+0x4c>
    247c:	0f ef       	ldi	r16, 0xFF	; 255
    247e:	1f ef       	ldi	r17, 0xFF	; 255
    2480:	c8 01       	movw	r24, r16
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <printf>:
    248c:	a0 e0       	ldi	r26, 0x00	; 0
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ec e4       	ldi	r30, 0x4C	; 76
    2492:	f2 e1       	ldi	r31, 0x12	; 18
    2494:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__prologue_saves__+0x20>
    2498:	fe 01       	movw	r30, r28
    249a:	35 96       	adiw	r30, 0x05	; 5
    249c:	61 91       	ld	r22, Z+
    249e:	71 91       	ld	r23, Z+
    24a0:	80 91 90 07 	lds	r24, 0x0790
    24a4:	90 91 91 07 	lds	r25, 0x0791
    24a8:	af 01       	movw	r20, r30
    24aa:	0e 94 91 0b 	call	0x1722	; 0x1722 <vfprintf>
    24ae:	20 96       	adiw	r28, 0x00	; 0
    24b0:	e2 e0       	ldi	r30, 0x02	; 2
    24b2:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__epilogue_restores__+0x20>

000024b6 <puts>:
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	8c 01       	movw	r16, r24
    24c0:	e0 91 90 07 	lds	r30, 0x0790
    24c4:	f0 91 91 07 	lds	r31, 0x0791
    24c8:	83 81       	ldd	r24, Z+3	; 0x03
    24ca:	81 ff       	sbrs	r24, 1
    24cc:	1a c0       	rjmp	.+52     	; 0x2502 <puts+0x4c>
    24ce:	c0 e0       	ldi	r28, 0x00	; 0
    24d0:	d0 e0       	ldi	r29, 0x00	; 0
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <puts+0x28>
    24d4:	09 95       	icall
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	11 f0       	breq	.+4      	; 0x24de <puts+0x28>
    24da:	cf ef       	ldi	r28, 0xFF	; 255
    24dc:	df ef       	ldi	r29, 0xFF	; 255
    24de:	f8 01       	movw	r30, r16
    24e0:	81 91       	ld	r24, Z+
    24e2:	8f 01       	movw	r16, r30
    24e4:	60 91 90 07 	lds	r22, 0x0790
    24e8:	70 91 91 07 	lds	r23, 0x0791
    24ec:	db 01       	movw	r26, r22
    24ee:	18 96       	adiw	r26, 0x08	; 8
    24f0:	ed 91       	ld	r30, X+
    24f2:	fc 91       	ld	r31, X
    24f4:	19 97       	sbiw	r26, 0x09	; 9
    24f6:	88 23       	and	r24, r24
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <puts+0x1e>
    24fa:	8a e0       	ldi	r24, 0x0A	; 10
    24fc:	09 95       	icall
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	11 f0       	breq	.+4      	; 0x2506 <puts+0x50>
    2502:	cf ef       	ldi	r28, 0xFF	; 255
    2504:	df ef       	ldi	r29, 0xFF	; 255
    2506:	ce 01       	movw	r24, r28
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	08 95       	ret

00002512 <__ultoa_invert>:
    2512:	fa 01       	movw	r30, r20
    2514:	aa 27       	eor	r26, r26
    2516:	28 30       	cpi	r18, 0x08	; 8
    2518:	51 f1       	breq	.+84     	; 0x256e <__ultoa_invert+0x5c>
    251a:	20 31       	cpi	r18, 0x10	; 16
    251c:	81 f1       	breq	.+96     	; 0x257e <__ultoa_invert+0x6c>
    251e:	e8 94       	clt
    2520:	6f 93       	push	r22
    2522:	6e 7f       	andi	r22, 0xFE	; 254
    2524:	6e 5f       	subi	r22, 0xFE	; 254
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	8f 4f       	sbci	r24, 0xFF	; 255
    252a:	9f 4f       	sbci	r25, 0xFF	; 255
    252c:	af 4f       	sbci	r26, 0xFF	; 255
    252e:	b1 e0       	ldi	r27, 0x01	; 1
    2530:	3e d0       	rcall	.+124    	; 0x25ae <__ultoa_invert+0x9c>
    2532:	b4 e0       	ldi	r27, 0x04	; 4
    2534:	3c d0       	rcall	.+120    	; 0x25ae <__ultoa_invert+0x9c>
    2536:	67 0f       	add	r22, r23
    2538:	78 1f       	adc	r23, r24
    253a:	89 1f       	adc	r24, r25
    253c:	9a 1f       	adc	r25, r26
    253e:	a1 1d       	adc	r26, r1
    2540:	68 0f       	add	r22, r24
    2542:	79 1f       	adc	r23, r25
    2544:	8a 1f       	adc	r24, r26
    2546:	91 1d       	adc	r25, r1
    2548:	a1 1d       	adc	r26, r1
    254a:	6a 0f       	add	r22, r26
    254c:	71 1d       	adc	r23, r1
    254e:	81 1d       	adc	r24, r1
    2550:	91 1d       	adc	r25, r1
    2552:	a1 1d       	adc	r26, r1
    2554:	20 d0       	rcall	.+64     	; 0x2596 <__ultoa_invert+0x84>
    2556:	09 f4       	brne	.+2      	; 0x255a <__ultoa_invert+0x48>
    2558:	68 94       	set
    255a:	3f 91       	pop	r19
    255c:	2a e0       	ldi	r18, 0x0A	; 10
    255e:	26 9f       	mul	r18, r22
    2560:	11 24       	eor	r1, r1
    2562:	30 19       	sub	r19, r0
    2564:	30 5d       	subi	r19, 0xD0	; 208
    2566:	31 93       	st	Z+, r19
    2568:	de f6       	brtc	.-74     	; 0x2520 <__ultoa_invert+0xe>
    256a:	cf 01       	movw	r24, r30
    256c:	08 95       	ret
    256e:	46 2f       	mov	r20, r22
    2570:	47 70       	andi	r20, 0x07	; 7
    2572:	40 5d       	subi	r20, 0xD0	; 208
    2574:	41 93       	st	Z+, r20
    2576:	b3 e0       	ldi	r27, 0x03	; 3
    2578:	0f d0       	rcall	.+30     	; 0x2598 <__ultoa_invert+0x86>
    257a:	c9 f7       	brne	.-14     	; 0x256e <__ultoa_invert+0x5c>
    257c:	f6 cf       	rjmp	.-20     	; 0x256a <__ultoa_invert+0x58>
    257e:	46 2f       	mov	r20, r22
    2580:	4f 70       	andi	r20, 0x0F	; 15
    2582:	40 5d       	subi	r20, 0xD0	; 208
    2584:	4a 33       	cpi	r20, 0x3A	; 58
    2586:	18 f0       	brcs	.+6      	; 0x258e <__ultoa_invert+0x7c>
    2588:	49 5d       	subi	r20, 0xD9	; 217
    258a:	31 fd       	sbrc	r19, 1
    258c:	40 52       	subi	r20, 0x20	; 32
    258e:	41 93       	st	Z+, r20
    2590:	02 d0       	rcall	.+4      	; 0x2596 <__ultoa_invert+0x84>
    2592:	a9 f7       	brne	.-22     	; 0x257e <__ultoa_invert+0x6c>
    2594:	ea cf       	rjmp	.-44     	; 0x256a <__ultoa_invert+0x58>
    2596:	b4 e0       	ldi	r27, 0x04	; 4
    2598:	a6 95       	lsr	r26
    259a:	97 95       	ror	r25
    259c:	87 95       	ror	r24
    259e:	77 95       	ror	r23
    25a0:	67 95       	ror	r22
    25a2:	ba 95       	dec	r27
    25a4:	c9 f7       	brne	.-14     	; 0x2598 <__ultoa_invert+0x86>
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	61 05       	cpc	r22, r1
    25aa:	71 05       	cpc	r23, r1
    25ac:	08 95       	ret
    25ae:	9b 01       	movw	r18, r22
    25b0:	ac 01       	movw	r20, r24
    25b2:	0a 2e       	mov	r0, r26
    25b4:	06 94       	lsr	r0
    25b6:	57 95       	ror	r21
    25b8:	47 95       	ror	r20
    25ba:	37 95       	ror	r19
    25bc:	27 95       	ror	r18
    25be:	ba 95       	dec	r27
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <__ultoa_invert+0xa2>
    25c2:	62 0f       	add	r22, r18
    25c4:	73 1f       	adc	r23, r19
    25c6:	84 1f       	adc	r24, r20
    25c8:	95 1f       	adc	r25, r21
    25ca:	a0 1d       	adc	r26, r0
    25cc:	08 95       	ret

000025ce <__eerd_byte_m328p>:
    25ce:	f9 99       	sbic	0x1f, 1	; 31
    25d0:	fe cf       	rjmp	.-4      	; 0x25ce <__eerd_byte_m328p>
    25d2:	92 bd       	out	0x22, r25	; 34
    25d4:	81 bd       	out	0x21, r24	; 33
    25d6:	f8 9a       	sbi	0x1f, 0	; 31
    25d8:	99 27       	eor	r25, r25
    25da:	80 b5       	in	r24, 0x20	; 32
    25dc:	08 95       	ret

000025de <__eeupd_byte_m328p>:
    25de:	26 2f       	mov	r18, r22

000025e0 <__eeupd_r18_m328p>:
    25e0:	f9 99       	sbic	0x1f, 1	; 31
    25e2:	fe cf       	rjmp	.-4      	; 0x25e0 <__eeupd_r18_m328p>
    25e4:	92 bd       	out	0x22, r25	; 34
    25e6:	81 bd       	out	0x21, r24	; 33
    25e8:	f8 9a       	sbi	0x1f, 0	; 31
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	00 b4       	in	r0, 0x20	; 32
    25ee:	02 16       	cp	r0, r18
    25f0:	39 f0       	breq	.+14     	; 0x2600 <__eeupd_r18_m328p+0x20>
    25f2:	1f ba       	out	0x1f, r1	; 31
    25f4:	20 bd       	out	0x20, r18	; 32
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	fa 9a       	sbi	0x1f, 2	; 31
    25fc:	f9 9a       	sbi	0x1f, 1	; 31
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	08 95       	ret

00002602 <__ctype_isfalse>:
    2602:	99 27       	eor	r25, r25
    2604:	88 27       	eor	r24, r24

00002606 <__ctype_istrue>:
    2606:	08 95       	ret

00002608 <_exit>:
    2608:	f8 94       	cli

0000260a <__stop_program>:
    260a:	ff cf       	rjmp	.-2      	; 0x260a <__stop_program>
