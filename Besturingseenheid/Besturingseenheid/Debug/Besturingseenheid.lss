
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000504  00800100  000020e2  00002176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  00800604  00800604  0000267a  2**0
                  ALLOC
  3 .stab         00003000  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a27  00000000  00000000  0000567c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  000060a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024de  00000000  00000000  000062a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c09  00000000  00000000  00008786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001400  00000000  00000000  0000938f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  0000a790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000785  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000185a  00000000  00000000  0000b5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000ce47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	16 e0       	ldi	r17, 0x06	; 6
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 ee       	ldi	r30, 0xE2	; 226
     17e:	f0 e2       	ldi	r31, 0x20	; 32
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a4 30       	cpi	r26, 0x04	; 4
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	17 e0       	ldi	r17, 0x07	; 7
     18e:	a4 e0       	ldi	r26, 0x04	; 4
     190:	b6 e0       	ldi	r27, 0x06	; 6
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 33       	cpi	r26, 0x3C	; 60
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
     1a0:	0c 94 6f 10 	jmp	0x20de	; 0x20de <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	80 93 7e 00 	sts	0x007E, r24
	
}
     1b4:	08 95       	ret

000001b6 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1b6:	ea e7       	ldi	r30, 0x7A	; 122
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 64       	ori	r24, 0x40	; 64
     1be:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1c0:	80 81       	ld	r24, Z
     1c2:	86 fd       	sbrc	r24, 6
     1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     1c6:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     1ca:	08 95       	ret

000001cc <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     1cc:	85 e4       	ldi	r24, 0x45	; 69
     1ce:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1dc:	80 81       	ld	r24, Z
     1de:	86 fd       	sbrc	r24, 6
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <get_temp_adc+0x10>
	return ADC;
     1e2:	80 91 78 00 	lds	r24, 0x0078
     1e6:	90 91 79 00 	lds	r25, 0x0079
}
     1ea:	08 95       	ret

000001ec <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     1ec:	82 e6       	ldi	r24, 0x62	; 98
     1ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
     206:	08 95       	ret

00000208 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     208:	87 ef       	ldi	r24, 0xF7	; 247
     20a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	84 b9       	out	0x04, r24	; 4
}
     210:	08 95       	ret

00000212 <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     21c:	10 92 80 00 	sts	0x0080, r1
}
     220:	08 95       	ret

00000222 <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     222:	80 91 04 06 	lds	r24, 0x0604
     226:	90 91 05 06 	lds	r25, 0x0605
}	
     22a:	08 95       	ret

0000022c <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     22c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9c e9       	ldi	r25, 0x9C	; 156
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <getDistance+0x6>
     236:	00 c0       	rjmp	.+0      	; 0x238 <getDistance+0xc>
     238:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     23a:	28 98       	cbi	0x05, 0	; 5
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	91 ee       	ldi	r25, 0xE1	; 225
     240:	a4 e0       	ldi	r26, 0x04	; 4
     242:	81 50       	subi	r24, 0x01	; 1
     244:	90 40       	sbci	r25, 0x00	; 0
     246:	a0 40       	sbci	r26, 0x00	; 0
     248:	e1 f7       	brne	.-8      	; 0x242 <getDistance+0x16>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <getDistance+0x20>
     24c:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     24e:	60 91 12 06 	lds	r22, 0x0612
     252:	70 91 13 06 	lds	r23, 0x0613
     256:	80 91 14 06 	lds	r24, 0x0614
     25a:	90 91 15 06 	lds	r25, 0x0615
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	5f e3       	ldi	r21, 0x3F	; 63
     266:	0e 94 26 0a 	call	0x144c	; 0x144c <__mulsf3>
     26a:	29 e9       	ldi	r18, 0x99	; 153
     26c:	3b eb       	ldi	r19, 0xBB	; 187
     26e:	46 e1       	ldi	r20, 0x16	; 22
     270:	5b e3       	ldi	r21, 0x3B	; 59
     272:	0e 94 26 0a 	call	0x144c	; 0x144c <__mulsf3>
     276:	26 2f       	mov	r18, r22
     278:	37 2f       	mov	r19, r23
     27a:	f8 2f       	mov	r31, r24
     27c:	e9 2f       	mov	r30, r25
     27e:	46 2f       	mov	r20, r22
     280:	57 2f       	mov	r21, r23
     282:	68 2f       	mov	r22, r24
     284:	79 2f       	mov	r23, r25
     286:	40 93 0c 06 	sts	0x060C, r20
     28a:	50 93 0d 06 	sts	0x060D, r21
     28e:	60 93 0e 06 	sts	0x060E, r22
     292:	70 93 0f 06 	sts	0x060F, r23
	return afstand;
}
     296:	82 2f       	mov	r24, r18
     298:	93 2f       	mov	r25, r19
     29a:	af 2f       	mov	r26, r31
     29c:	be 2f       	mov	r27, r30
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	08 95       	ret

000002a4 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <get_temp_adc>
     2a8:	68 2f       	mov	r22, r24
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__floatsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 ea       	ldi	r20, 0xA0	; 160
     2ba:	5b e3       	ldi	r21, 0x3B	; 59
     2bc:	0e 94 26 0a 	call	0x144c	; 0x144c <__mulsf3>
     2c0:	26 2f       	mov	r18, r22
     2c2:	37 2f       	mov	r19, r23
     2c4:	f8 2f       	mov	r31, r24
     2c6:	e9 2f       	mov	r30, r25
     2c8:	46 2f       	mov	r20, r22
     2ca:	57 2f       	mov	r21, r23
     2cc:	68 2f       	mov	r22, r24
     2ce:	79 2f       	mov	r23, r25
     2d0:	40 93 1a 06 	sts	0x061A, r20
     2d4:	50 93 1b 06 	sts	0x061B, r21
     2d8:	60 93 1c 06 	sts	0x061C, r22
     2dc:	70 93 1d 06 	sts	0x061D, r23
	ADCRes = (Volt - 0.5) * 100;
     2e0:	82 2f       	mov	r24, r18
     2e2:	93 2f       	mov	r25, r19
     2e4:	af 2f       	mov	r26, r31
     2e6:	be 2f       	mov	r27, r30
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	5f e3       	ldi	r21, 0x3F	; 63
     2f4:	0e 94 07 09 	call	0x120e	; 0x120e <__subsf3>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	48 ec       	ldi	r20, 0xC8	; 200
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	0e 94 26 0a 	call	0x144c	; 0x144c <__mulsf3>
     304:	26 2f       	mov	r18, r22
     306:	37 2f       	mov	r19, r23
     308:	f8 2f       	mov	r31, r24
     30a:	e9 2f       	mov	r30, r25
     30c:	46 2f       	mov	r20, r22
     30e:	57 2f       	mov	r21, r23
     310:	68 2f       	mov	r22, r24
     312:	79 2f       	mov	r23, r25
     314:	40 93 3e 06 	sts	0x063E, r20
     318:	50 93 3f 06 	sts	0x063F, r21
     31c:	60 93 40 06 	sts	0x0640, r22
     320:	70 93 41 06 	sts	0x0641, r23
	return ADCRes;
}
     324:	82 2f       	mov	r24, r18
     326:	93 2f       	mov	r25, r19
     328:	af 2f       	mov	r26, r31
     32a:	be 2f       	mov	r27, r30
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	08 95       	ret

00000332 <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <get_light_adc>
	return temp;
}
     336:	08 95       	ret

00000338 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     33c:	9c e9       	ldi	r25, 0x9C	; 156
     33e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     340:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     344:	85 b5       	in	r24, 0x25	; 37
     346:	85 60       	ori	r24, 0x05	; 5
     348:	85 bd       	out	0x25, r24	; 37
}
     34a:	08 95       	ret

0000034c <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     34c:	0e 94 ff 07 	call	0xffe	; 0xffe <init_scherm_ports>
	init_timer();
     350:	0e 94 9c 01 	call	0x338	; 0x338 <init_timer>
	ser_init();
     354:	0e 94 73 07 	call	0xee6	; 0xee6 <ser_init>
	ADC_init();
     358:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	
	init_ports();
     35c:	0e 94 04 01 	call	0x208	; 0x208 <init_ports>
	init_ext_int();
     360:	0e 94 09 01 	call	0x212	; 0x212 <init_ext_int>
	sei(); // set external interrupt
     364:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     366:	0e 94 62 05 	call	0xac4	; 0xac4 <protocolCom>
     36a:	fd cf       	rjmp	.-6      	; 0x366 <main+0x1a>

0000036c <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	2f 93       	push	r18
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
	extraTime1++;
     37c:	80 91 06 06 	lds	r24, 0x0606
     380:	90 91 07 06 	lds	r25, 0x0607
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	90 93 07 06 	sts	0x0607, r25
     38a:	80 93 06 06 	sts	0x0606, r24
	if(extraTime1>100){
     38e:	80 91 06 06 	lds	r24, 0x0606
     392:	90 91 07 06 	lds	r25, 0x0607
     396:	85 36       	cpi	r24, 0x65	; 101
     398:	91 05       	cpc	r25, r1
     39a:	6c f0       	brlt	.+26     	; 0x3b6 <__vector_14+0x4a>
		timerVariable++;
     39c:	80 91 04 06 	lds	r24, 0x0604
     3a0:	90 91 05 06 	lds	r25, 0x0605
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 05 06 	sts	0x0605, r25
     3aa:	80 93 04 06 	sts	0x0604, r24
		extraTime1 = 0;
     3ae:	10 92 07 06 	sts	0x0607, r1
     3b2:	10 92 06 06 	sts	0x0606, r1
	}
	extraTime++;
     3b6:	80 91 08 06 	lds	r24, 0x0608
     3ba:	90 91 09 06 	lds	r25, 0x0609
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	90 93 09 06 	sts	0x0609, r25
     3c4:	80 93 08 06 	sts	0x0608, r24
	if(extraTime>1000){
     3c8:	80 91 08 06 	lds	r24, 0x0608
     3cc:	90 91 09 06 	lds	r25, 0x0609
     3d0:	23 e0       	ldi	r18, 0x03	; 3
     3d2:	89 3e       	cpi	r24, 0xE9	; 233
     3d4:	92 07       	cpc	r25, r18
     3d6:	24 f0       	brlt	.+8      	; 0x3e0 <__vector_14+0x74>
		}	
	
		index++;
		
		// Resets de timer en de Totale timer ticks*/
		extraTime = 0;
     3d8:	10 92 09 06 	sts	0x0609, r1
     3dc:	10 92 08 06 	sts	0x0608, r1
	}
}
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_2>:

ISR(INT1_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ef 93       	push	r30
     414:	ff 93       	push	r31
	if(i == 1)
     416:	80 91 10 06 	lds	r24, 0x0610
     41a:	90 91 11 06 	lds	r25, 0x0611
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	91 05       	cpc	r25, r1
     422:	d1 f4       	brne	.+52     	; 0x458 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     424:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     428:	c4 e8       	ldi	r28, 0x84	; 132
     42a:	d0 e0       	ldi	r29, 0x00	; 0
     42c:	68 81       	ld	r22, Y
     42e:	79 81       	ldd	r23, Y+1	; 0x01
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__floatunsisf>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	80 93 12 06 	sts	0x0612, r24
     440:	90 93 13 06 	sts	0x0613, r25
     444:	a0 93 14 06 	sts	0x0614, r26
     448:	b0 93 15 06 	sts	0x0615, r27
		TCNT1 = 0; //Reset duration
     44c:	19 82       	std	Y+1, r1	; 0x01
     44e:	18 82       	st	Y, r1
		i = 0; //Reset counter
     450:	10 92 11 06 	sts	0x0611, r1
     454:	10 92 10 06 	sts	0x0610, r1
	}

	if(i==0)
     458:	80 91 10 06 	lds	r24, 0x0610
     45c:	90 91 11 06 	lds	r25, 0x0611
     460:	00 97       	sbiw	r24, 0x00	; 0
     462:	59 f4       	brne	.+22     	; 0x47a <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     464:	e1 e8       	ldi	r30, 0x81	; 129
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	81 60       	ori	r24, 0x01	; 1
     46c:	80 83       	st	Z, r24
		i = 1;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	90 93 11 06 	sts	0x0611, r25
     476:	80 93 10 06 	sts	0x0610, r24
	}
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	bf 91       	pop	r27
     484:	af 91       	pop	r26
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	7f 91       	pop	r23
     48c:	6f 91       	pop	r22
     48e:	5f 91       	pop	r21
     490:	4f 91       	pop	r20
     492:	3f 91       	pop	r19
     494:	2f 91       	pop	r18
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <set_maxUnroll>:
		}
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     4aa:	c0 91 75 05 	lds	r28, 0x0575
     4ae:	d0 91 76 05 	lds	r29, 0x0576
     4b2:	80 91 81 05 	lds	r24, 0x0581
     4b6:	90 91 82 05 	lds	r25, 0x0582
     4ba:	99 23       	and	r25, r25
     4bc:	cc f0       	brlt	.+50     	; 0x4f0 <set_maxUnroll+0x50>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     4c2:	f8 01       	movw	r30, r16
     4c4:	e8 0f       	add	r30, r24
     4c6:	f9 1f       	adc	r31, r25
     4c8:	ce 01       	movw	r24, r28
     4ca:	60 81       	ld	r22, Z
     4cc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     4d0:	21 96       	adiw	r28, 0x01	; 1
     4d2:	80 91 75 05 	lds	r24, 0x0575
     4d6:	90 91 76 05 	lds	r25, 0x0576
     4da:	9e 01       	movw	r18, r28
     4dc:	28 1b       	sub	r18, r24
     4de:	39 0b       	sbc	r19, r25
     4e0:	c9 01       	movw	r24, r18
     4e2:	20 91 81 05 	lds	r18, 0x0581
     4e6:	30 91 82 05 	lds	r19, 0x0582
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	4c f7       	brge	.-46     	; 0x4c2 <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <set_minUnroll>:
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     504:	c0 91 77 05 	lds	r28, 0x0577
     508:	d0 91 78 05 	lds	r29, 0x0578
     50c:	80 91 83 05 	lds	r24, 0x0583
     510:	90 91 84 05 	lds	r25, 0x0584
     514:	99 23       	and	r25, r25
     516:	cc f0       	brlt	.+50     	; 0x54a <set_minUnroll+0x50>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     51c:	f8 01       	movw	r30, r16
     51e:	e8 0f       	add	r30, r24
     520:	f9 1f       	adc	r31, r25
     522:	ce 01       	movw	r24, r28
     524:	60 81       	ld	r22, Z
     526:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     52a:	21 96       	adiw	r28, 0x01	; 1
     52c:	80 91 77 05 	lds	r24, 0x0577
     530:	90 91 78 05 	lds	r25, 0x0578
     534:	9e 01       	movw	r18, r28
     536:	28 1b       	sub	r18, r24
     538:	39 0b       	sbc	r19, r25
     53a:	c9 01       	movw	r24, r18
     53c:	20 91 83 05 	lds	r18, 0x0583
     540:	30 91 84 05 	lds	r19, 0x0584
     544:	28 17       	cp	r18, r24
     546:	39 07       	cpc	r19, r25
     548:	4c f7       	brge	.-46     	; 0x51c <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <set_grensLicht>:
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     55e:	c0 91 79 05 	lds	r28, 0x0579
     562:	d0 91 7a 05 	lds	r29, 0x057A
     566:	80 91 85 05 	lds	r24, 0x0585
     56a:	90 91 86 05 	lds	r25, 0x0586
     56e:	99 23       	and	r25, r25
     570:	cc f0       	brlt	.+50     	; 0x5a4 <set_grensLicht+0x50>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     576:	f8 01       	movw	r30, r16
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	ce 01       	movw	r24, r28
     57e:	60 81       	ld	r22, Z
     580:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	80 91 79 05 	lds	r24, 0x0579
     58a:	90 91 7a 05 	lds	r25, 0x057A
     58e:	9e 01       	movw	r18, r28
     590:	28 1b       	sub	r18, r24
     592:	39 0b       	sbc	r19, r25
     594:	c9 01       	movw	r24, r18
     596:	20 91 85 05 	lds	r18, 0x0585
     59a:	30 91 86 05 	lds	r19, 0x0586
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	4c f7       	brge	.-46     	; 0x576 <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <set_grensTemp>:
		}
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5b8:	c0 91 7b 05 	lds	r28, 0x057B
     5bc:	d0 91 7c 05 	lds	r29, 0x057C
     5c0:	80 91 87 05 	lds	r24, 0x0587
     5c4:	90 91 88 05 	lds	r25, 0x0588
     5c8:	99 23       	and	r25, r25
     5ca:	cc f0       	brlt	.+50     	; 0x5fe <set_grensTemp+0x50>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     5d0:	f8 01       	movw	r30, r16
     5d2:	e8 0f       	add	r30, r24
     5d4:	f9 1f       	adc	r31, r25
     5d6:	ce 01       	movw	r24, r28
     5d8:	60 81       	ld	r22, Z
     5da:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	80 91 7b 05 	lds	r24, 0x057B
     5e4:	90 91 7c 05 	lds	r25, 0x057C
     5e8:	9e 01       	movw	r18, r28
     5ea:	28 1b       	sub	r18, r24
     5ec:	39 0b       	sbc	r19, r25
     5ee:	c9 01       	movw	r24, r18
     5f0:	20 91 87 05 	lds	r18, 0x0587
     5f4:	30 91 88 05 	lds	r19, 0x0588
     5f8:	28 17       	cp	r18, r24
     5fa:	39 07       	cpc	r19, r25
     5fc:	4c f7       	brge	.-46     	; 0x5d0 <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <set_Versie>:
		}
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     612:	c0 91 7d 05 	lds	r28, 0x057D
     616:	d0 91 7e 05 	lds	r29, 0x057E
     61a:	80 91 89 05 	lds	r24, 0x0589
     61e:	90 91 8a 05 	lds	r25, 0x058A
     622:	99 23       	and	r25, r25
     624:	cc f0       	brlt	.+50     	; 0x658 <set_Versie+0x50>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     62a:	f8 01       	movw	r30, r16
     62c:	e8 0f       	add	r30, r24
     62e:	f9 1f       	adc	r31, r25
     630:	ce 01       	movw	r24, r28
     632:	60 81       	ld	r22, Z
     634:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     638:	21 96       	adiw	r28, 0x01	; 1
     63a:	80 91 7d 05 	lds	r24, 0x057D
     63e:	90 91 7e 05 	lds	r25, 0x057E
     642:	9e 01       	movw	r18, r28
     644:	28 1b       	sub	r18, r24
     646:	39 0b       	sbc	r19, r25
     648:	c9 01       	movw	r24, r18
     64a:	20 91 89 05 	lds	r18, 0x0589
     64e:	30 91 8a 05 	lds	r19, 0x058A
     652:	28 17       	cp	r18, r24
     654:	39 07       	cpc	r19, r25
     656:	4c f7       	brge	.-46     	; 0x62a <set_Versie+0x22>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <set_Locatie>:
		}
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     66c:	c0 91 7f 05 	lds	r28, 0x057F
     670:	d0 91 80 05 	lds	r29, 0x0580
     674:	80 91 8b 05 	lds	r24, 0x058B
     678:	90 91 8c 05 	lds	r25, 0x058C
     67c:	99 23       	and	r25, r25
     67e:	cc f0       	brlt	.+50     	; 0x6b2 <set_Locatie+0x50>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     684:	f8 01       	movw	r30, r16
     686:	e8 0f       	add	r30, r24
     688:	f9 1f       	adc	r31, r25
     68a:	ce 01       	movw	r24, r28
     68c:	60 81       	ld	r22, Z
     68e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	80 91 7f 05 	lds	r24, 0x057F
     698:	90 91 80 05 	lds	r25, 0x0580
     69c:	9e 01       	movw	r18, r28
     69e:	28 1b       	sub	r18, r24
     6a0:	39 0b       	sbc	r19, r25
     6a2:	c9 01       	movw	r24, r18
     6a4:	20 91 8b 05 	lds	r18, 0x058B
     6a8:	30 91 8c 05 	lds	r19, 0x058C
     6ac:	28 17       	cp	r18, r24
     6ae:	39 07       	cpc	r19, r25
     6b0:	4c f7       	brge	.-46     	; 0x684 <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <set_Naam>:
			char * p1 = strstr (in_buf, "(");
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
	//Zetten van naam.
	void set_Naam(char* n){
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     6c4:	c0 91 16 06 	lds	r28, 0x0616
     6c8:	d0 91 17 06 	lds	r29, 0x0617
     6cc:	20 91 8d 05 	lds	r18, 0x058D
     6d0:	30 91 8e 05 	lds	r19, 0x058E
     6d4:	2c 17       	cp	r18, r28
     6d6:	3d 07       	cpc	r19, r29
     6d8:	8c f0       	brlt	.+34     	; 0x6fc <set_Naam+0x40>
			char * p1 = strstr (in_buf, "(");
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
	//Zetten van naam.
	void set_Naam(char* n){
     6da:	8c 01       	movw	r16, r24
     6dc:	0c 0f       	add	r16, r28
     6de:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     6e0:	f8 01       	movw	r30, r16
     6e2:	61 91       	ld	r22, Z+
     6e4:	8f 01       	movw	r16, r30
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__eeupd_byte_m328p>
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     6ec:	21 96       	adiw	r28, 0x01	; 1
     6ee:	80 91 8d 05 	lds	r24, 0x058D
     6f2:	90 91 8e 05 	lds	r25, 0x058E
     6f6:	8c 17       	cp	r24, r28
     6f8:	9d 07       	cpc	r25, r29
     6fa:	94 f7       	brge	.-28     	; 0x6e0 <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	08 95       	ret

00000706 <set_substring>:
			
			
	//________________________________________________________________________________________//
	
	 void set_substring(){
			char * p1 = strstr (in_buf, "(");
     706:	8e ea       	ldi	r24, 0xAE	; 174
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	68 e2       	ldi	r22, 0x28	; 40
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strchr>
			p1[strlen(p1) -1] = '\0';
     712:	e8 2f       	mov	r30, r24
     714:	f9 2f       	mov	r31, r25
     716:	df 01       	movw	r26, r30
     718:	0d 90       	ld	r0, X+
     71a:	00 20       	and	r0, r0
     71c:	e9 f7       	brne	.-6      	; 0x718 <set_substring+0x12>
     71e:	11 97       	sbiw	r26, 0x01	; 1
     720:	ae 1b       	sub	r26, r30
     722:	bf 0b       	sbc	r27, r31
     724:	a8 0f       	add	r26, r24
     726:	b9 1f       	adc	r27, r25
     728:	11 97       	sbiw	r26, 0x01	; 1
     72a:	1c 92       	st	X, r1
			substring = p1 +1;
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	90 93 ad 06 	sts	0x06AD, r25
     732:	80 93 ac 06 	sts	0x06AC, r24
		}
     736:	08 95       	ret

00000738 <get_grens_light>:
char minUnrollRes[4];

char maxUnroll[4];
char maxUnrollRes[4];

char get_grens_light(){
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
	for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     744:	e0 90 79 05 	lds	r14, 0x0579
     748:	f0 90 7a 05 	lds	r15, 0x057A
     74c:	80 91 85 05 	lds	r24, 0x0585
     750:	90 91 86 05 	lds	r25, 0x0586
     754:	99 23       	and	r25, r25
     756:	bc f0       	brlt	.+46     	; 0x786 <get_grens_light+0x4e>
     758:	01 e0       	ldi	r16, 0x01	; 1
     75a:	10 e0       	ldi	r17, 0x00	; 0
     75c:	c0 e0       	ldi	r28, 0x00	; 0
     75e:	d0 e0       	ldi	r29, 0x00	; 0
		grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     760:	c7 01       	movw	r24, r14
     762:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     766:	cc 52       	subi	r28, 0x2C	; 44
     768:	d9 4f       	sbci	r29, 0xF9	; 249
     76a:	88 83       	st	Y, r24

char maxUnroll[4];
char maxUnrollRes[4];

char get_grens_light(){
	for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     76c:	08 94       	sec
     76e:	e1 1c       	adc	r14, r1
     770:	f1 1c       	adc	r15, r1
     772:	e8 01       	movw	r28, r16
     774:	0f 5f       	subi	r16, 0xFF	; 255
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	80 91 85 05 	lds	r24, 0x0585
     77c:	90 91 86 05 	lds	r25, 0x0586
     780:	8c 17       	cp	r24, r28
     782:	9d 07       	cpc	r25, r29
     784:	6c f7       	brge	.-38     	; 0x760 <get_grens_light+0x28>
		grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
	}
	ser_writeln(grens_lichtintRes);
     786:	84 ed       	ldi	r24, 0xD4	; 212
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
	return grens_lichtint;
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	97 e0       	ldi	r25, 0x07	; 7
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <get_grens_temp>:
}	*/

double get_grens_temp(){

	return grens_temp;
}
     7a0:	50 91 71 05 	lds	r21, 0x0571
     7a4:	40 91 72 05 	lds	r20, 0x0572
     7a8:	30 91 73 05 	lds	r19, 0x0573
     7ac:	20 91 74 05 	lds	r18, 0x0574
     7b0:	85 2f       	mov	r24, r21
     7b2:	94 2f       	mov	r25, r20
     7b4:	a3 2f       	mov	r26, r19
     7b6:	b2 2f       	mov	r27, r18
     7b8:	bc 01       	movw	r22, r24
     7ba:	cd 01       	movw	r24, r26
     7bc:	08 95       	ret

000007be <get_max_unroll>:

double get_max_unroll(){
	return max_unroll;
}
     7be:	50 91 6c 05 	lds	r21, 0x056C
     7c2:	40 91 6d 05 	lds	r20, 0x056D
     7c6:	30 91 6e 05 	lds	r19, 0x056E
     7ca:	20 91 6f 05 	lds	r18, 0x056F
     7ce:	85 2f       	mov	r24, r21
     7d0:	94 2f       	mov	r25, r20
     7d2:	a3 2f       	mov	r26, r19
     7d4:	b2 2f       	mov	r27, r18
     7d6:	bc 01       	movw	r22, r24
     7d8:	cd 01       	movw	r24, r26
     7da:	08 95       	ret

000007dc <get_min_unroll>:
double get_min_unroll(){
	return min_unroll;
}
     7dc:	50 91 68 05 	lds	r21, 0x0568
     7e0:	40 91 69 05 	lds	r20, 0x0569
     7e4:	30 91 6a 05 	lds	r19, 0x056A
     7e8:	20 91 6b 05 	lds	r18, 0x056B
     7ec:	85 2f       	mov	r24, r21
     7ee:	94 2f       	mov	r25, r20
     7f0:	a3 2f       	mov	r26, r19
     7f2:	b2 2f       	mov	r27, r18
     7f4:	bc 01       	movw	r22, r24
     7f6:	cd 01       	movw	r24, r26
     7f8:	08 95       	ret

000007fa <get_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     802:	c0 91 16 06 	lds	r28, 0x0616
     806:	d0 91 17 06 	lds	r29, 0x0617
     80a:	80 91 8d 05 	lds	r24, 0x058D
     80e:	90 91 8e 05 	lds	r25, 0x058E
     812:	8c 17       	cp	r24, r28
     814:	9d 07       	cpc	r25, r29
     816:	8c f0       	brlt	.+34     	; 0x83a <get_Naam+0x40>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     818:	8e 01       	movw	r16, r28
     81a:	00 58       	subi	r16, 0x80	; 128
     81c:	19 4f       	sbci	r17, 0xF9	; 249
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     824:	f8 01       	movw	r30, r16
     826:	81 93       	st	Z+, r24
     828:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	char* get_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     82a:	21 96       	adiw	r28, 0x01	; 1
     82c:	80 91 8d 05 	lds	r24, 0x058D
     830:	90 91 8e 05 	lds	r25, 0x058E
     834:	8c 17       	cp	r24, r28
     836:	9d 07       	cpc	r25, r29
     838:	94 f7       	brge	.-28     	; 0x81e <get_Naam+0x24>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		return naamRes;
	}
     83a:	80 e8       	ldi	r24, 0x80	; 128
     83c:	96 e0       	ldi	r25, 0x06	; 6
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <get_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     858:	e0 90 7f 05 	lds	r14, 0x057F
     85c:	f0 90 80 05 	lds	r15, 0x0580
     860:	80 91 8b 05 	lds	r24, 0x058B
     864:	90 91 8c 05 	lds	r25, 0x058C
     868:	99 23       	and	r25, r25
     86a:	ec f0       	brlt	.+58     	; 0x8a6 <get_Locatie+0x5e>
     86c:	01 e0       	ldi	r16, 0x01	; 1
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	c0 e0       	ldi	r28, 0x00	; 0
     872:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     874:	0f 2e       	mov	r0, r31
     876:	f1 e5       	ldi	r31, 0x51	; 81
     878:	cf 2e       	mov	r12, r31
     87a:	f6 e0       	ldi	r31, 0x06	; 6
     87c:	df 2e       	mov	r13, r31
     87e:	f0 2d       	mov	r31, r0
     880:	c7 01       	movw	r24, r14
     882:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     886:	cc 0d       	add	r28, r12
     888:	dd 1d       	adc	r29, r13
     88a:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     88c:	08 94       	sec
     88e:	e1 1c       	adc	r14, r1
     890:	f1 1c       	adc	r15, r1
     892:	e8 01       	movw	r28, r16
     894:	0f 5f       	subi	r16, 0xFF	; 255
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	80 91 8b 05 	lds	r24, 0x058B
     89c:	90 91 8c 05 	lds	r25, 0x058C
     8a0:	8c 17       	cp	r24, r28
     8a2:	9d 07       	cpc	r25, r29
     8a4:	6c f7       	brge	.-38     	; 0x880 <get_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		return locatieRes;
	}
     8a6:	81 e5       	ldi	r24, 0x51	; 81
     8a8:	96 e0       	ldi	r25, 0x06	; 6
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	08 95       	ret

000008bc <get_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     8cc:	e0 90 7d 05 	lds	r14, 0x057D
     8d0:	f0 90 7e 05 	lds	r15, 0x057E
     8d4:	80 91 89 05 	lds	r24, 0x0589
     8d8:	90 91 8a 05 	lds	r25, 0x058A
     8dc:	99 23       	and	r25, r25
     8de:	ec f0       	brlt	.+58     	; 0x91a <__stack+0x1b>
     8e0:	01 e0       	ldi	r16, 0x01	; 1
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	c0 e0       	ldi	r28, 0x00	; 0
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     8e8:	0f 2e       	mov	r0, r31
     8ea:	fc ec       	ldi	r31, 0xCC	; 204
     8ec:	cf 2e       	mov	r12, r31
     8ee:	f6 e0       	ldi	r31, 0x06	; 6
     8f0:	df 2e       	mov	r13, r31
     8f2:	f0 2d       	mov	r31, r0
     8f4:	c7 01       	movw	r24, r14
     8f6:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     8fa:	cc 0d       	add	r28, r12
     8fc:	dd 1d       	adc	r29, r13
     8fe:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     900:	08 94       	sec
     902:	e1 1c       	adc	r14, r1
     904:	f1 1c       	adc	r15, r1
     906:	e8 01       	movw	r28, r16
     908:	0f 5f       	subi	r16, 0xFF	; 255
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
     90c:	80 91 89 05 	lds	r24, 0x0589
     910:	90 91 8a 05 	lds	r25, 0x058A
     914:	8c 17       	cp	r24, r28
     916:	9d 07       	cpc	r25, r29
     918:	6c f7       	brge	.-38     	; 0x8f4 <get_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		return versieRes;
	}
     91a:	8c ec       	ldi	r24, 0xCC	; 204
     91c:	96 e0       	ldi	r25, 0x06	; 6
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	08 95       	ret

00000930 <get_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     940:	e0 90 7b 05 	lds	r14, 0x057B
     944:	f0 90 7c 05 	lds	r15, 0x057C
     948:	80 91 87 05 	lds	r24, 0x0587
     94c:	90 91 88 05 	lds	r25, 0x0588
     950:	99 23       	and	r25, r25
     952:	ec f0       	brlt	.+58     	; 0x98e <get_grensTemp+0x5e>
     954:	01 e0       	ldi	r16, 0x01	; 1
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	c0 e0       	ldi	r28, 0x00	; 0
     95a:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     95c:	0f 2e       	mov	r0, r31
     95e:	fd e7       	ldi	r31, 0x7D	; 125
     960:	cf 2e       	mov	r12, r31
     962:	f6 e0       	ldi	r31, 0x06	; 6
     964:	df 2e       	mov	r13, r31
     966:	f0 2d       	mov	r31, r0
     968:	c7 01       	movw	r24, r14
     96a:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     96e:	cc 0d       	add	r28, r12
     970:	dd 1d       	adc	r29, r13
     972:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     974:	08 94       	sec
     976:	e1 1c       	adc	r14, r1
     978:	f1 1c       	adc	r15, r1
     97a:	e8 01       	movw	r28, r16
     97c:	0f 5f       	subi	r16, 0xFF	; 255
     97e:	1f 4f       	sbci	r17, 0xFF	; 255
     980:	80 91 87 05 	lds	r24, 0x0587
     984:	90 91 88 05 	lds	r25, 0x0588
     988:	8c 17       	cp	r24, r28
     98a:	9d 07       	cpc	r25, r29
     98c:	6c f7       	brge	.-38     	; 0x968 <get_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}
     98e:	8d e7       	ldi	r24, 0x7D	; 125
     990:	96 e0       	ldi	r25, 0x06	; 6
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	08 95       	ret

000009a4 <get_grensLight>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     9b0:	e0 90 79 05 	lds	r14, 0x0579
     9b4:	f0 90 7a 05 	lds	r15, 0x057A
     9b8:	80 91 85 05 	lds	r24, 0x0585
     9bc:	90 91 86 05 	lds	r25, 0x0586
     9c0:	99 23       	and	r25, r25
     9c2:	bc f0       	brlt	.+46     	; 0x9f2 <get_grensLight+0x4e>
     9c4:	01 e0       	ldi	r16, 0x01	; 1
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	c0 e0       	ldi	r28, 0x00	; 0
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     9cc:	c7 01       	movw	r24, r14
     9ce:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     9d2:	cc 52       	subi	r28, 0x2C	; 44
     9d4:	d9 4f       	sbci	r29, 0xF9	; 249
     9d6:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     9d8:	08 94       	sec
     9da:	e1 1c       	adc	r14, r1
     9dc:	f1 1c       	adc	r15, r1
     9de:	e8 01       	movw	r28, r16
     9e0:	0f 5f       	subi	r16, 0xFF	; 255
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	80 91 85 05 	lds	r24, 0x0585
     9e8:	90 91 86 05 	lds	r25, 0x0586
     9ec:	8c 17       	cp	r24, r28
     9ee:	9d 07       	cpc	r25, r29
     9f0:	6c f7       	brge	.-38     	; 0x9cc <get_grensLight+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}
     9f2:	84 ed       	ldi	r24, 0xD4	; 212
     9f4:	96 e0       	ldi	r25, 0x06	; 6
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	08 95       	ret

00000a04 <get_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     a10:	e0 90 77 05 	lds	r14, 0x0577
     a14:	f0 90 78 05 	lds	r15, 0x0578
     a18:	80 91 83 05 	lds	r24, 0x0583
     a1c:	90 91 84 05 	lds	r25, 0x0584
     a20:	99 23       	and	r25, r25
     a22:	bc f0       	brlt	.+46     	; 0xa52 <get_minUnroll+0x4e>
     a24:	01 e0       	ldi	r16, 0x01	; 1
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     a2c:	c7 01       	movw	r24, r14
     a2e:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     a32:	ce 5b       	subi	r28, 0xBE	; 190
     a34:	d9 4f       	sbci	r29, 0xF9	; 249
     a36:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     a38:	08 94       	sec
     a3a:	e1 1c       	adc	r14, r1
     a3c:	f1 1c       	adc	r15, r1
     a3e:	e8 01       	movw	r28, r16
     a40:	0f 5f       	subi	r16, 0xFF	; 255
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
     a44:	80 91 83 05 	lds	r24, 0x0583
     a48:	90 91 84 05 	lds	r25, 0x0584
     a4c:	8c 17       	cp	r24, r28
     a4e:	9d 07       	cpc	r25, r29
     a50:	6c f7       	brge	.-38     	; 0xa2c <get_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return minUnrollRes;
	}
     a52:	82 e4       	ldi	r24, 0x42	; 66
     a54:	96 e0       	ldi	r25, 0x06	; 6
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <get_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     a70:	e0 90 75 05 	lds	r14, 0x0575
     a74:	f0 90 76 05 	lds	r15, 0x0576
     a78:	80 91 81 05 	lds	r24, 0x0581
     a7c:	90 91 82 05 	lds	r25, 0x0582
     a80:	99 23       	and	r25, r25
     a82:	bc f0       	brlt	.+46     	; 0xab2 <get_maxUnroll+0x4e>
     a84:	01 e0       	ldi	r16, 0x01	; 1
     a86:	10 e0       	ldi	r17, 0x00	; 0
     a88:	c0 e0       	ldi	r28, 0x00	; 0
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     a8c:	c7 01       	movw	r24, r14
     a8e:	0e 94 55 10 	call	0x20aa	; 0x20aa <__eerd_byte_m328p>
     a92:	ce 5f       	subi	r28, 0xFE	; 254
     a94:	d8 4f       	sbci	r29, 0xF8	; 248
     a96:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     a98:	08 94       	sec
     a9a:	e1 1c       	adc	r14, r1
     a9c:	f1 1c       	adc	r15, r1
     a9e:	e8 01       	movw	r28, r16
     aa0:	0f 5f       	subi	r16, 0xFF	; 255
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
     aa4:	80 91 81 05 	lds	r24, 0x0581
     aa8:	90 91 82 05 	lds	r25, 0x0582
     aac:	8c 17       	cp	r24, r28
     aae:	9d 07       	cpc	r25, r29
     ab0:	6c f7       	brge	.-38     	; 0xa8c <get_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return maxUnrollRes;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	97 e0       	ldi	r25, 0x07	; 7
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	08 95       	ret

00000ac4 <protocolCom>:
	return min_unroll;
}
//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     ac4:	00 e0       	ldi	r16, 0x00	; 0
     ac6:	11 e0       	ldi	r17, 0x01	; 1
		ser_readln(in_buf, sizeof(in_buf), 1);
     ac8:	ce ea       	ldi	r28, 0xAE	; 174
     aca:	d6 e0       	ldi	r29, 0x06	; 6
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     acc:	0f 2e       	mov	r0, r31
     ace:	f9 e1       	ldi	r31, 0x19	; 25
     ad0:	ef 2e       	mov	r14, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	ff 2e       	mov	r15, r31
     ad6:	f0 2d       	mov	r31, r0
				} if((getOut() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ad8:	0f 2e       	mov	r0, r31
     ada:	f1 e4       	ldi	r31, 0x41	; 65
     adc:	af 2e       	mov	r10, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	bf 2e       	mov	r11, r31
     ae2:	f0 2d       	mov	r31, r0
				if ((getIn() % 2) == 0){
					ser_writeln("999 Zonnescherm is al opgerold!");
     ae4:	0f 2e       	mov	r0, r31
     ae6:	f8 e4       	ldi	r31, 0x48	; 72
     ae8:	2f 2e       	mov	r2, r31
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	3f 2e       	mov	r3, r31
     aee:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     af0:	0f 2e       	mov	r0, r31
     af2:	f8 e6       	ldi	r31, 0x68	; 104
     af4:	cf 2e       	mov	r12, r31
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	df 2e       	mov	r13, r31
     afa:	f0 2d       	mov	r31, r0

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     afc:	0f 2e       	mov	r0, r31
     afe:	ff e6       	ldi	r31, 0x6F	; 111
     b00:	8f 2e       	mov	r8, r31
     b02:	f1 e0       	ldi	r31, 0x01	; 1
     b04:	9f 2e       	mov	r9, r31
     b06:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     b08:	0f 2e       	mov	r0, r31
     b0a:	fb e8       	ldi	r31, 0x8B	; 139
     b0c:	6f 2e       	mov	r6, r31
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	7f 2e       	mov	r7, r31
     b12:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     b14:	0f 2e       	mov	r0, r31
     b16:	fa ea       	ldi	r31, 0xAA	; 170
     b18:	4f 2e       	mov	r4, r31
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	5f 2e       	mov	r5, r31
     b1e:	f0 2d       	mov	r31, r0
	return min_unroll;
}
//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
		ser_readln(in_buf, sizeof(in_buf), 1);
     b26:	ce 01       	movw	r24, r28
     b28:	6e e1       	ldi	r22, 0x1E	; 30
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	41 e0       	ldi	r20, 0x01	; 1
     b2e:	0e 94 bb 07 	call	0xf76	; 0xf76 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b32:	c7 01       	movw	r24, r14
     b34:	be 01       	movw	r22, r28
     b36:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     b3a:	28 2f       	mov	r18, r24
     b3c:	39 2f       	mov	r19, r25
     b3e:	21 15       	cp	r18, r1
     b40:	31 05       	cpc	r19, r1
     b42:	a1 f4       	brne	.+40     	; 0xb6c <protocolCom+0xa8>
				if ((getOut() % 2) == 1){
     b44:	0e 94 fa 07 	call	0xff4	; 0xff4 <getOut>
     b48:	62 e0       	ldi	r22, 0x02	; 2
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divmodhi4>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	91 05       	cpc	r25, r1
     b54:	21 f4       	brne	.+8      	; 0xb5e <protocolCom+0x9a>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     b56:	80 e2       	ldi	r24, 0x20	; 32
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
				} if((getOut() % 2) == 0){
     b5e:	0e 94 fa 07 	call	0xff4	; 0xff4 <getOut>
     b62:	80 fd       	sbrc	r24, 0
     b64:	1e c0       	rjmp	.+60     	; 0xba2 <protocolCom+0xde>
					uitrollen();
     b66:	0e 94 0b 08 	call	0x1016	; 0x1016 <uitrollen>
     b6a:	1b c0       	rjmp	.+54     	; 0xba2 <protocolCom+0xde>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b6c:	c5 01       	movw	r24, r10
     b6e:	be 01       	movw	r22, r28
     b70:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     b74:	28 2f       	mov	r18, r24
     b76:	39 2f       	mov	r19, r25
     b78:	21 15       	cp	r18, r1
     b7a:	31 05       	cpc	r19, r1
     b7c:	91 f4       	brne	.+36     	; 0xba2 <protocolCom+0xde>
				if ((getIn() % 2) == 0){
     b7e:	0e 94 f5 07 	call	0xfea	; 0xfea <getIn>
     b82:	80 fd       	sbrc	r24, 0
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <protocolCom+0xc8>
					ser_writeln("999 Zonnescherm is al opgerold!");
     b86:	c1 01       	movw	r24, r2
     b88:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
				} if((getIn() % 2) == 1){
     b8c:	0e 94 f5 07 	call	0xfea	; 0xfea <getIn>
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divmodhi4>
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	91 05       	cpc	r25, r1
     b9c:	11 f4       	brne	.+4      	; 0xba2 <protocolCom+0xde>
					oprollen();
     b9e:	0e 94 83 08 	call	0x1106	; 0x1106 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ba2:	c6 01       	movw	r24, r12
     ba4:	be 01       	movw	r22, r28
     ba6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     baa:	28 2f       	mov	r18, r24
     bac:	39 2f       	mov	r19, r25
     bae:	21 15       	cp	r18, r1
     bb0:	31 05       	cpc	r19, r1
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <protocolCom+0xf2>
     bb4:	b5 cf       	rjmp	.-150    	; 0xb20 <protocolCom+0x5c>

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     bb6:	c4 01       	movw	r24, r8
     bb8:	be 01       	movw	r22, r28
     bba:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     bbe:	28 2f       	mov	r18, r24
     bc0:	39 2f       	mov	r19, r25
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	e1 f4       	brne	.+56     	; 0xc00 <protocolCom+0x13c>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bc8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <getTemp>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <protocolCom+0x10e>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <protocolCom+0x110>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <protocolCom+0x112>
     bd6:	28 e7       	ldi	r18, 0x78	; 120
     bd8:	31 e0       	ldi	r19, 0x01	; 1
     bda:	ed b7       	in	r30, 0x3d	; 61
     bdc:	fe b7       	in	r31, 0x3e	; 62
     bde:	32 83       	std	Z+2, r19	; 0x02
     be0:	21 83       	std	Z+1, r18	; 0x01
     be2:	83 83       	std	Z+3, r24	; 0x03
     be4:	94 83       	std	Z+4, r25	; 0x04
     be6:	a5 83       	std	Z+5, r26	; 0x05
     be8:	b6 83       	std	Z+6, r27	; 0x06
     bea:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <printf>
     bee:	8d b7       	in	r24, 0x3d	; 61
     bf0:	9e b7       	in	r25, 0x3e	; 62
     bf2:	06 96       	adiw	r24, 0x06	; 6
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	9e bf       	out	0x3e, r25	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	8d bf       	out	0x3d, r24	; 61
     bfe:	90 cf       	rjmp	.-224    	; 0xb20 <protocolCom+0x5c>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c00:	c3 01       	movw	r24, r6
     c02:	be 01       	movw	r22, r28
     c04:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     c08:	28 2f       	mov	r18, r24
     c0a:	39 2f       	mov	r19, r25
     c0c:	21 15       	cp	r18, r1
     c0e:	31 05       	cpc	r19, r1
     c10:	49 f4       	brne	.+18     	; 0xc24 <protocolCom+0x160>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c12:	8a e9       	ldi	r24, 0x9A	; 154
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     c1a:	0e 94 98 04 	call	0x930	; 0x930 <get_grensTemp>
     c1e:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     c22:	7e cf       	rjmp	.-260    	; 0xb20 <protocolCom+0x5c>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c24:	c2 01       	movw	r24, r4
     c26:	be 01       	movw	r22, r28
     c28:	4e e0       	ldi	r20, 0x0E	; 14
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     c30:	28 2f       	mov	r18, r24
     c32:	39 2f       	mov	r19, r25
     c34:	21 15       	cp	r18, r1
     c36:	31 05       	cpc	r19, r1
     c38:	49 f4       	brne	.+18     	; 0xc4c <protocolCom+0x188>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				set_substring();
     c3a:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
				set_grensTemp(substring);
     c3e:	80 91 ac 06 	lds	r24, 0x06AC
     c42:	90 91 ad 06 	lds	r25, 0x06AD
     c46:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_grensTemp>
     c4a:	6a cf       	rjmp	.-300    	; 0xb20 <protocolCom+0x5c>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c4c:	8c eb       	ldi	r24, 0xBC	; 188
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	be 01       	movw	r22, r28
     c52:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     c56:	28 2f       	mov	r18, r24
     c58:	39 2f       	mov	r19, r25
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	c1 f4       	brne	.+48     	; 0xc90 <protocolCom+0x1cc>
				printf("202 LIGHT %i \n", getLight());
     c60:	0e 94 99 01 	call	0x332	; 0x332 <getLight>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <protocolCom+0x1a2>
     c66:	00 d0       	rcall	.+0      	; 0xc68 <protocolCom+0x1a4>
     c68:	ed b7       	in	r30, 0x3d	; 61
     c6a:	fe b7       	in	r31, 0x3e	; 62
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	26 ec       	ldi	r18, 0xC6	; 198
     c70:	31 e0       	ldi	r19, 0x01	; 1
     c72:	ad b7       	in	r26, 0x3d	; 61
     c74:	be b7       	in	r27, 0x3e	; 62
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	3c 93       	st	X, r19
     c7a:	2e 93       	st	-X, r18
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	82 83       	std	Z+2, r24	; 0x02
     c80:	13 82       	std	Z+3, r1	; 0x03
     c82:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <printf>
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	48 cf       	rjmp	.-368    	; 0xb20 <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     c90:	85 ed       	ldi	r24, 0xD5	; 213
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	be 01       	movw	r22, r28
     c96:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     c9a:	28 2f       	mov	r18, r24
     c9c:	39 2f       	mov	r19, r25
     c9e:	21 15       	cp	r18, r1
     ca0:	31 05       	cpc	r19, r1
     ca2:	49 f4       	brne	.+18     	; 0xcb6 <protocolCom+0x1f2>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_write(get_grensLight());
     ca4:	85 ee       	ldi	r24, 0xE5	; 229
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     cac:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <get_grensLight>
     cb0:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     cb4:	35 cf       	rjmp	.-406    	; 0xb20 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     cb6:	86 ef       	ldi	r24, 0xF6	; 246
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	be 01       	movw	r22, r28
     cbc:	4f e0       	ldi	r20, 0x0F	; 15
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     cc4:	28 2f       	mov	r18, r24
     cc6:	39 2f       	mov	r19, r25
     cc8:	21 15       	cp	r18, r1
     cca:	31 05       	cpc	r19, r1
     ccc:	49 f4       	brne	.+18     	; 0xce0 <protocolCom+0x21c>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				set_substring();
     cce:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
				set_grensLicht(substring);
     cd2:	80 91 ac 06 	lds	r24, 0x06AC
     cd6:	90 91 ad 06 	lds	r25, 0x06AD
     cda:	0e 94 aa 02 	call	0x554	; 0x554 <set_grensLicht>
     cde:	20 cf       	rjmp	.-448    	; 0xb20 <protocolCom+0x5c>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     ce0:	89 e0       	ldi	r24, 0x09	; 9
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	be 01       	movw	r22, r28
     ce6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     cea:	28 2f       	mov	r18, r24
     cec:	39 2f       	mov	r19, r25
     cee:	21 15       	cp	r18, r1
     cf0:	31 05       	cpc	r19, r1
     cf2:	49 f4       	brne	.+18     	; 0xd06 <protocolCom+0x242>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     cf4:	88 e1       	ldi	r24, 0x18	; 24
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     cfc:	0e 94 32 05 	call	0xa64	; 0xa64 <get_maxUnroll>
     d00:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     d04:	0d cf       	rjmp	.-486    	; 0xb20 <protocolCom+0x5c>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     d06:	89 e2       	ldi	r24, 0x29	; 41
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	be 01       	movw	r22, r28
     d0c:	4f e0       	ldi	r20, 0x0F	; 15
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     d14:	28 2f       	mov	r18, r24
     d16:	39 2f       	mov	r19, r25
     d18:	21 15       	cp	r18, r1
     d1a:	31 05       	cpc	r19, r1
     d1c:	49 f4       	brne	.+18     	; 0xd30 <protocolCom+0x26c>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				set_substring();
     d1e:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
				set_maxUnroll(substring);
     d22:	80 91 ac 06 	lds	r24, 0x06AC
     d26:	90 91 ad 06 	lds	r25, 0x06AD
     d2a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <set_maxUnroll>
     d2e:	f8 ce       	rjmp	.-528    	; 0xb20 <protocolCom+0x5c>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     d30:	8b e3       	ldi	r24, 0x3B	; 59
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	be 01       	movw	r22, r28
     d36:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     d3a:	28 2f       	mov	r18, r24
     d3c:	39 2f       	mov	r19, r25
     d3e:	21 15       	cp	r18, r1
     d40:	31 05       	cpc	r19, r1
     d42:	49 f4       	brne	.+18     	; 0xd56 <protocolCom+0x292>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     d44:	8a e4       	ldi	r24, 0x4A	; 74
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     d4c:	0e 94 02 05 	call	0xa04	; 0xa04 <get_minUnroll>
     d50:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     d54:	e5 ce       	rjmp	.-566    	; 0xb20 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     d56:	8b e5       	ldi	r24, 0x5B	; 91
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	be 01       	movw	r22, r28
     d5c:	4f e0       	ldi	r20, 0x0F	; 15
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     d64:	28 2f       	mov	r18, r24
     d66:	39 2f       	mov	r19, r25
     d68:	21 15       	cp	r18, r1
     d6a:	31 05       	cpc	r19, r1
     d6c:	49 f4       	brne	.+18     	; 0xd80 <protocolCom+0x2bc>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				set_substring();
     d6e:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
				set_minUnroll(substring);
     d72:	80 91 ac 06 	lds	r24, 0x06AC
     d76:	90 91 ad 06 	lds	r25, 0x06AD
     d7a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <set_minUnroll>
     d7e:	d0 ce       	rjmp	.-608    	; 0xb20 <protocolCom+0x5c>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     d80:	8d e6       	ldi	r24, 0x6D	; 109
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	be 01       	movw	r22, r28
     d86:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     d8a:	28 2f       	mov	r18, r24
     d8c:	39 2f       	mov	r19, r25
     d8e:	21 15       	cp	r18, r1
     d90:	31 05       	cpc	r19, r1
     d92:	49 f4       	brne	.+18     	; 0xda6 <protocolCom+0x2e2>
				ser_write("202 "),  ser_writeln(get_Naam());
     d94:	86 e7       	ldi	r24, 0x76	; 118
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     d9c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <get_Naam>
     da0:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     da4:	bd ce       	rjmp	.-646    	; 0xb20 <protocolCom+0x5c>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     da6:	8b e7       	ldi	r24, 0x7B	; 123
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	be 01       	movw	r22, r28
     dac:	48 e0       	ldi	r20, 0x08	; 8
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     db4:	28 2f       	mov	r18, r24
     db6:	39 2f       	mov	r19, r25
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	69 f4       	brne	.+26     	; 0xdd8 <protocolCom+0x314>
				set_substring();
     dbe:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
				set_Naam(substring);
     dc2:	80 91 ac 06 	lds	r24, 0x06AC
     dc6:	90 91 ad 06 	lds	r25, 0x06AD
     dca:	0e 94 5e 03 	call	0x6bc	; 0x6bc <set_Naam>
				printf("200 OK \n");
     dce:	87 e8       	ldi	r24, 0x87	; 135
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <puts>
     dd6:	a4 ce       	rjmp	.-696    	; 0xb20 <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     dd8:	8f e8       	ldi	r24, 0x8F	; 143
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	be 01       	movw	r22, r28
     dde:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     de2:	28 2f       	mov	r18, r24
     de4:	39 2f       	mov	r19, r25
     de6:	21 15       	cp	r18, r1
     de8:	31 05       	cpc	r19, r1
     dea:	49 f4       	brne	.+18     	; 0xdfe <protocolCom+0x33a>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     dec:	86 e7       	ldi	r24, 0x76	; 118
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     df4:	0e 94 24 04 	call	0x848	; 0x848 <get_Locatie>
     df8:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     dfc:	91 ce       	rjmp	.-734    	; 0xb20 <protocolCom+0x5c>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     dfe:	8c e9       	ldi	r24, 0x9C	; 156
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	be 01       	movw	r22, r28
     e04:	4c e0       	ldi	r20, 0x0C	; 12
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     e0c:	28 2f       	mov	r18, r24
     e0e:	39 2f       	mov	r19, r25
     e10:	21 15       	cp	r18, r1
     e12:	31 05       	cpc	r19, r1
     e14:	69 f4       	brne	.+26     	; 0xe30 <protocolCom+0x36c>
				set_substring();
     e16:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
				set_Locatie(substring);
     e1a:	80 91 ac 06 	lds	r24, 0x06AC
     e1e:	90 91 ad 06 	lds	r25, 0x06AD
     e22:	0e 94 31 03 	call	0x662	; 0x662 <set_Locatie>
				
				printf("200 OK \n");
     e26:	87 e8       	ldi	r24, 0x87	; 135
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <puts>
     e2e:	78 ce       	rjmp	.-784    	; 0xb20 <protocolCom+0x5c>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     e30:	8c ea       	ldi	r24, 0xAC	; 172
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	be 01       	movw	r22, r28
     e36:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     e3a:	28 2f       	mov	r18, r24
     e3c:	39 2f       	mov	r19, r25
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	49 f4       	brne	.+18     	; 0xe56 <protocolCom+0x392>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     e44:	88 eb       	ldi	r24, 0xB8	; 184
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
     e4c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <get_Versie>
     e50:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     e54:	65 ce       	rjmp	.-822    	; 0xb20 <protocolCom+0x5c>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     e56:	85 ec       	ldi	r24, 0xC5	; 197
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	be 01       	movw	r22, r28
     e5c:	4c e0       	ldi	r20, 0x0C	; 12
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <strncmp>
     e64:	28 2f       	mov	r18, r24
     e66:	39 2f       	mov	r19, r25
     e68:	21 15       	cp	r18, r1
     e6a:	31 05       	cpc	r19, r1
     e6c:	69 f4       	brne	.+26     	; 0xe88 <protocolCom+0x3c4>
					set_substring();
     e6e:	0e 94 83 03 	call	0x706	; 0x706 <set_substring>
					set_Versie(substring);
     e72:	80 91 ac 06 	lds	r24, 0x06AC
     e76:	90 91 ad 06 	lds	r25, 0x06AD
     e7a:	0e 94 04 03 	call	0x608	; 0x608 <set_Versie>
					
					printf("200 OK \n");
     e7e:	87 e8       	ldi	r24, 0x87	; 135
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <puts>
     e86:	4c ce       	rjmp	.-872    	; 0xb20 <protocolCom+0x5c>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     e88:	84 ed       	ldi	r24, 0xD4	; 212
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	be 01       	movw	r22, r28
     e8e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     e92:	28 2f       	mov	r18, r24
     e94:	39 2f       	mov	r19, r25
     e96:	21 15       	cp	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	89 f4       	brne	.+34     	; 0xebe <protocolCom+0x3fa>
				if ((getOut() % 2) == 1){
     e9c:	0e 94 fa 07 	call	0xff4	; 0xff4 <getOut>
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__divmodhi4>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	11 f4       	brne	.+4      	; 0xeb2 <protocolCom+0x3ee>
					uitrollen();					
     eae:	0e 94 0b 08 	call	0x1016	; 0x1016 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     eb2:	89 ed       	ldi	r24, 0xD9	; 217
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
				abort();
     eba:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     ebe:	82 ee       	ldi	r24, 0xE2	; 226
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	be 01       	movw	r22, r28
     ec4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strcmp>
     ec8:	28 2f       	mov	r18, r24
     eca:	39 2f       	mov	r19, r25
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	29 f4       	brne	.+10     	; 0xedc <protocolCom+0x418>
				ser_writeln(
     ed2:	87 ee       	ldi	r24, 0xE7	; 231
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     eda:	22 ce       	rjmp	.-956    	; 0xb20 <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     edc:	8c e2       	ldi	r24, 0x2C	; 44
     ede:	95 e0       	ldi	r25, 0x05	; 5
     ee0:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
     ee4:	1d ce       	rjmp	.-966    	; 0xb20 <protocolCom+0x5c>

00000ee6 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     ee6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     eea:	83 e3       	ldi	r24, 0x33	; 51
     eec:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     ef0:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     ef4:	88 e1       	ldi	r24, 0x18	; 24
     ef6:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     efa:	86 e0       	ldi	r24, 0x06	; 6
     efc:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     f00:	8f e8       	ldi	r24, 0x8F	; 143
     f02:	95 e0       	ldi	r25, 0x05	; 5
     f04:	90 93 39 07 	sts	0x0739, r25
     f08:	80 93 38 07 	sts	0x0738, r24
}
     f0c:	08 95       	ret

00000f0e <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     f0e:	e0 ec       	ldi	r30, 0xC0	; 192
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	90 81       	ld	r25, Z
     f14:	95 ff       	sbrs	r25, 5
     f16:	fd cf       	rjmp	.-6      	; 0xf12 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     f18:	80 93 c6 00 	sts	0x00C6, r24
}
     f1c:	08 95       	ret

00000f1e <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     f1e:	cf 93       	push	r28
     f20:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     f22:	8a 30       	cpi	r24, 0x0A	; 10
     f24:	19 f4       	brne	.+6      	; 0xf2c <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     f26:	8d e0       	ldi	r24, 0x0D	; 13
     f28:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>
	}
	ser_transmit(c);
     f2c:	8c 2f       	mov	r24, r28
     f2e:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>
}
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     f36:	e0 ec       	ldi	r30, 0xC0	; 192
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	ec f7       	brge	.-6      	; 0xf3a <ser_receive+0x4>
	return UDR0;
     f40:	80 91 c6 00 	lds	r24, 0x00C6
}
     f44:	08 95       	ret

00000f46 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     f4c:	88 81       	ld	r24, Y
     f4e:	88 23       	and	r24, r24
     f50:	31 f0       	breq	.+12     	; 0xf5e <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     f52:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     f54:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     f58:	89 91       	ld	r24, Y+
     f5a:	88 23       	and	r24, r24
     f5c:	d9 f7       	brne	.-10     	; 0xf54 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     f64:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
	ser_transmit('\r');
     f68:	8d e0       	ldi	r24, 0x0D	; 13
     f6a:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>
	ser_transmit('\n');
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>
}
     f74:	08 95       	ret

00000f76 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	5c 01       	movw	r10, r24
     f8c:	d4 2f       	mov	r29, r20
	int i=0;
     f8e:	6c 01       	movw	r12, r24
     f90:	ee 24       	eor	r14, r14
     f92:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f94:	8b 01       	movw	r16, r22
     f96:	01 50       	subi	r16, 0x01	; 1
     f98:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     f9a:	0e 94 9b 07 	call	0xf36	; 0xf36 <ser_receive>
     f9e:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     fa0:	dd 23       	and	r29, r29
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <ser_readln+0x32>
     fa4:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>
		if (c=='\r') {
     fa8:	cd 30       	cpi	r28, 0x0D	; 13
     faa:	31 f4       	brne	.+12     	; 0xfb8 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     fac:	dd 23       	and	r29, r29
     fae:	71 f0       	breq	.+28     	; 0xfcc <ser_readln+0x56>
     fb0:	8a e0       	ldi	r24, 0x0A	; 10
     fb2:	0e 94 87 07 	call	0xf0e	; 0xf0e <ser_transmit>
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     fb8:	e0 16       	cp	r14, r16
     fba:	f1 06       	cpc	r15, r17
     fbc:	74 f7       	brge	.-36     	; 0xf9a <ser_readln+0x24>
			buf[i++]=c;
     fbe:	f6 01       	movw	r30, r12
     fc0:	c1 93       	st	Z+, r28
     fc2:	6f 01       	movw	r12, r30
     fc4:	08 94       	sec
     fc6:	e1 1c       	adc	r14, r1
     fc8:	f1 1c       	adc	r15, r1
     fca:	e7 cf       	rjmp	.-50     	; 0xf9a <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     fcc:	ea 0c       	add	r14, r10
     fce:	fb 1c       	adc	r15, r11
     fd0:	f7 01       	movw	r30, r14
     fd2:	10 82       	st	Z, r1
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	08 95       	ret

00000fea <getIn>:

int j, IN, OUT = 0; //Voor knipperen van zonnescherm | Voor het kijken of hij uitgerold/opgerold is

int getIn(){
	return IN;
}
     fea:	80 91 34 07 	lds	r24, 0x0734
     fee:	90 91 35 07 	lds	r25, 0x0735
     ff2:	08 95       	ret

00000ff4 <getOut>:

int getOut(){
	return OUT;
}
     ff4:	80 91 18 06 	lds	r24, 0x0618
     ff8:	90 91 19 06 	lds	r25, 0x0619
     ffc:	08 95       	ret

00000ffe <init_scherm_ports>:

init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
     ffe:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    1000:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    1002:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    1004:	e9 e6       	ldi	r30, 0x69	; 105
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    1012:	2d 9a       	sbi	0x05, 5	; 5
}
    1014:	08 95       	ret

00001016 <uitrollen>:

void uitrollen(){
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
	OUT = (OUT + 1);
    101a:	80 91 18 06 	lds	r24, 0x0618
    101e:	90 91 19 06 	lds	r25, 0x0619
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	90 93 19 06 	sts	0x0619, r25
    1028:	80 93 18 06 	sts	0x0618, r24
	IN = (IN + 1);
    102c:	80 91 34 07 	lds	r24, 0x0734
    1030:	90 91 35 07 	lds	r25, 0x0735
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	90 93 35 07 	sts	0x0735, r25
    103a:	80 93 34 07 	sts	0x0734, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    103e:	8d e9       	ldi	r24, 0x9D	; 157
    1040:	95 e0       	ldi	r25, 0x05	; 5
    1042:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1046:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1048:	2b 9a       	sbi	0x05, 3	; 5
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
    104a:	c2 ea       	ldi	r28, 0xA2	; 162
    104c:	d5 e0       	ldi	r29, 0x05	; 5
	
	PORTB |= _BV(PORTB3);
	
	//printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	
	while (getDistance()<20){
    104e:	22 c0       	rjmp	.+68     	; 0x1094 <uitrollen+0x7e>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1050:	2c 9a       	sbi	0x05, 4	; 5
    1052:	8f e3       	ldi	r24, 0x3F	; 63
    1054:	9d e0       	ldi	r25, 0x0D	; 13
    1056:	a3 e0       	ldi	r26, 0x03	; 3
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	90 40       	sbci	r25, 0x00	; 0
    105c:	a0 40       	sbci	r26, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <uitrollen+0x42>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <uitrollen+0x4c>
    1062:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1064:	2c 98       	cbi	0x05, 4	; 5
    1066:	8f e3       	ldi	r24, 0x3F	; 63
    1068:	9d e0       	ldi	r25, 0x0D	; 13
    106a:	a3 e0       	ldi	r26, 0x03	; 3
    106c:	81 50       	subi	r24, 0x01	; 1
    106e:	90 40       	sbci	r25, 0x00	; 0
    1070:	a0 40       	sbci	r26, 0x00	; 0
    1072:	e1 f7       	brne	.-8      	; 0x106c <uitrollen+0x56>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <uitrollen+0x60>
    1076:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
    1078:	80 91 32 07 	lds	r24, 0x0732
    107c:	90 91 33 07 	lds	r25, 0x0733
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	90 93 33 07 	sts	0x0733, r25
    1086:	80 93 32 07 	sts	0x0732, r24
		if (j % 2 == 0){ser_write(".");}
    108a:	80 fd       	sbrc	r24, 0
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <uitrollen+0x7e>
    108e:	ce 01       	movw	r24, r28
    1090:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
	
	PORTB |= _BV(PORTB3);
	
	//printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	
	while (getDistance()<20){
    1094:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 ea       	ldi	r20, 0xA0	; 160
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__cmpsf2>
    10a4:	88 23       	and	r24, r24
    10a6:	a4 f2       	brlt	.-88     	; 0x1050 <uitrollen+0x3a>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    10a8:	10 92 33 07 	sts	0x0733, r1
    10ac:	10 92 32 07 	sts	0x0732, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    10b0:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <uitrollen+0xa4>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <uitrollen+0xa6>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <uitrollen+0xa8>
    10be:	24 ea       	ldi	r18, 0xA4	; 164
    10c0:	35 e0       	ldi	r19, 0x05	; 5
    10c2:	ed b7       	in	r30, 0x3d	; 61
    10c4:	fe b7       	in	r31, 0x3e	; 62
    10c6:	32 83       	std	Z+2, r19	; 0x02
    10c8:	21 83       	std	Z+1, r18	; 0x01
    10ca:	83 83       	std	Z+3, r24	; 0x03
    10cc:	94 83       	std	Z+4, r25	; 0x04
    10ce:	a5 83       	std	Z+5, r26	; 0x05
    10d0:	b6 83       	std	Z+6, r27	; 0x06
    10d2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <printf>
	ser_writeln("\n\r201 Zonnescherm is uitgerold\n");
    10d6:	8d b7       	in	r24, 0x3d	; 61
    10d8:	9e b7       	in	r25, 0x3e	; 62
    10da:	06 96       	adiw	r24, 0x06	; 6
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	9e bf       	out	0x3e, r25	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	8d bf       	out	0x3d, r24	; 61
    10e6:	84 ec       	ldi	r24, 0xC4	; 196
    10e8:	95 e0       	ldi	r25, 0x05	; 5
    10ea:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
    10ee:	8f e3       	ldi	r24, 0x3F	; 63
    10f0:	9d e0       	ldi	r25, 0x0D	; 13
    10f2:	a3 e0       	ldi	r26, 0x03	; 3
    10f4:	81 50       	subi	r24, 0x01	; 1
    10f6:	90 40       	sbci	r25, 0x00	; 0
    10f8:	a0 40       	sbci	r26, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <uitrollen+0xde>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <uitrollen+0xe8>
    10fe:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <oprollen>:
	
	


void oprollen(){
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
	IN = (IN + 1);
    1112:	80 91 34 07 	lds	r24, 0x0734
    1116:	90 91 35 07 	lds	r25, 0x0735
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	90 93 35 07 	sts	0x0735, r25
    1120:	80 93 34 07 	sts	0x0734, r24
	OUT = (OUT + 1);
    1124:	80 91 18 06 	lds	r24, 0x0618
    1128:	90 91 19 06 	lds	r25, 0x0619
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	90 93 19 06 	sts	0x0619, r25
    1132:	80 93 18 06 	sts	0x0618, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    1136:	8d e9       	ldi	r24, 0x9D	; 157
    1138:	95 e0       	ldi	r25, 0x05	; 5
    113a:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    113e:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1140:	2d 9a       	sbi	0x05, 5	; 5
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    1142:	c2 ea       	ldi	r28, 0xA2	; 162
    1144:	d5 e0       	ldi	r29, 0x05	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	//printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	
	while (getDistance()>get_min_unroll()){
    1146:	22 c0       	rjmp	.+68     	; 0x118c <oprollen+0x86>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1148:	2c 9a       	sbi	0x05, 4	; 5
    114a:	8f e3       	ldi	r24, 0x3F	; 63
    114c:	9d e0       	ldi	r25, 0x0D	; 13
    114e:	a3 e0       	ldi	r26, 0x03	; 3
    1150:	81 50       	subi	r24, 0x01	; 1
    1152:	90 40       	sbci	r25, 0x00	; 0
    1154:	a0 40       	sbci	r26, 0x00	; 0
    1156:	e1 f7       	brne	.-8      	; 0x1150 <oprollen+0x4a>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <oprollen+0x54>
    115a:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    115c:	2c 98       	cbi	0x05, 4	; 5
    115e:	8f e3       	ldi	r24, 0x3F	; 63
    1160:	9d e0       	ldi	r25, 0x0D	; 13
    1162:	a3 e0       	ldi	r26, 0x03	; 3
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	a0 40       	sbci	r26, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <oprollen+0x5e>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <oprollen+0x68>
    116e:	00 00       	nop
		_delay_ms(DELAY_MS);

		j += 1;
    1170:	80 91 32 07 	lds	r24, 0x0732
    1174:	90 91 33 07 	lds	r25, 0x0733
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	90 93 33 07 	sts	0x0733, r25
    117e:	80 93 32 07 	sts	0x0732, r24
		if (j % 2 == 0){ser_write(".");}
    1182:	80 fd       	sbrc	r24, 0
    1184:	03 c0       	rjmp	.+6      	; 0x118c <oprollen+0x86>
    1186:	ce 01       	movw	r24, r28
    1188:	0e 94 a3 07 	call	0xf46	; 0xf46 <ser_write>
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	//printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	
	while (getDistance()>get_min_unroll()){
    118c:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1190:	6b 01       	movw	r12, r22
    1192:	7c 01       	movw	r14, r24
    1194:	0e 94 ee 03 	call	0x7dc	; 0x7dc <get_min_unroll>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	0e 94 22 0a 	call	0x1444	; 0x1444 <__gesf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	84 f2       	brlt	.-96     	; 0x1148 <oprollen+0x42>
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}			
	j = 0;
    11a8:	10 92 33 07 	sts	0x0733, r1
    11ac:	10 92 32 07 	sts	0x0732, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    11b0:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <oprollen+0xb4>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <oprollen+0xb6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <oprollen+0xb8>
    11be:	24 ea       	ldi	r18, 0xA4	; 164
    11c0:	35 e0       	ldi	r19, 0x05	; 5
    11c2:	ed b7       	in	r30, 0x3d	; 61
    11c4:	fe b7       	in	r31, 0x3e	; 62
    11c6:	32 83       	std	Z+2, r19	; 0x02
    11c8:	21 83       	std	Z+1, r18	; 0x01
    11ca:	83 83       	std	Z+3, r24	; 0x03
    11cc:	94 83       	std	Z+4, r25	; 0x04
    11ce:	a5 83       	std	Z+5, r26	; 0x05
    11d0:	b6 83       	std	Z+6, r27	; 0x06
    11d2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <printf>
	ser_writeln("\n\r201 Zonnescherm is opgerold\n");
    11d6:	8d b7       	in	r24, 0x3d	; 61
    11d8:	9e b7       	in	r25, 0x3e	; 62
    11da:	06 96       	adiw	r24, 0x06	; 6
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	9e bf       	out	0x3e, r25	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	8d bf       	out	0x3d, r24	; 61
    11e6:	84 ee       	ldi	r24, 0xE4	; 228
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_writeln>
    11ee:	8f e3       	ldi	r24, 0x3F	; 63
    11f0:	9d e0       	ldi	r25, 0x0D	; 13
    11f2:	a3 e0       	ldi	r26, 0x03	; 3
    11f4:	81 50       	subi	r24, 0x01	; 1
    11f6:	90 40       	sbci	r25, 0x00	; 0
    11f8:	a0 40       	sbci	r26, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <oprollen+0xee>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <oprollen+0xf8>
    11fe:	00 00       	nop
	_delay_ms(DELAY_MS);
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	08 95       	ret

0000120e <__subsf3>:
    120e:	50 58       	subi	r21, 0x80	; 128

00001210 <__addsf3>:
    1210:	bb 27       	eor	r27, r27
    1212:	aa 27       	eor	r26, r26
    1214:	0e d0       	rcall	.+28     	; 0x1232 <__addsf3x>
    1216:	dc c0       	rjmp	.+440    	; 0x13d0 <__fp_round>
    1218:	cd d0       	rcall	.+410    	; 0x13b4 <__fp_pscA>
    121a:	30 f0       	brcs	.+12     	; 0x1228 <__addsf3+0x18>
    121c:	d2 d0       	rcall	.+420    	; 0x13c2 <__fp_pscB>
    121e:	20 f0       	brcs	.+8      	; 0x1228 <__addsf3+0x18>
    1220:	31 f4       	brne	.+12     	; 0x122e <__addsf3+0x1e>
    1222:	9f 3f       	cpi	r25, 0xFF	; 255
    1224:	11 f4       	brne	.+4      	; 0x122a <__addsf3+0x1a>
    1226:	1e f4       	brtc	.+6      	; 0x122e <__addsf3+0x1e>
    1228:	c2 c0       	rjmp	.+388    	; 0x13ae <__fp_nan>
    122a:	0e f4       	brtc	.+2      	; 0x122e <__addsf3+0x1e>
    122c:	e0 95       	com	r30
    122e:	e7 fb       	bst	r30, 7
    1230:	b8 c0       	rjmp	.+368    	; 0x13a2 <__fp_inf>

00001232 <__addsf3x>:
    1232:	e9 2f       	mov	r30, r25
    1234:	de d0       	rcall	.+444    	; 0x13f2 <__fp_split3>
    1236:	80 f3       	brcs	.-32     	; 0x1218 <__addsf3+0x8>
    1238:	ba 17       	cp	r27, r26
    123a:	62 07       	cpc	r22, r18
    123c:	73 07       	cpc	r23, r19
    123e:	84 07       	cpc	r24, r20
    1240:	95 07       	cpc	r25, r21
    1242:	18 f0       	brcs	.+6      	; 0x124a <__addsf3x+0x18>
    1244:	71 f4       	brne	.+28     	; 0x1262 <__addsf3x+0x30>
    1246:	9e f5       	brtc	.+102    	; 0x12ae <__addsf3x+0x7c>
    1248:	f6 c0       	rjmp	.+492    	; 0x1436 <__fp_zero>
    124a:	0e f4       	brtc	.+2      	; 0x124e <__addsf3x+0x1c>
    124c:	e0 95       	com	r30
    124e:	0b 2e       	mov	r0, r27
    1250:	ba 2f       	mov	r27, r26
    1252:	a0 2d       	mov	r26, r0
    1254:	0b 01       	movw	r0, r22
    1256:	b9 01       	movw	r22, r18
    1258:	90 01       	movw	r18, r0
    125a:	0c 01       	movw	r0, r24
    125c:	ca 01       	movw	r24, r20
    125e:	a0 01       	movw	r20, r0
    1260:	11 24       	eor	r1, r1
    1262:	ff 27       	eor	r31, r31
    1264:	59 1b       	sub	r21, r25
    1266:	99 f0       	breq	.+38     	; 0x128e <__addsf3x+0x5c>
    1268:	59 3f       	cpi	r21, 0xF9	; 249
    126a:	50 f4       	brcc	.+20     	; 0x1280 <__addsf3x+0x4e>
    126c:	50 3e       	cpi	r21, 0xE0	; 224
    126e:	68 f1       	brcs	.+90     	; 0x12ca <__addsf3x+0x98>
    1270:	1a 16       	cp	r1, r26
    1272:	f0 40       	sbci	r31, 0x00	; 0
    1274:	a2 2f       	mov	r26, r18
    1276:	23 2f       	mov	r18, r19
    1278:	34 2f       	mov	r19, r20
    127a:	44 27       	eor	r20, r20
    127c:	58 5f       	subi	r21, 0xF8	; 248
    127e:	f3 cf       	rjmp	.-26     	; 0x1266 <__addsf3x+0x34>
    1280:	46 95       	lsr	r20
    1282:	37 95       	ror	r19
    1284:	27 95       	ror	r18
    1286:	a7 95       	ror	r26
    1288:	f0 40       	sbci	r31, 0x00	; 0
    128a:	53 95       	inc	r21
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__addsf3x+0x4e>
    128e:	7e f4       	brtc	.+30     	; 0x12ae <__addsf3x+0x7c>
    1290:	1f 16       	cp	r1, r31
    1292:	ba 0b       	sbc	r27, r26
    1294:	62 0b       	sbc	r22, r18
    1296:	73 0b       	sbc	r23, r19
    1298:	84 0b       	sbc	r24, r20
    129a:	ba f0       	brmi	.+46     	; 0x12ca <__addsf3x+0x98>
    129c:	91 50       	subi	r25, 0x01	; 1
    129e:	a1 f0       	breq	.+40     	; 0x12c8 <__addsf3x+0x96>
    12a0:	ff 0f       	add	r31, r31
    12a2:	bb 1f       	adc	r27, r27
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	c2 f7       	brpl	.-16     	; 0x129c <__addsf3x+0x6a>
    12ac:	0e c0       	rjmp	.+28     	; 0x12ca <__addsf3x+0x98>
    12ae:	ba 0f       	add	r27, r26
    12b0:	62 1f       	adc	r22, r18
    12b2:	73 1f       	adc	r23, r19
    12b4:	84 1f       	adc	r24, r20
    12b6:	48 f4       	brcc	.+18     	; 0x12ca <__addsf3x+0x98>
    12b8:	87 95       	ror	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f7 95       	ror	r31
    12c2:	9e 3f       	cpi	r25, 0xFE	; 254
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__addsf3x+0x96>
    12c6:	b3 cf       	rjmp	.-154    	; 0x122e <__addsf3+0x1e>
    12c8:	93 95       	inc	r25
    12ca:	88 0f       	add	r24, r24
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__addsf3x+0x9e>
    12ce:	99 27       	eor	r25, r25
    12d0:	ee 0f       	add	r30, r30
    12d2:	97 95       	ror	r25
    12d4:	87 95       	ror	r24
    12d6:	08 95       	ret

000012d8 <__cmpsf2>:
    12d8:	40 d0       	rcall	.+128    	; 0x135a <__fp_cmp>
    12da:	08 f4       	brcc	.+2      	; 0x12de <__cmpsf2+0x6>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	08 95       	ret

000012e0 <__floatunsisf>:
    12e0:	e8 94       	clt
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <__floatsisf+0x12>

000012e4 <__floatsisf>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	3e f4       	brtc	.+14     	; 0x12f6 <__floatsisf+0x12>
    12e8:	90 95       	com	r25
    12ea:	80 95       	com	r24
    12ec:	70 95       	com	r23
    12ee:	61 95       	neg	r22
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	99 23       	and	r25, r25
    12f8:	a9 f0       	breq	.+42     	; 0x1324 <__floatsisf+0x40>
    12fa:	f9 2f       	mov	r31, r25
    12fc:	96 e9       	ldi	r25, 0x96	; 150
    12fe:	bb 27       	eor	r27, r27
    1300:	93 95       	inc	r25
    1302:	f6 95       	lsr	r31
    1304:	87 95       	ror	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f1 11       	cpse	r31, r1
    130e:	f8 cf       	rjmp	.-16     	; 0x1300 <__floatsisf+0x1c>
    1310:	fa f4       	brpl	.+62     	; 0x1350 <__floatsisf+0x6c>
    1312:	bb 0f       	add	r27, r27
    1314:	11 f4       	brne	.+4      	; 0x131a <__floatsisf+0x36>
    1316:	60 ff       	sbrs	r22, 0
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <__floatsisf+0x6c>
    131a:	6f 5f       	subi	r22, 0xFF	; 255
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	16 c0       	rjmp	.+44     	; 0x1350 <__floatsisf+0x6c>
    1324:	88 23       	and	r24, r24
    1326:	11 f0       	breq	.+4      	; 0x132c <__floatsisf+0x48>
    1328:	96 e9       	ldi	r25, 0x96	; 150
    132a:	11 c0       	rjmp	.+34     	; 0x134e <__floatsisf+0x6a>
    132c:	77 23       	and	r23, r23
    132e:	21 f0       	breq	.+8      	; 0x1338 <__floatsisf+0x54>
    1330:	9e e8       	ldi	r25, 0x8E	; 142
    1332:	87 2f       	mov	r24, r23
    1334:	76 2f       	mov	r23, r22
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <__floatsisf+0x5e>
    1338:	66 23       	and	r22, r22
    133a:	71 f0       	breq	.+28     	; 0x1358 <__floatsisf+0x74>
    133c:	96 e8       	ldi	r25, 0x86	; 134
    133e:	86 2f       	mov	r24, r22
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	2a f0       	brmi	.+10     	; 0x1350 <__floatsisf+0x6c>
    1346:	9a 95       	dec	r25
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	da f7       	brpl	.-10     	; 0x1346 <__floatsisf+0x62>
    1350:	88 0f       	add	r24, r24
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	97 f9       	bld	r25, 7
    1358:	08 95       	ret

0000135a <__fp_cmp>:
    135a:	99 0f       	add	r25, r25
    135c:	00 08       	sbc	r0, r0
    135e:	55 0f       	add	r21, r21
    1360:	aa 0b       	sbc	r26, r26
    1362:	e0 e8       	ldi	r30, 0x80	; 128
    1364:	fe ef       	ldi	r31, 0xFE	; 254
    1366:	16 16       	cp	r1, r22
    1368:	17 06       	cpc	r1, r23
    136a:	e8 07       	cpc	r30, r24
    136c:	f9 07       	cpc	r31, r25
    136e:	c0 f0       	brcs	.+48     	; 0x13a0 <__fp_cmp+0x46>
    1370:	12 16       	cp	r1, r18
    1372:	13 06       	cpc	r1, r19
    1374:	e4 07       	cpc	r30, r20
    1376:	f5 07       	cpc	r31, r21
    1378:	98 f0       	brcs	.+38     	; 0x13a0 <__fp_cmp+0x46>
    137a:	62 1b       	sub	r22, r18
    137c:	73 0b       	sbc	r23, r19
    137e:	84 0b       	sbc	r24, r20
    1380:	95 0b       	sbc	r25, r21
    1382:	39 f4       	brne	.+14     	; 0x1392 <__fp_cmp+0x38>
    1384:	0a 26       	eor	r0, r26
    1386:	61 f0       	breq	.+24     	; 0x13a0 <__fp_cmp+0x46>
    1388:	23 2b       	or	r18, r19
    138a:	24 2b       	or	r18, r20
    138c:	25 2b       	or	r18, r21
    138e:	21 f4       	brne	.+8      	; 0x1398 <__fp_cmp+0x3e>
    1390:	08 95       	ret
    1392:	0a 26       	eor	r0, r26
    1394:	09 f4       	brne	.+2      	; 0x1398 <__fp_cmp+0x3e>
    1396:	a1 40       	sbci	r26, 0x01	; 1
    1398:	a6 95       	lsr	r26
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	81 1d       	adc	r24, r1
    139e:	81 1d       	adc	r24, r1
    13a0:	08 95       	ret

000013a2 <__fp_inf>:
    13a2:	97 f9       	bld	r25, 7
    13a4:	9f 67       	ori	r25, 0x7F	; 127
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	08 95       	ret

000013ae <__fp_nan>:
    13ae:	9f ef       	ldi	r25, 0xFF	; 255
    13b0:	80 ec       	ldi	r24, 0xC0	; 192
    13b2:	08 95       	ret

000013b4 <__fp_pscA>:
    13b4:	00 24       	eor	r0, r0
    13b6:	0a 94       	dec	r0
    13b8:	16 16       	cp	r1, r22
    13ba:	17 06       	cpc	r1, r23
    13bc:	18 06       	cpc	r1, r24
    13be:	09 06       	cpc	r0, r25
    13c0:	08 95       	ret

000013c2 <__fp_pscB>:
    13c2:	00 24       	eor	r0, r0
    13c4:	0a 94       	dec	r0
    13c6:	12 16       	cp	r1, r18
    13c8:	13 06       	cpc	r1, r19
    13ca:	14 06       	cpc	r1, r20
    13cc:	05 06       	cpc	r0, r21
    13ce:	08 95       	ret

000013d0 <__fp_round>:
    13d0:	09 2e       	mov	r0, r25
    13d2:	03 94       	inc	r0
    13d4:	00 0c       	add	r0, r0
    13d6:	11 f4       	brne	.+4      	; 0x13dc <__fp_round+0xc>
    13d8:	88 23       	and	r24, r24
    13da:	52 f0       	brmi	.+20     	; 0x13f0 <__fp_round+0x20>
    13dc:	bb 0f       	add	r27, r27
    13de:	40 f4       	brcc	.+16     	; 0x13f0 <__fp_round+0x20>
    13e0:	bf 2b       	or	r27, r31
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__fp_round+0x18>
    13e4:	60 ff       	sbrs	r22, 0
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <__fp_round+0x20>
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	08 95       	ret

000013f2 <__fp_split3>:
    13f2:	57 fd       	sbrc	r21, 7
    13f4:	90 58       	subi	r25, 0x80	; 128
    13f6:	44 0f       	add	r20, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	59 f0       	breq	.+22     	; 0x1412 <__fp_splitA+0x10>
    13fc:	5f 3f       	cpi	r21, 0xFF	; 255
    13fe:	71 f0       	breq	.+28     	; 0x141c <__fp_splitA+0x1a>
    1400:	47 95       	ror	r20

00001402 <__fp_splitA>:
    1402:	88 0f       	add	r24, r24
    1404:	97 fb       	bst	r25, 7
    1406:	99 1f       	adc	r25, r25
    1408:	61 f0       	breq	.+24     	; 0x1422 <__fp_splitA+0x20>
    140a:	9f 3f       	cpi	r25, 0xFF	; 255
    140c:	79 f0       	breq	.+30     	; 0x142c <__fp_splitA+0x2a>
    140e:	87 95       	ror	r24
    1410:	08 95       	ret
    1412:	12 16       	cp	r1, r18
    1414:	13 06       	cpc	r1, r19
    1416:	14 06       	cpc	r1, r20
    1418:	55 1f       	adc	r21, r21
    141a:	f2 cf       	rjmp	.-28     	; 0x1400 <__fp_split3+0xe>
    141c:	46 95       	lsr	r20
    141e:	f1 df       	rcall	.-30     	; 0x1402 <__fp_splitA>
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <__fp_splitA+0x30>
    1422:	16 16       	cp	r1, r22
    1424:	17 06       	cpc	r1, r23
    1426:	18 06       	cpc	r1, r24
    1428:	99 1f       	adc	r25, r25
    142a:	f1 cf       	rjmp	.-30     	; 0x140e <__fp_splitA+0xc>
    142c:	86 95       	lsr	r24
    142e:	71 05       	cpc	r23, r1
    1430:	61 05       	cpc	r22, r1
    1432:	08 94       	sec
    1434:	08 95       	ret

00001436 <__fp_zero>:
    1436:	e8 94       	clt

00001438 <__fp_szero>:
    1438:	bb 27       	eor	r27, r27
    143a:	66 27       	eor	r22, r22
    143c:	77 27       	eor	r23, r23
    143e:	cb 01       	movw	r24, r22
    1440:	97 f9       	bld	r25, 7
    1442:	08 95       	ret

00001444 <__gesf2>:
    1444:	8a df       	rcall	.-236    	; 0x135a <__fp_cmp>
    1446:	08 f4       	brcc	.+2      	; 0x144a <__gesf2+0x6>
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	08 95       	ret

0000144c <__mulsf3>:
    144c:	0b d0       	rcall	.+22     	; 0x1464 <__mulsf3x>
    144e:	c0 cf       	rjmp	.-128    	; 0x13d0 <__fp_round>
    1450:	b1 df       	rcall	.-158    	; 0x13b4 <__fp_pscA>
    1452:	28 f0       	brcs	.+10     	; 0x145e <__mulsf3+0x12>
    1454:	b6 df       	rcall	.-148    	; 0x13c2 <__fp_pscB>
    1456:	18 f0       	brcs	.+6      	; 0x145e <__mulsf3+0x12>
    1458:	95 23       	and	r25, r21
    145a:	09 f0       	breq	.+2      	; 0x145e <__mulsf3+0x12>
    145c:	a2 cf       	rjmp	.-188    	; 0x13a2 <__fp_inf>
    145e:	a7 cf       	rjmp	.-178    	; 0x13ae <__fp_nan>
    1460:	11 24       	eor	r1, r1
    1462:	ea cf       	rjmp	.-44     	; 0x1438 <__fp_szero>

00001464 <__mulsf3x>:
    1464:	c6 df       	rcall	.-116    	; 0x13f2 <__fp_split3>
    1466:	a0 f3       	brcs	.-24     	; 0x1450 <__mulsf3+0x4>

00001468 <__mulsf3_pse>:
    1468:	95 9f       	mul	r25, r21
    146a:	d1 f3       	breq	.-12     	; 0x1460 <__mulsf3+0x14>
    146c:	95 0f       	add	r25, r21
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	55 1f       	adc	r21, r21
    1472:	62 9f       	mul	r22, r18
    1474:	f0 01       	movw	r30, r0
    1476:	72 9f       	mul	r23, r18
    1478:	bb 27       	eor	r27, r27
    147a:	f0 0d       	add	r31, r0
    147c:	b1 1d       	adc	r27, r1
    147e:	63 9f       	mul	r22, r19
    1480:	aa 27       	eor	r26, r26
    1482:	f0 0d       	add	r31, r0
    1484:	b1 1d       	adc	r27, r1
    1486:	aa 1f       	adc	r26, r26
    1488:	64 9f       	mul	r22, r20
    148a:	66 27       	eor	r22, r22
    148c:	b0 0d       	add	r27, r0
    148e:	a1 1d       	adc	r26, r1
    1490:	66 1f       	adc	r22, r22
    1492:	82 9f       	mul	r24, r18
    1494:	22 27       	eor	r18, r18
    1496:	b0 0d       	add	r27, r0
    1498:	a1 1d       	adc	r26, r1
    149a:	62 1f       	adc	r22, r18
    149c:	73 9f       	mul	r23, r19
    149e:	b0 0d       	add	r27, r0
    14a0:	a1 1d       	adc	r26, r1
    14a2:	62 1f       	adc	r22, r18
    14a4:	83 9f       	mul	r24, r19
    14a6:	a0 0d       	add	r26, r0
    14a8:	61 1d       	adc	r22, r1
    14aa:	22 1f       	adc	r18, r18
    14ac:	74 9f       	mul	r23, r20
    14ae:	33 27       	eor	r19, r19
    14b0:	a0 0d       	add	r26, r0
    14b2:	61 1d       	adc	r22, r1
    14b4:	23 1f       	adc	r18, r19
    14b6:	84 9f       	mul	r24, r20
    14b8:	60 0d       	add	r22, r0
    14ba:	21 1d       	adc	r18, r1
    14bc:	82 2f       	mov	r24, r18
    14be:	76 2f       	mov	r23, r22
    14c0:	6a 2f       	mov	r22, r26
    14c2:	11 24       	eor	r1, r1
    14c4:	9f 57       	subi	r25, 0x7F	; 127
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	8a f0       	brmi	.+34     	; 0x14ec <__mulsf3_pse+0x84>
    14ca:	e1 f0       	breq	.+56     	; 0x1504 <__mulsf3_pse+0x9c>
    14cc:	88 23       	and	r24, r24
    14ce:	4a f0       	brmi	.+18     	; 0x14e2 <__mulsf3_pse+0x7a>
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	bb 1f       	adc	r27, r27
    14d6:	66 1f       	adc	r22, r22
    14d8:	77 1f       	adc	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	91 50       	subi	r25, 0x01	; 1
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	a9 f7       	brne	.-22     	; 0x14cc <__mulsf3_pse+0x64>
    14e2:	9e 3f       	cpi	r25, 0xFE	; 254
    14e4:	51 05       	cpc	r21, r1
    14e6:	70 f0       	brcs	.+28     	; 0x1504 <__mulsf3_pse+0x9c>
    14e8:	5c cf       	rjmp	.-328    	; 0x13a2 <__fp_inf>
    14ea:	a6 cf       	rjmp	.-180    	; 0x1438 <__fp_szero>
    14ec:	5f 3f       	cpi	r21, 0xFF	; 255
    14ee:	ec f3       	brlt	.-6      	; 0x14ea <__mulsf3_pse+0x82>
    14f0:	98 3e       	cpi	r25, 0xE8	; 232
    14f2:	dc f3       	brlt	.-10     	; 0x14ea <__mulsf3_pse+0x82>
    14f4:	86 95       	lsr	r24
    14f6:	77 95       	ror	r23
    14f8:	67 95       	ror	r22
    14fa:	b7 95       	ror	r27
    14fc:	f7 95       	ror	r31
    14fe:	e7 95       	ror	r30
    1500:	9f 5f       	subi	r25, 0xFF	; 255
    1502:	c1 f7       	brne	.-16     	; 0x14f4 <__mulsf3_pse+0x8c>
    1504:	fe 2b       	or	r31, r30
    1506:	88 0f       	add	r24, r24
    1508:	91 1d       	adc	r25, r1
    150a:	96 95       	lsr	r25
    150c:	87 95       	ror	r24
    150e:	97 f9       	bld	r25, 7
    1510:	08 95       	ret

00001512 <vfprintf>:
    1512:	a5 e1       	ldi	r26, 0x15	; 21
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ef e8       	ldi	r30, 0x8F	; 143
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
    151e:	4c 01       	movw	r8, r24
    1520:	7f 87       	std	Y+15, r23	; 0x0f
    1522:	6e 87       	std	Y+14, r22	; 0x0e
    1524:	fc 01       	movw	r30, r24
    1526:	17 82       	std	Z+7, r1	; 0x07
    1528:	16 82       	std	Z+6, r1	; 0x06
    152a:	83 81       	ldd	r24, Z+3	; 0x03
    152c:	81 fd       	sbrc	r24, 1
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <vfprintf+0x26>
    1530:	76 c3       	rjmp	.+1772   	; 0x1c1e <vfprintf+0x70c>
    1532:	4c 85       	ldd	r20, Y+12	; 0x0c
    1534:	5d 85       	ldd	r21, Y+13	; 0x0d
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <vfprintf+0x2e>
    1538:	1e 01       	movw	r2, r28
    153a:	08 94       	sec
    153c:	21 1c       	adc	r2, r1
    153e:	31 1c       	adc	r3, r1
    1540:	f4 01       	movw	r30, r8
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	ee 85       	ldd	r30, Y+14	; 0x0e
    1546:	ff 85       	ldd	r31, Y+15	; 0x0f
    1548:	93 fd       	sbrc	r25, 3
    154a:	85 91       	lpm	r24, Z+
    154c:	93 ff       	sbrs	r25, 3
    154e:	81 91       	ld	r24, Z+
    1550:	ff 87       	std	Y+15, r31	; 0x0f
    1552:	ee 87       	std	Y+14, r30	; 0x0e
    1554:	88 23       	and	r24, r24
    1556:	09 f4       	brne	.+2      	; 0x155a <vfprintf+0x48>
    1558:	5e c3       	rjmp	.+1724   	; 0x1c16 <vfprintf+0x704>
    155a:	85 32       	cpi	r24, 0x25	; 37
    155c:	41 f4       	brne	.+16     	; 0x156e <vfprintf+0x5c>
    155e:	93 fd       	sbrc	r25, 3
    1560:	85 91       	lpm	r24, Z+
    1562:	93 ff       	sbrs	r25, 3
    1564:	81 91       	ld	r24, Z+
    1566:	ff 87       	std	Y+15, r31	; 0x0f
    1568:	ee 87       	std	Y+14, r30	; 0x0e
    156a:	85 32       	cpi	r24, 0x25	; 37
    156c:	59 f4       	brne	.+22     	; 0x1584 <vfprintf+0x72>
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	b4 01       	movw	r22, r8
    1572:	4c 8b       	std	Y+20, r20	; 0x14
    1574:	5d 8b       	std	Y+21, r21	; 0x15
    1576:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    157a:	4c 89       	ldd	r20, Y+20	; 0x14
    157c:	5d 89       	ldd	r21, Y+21	; 0x15
    157e:	5d 87       	std	Y+13, r21	; 0x0d
    1580:	4c 87       	std	Y+12, r20	; 0x0c
    1582:	d7 cf       	rjmp	.-82     	; 0x1532 <vfprintf+0x20>
    1584:	ff 24       	eor	r15, r15
    1586:	dd 24       	eor	r13, r13
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	10 32       	cpi	r17, 0x20	; 32
    158c:	b0 f4       	brcc	.+44     	; 0x15ba <vfprintf+0xa8>
    158e:	8b 32       	cpi	r24, 0x2B	; 43
    1590:	69 f0       	breq	.+26     	; 0x15ac <vfprintf+0x9a>
    1592:	8c 32       	cpi	r24, 0x2C	; 44
    1594:	28 f4       	brcc	.+10     	; 0x15a0 <vfprintf+0x8e>
    1596:	80 32       	cpi	r24, 0x20	; 32
    1598:	51 f0       	breq	.+20     	; 0x15ae <vfprintf+0x9c>
    159a:	83 32       	cpi	r24, 0x23	; 35
    159c:	71 f4       	brne	.+28     	; 0x15ba <vfprintf+0xa8>
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <vfprintf+0xa4>
    15a0:	8d 32       	cpi	r24, 0x2D	; 45
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <vfprintf+0xa0>
    15a4:	80 33       	cpi	r24, 0x30	; 48
    15a6:	49 f4       	brne	.+18     	; 0x15ba <vfprintf+0xa8>
    15a8:	11 60       	ori	r17, 0x01	; 1
    15aa:	2c c0       	rjmp	.+88     	; 0x1604 <vfprintf+0xf2>
    15ac:	12 60       	ori	r17, 0x02	; 2
    15ae:	14 60       	ori	r17, 0x04	; 4
    15b0:	29 c0       	rjmp	.+82     	; 0x1604 <vfprintf+0xf2>
    15b2:	18 60       	ori	r17, 0x08	; 8
    15b4:	27 c0       	rjmp	.+78     	; 0x1604 <vfprintf+0xf2>
    15b6:	10 61       	ori	r17, 0x10	; 16
    15b8:	25 c0       	rjmp	.+74     	; 0x1604 <vfprintf+0xf2>
    15ba:	17 fd       	sbrc	r17, 7
    15bc:	2e c0       	rjmp	.+92     	; 0x161a <vfprintf+0x108>
    15be:	28 2f       	mov	r18, r24
    15c0:	20 53       	subi	r18, 0x30	; 48
    15c2:	2a 30       	cpi	r18, 0x0A	; 10
    15c4:	98 f4       	brcc	.+38     	; 0x15ec <vfprintf+0xda>
    15c6:	16 ff       	sbrs	r17, 6
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <vfprintf+0xc8>
    15ca:	8f 2d       	mov	r24, r15
    15cc:	88 0f       	add	r24, r24
    15ce:	f8 2e       	mov	r15, r24
    15d0:	ff 0c       	add	r15, r15
    15d2:	ff 0c       	add	r15, r15
    15d4:	f8 0e       	add	r15, r24
    15d6:	f2 0e       	add	r15, r18
    15d8:	15 c0       	rjmp	.+42     	; 0x1604 <vfprintf+0xf2>
    15da:	8d 2d       	mov	r24, r13
    15dc:	88 0f       	add	r24, r24
    15de:	d8 2e       	mov	r13, r24
    15e0:	dd 0c       	add	r13, r13
    15e2:	dd 0c       	add	r13, r13
    15e4:	d8 0e       	add	r13, r24
    15e6:	d2 0e       	add	r13, r18
    15e8:	10 62       	ori	r17, 0x20	; 32
    15ea:	0c c0       	rjmp	.+24     	; 0x1604 <vfprintf+0xf2>
    15ec:	8e 32       	cpi	r24, 0x2E	; 46
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <vfprintf+0xe6>
    15f0:	16 fd       	sbrc	r17, 6
    15f2:	11 c3       	rjmp	.+1570   	; 0x1c16 <vfprintf+0x704>
    15f4:	10 64       	ori	r17, 0x40	; 64
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0xf2>
    15f8:	8c 36       	cpi	r24, 0x6C	; 108
    15fa:	11 f4       	brne	.+4      	; 0x1600 <vfprintf+0xee>
    15fc:	10 68       	ori	r17, 0x80	; 128
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0xf2>
    1600:	88 36       	cpi	r24, 0x68	; 104
    1602:	59 f4       	brne	.+22     	; 0x161a <vfprintf+0x108>
    1604:	ee 85       	ldd	r30, Y+14	; 0x0e
    1606:	ff 85       	ldd	r31, Y+15	; 0x0f
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	ff 87       	std	Y+15, r31	; 0x0f
    1612:	ee 87       	std	Y+14, r30	; 0x0e
    1614:	88 23       	and	r24, r24
    1616:	09 f0       	breq	.+2      	; 0x161a <vfprintf+0x108>
    1618:	b8 cf       	rjmp	.-144    	; 0x158a <vfprintf+0x78>
    161a:	98 2f       	mov	r25, r24
    161c:	95 54       	subi	r25, 0x45	; 69
    161e:	93 30       	cpi	r25, 0x03	; 3
    1620:	18 f4       	brcc	.+6      	; 0x1628 <vfprintf+0x116>
    1622:	10 61       	ori	r17, 0x10	; 16
    1624:	80 5e       	subi	r24, 0xE0	; 224
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <vfprintf+0x122>
    1628:	98 2f       	mov	r25, r24
    162a:	95 56       	subi	r25, 0x65	; 101
    162c:	93 30       	cpi	r25, 0x03	; 3
    162e:	08 f0       	brcs	.+2      	; 0x1632 <vfprintf+0x120>
    1630:	a2 c1       	rjmp	.+836    	; 0x1976 <vfprintf+0x464>
    1632:	1f 7e       	andi	r17, 0xEF	; 239
    1634:	16 fd       	sbrc	r17, 6
    1636:	02 c0       	rjmp	.+4      	; 0x163c <vfprintf+0x12a>
    1638:	e6 e0       	ldi	r30, 0x06	; 6
    163a:	fe 2e       	mov	r15, r30
    163c:	1f 73       	andi	r17, 0x3F	; 63
    163e:	85 36       	cpi	r24, 0x65	; 101
    1640:	11 f4       	brne	.+4      	; 0x1646 <vfprintf+0x134>
    1642:	10 64       	ori	r17, 0x40	; 64
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x140>
    1646:	86 36       	cpi	r24, 0x66	; 102
    1648:	11 f4       	brne	.+4      	; 0x164e <vfprintf+0x13c>
    164a:	10 68       	ori	r17, 0x80	; 128
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x140>
    164e:	f1 10       	cpse	r15, r1
    1650:	fa 94       	dec	r15
    1652:	17 ff       	sbrs	r17, 7
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <vfprintf+0x152>
    1656:	fb e3       	ldi	r31, 0x3B	; 59
    1658:	ff 15       	cp	r31, r15
    165a:	48 f0       	brcs	.+18     	; 0x166e <vfprintf+0x15c>
    165c:	ef 2c       	mov	r14, r15
    165e:	e3 94       	inc	r14
    1660:	27 e0       	ldi	r18, 0x07	; 7
    1662:	0d c0       	rjmp	.+26     	; 0x167e <vfprintf+0x16c>
    1664:	27 e0       	ldi	r18, 0x07	; 7
    1666:	2f 15       	cp	r18, r15
    1668:	30 f0       	brcs	.+12     	; 0x1676 <vfprintf+0x164>
    166a:	2f 2d       	mov	r18, r15
    166c:	07 c0       	rjmp	.+14     	; 0x167c <vfprintf+0x16a>
    166e:	27 e0       	ldi	r18, 0x07	; 7
    1670:	7c e3       	ldi	r23, 0x3C	; 60
    1672:	e7 2e       	mov	r14, r23
    1674:	04 c0       	rjmp	.+8      	; 0x167e <vfprintf+0x16c>
    1676:	27 e0       	ldi	r18, 0x07	; 7
    1678:	67 e0       	ldi	r22, 0x07	; 7
    167a:	f6 2e       	mov	r15, r22
    167c:	ee 24       	eor	r14, r14
    167e:	ca 01       	movw	r24, r20
    1680:	04 96       	adiw	r24, 0x04	; 4
    1682:	9d 87       	std	Y+13, r25	; 0x0d
    1684:	8c 87       	std	Y+12, r24	; 0x0c
    1686:	fa 01       	movw	r30, r20
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	a1 01       	movw	r20, r2
    1692:	0e 2d       	mov	r16, r14
    1694:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__ftoa_engine>
    1698:	5c 01       	movw	r10, r24
    169a:	c9 80       	ldd	r12, Y+1	; 0x01
    169c:	2c 2d       	mov	r18, r12
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	39 8b       	std	Y+17, r19	; 0x11
    16a2:	28 8b       	std	Y+16, r18	; 0x10
    16a4:	c0 fe       	sbrs	r12, 0
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <vfprintf+0x19c>
    16a8:	38 89       	ldd	r19, Y+16	; 0x10
    16aa:	33 ff       	sbrs	r19, 3
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x1a8>
    16ae:	11 fd       	sbrc	r17, 1
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <vfprintf+0x1ac>
    16b2:	12 ff       	sbrs	r17, 2
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <vfprintf+0x1b0>
    16b6:	00 e2       	ldi	r16, 0x20	; 32
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <vfprintf+0x1b2>
    16ba:	0d e2       	ldi	r16, 0x2D	; 45
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <vfprintf+0x1b2>
    16be:	0b e2       	ldi	r16, 0x2B	; 43
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <vfprintf+0x1b2>
    16c2:	00 e0       	ldi	r16, 0x00	; 0
    16c4:	88 89       	ldd	r24, Y+16	; 0x10
    16c6:	99 89       	ldd	r25, Y+17	; 0x11
    16c8:	8c 70       	andi	r24, 0x0C	; 12
    16ca:	90 70       	andi	r25, 0x00	; 0
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <vfprintf+0x1c0>
    16d0:	3c c0       	rjmp	.+120    	; 0x174a <vfprintf+0x238>
    16d2:	00 23       	and	r16, r16
    16d4:	11 f0       	breq	.+4      	; 0x16da <vfprintf+0x1c8>
    16d6:	84 e0       	ldi	r24, 0x04	; 4
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x1ca>
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	8d 15       	cp	r24, r13
    16de:	58 f4       	brcc	.+22     	; 0x16f6 <vfprintf+0x1e4>
    16e0:	d8 1a       	sub	r13, r24
    16e2:	13 fd       	sbrc	r17, 3
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <vfprintf+0x1e6>
    16e6:	80 e2       	ldi	r24, 0x20	; 32
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b4 01       	movw	r22, r8
    16ec:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    16f0:	da 94       	dec	r13
    16f2:	c9 f7       	brne	.-14     	; 0x16e6 <vfprintf+0x1d4>
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <vfprintf+0x1e6>
    16f6:	dd 24       	eor	r13, r13
    16f8:	00 23       	and	r16, r16
    16fa:	29 f0       	breq	.+10     	; 0x1706 <vfprintf+0x1f4>
    16fc:	80 2f       	mov	r24, r16
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b4 01       	movw	r22, r8
    1702:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1706:	88 89       	ldd	r24, Y+16	; 0x10
    1708:	83 fd       	sbrc	r24, 3
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <vfprintf+0x204>
    170c:	3c e6       	ldi	r19, 0x6C	; 108
    170e:	e3 2e       	mov	r14, r19
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	f3 2e       	mov	r15, r19
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <vfprintf+0x226>
    1716:	28 e6       	ldi	r18, 0x68	; 104
    1718:	e2 2e       	mov	r14, r18
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	f2 2e       	mov	r15, r18
    171e:	0c c0       	rjmp	.+24     	; 0x1738 <vfprintf+0x226>
    1720:	01 15       	cp	r16, r1
    1722:	11 05       	cpc	r17, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x216>
    1726:	80 52       	subi	r24, 0x20	; 32
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	b4 01       	movw	r22, r8
    172c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1730:	08 94       	sec
    1732:	e1 1c       	adc	r14, r1
    1734:	f1 1c       	adc	r15, r1
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <vfprintf+0x22e>
    1738:	01 2f       	mov	r16, r17
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	00 71       	andi	r16, 0x10	; 16
    173e:	10 70       	andi	r17, 0x00	; 0
    1740:	f7 01       	movw	r30, r14
    1742:	84 91       	lpm	r24, Z
    1744:	88 23       	and	r24, r24
    1746:	61 f7       	brne	.-40     	; 0x1720 <vfprintf+0x20e>
    1748:	63 c2       	rjmp	.+1222   	; 0x1c10 <vfprintf+0x6fe>
    174a:	17 ff       	sbrs	r17, 7
    174c:	0e c0       	rjmp	.+28     	; 0x176a <vfprintf+0x258>
    174e:	ea 0c       	add	r14, r10
    1750:	f8 89       	ldd	r31, Y+16	; 0x10
    1752:	f4 ff       	sbrs	r31, 4
    1754:	04 c0       	rjmp	.+8      	; 0x175e <vfprintf+0x24c>
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	81 33       	cpi	r24, 0x31	; 49
    175a:	09 f4       	brne	.+2      	; 0x175e <vfprintf+0x24c>
    175c:	ea 94       	dec	r14
    175e:	1e 14       	cp	r1, r14
    1760:	4c f5       	brge	.+82     	; 0x17b4 <vfprintf+0x2a2>
    1762:	28 e0       	ldi	r18, 0x08	; 8
    1764:	2e 15       	cp	r18, r14
    1766:	48 f1       	brcs	.+82     	; 0x17ba <vfprintf+0x2a8>
    1768:	2c c0       	rjmp	.+88     	; 0x17c2 <vfprintf+0x2b0>
    176a:	16 fd       	sbrc	r17, 6
    176c:	2a c0       	rjmp	.+84     	; 0x17c2 <vfprintf+0x2b0>
    176e:	8f 2d       	mov	r24, r15
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	8a 15       	cp	r24, r10
    1774:	9b 05       	cpc	r25, r11
    1776:	44 f0       	brlt	.+16     	; 0x1788 <vfprintf+0x276>
    1778:	3c ef       	ldi	r19, 0xFC	; 252
    177a:	a3 16       	cp	r10, r19
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	b3 06       	cpc	r11, r19
    1780:	1c f0       	brlt	.+6      	; 0x1788 <vfprintf+0x276>
    1782:	10 68       	ori	r17, 0x80	; 128
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <vfprintf+0x276>
    1786:	fa 94       	dec	r15
    1788:	ff 20       	and	r15, r15
    178a:	49 f0       	breq	.+18     	; 0x179e <vfprintf+0x28c>
    178c:	e2 e0       	ldi	r30, 0x02	; 2
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	ec 0f       	add	r30, r28
    1792:	fd 1f       	adc	r31, r29
    1794:	ef 0d       	add	r30, r15
    1796:	f1 1d       	adc	r31, r1
    1798:	80 81       	ld	r24, Z
    179a:	80 33       	cpi	r24, 0x30	; 48
    179c:	a1 f3       	breq	.-24     	; 0x1786 <vfprintf+0x274>
    179e:	17 ff       	sbrs	r17, 7
    17a0:	10 c0       	rjmp	.+32     	; 0x17c2 <vfprintf+0x2b0>
    17a2:	ef 2c       	mov	r14, r15
    17a4:	e3 94       	inc	r14
    17a6:	8f 2d       	mov	r24, r15
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a8 16       	cp	r10, r24
    17ac:	b9 06       	cpc	r11, r25
    17ae:	44 f4       	brge	.+16     	; 0x17c0 <vfprintf+0x2ae>
    17b0:	fa 18       	sub	r15, r10
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <vfprintf+0x2b0>
    17b4:	ee 24       	eor	r14, r14
    17b6:	e3 94       	inc	r14
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <vfprintf+0x2b0>
    17ba:	98 e0       	ldi	r25, 0x08	; 8
    17bc:	e9 2e       	mov	r14, r25
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <vfprintf+0x2b0>
    17c0:	ff 24       	eor	r15, r15
    17c2:	17 ff       	sbrs	r17, 7
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <vfprintf+0x2c2>
    17c6:	1a 14       	cp	r1, r10
    17c8:	1b 04       	cpc	r1, r11
    17ca:	3c f4       	brge	.+14     	; 0x17da <vfprintf+0x2c8>
    17cc:	95 01       	movw	r18, r10
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <vfprintf+0x2cc>
    17d4:	25 e0       	ldi	r18, 0x05	; 5
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x2cc>
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	00 23       	and	r16, r16
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <vfprintf+0x2d4>
    17e2:	2f 5f       	subi	r18, 0xFF	; 255
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	ff 20       	and	r15, r15
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <vfprintf+0x2e2>
    17ea:	8f 2d       	mov	r24, r15
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	28 0f       	add	r18, r24
    17f2:	39 1f       	adc	r19, r25
    17f4:	8d 2d       	mov	r24, r13
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	14 f4       	brge	.+4      	; 0x1802 <vfprintf+0x2f0>
    17fe:	d2 1a       	sub	r13, r18
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <vfprintf+0x2f2>
    1802:	dd 24       	eor	r13, r13
    1804:	61 2e       	mov	r6, r17
    1806:	77 24       	eor	r7, r7
    1808:	c3 01       	movw	r24, r6
    180a:	89 70       	andi	r24, 0x09	; 9
    180c:	90 70       	andi	r25, 0x00	; 0
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	49 f4       	brne	.+18     	; 0x1824 <vfprintf+0x312>
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <vfprintf+0x30e>
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	b4 01       	movw	r22, r8
    181a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    181e:	da 94       	dec	r13
    1820:	dd 20       	and	r13, r13
    1822:	c1 f7       	brne	.-16     	; 0x1814 <vfprintf+0x302>
    1824:	00 23       	and	r16, r16
    1826:	29 f0       	breq	.+10     	; 0x1832 <vfprintf+0x320>
    1828:	80 2f       	mov	r24, r16
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	b4 01       	movw	r22, r8
    182e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1832:	63 fc       	sbrc	r6, 3
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x336>
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <vfprintf+0x332>
    1838:	80 e3       	ldi	r24, 0x30	; 48
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	b4 01       	movw	r22, r8
    183e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1842:	da 94       	dec	r13
    1844:	dd 20       	and	r13, r13
    1846:	c1 f7       	brne	.-16     	; 0x1838 <vfprintf+0x326>
    1848:	17 ff       	sbrs	r17, 7
    184a:	48 c0       	rjmp	.+144    	; 0x18dc <vfprintf+0x3ca>
    184c:	85 01       	movw	r16, r10
    184e:	b7 fe       	sbrs	r11, 7
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x344>
    1852:	00 e0       	ldi	r16, 0x00	; 0
    1854:	10 e0       	ldi	r17, 0x00	; 0
    1856:	66 24       	eor	r6, r6
    1858:	77 24       	eor	r7, r7
    185a:	95 01       	movw	r18, r10
    185c:	2e 19       	sub	r18, r14
    185e:	31 09       	sbc	r19, r1
    1860:	3b 8b       	std	Y+19, r19	; 0x13
    1862:	2a 8b       	std	Y+18, r18	; 0x12
    1864:	25 01       	movw	r4, r10
    1866:	40 1a       	sub	r4, r16
    1868:	51 0a       	sbc	r5, r17
    186a:	42 0c       	add	r4, r2
    186c:	53 1c       	adc	r5, r3
    186e:	6f 2d       	mov	r22, r15
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	ee 24       	eor	r14, r14
    1874:	ff 24       	eor	r15, r15
    1876:	e6 1a       	sub	r14, r22
    1878:	f7 0a       	sbc	r15, r23
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	0f 3f       	cpi	r16, 0xFF	; 255
    187e:	13 07       	cpc	r17, r19
    1880:	29 f4       	brne	.+10     	; 0x188c <vfprintf+0x37a>
    1882:	8e e2       	ldi	r24, 0x2E	; 46
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	b4 01       	movw	r22, r8
    1888:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    188c:	a0 16       	cp	r10, r16
    188e:	b1 06       	cpc	r11, r17
    1890:	54 f0       	brlt	.+20     	; 0x18a6 <vfprintf+0x394>
    1892:	2a 89       	ldd	r18, Y+18	; 0x12
    1894:	3b 89       	ldd	r19, Y+19	; 0x13
    1896:	20 17       	cp	r18, r16
    1898:	31 07       	cpc	r19, r17
    189a:	2c f4       	brge	.+10     	; 0x18a6 <vfprintf+0x394>
    189c:	f2 01       	movw	r30, r4
    189e:	e6 0d       	add	r30, r6
    18a0:	f7 1d       	adc	r31, r7
    18a2:	81 81       	ldd	r24, Z+1	; 0x01
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <vfprintf+0x396>
    18a6:	80 e3       	ldi	r24, 0x30	; 48
    18a8:	01 50       	subi	r16, 0x01	; 1
    18aa:	10 40       	sbci	r17, 0x00	; 0
    18ac:	08 94       	sec
    18ae:	61 1c       	adc	r6, r1
    18b0:	71 1c       	adc	r7, r1
    18b2:	0e 15       	cp	r16, r14
    18b4:	1f 05       	cpc	r17, r15
    18b6:	2c f0       	brlt	.+10     	; 0x18c2 <vfprintf+0x3b0>
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	b4 01       	movw	r22, r8
    18bc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    18c0:	dc cf       	rjmp	.-72     	; 0x187a <vfprintf+0x368>
    18c2:	0a 15       	cp	r16, r10
    18c4:	1b 05       	cpc	r17, r11
    18c6:	41 f4       	brne	.+16     	; 0x18d8 <vfprintf+0x3c6>
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	96 33       	cpi	r25, 0x36	; 54
    18cc:	20 f4       	brcc	.+8      	; 0x18d6 <vfprintf+0x3c4>
    18ce:	95 33       	cpi	r25, 0x35	; 53
    18d0:	19 f4       	brne	.+6      	; 0x18d8 <vfprintf+0x3c6>
    18d2:	38 89       	ldd	r19, Y+16	; 0x10
    18d4:	34 ff       	sbrs	r19, 4
    18d6:	81 e3       	ldi	r24, 0x31	; 49
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	49 c0       	rjmp	.+146    	; 0x196e <vfprintf+0x45c>
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	81 33       	cpi	r24, 0x31	; 49
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <vfprintf+0x3d4>
    18e2:	9f ee       	ldi	r25, 0xEF	; 239
    18e4:	c9 22       	and	r12, r25
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	b4 01       	movw	r22, r8
    18ea:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    18ee:	ff 20       	and	r15, r15
    18f0:	89 f0       	breq	.+34     	; 0x1914 <vfprintf+0x402>
    18f2:	8e e2       	ldi	r24, 0x2E	; 46
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b4 01       	movw	r22, r8
    18f8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    18fc:	12 e0       	ldi	r17, 0x02	; 2
    18fe:	f1 01       	movw	r30, r2
    1900:	e1 0f       	add	r30, r17
    1902:	f1 1d       	adc	r31, r1
    1904:	1f 5f       	subi	r17, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	b4 01       	movw	r22, r8
    190c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1910:	fa 94       	dec	r15
    1912:	a9 f7       	brne	.-22     	; 0x18fe <vfprintf+0x3ec>
    1914:	64 fe       	sbrs	r6, 4
    1916:	03 c0       	rjmp	.+6      	; 0x191e <vfprintf+0x40c>
    1918:	85 e4       	ldi	r24, 0x45	; 69
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <vfprintf+0x410>
    191e:	85 e6       	ldi	r24, 0x65	; 101
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	b4 01       	movw	r22, r8
    1924:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1928:	b7 fc       	sbrc	r11, 7
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <vfprintf+0x424>
    192c:	a1 14       	cp	r10, r1
    192e:	b1 04       	cpc	r11, r1
    1930:	41 f4       	brne	.+16     	; 0x1942 <vfprintf+0x430>
    1932:	c4 fe       	sbrs	r12, 4
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <vfprintf+0x430>
    1936:	b0 94       	com	r11
    1938:	a1 94       	neg	r10
    193a:	b1 08       	sbc	r11, r1
    193c:	b3 94       	inc	r11
    193e:	8d e2       	ldi	r24, 0x2D	; 45
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <vfprintf+0x432>
    1942:	8b e2       	ldi	r24, 0x2B	; 43
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	b4 01       	movw	r22, r8
    1948:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	05 c0       	rjmp	.+10     	; 0x195a <vfprintf+0x448>
    1950:	8f 5f       	subi	r24, 0xFF	; 255
    1952:	e6 ef       	ldi	r30, 0xF6	; 246
    1954:	ff ef       	ldi	r31, 0xFF	; 255
    1956:	ae 0e       	add	r10, r30
    1958:	bf 1e       	adc	r11, r31
    195a:	fa e0       	ldi	r31, 0x0A	; 10
    195c:	af 16       	cp	r10, r31
    195e:	b1 04       	cpc	r11, r1
    1960:	bc f7       	brge	.-18     	; 0x1950 <vfprintf+0x43e>
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	b4 01       	movw	r22, r8
    1966:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    196a:	c5 01       	movw	r24, r10
    196c:	c0 96       	adiw	r24, 0x30	; 48
    196e:	b4 01       	movw	r22, r8
    1970:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1974:	4d c1       	rjmp	.+666    	; 0x1c10 <vfprintf+0x6fe>
    1976:	83 36       	cpi	r24, 0x63	; 99
    1978:	31 f0       	breq	.+12     	; 0x1986 <vfprintf+0x474>
    197a:	83 37       	cpi	r24, 0x73	; 115
    197c:	89 f0       	breq	.+34     	; 0x19a0 <vfprintf+0x48e>
    197e:	83 35       	cpi	r24, 0x53	; 83
    1980:	09 f0       	breq	.+2      	; 0x1984 <vfprintf+0x472>
    1982:	59 c0       	rjmp	.+178    	; 0x1a36 <vfprintf+0x524>
    1984:	22 c0       	rjmp	.+68     	; 0x19ca <vfprintf+0x4b8>
    1986:	9a 01       	movw	r18, r20
    1988:	2e 5f       	subi	r18, 0xFE	; 254
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	3d 87       	std	Y+13, r19	; 0x0d
    198e:	2c 87       	std	Y+12, r18	; 0x0c
    1990:	fa 01       	movw	r30, r20
    1992:	80 81       	ld	r24, Z
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	e8 2e       	mov	r14, r24
    199a:	f1 2c       	mov	r15, r1
    199c:	51 01       	movw	r10, r2
    199e:	13 c0       	rjmp	.+38     	; 0x19c6 <vfprintf+0x4b4>
    19a0:	9a 01       	movw	r18, r20
    19a2:	2e 5f       	subi	r18, 0xFE	; 254
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	3d 87       	std	Y+13, r19	; 0x0d
    19a8:	2c 87       	std	Y+12, r18	; 0x0c
    19aa:	fa 01       	movw	r30, r20
    19ac:	a0 80       	ld	r10, Z
    19ae:	b1 80       	ldd	r11, Z+1	; 0x01
    19b0:	16 ff       	sbrs	r17, 6
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <vfprintf+0x4a8>
    19b4:	6f 2d       	mov	r22, r15
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vfprintf+0x4ac>
    19ba:	6f ef       	ldi	r22, 0xFF	; 255
    19bc:	7f ef       	ldi	r23, 0xFF	; 255
    19be:	c5 01       	movw	r24, r10
    19c0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <strnlen>
    19c4:	7c 01       	movw	r14, r24
    19c6:	1f 77       	andi	r17, 0x7F	; 127
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <vfprintf+0x4e0>
    19ca:	9a 01       	movw	r18, r20
    19cc:	2e 5f       	subi	r18, 0xFE	; 254
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255
    19d0:	3d 87       	std	Y+13, r19	; 0x0d
    19d2:	2c 87       	std	Y+12, r18	; 0x0c
    19d4:	fa 01       	movw	r30, r20
    19d6:	a0 80       	ld	r10, Z
    19d8:	b1 80       	ldd	r11, Z+1	; 0x01
    19da:	16 ff       	sbrs	r17, 6
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <vfprintf+0x4d2>
    19de:	6f 2d       	mov	r22, r15
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <vfprintf+0x4d6>
    19e4:	6f ef       	ldi	r22, 0xFF	; 255
    19e6:	7f ef       	ldi	r23, 0xFF	; 255
    19e8:	c5 01       	movw	r24, r10
    19ea:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <strnlen_P>
    19ee:	7c 01       	movw	r14, r24
    19f0:	10 68       	ori	r17, 0x80	; 128
    19f2:	13 fd       	sbrc	r17, 3
    19f4:	1c c0       	rjmp	.+56     	; 0x1a2e <vfprintf+0x51c>
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <vfprintf+0x4f2>
    19f8:	80 e2       	ldi	r24, 0x20	; 32
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	b4 01       	movw	r22, r8
    19fe:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1a02:	da 94       	dec	r13
    1a04:	8d 2d       	mov	r24, r13
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	e8 16       	cp	r14, r24
    1a0a:	f9 06       	cpc	r15, r25
    1a0c:	a8 f3       	brcs	.-22     	; 0x19f8 <vfprintf+0x4e6>
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <vfprintf+0x51c>
    1a10:	f5 01       	movw	r30, r10
    1a12:	17 fd       	sbrc	r17, 7
    1a14:	85 91       	lpm	r24, Z+
    1a16:	17 ff       	sbrs	r17, 7
    1a18:	81 91       	ld	r24, Z+
    1a1a:	5f 01       	movw	r10, r30
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	b4 01       	movw	r22, r8
    1a20:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1a24:	d1 10       	cpse	r13, r1
    1a26:	da 94       	dec	r13
    1a28:	08 94       	sec
    1a2a:	e1 08       	sbc	r14, r1
    1a2c:	f1 08       	sbc	r15, r1
    1a2e:	e1 14       	cp	r14, r1
    1a30:	f1 04       	cpc	r15, r1
    1a32:	71 f7       	brne	.-36     	; 0x1a10 <vfprintf+0x4fe>
    1a34:	ed c0       	rjmp	.+474    	; 0x1c10 <vfprintf+0x6fe>
    1a36:	84 36       	cpi	r24, 0x64	; 100
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <vfprintf+0x52c>
    1a3a:	89 36       	cpi	r24, 0x69	; 105
    1a3c:	71 f5       	brne	.+92     	; 0x1a9a <vfprintf+0x588>
    1a3e:	9a 01       	movw	r18, r20
    1a40:	17 ff       	sbrs	r17, 7
    1a42:	0a c0       	rjmp	.+20     	; 0x1a58 <vfprintf+0x546>
    1a44:	2c 5f       	subi	r18, 0xFC	; 252
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	3d 87       	std	Y+13, r19	; 0x0d
    1a4a:	2c 87       	std	Y+12, r18	; 0x0c
    1a4c:	fa 01       	movw	r30, r20
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	a2 81       	ldd	r26, Z+2	; 0x02
    1a54:	b3 81       	ldd	r27, Z+3	; 0x03
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <vfprintf+0x55c>
    1a58:	2e 5f       	subi	r18, 0xFE	; 254
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	3d 87       	std	Y+13, r19	; 0x0d
    1a5e:	2c 87       	std	Y+12, r18	; 0x0c
    1a60:	fa 01       	movw	r30, r20
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	aa 27       	eor	r26, r26
    1a68:	97 fd       	sbrc	r25, 7
    1a6a:	a0 95       	com	r26
    1a6c:	ba 2f       	mov	r27, r26
    1a6e:	01 2f       	mov	r16, r17
    1a70:	0f 76       	andi	r16, 0x6F	; 111
    1a72:	b7 ff       	sbrs	r27, 7
    1a74:	08 c0       	rjmp	.+16     	; 0x1a86 <vfprintf+0x574>
    1a76:	b0 95       	com	r27
    1a78:	a0 95       	com	r26
    1a7a:	90 95       	com	r25
    1a7c:	81 95       	neg	r24
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	af 4f       	sbci	r26, 0xFF	; 255
    1a82:	bf 4f       	sbci	r27, 0xFF	; 255
    1a84:	00 68       	ori	r16, 0x80	; 128
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	a1 01       	movw	r20, r2
    1a8c:	2a e0       	ldi	r18, 0x0A	; 10
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__ultoa_invert>
    1a94:	e8 2e       	mov	r14, r24
    1a96:	e2 18       	sub	r14, r2
    1a98:	41 c0       	rjmp	.+130    	; 0x1b1c <vfprintf+0x60a>
    1a9a:	85 37       	cpi	r24, 0x75	; 117
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <vfprintf+0x594>
    1a9e:	1f 7e       	andi	r17, 0xEF	; 239
    1aa0:	2a e0       	ldi	r18, 0x0A	; 10
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	20 c0       	rjmp	.+64     	; 0x1ae6 <vfprintf+0x5d4>
    1aa6:	19 7f       	andi	r17, 0xF9	; 249
    1aa8:	8f 36       	cpi	r24, 0x6F	; 111
    1aaa:	a9 f0       	breq	.+42     	; 0x1ad6 <vfprintf+0x5c4>
    1aac:	80 37       	cpi	r24, 0x70	; 112
    1aae:	20 f4       	brcc	.+8      	; 0x1ab8 <vfprintf+0x5a6>
    1ab0:	88 35       	cpi	r24, 0x58	; 88
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <vfprintf+0x5a4>
    1ab4:	b0 c0       	rjmp	.+352    	; 0x1c16 <vfprintf+0x704>
    1ab6:	0b c0       	rjmp	.+22     	; 0x1ace <vfprintf+0x5bc>
    1ab8:	80 37       	cpi	r24, 0x70	; 112
    1aba:	21 f0       	breq	.+8      	; 0x1ac4 <vfprintf+0x5b2>
    1abc:	88 37       	cpi	r24, 0x78	; 120
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <vfprintf+0x5b0>
    1ac0:	aa c0       	rjmp	.+340    	; 0x1c16 <vfprintf+0x704>
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <vfprintf+0x5b4>
    1ac4:	10 61       	ori	r17, 0x10	; 16
    1ac6:	14 ff       	sbrs	r17, 4
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <vfprintf+0x5ca>
    1aca:	14 60       	ori	r17, 0x04	; 4
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <vfprintf+0x5ca>
    1ace:	14 ff       	sbrs	r17, 4
    1ad0:	08 c0       	rjmp	.+16     	; 0x1ae2 <vfprintf+0x5d0>
    1ad2:	16 60       	ori	r17, 0x06	; 6
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <vfprintf+0x5d0>
    1ad6:	28 e0       	ldi	r18, 0x08	; 8
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <vfprintf+0x5d4>
    1adc:	20 e1       	ldi	r18, 0x10	; 16
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <vfprintf+0x5d4>
    1ae2:	20 e1       	ldi	r18, 0x10	; 16
    1ae4:	32 e0       	ldi	r19, 0x02	; 2
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	17 ff       	sbrs	r17, 7
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <vfprintf+0x5ec>
    1aec:	04 96       	adiw	r24, 0x04	; 4
    1aee:	9d 87       	std	Y+13, r25	; 0x0d
    1af0:	8c 87       	std	Y+12, r24	; 0x0c
    1af2:	fa 01       	movw	r30, r20
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	08 c0       	rjmp	.+16     	; 0x1b0e <vfprintf+0x5fc>
    1afe:	02 96       	adiw	r24, 0x02	; 2
    1b00:	9d 87       	std	Y+13, r25	; 0x0d
    1b02:	8c 87       	std	Y+12, r24	; 0x0c
    1b04:	fa 01       	movw	r30, r20
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a1 01       	movw	r20, r2
    1b10:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__ultoa_invert>
    1b14:	e8 2e       	mov	r14, r24
    1b16:	e2 18       	sub	r14, r2
    1b18:	01 2f       	mov	r16, r17
    1b1a:	0f 77       	andi	r16, 0x7F	; 127
    1b1c:	06 ff       	sbrs	r16, 6
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <vfprintf+0x620>
    1b20:	0e 7f       	andi	r16, 0xFE	; 254
    1b22:	ef 14       	cp	r14, r15
    1b24:	30 f4       	brcc	.+12     	; 0x1b32 <vfprintf+0x620>
    1b26:	04 ff       	sbrs	r16, 4
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0x624>
    1b2a:	02 fd       	sbrc	r16, 2
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <vfprintf+0x624>
    1b2e:	0f 7e       	andi	r16, 0xEF	; 239
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x624>
    1b32:	1e 2d       	mov	r17, r14
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <vfprintf+0x626>
    1b36:	1f 2d       	mov	r17, r15
    1b38:	80 2f       	mov	r24, r16
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	04 ff       	sbrs	r16, 4
    1b3e:	0c c0       	rjmp	.+24     	; 0x1b58 <vfprintf+0x646>
    1b40:	fe 01       	movw	r30, r28
    1b42:	ee 0d       	add	r30, r14
    1b44:	f1 1d       	adc	r31, r1
    1b46:	20 81       	ld	r18, Z
    1b48:	20 33       	cpi	r18, 0x30	; 48
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <vfprintf+0x63e>
    1b4c:	09 7e       	andi	r16, 0xE9	; 233
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <vfprintf+0x650>
    1b50:	02 ff       	sbrs	r16, 2
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <vfprintf+0x64e>
    1b54:	1e 5f       	subi	r17, 0xFE	; 254
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <vfprintf+0x650>
    1b58:	86 78       	andi	r24, 0x86	; 134
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <vfprintf+0x650>
    1b60:	1f 5f       	subi	r17, 0xFF	; 255
    1b62:	a0 2e       	mov	r10, r16
    1b64:	bb 24       	eor	r11, r11
    1b66:	03 fd       	sbrc	r16, 3
    1b68:	12 c0       	rjmp	.+36     	; 0x1b8e <vfprintf+0x67c>
    1b6a:	00 ff       	sbrs	r16, 0
    1b6c:	0d c0       	rjmp	.+26     	; 0x1b88 <vfprintf+0x676>
    1b6e:	fe 2c       	mov	r15, r14
    1b70:	1d 15       	cp	r17, r13
    1b72:	50 f4       	brcc	.+20     	; 0x1b88 <vfprintf+0x676>
    1b74:	fd 0c       	add	r15, r13
    1b76:	f1 1a       	sub	r15, r17
    1b78:	1d 2d       	mov	r17, r13
    1b7a:	06 c0       	rjmp	.+12     	; 0x1b88 <vfprintf+0x676>
    1b7c:	80 e2       	ldi	r24, 0x20	; 32
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	b4 01       	movw	r22, r8
    1b82:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1b86:	1f 5f       	subi	r17, 0xFF	; 255
    1b88:	1d 15       	cp	r17, r13
    1b8a:	c0 f3       	brcs	.-16     	; 0x1b7c <vfprintf+0x66a>
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <vfprintf+0x684>
    1b8e:	1d 15       	cp	r17, r13
    1b90:	10 f4       	brcc	.+4      	; 0x1b96 <vfprintf+0x684>
    1b92:	d1 1a       	sub	r13, r17
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <vfprintf+0x686>
    1b96:	dd 24       	eor	r13, r13
    1b98:	a4 fe       	sbrs	r10, 4
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <vfprintf+0x6a8>
    1b9c:	80 e3       	ldi	r24, 0x30	; 48
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b4 01       	movw	r22, r8
    1ba2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1ba6:	a2 fe       	sbrs	r10, 2
    1ba8:	1f c0       	rjmp	.+62     	; 0x1be8 <vfprintf+0x6d6>
    1baa:	a1 fe       	sbrs	r10, 1
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <vfprintf+0x6a2>
    1bae:	88 e5       	ldi	r24, 0x58	; 88
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	10 c0       	rjmp	.+32     	; 0x1bd4 <vfprintf+0x6c2>
    1bb4:	88 e7       	ldi	r24, 0x78	; 120
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0d c0       	rjmp	.+26     	; 0x1bd4 <vfprintf+0x6c2>
    1bba:	c5 01       	movw	r24, r10
    1bbc:	86 78       	andi	r24, 0x86	; 134
    1bbe:	90 70       	andi	r25, 0x00	; 0
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	91 f0       	breq	.+36     	; 0x1be8 <vfprintf+0x6d6>
    1bc4:	a1 fc       	sbrc	r10, 1
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <vfprintf+0x6ba>
    1bc8:	80 e2       	ldi	r24, 0x20	; 32
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <vfprintf+0x6bc>
    1bcc:	8b e2       	ldi	r24, 0x2B	; 43
    1bce:	07 fd       	sbrc	r16, 7
    1bd0:	8d e2       	ldi	r24, 0x2D	; 45
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	b4 01       	movw	r22, r8
    1bd6:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <vfprintf+0x6d6>
    1bdc:	80 e3       	ldi	r24, 0x30	; 48
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1be6:	fa 94       	dec	r15
    1be8:	ef 14       	cp	r14, r15
    1bea:	c0 f3       	brcs	.-16     	; 0x1bdc <vfprintf+0x6ca>
    1bec:	ea 94       	dec	r14
    1bee:	f1 01       	movw	r30, r2
    1bf0:	ee 0d       	add	r30, r14
    1bf2:	f1 1d       	adc	r31, r1
    1bf4:	80 81       	ld	r24, Z
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	b4 01       	movw	r22, r8
    1bfa:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1bfe:	ee 20       	and	r14, r14
    1c00:	a9 f7       	brne	.-22     	; 0x1bec <vfprintf+0x6da>
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <vfprintf+0x6fe>
    1c04:	80 e2       	ldi	r24, 0x20	; 32
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	b4 01       	movw	r22, r8
    1c0a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <fputc>
    1c0e:	da 94       	dec	r13
    1c10:	dd 20       	and	r13, r13
    1c12:	c1 f7       	brne	.-16     	; 0x1c04 <vfprintf+0x6f2>
    1c14:	8e cc       	rjmp	.-1764   	; 0x1532 <vfprintf+0x20>
    1c16:	f4 01       	movw	r30, r8
    1c18:	86 81       	ldd	r24, Z+6	; 0x06
    1c1a:	97 81       	ldd	r25, Z+7	; 0x07
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <vfprintf+0x710>
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	9f ef       	ldi	r25, 0xFF	; 255
    1c22:	65 96       	adiw	r28, 0x15	; 21
    1c24:	e2 e1       	ldi	r30, 0x12	; 18
    1c26:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00001c2a <__divmodhi4>:
    1c2a:	97 fb       	bst	r25, 7
    1c2c:	09 2e       	mov	r0, r25
    1c2e:	07 26       	eor	r0, r23
    1c30:	0a d0       	rcall	.+20     	; 0x1c46 <__divmodhi4_neg1>
    1c32:	77 fd       	sbrc	r23, 7
    1c34:	04 d0       	rcall	.+8      	; 0x1c3e <__divmodhi4_neg2>
    1c36:	43 d0       	rcall	.+134    	; 0x1cbe <__udivmodhi4>
    1c38:	06 d0       	rcall	.+12     	; 0x1c46 <__divmodhi4_neg1>
    1c3a:	00 20       	and	r0, r0
    1c3c:	1a f4       	brpl	.+6      	; 0x1c44 <__divmodhi4_exit>

00001c3e <__divmodhi4_neg2>:
    1c3e:	70 95       	com	r23
    1c40:	61 95       	neg	r22
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255

00001c44 <__divmodhi4_exit>:
    1c44:	08 95       	ret

00001c46 <__divmodhi4_neg1>:
    1c46:	f6 f7       	brtc	.-4      	; 0x1c44 <__divmodhi4_exit>
    1c48:	90 95       	com	r25
    1c4a:	81 95       	neg	r24
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	08 95       	ret

00001c50 <__prologue_saves__>:
    1c50:	2f 92       	push	r2
    1c52:	3f 92       	push	r3
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	ca 1b       	sub	r28, r26
    1c7a:	db 0b       	sbc	r29, r27
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	09 94       	ijmp

00001c88 <__epilogue_restores__>:
    1c88:	2a 88       	ldd	r2, Y+18	; 0x12
    1c8a:	39 88       	ldd	r3, Y+17	; 0x11
    1c8c:	48 88       	ldd	r4, Y+16	; 0x10
    1c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    1caa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cac:	ce 0f       	add	r28, r30
    1cae:	d1 1d       	adc	r29, r1
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	ed 01       	movw	r28, r26
    1cbc:	08 95       	ret

00001cbe <__udivmodhi4>:
    1cbe:	aa 1b       	sub	r26, r26
    1cc0:	bb 1b       	sub	r27, r27
    1cc2:	51 e1       	ldi	r21, 0x11	; 17
    1cc4:	07 c0       	rjmp	.+14     	; 0x1cd4 <__udivmodhi4_ep>

00001cc6 <__udivmodhi4_loop>:
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	a6 17       	cp	r26, r22
    1ccc:	b7 07       	cpc	r27, r23
    1cce:	10 f0       	brcs	.+4      	; 0x1cd4 <__udivmodhi4_ep>
    1cd0:	a6 1b       	sub	r26, r22
    1cd2:	b7 0b       	sbc	r27, r23

00001cd4 <__udivmodhi4_ep>:
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	5a 95       	dec	r21
    1cda:	a9 f7       	brne	.-22     	; 0x1cc6 <__udivmodhi4_loop>
    1cdc:	80 95       	com	r24
    1cde:	90 95       	com	r25
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	08 95       	ret

00001ce6 <abort>:
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	f8 94       	cli
    1cec:	0c 94 6f 10 	jmp	0x20de	; 0x20de <_exit>

00001cf0 <__ftoa_engine>:
    1cf0:	28 30       	cpi	r18, 0x08	; 8
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <__ftoa_engine+0x6>
    1cf4:	27 e0       	ldi	r18, 0x07	; 7
    1cf6:	33 27       	eor	r19, r19
    1cf8:	da 01       	movw	r26, r20
    1cfa:	99 0f       	add	r25, r25
    1cfc:	31 1d       	adc	r19, r1
    1cfe:	87 fd       	sbrc	r24, 7
    1d00:	91 60       	ori	r25, 0x01	; 1
    1d02:	00 96       	adiw	r24, 0x00	; 0
    1d04:	61 05       	cpc	r22, r1
    1d06:	71 05       	cpc	r23, r1
    1d08:	39 f4       	brne	.+14     	; 0x1d18 <__ftoa_engine+0x28>
    1d0a:	32 60       	ori	r19, 0x02	; 2
    1d0c:	2e 5f       	subi	r18, 0xFE	; 254
    1d0e:	3d 93       	st	X+, r19
    1d10:	30 e3       	ldi	r19, 0x30	; 48
    1d12:	2a 95       	dec	r18
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <__ftoa_engine+0x1e>
    1d16:	08 95       	ret
    1d18:	9f 3f       	cpi	r25, 0xFF	; 255
    1d1a:	30 f0       	brcs	.+12     	; 0x1d28 <__ftoa_engine+0x38>
    1d1c:	80 38       	cpi	r24, 0x80	; 128
    1d1e:	71 05       	cpc	r23, r1
    1d20:	61 05       	cpc	r22, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <__ftoa_engine+0x36>
    1d24:	3c 5f       	subi	r19, 0xFC	; 252
    1d26:	3c 5f       	subi	r19, 0xFC	; 252
    1d28:	3d 93       	st	X+, r19
    1d2a:	91 30       	cpi	r25, 0x01	; 1
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <__ftoa_engine+0x40>
    1d2e:	80 68       	ori	r24, 0x80	; 128
    1d30:	91 1d       	adc	r25, r1
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	1f 93       	push	r17
    1d38:	0f 93       	push	r16
    1d3a:	ff 92       	push	r15
    1d3c:	ef 92       	push	r14
    1d3e:	19 2f       	mov	r17, r25
    1d40:	98 7f       	andi	r25, 0xF8	; 248
    1d42:	96 95       	lsr	r25
    1d44:	e9 2f       	mov	r30, r25
    1d46:	96 95       	lsr	r25
    1d48:	96 95       	lsr	r25
    1d4a:	e9 0f       	add	r30, r25
    1d4c:	ff 27       	eor	r31, r31
    1d4e:	e6 53       	subi	r30, 0x36	; 54
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	99 27       	eor	r25, r25
    1d54:	33 27       	eor	r19, r19
    1d56:	ee 24       	eor	r14, r14
    1d58:	ff 24       	eor	r15, r15
    1d5a:	a7 01       	movw	r20, r14
    1d5c:	e7 01       	movw	r28, r14
    1d5e:	05 90       	lpm	r0, Z+
    1d60:	08 94       	sec
    1d62:	07 94       	ror	r0
    1d64:	28 f4       	brcc	.+10     	; 0x1d70 <__ftoa_engine+0x80>
    1d66:	36 0f       	add	r19, r22
    1d68:	e7 1e       	adc	r14, r23
    1d6a:	f8 1e       	adc	r15, r24
    1d6c:	49 1f       	adc	r20, r25
    1d6e:	51 1d       	adc	r21, r1
    1d70:	66 0f       	add	r22, r22
    1d72:	77 1f       	adc	r23, r23
    1d74:	88 1f       	adc	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	06 94       	lsr	r0
    1d7a:	a1 f7       	brne	.-24     	; 0x1d64 <__ftoa_engine+0x74>
    1d7c:	05 90       	lpm	r0, Z+
    1d7e:	07 94       	ror	r0
    1d80:	28 f4       	brcc	.+10     	; 0x1d8c <__ftoa_engine+0x9c>
    1d82:	e7 0e       	add	r14, r23
    1d84:	f8 1e       	adc	r15, r24
    1d86:	49 1f       	adc	r20, r25
    1d88:	56 1f       	adc	r21, r22
    1d8a:	c1 1d       	adc	r28, r1
    1d8c:	77 0f       	add	r23, r23
    1d8e:	88 1f       	adc	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	66 1f       	adc	r22, r22
    1d94:	06 94       	lsr	r0
    1d96:	a1 f7       	brne	.-24     	; 0x1d80 <__ftoa_engine+0x90>
    1d98:	05 90       	lpm	r0, Z+
    1d9a:	07 94       	ror	r0
    1d9c:	28 f4       	brcc	.+10     	; 0x1da8 <__ftoa_engine+0xb8>
    1d9e:	f8 0e       	add	r15, r24
    1da0:	49 1f       	adc	r20, r25
    1da2:	56 1f       	adc	r21, r22
    1da4:	c7 1f       	adc	r28, r23
    1da6:	d1 1d       	adc	r29, r1
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	66 1f       	adc	r22, r22
    1dae:	77 1f       	adc	r23, r23
    1db0:	06 94       	lsr	r0
    1db2:	a1 f7       	brne	.-24     	; 0x1d9c <__ftoa_engine+0xac>
    1db4:	05 90       	lpm	r0, Z+
    1db6:	07 94       	ror	r0
    1db8:	20 f4       	brcc	.+8      	; 0x1dc2 <__ftoa_engine+0xd2>
    1dba:	49 0f       	add	r20, r25
    1dbc:	56 1f       	adc	r21, r22
    1dbe:	c7 1f       	adc	r28, r23
    1dc0:	d8 1f       	adc	r29, r24
    1dc2:	99 0f       	add	r25, r25
    1dc4:	66 1f       	adc	r22, r22
    1dc6:	77 1f       	adc	r23, r23
    1dc8:	88 1f       	adc	r24, r24
    1dca:	06 94       	lsr	r0
    1dcc:	a9 f7       	brne	.-22     	; 0x1db8 <__ftoa_engine+0xc8>
    1dce:	84 91       	lpm	r24, Z
    1dd0:	10 95       	com	r17
    1dd2:	17 70       	andi	r17, 0x07	; 7
    1dd4:	41 f0       	breq	.+16     	; 0x1de6 <__ftoa_engine+0xf6>
    1dd6:	d6 95       	lsr	r29
    1dd8:	c7 95       	ror	r28
    1dda:	57 95       	ror	r21
    1ddc:	47 95       	ror	r20
    1dde:	f7 94       	ror	r15
    1de0:	e7 94       	ror	r14
    1de2:	1a 95       	dec	r17
    1de4:	c1 f7       	brne	.-16     	; 0x1dd6 <__ftoa_engine+0xe6>
    1de6:	e0 e7       	ldi	r30, 0x70	; 112
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	68 94       	set
    1dec:	15 90       	lpm	r1, Z+
    1dee:	15 91       	lpm	r17, Z+
    1df0:	35 91       	lpm	r19, Z+
    1df2:	65 91       	lpm	r22, Z+
    1df4:	95 91       	lpm	r25, Z+
    1df6:	05 90       	lpm	r0, Z+
    1df8:	7f e2       	ldi	r23, 0x2F	; 47
    1dfa:	73 95       	inc	r23
    1dfc:	e1 18       	sub	r14, r1
    1dfe:	f1 0a       	sbc	r15, r17
    1e00:	43 0b       	sbc	r20, r19
    1e02:	56 0b       	sbc	r21, r22
    1e04:	c9 0b       	sbc	r28, r25
    1e06:	d0 09       	sbc	r29, r0
    1e08:	c0 f7       	brcc	.-16     	; 0x1dfa <__ftoa_engine+0x10a>
    1e0a:	e1 0c       	add	r14, r1
    1e0c:	f1 1e       	adc	r15, r17
    1e0e:	43 1f       	adc	r20, r19
    1e10:	56 1f       	adc	r21, r22
    1e12:	c9 1f       	adc	r28, r25
    1e14:	d0 1d       	adc	r29, r0
    1e16:	7e f4       	brtc	.+30     	; 0x1e36 <__ftoa_engine+0x146>
    1e18:	70 33       	cpi	r23, 0x30	; 48
    1e1a:	11 f4       	brne	.+4      	; 0x1e20 <__ftoa_engine+0x130>
    1e1c:	8a 95       	dec	r24
    1e1e:	e6 cf       	rjmp	.-52     	; 0x1dec <__ftoa_engine+0xfc>
    1e20:	e8 94       	clt
    1e22:	01 50       	subi	r16, 0x01	; 1
    1e24:	30 f0       	brcs	.+12     	; 0x1e32 <__ftoa_engine+0x142>
    1e26:	08 0f       	add	r16, r24
    1e28:	0a f4       	brpl	.+2      	; 0x1e2c <__ftoa_engine+0x13c>
    1e2a:	00 27       	eor	r16, r16
    1e2c:	02 17       	cp	r16, r18
    1e2e:	08 f4       	brcc	.+2      	; 0x1e32 <__ftoa_engine+0x142>
    1e30:	20 2f       	mov	r18, r16
    1e32:	23 95       	inc	r18
    1e34:	02 2f       	mov	r16, r18
    1e36:	7a 33       	cpi	r23, 0x3A	; 58
    1e38:	28 f0       	brcs	.+10     	; 0x1e44 <__ftoa_engine+0x154>
    1e3a:	79 e3       	ldi	r23, 0x39	; 57
    1e3c:	7d 93       	st	X+, r23
    1e3e:	2a 95       	dec	r18
    1e40:	e9 f7       	brne	.-6      	; 0x1e3c <__ftoa_engine+0x14c>
    1e42:	10 c0       	rjmp	.+32     	; 0x1e64 <__ftoa_engine+0x174>
    1e44:	7d 93       	st	X+, r23
    1e46:	2a 95       	dec	r18
    1e48:	89 f6       	brne	.-94     	; 0x1dec <__ftoa_engine+0xfc>
    1e4a:	06 94       	lsr	r0
    1e4c:	97 95       	ror	r25
    1e4e:	67 95       	ror	r22
    1e50:	37 95       	ror	r19
    1e52:	17 95       	ror	r17
    1e54:	17 94       	ror	r1
    1e56:	e1 18       	sub	r14, r1
    1e58:	f1 0a       	sbc	r15, r17
    1e5a:	43 0b       	sbc	r20, r19
    1e5c:	56 0b       	sbc	r21, r22
    1e5e:	c9 0b       	sbc	r28, r25
    1e60:	d0 09       	sbc	r29, r0
    1e62:	98 f0       	brcs	.+38     	; 0x1e8a <__ftoa_engine+0x19a>
    1e64:	23 95       	inc	r18
    1e66:	7e 91       	ld	r23, -X
    1e68:	73 95       	inc	r23
    1e6a:	7a 33       	cpi	r23, 0x3A	; 58
    1e6c:	08 f0       	brcs	.+2      	; 0x1e70 <__ftoa_engine+0x180>
    1e6e:	70 e3       	ldi	r23, 0x30	; 48
    1e70:	7c 93       	st	X, r23
    1e72:	20 13       	cpse	r18, r16
    1e74:	b8 f7       	brcc	.-18     	; 0x1e64 <__ftoa_engine+0x174>
    1e76:	7e 91       	ld	r23, -X
    1e78:	70 61       	ori	r23, 0x10	; 16
    1e7a:	7d 93       	st	X+, r23
    1e7c:	30 f0       	brcs	.+12     	; 0x1e8a <__ftoa_engine+0x19a>
    1e7e:	83 95       	inc	r24
    1e80:	71 e3       	ldi	r23, 0x31	; 49
    1e82:	7d 93       	st	X+, r23
    1e84:	70 e3       	ldi	r23, 0x30	; 48
    1e86:	2a 95       	dec	r18
    1e88:	e1 f7       	brne	.-8      	; 0x1e82 <__ftoa_engine+0x192>
    1e8a:	11 24       	eor	r1, r1
    1e8c:	ef 90       	pop	r14
    1e8e:	ff 90       	pop	r15
    1e90:	0f 91       	pop	r16
    1e92:	1f 91       	pop	r17
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	99 27       	eor	r25, r25
    1e9a:	87 fd       	sbrc	r24, 7
    1e9c:	90 95       	com	r25
    1e9e:	08 95       	ret

00001ea0 <strnlen_P>:
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	05 90       	lpm	r0, Z+
    1ea4:	61 50       	subi	r22, 0x01	; 1
    1ea6:	70 40       	sbci	r23, 0x00	; 0
    1ea8:	01 10       	cpse	r0, r1
    1eaa:	d8 f7       	brcc	.-10     	; 0x1ea2 <strnlen_P+0x2>
    1eac:	80 95       	com	r24
    1eae:	90 95       	com	r25
    1eb0:	8e 0f       	add	r24, r30
    1eb2:	9f 1f       	adc	r25, r31
    1eb4:	08 95       	ret

00001eb6 <strchr>:
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	81 91       	ld	r24, Z+
    1eba:	86 17       	cp	r24, r22
    1ebc:	21 f0       	breq	.+8      	; 0x1ec6 <strchr+0x10>
    1ebe:	88 23       	and	r24, r24
    1ec0:	d9 f7       	brne	.-10     	; 0x1eb8 <strchr+0x2>
    1ec2:	99 27       	eor	r25, r25
    1ec4:	08 95       	ret
    1ec6:	31 97       	sbiw	r30, 0x01	; 1
    1ec8:	cf 01       	movw	r24, r30
    1eca:	08 95       	ret

00001ecc <strcmp>:
    1ecc:	fb 01       	movw	r30, r22
    1ece:	dc 01       	movw	r26, r24
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	80 19       	sub	r24, r0
    1ed6:	01 10       	cpse	r0, r1
    1ed8:	d9 f3       	breq	.-10     	; 0x1ed0 <strcmp+0x4>
    1eda:	99 0b       	sbc	r25, r25
    1edc:	08 95       	ret

00001ede <strncmp>:
    1ede:	fb 01       	movw	r30, r22
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	41 50       	subi	r20, 0x01	; 1
    1ee4:	50 40       	sbci	r21, 0x00	; 0
    1ee6:	30 f0       	brcs	.+12     	; 0x1ef4 <strncmp+0x16>
    1ee8:	8d 91       	ld	r24, X+
    1eea:	01 90       	ld	r0, Z+
    1eec:	80 19       	sub	r24, r0
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <strncmp+0x18>
    1ef0:	00 20       	and	r0, r0
    1ef2:	b9 f7       	brne	.-18     	; 0x1ee2 <strncmp+0x4>
    1ef4:	88 1b       	sub	r24, r24
    1ef6:	99 0b       	sbc	r25, r25
    1ef8:	08 95       	ret

00001efa <strnlen>:
    1efa:	fc 01       	movw	r30, r24
    1efc:	61 50       	subi	r22, 0x01	; 1
    1efe:	70 40       	sbci	r23, 0x00	; 0
    1f00:	01 90       	ld	r0, Z+
    1f02:	01 10       	cpse	r0, r1
    1f04:	d8 f7       	brcc	.-10     	; 0x1efc <strnlen+0x2>
    1f06:	80 95       	com	r24
    1f08:	90 95       	com	r25
    1f0a:	8e 0f       	add	r24, r30
    1f0c:	9f 1f       	adc	r25, r31
    1f0e:	08 95       	ret

00001f10 <fputc>:
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	8c 01       	movw	r16, r24
    1f1a:	eb 01       	movw	r28, r22
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	81 ff       	sbrs	r24, 1
    1f20:	1b c0       	rjmp	.+54     	; 0x1f58 <fputc+0x48>
    1f22:	82 ff       	sbrs	r24, 2
    1f24:	0d c0       	rjmp	.+26     	; 0x1f40 <fputc+0x30>
    1f26:	2e 81       	ldd	r18, Y+6	; 0x06
    1f28:	3f 81       	ldd	r19, Y+7	; 0x07
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	28 17       	cp	r18, r24
    1f30:	39 07       	cpc	r19, r25
    1f32:	64 f4       	brge	.+24     	; 0x1f4c <fputc+0x3c>
    1f34:	e8 81       	ld	r30, Y
    1f36:	f9 81       	ldd	r31, Y+1	; 0x01
    1f38:	01 93       	st	Z+, r16
    1f3a:	f9 83       	std	Y+1, r31	; 0x01
    1f3c:	e8 83       	st	Y, r30
    1f3e:	06 c0       	rjmp	.+12     	; 0x1f4c <fputc+0x3c>
    1f40:	e8 85       	ldd	r30, Y+8	; 0x08
    1f42:	f9 85       	ldd	r31, Y+9	; 0x09
    1f44:	80 2f       	mov	r24, r16
    1f46:	09 95       	icall
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	31 f4       	brne	.+12     	; 0x1f58 <fputc+0x48>
    1f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	9f 83       	std	Y+7, r25	; 0x07
    1f54:	8e 83       	std	Y+6, r24	; 0x06
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <fputc+0x4c>
    1f58:	0f ef       	ldi	r16, 0xFF	; 255
    1f5a:	1f ef       	ldi	r17, 0xFF	; 255
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

00001f68 <printf>:
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	ea eb       	ldi	r30, 0xBA	; 186
    1f6e:	ff e0       	ldi	r31, 0x0F	; 15
    1f70:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x20>
    1f74:	fe 01       	movw	r30, r28
    1f76:	35 96       	adiw	r30, 0x05	; 5
    1f78:	61 91       	ld	r22, Z+
    1f7a:	71 91       	ld	r23, Z+
    1f7c:	80 91 38 07 	lds	r24, 0x0738
    1f80:	90 91 39 07 	lds	r25, 0x0739
    1f84:	af 01       	movw	r20, r30
    1f86:	0e 94 89 0a 	call	0x1512	; 0x1512 <vfprintf>
    1f8a:	20 96       	adiw	r28, 0x00	; 0
    1f8c:	e2 e0       	ldi	r30, 0x02	; 2
    1f8e:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x20>

00001f92 <puts>:
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	8c 01       	movw	r16, r24
    1f9c:	e0 91 38 07 	lds	r30, 0x0738
    1fa0:	f0 91 39 07 	lds	r31, 0x0739
    1fa4:	83 81       	ldd	r24, Z+3	; 0x03
    1fa6:	81 ff       	sbrs	r24, 1
    1fa8:	1a c0       	rjmp	.+52     	; 0x1fde <puts+0x4c>
    1faa:	c0 e0       	ldi	r28, 0x00	; 0
    1fac:	d0 e0       	ldi	r29, 0x00	; 0
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <puts+0x28>
    1fb0:	09 95       	icall
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <puts+0x28>
    1fb6:	cf ef       	ldi	r28, 0xFF	; 255
    1fb8:	df ef       	ldi	r29, 0xFF	; 255
    1fba:	f8 01       	movw	r30, r16
    1fbc:	81 91       	ld	r24, Z+
    1fbe:	8f 01       	movw	r16, r30
    1fc0:	60 91 38 07 	lds	r22, 0x0738
    1fc4:	70 91 39 07 	lds	r23, 0x0739
    1fc8:	db 01       	movw	r26, r22
    1fca:	18 96       	adiw	r26, 0x08	; 8
    1fcc:	ed 91       	ld	r30, X+
    1fce:	fc 91       	ld	r31, X
    1fd0:	19 97       	sbiw	r26, 0x09	; 9
    1fd2:	88 23       	and	r24, r24
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <puts+0x1e>
    1fd6:	8a e0       	ldi	r24, 0x0A	; 10
    1fd8:	09 95       	icall
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	11 f0       	breq	.+4      	; 0x1fe2 <puts+0x50>
    1fde:	cf ef       	ldi	r28, 0xFF	; 255
    1fe0:	df ef       	ldi	r29, 0xFF	; 255
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	08 95       	ret

00001fee <__ultoa_invert>:
    1fee:	fa 01       	movw	r30, r20
    1ff0:	aa 27       	eor	r26, r26
    1ff2:	28 30       	cpi	r18, 0x08	; 8
    1ff4:	51 f1       	breq	.+84     	; 0x204a <__ultoa_invert+0x5c>
    1ff6:	20 31       	cpi	r18, 0x10	; 16
    1ff8:	81 f1       	breq	.+96     	; 0x205a <__ultoa_invert+0x6c>
    1ffa:	e8 94       	clt
    1ffc:	6f 93       	push	r22
    1ffe:	6e 7f       	andi	r22, 0xFE	; 254
    2000:	6e 5f       	subi	r22, 0xFE	; 254
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	8f 4f       	sbci	r24, 0xFF	; 255
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	af 4f       	sbci	r26, 0xFF	; 255
    200a:	b1 e0       	ldi	r27, 0x01	; 1
    200c:	3e d0       	rcall	.+124    	; 0x208a <__ultoa_invert+0x9c>
    200e:	b4 e0       	ldi	r27, 0x04	; 4
    2010:	3c d0       	rcall	.+120    	; 0x208a <__ultoa_invert+0x9c>
    2012:	67 0f       	add	r22, r23
    2014:	78 1f       	adc	r23, r24
    2016:	89 1f       	adc	r24, r25
    2018:	9a 1f       	adc	r25, r26
    201a:	a1 1d       	adc	r26, r1
    201c:	68 0f       	add	r22, r24
    201e:	79 1f       	adc	r23, r25
    2020:	8a 1f       	adc	r24, r26
    2022:	91 1d       	adc	r25, r1
    2024:	a1 1d       	adc	r26, r1
    2026:	6a 0f       	add	r22, r26
    2028:	71 1d       	adc	r23, r1
    202a:	81 1d       	adc	r24, r1
    202c:	91 1d       	adc	r25, r1
    202e:	a1 1d       	adc	r26, r1
    2030:	20 d0       	rcall	.+64     	; 0x2072 <__ultoa_invert+0x84>
    2032:	09 f4       	brne	.+2      	; 0x2036 <__ultoa_invert+0x48>
    2034:	68 94       	set
    2036:	3f 91       	pop	r19
    2038:	2a e0       	ldi	r18, 0x0A	; 10
    203a:	26 9f       	mul	r18, r22
    203c:	11 24       	eor	r1, r1
    203e:	30 19       	sub	r19, r0
    2040:	30 5d       	subi	r19, 0xD0	; 208
    2042:	31 93       	st	Z+, r19
    2044:	de f6       	brtc	.-74     	; 0x1ffc <__ultoa_invert+0xe>
    2046:	cf 01       	movw	r24, r30
    2048:	08 95       	ret
    204a:	46 2f       	mov	r20, r22
    204c:	47 70       	andi	r20, 0x07	; 7
    204e:	40 5d       	subi	r20, 0xD0	; 208
    2050:	41 93       	st	Z+, r20
    2052:	b3 e0       	ldi	r27, 0x03	; 3
    2054:	0f d0       	rcall	.+30     	; 0x2074 <__ultoa_invert+0x86>
    2056:	c9 f7       	brne	.-14     	; 0x204a <__ultoa_invert+0x5c>
    2058:	f6 cf       	rjmp	.-20     	; 0x2046 <__ultoa_invert+0x58>
    205a:	46 2f       	mov	r20, r22
    205c:	4f 70       	andi	r20, 0x0F	; 15
    205e:	40 5d       	subi	r20, 0xD0	; 208
    2060:	4a 33       	cpi	r20, 0x3A	; 58
    2062:	18 f0       	brcs	.+6      	; 0x206a <__ultoa_invert+0x7c>
    2064:	49 5d       	subi	r20, 0xD9	; 217
    2066:	31 fd       	sbrc	r19, 1
    2068:	40 52       	subi	r20, 0x20	; 32
    206a:	41 93       	st	Z+, r20
    206c:	02 d0       	rcall	.+4      	; 0x2072 <__ultoa_invert+0x84>
    206e:	a9 f7       	brne	.-22     	; 0x205a <__ultoa_invert+0x6c>
    2070:	ea cf       	rjmp	.-44     	; 0x2046 <__ultoa_invert+0x58>
    2072:	b4 e0       	ldi	r27, 0x04	; 4
    2074:	a6 95       	lsr	r26
    2076:	97 95       	ror	r25
    2078:	87 95       	ror	r24
    207a:	77 95       	ror	r23
    207c:	67 95       	ror	r22
    207e:	ba 95       	dec	r27
    2080:	c9 f7       	brne	.-14     	; 0x2074 <__ultoa_invert+0x86>
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	61 05       	cpc	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	08 95       	ret
    208a:	9b 01       	movw	r18, r22
    208c:	ac 01       	movw	r20, r24
    208e:	0a 2e       	mov	r0, r26
    2090:	06 94       	lsr	r0
    2092:	57 95       	ror	r21
    2094:	47 95       	ror	r20
    2096:	37 95       	ror	r19
    2098:	27 95       	ror	r18
    209a:	ba 95       	dec	r27
    209c:	c9 f7       	brne	.-14     	; 0x2090 <__ultoa_invert+0xa2>
    209e:	62 0f       	add	r22, r18
    20a0:	73 1f       	adc	r23, r19
    20a2:	84 1f       	adc	r24, r20
    20a4:	95 1f       	adc	r25, r21
    20a6:	a0 1d       	adc	r26, r0
    20a8:	08 95       	ret

000020aa <__eerd_byte_m328p>:
    20aa:	f9 99       	sbic	0x1f, 1	; 31
    20ac:	fe cf       	rjmp	.-4      	; 0x20aa <__eerd_byte_m328p>
    20ae:	92 bd       	out	0x22, r25	; 34
    20b0:	81 bd       	out	0x21, r24	; 33
    20b2:	f8 9a       	sbi	0x1f, 0	; 31
    20b4:	99 27       	eor	r25, r25
    20b6:	80 b5       	in	r24, 0x20	; 32
    20b8:	08 95       	ret

000020ba <__eeupd_byte_m328p>:
    20ba:	26 2f       	mov	r18, r22

000020bc <__eeupd_r18_m328p>:
    20bc:	f9 99       	sbic	0x1f, 1	; 31
    20be:	fe cf       	rjmp	.-4      	; 0x20bc <__eeupd_r18_m328p>
    20c0:	92 bd       	out	0x22, r25	; 34
    20c2:	81 bd       	out	0x21, r24	; 33
    20c4:	f8 9a       	sbi	0x1f, 0	; 31
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	00 b4       	in	r0, 0x20	; 32
    20ca:	02 16       	cp	r0, r18
    20cc:	39 f0       	breq	.+14     	; 0x20dc <__eeupd_r18_m328p+0x20>
    20ce:	1f ba       	out	0x1f, r1	; 31
    20d0:	20 bd       	out	0x20, r18	; 32
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	fa 9a       	sbi	0x1f, 2	; 31
    20d8:	f9 9a       	sbi	0x1f, 1	; 31
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	08 95       	ret

000020de <_exit>:
    20de:	f8 94       	cli

000020e0 <__stop_program>:
    20e0:	ff cf       	rjmp	.-2      	; 0x20e0 <__stop_program>
