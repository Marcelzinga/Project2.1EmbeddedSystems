
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005dc  00800100  000024d4  00002568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  008006dc  008006dc  00002b44  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000068a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026e5  00000000  00000000  00006ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  000091c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001608  00000000  00000000  00009f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  0000b5a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000873  00000000  00000000  0000bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d60  00000000  00000000  0000c553  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e2b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e4 ed       	ldi	r30, 0xD4	; 212
     1ba:	f4 e2       	ldi	r31, 0x24	; 36
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	ac 3d       	cpi	r26, 0xDC	; 220
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	18 e0       	ldi	r17, 0x08	; 8
     1ca:	ac ed       	ldi	r26, 0xDC	; 220
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a0 31       	cpi	r26, 0x10	; 16
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 dc 06 	lds	r24, 0x06DC
     262:	90 91 dd 06 	lds	r25, 0x06DD
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 e4 06 	lds	r22, 0x06E4
     28a:	70 91 e5 06 	lds	r23, 0x06E5
     28e:	80 91 e6 06 	lds	r24, 0x06E6
     292:	90 91 e7 06 	lds	r25, 0x06E7
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 00 01 	sts	0x0100, r20
     2c2:	50 93 01 01 	sts	0x0101, r21
     2c6:	60 93 02 01 	sts	0x0102, r22
     2ca:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 de 09 	call	0x13bc	; 0x13bc <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 ec 06 	sts	0x06EC, r20
     30c:	50 93 ed 06 	sts	0x06ED, r21
     310:	60 93 ee 06 	sts	0x06EE, r22
     314:	70 93 ef 06 	sts	0x06EF, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 10 07 	sts	0x0710, r20
     350:	50 93 11 07 	sts	0x0711, r21
     354:	60 93 12 07 	sts	0x0712, r22
     358:	70 93 13 07 	sts	0x0713, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 ad 08 	call	0x115a	; 0x115a <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 26 08 	call	0x104c	; 0x104c <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
	//sei();
	
	extraTime1++;
     3b2:	80 91 de 06 	lds	r24, 0x06DE
     3b6:	90 91 df 06 	lds	r25, 0x06DF
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 df 06 	sts	0x06DF, r25
     3c0:	80 93 de 06 	sts	0x06DE, r24
	if(extraTime1>100){
     3c4:	80 91 de 06 	lds	r24, 0x06DE
     3c8:	90 91 df 06 	lds	r25, 0x06DF
     3cc:	85 36       	cpi	r24, 0x65	; 101
     3ce:	91 05       	cpc	r25, r1
     3d0:	6c f0       	brlt	.+26     	; 0x3ec <__vector_14+0x48>
		timerVariable++;
     3d2:	80 91 dc 06 	lds	r24, 0x06DC
     3d6:	90 91 dd 06 	lds	r25, 0x06DD
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 dd 06 	sts	0x06DD, r25
     3e0:	80 93 dc 06 	sts	0x06DC, r24
		extraTime1 = 0;
     3e4:	10 92 df 06 	sts	0x06DF, r1
     3e8:	10 92 de 06 	sts	0x06DE, r1
	}
	extraTime++;
     3ec:	80 91 e0 06 	lds	r24, 0x06E0
     3f0:	90 91 e1 06 	lds	r25, 0x06E1
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	90 93 e1 06 	sts	0x06E1, r25
     3fa:	80 93 e0 06 	sts	0x06E0, r24
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
	}*/
}
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	if(i == 1)
     432:	80 91 e2 06 	lds	r24, 0x06E2
     436:	90 91 e3 06 	lds	r25, 0x06E3
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	91 05       	cpc	r25, r1
     43e:	d1 f4       	brne	.+52     	; 0x474 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     440:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     444:	c4 e8       	ldi	r28, 0x84	; 132
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	68 81       	ld	r22, Y
     44a:	79 81       	ldd	r23, Y+1	; 0x01
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__floatunsisf>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	80 93 e4 06 	sts	0x06E4, r24
     45c:	90 93 e5 06 	sts	0x06E5, r25
     460:	a0 93 e6 06 	sts	0x06E6, r26
     464:	b0 93 e7 06 	sts	0x06E7, r27
		TCNT1 = 0; //Reset duration
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     46c:	10 92 e3 06 	sts	0x06E3, r1
     470:	10 92 e2 06 	sts	0x06E2, r1
	}

	if(i==0)
     474:	80 91 e2 06 	lds	r24, 0x06E2
     478:	90 91 e3 06 	lds	r25, 0x06E3
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	59 f4       	brne	.+22     	; 0x496 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     480:	e1 e8       	ldi	r30, 0x81	; 129
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 83       	st	Z, r24
		i = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 e3 06 	sts	0x06E3, r25
     492:	80 93 e2 06 	sts	0x06E2, r24
	}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4c4:	c0 91 e8 06 	lds	r28, 0x06E8
     4c8:	d0 91 e9 06 	lds	r29, 0x06E9
     4cc:	20 91 1c 01 	lds	r18, 0x011C
     4d0:	30 91 1d 01 	lds	r19, 0x011D
     4d4:	2c 17       	cp	r18, r28
     4d6:	3d 07       	cpc	r19, r29
     4d8:	8c f0       	brlt	.+34     	; 0x4fc <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4da:	8c 01       	movw	r16, r24
     4dc:	0c 0f       	add	r16, r28
     4de:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     4e0:	f8 01       	movw	r30, r16
     4e2:	61 91       	ld	r22, Z+
     4e4:	8f 01       	movw	r16, r30
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	80 91 1c 01 	lds	r24, 0x011C
     4f2:	90 91 1d 01 	lds	r25, 0x011D
     4f6:	8c 17       	cp	r24, r28
     4f8:	9d 07       	cpc	r25, r29
     4fa:	94 f7       	brge	.-28     	; 0x4e0 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     50e:	c0 91 e8 06 	lds	r28, 0x06E8
     512:	d0 91 e9 06 	lds	r29, 0x06E9
     516:	80 91 1c 01 	lds	r24, 0x011C
     51a:	90 91 1d 01 	lds	r25, 0x011D
     51e:	8c 17       	cp	r24, r28
     520:	9d 07       	cpc	r25, r29
     522:	8c f0       	brlt	.+34     	; 0x546 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     524:	8e 01       	movw	r16, r28
     526:	0e 5a       	subi	r16, 0xAE	; 174
     528:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     530:	f8 01       	movw	r30, r16
     532:	81 93       	st	Z+, r24
     534:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	80 91 1c 01 	lds	r24, 0x011C
     53c:	90 91 1d 01 	lds	r25, 0x011D
     540:	8c 17       	cp	r24, r28
     542:	9d 07       	cpc	r25, r29
     544:	94 f7       	brge	.-28     	; 0x52a <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     546:	82 e5       	ldi	r24, 0x52	; 82
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     55e:	c0 91 0e 01 	lds	r28, 0x010E
     562:	d0 91 0f 01 	lds	r29, 0x010F
     566:	80 91 1a 01 	lds	r24, 0x011A
     56a:	90 91 1b 01 	lds	r25, 0x011B
     56e:	99 23       	and	r25, r25
     570:	cc f0       	brlt	.+50     	; 0x5a4 <set_Locatie+0x50>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     576:	f8 01       	movw	r30, r16
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	ce 01       	movw	r24, r28
     57e:	60 81       	ld	r22, Z
     580:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	80 91 0e 01 	lds	r24, 0x010E
     58a:	90 91 0f 01 	lds	r25, 0x010F
     58e:	9e 01       	movw	r18, r28
     590:	28 1b       	sub	r18, r24
     592:	39 0b       	sbc	r19, r25
     594:	c9 01       	movw	r24, r18
     596:	20 91 1a 01 	lds	r18, 0x011A
     59a:	30 91 1b 01 	lds	r19, 0x011B
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	4c f7       	brge	.-46     	; 0x576 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5be:	e0 90 0e 01 	lds	r14, 0x010E
     5c2:	f0 90 0f 01 	lds	r15, 0x010F
     5c6:	80 91 1a 01 	lds	r24, 0x011A
     5ca:	90 91 1b 01 	lds	r25, 0x011B
     5ce:	99 23       	and	r25, r25
     5d0:	ec f0       	brlt	.+58     	; 0x60c <get_Locatie+0x5e>
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     5da:	0f 2e       	mov	r0, r31
     5dc:	f3 e2       	ldi	r31, 0x23	; 35
     5de:	cf 2e       	mov	r12, r31
     5e0:	f7 e0       	ldi	r31, 0x07	; 7
     5e2:	df 2e       	mov	r13, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	c7 01       	movw	r24, r14
     5e8:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     5ec:	cc 0d       	add	r28, r12
     5ee:	dd 1d       	adc	r29, r13
     5f0:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5f2:	08 94       	sec
     5f4:	e1 1c       	adc	r14, r1
     5f6:	f1 1c       	adc	r15, r1
     5f8:	e8 01       	movw	r28, r16
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	80 91 1a 01 	lds	r24, 0x011A
     602:	90 91 1b 01 	lds	r25, 0x011B
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	6c f7       	brge	.-38     	; 0x5e6 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     60c:	83 e2       	ldi	r24, 0x23	; 35
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     62c:	c0 91 0c 01 	lds	r28, 0x010C
     630:	d0 91 0d 01 	lds	r29, 0x010D
     634:	80 91 18 01 	lds	r24, 0x0118
     638:	90 91 19 01 	lds	r25, 0x0119
     63c:	99 23       	and	r25, r25
     63e:	cc f0       	brlt	.+50     	; 0x672 <set_Versie+0x50>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     644:	f8 01       	movw	r30, r16
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	ce 01       	movw	r24, r28
     64c:	60 81       	ld	r22, Z
     64e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	80 91 0c 01 	lds	r24, 0x010C
     658:	90 91 0d 01 	lds	r25, 0x010D
     65c:	9e 01       	movw	r18, r28
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	c9 01       	movw	r24, r18
     664:	20 91 18 01 	lds	r18, 0x0118
     668:	30 91 19 01 	lds	r19, 0x0119
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	4c f7       	brge	.-46     	; 0x644 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     68c:	e0 90 0c 01 	lds	r14, 0x010C
     690:	f0 90 0d 01 	lds	r15, 0x010D
     694:	80 91 18 01 	lds	r24, 0x0118
     698:	90 91 19 01 	lds	r25, 0x0119
     69c:	99 23       	and	r25, r25
     69e:	ec f0       	brlt	.+58     	; 0x6da <get_Versie+0x5e>
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     6a8:	0f 2e       	mov	r0, r31
     6aa:	fe e7       	ldi	r31, 0x7E	; 126
     6ac:	cf 2e       	mov	r12, r31
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	c7 01       	movw	r24, r14
     6b6:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     6ba:	cc 0d       	add	r28, r12
     6bc:	dd 1d       	adc	r29, r13
     6be:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     6c0:	08 94       	sec
     6c2:	e1 1c       	adc	r14, r1
     6c4:	f1 1c       	adc	r15, r1
     6c6:	e8 01       	movw	r28, r16
     6c8:	0f 5f       	subi	r16, 0xFF	; 255
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	80 91 18 01 	lds	r24, 0x0118
     6d0:	90 91 19 01 	lds	r25, 0x0119
     6d4:	8c 17       	cp	r24, r28
     6d6:	9d 07       	cpc	r25, r29
     6d8:	6c f7       	brge	.-38     	; 0x6b4 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     6da:	8e e7       	ldi	r24, 0x7E	; 126
     6dc:	97 e0       	ldi	r25, 0x07	; 7
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	08 95       	ret

000006f0 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     6fa:	c0 91 0a 01 	lds	r28, 0x010A
     6fe:	d0 91 0b 01 	lds	r29, 0x010B
     702:	80 91 16 01 	lds	r24, 0x0116
     706:	90 91 17 01 	lds	r25, 0x0117
     70a:	99 23       	and	r25, r25
     70c:	cc f0       	brlt	.+50     	; 0x740 <set_grensTemp+0x50>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     712:	f8 01       	movw	r30, r16
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	ce 01       	movw	r24, r28
     71a:	60 81       	ld	r22, Z
     71c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     720:	21 96       	adiw	r28, 0x01	; 1
     722:	80 91 0a 01 	lds	r24, 0x010A
     726:	90 91 0b 01 	lds	r25, 0x010B
     72a:	9e 01       	movw	r18, r28
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	c9 01       	movw	r24, r18
     732:	20 91 16 01 	lds	r18, 0x0116
     736:	30 91 17 01 	lds	r19, 0x0117
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4c f7       	brge	.-46     	; 0x712 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     75a:	e0 90 0a 01 	lds	r14, 0x010A
     75e:	f0 90 0b 01 	lds	r15, 0x010B
     762:	80 91 16 01 	lds	r24, 0x0116
     766:	90 91 17 01 	lds	r25, 0x0117
     76a:	99 23       	and	r25, r25
     76c:	ec f0       	brlt	.+58     	; 0x7a8 <get_grensTemp+0x5e>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     776:	0f 2e       	mov	r0, r31
     778:	ff e4       	ldi	r31, 0x4F	; 79
     77a:	cf 2e       	mov	r12, r31
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	c7 01       	movw	r24, r14
     784:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     788:	cc 0d       	add	r28, r12
     78a:	dd 1d       	adc	r29, r13
     78c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     78e:	08 94       	sec
     790:	e1 1c       	adc	r14, r1
     792:	f1 1c       	adc	r15, r1
     794:	e8 01       	movw	r28, r16
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	80 91 16 01 	lds	r24, 0x0116
     79e:	90 91 17 01 	lds	r25, 0x0117
     7a2:	8c 17       	cp	r24, r28
     7a4:	9d 07       	cpc	r25, r29
     7a6:	6c f7       	brge	.-38     	; 0x782 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     7a8:	8f e4       	ldi	r24, 0x4F	; 79
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7c8:	c0 91 08 01 	lds	r28, 0x0108
     7cc:	d0 91 09 01 	lds	r29, 0x0109
     7d0:	80 91 14 01 	lds	r24, 0x0114
     7d4:	90 91 15 01 	lds	r25, 0x0115
     7d8:	99 23       	and	r25, r25
     7da:	cc f0       	brlt	.+50     	; 0x80e <set_grensLicht+0x50>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	e8 0f       	add	r30, r24
     7e4:	f9 1f       	adc	r31, r25
     7e6:	ce 01       	movw	r24, r28
     7e8:	60 81       	ld	r22, Z
     7ea:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	80 91 08 01 	lds	r24, 0x0108
     7f4:	90 91 09 01 	lds	r25, 0x0109
     7f8:	9e 01       	movw	r18, r28
     7fa:	28 1b       	sub	r18, r24
     7fc:	39 0b       	sbc	r19, r25
     7fe:	c9 01       	movw	r24, r18
     800:	20 91 14 01 	lds	r18, 0x0114
     804:	30 91 15 01 	lds	r19, 0x0115
     808:	28 17       	cp	r18, r24
     80a:	39 07       	cpc	r19, r25
     80c:	4c f7       	brge	.-46     	; 0x7e0 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     824:	e0 90 08 01 	lds	r14, 0x0108
     828:	f0 90 09 01 	lds	r15, 0x0109
     82c:	80 91 14 01 	lds	r24, 0x0114
     830:	90 91 15 01 	lds	r25, 0x0115
     834:	99 23       	and	r25, r25
     836:	bc f0       	brlt	.+46     	; 0x866 <get_grensLight+0x4e>
     838:	01 e0       	ldi	r16, 0x01	; 1
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     840:	c7 01       	movw	r24, r14
     842:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     846:	ca 57       	subi	r28, 0x7A	; 122
     848:	d8 4f       	sbci	r29, 0xF8	; 248
     84a:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84c:	08 94       	sec
     84e:	e1 1c       	adc	r14, r1
     850:	f1 1c       	adc	r15, r1
     852:	e8 01       	movw	r28, r16
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	80 91 14 01 	lds	r24, 0x0114
     85c:	90 91 15 01 	lds	r25, 0x0115
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	6c f7       	brge	.-38     	; 0x840 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     866:	86 e8       	ldi	r24, 0x86	; 134
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     882:	c0 91 06 01 	lds	r28, 0x0106
     886:	d0 91 07 01 	lds	r29, 0x0107
     88a:	80 91 12 01 	lds	r24, 0x0112
     88e:	90 91 13 01 	lds	r25, 0x0113
     892:	99 23       	and	r25, r25
     894:	cc f0       	brlt	.+50     	; 0x8c8 <set_minUnroll+0x50>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     89a:	f8 01       	movw	r30, r16
     89c:	e8 0f       	add	r30, r24
     89e:	f9 1f       	adc	r31, r25
     8a0:	ce 01       	movw	r24, r28
     8a2:	60 81       	ld	r22, Z
     8a4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8a8:	21 96       	adiw	r28, 0x01	; 1
     8aa:	80 91 06 01 	lds	r24, 0x0106
     8ae:	90 91 07 01 	lds	r25, 0x0107
     8b2:	9e 01       	movw	r18, r28
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	c9 01       	movw	r24, r18
     8ba:	20 91 12 01 	lds	r18, 0x0112
     8be:	30 91 13 01 	lds	r19, 0x0113
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	4c f7       	brge	.-46     	; 0x89a <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8de:	e0 90 06 01 	lds	r14, 0x0106
     8e2:	f0 90 07 01 	lds	r15, 0x0107
     8e6:	80 91 12 01 	lds	r24, 0x0112
     8ea:	90 91 13 01 	lds	r25, 0x0113
     8ee:	99 23       	and	r25, r25
     8f0:	bc f0       	brlt	.+46     	; 0x920 <__stack+0x21>
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     8fa:	c7 01       	movw	r24, r14
     8fc:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     900:	cc 5e       	subi	r28, 0xEC	; 236
     902:	d8 4f       	sbci	r29, 0xF8	; 248
     904:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     906:	08 94       	sec
     908:	e1 1c       	adc	r14, r1
     90a:	f1 1c       	adc	r15, r1
     90c:	e8 01       	movw	r28, r16
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	80 91 12 01 	lds	r24, 0x0112
     916:	90 91 13 01 	lds	r25, 0x0113
     91a:	8c 17       	cp	r24, r28
     91c:	9d 07       	cpc	r25, r29
     91e:	6c f7       	brge	.-38     	; 0x8fa <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     920:	84 e1       	ldi	r24, 0x14	; 20
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     93c:	c0 91 04 01 	lds	r28, 0x0104
     940:	d0 91 05 01 	lds	r29, 0x0105
     944:	80 91 10 01 	lds	r24, 0x0110
     948:	90 91 11 01 	lds	r25, 0x0111
     94c:	99 23       	and	r25, r25
     94e:	cc f0       	brlt	.+50     	; 0x982 <set_maxUnroll+0x50>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     954:	f8 01       	movw	r30, r16
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ce 01       	movw	r24, r28
     95c:	60 81       	ld	r22, Z
     95e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     962:	21 96       	adiw	r28, 0x01	; 1
     964:	80 91 04 01 	lds	r24, 0x0104
     968:	90 91 05 01 	lds	r25, 0x0105
     96c:	9e 01       	movw	r18, r28
     96e:	28 1b       	sub	r18, r24
     970:	39 0b       	sbc	r19, r25
     972:	c9 01       	movw	r24, r18
     974:	20 91 10 01 	lds	r18, 0x0110
     978:	30 91 11 01 	lds	r19, 0x0111
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	4c f7       	brge	.-46     	; 0x954 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     998:	e0 90 04 01 	lds	r14, 0x0104
     99c:	f0 90 05 01 	lds	r15, 0x0105
     9a0:	80 91 10 01 	lds	r24, 0x0110
     9a4:	90 91 11 01 	lds	r25, 0x0111
     9a8:	99 23       	and	r25, r25
     9aa:	bc f0       	brlt	.+46     	; 0x9da <get_maxUnroll+0x4e>
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     9b4:	c7 01       	movw	r24, r14
     9b6:	0e 94 4b 12 	call	0x2496	; 0x2496 <__eerd_byte_m328p>
     9ba:	cc 54       	subi	r28, 0x4C	; 76
     9bc:	d8 4f       	sbci	r29, 0xF8	; 248
     9be:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9c0:	08 94       	sec
     9c2:	e1 1c       	adc	r14, r1
     9c4:	f1 1c       	adc	r15, r1
     9c6:	e8 01       	movw	r28, r16
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	80 91 10 01 	lds	r24, 0x0110
     9d0:	90 91 11 01 	lds	r25, 0x0111
     9d4:	8c 17       	cp	r24, r28
     9d6:	9d 07       	cpc	r25, r29
     9d8:	6c f7       	brge	.-38     	; 0x9b4 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     9da:	84 eb       	ldi	r24, 0xB4	; 180
     9dc:	97 e0       	ldi	r25, 0x07	; 7
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     9ec:	88 ee       	ldi	r24, 0xE8	; 232
     9ee:	97 e0       	ldi	r25, 0x07	; 7
     9f0:	68 e2       	ldi	r22, 0x28	; 40
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <strchr>
	p1[strlen(p1) -1] = '\0';
     9f8:	e8 2f       	mov	r30, r24
     9fa:	f9 2f       	mov	r31, r25
     9fc:	df 01       	movw	r26, r30
     9fe:	0d 90       	ld	r0, X+
     a00:	00 20       	and	r0, r0
     a02:	e9 f7       	brne	.-6      	; 0x9fe <set_substring+0x12>
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	ae 1b       	sub	r26, r30
     a08:	bf 0b       	sbc	r27, r31
     a0a:	a8 0f       	add	r26, r24
     a0c:	b9 1f       	adc	r27, r25
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	1c 92       	st	X, r1
	substring = p1 +1;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 e5 07 	sts	0x07E5, r25
     a18:	80 93 e4 07 	sts	0x07E4, r24
     a1c:	08 95       	ret

00000a1e <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     a1e:	2f 92       	push	r2
     a20:	3f 92       	push	r3
     a22:	4f 92       	push	r4
     a24:	5f 92       	push	r5
     a26:	6f 92       	push	r6
     a28:	7f 92       	push	r7
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	ser_write("201 Please enter ID");
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     a4a:	c8 ee       	ldi	r28, 0xE8	; 232
     a4c:	d7 e0       	ldi	r29, 0x07	; 7
     a4e:	ce 01       	movw	r24, r28
     a50:	6e e1       	ldi	r22, 0x1E	; 30
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     a5a:	89 e5       	ldi	r24, 0x59	; 89
     a5c:	96 e0       	ldi	r25, 0x06	; 6
     a5e:	be 01       	movw	r22, r28
     a60:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     a64:	28 2f       	mov	r18, r24
     a66:	39 2f       	mov	r19, r25
	if(ret |= 0){
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	b9 f0       	breq	.+46     	; 0xa9c <protocolCom+0x7e>
		ser_writeln("504: Verkeerde ID");
     a6e:	82 e3       	ldi	r24, 0x32	; 50
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
			}		
			}
			}
			}					
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret
	if(ret |= 0){
		ser_writeln("504: Verkeerde ID");
	}
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
     a9c:	84 e4       	ldi	r24, 0x44	; 68
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 bf 11 	call	0x237e	; 0x237e <puts>
		ser_writeln("200 Handshake bevestigt");
     aa4:	85 e5       	ldi	r24, 0x55	; 85
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
		while (1) {
			ser_write("204 Wat kan ik voor u doen? ");
     aac:	0d e6       	ldi	r16, 0x6D	; 109
     aae:	11 e0       	ldi	r17, 0x01	; 1
			ser_readln(in_buf, sizeof(in_buf), 1);
     ab0:	c8 ee       	ldi	r28, 0xE8	; 232
     ab2:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fa e8       	ldi	r31, 0x8A	; 138
     ab8:	ef 2e       	mov	r14, r31
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	ff 2e       	mov	r15, r31
     abe:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f2 eb       	ldi	r31, 0xB2	; 178
     ac4:	af 2e       	mov	r10, r31
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	bf 2e       	mov	r11, r31
     aca:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     acc:	0f 2e       	mov	r0, r31
     ace:	f9 ed       	ldi	r31, 0xD9	; 217
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff ee       	ldi	r31, 0xEF	; 239
     adc:	8f 2e       	mov	r8, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	9f 2e       	mov	r9, r31
     ae2:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fb e0       	ldi	r31, 0x0B	; 11
     ae8:	6f 2e       	mov	r6, r31
     aea:	f2 e0       	ldi	r31, 0x02	; 2
     aec:	7f 2e       	mov	r7, r31
     aee:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     af0:	0f 2e       	mov	r0, r31
     af2:	fa e2       	ldi	r31, 0x2A	; 42
     af4:	4f 2e       	mov	r4, r31
     af6:	f2 e0       	ldi	r31, 0x02	; 2
     af8:	5f 2e       	mov	r5, r31
     afa:	f0 2d       	mov	r31, r0
				set_substring();
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				//}
			}
		else if(strcmp("GET_ALL", in_buf) == 0)
     afc:	0f 2e       	mov	r0, r31
     afe:	f2 e5       	ldi	r31, 0x52	; 82
     b00:	2f 2e       	mov	r2, r31
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	3f 2e       	mov	r3, r31
     b06:	f0 2d       	mov	r31, r0
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");
		while (1) {
			ser_write("204 Wat kan ik voor u doen? ");
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
			ser_readln(in_buf, sizeof(in_buf), 1);
     b0e:	ce 01       	movw	r24, r28
     b10:	6e e1       	ldi	r22, 0x1E	; 30
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b1a:	c7 01       	movw	r24, r14
     b1c:	be 01       	movw	r22, r28
     b1e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     b22:	28 2f       	mov	r18, r24
     b24:	39 2f       	mov	r19, r25
     b26:	21 15       	cp	r18, r1
     b28:	31 05       	cpc	r19, r1
     b2a:	a1 f4       	brne	.+40     	; 0xb54 <protocolCom+0x136>
				if ((get_unrollStatus() % 2) == 1){
     b2c:	0e 94 a8 08 	call	0x1150	; 0x1150 <get_unrollStatus>
     b30:	62 e0       	ldi	r22, 0x02	; 2
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divmodhi4>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	91 05       	cpc	r25, r1
     b3c:	21 f4       	brne	.+8      	; 0xb46 <protocolCom+0x128>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     b3e:	81 e9       	ldi	r24, 0x91	; 145
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     b46:	0e 94 a8 08 	call	0x1150	; 0x1150 <get_unrollStatus>
     b4a:	80 fd       	sbrc	r24, 0
     b4c:	1f c0       	rjmp	.+62     	; 0xb8c <protocolCom+0x16e>
					uitrollen();
     b4e:	0e 94 b9 08 	call	0x1172	; 0x1172 <uitrollen>
     b52:	1c c0       	rjmp	.+56     	; 0xb8c <protocolCom+0x16e>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b54:	c5 01       	movw	r24, r10
     b56:	be 01       	movw	r22, r28
     b58:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     b5c:	28 2f       	mov	r18, r24
     b5e:	39 2f       	mov	r19, r25
     b60:	21 15       	cp	r18, r1
     b62:	31 05       	cpc	r19, r1
     b64:	99 f4       	brne	.+38     	; 0xb8c <protocolCom+0x16e>
				if ((get_unrollStatus() % 2) == 0){
     b66:	0e 94 a8 08 	call	0x1150	; 0x1150 <get_unrollStatus>
     b6a:	80 fd       	sbrc	r24, 0
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <protocolCom+0x158>
					ser_writeln("501 Zonnescherm is al opgerold!");
     b6e:	89 eb       	ldi	r24, 0xB9	; 185
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     b76:	0e 94 a8 08 	call	0x1150	; 0x1150 <get_unrollStatus>
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divmodhi4>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	11 f4       	brne	.+4      	; 0xb8c <protocolCom+0x16e>
					oprollen();
     b88:	0e 94 15 09 	call	0x122a	; 0x122a <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b8c:	c6 01       	movw	r24, r12
     b8e:	be 01       	movw	r22, r28
     b90:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     b94:	28 2f       	mov	r18, r24
     b96:	39 2f       	mov	r19, r25
     b98:	21 15       	cp	r18, r1
     b9a:	31 05       	cpc	r19, r1
     b9c:	b9 f4       	brne	.+46     	; 0xbcc <protocolCom+0x1ae>
				printf("202 Status: %i", get_unrollStatus());
     b9e:	0e 94 a8 08 	call	0x1150	; 0x1150 <get_unrollStatus>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <protocolCom+0x186>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <protocolCom+0x188>
     ba6:	20 ee       	ldi	r18, 0xE0	; 224
     ba8:	31 e0       	ldi	r19, 0x01	; 1
     baa:	ad b7       	in	r26, 0x3d	; 61
     bac:	be b7       	in	r27, 0x3e	; 62
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	3c 93       	st	X, r19
     bb2:	2e 93       	st	-X, r18
     bb4:	11 97       	sbiw	r26, 0x01	; 1
     bb6:	14 96       	adiw	r26, 0x04	; 4
     bb8:	9c 93       	st	X, r25
     bba:	8e 93       	st	-X, r24
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	9e cf       	rjmp	.-196    	; 0xb08 <protocolCom+0xea>
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     bcc:	c4 01       	movw	r24, r8
     bce:	be 01       	movw	r22, r28
     bd0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     bd4:	28 2f       	mov	r18, r24
     bd6:	39 2f       	mov	r19, r25
     bd8:	21 15       	cp	r18, r1
     bda:	31 05       	cpc	r19, r1
     bdc:	e1 f4       	brne	.+56     	; 0xc16 <protocolCom+0x1f8>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bde:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <protocolCom+0x1ca>
     be8:	00 d0       	rcall	.+0      	; 0xbea <protocolCom+0x1cc>
     bea:	00 d0       	rcall	.+0      	; 0xbec <protocolCom+0x1ce>
     bec:	28 ef       	ldi	r18, 0xF8	; 248
     bee:	31 e0       	ldi	r19, 0x01	; 1
     bf0:	ed b7       	in	r30, 0x3d	; 61
     bf2:	fe b7       	in	r31, 0x3e	; 62
     bf4:	32 83       	std	Z+2, r19	; 0x02
     bf6:	21 83       	std	Z+1, r18	; 0x01
     bf8:	83 83       	std	Z+3, r24	; 0x03
     bfa:	94 83       	std	Z+4, r25	; 0x04
     bfc:	a5 83       	std	Z+5, r26	; 0x05
     bfe:	b6 83       	std	Z+6, r27	; 0x06
     c00:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
     c04:	8d b7       	in	r24, 0x3d	; 61
     c06:	9e b7       	in	r25, 0x3e	; 62
     c08:	06 96       	adiw	r24, 0x06	; 6
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	9e bf       	out	0x3e, r25	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	8d bf       	out	0x3d, r24	; 61
     c14:	79 cf       	rjmp	.-270    	; 0xb08 <protocolCom+0xea>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c16:	c3 01       	movw	r24, r6
     c18:	be 01       	movw	r22, r28
     c1a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     c1e:	28 2f       	mov	r18, r24
     c20:	39 2f       	mov	r19, r25
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	49 f4       	brne	.+18     	; 0xc3a <protocolCom+0x21c>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c28:	8a e1       	ldi	r24, 0x1A	; 26
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     c30:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c34:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     c38:	67 cf       	rjmp	.-306    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c3a:	c2 01       	movw	r24, r4
     c3c:	be 01       	movw	r22, r28
     c3e:	4e e0       	ldi	r20, 0x0E	; 14
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     c46:	28 2f       	mov	r18, r24
     c48:	39 2f       	mov	r19, r25
     c4a:	21 15       	cp	r18, r1
     c4c:	31 05       	cpc	r19, r1
     c4e:	c9 f4       	brne	.+50     	; 0xc82 <protocolCom+0x264>
					int temp = sizeof in_buf;
					printf("504 Ongeldige temperatuur");
				}*				
				
				else{*/
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     c50:	8c e3       	ldi	r24, 0x3C	; 60
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     c58:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c5c:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     c60:	8d e4       	ldi	r24, 0x4D	; 77
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
				set_substring();
     c68:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_grensTemp(substring);
     c6c:	80 91 e4 07 	lds	r24, 0x07E4
     c70:	90 91 e5 07 	lds	r25, 0x07E5
     c74:	0e 94 78 03 	call	0x6f0	; 0x6f0 <set_grensTemp>
				ser_writeln(get_grensTemp());
     c78:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c7c:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     c80:	43 cf       	rjmp	.-378    	; 0xb08 <protocolCom+0xea>
				//}
			}
		else if(strcmp("GET_ALL", in_buf) == 0)
     c82:	c1 01       	movw	r24, r2
     c84:	be 01       	movw	r22, r28
     c86:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     c8a:	28 2f       	mov	r18, r24
     c8c:	39 2f       	mov	r19, r25
     c8e:	21 15       	cp	r18, r1
     c90:	31 05       	cpc	r19, r1
     c92:	09 f0       	breq	.+2      	; 0xc96 <protocolCom+0x278>
     c94:	5e c0       	rjmp	.+188    	; 0xd52 <protocolCom+0x334>
		{
			printf("202 TEMP%6.2f \n", getTemp());
     c96:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <protocolCom+0x282>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <protocolCom+0x284>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <protocolCom+0x286>
     ca4:	2a e5       	ldi	r18, 0x5A	; 90
     ca6:	32 e0       	ldi	r19, 0x02	; 2
     ca8:	ed b7       	in	r30, 0x3d	; 61
     caa:	fe b7       	in	r31, 0x3e	; 62
     cac:	32 83       	std	Z+2, r19	; 0x02
     cae:	21 83       	std	Z+1, r18	; 0x01
     cb0:	83 83       	std	Z+3, r24	; 0x03
     cb2:	94 83       	std	Z+4, r25	; 0x04
     cb4:	a5 83       	std	Z+5, r26	; 0x05
     cb6:	b6 83       	std	Z+6, r27	; 0x06
     cb8:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
			printf("203 LIGHT %i \n", getLight());
     cbc:	8d b7       	in	r24, 0x3d	; 61
     cbe:	9e b7       	in	r25, 0x3e	; 62
     cc0:	06 96       	adiw	r24, 0x06	; 6
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	9e bf       	out	0x3e, r25	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	8d bf       	out	0x3d, r24	; 61
     ccc:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <protocolCom+0x2b4>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <protocolCom+0x2b6>
     cd4:	ed b7       	in	r30, 0x3d	; 61
     cd6:	fe b7       	in	r31, 0x3e	; 62
     cd8:	31 96       	adiw	r30, 0x01	; 1
     cda:	2a e6       	ldi	r18, 0x6A	; 106
     cdc:	32 e0       	ldi	r19, 0x02	; 2
     cde:	ad b7       	in	r26, 0x3d	; 61
     ce0:	be b7       	in	r27, 0x3e	; 62
     ce2:	12 96       	adiw	r26, 0x02	; 2
     ce4:	3c 93       	st	X, r19
     ce6:	2e 93       	st	-X, r18
     ce8:	11 97       	sbiw	r26, 0x01	; 1
     cea:	82 83       	std	Z+2, r24	; 0x02
     cec:	13 82       	std	Z+3, r1	; 0x03
     cee:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
			printf("204 AFSTAND % 6.2f cm \n", getDistance());
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	00 d0       	rcall	.+0      	; 0xd04 <protocolCom+0x2e6>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <protocolCom+0x2e8>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <protocolCom+0x2ea>
     d08:	29 e7       	ldi	r18, 0x79	; 121
     d0a:	32 e0       	ldi	r19, 0x02	; 2
     d0c:	ed b7       	in	r30, 0x3d	; 61
     d0e:	fe b7       	in	r31, 0x3e	; 62
     d10:	32 83       	std	Z+2, r19	; 0x02
     d12:	21 83       	std	Z+1, r18	; 0x01
     d14:	83 83       	std	Z+3, r24	; 0x03
     d16:	94 83       	std	Z+4, r25	; 0x04
     d18:	a5 83       	std	Z+5, r26	; 0x05
     d1a:	b6 83       	std	Z+6, r27	; 0x06
     d1c:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
			ser_write("205 "),  ser_writeln(get_Naam());
     d20:	8d b7       	in	r24, 0x3d	; 61
     d22:	9e b7       	in	r25, 0x3e	; 62
     d24:	06 96       	adiw	r24, 0x06	; 6
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	9e bf       	out	0x3e, r25	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	8d bf       	out	0x3d, r24	; 61
     d30:	81 e9       	ldi	r24, 0x91	; 145
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     d38:	0e 94 83 02 	call	0x506	; 0x506 <get_Naam>
     d3c:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
			ser_write("206 "), ser_writeln(get_Locatie());
     d40:	86 e9       	ldi	r24, 0x96	; 150
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     d48:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_Locatie>
     d4c:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     d50:	db ce       	rjmp	.-586    	; 0xb08 <protocolCom+0xea>
			
		}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     d52:	8b e9       	ldi	r24, 0x9B	; 155
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	be 01       	movw	r22, r28
     d58:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     d5c:	28 2f       	mov	r18, r24
     d5e:	39 2f       	mov	r19, r25
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	c1 f4       	brne	.+48     	; 0xd96 <protocolCom+0x378>
				printf("202 LIGHT %i \n", getLight());
     d66:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <protocolCom+0x34e>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <protocolCom+0x350>
     d6e:	ed b7       	in	r30, 0x3d	; 61
     d70:	fe b7       	in	r31, 0x3e	; 62
     d72:	31 96       	adiw	r30, 0x01	; 1
     d74:	25 ea       	ldi	r18, 0xA5	; 165
     d76:	32 e0       	ldi	r19, 0x02	; 2
     d78:	ad b7       	in	r26, 0x3d	; 61
     d7a:	be b7       	in	r27, 0x3e	; 62
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	11 97       	sbiw	r26, 0x01	; 1
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	13 82       	std	Z+3, r1	; 0x03
     d88:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	b9 ce       	rjmp	.-654    	; 0xb08 <protocolCom+0xea>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     d96:	84 eb       	ldi	r24, 0xB4	; 180
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	be 01       	movw	r22, r28
     d9c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     da0:	28 2f       	mov	r18, r24
     da2:	39 2f       	mov	r19, r25
     da4:	21 15       	cp	r18, r1
     da6:	31 05       	cpc	r19, r1
     da8:	49 f4       	brne	.+18     	; 0xdbc <protocolCom+0x39e>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     daa:	84 ec       	ldi	r24, 0xC4	; 196
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     db2:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     db6:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     dba:	a6 ce       	rjmp	.-692    	; 0xb08 <protocolCom+0xea>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     dbc:	85 ed       	ldi	r24, 0xD5	; 213
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	be 01       	movw	r22, r28
     dc2:	4f e0       	ldi	r20, 0x0F	; 15
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     dca:	28 2f       	mov	r18, r24
     dcc:	39 2f       	mov	r19, r25
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	c9 f4       	brne	.+50     	; 0xe06 <protocolCom+0x3e8>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				/*if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
				}
				else{*/
				ser_write("203 GRENS_LIGHT: "), ser_write(get_grensLight()), ser_write(" -> ");
     dd4:	88 ee       	ldi	r24, 0xE8	; 232
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     ddc:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     de0:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     de4:	8d e4       	ldi	r24, 0x4D	; 77
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
				set_substring();
     dec:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_grensLicht(substring);
     df0:	80 91 e4 07 	lds	r24, 0x07E4
     df4:	90 91 e5 07 	lds	r25, 0x07E5
     df8:	0e 94 df 03 	call	0x7be	; 0x7be <set_grensLicht>
				ser_writeln(get_grensLight());
     dfc:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     e00:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     e04:	81 ce       	rjmp	.-766    	; 0xb08 <protocolCom+0xea>
				//}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     e06:	8a ef       	ldi	r24, 0xFA	; 250
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	be 01       	movw	r22, r28
     e0c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     e10:	28 2f       	mov	r18, r24
     e12:	39 2f       	mov	r19, r25
     e14:	21 15       	cp	r18, r1
     e16:	31 05       	cpc	r19, r1
     e18:	49 f4       	brne	.+18     	; 0xe2c <protocolCom+0x40e>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     e1a:	89 e0       	ldi	r24, 0x09	; 9
     e1c:	93 e0       	ldi	r25, 0x03	; 3
     e1e:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     e22:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     e26:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     e2a:	6e ce       	rjmp	.-804    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     e2c:	8a e1       	ldi	r24, 0x1A	; 26
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	be 01       	movw	r22, r28
     e32:	4f e0       	ldi	r20, 0x0F	; 15
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     e3a:	28 2f       	mov	r18, r24
     e3c:	39 2f       	mov	r19, r25
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	c9 f4       	brne	.+50     	; 0xe76 <protocolCom+0x458>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
				}
				else{*/
				ser_write("203 MAX_UNROLL: "), ser_write(get_maxUnroll()), ser_write(" -> ");
     e44:	89 e0       	ldi	r24, 0x09	; 9
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     e4c:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     e50:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     e54:	8d e4       	ldi	r24, 0x4D	; 77
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
				set_substring();
     e5c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_maxUnroll(substring);
     e60:	80 91 e4 07 	lds	r24, 0x07E4
     e64:	90 91 e5 07 	lds	r25, 0x07E5
     e68:	0e 94 99 04 	call	0x932	; 0x932 <set_maxUnroll>
				ser_writeln(get_maxUnroll());
     e6c:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     e70:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     e74:	49 ce       	rjmp	.-878    	; 0xb08 <protocolCom+0xea>
				//}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     e76:	8c e2       	ldi	r24, 0x2C	; 44
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	be 01       	movw	r22, r28
     e7c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     e80:	28 2f       	mov	r18, r24
     e82:	39 2f       	mov	r19, r25
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	49 f4       	brne	.+18     	; 0xe9c <protocolCom+0x47e>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     e8a:	8b e3       	ldi	r24, 0x3B	; 59
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     e92:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     e96:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     e9a:	36 ce       	rjmp	.-916    	; 0xb08 <protocolCom+0xea>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     e9c:	8c e4       	ldi	r24, 0x4C	; 76
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	be 01       	movw	r22, r28
     ea2:	4f e0       	ldi	r20, 0x0F	; 15
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     eaa:	28 2f       	mov	r18, r24
     eac:	39 2f       	mov	r19, r25
     eae:	21 15       	cp	r18, r1
     eb0:	31 05       	cpc	r19, r1
     eb2:	c9 f4       	brne	.+50     	; 0xee6 <protocolCom+0x4c8>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
				}
				else{*/
				ser_write("203 MIN_UNROLL: "), ser_write(get_minUnroll()), ser_write(" -> ");
     eb4:	8b e3       	ldi	r24, 0x3B	; 59
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     ebc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     ec0:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     ec4:	8d e4       	ldi	r24, 0x4D	; 77
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
				set_substring();
     ecc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_minUnroll(substring);
     ed0:	80 91 e4 07 	lds	r24, 0x07E4
     ed4:	90 91 e5 07 	lds	r25, 0x07E5
     ed8:	0e 94 3c 04 	call	0x878	; 0x878 <set_minUnroll>
				ser_writeln(get_minUnroll());
     edc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     ee0:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     ee4:	11 ce       	rjmp	.-990    	; 0xb08 <protocolCom+0xea>
				//}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     ee6:	8e e5       	ldi	r24, 0x5E	; 94
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	be 01       	movw	r22, r28
     eec:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     ef0:	28 2f       	mov	r18, r24
     ef2:	39 2f       	mov	r19, r25
     ef4:	21 15       	cp	r18, r1
     ef6:	31 05       	cpc	r19, r1
     ef8:	49 f4       	brne	.+18     	; 0xf0c <protocolCom+0x4ee>
				ser_write("202 "),  ser_writeln(get_Naam());
     efa:	87 e6       	ldi	r24, 0x67	; 103
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     f02:	0e 94 83 02 	call	0x506	; 0x506 <get_Naam>
     f06:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     f0a:	fe cd       	rjmp	.-1028   	; 0xb08 <protocolCom+0xea>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     f0c:	8c e6       	ldi	r24, 0x6C	; 108
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	be 01       	movw	r22, r28
     f12:	48 e0       	ldi	r20, 0x08	; 8
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     f1a:	28 2f       	mov	r18, r24
     f1c:	39 2f       	mov	r19, r25
     f1e:	21 15       	cp	r18, r1
     f20:	31 05       	cpc	r19, r1
     f22:	69 f4       	brne	.+26     	; 0xf3e <protocolCom+0x520>
				/*if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{*/
				set_substring();
     f24:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Naam(substring);
     f28:	80 91 e4 07 	lds	r24, 0x07E4
     f2c:	90 91 e5 07 	lds	r25, 0x07E5
     f30:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_Naam>
				printf("200 OK \n");
     f34:	88 e7       	ldi	r24, 0x78	; 120
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	0e 94 bf 11 	call	0x237e	; 0x237e <puts>
     f3c:	e5 cd       	rjmp	.-1078   	; 0xb08 <protocolCom+0xea>
				//}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	be 01       	movw	r22, r28
     f44:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     f48:	28 2f       	mov	r18, r24
     f4a:	39 2f       	mov	r19, r25
     f4c:	21 15       	cp	r18, r1
     f4e:	31 05       	cpc	r19, r1
     f50:	49 f4       	brne	.+18     	; 0xf64 <protocolCom+0x546>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     f52:	87 e6       	ldi	r24, 0x67	; 103
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     f5a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_Locatie>
     f5e:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     f62:	d2 cd       	rjmp	.-1116   	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     f64:	8d e8       	ldi	r24, 0x8D	; 141
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	be 01       	movw	r22, r28
     f6a:	4c e0       	ldi	r20, 0x0C	; 12
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     f72:	28 2f       	mov	r18, r24
     f74:	39 2f       	mov	r19, r25
     f76:	21 15       	cp	r18, r1
     f78:	31 05       	cpc	r19, r1
     f7a:	69 f4       	brne	.+26     	; 0xf96 <protocolCom+0x578>
				/*if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{*/
				set_substring();
     f7c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Locatie(substring);
     f80:	80 91 e4 07 	lds	r24, 0x07E4
     f84:	90 91 e5 07 	lds	r25, 0x07E5
     f88:	0e 94 aa 02 	call	0x554	; 0x554 <set_Locatie>
				
				printf("200 OK \n");
     f8c:	88 e7       	ldi	r24, 0x78	; 120
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	0e 94 bf 11 	call	0x237e	; 0x237e <puts>
     f94:	b9 cd       	rjmp	.-1166   	; 0xb08 <protocolCom+0xea>
				//}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     f96:	8d e9       	ldi	r24, 0x9D	; 157
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	be 01       	movw	r22, r28
     f9c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     fa0:	28 2f       	mov	r18, r24
     fa2:	39 2f       	mov	r19, r25
     fa4:	21 15       	cp	r18, r1
     fa6:	31 05       	cpc	r19, r1
     fa8:	49 f4       	brne	.+18     	; 0xfbc <protocolCom+0x59e>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     faa:	89 ea       	ldi	r24, 0xA9	; 169
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
     fb2:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
     fb6:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
     fba:	a6 cd       	rjmp	.-1204   	; 0xb08 <protocolCom+0xea>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     fbc:	86 eb       	ldi	r24, 0xB6	; 182
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	be 01       	movw	r22, r28
     fc2:	4c e0       	ldi	r20, 0x0C	; 12
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	0e 94 65 11 	call	0x22ca	; 0x22ca <strncmp>
     fca:	28 2f       	mov	r18, r24
     fcc:	39 2f       	mov	r19, r25
     fce:	21 15       	cp	r18, r1
     fd0:	31 05       	cpc	r19, r1
     fd2:	69 f4       	brne	.+26     	; 0xfee <protocolCom+0x5d0>
					/*if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
					}
					else{*/
					set_substring();
     fd4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
					set_Versie(substring);
     fd8:	80 91 e4 07 	lds	r24, 0x07E4
     fdc:	90 91 e5 07 	lds	r25, 0x07E5
     fe0:	0e 94 11 03 	call	0x622	; 0x622 <set_Versie>
					
					printf("200 OK \n");
     fe4:	88 e7       	ldi	r24, 0x78	; 120
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	0e 94 bf 11 	call	0x237e	; 0x237e <puts>
     fec:	8d cd       	rjmp	.-1254   	; 0xb08 <protocolCom+0xea>
					//}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     fee:	85 ec       	ldi	r24, 0xC5	; 197
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	be 01       	movw	r22, r28
     ff4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
     ff8:	28 2f       	mov	r18, r24
     ffa:	39 2f       	mov	r19, r25
     ffc:	21 15       	cp	r18, r1
     ffe:	31 05       	cpc	r19, r1
    1000:	89 f4       	brne	.+34     	; 0x1024 <protocolCom+0x606>
				if ((get_unrollStatus() % 2) == 1){
    1002:	0e 94 a8 08 	call	0x1150	; 0x1150 <get_unrollStatus>
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__divmodhi4>
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	91 05       	cpc	r25, r1
    1012:	11 f4       	brne	.+4      	; 0x1018 <protocolCom+0x5fa>
					uitrollen();					
    1014:	0e 94 b9 08 	call	0x1172	; 0x1172 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
    1018:	8a ec       	ldi	r24, 0xCA	; 202
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
				abort();
    1020:	0e 94 49 10 	call	0x2092	; 0x2092 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
    1024:	83 ed       	ldi	r24, 0xD3	; 211
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	be 01       	movw	r22, r28
    102a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcmp>
    102e:	28 2f       	mov	r18, r24
    1030:	39 2f       	mov	r19, r25
    1032:	21 15       	cp	r18, r1
    1034:	31 05       	cpc	r19, r1
    1036:	29 f4       	brne	.+10     	; 0x1042 <protocolCom+0x624>
				ser_writeln(
    1038:	88 ed       	ldi	r24, 0xD8	; 216
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
    1040:	63 cd       	rjmp	.-1338   	; 0xb08 <protocolCom+0xea>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
    1042:	8d e1       	ldi	r24, 0x1D	; 29
    1044:	96 e0       	ldi	r25, 0x06	; 6
    1046:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
    104a:	5e cd       	rjmp	.-1348   	; 0xb08 <protocolCom+0xea>

0000104c <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
    104c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
    1050:	83 e3       	ldi	r24, 0x33	; 51
    1052:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
    1056:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    105a:	88 e1       	ldi	r24, 0x18	; 24
    105c:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    1060:	86 e0       	ldi	r24, 0x06	; 6
    1062:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
    1066:	83 e6       	ldi	r24, 0x63	; 99
    1068:	96 e0       	ldi	r25, 0x06	; 6
    106a:	90 93 0b 08 	sts	0x080B, r25
    106e:	80 93 0a 08 	sts	0x080A, r24
}
    1072:	08 95       	ret

00001074 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    1074:	e0 ec       	ldi	r30, 0xC0	; 192
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	90 81       	ld	r25, Z
    107a:	95 ff       	sbrs	r25, 5
    107c:	fd cf       	rjmp	.-6      	; 0x1078 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
    107e:	80 93 c6 00 	sts	0x00C6, r24
}
    1082:	08 95       	ret

00001084 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
    1084:	cf 93       	push	r28
    1086:	c8 2f       	mov	r28, r24
	if (c=='\n') {
    1088:	8a 30       	cpi	r24, 0x0A	; 10
    108a:	19 f4       	brne	.+6      	; 0x1092 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
    108c:	8d e0       	ldi	r24, 0x0D	; 13
    108e:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>
	}
	ser_transmit(c);
    1092:	8c 2f       	mov	r24, r28
    1094:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>
}
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    109c:	e0 ec       	ldi	r30, 0xC0	; 192
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	ec f7       	brge	.-6      	; 0x10a0 <ser_receive+0x4>
	return UDR0;
    10a6:	80 91 c6 00 	lds	r24, 0x00C6
}
    10aa:	08 95       	ret

000010ac <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    10b2:	88 81       	ld	r24, Y
    10b4:	88 23       	and	r24, r24
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    10b8:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    10ba:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    10be:	89 91       	ld	r24, Y+
    10c0:	88 23       	and	r24, r24
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    10ca:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
	ser_transmit('\r');
    10ce:	8d e0       	ldi	r24, 0x0D	; 13
    10d0:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>
	ser_transmit('\n');
    10d4:	8a e0       	ldi	r24, 0x0A	; 10
    10d6:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>
}
    10da:	08 95       	ret

000010dc <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	5c 01       	movw	r10, r24
    10f2:	d4 2f       	mov	r29, r20
	int i=0;
    10f4:	6c 01       	movw	r12, r24
    10f6:	ee 24       	eor	r14, r14
    10f8:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    10fa:	8b 01       	movw	r16, r22
    10fc:	01 50       	subi	r16, 0x01	; 1
    10fe:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1100:	0e 94 4e 08 	call	0x109c	; 0x109c <ser_receive>
    1104:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    1106:	dd 23       	and	r29, r29
    1108:	11 f0       	breq	.+4      	; 0x110e <ser_readln+0x32>
    110a:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>
		if (c=='\r') {
    110e:	cd 30       	cpi	r28, 0x0D	; 13
    1110:	31 f4       	brne	.+12     	; 0x111e <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1112:	dd 23       	and	r29, r29
    1114:	71 f0       	breq	.+28     	; 0x1132 <ser_readln+0x56>
    1116:	8a e0       	ldi	r24, 0x0A	; 10
    1118:	0e 94 3a 08 	call	0x1074	; 0x1074 <ser_transmit>
    111c:	0a c0       	rjmp	.+20     	; 0x1132 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    111e:	e0 16       	cp	r14, r16
    1120:	f1 06       	cpc	r15, r17
    1122:	74 f7       	brge	.-36     	; 0x1100 <ser_readln+0x24>
			buf[i++]=c;
    1124:	f6 01       	movw	r30, r12
    1126:	c1 93       	st	Z+, r28
    1128:	6f 01       	movw	r12, r30
    112a:	08 94       	sec
    112c:	e1 1c       	adc	r14, r1
    112e:	f1 1c       	adc	r15, r1
    1130:	e7 cf       	rjmp	.-50     	; 0x1100 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    1132:	ea 0c       	add	r14, r10
    1134:	fb 1c       	adc	r15, r11
    1136:	f7 01       	movw	r30, r14
    1138:	10 82       	st	Z, r1
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	08 95       	ret

00001150 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    1150:	80 91 ea 06 	lds	r24, 0x06EA
    1154:	90 91 eb 06 	lds	r25, 0x06EB
    1158:	08 95       	ret

0000115a <init_scherm_ports>:


void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    115a:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    115c:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    115e:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    1160:	e9 e6       	ldi	r30, 0x69	; 105
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	81 60       	ori	r24, 0x01	; 1
    1168:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    116e:	2d 9a       	sbi	0x05, 5	; 5
}
    1170:	08 95       	ret

00001172 <uitrollen>:

void uitrollen(){
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
	IN = (IN + 1);
    117a:	80 91 ea 06 	lds	r24, 0x06EA
    117e:	90 91 eb 06 	lds	r25, 0x06EB
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	90 93 eb 06 	sts	0x06EB, r25
    1188:	80 93 ea 06 	sts	0x06EA, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    118c:	81 e7       	ldi	r24, 0x71	; 113
    118e:	96 e0       	ldi	r25, 0x06	; 6
    1190:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1194:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1196:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1198:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <strtod>
    11a4:	6b 01       	movw	r12, r22
    11a6:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    11aa:	2c 9a       	sbi	0x05, 4	; 5
    11ac:	8f e3       	ldi	r24, 0x3F	; 63
    11ae:	9d e0       	ldi	r25, 0x0D	; 13
    11b0:	a3 e0       	ldi	r26, 0x03	; 3
    11b2:	81 50       	subi	r24, 0x01	; 1
    11b4:	90 40       	sbci	r25, 0x00	; 0
    11b6:	a0 40       	sbci	r26, 0x00	; 0
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <uitrollen+0x40>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <uitrollen+0x4a>
    11bc:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    11be:	2c 98       	cbi	0x05, 4	; 5
    11c0:	8f e3       	ldi	r24, 0x3F	; 63
    11c2:	9d e0       	ldi	r25, 0x0D	; 13
    11c4:	a3 e0       	ldi	r26, 0x03	; 3
    11c6:	81 50       	subi	r24, 0x01	; 1
    11c8:	90 40       	sbci	r25, 0x00	; 0
    11ca:	a0 40       	sbci	r26, 0x00	; 0
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <uitrollen+0x54>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <uitrollen+0x5e>
    11d0:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    11d2:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11d6:	a7 01       	movw	r20, r14
    11d8:	96 01       	movw	r18, r12
    11da:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__cmpsf2>
    11de:	88 23       	and	r24, r24
    11e0:	24 f3       	brlt	.-56     	; 0x11aa <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    11e2:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <uitrollen+0x7a>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <uitrollen+0x7c>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <uitrollen+0x7e>
    11f0:	27 e7       	ldi	r18, 0x77	; 119
    11f2:	36 e0       	ldi	r19, 0x06	; 6
    11f4:	ed b7       	in	r30, 0x3d	; 61
    11f6:	fe b7       	in	r31, 0x3e	; 62
    11f8:	32 83       	std	Z+2, r19	; 0x02
    11fa:	21 83       	std	Z+1, r18	; 0x01
    11fc:	83 83       	std	Z+3, r24	; 0x03
    11fe:	94 83       	std	Z+4, r25	; 0x04
    1200:	a5 83       	std	Z+5, r26	; 0x05
    1202:	b6 83       	std	Z+6, r27	; 0x06
    1204:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    1208:	8d b7       	in	r24, 0x3d	; 61
    120a:	9e b7       	in	r25, 0x3e	; 62
    120c:	06 96       	adiw	r24, 0x06	; 6
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	9e bf       	out	0x3e, r25	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	8d bf       	out	0x3d, r24	; 61
    1218:	8b e9       	ldi	r24, 0x9B	; 155
    121a:	96 e0       	ldi	r25, 0x06	; 6
    121c:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
}
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <oprollen>:
	
	


void oprollen(){
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
	IN = (IN + 1);
    1232:	80 91 ea 06 	lds	r24, 0x06EA
    1236:	90 91 eb 06 	lds	r25, 0x06EB
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	90 93 eb 06 	sts	0x06EB, r25
    1240:	80 93 ea 06 	sts	0x06EA, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    1244:	89 eb       	ldi	r24, 0xB9	; 185
    1246:	96 e0       	ldi	r25, 0x06	; 6
    1248:	0e 94 56 08 	call	0x10ac	; 0x10ac <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    124c:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    124e:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1250:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <strtod>
    125c:	6b 01       	movw	r12, r22
    125e:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    1260:	14 c0       	rjmp	.+40     	; 0x128a <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1262:	2c 9a       	sbi	0x05, 4	; 5
    1264:	8f e3       	ldi	r24, 0x3F	; 63
    1266:	9d e0       	ldi	r25, 0x0D	; 13
    1268:	a3 e0       	ldi	r26, 0x03	; 3
    126a:	81 50       	subi	r24, 0x01	; 1
    126c:	90 40       	sbci	r25, 0x00	; 0
    126e:	a0 40       	sbci	r26, 0x00	; 0
    1270:	e1 f7       	brne	.-8      	; 0x126a <oprollen+0x40>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <oprollen+0x4a>
    1274:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1276:	2c 98       	cbi	0x05, 4	; 5
    1278:	8f e3       	ldi	r24, 0x3F	; 63
    127a:	9d e0       	ldi	r25, 0x0D	; 13
    127c:	a3 e0       	ldi	r26, 0x03	; 3
    127e:	81 50       	subi	r24, 0x01	; 1
    1280:	90 40       	sbci	r25, 0x00	; 0
    1282:	a0 40       	sbci	r26, 0x00	; 0
    1284:	e1 f7       	brne	.-8      	; 0x127e <oprollen+0x54>
    1286:	00 c0       	rjmp	.+0      	; 0x1288 <oprollen+0x5e>
    1288:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    128a:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    128e:	a7 01       	movw	r20, r14
    1290:	96 01       	movw	r18, r12
    1292:	0e 94 8e 0a 	call	0x151c	; 0x151c <__gesf2>
    1296:	18 16       	cp	r1, r24
    1298:	24 f3       	brlt	.-56     	; 0x1262 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    129a:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    129e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <oprollen+0x7e>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <oprollen+0x80>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <oprollen+0x82>
    12ac:	27 e7       	ldi	r18, 0x77	; 119
    12ae:	36 e0       	ldi	r19, 0x06	; 6
    12b0:	ed b7       	in	r30, 0x3d	; 61
    12b2:	fe b7       	in	r31, 0x3e	; 62
    12b4:	32 83       	std	Z+2, r19	; 0x02
    12b6:	21 83       	std	Z+1, r18	; 0x01
    12b8:	83 83       	std	Z+3, r24	; 0x03
    12ba:	94 83       	std	Z+4, r25	; 0x04
    12bc:	a5 83       	std	Z+5, r26	; 0x05
    12be:	b6 83       	std	Z+6, r27	; 0x06
    12c0:	0e 94 aa 11 	call	0x2354	; 0x2354 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    12c4:	8d b7       	in	r24, 0x3d	; 61
    12c6:	9e b7       	in	r25, 0x3e	; 62
    12c8:	06 96       	adiw	r24, 0x06	; 6
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	9e bf       	out	0x3e, r25	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	8d bf       	out	0x3d, r24	; 61
    12d4:	8e eb       	ldi	r24, 0xBE	; 190
    12d6:	96 e0       	ldi	r25, 0x06	; 6
    12d8:	0e 94 65 08 	call	0x10ca	; 0x10ca <ser_writeln>
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	08 95       	ret

000012e6 <__subsf3>:
    12e6:	50 58       	subi	r21, 0x80	; 128

000012e8 <__addsf3>:
    12e8:	bb 27       	eor	r27, r27
    12ea:	aa 27       	eor	r26, r26
    12ec:	0e d0       	rcall	.+28     	; 0x130a <__addsf3x>
    12ee:	dc c0       	rjmp	.+440    	; 0x14a8 <__fp_round>
    12f0:	cd d0       	rcall	.+410    	; 0x148c <__fp_pscA>
    12f2:	30 f0       	brcs	.+12     	; 0x1300 <__addsf3+0x18>
    12f4:	d2 d0       	rcall	.+420    	; 0x149a <__fp_pscB>
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__addsf3+0x18>
    12f8:	31 f4       	brne	.+12     	; 0x1306 <__addsf3+0x1e>
    12fa:	9f 3f       	cpi	r25, 0xFF	; 255
    12fc:	11 f4       	brne	.+4      	; 0x1302 <__addsf3+0x1a>
    12fe:	1e f4       	brtc	.+6      	; 0x1306 <__addsf3+0x1e>
    1300:	c2 c0       	rjmp	.+388    	; 0x1486 <__fp_nan>
    1302:	0e f4       	brtc	.+2      	; 0x1306 <__addsf3+0x1e>
    1304:	e0 95       	com	r30
    1306:	e7 fb       	bst	r30, 7
    1308:	b8 c0       	rjmp	.+368    	; 0x147a <__fp_inf>

0000130a <__addsf3x>:
    130a:	e9 2f       	mov	r30, r25
    130c:	de d0       	rcall	.+444    	; 0x14ca <__fp_split3>
    130e:	80 f3       	brcs	.-32     	; 0x12f0 <__addsf3+0x8>
    1310:	ba 17       	cp	r27, r26
    1312:	62 07       	cpc	r22, r18
    1314:	73 07       	cpc	r23, r19
    1316:	84 07       	cpc	r24, r20
    1318:	95 07       	cpc	r25, r21
    131a:	18 f0       	brcs	.+6      	; 0x1322 <__addsf3x+0x18>
    131c:	71 f4       	brne	.+28     	; 0x133a <__addsf3x+0x30>
    131e:	9e f5       	brtc	.+102    	; 0x1386 <__addsf3x+0x7c>
    1320:	f6 c0       	rjmp	.+492    	; 0x150e <__fp_zero>
    1322:	0e f4       	brtc	.+2      	; 0x1326 <__addsf3x+0x1c>
    1324:	e0 95       	com	r30
    1326:	0b 2e       	mov	r0, r27
    1328:	ba 2f       	mov	r27, r26
    132a:	a0 2d       	mov	r26, r0
    132c:	0b 01       	movw	r0, r22
    132e:	b9 01       	movw	r22, r18
    1330:	90 01       	movw	r18, r0
    1332:	0c 01       	movw	r0, r24
    1334:	ca 01       	movw	r24, r20
    1336:	a0 01       	movw	r20, r0
    1338:	11 24       	eor	r1, r1
    133a:	ff 27       	eor	r31, r31
    133c:	59 1b       	sub	r21, r25
    133e:	99 f0       	breq	.+38     	; 0x1366 <__addsf3x+0x5c>
    1340:	59 3f       	cpi	r21, 0xF9	; 249
    1342:	50 f4       	brcc	.+20     	; 0x1358 <__addsf3x+0x4e>
    1344:	50 3e       	cpi	r21, 0xE0	; 224
    1346:	68 f1       	brcs	.+90     	; 0x13a2 <__addsf3x+0x98>
    1348:	1a 16       	cp	r1, r26
    134a:	f0 40       	sbci	r31, 0x00	; 0
    134c:	a2 2f       	mov	r26, r18
    134e:	23 2f       	mov	r18, r19
    1350:	34 2f       	mov	r19, r20
    1352:	44 27       	eor	r20, r20
    1354:	58 5f       	subi	r21, 0xF8	; 248
    1356:	f3 cf       	rjmp	.-26     	; 0x133e <__addsf3x+0x34>
    1358:	46 95       	lsr	r20
    135a:	37 95       	ror	r19
    135c:	27 95       	ror	r18
    135e:	a7 95       	ror	r26
    1360:	f0 40       	sbci	r31, 0x00	; 0
    1362:	53 95       	inc	r21
    1364:	c9 f7       	brne	.-14     	; 0x1358 <__addsf3x+0x4e>
    1366:	7e f4       	brtc	.+30     	; 0x1386 <__addsf3x+0x7c>
    1368:	1f 16       	cp	r1, r31
    136a:	ba 0b       	sbc	r27, r26
    136c:	62 0b       	sbc	r22, r18
    136e:	73 0b       	sbc	r23, r19
    1370:	84 0b       	sbc	r24, r20
    1372:	ba f0       	brmi	.+46     	; 0x13a2 <__addsf3x+0x98>
    1374:	91 50       	subi	r25, 0x01	; 1
    1376:	a1 f0       	breq	.+40     	; 0x13a0 <__addsf3x+0x96>
    1378:	ff 0f       	add	r31, r31
    137a:	bb 1f       	adc	r27, r27
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	c2 f7       	brpl	.-16     	; 0x1374 <__addsf3x+0x6a>
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <__addsf3x+0x98>
    1386:	ba 0f       	add	r27, r26
    1388:	62 1f       	adc	r22, r18
    138a:	73 1f       	adc	r23, r19
    138c:	84 1f       	adc	r24, r20
    138e:	48 f4       	brcc	.+18     	; 0x13a2 <__addsf3x+0x98>
    1390:	87 95       	ror	r24
    1392:	77 95       	ror	r23
    1394:	67 95       	ror	r22
    1396:	b7 95       	ror	r27
    1398:	f7 95       	ror	r31
    139a:	9e 3f       	cpi	r25, 0xFE	; 254
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <__addsf3x+0x96>
    139e:	b3 cf       	rjmp	.-154    	; 0x1306 <__addsf3+0x1e>
    13a0:	93 95       	inc	r25
    13a2:	88 0f       	add	r24, r24
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <__addsf3x+0x9e>
    13a6:	99 27       	eor	r25, r25
    13a8:	ee 0f       	add	r30, r30
    13aa:	97 95       	ror	r25
    13ac:	87 95       	ror	r24
    13ae:	08 95       	ret

000013b0 <__cmpsf2>:
    13b0:	40 d0       	rcall	.+128    	; 0x1432 <__fp_cmp>
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <__cmpsf2+0x6>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	08 95       	ret

000013b8 <__floatunsisf>:
    13b8:	e8 94       	clt
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <__floatsisf+0x12>

000013bc <__floatsisf>:
    13bc:	97 fb       	bst	r25, 7
    13be:	3e f4       	brtc	.+14     	; 0x13ce <__floatsisf+0x12>
    13c0:	90 95       	com	r25
    13c2:	80 95       	com	r24
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	99 23       	and	r25, r25
    13d0:	a9 f0       	breq	.+42     	; 0x13fc <__floatsisf+0x40>
    13d2:	f9 2f       	mov	r31, r25
    13d4:	96 e9       	ldi	r25, 0x96	; 150
    13d6:	bb 27       	eor	r27, r27
    13d8:	93 95       	inc	r25
    13da:	f6 95       	lsr	r31
    13dc:	87 95       	ror	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	b7 95       	ror	r27
    13e4:	f1 11       	cpse	r31, r1
    13e6:	f8 cf       	rjmp	.-16     	; 0x13d8 <__floatsisf+0x1c>
    13e8:	fa f4       	brpl	.+62     	; 0x1428 <__floatsisf+0x6c>
    13ea:	bb 0f       	add	r27, r27
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__floatsisf+0x36>
    13ee:	60 ff       	sbrs	r22, 0
    13f0:	1b c0       	rjmp	.+54     	; 0x1428 <__floatsisf+0x6c>
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	8f 4f       	sbci	r24, 0xFF	; 255
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <__floatsisf+0x6c>
    13fc:	88 23       	and	r24, r24
    13fe:	11 f0       	breq	.+4      	; 0x1404 <__floatsisf+0x48>
    1400:	96 e9       	ldi	r25, 0x96	; 150
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <__floatsisf+0x6a>
    1404:	77 23       	and	r23, r23
    1406:	21 f0       	breq	.+8      	; 0x1410 <__floatsisf+0x54>
    1408:	9e e8       	ldi	r25, 0x8E	; 142
    140a:	87 2f       	mov	r24, r23
    140c:	76 2f       	mov	r23, r22
    140e:	05 c0       	rjmp	.+10     	; 0x141a <__floatsisf+0x5e>
    1410:	66 23       	and	r22, r22
    1412:	71 f0       	breq	.+28     	; 0x1430 <__floatsisf+0x74>
    1414:	96 e8       	ldi	r25, 0x86	; 134
    1416:	86 2f       	mov	r24, r22
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	2a f0       	brmi	.+10     	; 0x1428 <__floatsisf+0x6c>
    141e:	9a 95       	dec	r25
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	da f7       	brpl	.-10     	; 0x141e <__floatsisf+0x62>
    1428:	88 0f       	add	r24, r24
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <__fp_cmp>:
    1432:	99 0f       	add	r25, r25
    1434:	00 08       	sbc	r0, r0
    1436:	55 0f       	add	r21, r21
    1438:	aa 0b       	sbc	r26, r26
    143a:	e0 e8       	ldi	r30, 0x80	; 128
    143c:	fe ef       	ldi	r31, 0xFE	; 254
    143e:	16 16       	cp	r1, r22
    1440:	17 06       	cpc	r1, r23
    1442:	e8 07       	cpc	r30, r24
    1444:	f9 07       	cpc	r31, r25
    1446:	c0 f0       	brcs	.+48     	; 0x1478 <__fp_cmp+0x46>
    1448:	12 16       	cp	r1, r18
    144a:	13 06       	cpc	r1, r19
    144c:	e4 07       	cpc	r30, r20
    144e:	f5 07       	cpc	r31, r21
    1450:	98 f0       	brcs	.+38     	; 0x1478 <__fp_cmp+0x46>
    1452:	62 1b       	sub	r22, r18
    1454:	73 0b       	sbc	r23, r19
    1456:	84 0b       	sbc	r24, r20
    1458:	95 0b       	sbc	r25, r21
    145a:	39 f4       	brne	.+14     	; 0x146a <__fp_cmp+0x38>
    145c:	0a 26       	eor	r0, r26
    145e:	61 f0       	breq	.+24     	; 0x1478 <__fp_cmp+0x46>
    1460:	23 2b       	or	r18, r19
    1462:	24 2b       	or	r18, r20
    1464:	25 2b       	or	r18, r21
    1466:	21 f4       	brne	.+8      	; 0x1470 <__fp_cmp+0x3e>
    1468:	08 95       	ret
    146a:	0a 26       	eor	r0, r26
    146c:	09 f4       	brne	.+2      	; 0x1470 <__fp_cmp+0x3e>
    146e:	a1 40       	sbci	r26, 0x01	; 1
    1470:	a6 95       	lsr	r26
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	81 1d       	adc	r24, r1
    1476:	81 1d       	adc	r24, r1
    1478:	08 95       	ret

0000147a <__fp_inf>:
    147a:	97 f9       	bld	r25, 7
    147c:	9f 67       	ori	r25, 0x7F	; 127
    147e:	80 e8       	ldi	r24, 0x80	; 128
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	08 95       	ret

00001486 <__fp_nan>:
    1486:	9f ef       	ldi	r25, 0xFF	; 255
    1488:	80 ec       	ldi	r24, 0xC0	; 192
    148a:	08 95       	ret

0000148c <__fp_pscA>:
    148c:	00 24       	eor	r0, r0
    148e:	0a 94       	dec	r0
    1490:	16 16       	cp	r1, r22
    1492:	17 06       	cpc	r1, r23
    1494:	18 06       	cpc	r1, r24
    1496:	09 06       	cpc	r0, r25
    1498:	08 95       	ret

0000149a <__fp_pscB>:
    149a:	00 24       	eor	r0, r0
    149c:	0a 94       	dec	r0
    149e:	12 16       	cp	r1, r18
    14a0:	13 06       	cpc	r1, r19
    14a2:	14 06       	cpc	r1, r20
    14a4:	05 06       	cpc	r0, r21
    14a6:	08 95       	ret

000014a8 <__fp_round>:
    14a8:	09 2e       	mov	r0, r25
    14aa:	03 94       	inc	r0
    14ac:	00 0c       	add	r0, r0
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <__fp_round+0xc>
    14b0:	88 23       	and	r24, r24
    14b2:	52 f0       	brmi	.+20     	; 0x14c8 <__fp_round+0x20>
    14b4:	bb 0f       	add	r27, r27
    14b6:	40 f4       	brcc	.+16     	; 0x14c8 <__fp_round+0x20>
    14b8:	bf 2b       	or	r27, r31
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__fp_round+0x18>
    14bc:	60 ff       	sbrs	r22, 0
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <__fp_round+0x20>
    14c0:	6f 5f       	subi	r22, 0xFF	; 255
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	08 95       	ret

000014ca <__fp_split3>:
    14ca:	57 fd       	sbrc	r21, 7
    14cc:	90 58       	subi	r25, 0x80	; 128
    14ce:	44 0f       	add	r20, r20
    14d0:	55 1f       	adc	r21, r21
    14d2:	59 f0       	breq	.+22     	; 0x14ea <__fp_splitA+0x10>
    14d4:	5f 3f       	cpi	r21, 0xFF	; 255
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <__fp_splitA+0x1a>
    14d8:	47 95       	ror	r20

000014da <__fp_splitA>:
    14da:	88 0f       	add	r24, r24
    14dc:	97 fb       	bst	r25, 7
    14de:	99 1f       	adc	r25, r25
    14e0:	61 f0       	breq	.+24     	; 0x14fa <__fp_splitA+0x20>
    14e2:	9f 3f       	cpi	r25, 0xFF	; 255
    14e4:	79 f0       	breq	.+30     	; 0x1504 <__fp_splitA+0x2a>
    14e6:	87 95       	ror	r24
    14e8:	08 95       	ret
    14ea:	12 16       	cp	r1, r18
    14ec:	13 06       	cpc	r1, r19
    14ee:	14 06       	cpc	r1, r20
    14f0:	55 1f       	adc	r21, r21
    14f2:	f2 cf       	rjmp	.-28     	; 0x14d8 <__fp_split3+0xe>
    14f4:	46 95       	lsr	r20
    14f6:	f1 df       	rcall	.-30     	; 0x14da <__fp_splitA>
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <__fp_splitA+0x30>
    14fa:	16 16       	cp	r1, r22
    14fc:	17 06       	cpc	r1, r23
    14fe:	18 06       	cpc	r1, r24
    1500:	99 1f       	adc	r25, r25
    1502:	f1 cf       	rjmp	.-30     	; 0x14e6 <__fp_splitA+0xc>
    1504:	86 95       	lsr	r24
    1506:	71 05       	cpc	r23, r1
    1508:	61 05       	cpc	r22, r1
    150a:	08 94       	sec
    150c:	08 95       	ret

0000150e <__fp_zero>:
    150e:	e8 94       	clt

00001510 <__fp_szero>:
    1510:	bb 27       	eor	r27, r27
    1512:	66 27       	eor	r22, r22
    1514:	77 27       	eor	r23, r23
    1516:	cb 01       	movw	r24, r22
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret

0000151c <__gesf2>:
    151c:	8a df       	rcall	.-236    	; 0x1432 <__fp_cmp>
    151e:	08 f4       	brcc	.+2      	; 0x1522 <__gesf2+0x6>
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	08 95       	ret

00001524 <__mulsf3>:
    1524:	0b d0       	rcall	.+22     	; 0x153c <__mulsf3x>
    1526:	c0 cf       	rjmp	.-128    	; 0x14a8 <__fp_round>
    1528:	b1 df       	rcall	.-158    	; 0x148c <__fp_pscA>
    152a:	28 f0       	brcs	.+10     	; 0x1536 <__mulsf3+0x12>
    152c:	b6 df       	rcall	.-148    	; 0x149a <__fp_pscB>
    152e:	18 f0       	brcs	.+6      	; 0x1536 <__mulsf3+0x12>
    1530:	95 23       	and	r25, r21
    1532:	09 f0       	breq	.+2      	; 0x1536 <__mulsf3+0x12>
    1534:	a2 cf       	rjmp	.-188    	; 0x147a <__fp_inf>
    1536:	a7 cf       	rjmp	.-178    	; 0x1486 <__fp_nan>
    1538:	11 24       	eor	r1, r1
    153a:	ea cf       	rjmp	.-44     	; 0x1510 <__fp_szero>

0000153c <__mulsf3x>:
    153c:	c6 df       	rcall	.-116    	; 0x14ca <__fp_split3>
    153e:	a0 f3       	brcs	.-24     	; 0x1528 <__mulsf3+0x4>

00001540 <__mulsf3_pse>:
    1540:	95 9f       	mul	r25, r21
    1542:	d1 f3       	breq	.-12     	; 0x1538 <__mulsf3+0x14>
    1544:	95 0f       	add	r25, r21
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	55 1f       	adc	r21, r21
    154a:	62 9f       	mul	r22, r18
    154c:	f0 01       	movw	r30, r0
    154e:	72 9f       	mul	r23, r18
    1550:	bb 27       	eor	r27, r27
    1552:	f0 0d       	add	r31, r0
    1554:	b1 1d       	adc	r27, r1
    1556:	63 9f       	mul	r22, r19
    1558:	aa 27       	eor	r26, r26
    155a:	f0 0d       	add	r31, r0
    155c:	b1 1d       	adc	r27, r1
    155e:	aa 1f       	adc	r26, r26
    1560:	64 9f       	mul	r22, r20
    1562:	66 27       	eor	r22, r22
    1564:	b0 0d       	add	r27, r0
    1566:	a1 1d       	adc	r26, r1
    1568:	66 1f       	adc	r22, r22
    156a:	82 9f       	mul	r24, r18
    156c:	22 27       	eor	r18, r18
    156e:	b0 0d       	add	r27, r0
    1570:	a1 1d       	adc	r26, r1
    1572:	62 1f       	adc	r22, r18
    1574:	73 9f       	mul	r23, r19
    1576:	b0 0d       	add	r27, r0
    1578:	a1 1d       	adc	r26, r1
    157a:	62 1f       	adc	r22, r18
    157c:	83 9f       	mul	r24, r19
    157e:	a0 0d       	add	r26, r0
    1580:	61 1d       	adc	r22, r1
    1582:	22 1f       	adc	r18, r18
    1584:	74 9f       	mul	r23, r20
    1586:	33 27       	eor	r19, r19
    1588:	a0 0d       	add	r26, r0
    158a:	61 1d       	adc	r22, r1
    158c:	23 1f       	adc	r18, r19
    158e:	84 9f       	mul	r24, r20
    1590:	60 0d       	add	r22, r0
    1592:	21 1d       	adc	r18, r1
    1594:	82 2f       	mov	r24, r18
    1596:	76 2f       	mov	r23, r22
    1598:	6a 2f       	mov	r22, r26
    159a:	11 24       	eor	r1, r1
    159c:	9f 57       	subi	r25, 0x7F	; 127
    159e:	50 40       	sbci	r21, 0x00	; 0
    15a0:	8a f0       	brmi	.+34     	; 0x15c4 <__mulsf3_pse+0x84>
    15a2:	e1 f0       	breq	.+56     	; 0x15dc <__mulsf3_pse+0x9c>
    15a4:	88 23       	and	r24, r24
    15a6:	4a f0       	brmi	.+18     	; 0x15ba <__mulsf3_pse+0x7a>
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	bb 1f       	adc	r27, r27
    15ae:	66 1f       	adc	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	91 50       	subi	r25, 0x01	; 1
    15b6:	50 40       	sbci	r21, 0x00	; 0
    15b8:	a9 f7       	brne	.-22     	; 0x15a4 <__mulsf3_pse+0x64>
    15ba:	9e 3f       	cpi	r25, 0xFE	; 254
    15bc:	51 05       	cpc	r21, r1
    15be:	70 f0       	brcs	.+28     	; 0x15dc <__mulsf3_pse+0x9c>
    15c0:	5c cf       	rjmp	.-328    	; 0x147a <__fp_inf>
    15c2:	a6 cf       	rjmp	.-180    	; 0x1510 <__fp_szero>
    15c4:	5f 3f       	cpi	r21, 0xFF	; 255
    15c6:	ec f3       	brlt	.-6      	; 0x15c2 <__mulsf3_pse+0x82>
    15c8:	98 3e       	cpi	r25, 0xE8	; 232
    15ca:	dc f3       	brlt	.-10     	; 0x15c2 <__mulsf3_pse+0x82>
    15cc:	86 95       	lsr	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	b7 95       	ror	r27
    15d4:	f7 95       	ror	r31
    15d6:	e7 95       	ror	r30
    15d8:	9f 5f       	subi	r25, 0xFF	; 255
    15da:	c1 f7       	brne	.-16     	; 0x15cc <__mulsf3_pse+0x8c>
    15dc:	fe 2b       	or	r31, r30
    15de:	88 0f       	add	r24, r24
    15e0:	91 1d       	adc	r25, r1
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	97 f9       	bld	r25, 7
    15e8:	08 95       	ret

000015ea <vfprintf>:
    15ea:	a5 e1       	ldi	r26, 0x15	; 21
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	eb ef       	ldi	r30, 0xFB	; 251
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__>
    15f6:	4c 01       	movw	r8, r24
    15f8:	7f 87       	std	Y+15, r23	; 0x0f
    15fa:	6e 87       	std	Y+14, r22	; 0x0e
    15fc:	fc 01       	movw	r30, r24
    15fe:	17 82       	std	Z+7, r1	; 0x07
    1600:	16 82       	std	Z+6, r1	; 0x06
    1602:	83 81       	ldd	r24, Z+3	; 0x03
    1604:	81 fd       	sbrc	r24, 1
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <vfprintf+0x26>
    1608:	76 c3       	rjmp	.+1772   	; 0x1cf6 <vfprintf+0x70c>
    160a:	4c 85       	ldd	r20, Y+12	; 0x0c
    160c:	5d 85       	ldd	r21, Y+13	; 0x0d
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <vfprintf+0x2e>
    1610:	1e 01       	movw	r2, r28
    1612:	08 94       	sec
    1614:	21 1c       	adc	r2, r1
    1616:	31 1c       	adc	r3, r1
    1618:	f4 01       	movw	r30, r8
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	ee 85       	ldd	r30, Y+14	; 0x0e
    161e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1620:	93 fd       	sbrc	r25, 3
    1622:	85 91       	lpm	r24, Z+
    1624:	93 ff       	sbrs	r25, 3
    1626:	81 91       	ld	r24, Z+
    1628:	ff 87       	std	Y+15, r31	; 0x0f
    162a:	ee 87       	std	Y+14, r30	; 0x0e
    162c:	88 23       	and	r24, r24
    162e:	09 f4       	brne	.+2      	; 0x1632 <vfprintf+0x48>
    1630:	5e c3       	rjmp	.+1724   	; 0x1cee <vfprintf+0x704>
    1632:	85 32       	cpi	r24, 0x25	; 37
    1634:	41 f4       	brne	.+16     	; 0x1646 <vfprintf+0x5c>
    1636:	93 fd       	sbrc	r25, 3
    1638:	85 91       	lpm	r24, Z+
    163a:	93 ff       	sbrs	r25, 3
    163c:	81 91       	ld	r24, Z+
    163e:	ff 87       	std	Y+15, r31	; 0x0f
    1640:	ee 87       	std	Y+14, r30	; 0x0e
    1642:	85 32       	cpi	r24, 0x25	; 37
    1644:	59 f4       	brne	.+22     	; 0x165c <vfprintf+0x72>
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	b4 01       	movw	r22, r8
    164a:	4c 8b       	std	Y+20, r20	; 0x14
    164c:	5d 8b       	std	Y+21, r21	; 0x15
    164e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1652:	4c 89       	ldd	r20, Y+20	; 0x14
    1654:	5d 89       	ldd	r21, Y+21	; 0x15
    1656:	5d 87       	std	Y+13, r21	; 0x0d
    1658:	4c 87       	std	Y+12, r20	; 0x0c
    165a:	d7 cf       	rjmp	.-82     	; 0x160a <vfprintf+0x20>
    165c:	ff 24       	eor	r15, r15
    165e:	dd 24       	eor	r13, r13
    1660:	10 e0       	ldi	r17, 0x00	; 0
    1662:	10 32       	cpi	r17, 0x20	; 32
    1664:	b0 f4       	brcc	.+44     	; 0x1692 <vfprintf+0xa8>
    1666:	8b 32       	cpi	r24, 0x2B	; 43
    1668:	69 f0       	breq	.+26     	; 0x1684 <vfprintf+0x9a>
    166a:	8c 32       	cpi	r24, 0x2C	; 44
    166c:	28 f4       	brcc	.+10     	; 0x1678 <vfprintf+0x8e>
    166e:	80 32       	cpi	r24, 0x20	; 32
    1670:	51 f0       	breq	.+20     	; 0x1686 <vfprintf+0x9c>
    1672:	83 32       	cpi	r24, 0x23	; 35
    1674:	71 f4       	brne	.+28     	; 0x1692 <vfprintf+0xa8>
    1676:	0b c0       	rjmp	.+22     	; 0x168e <vfprintf+0xa4>
    1678:	8d 32       	cpi	r24, 0x2D	; 45
    167a:	39 f0       	breq	.+14     	; 0x168a <vfprintf+0xa0>
    167c:	80 33       	cpi	r24, 0x30	; 48
    167e:	49 f4       	brne	.+18     	; 0x1692 <vfprintf+0xa8>
    1680:	11 60       	ori	r17, 0x01	; 1
    1682:	2c c0       	rjmp	.+88     	; 0x16dc <vfprintf+0xf2>
    1684:	12 60       	ori	r17, 0x02	; 2
    1686:	14 60       	ori	r17, 0x04	; 4
    1688:	29 c0       	rjmp	.+82     	; 0x16dc <vfprintf+0xf2>
    168a:	18 60       	ori	r17, 0x08	; 8
    168c:	27 c0       	rjmp	.+78     	; 0x16dc <vfprintf+0xf2>
    168e:	10 61       	ori	r17, 0x10	; 16
    1690:	25 c0       	rjmp	.+74     	; 0x16dc <vfprintf+0xf2>
    1692:	17 fd       	sbrc	r17, 7
    1694:	2e c0       	rjmp	.+92     	; 0x16f2 <vfprintf+0x108>
    1696:	28 2f       	mov	r18, r24
    1698:	20 53       	subi	r18, 0x30	; 48
    169a:	2a 30       	cpi	r18, 0x0A	; 10
    169c:	98 f4       	brcc	.+38     	; 0x16c4 <vfprintf+0xda>
    169e:	16 ff       	sbrs	r17, 6
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <vfprintf+0xc8>
    16a2:	8f 2d       	mov	r24, r15
    16a4:	88 0f       	add	r24, r24
    16a6:	f8 2e       	mov	r15, r24
    16a8:	ff 0c       	add	r15, r15
    16aa:	ff 0c       	add	r15, r15
    16ac:	f8 0e       	add	r15, r24
    16ae:	f2 0e       	add	r15, r18
    16b0:	15 c0       	rjmp	.+42     	; 0x16dc <vfprintf+0xf2>
    16b2:	8d 2d       	mov	r24, r13
    16b4:	88 0f       	add	r24, r24
    16b6:	d8 2e       	mov	r13, r24
    16b8:	dd 0c       	add	r13, r13
    16ba:	dd 0c       	add	r13, r13
    16bc:	d8 0e       	add	r13, r24
    16be:	d2 0e       	add	r13, r18
    16c0:	10 62       	ori	r17, 0x20	; 32
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <vfprintf+0xf2>
    16c4:	8e 32       	cpi	r24, 0x2E	; 46
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <vfprintf+0xe6>
    16c8:	16 fd       	sbrc	r17, 6
    16ca:	11 c3       	rjmp	.+1570   	; 0x1cee <vfprintf+0x704>
    16cc:	10 64       	ori	r17, 0x40	; 64
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <vfprintf+0xf2>
    16d0:	8c 36       	cpi	r24, 0x6C	; 108
    16d2:	11 f4       	brne	.+4      	; 0x16d8 <vfprintf+0xee>
    16d4:	10 68       	ori	r17, 0x80	; 128
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfprintf+0xf2>
    16d8:	88 36       	cpi	r24, 0x68	; 104
    16da:	59 f4       	brne	.+22     	; 0x16f2 <vfprintf+0x108>
    16dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    16de:	ff 85       	ldd	r31, Y+15	; 0x0f
    16e0:	93 fd       	sbrc	r25, 3
    16e2:	85 91       	lpm	r24, Z+
    16e4:	93 ff       	sbrs	r25, 3
    16e6:	81 91       	ld	r24, Z+
    16e8:	ff 87       	std	Y+15, r31	; 0x0f
    16ea:	ee 87       	std	Y+14, r30	; 0x0e
    16ec:	88 23       	and	r24, r24
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <vfprintf+0x108>
    16f0:	b8 cf       	rjmp	.-144    	; 0x1662 <vfprintf+0x78>
    16f2:	98 2f       	mov	r25, r24
    16f4:	95 54       	subi	r25, 0x45	; 69
    16f6:	93 30       	cpi	r25, 0x03	; 3
    16f8:	18 f4       	brcc	.+6      	; 0x1700 <vfprintf+0x116>
    16fa:	10 61       	ori	r17, 0x10	; 16
    16fc:	80 5e       	subi	r24, 0xE0	; 224
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x122>
    1700:	98 2f       	mov	r25, r24
    1702:	95 56       	subi	r25, 0x65	; 101
    1704:	93 30       	cpi	r25, 0x03	; 3
    1706:	08 f0       	brcs	.+2      	; 0x170a <vfprintf+0x120>
    1708:	a2 c1       	rjmp	.+836    	; 0x1a4e <vfprintf+0x464>
    170a:	1f 7e       	andi	r17, 0xEF	; 239
    170c:	16 fd       	sbrc	r17, 6
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0x12a>
    1710:	e6 e0       	ldi	r30, 0x06	; 6
    1712:	fe 2e       	mov	r15, r30
    1714:	1f 73       	andi	r17, 0x3F	; 63
    1716:	85 36       	cpi	r24, 0x65	; 101
    1718:	11 f4       	brne	.+4      	; 0x171e <vfprintf+0x134>
    171a:	10 64       	ori	r17, 0x40	; 64
    171c:	06 c0       	rjmp	.+12     	; 0x172a <vfprintf+0x140>
    171e:	86 36       	cpi	r24, 0x66	; 102
    1720:	11 f4       	brne	.+4      	; 0x1726 <vfprintf+0x13c>
    1722:	10 68       	ori	r17, 0x80	; 128
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x140>
    1726:	f1 10       	cpse	r15, r1
    1728:	fa 94       	dec	r15
    172a:	17 ff       	sbrs	r17, 7
    172c:	07 c0       	rjmp	.+14     	; 0x173c <vfprintf+0x152>
    172e:	fb e3       	ldi	r31, 0x3B	; 59
    1730:	ff 15       	cp	r31, r15
    1732:	48 f0       	brcs	.+18     	; 0x1746 <vfprintf+0x15c>
    1734:	ef 2c       	mov	r14, r15
    1736:	e3 94       	inc	r14
    1738:	27 e0       	ldi	r18, 0x07	; 7
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <vfprintf+0x16c>
    173c:	27 e0       	ldi	r18, 0x07	; 7
    173e:	2f 15       	cp	r18, r15
    1740:	30 f0       	brcs	.+12     	; 0x174e <vfprintf+0x164>
    1742:	2f 2d       	mov	r18, r15
    1744:	07 c0       	rjmp	.+14     	; 0x1754 <vfprintf+0x16a>
    1746:	27 e0       	ldi	r18, 0x07	; 7
    1748:	7c e3       	ldi	r23, 0x3C	; 60
    174a:	e7 2e       	mov	r14, r23
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <vfprintf+0x16c>
    174e:	27 e0       	ldi	r18, 0x07	; 7
    1750:	67 e0       	ldi	r22, 0x07	; 7
    1752:	f6 2e       	mov	r15, r22
    1754:	ee 24       	eor	r14, r14
    1756:	ca 01       	movw	r24, r20
    1758:	04 96       	adiw	r24, 0x04	; 4
    175a:	9d 87       	std	Y+13, r25	; 0x0d
    175c:	8c 87       	std	Y+12, r24	; 0x0c
    175e:	fa 01       	movw	r30, r20
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	a1 01       	movw	r20, r2
    176a:	0e 2d       	mov	r16, r14
    176c:	0e 94 4e 10 	call	0x209c	; 0x209c <__ftoa_engine>
    1770:	5c 01       	movw	r10, r24
    1772:	c9 80       	ldd	r12, Y+1	; 0x01
    1774:	2c 2d       	mov	r18, r12
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	39 8b       	std	Y+17, r19	; 0x11
    177a:	28 8b       	std	Y+16, r18	; 0x10
    177c:	c0 fe       	sbrs	r12, 0
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <vfprintf+0x19c>
    1780:	38 89       	ldd	r19, Y+16	; 0x10
    1782:	33 ff       	sbrs	r19, 3
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <vfprintf+0x1a8>
    1786:	11 fd       	sbrc	r17, 1
    1788:	06 c0       	rjmp	.+12     	; 0x1796 <vfprintf+0x1ac>
    178a:	12 ff       	sbrs	r17, 2
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x1b0>
    178e:	00 e2       	ldi	r16, 0x20	; 32
    1790:	05 c0       	rjmp	.+10     	; 0x179c <vfprintf+0x1b2>
    1792:	0d e2       	ldi	r16, 0x2D	; 45
    1794:	03 c0       	rjmp	.+6      	; 0x179c <vfprintf+0x1b2>
    1796:	0b e2       	ldi	r16, 0x2B	; 43
    1798:	01 c0       	rjmp	.+2      	; 0x179c <vfprintf+0x1b2>
    179a:	00 e0       	ldi	r16, 0x00	; 0
    179c:	88 89       	ldd	r24, Y+16	; 0x10
    179e:	99 89       	ldd	r25, Y+17	; 0x11
    17a0:	8c 70       	andi	r24, 0x0C	; 12
    17a2:	90 70       	andi	r25, 0x00	; 0
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	09 f4       	brne	.+2      	; 0x17aa <vfprintf+0x1c0>
    17a8:	3c c0       	rjmp	.+120    	; 0x1822 <vfprintf+0x238>
    17aa:	00 23       	and	r16, r16
    17ac:	11 f0       	breq	.+4      	; 0x17b2 <vfprintf+0x1c8>
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <vfprintf+0x1ca>
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	8d 15       	cp	r24, r13
    17b6:	58 f4       	brcc	.+22     	; 0x17ce <vfprintf+0x1e4>
    17b8:	d8 1a       	sub	r13, r24
    17ba:	13 fd       	sbrc	r17, 3
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <vfprintf+0x1e6>
    17be:	80 e2       	ldi	r24, 0x20	; 32
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	b4 01       	movw	r22, r8
    17c4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    17c8:	da 94       	dec	r13
    17ca:	c9 f7       	brne	.-14     	; 0x17be <vfprintf+0x1d4>
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x1e6>
    17ce:	dd 24       	eor	r13, r13
    17d0:	00 23       	and	r16, r16
    17d2:	29 f0       	breq	.+10     	; 0x17de <vfprintf+0x1f4>
    17d4:	80 2f       	mov	r24, r16
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	b4 01       	movw	r22, r8
    17da:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    17de:	88 89       	ldd	r24, Y+16	; 0x10
    17e0:	83 fd       	sbrc	r24, 3
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <vfprintf+0x204>
    17e4:	3c e6       	ldi	r19, 0x6C	; 108
    17e6:	e3 2e       	mov	r14, r19
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f3 2e       	mov	r15, r19
    17ec:	11 c0       	rjmp	.+34     	; 0x1810 <vfprintf+0x226>
    17ee:	28 e6       	ldi	r18, 0x68	; 104
    17f0:	e2 2e       	mov	r14, r18
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	f2 2e       	mov	r15, r18
    17f6:	0c c0       	rjmp	.+24     	; 0x1810 <vfprintf+0x226>
    17f8:	01 15       	cp	r16, r1
    17fa:	11 05       	cpc	r17, r1
    17fc:	09 f0       	breq	.+2      	; 0x1800 <vfprintf+0x216>
    17fe:	80 52       	subi	r24, 0x20	; 32
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	b4 01       	movw	r22, r8
    1804:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1808:	08 94       	sec
    180a:	e1 1c       	adc	r14, r1
    180c:	f1 1c       	adc	r15, r1
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <vfprintf+0x22e>
    1810:	01 2f       	mov	r16, r17
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	00 71       	andi	r16, 0x10	; 16
    1816:	10 70       	andi	r17, 0x00	; 0
    1818:	f7 01       	movw	r30, r14
    181a:	84 91       	lpm	r24, Z
    181c:	88 23       	and	r24, r24
    181e:	61 f7       	brne	.-40     	; 0x17f8 <vfprintf+0x20e>
    1820:	63 c2       	rjmp	.+1222   	; 0x1ce8 <vfprintf+0x6fe>
    1822:	17 ff       	sbrs	r17, 7
    1824:	0e c0       	rjmp	.+28     	; 0x1842 <vfprintf+0x258>
    1826:	ea 0c       	add	r14, r10
    1828:	f8 89       	ldd	r31, Y+16	; 0x10
    182a:	f4 ff       	sbrs	r31, 4
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <vfprintf+0x24c>
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	81 33       	cpi	r24, 0x31	; 49
    1832:	09 f4       	brne	.+2      	; 0x1836 <vfprintf+0x24c>
    1834:	ea 94       	dec	r14
    1836:	1e 14       	cp	r1, r14
    1838:	4c f5       	brge	.+82     	; 0x188c <vfprintf+0x2a2>
    183a:	28 e0       	ldi	r18, 0x08	; 8
    183c:	2e 15       	cp	r18, r14
    183e:	48 f1       	brcs	.+82     	; 0x1892 <vfprintf+0x2a8>
    1840:	2c c0       	rjmp	.+88     	; 0x189a <vfprintf+0x2b0>
    1842:	16 fd       	sbrc	r17, 6
    1844:	2a c0       	rjmp	.+84     	; 0x189a <vfprintf+0x2b0>
    1846:	8f 2d       	mov	r24, r15
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	8a 15       	cp	r24, r10
    184c:	9b 05       	cpc	r25, r11
    184e:	44 f0       	brlt	.+16     	; 0x1860 <vfprintf+0x276>
    1850:	3c ef       	ldi	r19, 0xFC	; 252
    1852:	a3 16       	cp	r10, r19
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	b3 06       	cpc	r11, r19
    1858:	1c f0       	brlt	.+6      	; 0x1860 <vfprintf+0x276>
    185a:	10 68       	ori	r17, 0x80	; 128
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <vfprintf+0x276>
    185e:	fa 94       	dec	r15
    1860:	ff 20       	and	r15, r15
    1862:	49 f0       	breq	.+18     	; 0x1876 <vfprintf+0x28c>
    1864:	e2 e0       	ldi	r30, 0x02	; 2
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	ec 0f       	add	r30, r28
    186a:	fd 1f       	adc	r31, r29
    186c:	ef 0d       	add	r30, r15
    186e:	f1 1d       	adc	r31, r1
    1870:	80 81       	ld	r24, Z
    1872:	80 33       	cpi	r24, 0x30	; 48
    1874:	a1 f3       	breq	.-24     	; 0x185e <vfprintf+0x274>
    1876:	17 ff       	sbrs	r17, 7
    1878:	10 c0       	rjmp	.+32     	; 0x189a <vfprintf+0x2b0>
    187a:	ef 2c       	mov	r14, r15
    187c:	e3 94       	inc	r14
    187e:	8f 2d       	mov	r24, r15
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a8 16       	cp	r10, r24
    1884:	b9 06       	cpc	r11, r25
    1886:	44 f4       	brge	.+16     	; 0x1898 <vfprintf+0x2ae>
    1888:	fa 18       	sub	r15, r10
    188a:	07 c0       	rjmp	.+14     	; 0x189a <vfprintf+0x2b0>
    188c:	ee 24       	eor	r14, r14
    188e:	e3 94       	inc	r14
    1890:	04 c0       	rjmp	.+8      	; 0x189a <vfprintf+0x2b0>
    1892:	98 e0       	ldi	r25, 0x08	; 8
    1894:	e9 2e       	mov	r14, r25
    1896:	01 c0       	rjmp	.+2      	; 0x189a <vfprintf+0x2b0>
    1898:	ff 24       	eor	r15, r15
    189a:	17 ff       	sbrs	r17, 7
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <vfprintf+0x2c2>
    189e:	1a 14       	cp	r1, r10
    18a0:	1b 04       	cpc	r1, r11
    18a2:	3c f4       	brge	.+14     	; 0x18b2 <vfprintf+0x2c8>
    18a4:	95 01       	movw	r18, r10
    18a6:	2f 5f       	subi	r18, 0xFF	; 255
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	05 c0       	rjmp	.+10     	; 0x18b6 <vfprintf+0x2cc>
    18ac:	25 e0       	ldi	r18, 0x05	; 5
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x2cc>
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	00 23       	and	r16, r16
    18b8:	11 f0       	breq	.+4      	; 0x18be <vfprintf+0x2d4>
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	ff 20       	and	r15, r15
    18c0:	29 f0       	breq	.+10     	; 0x18cc <vfprintf+0x2e2>
    18c2:	8f 2d       	mov	r24, r15
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	28 0f       	add	r18, r24
    18ca:	39 1f       	adc	r19, r25
    18cc:	8d 2d       	mov	r24, r13
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	14 f4       	brge	.+4      	; 0x18da <vfprintf+0x2f0>
    18d6:	d2 1a       	sub	r13, r18
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <vfprintf+0x2f2>
    18da:	dd 24       	eor	r13, r13
    18dc:	61 2e       	mov	r6, r17
    18de:	77 24       	eor	r7, r7
    18e0:	c3 01       	movw	r24, r6
    18e2:	89 70       	andi	r24, 0x09	; 9
    18e4:	90 70       	andi	r25, 0x00	; 0
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	49 f4       	brne	.+18     	; 0x18fc <vfprintf+0x312>
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <vfprintf+0x30e>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	b4 01       	movw	r22, r8
    18f2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    18f6:	da 94       	dec	r13
    18f8:	dd 20       	and	r13, r13
    18fa:	c1 f7       	brne	.-16     	; 0x18ec <vfprintf+0x302>
    18fc:	00 23       	and	r16, r16
    18fe:	29 f0       	breq	.+10     	; 0x190a <vfprintf+0x320>
    1900:	80 2f       	mov	r24, r16
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b4 01       	movw	r22, r8
    1906:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    190a:	63 fc       	sbrc	r6, 3
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <vfprintf+0x336>
    190e:	06 c0       	rjmp	.+12     	; 0x191c <vfprintf+0x332>
    1910:	80 e3       	ldi	r24, 0x30	; 48
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	b4 01       	movw	r22, r8
    1916:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    191a:	da 94       	dec	r13
    191c:	dd 20       	and	r13, r13
    191e:	c1 f7       	brne	.-16     	; 0x1910 <vfprintf+0x326>
    1920:	17 ff       	sbrs	r17, 7
    1922:	48 c0       	rjmp	.+144    	; 0x19b4 <vfprintf+0x3ca>
    1924:	85 01       	movw	r16, r10
    1926:	b7 fe       	sbrs	r11, 7
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x344>
    192a:	00 e0       	ldi	r16, 0x00	; 0
    192c:	10 e0       	ldi	r17, 0x00	; 0
    192e:	66 24       	eor	r6, r6
    1930:	77 24       	eor	r7, r7
    1932:	95 01       	movw	r18, r10
    1934:	2e 19       	sub	r18, r14
    1936:	31 09       	sbc	r19, r1
    1938:	3b 8b       	std	Y+19, r19	; 0x13
    193a:	2a 8b       	std	Y+18, r18	; 0x12
    193c:	25 01       	movw	r4, r10
    193e:	40 1a       	sub	r4, r16
    1940:	51 0a       	sbc	r5, r17
    1942:	42 0c       	add	r4, r2
    1944:	53 1c       	adc	r5, r3
    1946:	6f 2d       	mov	r22, r15
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	ee 24       	eor	r14, r14
    194c:	ff 24       	eor	r15, r15
    194e:	e6 1a       	sub	r14, r22
    1950:	f7 0a       	sbc	r15, r23
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	0f 3f       	cpi	r16, 0xFF	; 255
    1956:	13 07       	cpc	r17, r19
    1958:	29 f4       	brne	.+10     	; 0x1964 <vfprintf+0x37a>
    195a:	8e e2       	ldi	r24, 0x2E	; 46
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	b4 01       	movw	r22, r8
    1960:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1964:	a0 16       	cp	r10, r16
    1966:	b1 06       	cpc	r11, r17
    1968:	54 f0       	brlt	.+20     	; 0x197e <vfprintf+0x394>
    196a:	2a 89       	ldd	r18, Y+18	; 0x12
    196c:	3b 89       	ldd	r19, Y+19	; 0x13
    196e:	20 17       	cp	r18, r16
    1970:	31 07       	cpc	r19, r17
    1972:	2c f4       	brge	.+10     	; 0x197e <vfprintf+0x394>
    1974:	f2 01       	movw	r30, r4
    1976:	e6 0d       	add	r30, r6
    1978:	f7 1d       	adc	r31, r7
    197a:	81 81       	ldd	r24, Z+1	; 0x01
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <vfprintf+0x396>
    197e:	80 e3       	ldi	r24, 0x30	; 48
    1980:	01 50       	subi	r16, 0x01	; 1
    1982:	10 40       	sbci	r17, 0x00	; 0
    1984:	08 94       	sec
    1986:	61 1c       	adc	r6, r1
    1988:	71 1c       	adc	r7, r1
    198a:	0e 15       	cp	r16, r14
    198c:	1f 05       	cpc	r17, r15
    198e:	2c f0       	brlt	.+10     	; 0x199a <vfprintf+0x3b0>
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	b4 01       	movw	r22, r8
    1994:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1998:	dc cf       	rjmp	.-72     	; 0x1952 <vfprintf+0x368>
    199a:	0a 15       	cp	r16, r10
    199c:	1b 05       	cpc	r17, r11
    199e:	41 f4       	brne	.+16     	; 0x19b0 <vfprintf+0x3c6>
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	96 33       	cpi	r25, 0x36	; 54
    19a4:	20 f4       	brcc	.+8      	; 0x19ae <vfprintf+0x3c4>
    19a6:	95 33       	cpi	r25, 0x35	; 53
    19a8:	19 f4       	brne	.+6      	; 0x19b0 <vfprintf+0x3c6>
    19aa:	38 89       	ldd	r19, Y+16	; 0x10
    19ac:	34 ff       	sbrs	r19, 4
    19ae:	81 e3       	ldi	r24, 0x31	; 49
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	49 c0       	rjmp	.+146    	; 0x1a46 <vfprintf+0x45c>
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	81 33       	cpi	r24, 0x31	; 49
    19b8:	11 f0       	breq	.+4      	; 0x19be <vfprintf+0x3d4>
    19ba:	9f ee       	ldi	r25, 0xEF	; 239
    19bc:	c9 22       	and	r12, r25
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	b4 01       	movw	r22, r8
    19c2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    19c6:	ff 20       	and	r15, r15
    19c8:	89 f0       	breq	.+34     	; 0x19ec <vfprintf+0x402>
    19ca:	8e e2       	ldi	r24, 0x2E	; 46
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b4 01       	movw	r22, r8
    19d0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    19d4:	12 e0       	ldi	r17, 0x02	; 2
    19d6:	f1 01       	movw	r30, r2
    19d8:	e1 0f       	add	r30, r17
    19da:	f1 1d       	adc	r31, r1
    19dc:	1f 5f       	subi	r17, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	b4 01       	movw	r22, r8
    19e4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    19e8:	fa 94       	dec	r15
    19ea:	a9 f7       	brne	.-22     	; 0x19d6 <vfprintf+0x3ec>
    19ec:	64 fe       	sbrs	r6, 4
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <vfprintf+0x40c>
    19f0:	85 e4       	ldi	r24, 0x45	; 69
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x410>
    19f6:	85 e6       	ldi	r24, 0x65	; 101
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	b4 01       	movw	r22, r8
    19fc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1a00:	b7 fc       	sbrc	r11, 7
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <vfprintf+0x424>
    1a04:	a1 14       	cp	r10, r1
    1a06:	b1 04       	cpc	r11, r1
    1a08:	41 f4       	brne	.+16     	; 0x1a1a <vfprintf+0x430>
    1a0a:	c4 fe       	sbrs	r12, 4
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <vfprintf+0x430>
    1a0e:	b0 94       	com	r11
    1a10:	a1 94       	neg	r10
    1a12:	b1 08       	sbc	r11, r1
    1a14:	b3 94       	inc	r11
    1a16:	8d e2       	ldi	r24, 0x2D	; 45
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <vfprintf+0x432>
    1a1a:	8b e2       	ldi	r24, 0x2B	; 43
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	b4 01       	movw	r22, r8
    1a20:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1a24:	80 e3       	ldi	r24, 0x30	; 48
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <vfprintf+0x448>
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	e6 ef       	ldi	r30, 0xF6	; 246
    1a2c:	ff ef       	ldi	r31, 0xFF	; 255
    1a2e:	ae 0e       	add	r10, r30
    1a30:	bf 1e       	adc	r11, r31
    1a32:	fa e0       	ldi	r31, 0x0A	; 10
    1a34:	af 16       	cp	r10, r31
    1a36:	b1 04       	cpc	r11, r1
    1a38:	bc f7       	brge	.-18     	; 0x1a28 <vfprintf+0x43e>
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	b4 01       	movw	r22, r8
    1a3e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1a42:	c5 01       	movw	r24, r10
    1a44:	c0 96       	adiw	r24, 0x30	; 48
    1a46:	b4 01       	movw	r22, r8
    1a48:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1a4c:	4d c1       	rjmp	.+666    	; 0x1ce8 <vfprintf+0x6fe>
    1a4e:	83 36       	cpi	r24, 0x63	; 99
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <vfprintf+0x474>
    1a52:	83 37       	cpi	r24, 0x73	; 115
    1a54:	89 f0       	breq	.+34     	; 0x1a78 <vfprintf+0x48e>
    1a56:	83 35       	cpi	r24, 0x53	; 83
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <vfprintf+0x472>
    1a5a:	59 c0       	rjmp	.+178    	; 0x1b0e <vfprintf+0x524>
    1a5c:	22 c0       	rjmp	.+68     	; 0x1aa2 <vfprintf+0x4b8>
    1a5e:	9a 01       	movw	r18, r20
    1a60:	2e 5f       	subi	r18, 0xFE	; 254
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	3d 87       	std	Y+13, r19	; 0x0d
    1a66:	2c 87       	std	Y+12, r18	; 0x0c
    1a68:	fa 01       	movw	r30, r20
    1a6a:	80 81       	ld	r24, Z
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	e8 2e       	mov	r14, r24
    1a72:	f1 2c       	mov	r15, r1
    1a74:	51 01       	movw	r10, r2
    1a76:	13 c0       	rjmp	.+38     	; 0x1a9e <vfprintf+0x4b4>
    1a78:	9a 01       	movw	r18, r20
    1a7a:	2e 5f       	subi	r18, 0xFE	; 254
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	3d 87       	std	Y+13, r19	; 0x0d
    1a80:	2c 87       	std	Y+12, r18	; 0x0c
    1a82:	fa 01       	movw	r30, r20
    1a84:	a0 80       	ld	r10, Z
    1a86:	b1 80       	ldd	r11, Z+1	; 0x01
    1a88:	16 ff       	sbrs	r17, 6
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <vfprintf+0x4a8>
    1a8c:	6f 2d       	mov	r22, r15
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <vfprintf+0x4ac>
    1a92:	6f ef       	ldi	r22, 0xFF	; 255
    1a94:	7f ef       	ldi	r23, 0xFF	; 255
    1a96:	c5 01       	movw	r24, r10
    1a98:	0e 94 73 11 	call	0x22e6	; 0x22e6 <strnlen>
    1a9c:	7c 01       	movw	r14, r24
    1a9e:	1f 77       	andi	r17, 0x7F	; 127
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <vfprintf+0x4e0>
    1aa2:	9a 01       	movw	r18, r20
    1aa4:	2e 5f       	subi	r18, 0xFE	; 254
    1aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa8:	3d 87       	std	Y+13, r19	; 0x0d
    1aaa:	2c 87       	std	Y+12, r18	; 0x0c
    1aac:	fa 01       	movw	r30, r20
    1aae:	a0 80       	ld	r10, Z
    1ab0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab2:	16 ff       	sbrs	r17, 6
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <vfprintf+0x4d2>
    1ab6:	6f 2d       	mov	r22, r15
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <vfprintf+0x4d6>
    1abc:	6f ef       	ldi	r22, 0xFF	; 255
    1abe:	7f ef       	ldi	r23, 0xFF	; 255
    1ac0:	c5 01       	movw	r24, r10
    1ac2:	0e 94 46 11 	call	0x228c	; 0x228c <strnlen_P>
    1ac6:	7c 01       	movw	r14, r24
    1ac8:	10 68       	ori	r17, 0x80	; 128
    1aca:	13 fd       	sbrc	r17, 3
    1acc:	1c c0       	rjmp	.+56     	; 0x1b06 <vfprintf+0x51c>
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <vfprintf+0x4f2>
    1ad0:	80 e2       	ldi	r24, 0x20	; 32
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	b4 01       	movw	r22, r8
    1ad6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1ada:	da 94       	dec	r13
    1adc:	8d 2d       	mov	r24, r13
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	e8 16       	cp	r14, r24
    1ae2:	f9 06       	cpc	r15, r25
    1ae4:	a8 f3       	brcs	.-22     	; 0x1ad0 <vfprintf+0x4e6>
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <vfprintf+0x51c>
    1ae8:	f5 01       	movw	r30, r10
    1aea:	17 fd       	sbrc	r17, 7
    1aec:	85 91       	lpm	r24, Z+
    1aee:	17 ff       	sbrs	r17, 7
    1af0:	81 91       	ld	r24, Z+
    1af2:	5f 01       	movw	r10, r30
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	b4 01       	movw	r22, r8
    1af8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1afc:	d1 10       	cpse	r13, r1
    1afe:	da 94       	dec	r13
    1b00:	08 94       	sec
    1b02:	e1 08       	sbc	r14, r1
    1b04:	f1 08       	sbc	r15, r1
    1b06:	e1 14       	cp	r14, r1
    1b08:	f1 04       	cpc	r15, r1
    1b0a:	71 f7       	brne	.-36     	; 0x1ae8 <vfprintf+0x4fe>
    1b0c:	ed c0       	rjmp	.+474    	; 0x1ce8 <vfprintf+0x6fe>
    1b0e:	84 36       	cpi	r24, 0x64	; 100
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <vfprintf+0x52c>
    1b12:	89 36       	cpi	r24, 0x69	; 105
    1b14:	71 f5       	brne	.+92     	; 0x1b72 <vfprintf+0x588>
    1b16:	9a 01       	movw	r18, r20
    1b18:	17 ff       	sbrs	r17, 7
    1b1a:	0a c0       	rjmp	.+20     	; 0x1b30 <vfprintf+0x546>
    1b1c:	2c 5f       	subi	r18, 0xFC	; 252
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b20:	3d 87       	std	Y+13, r19	; 0x0d
    1b22:	2c 87       	std	Y+12, r18	; 0x0c
    1b24:	fa 01       	movw	r30, r20
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b2c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <vfprintf+0x55c>
    1b30:	2e 5f       	subi	r18, 0xFE	; 254
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	3d 87       	std	Y+13, r19	; 0x0d
    1b36:	2c 87       	std	Y+12, r18	; 0x0c
    1b38:	fa 01       	movw	r30, r20
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	aa 27       	eor	r26, r26
    1b40:	97 fd       	sbrc	r25, 7
    1b42:	a0 95       	com	r26
    1b44:	ba 2f       	mov	r27, r26
    1b46:	01 2f       	mov	r16, r17
    1b48:	0f 76       	andi	r16, 0x6F	; 111
    1b4a:	b7 ff       	sbrs	r27, 7
    1b4c:	08 c0       	rjmp	.+16     	; 0x1b5e <vfprintf+0x574>
    1b4e:	b0 95       	com	r27
    1b50:	a0 95       	com	r26
    1b52:	90 95       	com	r25
    1b54:	81 95       	neg	r24
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	af 4f       	sbci	r26, 0xFF	; 255
    1b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5c:	00 68       	ori	r16, 0x80	; 128
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	a1 01       	movw	r20, r2
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	0e 94 ed 11 	call	0x23da	; 0x23da <__ultoa_invert>
    1b6c:	e8 2e       	mov	r14, r24
    1b6e:	e2 18       	sub	r14, r2
    1b70:	41 c0       	rjmp	.+130    	; 0x1bf4 <vfprintf+0x60a>
    1b72:	85 37       	cpi	r24, 0x75	; 117
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <vfprintf+0x594>
    1b76:	1f 7e       	andi	r17, 0xEF	; 239
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	20 c0       	rjmp	.+64     	; 0x1bbe <vfprintf+0x5d4>
    1b7e:	19 7f       	andi	r17, 0xF9	; 249
    1b80:	8f 36       	cpi	r24, 0x6F	; 111
    1b82:	a9 f0       	breq	.+42     	; 0x1bae <vfprintf+0x5c4>
    1b84:	80 37       	cpi	r24, 0x70	; 112
    1b86:	20 f4       	brcc	.+8      	; 0x1b90 <vfprintf+0x5a6>
    1b88:	88 35       	cpi	r24, 0x58	; 88
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <vfprintf+0x5a4>
    1b8c:	b0 c0       	rjmp	.+352    	; 0x1cee <vfprintf+0x704>
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <vfprintf+0x5bc>
    1b90:	80 37       	cpi	r24, 0x70	; 112
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <vfprintf+0x5b2>
    1b94:	88 37       	cpi	r24, 0x78	; 120
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <vfprintf+0x5b0>
    1b98:	aa c0       	rjmp	.+340    	; 0x1cee <vfprintf+0x704>
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfprintf+0x5b4>
    1b9c:	10 61       	ori	r17, 0x10	; 16
    1b9e:	14 ff       	sbrs	r17, 4
    1ba0:	09 c0       	rjmp	.+18     	; 0x1bb4 <vfprintf+0x5ca>
    1ba2:	14 60       	ori	r17, 0x04	; 4
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <vfprintf+0x5ca>
    1ba6:	14 ff       	sbrs	r17, 4
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <vfprintf+0x5d0>
    1baa:	16 60       	ori	r17, 0x06	; 6
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <vfprintf+0x5d0>
    1bae:	28 e0       	ldi	r18, 0x08	; 8
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <vfprintf+0x5d4>
    1bb4:	20 e1       	ldi	r18, 0x10	; 16
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x5d4>
    1bba:	20 e1       	ldi	r18, 0x10	; 16
    1bbc:	32 e0       	ldi	r19, 0x02	; 2
    1bbe:	ca 01       	movw	r24, r20
    1bc0:	17 ff       	sbrs	r17, 7
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <vfprintf+0x5ec>
    1bc4:	04 96       	adiw	r24, 0x04	; 4
    1bc6:	9d 87       	std	Y+13, r25	; 0x0d
    1bc8:	8c 87       	std	Y+12, r24	; 0x0c
    1bca:	fa 01       	movw	r30, r20
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <vfprintf+0x5fc>
    1bd6:	02 96       	adiw	r24, 0x02	; 2
    1bd8:	9d 87       	std	Y+13, r25	; 0x0d
    1bda:	8c 87       	std	Y+12, r24	; 0x0c
    1bdc:	fa 01       	movw	r30, r20
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a1 01       	movw	r20, r2
    1be8:	0e 94 ed 11 	call	0x23da	; 0x23da <__ultoa_invert>
    1bec:	e8 2e       	mov	r14, r24
    1bee:	e2 18       	sub	r14, r2
    1bf0:	01 2f       	mov	r16, r17
    1bf2:	0f 77       	andi	r16, 0x7F	; 127
    1bf4:	06 ff       	sbrs	r16, 6
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <vfprintf+0x620>
    1bf8:	0e 7f       	andi	r16, 0xFE	; 254
    1bfa:	ef 14       	cp	r14, r15
    1bfc:	30 f4       	brcc	.+12     	; 0x1c0a <vfprintf+0x620>
    1bfe:	04 ff       	sbrs	r16, 4
    1c00:	06 c0       	rjmp	.+12     	; 0x1c0e <vfprintf+0x624>
    1c02:	02 fd       	sbrc	r16, 2
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <vfprintf+0x624>
    1c06:	0f 7e       	andi	r16, 0xEF	; 239
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <vfprintf+0x624>
    1c0a:	1e 2d       	mov	r17, r14
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <vfprintf+0x626>
    1c0e:	1f 2d       	mov	r17, r15
    1c10:	80 2f       	mov	r24, r16
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	04 ff       	sbrs	r16, 4
    1c16:	0c c0       	rjmp	.+24     	; 0x1c30 <vfprintf+0x646>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ee 0d       	add	r30, r14
    1c1c:	f1 1d       	adc	r31, r1
    1c1e:	20 81       	ld	r18, Z
    1c20:	20 33       	cpi	r18, 0x30	; 48
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <vfprintf+0x63e>
    1c24:	09 7e       	andi	r16, 0xE9	; 233
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <vfprintf+0x650>
    1c28:	02 ff       	sbrs	r16, 2
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <vfprintf+0x64e>
    1c2c:	1e 5f       	subi	r17, 0xFE	; 254
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <vfprintf+0x650>
    1c30:	86 78       	andi	r24, 0x86	; 134
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <vfprintf+0x650>
    1c38:	1f 5f       	subi	r17, 0xFF	; 255
    1c3a:	a0 2e       	mov	r10, r16
    1c3c:	bb 24       	eor	r11, r11
    1c3e:	03 fd       	sbrc	r16, 3
    1c40:	12 c0       	rjmp	.+36     	; 0x1c66 <vfprintf+0x67c>
    1c42:	00 ff       	sbrs	r16, 0
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <vfprintf+0x676>
    1c46:	fe 2c       	mov	r15, r14
    1c48:	1d 15       	cp	r17, r13
    1c4a:	50 f4       	brcc	.+20     	; 0x1c60 <vfprintf+0x676>
    1c4c:	fd 0c       	add	r15, r13
    1c4e:	f1 1a       	sub	r15, r17
    1c50:	1d 2d       	mov	r17, r13
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0x676>
    1c54:	80 e2       	ldi	r24, 0x20	; 32
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	b4 01       	movw	r22, r8
    1c5a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1c5e:	1f 5f       	subi	r17, 0xFF	; 255
    1c60:	1d 15       	cp	r17, r13
    1c62:	c0 f3       	brcs	.-16     	; 0x1c54 <vfprintf+0x66a>
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <vfprintf+0x684>
    1c66:	1d 15       	cp	r17, r13
    1c68:	10 f4       	brcc	.+4      	; 0x1c6e <vfprintf+0x684>
    1c6a:	d1 1a       	sub	r13, r17
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <vfprintf+0x686>
    1c6e:	dd 24       	eor	r13, r13
    1c70:	a4 fe       	sbrs	r10, 4
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <vfprintf+0x6a8>
    1c74:	80 e3       	ldi	r24, 0x30	; 48
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	b4 01       	movw	r22, r8
    1c7a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1c7e:	a2 fe       	sbrs	r10, 2
    1c80:	1f c0       	rjmp	.+62     	; 0x1cc0 <vfprintf+0x6d6>
    1c82:	a1 fe       	sbrs	r10, 1
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <vfprintf+0x6a2>
    1c86:	88 e5       	ldi	r24, 0x58	; 88
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	10 c0       	rjmp	.+32     	; 0x1cac <vfprintf+0x6c2>
    1c8c:	88 e7       	ldi	r24, 0x78	; 120
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0d c0       	rjmp	.+26     	; 0x1cac <vfprintf+0x6c2>
    1c92:	c5 01       	movw	r24, r10
    1c94:	86 78       	andi	r24, 0x86	; 134
    1c96:	90 70       	andi	r25, 0x00	; 0
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	91 f0       	breq	.+36     	; 0x1cc0 <vfprintf+0x6d6>
    1c9c:	a1 fc       	sbrc	r10, 1
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x6ba>
    1ca0:	80 e2       	ldi	r24, 0x20	; 32
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <vfprintf+0x6bc>
    1ca4:	8b e2       	ldi	r24, 0x2B	; 43
    1ca6:	07 fd       	sbrc	r16, 7
    1ca8:	8d e2       	ldi	r24, 0x2D	; 45
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	b4 01       	movw	r22, r8
    1cae:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0x6d6>
    1cb4:	80 e3       	ldi	r24, 0x30	; 48
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	b4 01       	movw	r22, r8
    1cba:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1cbe:	fa 94       	dec	r15
    1cc0:	ef 14       	cp	r14, r15
    1cc2:	c0 f3       	brcs	.-16     	; 0x1cb4 <vfprintf+0x6ca>
    1cc4:	ea 94       	dec	r14
    1cc6:	f1 01       	movw	r30, r2
    1cc8:	ee 0d       	add	r30, r14
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	80 81       	ld	r24, Z
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	b4 01       	movw	r22, r8
    1cd2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1cd6:	ee 20       	and	r14, r14
    1cd8:	a9 f7       	brne	.-22     	; 0x1cc4 <vfprintf+0x6da>
    1cda:	06 c0       	rjmp	.+12     	; 0x1ce8 <vfprintf+0x6fe>
    1cdc:	80 e2       	ldi	r24, 0x20	; 32
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	b4 01       	movw	r22, r8
    1ce2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fputc>
    1ce6:	da 94       	dec	r13
    1ce8:	dd 20       	and	r13, r13
    1cea:	c1 f7       	brne	.-16     	; 0x1cdc <vfprintf+0x6f2>
    1cec:	8e cc       	rjmp	.-1764   	; 0x160a <vfprintf+0x20>
    1cee:	f4 01       	movw	r30, r8
    1cf0:	86 81       	ldd	r24, Z+6	; 0x06
    1cf2:	97 81       	ldd	r25, Z+7	; 0x07
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <vfprintf+0x710>
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
    1cfa:	65 96       	adiw	r28, 0x15	; 21
    1cfc:	e2 e1       	ldi	r30, 0x12	; 18
    1cfe:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__>

00001d02 <__divmodhi4>:
    1d02:	97 fb       	bst	r25, 7
    1d04:	09 2e       	mov	r0, r25
    1d06:	07 26       	eor	r0, r23
    1d08:	0a d0       	rcall	.+20     	; 0x1d1e <__divmodhi4_neg1>
    1d0a:	77 fd       	sbrc	r23, 7
    1d0c:	04 d0       	rcall	.+8      	; 0x1d16 <__divmodhi4_neg2>
    1d0e:	43 d0       	rcall	.+134    	; 0x1d96 <__udivmodhi4>
    1d10:	06 d0       	rcall	.+12     	; 0x1d1e <__divmodhi4_neg1>
    1d12:	00 20       	and	r0, r0
    1d14:	1a f4       	brpl	.+6      	; 0x1d1c <__divmodhi4_exit>

00001d16 <__divmodhi4_neg2>:
    1d16:	70 95       	com	r23
    1d18:	61 95       	neg	r22
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255

00001d1c <__divmodhi4_exit>:
    1d1c:	08 95       	ret

00001d1e <__divmodhi4_neg1>:
    1d1e:	f6 f7       	brtc	.-4      	; 0x1d1c <__divmodhi4_exit>
    1d20:	90 95       	com	r25
    1d22:	81 95       	neg	r24
    1d24:	9f 4f       	sbci	r25, 0xFF	; 255
    1d26:	08 95       	ret

00001d28 <__prologue_saves__>:
    1d28:	2f 92       	push	r2
    1d2a:	3f 92       	push	r3
    1d2c:	4f 92       	push	r4
    1d2e:	5f 92       	push	r5
    1d30:	6f 92       	push	r6
    1d32:	7f 92       	push	r7
    1d34:	8f 92       	push	r8
    1d36:	9f 92       	push	r9
    1d38:	af 92       	push	r10
    1d3a:	bf 92       	push	r11
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	ca 1b       	sub	r28, r26
    1d52:	db 0b       	sbc	r29, r27
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	09 94       	ijmp

00001d60 <__epilogue_restores__>:
    1d60:	2a 88       	ldd	r2, Y+18	; 0x12
    1d62:	39 88       	ldd	r3, Y+17	; 0x11
    1d64:	48 88       	ldd	r4, Y+16	; 0x10
    1d66:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d68:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d70:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d72:	b9 84       	ldd	r11, Y+9	; 0x09
    1d74:	c8 84       	ldd	r12, Y+8	; 0x08
    1d76:	df 80       	ldd	r13, Y+7	; 0x07
    1d78:	ee 80       	ldd	r14, Y+6	; 0x06
    1d7a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d7c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d7e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d80:	aa 81       	ldd	r26, Y+2	; 0x02
    1d82:	b9 81       	ldd	r27, Y+1	; 0x01
    1d84:	ce 0f       	add	r28, r30
    1d86:	d1 1d       	adc	r29, r1
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	ed 01       	movw	r28, r26
    1d94:	08 95       	ret

00001d96 <__udivmodhi4>:
    1d96:	aa 1b       	sub	r26, r26
    1d98:	bb 1b       	sub	r27, r27
    1d9a:	51 e1       	ldi	r21, 0x11	; 17
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <__udivmodhi4_ep>

00001d9e <__udivmodhi4_loop>:
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	a6 17       	cp	r26, r22
    1da4:	b7 07       	cpc	r27, r23
    1da6:	10 f0       	brcs	.+4      	; 0x1dac <__udivmodhi4_ep>
    1da8:	a6 1b       	sub	r26, r22
    1daa:	b7 0b       	sbc	r27, r23

00001dac <__udivmodhi4_ep>:
    1dac:	88 1f       	adc	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	5a 95       	dec	r21
    1db2:	a9 f7       	brne	.-22     	; 0x1d9e <__udivmodhi4_loop>
    1db4:	80 95       	com	r24
    1db6:	90 95       	com	r25
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	08 95       	ret

00001dbe <strtod>:
    1dbe:	a0 e0       	ldi	r26, 0x00	; 0
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    1dc4:	fe e0       	ldi	r31, 0x0E	; 14
    1dc6:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__+0x8>
    1dca:	5b 01       	movw	r10, r22
    1dcc:	61 15       	cp	r22, r1
    1dce:	71 05       	cpc	r23, r1
    1dd0:	21 f0       	breq	.+8      	; 0x1dda <strtod+0x1c>
    1dd2:	db 01       	movw	r26, r22
    1dd4:	8c 93       	st	X, r24
    1dd6:	11 96       	adiw	r26, 0x01	; 1
    1dd8:	9c 93       	st	X, r25
    1dda:	7c 01       	movw	r14, r24
    1ddc:	e7 01       	movw	r28, r14
    1dde:	08 94       	sec
    1de0:	e1 1c       	adc	r14, r1
    1de2:	f1 1c       	adc	r15, r1
    1de4:	08 81       	ld	r16, Y
    1de6:	67 01       	movw	r12, r14
    1de8:	80 2f       	mov	r24, r16
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 26 11 	call	0x224c	; 0x224c <isspace>
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	a1 f7       	brne	.-24     	; 0x1ddc <strtod+0x1e>
    1df4:	0d 32       	cpi	r16, 0x2D	; 45
    1df6:	41 f4       	brne	.+16     	; 0x1e08 <strtod+0x4a>
    1df8:	09 81       	ldd	r16, Y+1	; 0x01
    1dfa:	42 e0       	ldi	r20, 0x02	; 2
    1dfc:	c4 2e       	mov	r12, r20
    1dfe:	d1 2c       	mov	r13, r1
    1e00:	cc 0e       	add	r12, r28
    1e02:	dd 1e       	adc	r13, r29
    1e04:	11 e0       	ldi	r17, 0x01	; 1
    1e06:	09 c0       	rjmp	.+18     	; 0x1e1a <strtod+0x5c>
    1e08:	0b 32       	cpi	r16, 0x2B	; 43
    1e0a:	31 f4       	brne	.+12     	; 0x1e18 <strtod+0x5a>
    1e0c:	09 81       	ldd	r16, Y+1	; 0x01
    1e0e:	32 e0       	ldi	r19, 0x02	; 2
    1e10:	c3 2e       	mov	r12, r19
    1e12:	d1 2c       	mov	r13, r1
    1e14:	cc 0e       	add	r12, r28
    1e16:	dd 1e       	adc	r13, r29
    1e18:	10 e0       	ldi	r17, 0x00	; 0
    1e1a:	e6 01       	movw	r28, r12
    1e1c:	21 97       	sbiw	r28, 0x01	; 1
    1e1e:	ce 01       	movw	r24, r28
    1e20:	60 e7       	ldi	r22, 0x70	; 112
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	43 e0       	ldi	r20, 0x03	; 3
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	0e 94 2e 11 	call	0x225c	; 0x225c <strncasecmp_P>
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	d1 f4       	brne	.+52     	; 0x1e64 <strtod+0xa6>
    1e30:	e6 01       	movw	r28, r12
    1e32:	22 96       	adiw	r28, 0x02	; 2
    1e34:	ce 01       	movw	r24, r28
    1e36:	63 e7       	ldi	r22, 0x73	; 115
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	45 e0       	ldi	r20, 0x05	; 5
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	0e 94 2e 11 	call	0x225c	; 0x225c <strncasecmp_P>
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <strtod+0x8c>
    1e46:	e6 01       	movw	r28, r12
    1e48:	27 96       	adiw	r28, 0x07	; 7
    1e4a:	a1 14       	cp	r10, r1
    1e4c:	b1 04       	cpc	r11, r1
    1e4e:	19 f0       	breq	.+6      	; 0x1e56 <strtod+0x98>
    1e50:	f5 01       	movw	r30, r10
    1e52:	d1 83       	std	Z+1, r29	; 0x01
    1e54:	c0 83       	st	Z, r28
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	90 e8       	ldi	r25, 0x80	; 128
    1e5c:	11 23       	and	r17, r17
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <strtod+0xa4>
    1e60:	0a c1       	rjmp	.+532    	; 0x2076 <strtod+0x2b8>
    1e62:	04 c1       	rjmp	.+520    	; 0x206c <strtod+0x2ae>
    1e64:	ce 01       	movw	r24, r28
    1e66:	68 e7       	ldi	r22, 0x78	; 120
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	43 e0       	ldi	r20, 0x03	; 3
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	0e 94 2e 11 	call	0x225c	; 0x225c <strncasecmp_P>
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	59 f4       	brne	.+22     	; 0x1e8c <strtod+0xce>
    1e76:	a1 14       	cp	r10, r1
    1e78:	b1 04       	cpc	r11, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <strtod+0xc0>
    1e7c:	f9 c0       	rjmp	.+498    	; 0x2070 <strtod+0x2b2>
    1e7e:	c6 01       	movw	r24, r12
    1e80:	02 96       	adiw	r24, 0x02	; 2
    1e82:	d5 01       	movw	r26, r10
    1e84:	11 96       	adiw	r26, 0x01	; 1
    1e86:	9c 93       	st	X, r25
    1e88:	8e 93       	st	-X, r24
    1e8a:	f2 c0       	rjmp	.+484    	; 0x2070 <strtod+0x2b2>
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	ba 01       	movw	r22, r20
    1e92:	88 24       	eor	r8, r8
    1e94:	99 24       	eor	r9, r9
    1e96:	00 53       	subi	r16, 0x30	; 48
    1e98:	0a 30       	cpi	r16, 0x0A	; 10
    1e9a:	90 f5       	brcc	.+100    	; 0x1f00 <strtod+0x142>
    1e9c:	12 60       	ori	r17, 0x02	; 2
    1e9e:	21 2f       	mov	r18, r17
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	88 70       	andi	r24, 0x08	; 8
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	12 ff       	sbrs	r17, 2
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <strtod+0xfa>
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f5       	brne	.+90     	; 0x1f0a <strtod+0x14c>
    1eb0:	08 94       	sec
    1eb2:	81 1c       	adc	r8, r1
    1eb4:	91 1c       	adc	r9, r1
    1eb6:	29 c0       	rjmp	.+82     	; 0x1f0a <strtod+0x14c>
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	19 f0       	breq	.+6      	; 0x1ec2 <strtod+0x104>
    1ebc:	08 94       	sec
    1ebe:	81 08       	sbc	r8, r1
    1ec0:	91 08       	sbc	r9, r1
    1ec2:	db 01       	movw	r26, r22
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	d2 e0       	ldi	r29, 0x02	; 2
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	aa 1f       	adc	r26, r26
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	da 95       	dec	r29
    1ed2:	d1 f7       	brne	.-12     	; 0x1ec8 <strtod+0x10a>
    1ed4:	48 0f       	add	r20, r24
    1ed6:	59 1f       	adc	r21, r25
    1ed8:	6a 1f       	adc	r22, r26
    1eda:	7b 1f       	adc	r23, r27
    1edc:	44 0f       	add	r20, r20
    1ede:	55 1f       	adc	r21, r21
    1ee0:	66 1f       	adc	r22, r22
    1ee2:	77 1f       	adc	r23, r23
    1ee4:	40 0f       	add	r20, r16
    1ee6:	51 1d       	adc	r21, r1
    1ee8:	61 1d       	adc	r22, r1
    1eea:	71 1d       	adc	r23, r1
    1eec:	48 39       	cpi	r20, 0x98	; 152
    1eee:	b9 e9       	ldi	r27, 0x99	; 153
    1ef0:	5b 07       	cpc	r21, r27
    1ef2:	b9 e9       	ldi	r27, 0x99	; 153
    1ef4:	6b 07       	cpc	r22, r27
    1ef6:	b9 e1       	ldi	r27, 0x19	; 25
    1ef8:	7b 07       	cpc	r23, r27
    1efa:	38 f0       	brcs	.+14     	; 0x1f0a <strtod+0x14c>
    1efc:	14 60       	ori	r17, 0x04	; 4
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <strtod+0x14c>
    1f00:	0e 3f       	cpi	r16, 0xFE	; 254
    1f02:	39 f4       	brne	.+14     	; 0x1f12 <strtod+0x154>
    1f04:	13 fd       	sbrc	r17, 3
    1f06:	43 c0       	rjmp	.+134    	; 0x1f8e <strtod+0x1d0>
    1f08:	18 60       	ori	r17, 0x08	; 8
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	01 91       	ld	r16, Z+
    1f0e:	6f 01       	movw	r12, r30
    1f10:	c2 cf       	rjmp	.-124    	; 0x1e96 <strtod+0xd8>
    1f12:	05 33       	cpi	r16, 0x35	; 53
    1f14:	11 f0       	breq	.+4      	; 0x1f1a <strtod+0x15c>
    1f16:	05 31       	cpi	r16, 0x15	; 21
    1f18:	d1 f5       	brne	.+116    	; 0x1f8e <strtod+0x1d0>
    1f1a:	d6 01       	movw	r26, r12
    1f1c:	ec 91       	ld	r30, X
    1f1e:	ed 32       	cpi	r30, 0x2D	; 45
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <strtod+0x168>
    1f22:	10 61       	ori	r17, 0x10	; 16
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <strtod+0x178>
    1f26:	eb 32       	cpi	r30, 0x2B	; 43
    1f28:	29 f0       	breq	.+10     	; 0x1f34 <strtod+0x176>
    1f2a:	c6 01       	movw	r24, r12
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	08 c0       	rjmp	.+16     	; 0x1f44 <strtod+0x186>
    1f34:	d6 01       	movw	r26, r12
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	ec 91       	ld	r30, X
    1f3a:	11 97       	sbiw	r26, 0x01	; 1
    1f3c:	c6 01       	movw	r24, r12
    1f3e:	02 96       	adiw	r24, 0x02	; 2
    1f40:	22 e0       	ldi	r18, 0x02	; 2
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	e0 53       	subi	r30, 0x30	; 48
    1f46:	ea 30       	cpi	r30, 0x0A	; 10
    1f48:	20 f0       	brcs	.+8      	; 0x1f52 <strtod+0x194>
    1f4a:	6c 01       	movw	r12, r24
    1f4c:	c2 1a       	sub	r12, r18
    1f4e:	d3 0a       	sbc	r13, r19
    1f50:	1e c0       	rjmp	.+60     	; 0x1f8e <strtod+0x1d0>
    1f52:	dc 01       	movw	r26, r24
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	fc e0       	ldi	r31, 0x0C	; 12
    1f5a:	20 38       	cpi	r18, 0x80	; 128
    1f5c:	3f 07       	cpc	r19, r31
    1f5e:	5c f4       	brge	.+22     	; 0x1f76 <strtod+0x1b8>
    1f60:	c9 01       	movw	r24, r18
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	28 0f       	add	r18, r24
    1f6c:	39 1f       	adc	r19, r25
    1f6e:	22 0f       	add	r18, r18
    1f70:	33 1f       	adc	r19, r19
    1f72:	2e 0f       	add	r18, r30
    1f74:	31 1d       	adc	r19, r1
    1f76:	ed 91       	ld	r30, X+
    1f78:	e0 53       	subi	r30, 0x30	; 48
    1f7a:	6d 01       	movw	r12, r26
    1f7c:	ea 30       	cpi	r30, 0x0A	; 10
    1f7e:	60 f3       	brcs	.-40     	; 0x1f58 <strtod+0x19a>
    1f80:	14 ff       	sbrs	r17, 4
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <strtod+0x1cc>
    1f84:	30 95       	com	r19
    1f86:	21 95       	neg	r18
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	82 0e       	add	r8, r18
    1f8c:	93 1e       	adc	r9, r19
    1f8e:	c1 2f       	mov	r28, r17
    1f90:	d0 e0       	ldi	r29, 0x00	; 0
    1f92:	11 ff       	sbrs	r17, 1
    1f94:	08 c0       	rjmp	.+16     	; 0x1fa6 <strtod+0x1e8>
    1f96:	a1 14       	cp	r10, r1
    1f98:	b1 04       	cpc	r11, r1
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <strtod+0x1e8>
    1f9c:	c6 01       	movw	r24, r12
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	d5 01       	movw	r26, r10
    1fa2:	8d 93       	st	X+, r24
    1fa4:	9c 93       	st	X, r25
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	ba 01       	movw	r22, r20
    1faa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__floatunsisf>
    1fae:	6b 01       	movw	r12, r22
    1fb0:	7c 01       	movw	r14, r24
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	83 70       	andi	r24, 0x03	; 3
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	83 30       	cpi	r24, 0x03	; 3
    1fba:	91 05       	cpc	r25, r1
    1fbc:	21 f4       	brne	.+8      	; 0x1fc6 <strtod+0x208>
    1fbe:	f7 fa       	bst	r15, 7
    1fc0:	f0 94       	com	r15
    1fc2:	f7 f8       	bld	r15, 7
    1fc4:	f0 94       	com	r15
    1fc6:	c7 01       	movw	r24, r14
    1fc8:	b6 01       	movw	r22, r12
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	a9 01       	movw	r20, r18
    1fd0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__cmpsf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <strtod+0x21c>
    1fd8:	44 c0       	rjmp	.+136    	; 0x2062 <strtod+0x2a4>
    1fda:	97 fe       	sbrs	r9, 7
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <strtod+0x22e>
    1fde:	90 94       	com	r9
    1fe0:	81 94       	neg	r8
    1fe2:	91 08       	sbc	r9, r1
    1fe4:	93 94       	inc	r9
    1fe6:	c7 ea       	ldi	r28, 0xA7	; 167
    1fe8:	d0 e0       	ldi	r29, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <strtod+0x232>
    1fec:	cf e8       	ldi	r28, 0x8F	; 143
    1fee:	d0 e0       	ldi	r29, 0x00	; 0
    1ff0:	98 ee       	ldi	r25, 0xE8	; 232
    1ff2:	69 2e       	mov	r6, r25
    1ff4:	9f ef       	ldi	r25, 0xFF	; 255
    1ff6:	79 2e       	mov	r7, r25
    1ff8:	6c 0e       	add	r6, r28
    1ffa:	7d 1e       	adc	r7, r29
    1ffc:	20 e2       	ldi	r18, 0x20	; 32
    1ffe:	a2 2e       	mov	r10, r18
    2000:	b1 2c       	mov	r11, r1
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <strtod+0x264>
    2004:	fe 01       	movw	r30, r28
    2006:	05 91       	lpm	r16, Z+
    2008:	15 91       	lpm	r17, Z+
    200a:	25 91       	lpm	r18, Z+
    200c:	34 91       	lpm	r19, Z
    200e:	c7 01       	movw	r24, r14
    2010:	b6 01       	movw	r22, r12
    2012:	a9 01       	movw	r20, r18
    2014:	98 01       	movw	r18, r16
    2016:	0e 94 92 0a 	call	0x1524	; 0x1524 <__mulsf3>
    201a:	6b 01       	movw	r12, r22
    201c:	7c 01       	movw	r14, r24
    201e:	8a 18       	sub	r8, r10
    2020:	9b 08       	sbc	r9, r11
    2022:	8a 14       	cp	r8, r10
    2024:	9b 04       	cpc	r9, r11
    2026:	74 f7       	brge	.-36     	; 0x2004 <strtod+0x246>
    2028:	24 97       	sbiw	r28, 0x04	; 4
    202a:	b5 94       	asr	r11
    202c:	a7 94       	ror	r10
    202e:	c6 15       	cp	r28, r6
    2030:	d7 05       	cpc	r29, r7
    2032:	b9 f7       	brne	.-18     	; 0x2022 <strtod+0x264>
    2034:	c6 01       	movw	r24, r12
    2036:	d7 01       	movw	r26, r14
    2038:	2a 2f       	mov	r18, r26
    203a:	22 0f       	add	r18, r18
    203c:	2b 2f       	mov	r18, r27
    203e:	22 1f       	adc	r18, r18
    2040:	2f 3f       	cpi	r18, 0xFF	; 255
    2042:	49 f0       	breq	.+18     	; 0x2056 <strtod+0x298>
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	a9 01       	movw	r20, r18
    204e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__cmpsf2>
    2052:	88 23       	and	r24, r24
    2054:	31 f4       	brne	.+12     	; 0x2062 <strtod+0x2a4>
    2056:	82 e2       	ldi	r24, 0x22	; 34
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	90 93 0f 08 	sts	0x080F, r25
    205e:	80 93 0e 08 	sts	0x080E, r24
    2062:	3c 2d       	mov	r19, r12
    2064:	2d 2d       	mov	r18, r13
    2066:	9e 2d       	mov	r25, r14
    2068:	8f 2d       	mov	r24, r15
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <strtod+0x2ba>
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <strtod+0x2ba>
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	90 ec       	ldi	r25, 0xC0	; 192
    2076:	8f e7       	ldi	r24, 0x7F	; 127
    2078:	b9 01       	movw	r22, r18
    207a:	ac 01       	movw	r20, r24
    207c:	87 2f       	mov	r24, r23
    207e:	92 2f       	mov	r25, r18
    2080:	a5 2f       	mov	r26, r21
    2082:	b4 2f       	mov	r27, r20
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	ee e0       	ldi	r30, 0x0E	; 14
    208e:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__+0x8>

00002092 <abort>:
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	f8 94       	cli
    2098:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_exit>

0000209c <__ftoa_engine>:
    209c:	28 30       	cpi	r18, 0x08	; 8
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <__ftoa_engine+0x6>
    20a0:	27 e0       	ldi	r18, 0x07	; 7
    20a2:	33 27       	eor	r19, r19
    20a4:	da 01       	movw	r26, r20
    20a6:	99 0f       	add	r25, r25
    20a8:	31 1d       	adc	r19, r1
    20aa:	87 fd       	sbrc	r24, 7
    20ac:	91 60       	ori	r25, 0x01	; 1
    20ae:	00 96       	adiw	r24, 0x00	; 0
    20b0:	61 05       	cpc	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	39 f4       	brne	.+14     	; 0x20c4 <__ftoa_engine+0x28>
    20b6:	32 60       	ori	r19, 0x02	; 2
    20b8:	2e 5f       	subi	r18, 0xFE	; 254
    20ba:	3d 93       	st	X+, r19
    20bc:	30 e3       	ldi	r19, 0x30	; 48
    20be:	2a 95       	dec	r18
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <__ftoa_engine+0x1e>
    20c2:	08 95       	ret
    20c4:	9f 3f       	cpi	r25, 0xFF	; 255
    20c6:	30 f0       	brcs	.+12     	; 0x20d4 <__ftoa_engine+0x38>
    20c8:	80 38       	cpi	r24, 0x80	; 128
    20ca:	71 05       	cpc	r23, r1
    20cc:	61 05       	cpc	r22, r1
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <__ftoa_engine+0x36>
    20d0:	3c 5f       	subi	r19, 0xFC	; 252
    20d2:	3c 5f       	subi	r19, 0xFC	; 252
    20d4:	3d 93       	st	X+, r19
    20d6:	91 30       	cpi	r25, 0x01	; 1
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <__ftoa_engine+0x40>
    20da:	80 68       	ori	r24, 0x80	; 128
    20dc:	91 1d       	adc	r25, r1
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	1f 93       	push	r17
    20e4:	0f 93       	push	r16
    20e6:	ff 92       	push	r15
    20e8:	ef 92       	push	r14
    20ea:	19 2f       	mov	r17, r25
    20ec:	98 7f       	andi	r25, 0xF8	; 248
    20ee:	96 95       	lsr	r25
    20f0:	e9 2f       	mov	r30, r25
    20f2:	96 95       	lsr	r25
    20f4:	96 95       	lsr	r25
    20f6:	e9 0f       	add	r30, r25
    20f8:	ff 27       	eor	r31, r31
    20fa:	eb 5f       	subi	r30, 0xFB	; 251
    20fc:	fe 4f       	sbci	r31, 0xFE	; 254
    20fe:	99 27       	eor	r25, r25
    2100:	33 27       	eor	r19, r19
    2102:	ee 24       	eor	r14, r14
    2104:	ff 24       	eor	r15, r15
    2106:	a7 01       	movw	r20, r14
    2108:	e7 01       	movw	r28, r14
    210a:	05 90       	lpm	r0, Z+
    210c:	08 94       	sec
    210e:	07 94       	ror	r0
    2110:	28 f4       	brcc	.+10     	; 0x211c <__ftoa_engine+0x80>
    2112:	36 0f       	add	r19, r22
    2114:	e7 1e       	adc	r14, r23
    2116:	f8 1e       	adc	r15, r24
    2118:	49 1f       	adc	r20, r25
    211a:	51 1d       	adc	r21, r1
    211c:	66 0f       	add	r22, r22
    211e:	77 1f       	adc	r23, r23
    2120:	88 1f       	adc	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	06 94       	lsr	r0
    2126:	a1 f7       	brne	.-24     	; 0x2110 <__ftoa_engine+0x74>
    2128:	05 90       	lpm	r0, Z+
    212a:	07 94       	ror	r0
    212c:	28 f4       	brcc	.+10     	; 0x2138 <__ftoa_engine+0x9c>
    212e:	e7 0e       	add	r14, r23
    2130:	f8 1e       	adc	r15, r24
    2132:	49 1f       	adc	r20, r25
    2134:	56 1f       	adc	r21, r22
    2136:	c1 1d       	adc	r28, r1
    2138:	77 0f       	add	r23, r23
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	66 1f       	adc	r22, r22
    2140:	06 94       	lsr	r0
    2142:	a1 f7       	brne	.-24     	; 0x212c <__ftoa_engine+0x90>
    2144:	05 90       	lpm	r0, Z+
    2146:	07 94       	ror	r0
    2148:	28 f4       	brcc	.+10     	; 0x2154 <__ftoa_engine+0xb8>
    214a:	f8 0e       	add	r15, r24
    214c:	49 1f       	adc	r20, r25
    214e:	56 1f       	adc	r21, r22
    2150:	c7 1f       	adc	r28, r23
    2152:	d1 1d       	adc	r29, r1
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	66 1f       	adc	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	06 94       	lsr	r0
    215e:	a1 f7       	brne	.-24     	; 0x2148 <__ftoa_engine+0xac>
    2160:	05 90       	lpm	r0, Z+
    2162:	07 94       	ror	r0
    2164:	20 f4       	brcc	.+8      	; 0x216e <__ftoa_engine+0xd2>
    2166:	49 0f       	add	r20, r25
    2168:	56 1f       	adc	r21, r22
    216a:	c7 1f       	adc	r28, r23
    216c:	d8 1f       	adc	r29, r24
    216e:	99 0f       	add	r25, r25
    2170:	66 1f       	adc	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	88 1f       	adc	r24, r24
    2176:	06 94       	lsr	r0
    2178:	a9 f7       	brne	.-22     	; 0x2164 <__ftoa_engine+0xc8>
    217a:	84 91       	lpm	r24, Z
    217c:	10 95       	com	r17
    217e:	17 70       	andi	r17, 0x07	; 7
    2180:	41 f0       	breq	.+16     	; 0x2192 <__ftoa_engine+0xf6>
    2182:	d6 95       	lsr	r29
    2184:	c7 95       	ror	r28
    2186:	57 95       	ror	r21
    2188:	47 95       	ror	r20
    218a:	f7 94       	ror	r15
    218c:	e7 94       	ror	r14
    218e:	1a 95       	dec	r17
    2190:	c1 f7       	brne	.-16     	; 0x2182 <__ftoa_engine+0xe6>
    2192:	eb ea       	ldi	r30, 0xAB	; 171
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	68 94       	set
    2198:	15 90       	lpm	r1, Z+
    219a:	15 91       	lpm	r17, Z+
    219c:	35 91       	lpm	r19, Z+
    219e:	65 91       	lpm	r22, Z+
    21a0:	95 91       	lpm	r25, Z+
    21a2:	05 90       	lpm	r0, Z+
    21a4:	7f e2       	ldi	r23, 0x2F	; 47
    21a6:	73 95       	inc	r23
    21a8:	e1 18       	sub	r14, r1
    21aa:	f1 0a       	sbc	r15, r17
    21ac:	43 0b       	sbc	r20, r19
    21ae:	56 0b       	sbc	r21, r22
    21b0:	c9 0b       	sbc	r28, r25
    21b2:	d0 09       	sbc	r29, r0
    21b4:	c0 f7       	brcc	.-16     	; 0x21a6 <__ftoa_engine+0x10a>
    21b6:	e1 0c       	add	r14, r1
    21b8:	f1 1e       	adc	r15, r17
    21ba:	43 1f       	adc	r20, r19
    21bc:	56 1f       	adc	r21, r22
    21be:	c9 1f       	adc	r28, r25
    21c0:	d0 1d       	adc	r29, r0
    21c2:	7e f4       	brtc	.+30     	; 0x21e2 <__ftoa_engine+0x146>
    21c4:	70 33       	cpi	r23, 0x30	; 48
    21c6:	11 f4       	brne	.+4      	; 0x21cc <__ftoa_engine+0x130>
    21c8:	8a 95       	dec	r24
    21ca:	e6 cf       	rjmp	.-52     	; 0x2198 <__ftoa_engine+0xfc>
    21cc:	e8 94       	clt
    21ce:	01 50       	subi	r16, 0x01	; 1
    21d0:	30 f0       	brcs	.+12     	; 0x21de <__ftoa_engine+0x142>
    21d2:	08 0f       	add	r16, r24
    21d4:	0a f4       	brpl	.+2      	; 0x21d8 <__ftoa_engine+0x13c>
    21d6:	00 27       	eor	r16, r16
    21d8:	02 17       	cp	r16, r18
    21da:	08 f4       	brcc	.+2      	; 0x21de <__ftoa_engine+0x142>
    21dc:	20 2f       	mov	r18, r16
    21de:	23 95       	inc	r18
    21e0:	02 2f       	mov	r16, r18
    21e2:	7a 33       	cpi	r23, 0x3A	; 58
    21e4:	28 f0       	brcs	.+10     	; 0x21f0 <__ftoa_engine+0x154>
    21e6:	79 e3       	ldi	r23, 0x39	; 57
    21e8:	7d 93       	st	X+, r23
    21ea:	2a 95       	dec	r18
    21ec:	e9 f7       	brne	.-6      	; 0x21e8 <__ftoa_engine+0x14c>
    21ee:	10 c0       	rjmp	.+32     	; 0x2210 <__ftoa_engine+0x174>
    21f0:	7d 93       	st	X+, r23
    21f2:	2a 95       	dec	r18
    21f4:	89 f6       	brne	.-94     	; 0x2198 <__ftoa_engine+0xfc>
    21f6:	06 94       	lsr	r0
    21f8:	97 95       	ror	r25
    21fa:	67 95       	ror	r22
    21fc:	37 95       	ror	r19
    21fe:	17 95       	ror	r17
    2200:	17 94       	ror	r1
    2202:	e1 18       	sub	r14, r1
    2204:	f1 0a       	sbc	r15, r17
    2206:	43 0b       	sbc	r20, r19
    2208:	56 0b       	sbc	r21, r22
    220a:	c9 0b       	sbc	r28, r25
    220c:	d0 09       	sbc	r29, r0
    220e:	98 f0       	brcs	.+38     	; 0x2236 <__ftoa_engine+0x19a>
    2210:	23 95       	inc	r18
    2212:	7e 91       	ld	r23, -X
    2214:	73 95       	inc	r23
    2216:	7a 33       	cpi	r23, 0x3A	; 58
    2218:	08 f0       	brcs	.+2      	; 0x221c <__ftoa_engine+0x180>
    221a:	70 e3       	ldi	r23, 0x30	; 48
    221c:	7c 93       	st	X, r23
    221e:	20 13       	cpse	r18, r16
    2220:	b8 f7       	brcc	.-18     	; 0x2210 <__ftoa_engine+0x174>
    2222:	7e 91       	ld	r23, -X
    2224:	70 61       	ori	r23, 0x10	; 16
    2226:	7d 93       	st	X+, r23
    2228:	30 f0       	brcs	.+12     	; 0x2236 <__ftoa_engine+0x19a>
    222a:	83 95       	inc	r24
    222c:	71 e3       	ldi	r23, 0x31	; 49
    222e:	7d 93       	st	X+, r23
    2230:	70 e3       	ldi	r23, 0x30	; 48
    2232:	2a 95       	dec	r18
    2234:	e1 f7       	brne	.-8      	; 0x222e <__ftoa_engine+0x192>
    2236:	11 24       	eor	r1, r1
    2238:	ef 90       	pop	r14
    223a:	ff 90       	pop	r15
    223c:	0f 91       	pop	r16
    223e:	1f 91       	pop	r17
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	99 27       	eor	r25, r25
    2246:	87 fd       	sbrc	r24, 7
    2248:	90 95       	com	r25
    224a:	08 95       	ret

0000224c <isspace>:
    224c:	91 11       	cpse	r25, r1
    224e:	3d c1       	rjmp	.+634    	; 0x24ca <__ctype_isfalse>
    2250:	80 32       	cpi	r24, 0x20	; 32
    2252:	19 f0       	breq	.+6      	; 0x225a <isspace+0xe>
    2254:	89 50       	subi	r24, 0x09	; 9
    2256:	85 50       	subi	r24, 0x05	; 5
    2258:	d0 f7       	brcc	.-12     	; 0x224e <isspace+0x2>
    225a:	08 95       	ret

0000225c <strncasecmp_P>:
    225c:	fb 01       	movw	r30, r22
    225e:	dc 01       	movw	r26, r24
    2260:	41 50       	subi	r20, 0x01	; 1
    2262:	50 40       	sbci	r21, 0x00	; 0
    2264:	88 f0       	brcs	.+34     	; 0x2288 <strncasecmp_P+0x2c>
    2266:	8d 91       	ld	r24, X+
    2268:	81 34       	cpi	r24, 0x41	; 65
    226a:	1c f0       	brlt	.+6      	; 0x2272 <strncasecmp_P+0x16>
    226c:	8b 35       	cpi	r24, 0x5B	; 91
    226e:	0c f4       	brge	.+2      	; 0x2272 <strncasecmp_P+0x16>
    2270:	80 5e       	subi	r24, 0xE0	; 224
    2272:	65 91       	lpm	r22, Z+
    2274:	61 34       	cpi	r22, 0x41	; 65
    2276:	1c f0       	brlt	.+6      	; 0x227e <strncasecmp_P+0x22>
    2278:	6b 35       	cpi	r22, 0x5B	; 91
    227a:	0c f4       	brge	.+2      	; 0x227e <strncasecmp_P+0x22>
    227c:	60 5e       	subi	r22, 0xE0	; 224
    227e:	86 1b       	sub	r24, r22
    2280:	61 11       	cpse	r22, r1
    2282:	71 f3       	breq	.-36     	; 0x2260 <strncasecmp_P+0x4>
    2284:	99 0b       	sbc	r25, r25
    2286:	08 95       	ret
    2288:	88 1b       	sub	r24, r24
    228a:	fc cf       	rjmp	.-8      	; 0x2284 <strncasecmp_P+0x28>

0000228c <strnlen_P>:
    228c:	fc 01       	movw	r30, r24
    228e:	05 90       	lpm	r0, Z+
    2290:	61 50       	subi	r22, 0x01	; 1
    2292:	70 40       	sbci	r23, 0x00	; 0
    2294:	01 10       	cpse	r0, r1
    2296:	d8 f7       	brcc	.-10     	; 0x228e <strnlen_P+0x2>
    2298:	80 95       	com	r24
    229a:	90 95       	com	r25
    229c:	8e 0f       	add	r24, r30
    229e:	9f 1f       	adc	r25, r31
    22a0:	08 95       	ret

000022a2 <strchr>:
    22a2:	fc 01       	movw	r30, r24
    22a4:	81 91       	ld	r24, Z+
    22a6:	86 17       	cp	r24, r22
    22a8:	21 f0       	breq	.+8      	; 0x22b2 <strchr+0x10>
    22aa:	88 23       	and	r24, r24
    22ac:	d9 f7       	brne	.-10     	; 0x22a4 <strchr+0x2>
    22ae:	99 27       	eor	r25, r25
    22b0:	08 95       	ret
    22b2:	31 97       	sbiw	r30, 0x01	; 1
    22b4:	cf 01       	movw	r24, r30
    22b6:	08 95       	ret

000022b8 <strcmp>:
    22b8:	fb 01       	movw	r30, r22
    22ba:	dc 01       	movw	r26, r24
    22bc:	8d 91       	ld	r24, X+
    22be:	01 90       	ld	r0, Z+
    22c0:	80 19       	sub	r24, r0
    22c2:	01 10       	cpse	r0, r1
    22c4:	d9 f3       	breq	.-10     	; 0x22bc <strcmp+0x4>
    22c6:	99 0b       	sbc	r25, r25
    22c8:	08 95       	ret

000022ca <strncmp>:
    22ca:	fb 01       	movw	r30, r22
    22cc:	dc 01       	movw	r26, r24
    22ce:	41 50       	subi	r20, 0x01	; 1
    22d0:	50 40       	sbci	r21, 0x00	; 0
    22d2:	30 f0       	brcs	.+12     	; 0x22e0 <strncmp+0x16>
    22d4:	8d 91       	ld	r24, X+
    22d6:	01 90       	ld	r0, Z+
    22d8:	80 19       	sub	r24, r0
    22da:	19 f4       	brne	.+6      	; 0x22e2 <strncmp+0x18>
    22dc:	00 20       	and	r0, r0
    22de:	b9 f7       	brne	.-18     	; 0x22ce <strncmp+0x4>
    22e0:	88 1b       	sub	r24, r24
    22e2:	99 0b       	sbc	r25, r25
    22e4:	08 95       	ret

000022e6 <strnlen>:
    22e6:	fc 01       	movw	r30, r24
    22e8:	61 50       	subi	r22, 0x01	; 1
    22ea:	70 40       	sbci	r23, 0x00	; 0
    22ec:	01 90       	ld	r0, Z+
    22ee:	01 10       	cpse	r0, r1
    22f0:	d8 f7       	brcc	.-10     	; 0x22e8 <strnlen+0x2>
    22f2:	80 95       	com	r24
    22f4:	90 95       	com	r25
    22f6:	8e 0f       	add	r24, r30
    22f8:	9f 1f       	adc	r25, r31
    22fa:	08 95       	ret

000022fc <fputc>:
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	8c 01       	movw	r16, r24
    2306:	eb 01       	movw	r28, r22
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	81 ff       	sbrs	r24, 1
    230c:	1b c0       	rjmp	.+54     	; 0x2344 <fputc+0x48>
    230e:	82 ff       	sbrs	r24, 2
    2310:	0d c0       	rjmp	.+26     	; 0x232c <fputc+0x30>
    2312:	2e 81       	ldd	r18, Y+6	; 0x06
    2314:	3f 81       	ldd	r19, Y+7	; 0x07
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	9d 81       	ldd	r25, Y+5	; 0x05
    231a:	28 17       	cp	r18, r24
    231c:	39 07       	cpc	r19, r25
    231e:	64 f4       	brge	.+24     	; 0x2338 <fputc+0x3c>
    2320:	e8 81       	ld	r30, Y
    2322:	f9 81       	ldd	r31, Y+1	; 0x01
    2324:	01 93       	st	Z+, r16
    2326:	f9 83       	std	Y+1, r31	; 0x01
    2328:	e8 83       	st	Y, r30
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <fputc+0x3c>
    232c:	e8 85       	ldd	r30, Y+8	; 0x08
    232e:	f9 85       	ldd	r31, Y+9	; 0x09
    2330:	80 2f       	mov	r24, r16
    2332:	09 95       	icall
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	31 f4       	brne	.+12     	; 0x2344 <fputc+0x48>
    2338:	8e 81       	ldd	r24, Y+6	; 0x06
    233a:	9f 81       	ldd	r25, Y+7	; 0x07
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	9f 83       	std	Y+7, r25	; 0x07
    2340:	8e 83       	std	Y+6, r24	; 0x06
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <fputc+0x4c>
    2344:	0f ef       	ldi	r16, 0xFF	; 255
    2346:	1f ef       	ldi	r17, 0xFF	; 255
    2348:	c8 01       	movw	r24, r16
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <printf>:
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e0 eb       	ldi	r30, 0xB0	; 176
    235a:	f1 e1       	ldi	r31, 0x11	; 17
    235c:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x20>
    2360:	fe 01       	movw	r30, r28
    2362:	35 96       	adiw	r30, 0x05	; 5
    2364:	61 91       	ld	r22, Z+
    2366:	71 91       	ld	r23, Z+
    2368:	80 91 0a 08 	lds	r24, 0x080A
    236c:	90 91 0b 08 	lds	r25, 0x080B
    2370:	af 01       	movw	r20, r30
    2372:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <vfprintf>
    2376:	20 96       	adiw	r28, 0x00	; 0
    2378:	e2 e0       	ldi	r30, 0x02	; 2
    237a:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x20>

0000237e <puts>:
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	8c 01       	movw	r16, r24
    2388:	e0 91 0a 08 	lds	r30, 0x080A
    238c:	f0 91 0b 08 	lds	r31, 0x080B
    2390:	83 81       	ldd	r24, Z+3	; 0x03
    2392:	81 ff       	sbrs	r24, 1
    2394:	1a c0       	rjmp	.+52     	; 0x23ca <puts+0x4c>
    2396:	c0 e0       	ldi	r28, 0x00	; 0
    2398:	d0 e0       	ldi	r29, 0x00	; 0
    239a:	05 c0       	rjmp	.+10     	; 0x23a6 <puts+0x28>
    239c:	09 95       	icall
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	11 f0       	breq	.+4      	; 0x23a6 <puts+0x28>
    23a2:	cf ef       	ldi	r28, 0xFF	; 255
    23a4:	df ef       	ldi	r29, 0xFF	; 255
    23a6:	f8 01       	movw	r30, r16
    23a8:	81 91       	ld	r24, Z+
    23aa:	8f 01       	movw	r16, r30
    23ac:	60 91 0a 08 	lds	r22, 0x080A
    23b0:	70 91 0b 08 	lds	r23, 0x080B
    23b4:	db 01       	movw	r26, r22
    23b6:	18 96       	adiw	r26, 0x08	; 8
    23b8:	ed 91       	ld	r30, X+
    23ba:	fc 91       	ld	r31, X
    23bc:	19 97       	sbiw	r26, 0x09	; 9
    23be:	88 23       	and	r24, r24
    23c0:	69 f7       	brne	.-38     	; 0x239c <puts+0x1e>
    23c2:	8a e0       	ldi	r24, 0x0A	; 10
    23c4:	09 95       	icall
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	11 f0       	breq	.+4      	; 0x23ce <puts+0x50>
    23ca:	cf ef       	ldi	r28, 0xFF	; 255
    23cc:	df ef       	ldi	r29, 0xFF	; 255
    23ce:	ce 01       	movw	r24, r28
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	08 95       	ret

000023da <__ultoa_invert>:
    23da:	fa 01       	movw	r30, r20
    23dc:	aa 27       	eor	r26, r26
    23de:	28 30       	cpi	r18, 0x08	; 8
    23e0:	51 f1       	breq	.+84     	; 0x2436 <__ultoa_invert+0x5c>
    23e2:	20 31       	cpi	r18, 0x10	; 16
    23e4:	81 f1       	breq	.+96     	; 0x2446 <__ultoa_invert+0x6c>
    23e6:	e8 94       	clt
    23e8:	6f 93       	push	r22
    23ea:	6e 7f       	andi	r22, 0xFE	; 254
    23ec:	6e 5f       	subi	r22, 0xFE	; 254
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	8f 4f       	sbci	r24, 0xFF	; 255
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	af 4f       	sbci	r26, 0xFF	; 255
    23f6:	b1 e0       	ldi	r27, 0x01	; 1
    23f8:	3e d0       	rcall	.+124    	; 0x2476 <__ultoa_invert+0x9c>
    23fa:	b4 e0       	ldi	r27, 0x04	; 4
    23fc:	3c d0       	rcall	.+120    	; 0x2476 <__ultoa_invert+0x9c>
    23fe:	67 0f       	add	r22, r23
    2400:	78 1f       	adc	r23, r24
    2402:	89 1f       	adc	r24, r25
    2404:	9a 1f       	adc	r25, r26
    2406:	a1 1d       	adc	r26, r1
    2408:	68 0f       	add	r22, r24
    240a:	79 1f       	adc	r23, r25
    240c:	8a 1f       	adc	r24, r26
    240e:	91 1d       	adc	r25, r1
    2410:	a1 1d       	adc	r26, r1
    2412:	6a 0f       	add	r22, r26
    2414:	71 1d       	adc	r23, r1
    2416:	81 1d       	adc	r24, r1
    2418:	91 1d       	adc	r25, r1
    241a:	a1 1d       	adc	r26, r1
    241c:	20 d0       	rcall	.+64     	; 0x245e <__ultoa_invert+0x84>
    241e:	09 f4       	brne	.+2      	; 0x2422 <__ultoa_invert+0x48>
    2420:	68 94       	set
    2422:	3f 91       	pop	r19
    2424:	2a e0       	ldi	r18, 0x0A	; 10
    2426:	26 9f       	mul	r18, r22
    2428:	11 24       	eor	r1, r1
    242a:	30 19       	sub	r19, r0
    242c:	30 5d       	subi	r19, 0xD0	; 208
    242e:	31 93       	st	Z+, r19
    2430:	de f6       	brtc	.-74     	; 0x23e8 <__ultoa_invert+0xe>
    2432:	cf 01       	movw	r24, r30
    2434:	08 95       	ret
    2436:	46 2f       	mov	r20, r22
    2438:	47 70       	andi	r20, 0x07	; 7
    243a:	40 5d       	subi	r20, 0xD0	; 208
    243c:	41 93       	st	Z+, r20
    243e:	b3 e0       	ldi	r27, 0x03	; 3
    2440:	0f d0       	rcall	.+30     	; 0x2460 <__ultoa_invert+0x86>
    2442:	c9 f7       	brne	.-14     	; 0x2436 <__ultoa_invert+0x5c>
    2444:	f6 cf       	rjmp	.-20     	; 0x2432 <__ultoa_invert+0x58>
    2446:	46 2f       	mov	r20, r22
    2448:	4f 70       	andi	r20, 0x0F	; 15
    244a:	40 5d       	subi	r20, 0xD0	; 208
    244c:	4a 33       	cpi	r20, 0x3A	; 58
    244e:	18 f0       	brcs	.+6      	; 0x2456 <__ultoa_invert+0x7c>
    2450:	49 5d       	subi	r20, 0xD9	; 217
    2452:	31 fd       	sbrc	r19, 1
    2454:	40 52       	subi	r20, 0x20	; 32
    2456:	41 93       	st	Z+, r20
    2458:	02 d0       	rcall	.+4      	; 0x245e <__ultoa_invert+0x84>
    245a:	a9 f7       	brne	.-22     	; 0x2446 <__ultoa_invert+0x6c>
    245c:	ea cf       	rjmp	.-44     	; 0x2432 <__ultoa_invert+0x58>
    245e:	b4 e0       	ldi	r27, 0x04	; 4
    2460:	a6 95       	lsr	r26
    2462:	97 95       	ror	r25
    2464:	87 95       	ror	r24
    2466:	77 95       	ror	r23
    2468:	67 95       	ror	r22
    246a:	ba 95       	dec	r27
    246c:	c9 f7       	brne	.-14     	; 0x2460 <__ultoa_invert+0x86>
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	61 05       	cpc	r22, r1
    2472:	71 05       	cpc	r23, r1
    2474:	08 95       	ret
    2476:	9b 01       	movw	r18, r22
    2478:	ac 01       	movw	r20, r24
    247a:	0a 2e       	mov	r0, r26
    247c:	06 94       	lsr	r0
    247e:	57 95       	ror	r21
    2480:	47 95       	ror	r20
    2482:	37 95       	ror	r19
    2484:	27 95       	ror	r18
    2486:	ba 95       	dec	r27
    2488:	c9 f7       	brne	.-14     	; 0x247c <__ultoa_invert+0xa2>
    248a:	62 0f       	add	r22, r18
    248c:	73 1f       	adc	r23, r19
    248e:	84 1f       	adc	r24, r20
    2490:	95 1f       	adc	r25, r21
    2492:	a0 1d       	adc	r26, r0
    2494:	08 95       	ret

00002496 <__eerd_byte_m328p>:
    2496:	f9 99       	sbic	0x1f, 1	; 31
    2498:	fe cf       	rjmp	.-4      	; 0x2496 <__eerd_byte_m328p>
    249a:	92 bd       	out	0x22, r25	; 34
    249c:	81 bd       	out	0x21, r24	; 33
    249e:	f8 9a       	sbi	0x1f, 0	; 31
    24a0:	99 27       	eor	r25, r25
    24a2:	80 b5       	in	r24, 0x20	; 32
    24a4:	08 95       	ret

000024a6 <__eeupd_byte_m328p>:
    24a6:	26 2f       	mov	r18, r22

000024a8 <__eeupd_r18_m328p>:
    24a8:	f9 99       	sbic	0x1f, 1	; 31
    24aa:	fe cf       	rjmp	.-4      	; 0x24a8 <__eeupd_r18_m328p>
    24ac:	92 bd       	out	0x22, r25	; 34
    24ae:	81 bd       	out	0x21, r24	; 33
    24b0:	f8 9a       	sbi	0x1f, 0	; 31
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	00 b4       	in	r0, 0x20	; 32
    24b6:	02 16       	cp	r0, r18
    24b8:	39 f0       	breq	.+14     	; 0x24c8 <__eeupd_r18_m328p+0x20>
    24ba:	1f ba       	out	0x1f, r1	; 31
    24bc:	20 bd       	out	0x20, r18	; 32
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	fa 9a       	sbi	0x1f, 2	; 31
    24c4:	f9 9a       	sbi	0x1f, 1	; 31
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	08 95       	ret

000024ca <__ctype_isfalse>:
    24ca:	99 27       	eor	r25, r25
    24cc:	88 27       	eor	r24, r24

000024ce <__ctype_istrue>:
    24ce:	08 95       	ret

000024d0 <_exit>:
    24d0:	f8 94       	cli

000024d2 <__stop_program>:
    24d2:	ff cf       	rjmp	.-2      	; 0x24d2 <__stop_program>
