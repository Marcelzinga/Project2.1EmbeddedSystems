
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d2  00800100  00002644  000026d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  008006d2  008006d2  00002caa  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00006a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002767  00000000  00000000  00006c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e55  00000000  00000000  000093af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000161f  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  0000b824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000898  00000000  00000000  0000bf78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e12  00000000  00000000  0000c810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e4 e4       	ldi	r30, 0x44	; 68
     1ba:	f6 e2       	ldi	r31, 0x26	; 38
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a2 3d       	cpi	r26, 0xD2	; 210
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	18 e0       	ldi	r17, 0x08	; 8
     1ca:	a2 ed       	ldi	r26, 0xD2	; 210
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a8 30       	cpi	r26, 0x08	; 8
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 20 13 	jmp	0x2640	; 0x2640 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:




void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 d2 06 	lds	r24, 0x06D2
     262:	90 91 d3 06 	lds	r25, 0x06D3
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 da 06 	lds	r22, 0x06DA
     28a:	70 91 db 06 	lds	r23, 0x06DB
     28e:	80 91 dc 06 	lds	r24, 0x06DC
     292:	90 91 dd 06 	lds	r25, 0x06DD
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 1a 01 	sts	0x011A, r20
     2c2:	50 93 1b 01 	sts	0x011B, r21
     2c6:	60 93 1c 01 	sts	0x011C, r22
     2ca:	70 93 1d 01 	sts	0x011D, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 96 0a 	call	0x152c	; 0x152c <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 e4 06 	sts	0x06E4, r20
     30c:	50 93 e5 06 	sts	0x06E5, r21
     310:	60 93 e6 06 	sts	0x06E6, r22
     314:	70 93 e7 06 	sts	0x06E7, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 08 07 	sts	0x0708, r20
     350:	50 93 09 07 	sts	0x0709, r21
     354:	60 93 0a 07 	sts	0x070A, r22
     358:	70 93 0b 07 	sts	0x070B, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 65 09 	call	0x12ca	; 0x12ca <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 de 08 	call	0x11bc	; 0x11bc <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 92       	push	r8
     3b0:	9f 92       	push	r9
     3b2:	af 92       	push	r10
     3b4:	bf 92       	push	r11
     3b6:	cf 92       	push	r12
     3b8:	df 92       	push	r13
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	2f 93       	push	r18
     3c0:	3f 93       	push	r19
     3c2:	4f 93       	push	r20
     3c4:	5f 93       	push	r21
     3c6:	6f 93       	push	r22
     3c8:	7f 93       	push	r23
     3ca:	8f 93       	push	r24
     3cc:	9f 93       	push	r25
     3ce:	af 93       	push	r26
     3d0:	bf 93       	push	r27
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
	
	extraTime1++;
     3da:	80 91 d4 06 	lds	r24, 0x06D4
     3de:	90 91 d5 06 	lds	r25, 0x06D5
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 d5 06 	sts	0x06D5, r25
     3e8:	80 93 d4 06 	sts	0x06D4, r24
	if(extraTime1>100){
     3ec:	80 91 d4 06 	lds	r24, 0x06D4
     3f0:	90 91 d5 06 	lds	r25, 0x06D5
     3f4:	85 36       	cpi	r24, 0x65	; 101
     3f6:	91 05       	cpc	r25, r1
     3f8:	6c f0       	brlt	.+26     	; 0x414 <__vector_14+0x70>
		timerVariable++;
     3fa:	80 91 d2 06 	lds	r24, 0x06D2
     3fe:	90 91 d3 06 	lds	r25, 0x06D3
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	90 93 d3 06 	sts	0x06D3, r25
     408:	80 93 d2 06 	sts	0x06D2, r24
		extraTime1 = 0;
     40c:	10 92 d5 06 	sts	0x06D5, r1
     410:	10 92 d4 06 	sts	0x06D4, r1
	}
	extraTime++;
     414:	80 91 d6 06 	lds	r24, 0x06D6
     418:	90 91 d7 06 	lds	r25, 0x06D7
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	90 93 d7 06 	sts	0x06D7, r25
     422:	80 93 d6 06 	sts	0x06D6, r24
	
	if((get_automatishStatus() % 2)==1){
     426:	0e 94 e5 05 	call	0xbca	; 0xbca <get_automatishStatus>
     42a:	62 e0       	ldi	r22, 0x02	; 2
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divmodhi4>
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	91 05       	cpc	r25, r1
     436:	09 f0       	breq	.+2      	; 0x43a <__vector_14+0x96>
     438:	a4 c0       	rjmp	.+328    	; 0x582 <__vector_14+0x1de>
	if(extraTime>3000){
     43a:	80 91 d6 06 	lds	r24, 0x06D6
     43e:	90 91 d7 06 	lds	r25, 0x06D7
     442:	2b e0       	ldi	r18, 0x0B	; 11
     444:	89 3b       	cpi	r24, 0xB9	; 185
     446:	92 07       	cpc	r25, r18
     448:	0c f4       	brge	.+2      	; 0x44c <__vector_14+0xa8>
     44a:	9b c0       	rjmp	.+310    	; 0x582 <__vector_14+0x1de>
		char* l = get_grensLight();
     44c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_grensLight>
		double grenslight;
		grenslight = strtod(l, NULL);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <strtod>
     458:	6b 01       	movw	r12, r22
     45a:	7c 01       	movw	r14, r24
		
		char* t = get_grensTemp();
     45c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <get_grensTemp>
		double grenstemp;
		grenstemp = strtod(t, NULL);
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <strtod>
     468:	4b 01       	movw	r8, r22
     46a:	5c 01       	movw	r10, r24
		printf("% 6.2f, % 6.2f", grenstemp, getTemp());
     46c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2a 97       	sbiw	r28, 0x0a	; 10
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	ed b7       	in	r30, 0x3d	; 61
     486:	fe b7       	in	r31, 0x3e	; 62
     488:	31 96       	adiw	r30, 0x01	; 1
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	3a 83       	std	Y+2, r19	; 0x02
     490:	29 83       	std	Y+1, r18	; 0x01
     492:	82 82       	std	Z+2, r8	; 0x02
     494:	93 82       	std	Z+3, r9	; 0x03
     496:	a4 82       	std	Z+4, r10	; 0x04
     498:	b5 82       	std	Z+5, r11	; 0x05
     49a:	86 83       	std	Z+6, r24	; 0x06
     49c:	97 83       	std	Z+7, r25	; 0x07
     49e:	a0 87       	std	Z+8, r26	; 0x08
     4a0:	b1 87       	std	Z+9, r27	; 0x09
     4a2:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
		printf("% 6.2f, %i", grenslight, getLight());
     4a6:	2d b7       	in	r18, 0x3d	; 61
     4a8:	3e b7       	in	r19, 0x3e	; 62
     4aa:	26 5f       	subi	r18, 0xF6	; 246
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	3e bf       	out	0x3e, r19	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	2d bf       	out	0x3d, r18	; 61
     4b8:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     4bc:	ad b7       	in	r26, 0x3d	; 61
     4be:	be b7       	in	r27, 0x3e	; 62
     4c0:	18 97       	sbiw	r26, 0x08	; 8
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	be bf       	out	0x3e, r27	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	ad bf       	out	0x3d, r26	; 61
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	2f e0       	ldi	r18, 0x0F	; 15
     4d4:	31 e0       	ldi	r19, 0x01	; 1
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	3a 83       	std	Y+2, r19	; 0x02
     4dc:	29 83       	std	Y+1, r18	; 0x01
     4de:	c2 82       	std	Z+2, r12	; 0x02
     4e0:	d3 82       	std	Z+3, r13	; 0x03
     4e2:	e4 82       	std	Z+4, r14	; 0x04
     4e4:	f5 82       	std	Z+5, r15	; 0x05
     4e6:	86 83       	std	Z+6, r24	; 0x06
     4e8:	17 82       	std	Z+7, r1	; 0x07
     4ea:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>

		// Als het boven de grenslight is, en boven de grenstemperatuur is,
		// en ingerold dan moet het uitrollen
		
		if(getLight()> grenslight && getTemp() > grenstemp && (get_unrollStatus() % 2) == 0)
     4ee:	2d b7       	in	r18, 0x3d	; 61
     4f0:	3e b7       	in	r19, 0x3e	; 62
     4f2:	28 5f       	subi	r18, 0xF8	; 248
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	3e bf       	out	0x3e, r19	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	2d bf       	out	0x3d, r18	; 61
     500:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     504:	68 2f       	mov	r22, r24
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 96 0a 	call	0x152c	; 0x152c <__floatsisf>
     510:	a7 01       	movw	r20, r14
     512:	96 01       	movw	r18, r12
     514:	0e 94 46 0b 	call	0x168c	; 0x168c <__gesf2>
     518:	18 16       	cp	r1, r24
     51a:	74 f4       	brge	.+28     	; 0x538 <__vector_14+0x194>
     51c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     520:	a5 01       	movw	r20, r10
     522:	94 01       	movw	r18, r8
     524:	0e 94 46 0b 	call	0x168c	; 0x168c <__gesf2>
     528:	18 16       	cp	r1, r24
     52a:	34 f4       	brge	.+12     	; 0x538 <__vector_14+0x194>
     52c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     530:	80 fd       	sbrc	r24, 0
     532:	02 c0       	rjmp	.+4      	; 0x538 <__vector_14+0x194>
		{
			uitrollen();
     534:	0e 94 71 09 	call	0x12e2	; 0x12e2 <uitrollen>
		}
		
		// Als het onder de grenslight is, en boven de grenstemperatuur is,
		// en uitgerold is. Dan moet het inrollen.
		if(getLight()< grenslight && getTemp() < grenstemp && (get_unrollStatus() % 2) == 1)
     538:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     53c:	68 2f       	mov	r22, r24
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 96 0a 	call	0x152c	; 0x152c <__floatsisf>
     548:	a7 01       	movw	r20, r14
     54a:	96 01       	movw	r18, r12
     54c:	0e 94 90 0a 	call	0x1520	; 0x1520 <__cmpsf2>
     550:	88 23       	and	r24, r24
     552:	9c f4       	brge	.+38     	; 0x57a <__vector_14+0x1d6>
     554:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     558:	a5 01       	movw	r20, r10
     55a:	94 01       	movw	r18, r8
     55c:	0e 94 90 0a 	call	0x1520	; 0x1520 <__cmpsf2>
     560:	88 23       	and	r24, r24
     562:	5c f4       	brge	.+22     	; 0x57a <__vector_14+0x1d6>
     564:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divmodhi4>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	91 05       	cpc	r25, r1
     574:	11 f4       	brne	.+4      	; 0x57a <__vector_14+0x1d6>
		{
			oprollen();
     576:	0e 94 cd 09 	call	0x139a	; 0x139a <oprollen>
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
     57a:	10 92 d7 06 	sts	0x06D7, r1
     57e:	10 92 d6 06 	sts	0x06D6, r1
	}
	}	
}
     582:	ff 91       	pop	r31
     584:	ef 91       	pop	r30
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	7f 91       	pop	r23
     594:	6f 91       	pop	r22
     596:	5f 91       	pop	r21
     598:	4f 91       	pop	r20
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	2f 93       	push	r18
     5c4:	3f 93       	push	r19
     5c6:	4f 93       	push	r20
     5c8:	5f 93       	push	r21
     5ca:	6f 93       	push	r22
     5cc:	7f 93       	push	r23
     5ce:	8f 93       	push	r24
     5d0:	9f 93       	push	r25
     5d2:	af 93       	push	r26
     5d4:	bf 93       	push	r27
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ef 93       	push	r30
     5dc:	ff 93       	push	r31
	if(i == 1)
     5de:	80 91 d8 06 	lds	r24, 0x06D8
     5e2:	90 91 d9 06 	lds	r25, 0x06D9
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	91 05       	cpc	r25, r1
     5ea:	d1 f4       	brne	.+52     	; 0x620 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     5ec:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     5f0:	c4 e8       	ldi	r28, 0x84	; 132
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
     5f4:	68 81       	ld	r22, Y
     5f6:	79 81       	ldd	r23, Y+1	; 0x01
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 94 0a 	call	0x1528	; 0x1528 <__floatunsisf>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	80 93 da 06 	sts	0x06DA, r24
     608:	90 93 db 06 	sts	0x06DB, r25
     60c:	a0 93 dc 06 	sts	0x06DC, r26
     610:	b0 93 dd 06 	sts	0x06DD, r27
		TCNT1 = 0; //Reset duration
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	18 82       	st	Y, r1
		i = 0; //Reset counter
     618:	10 92 d9 06 	sts	0x06D9, r1
     61c:	10 92 d8 06 	sts	0x06D8, r1
	}

	if(i==0)
     620:	80 91 d8 06 	lds	r24, 0x06D8
     624:	90 91 d9 06 	lds	r25, 0x06D9
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	59 f4       	brne	.+22     	; 0x642 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     62c:	e1 e8       	ldi	r30, 0x81	; 129
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	81 60       	ori	r24, 0x01	; 1
     634:	80 83       	st	Z, r24
		i = 1;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	90 93 d9 06 	sts	0x06D9, r25
     63e:	80 93 d8 06 	sts	0x06D8, r24
	}
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	0f 90       	pop	r0
     660:	0f be       	out	0x3f, r0	; 63
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	18 95       	reti

00000668 <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     670:	c0 91 de 06 	lds	r28, 0x06DE
     674:	d0 91 df 06 	lds	r29, 0x06DF
     678:	20 91 36 01 	lds	r18, 0x0136
     67c:	30 91 37 01 	lds	r19, 0x0137
     680:	2c 17       	cp	r18, r28
     682:	3d 07       	cpc	r19, r29
     684:	8c f0       	brlt	.+34     	; 0x6a8 <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     686:	8c 01       	movw	r16, r24
     688:	0c 0f       	add	r16, r28
     68a:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     68c:	f8 01       	movw	r30, r16
     68e:	61 91       	ld	r22, Z+
     690:	8f 01       	movw	r16, r30
     692:	ce 01       	movw	r24, r28
     694:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     698:	21 96       	adiw	r28, 0x01	; 1
     69a:	80 91 36 01 	lds	r24, 0x0136
     69e:	90 91 37 01 	lds	r25, 0x0137
     6a2:	8c 17       	cp	r24, r28
     6a4:	9d 07       	cpc	r25, r29
     6a6:	94 f7       	brge	.-28     	; 0x68c <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     6ba:	c0 91 de 06 	lds	r28, 0x06DE
     6be:	d0 91 df 06 	lds	r29, 0x06DF
     6c2:	80 91 36 01 	lds	r24, 0x0136
     6c6:	90 91 37 01 	lds	r25, 0x0137
     6ca:	8c 17       	cp	r24, r28
     6cc:	9d 07       	cpc	r25, r29
     6ce:	8c f0       	brlt	.+34     	; 0x6f2 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     6d0:	8e 01       	movw	r16, r28
     6d2:	06 5b       	subi	r16, 0xB6	; 182
     6d4:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     6dc:	f8 01       	movw	r30, r16
     6de:	81 93       	st	Z+, r24
     6e0:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     6e2:	21 96       	adiw	r28, 0x01	; 1
     6e4:	80 91 36 01 	lds	r24, 0x0136
     6e8:	90 91 37 01 	lds	r25, 0x0137
     6ec:	8c 17       	cp	r24, r28
     6ee:	9d 07       	cpc	r25, r29
     6f0:	94 f7       	brge	.-28     	; 0x6d6 <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     6f2:	8a e4       	ldi	r24, 0x4A	; 74
     6f4:	97 e0       	ldi	r25, 0x07	; 7
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     70a:	c0 91 28 01 	lds	r28, 0x0128
     70e:	d0 91 29 01 	lds	r29, 0x0129
     712:	80 91 34 01 	lds	r24, 0x0134
     716:	90 91 35 01 	lds	r25, 0x0135
     71a:	99 23       	and	r25, r25
     71c:	cc f0       	brlt	.+50     	; 0x750 <set_Locatie+0x50>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     722:	f8 01       	movw	r30, r16
     724:	e8 0f       	add	r30, r24
     726:	f9 1f       	adc	r31, r25
     728:	ce 01       	movw	r24, r28
     72a:	60 81       	ld	r22, Z
     72c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     730:	21 96       	adiw	r28, 0x01	; 1
     732:	80 91 28 01 	lds	r24, 0x0128
     736:	90 91 29 01 	lds	r25, 0x0129
     73a:	9e 01       	movw	r18, r28
     73c:	28 1b       	sub	r18, r24
     73e:	39 0b       	sbc	r19, r25
     740:	c9 01       	movw	r24, r18
     742:	20 91 34 01 	lds	r18, 0x0134
     746:	30 91 35 01 	lds	r19, 0x0135
     74a:	28 17       	cp	r18, r24
     74c:	39 07       	cpc	r19, r25
     74e:	4c f7       	brge	.-46     	; 0x722 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     76a:	e0 90 28 01 	lds	r14, 0x0128
     76e:	f0 90 29 01 	lds	r15, 0x0129
     772:	80 91 34 01 	lds	r24, 0x0134
     776:	90 91 35 01 	lds	r25, 0x0135
     77a:	99 23       	and	r25, r25
     77c:	ec f0       	brlt	.+58     	; 0x7b8 <get_Locatie+0x5e>
     77e:	01 e0       	ldi	r16, 0x01	; 1
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     786:	0f 2e       	mov	r0, r31
     788:	fb e1       	ldi	r31, 0x1B	; 27
     78a:	cf 2e       	mov	r12, r31
     78c:	f7 e0       	ldi	r31, 0x07	; 7
     78e:	df 2e       	mov	r13, r31
     790:	f0 2d       	mov	r31, r0
     792:	c7 01       	movw	r24, r14
     794:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     798:	cc 0d       	add	r28, r12
     79a:	dd 1d       	adc	r29, r13
     79c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     79e:	08 94       	sec
     7a0:	e1 1c       	adc	r14, r1
     7a2:	f1 1c       	adc	r15, r1
     7a4:	e8 01       	movw	r28, r16
     7a6:	0f 5f       	subi	r16, 0xFF	; 255
     7a8:	1f 4f       	sbci	r17, 0xFF	; 255
     7aa:	80 91 34 01 	lds	r24, 0x0134
     7ae:	90 91 35 01 	lds	r25, 0x0135
     7b2:	8c 17       	cp	r24, r28
     7b4:	9d 07       	cpc	r25, r29
     7b6:	6c f7       	brge	.-38     	; 0x792 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     7b8:	8b e1       	ldi	r24, 0x1B	; 27
     7ba:	97 e0       	ldi	r25, 0x07	; 7
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7d8:	c0 91 26 01 	lds	r28, 0x0126
     7dc:	d0 91 27 01 	lds	r29, 0x0127
     7e0:	80 91 32 01 	lds	r24, 0x0132
     7e4:	90 91 33 01 	lds	r25, 0x0133
     7e8:	99 23       	and	r25, r25
     7ea:	cc f0       	brlt	.+50     	; 0x81e <set_Versie+0x50>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     7f0:	f8 01       	movw	r30, r16
     7f2:	e8 0f       	add	r30, r24
     7f4:	f9 1f       	adc	r31, r25
     7f6:	ce 01       	movw	r24, r28
     7f8:	60 81       	ld	r22, Z
     7fa:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7fe:	21 96       	adiw	r28, 0x01	; 1
     800:	80 91 26 01 	lds	r24, 0x0126
     804:	90 91 27 01 	lds	r25, 0x0127
     808:	9e 01       	movw	r18, r28
     80a:	28 1b       	sub	r18, r24
     80c:	39 0b       	sbc	r19, r25
     80e:	c9 01       	movw	r24, r18
     810:	20 91 32 01 	lds	r18, 0x0132
     814:	30 91 33 01 	lds	r19, 0x0133
     818:	28 17       	cp	r18, r24
     81a:	39 07       	cpc	r19, r25
     81c:	4c f7       	brge	.-46     	; 0x7f0 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     838:	e0 90 26 01 	lds	r14, 0x0126
     83c:	f0 90 27 01 	lds	r15, 0x0127
     840:	80 91 32 01 	lds	r24, 0x0132
     844:	90 91 33 01 	lds	r25, 0x0133
     848:	99 23       	and	r25, r25
     84a:	ec f0       	brlt	.+58     	; 0x886 <get_Versie+0x5e>
     84c:	01 e0       	ldi	r16, 0x01	; 1
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	c0 e0       	ldi	r28, 0x00	; 0
     852:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     854:	0f 2e       	mov	r0, r31
     856:	f6 e7       	ldi	r31, 0x76	; 118
     858:	cf 2e       	mov	r12, r31
     85a:	f7 e0       	ldi	r31, 0x07	; 7
     85c:	df 2e       	mov	r13, r31
     85e:	f0 2d       	mov	r31, r0
     860:	c7 01       	movw	r24, r14
     862:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     866:	cc 0d       	add	r28, r12
     868:	dd 1d       	adc	r29, r13
     86a:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     86c:	08 94       	sec
     86e:	e1 1c       	adc	r14, r1
     870:	f1 1c       	adc	r15, r1
     872:	e8 01       	movw	r28, r16
     874:	0f 5f       	subi	r16, 0xFF	; 255
     876:	1f 4f       	sbci	r17, 0xFF	; 255
     878:	80 91 32 01 	lds	r24, 0x0132
     87c:	90 91 33 01 	lds	r25, 0x0133
     880:	8c 17       	cp	r24, r28
     882:	9d 07       	cpc	r25, r29
     884:	6c f7       	brge	.-38     	; 0x860 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     886:	86 e7       	ldi	r24, 0x76	; 118
     888:	97 e0       	ldi	r25, 0x07	; 7
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	08 95       	ret

0000089c <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8a6:	c0 91 24 01 	lds	r28, 0x0124
     8aa:	d0 91 25 01 	lds	r29, 0x0125
     8ae:	80 91 30 01 	lds	r24, 0x0130
     8b2:	90 91 31 01 	lds	r25, 0x0131
     8b6:	99 23       	and	r25, r25
     8b8:	cc f0       	brlt	.+50     	; 0x8ec <set_grensTemp+0x50>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     8be:	f8 01       	movw	r30, r16
     8c0:	e8 0f       	add	r30, r24
     8c2:	f9 1f       	adc	r31, r25
     8c4:	ce 01       	movw	r24, r28
     8c6:	60 81       	ld	r22, Z
     8c8:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8cc:	21 96       	adiw	r28, 0x01	; 1
     8ce:	80 91 24 01 	lds	r24, 0x0124
     8d2:	90 91 25 01 	lds	r25, 0x0125
     8d6:	9e 01       	movw	r18, r28
     8d8:	28 1b       	sub	r18, r24
     8da:	39 0b       	sbc	r19, r25
     8dc:	c9 01       	movw	r24, r18
     8de:	20 91 30 01 	lds	r18, 0x0130
     8e2:	30 91 31 01 	lds	r19, 0x0131
     8e6:	28 17       	cp	r18, r24
     8e8:	39 07       	cpc	r19, r25
     8ea:	4c f7       	brge	.-46     	; 0x8be <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     906:	e0 90 24 01 	lds	r14, 0x0124
     90a:	f0 90 25 01 	lds	r15, 0x0125
     90e:	80 91 30 01 	lds	r24, 0x0130
     912:	90 91 31 01 	lds	r25, 0x0131
     916:	99 23       	and	r25, r25
     918:	ec f0       	brlt	.+58     	; 0x954 <__stack+0x55>
     91a:	01 e0       	ldi	r16, 0x01	; 1
     91c:	10 e0       	ldi	r17, 0x00	; 0
     91e:	c0 e0       	ldi	r28, 0x00	; 0
     920:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     922:	0f 2e       	mov	r0, r31
     924:	f7 e4       	ldi	r31, 0x47	; 71
     926:	cf 2e       	mov	r12, r31
     928:	f7 e0       	ldi	r31, 0x07	; 7
     92a:	df 2e       	mov	r13, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	c7 01       	movw	r24, r14
     930:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     934:	cc 0d       	add	r28, r12
     936:	dd 1d       	adc	r29, r13
     938:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     93a:	08 94       	sec
     93c:	e1 1c       	adc	r14, r1
     93e:	f1 1c       	adc	r15, r1
     940:	e8 01       	movw	r28, r16
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	1f 4f       	sbci	r17, 0xFF	; 255
     946:	80 91 30 01 	lds	r24, 0x0130
     94a:	90 91 31 01 	lds	r25, 0x0131
     94e:	8c 17       	cp	r24, r28
     950:	9d 07       	cpc	r25, r29
     952:	6c f7       	brge	.-38     	; 0x92e <__stack+0x2f>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     954:	87 e4       	ldi	r24, 0x47	; 71
     956:	97 e0       	ldi	r25, 0x07	; 7
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	08 95       	ret

0000096a <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     974:	c0 91 22 01 	lds	r28, 0x0122
     978:	d0 91 23 01 	lds	r29, 0x0123
     97c:	80 91 2e 01 	lds	r24, 0x012E
     980:	90 91 2f 01 	lds	r25, 0x012F
     984:	99 23       	and	r25, r25
     986:	cc f0       	brlt	.+50     	; 0x9ba <set_grensLicht+0x50>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     98c:	f8 01       	movw	r30, r16
     98e:	e8 0f       	add	r30, r24
     990:	f9 1f       	adc	r31, r25
     992:	ce 01       	movw	r24, r28
     994:	60 81       	ld	r22, Z
     996:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	80 91 22 01 	lds	r24, 0x0122
     9a0:	90 91 23 01 	lds	r25, 0x0123
     9a4:	9e 01       	movw	r18, r28
     9a6:	28 1b       	sub	r18, r24
     9a8:	39 0b       	sbc	r19, r25
     9aa:	c9 01       	movw	r24, r18
     9ac:	20 91 2e 01 	lds	r18, 0x012E
     9b0:	30 91 2f 01 	lds	r19, 0x012F
     9b4:	28 17       	cp	r18, r24
     9b6:	39 07       	cpc	r19, r25
     9b8:	4c f7       	brge	.-46     	; 0x98c <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	08 95       	ret

000009c4 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     9d0:	e0 90 22 01 	lds	r14, 0x0122
     9d4:	f0 90 23 01 	lds	r15, 0x0123
     9d8:	80 91 2e 01 	lds	r24, 0x012E
     9dc:	90 91 2f 01 	lds	r25, 0x012F
     9e0:	99 23       	and	r25, r25
     9e2:	bc f0       	brlt	.+46     	; 0xa12 <get_grensLight+0x4e>
     9e4:	01 e0       	ldi	r16, 0x01	; 1
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	c0 e0       	ldi	r28, 0x00	; 0
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     9ec:	c7 01       	movw	r24, r14
     9ee:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     9f2:	c2 58       	subi	r28, 0x82	; 130
     9f4:	d8 4f       	sbci	r29, 0xF8	; 248
     9f6:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     9f8:	08 94       	sec
     9fa:	e1 1c       	adc	r14, r1
     9fc:	f1 1c       	adc	r15, r1
     9fe:	e8 01       	movw	r28, r16
     a00:	0f 5f       	subi	r16, 0xFF	; 255
     a02:	1f 4f       	sbci	r17, 0xFF	; 255
     a04:	80 91 2e 01 	lds	r24, 0x012E
     a08:	90 91 2f 01 	lds	r25, 0x012F
     a0c:	8c 17       	cp	r24, r28
     a0e:	9d 07       	cpc	r25, r29
     a10:	6c f7       	brge	.-38     	; 0x9ec <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     a12:	8e e7       	ldi	r24, 0x7E	; 126
     a14:	97 e0       	ldi	r25, 0x07	; 7
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	08 95       	ret

00000a24 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     a2e:	c0 91 20 01 	lds	r28, 0x0120
     a32:	d0 91 21 01 	lds	r29, 0x0121
     a36:	80 91 2c 01 	lds	r24, 0x012C
     a3a:	90 91 2d 01 	lds	r25, 0x012D
     a3e:	99 23       	and	r25, r25
     a40:	cc f0       	brlt	.+50     	; 0xa74 <set_minUnroll+0x50>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     a46:	f8 01       	movw	r30, r16
     a48:	e8 0f       	add	r30, r24
     a4a:	f9 1f       	adc	r31, r25
     a4c:	ce 01       	movw	r24, r28
     a4e:	60 81       	ld	r22, Z
     a50:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     a54:	21 96       	adiw	r28, 0x01	; 1
     a56:	80 91 20 01 	lds	r24, 0x0120
     a5a:	90 91 21 01 	lds	r25, 0x0121
     a5e:	9e 01       	movw	r18, r28
     a60:	28 1b       	sub	r18, r24
     a62:	39 0b       	sbc	r19, r25
     a64:	c9 01       	movw	r24, r18
     a66:	20 91 2c 01 	lds	r18, 0x012C
     a6a:	30 91 2d 01 	lds	r19, 0x012D
     a6e:	28 17       	cp	r18, r24
     a70:	39 07       	cpc	r19, r25
     a72:	4c f7       	brge	.-46     	; 0xa46 <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     a8a:	e0 90 20 01 	lds	r14, 0x0120
     a8e:	f0 90 21 01 	lds	r15, 0x0121
     a92:	80 91 2c 01 	lds	r24, 0x012C
     a96:	90 91 2d 01 	lds	r25, 0x012D
     a9a:	99 23       	and	r25, r25
     a9c:	bc f0       	brlt	.+46     	; 0xacc <get_minUnroll+0x4e>
     a9e:	01 e0       	ldi	r16, 0x01	; 1
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	c0 e0       	ldi	r28, 0x00	; 0
     aa4:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     aa6:	c7 01       	movw	r24, r14
     aa8:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     aac:	c4 5f       	subi	r28, 0xF4	; 244
     aae:	d8 4f       	sbci	r29, 0xF8	; 248
     ab0:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     ab2:	08 94       	sec
     ab4:	e1 1c       	adc	r14, r1
     ab6:	f1 1c       	adc	r15, r1
     ab8:	e8 01       	movw	r28, r16
     aba:	0f 5f       	subi	r16, 0xFF	; 255
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	80 91 2c 01 	lds	r24, 0x012C
     ac2:	90 91 2d 01 	lds	r25, 0x012D
     ac6:	8c 17       	cp	r24, r28
     ac8:	9d 07       	cpc	r25, r29
     aca:	6c f7       	brge	.-38     	; 0xaa6 <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     acc:	8c e0       	ldi	r24, 0x0C	; 12
     ace:	97 e0       	ldi	r25, 0x07	; 7
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     ae8:	c0 91 1e 01 	lds	r28, 0x011E
     aec:	d0 91 1f 01 	lds	r29, 0x011F
     af0:	80 91 2a 01 	lds	r24, 0x012A
     af4:	90 91 2b 01 	lds	r25, 0x012B
     af8:	99 23       	and	r25, r25
     afa:	cc f0       	brlt	.+50     	; 0xb2e <set_maxUnroll+0x50>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     b00:	f8 01       	movw	r30, r16
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	ce 01       	movw	r24, r28
     b08:	60 81       	ld	r22, Z
     b0a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b0e:	21 96       	adiw	r28, 0x01	; 1
     b10:	80 91 1e 01 	lds	r24, 0x011E
     b14:	90 91 1f 01 	lds	r25, 0x011F
     b18:	9e 01       	movw	r18, r28
     b1a:	28 1b       	sub	r18, r24
     b1c:	39 0b       	sbc	r19, r25
     b1e:	c9 01       	movw	r24, r18
     b20:	20 91 2a 01 	lds	r18, 0x012A
     b24:	30 91 2b 01 	lds	r19, 0x012B
     b28:	28 17       	cp	r18, r24
     b2a:	39 07       	cpc	r19, r25
     b2c:	4c f7       	brge	.-46     	; 0xb00 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b44:	e0 90 1e 01 	lds	r14, 0x011E
     b48:	f0 90 1f 01 	lds	r15, 0x011F
     b4c:	80 91 2a 01 	lds	r24, 0x012A
     b50:	90 91 2b 01 	lds	r25, 0x012B
     b54:	99 23       	and	r25, r25
     b56:	bc f0       	brlt	.+46     	; 0xb86 <get_maxUnroll+0x4e>
     b58:	01 e0       	ldi	r16, 0x01	; 1
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     b60:	c7 01       	movw	r24, r14
     b62:	0e 94 03 13 	call	0x2606	; 0x2606 <__eerd_byte_m328p>
     b66:	c4 55       	subi	r28, 0x54	; 84
     b68:	d8 4f       	sbci	r29, 0xF8	; 248
     b6a:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b6c:	08 94       	sec
     b6e:	e1 1c       	adc	r14, r1
     b70:	f1 1c       	adc	r15, r1
     b72:	e8 01       	movw	r28, r16
     b74:	0f 5f       	subi	r16, 0xFF	; 255
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	80 91 2a 01 	lds	r24, 0x012A
     b7c:	90 91 2b 01 	lds	r25, 0x012B
     b80:	8c 17       	cp	r24, r28
     b82:	9d 07       	cpc	r25, r29
     b84:	6c f7       	brge	.-38     	; 0xb60 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     b86:	8c ea       	ldi	r24, 0xAC	; 172
     b88:	97 e0       	ldi	r25, 0x07	; 7
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	08 95       	ret

00000b98 <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     b98:	80 ee       	ldi	r24, 0xE0	; 224
     b9a:	97 e0       	ldi	r25, 0x07	; 7
     b9c:	68 e2       	ldi	r22, 0x28	; 40
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	0e 94 09 12 	call	0x2412	; 0x2412 <strchr>
	p1[strlen(p1) -1] = '\0';
     ba4:	e8 2f       	mov	r30, r24
     ba6:	f9 2f       	mov	r31, r25
     ba8:	df 01       	movw	r26, r30
     baa:	0d 90       	ld	r0, X+
     bac:	00 20       	and	r0, r0
     bae:	e9 f7       	brne	.-6      	; 0xbaa <set_substring+0x12>
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	ae 1b       	sub	r26, r30
     bb4:	bf 0b       	sbc	r27, r31
     bb6:	a8 0f       	add	r26, r24
     bb8:	b9 1f       	adc	r27, r25
     bba:	11 97       	sbiw	r26, 0x01	; 1
     bbc:	1c 92       	st	X, r1
	substring = p1 +1;
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	90 93 dd 07 	sts	0x07DD, r25
     bc4:	80 93 dc 07 	sts	0x07DC, r24
     bc8:	08 95       	ret

00000bca <get_automatishStatus>:

int AUT = 0;

int get_automatishStatus(){
	return AUT;
}
     bca:	80 91 e0 06 	lds	r24, 0x06E0
     bce:	90 91 e1 06 	lds	r25, 0x06E1
     bd2:	08 95       	ret

00000bd4 <protocolCom>:
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");*/
		while (1) {
			ser_write("204 Wat kan ik voor u doen");
     bd4:	08 e3       	ldi	r16, 0x38	; 56
     bd6:	11 e0       	ldi	r17, 0x01	; 1
			ser_readln(in_buf, sizeof(in_buf), 1);
     bd8:	c0 ee       	ldi	r28, 0xE0	; 224
     bda:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     bdc:	0f 2e       	mov	r0, r31
     bde:	f3 e5       	ldi	r31, 0x53	; 83
     be0:	ef 2e       	mov	r14, r31
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	ff 2e       	mov	r15, r31
     be6:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     be8:	0f 2e       	mov	r0, r31
     bea:	fb e7       	ldi	r31, 0x7B	; 123
     bec:	8f 2e       	mov	r8, r31
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	9f 2e       	mov	r9, r31
     bf2:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f2 ea       	ldi	r31, 0xA2	; 162
     bf8:	cf 2e       	mov	r12, r31
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	df 2e       	mov	r13, r31
     bfe:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
     c00:	0f 2e       	mov	r0, r31
     c02:	f9 ea       	ldi	r31, 0xA9	; 169
     c04:	2f 2e       	mov	r2, r31
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	3f 2e       	mov	r3, r31
     c0a:	f0 2d       	mov	r31, r0
			}
			
			if (strcmp("TOGGLEAUT", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c0c:	0f 2e       	mov	r0, r31
     c0e:	f8 eb       	ldi	r31, 0xB8	; 184
     c10:	af 2e       	mov	r10, r31
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	bf 2e       	mov	r11, r31
     c16:	f0 2d       	mov	r31, r0
			}	
			AUT = AUT + 1;	
		}
			
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     c18:	0f 2e       	mov	r0, r31
     c1a:	fc ed       	ldi	r31, 0xDC	; 220
     c1c:	6f 2e       	mov	r6, r31
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	7f 2e       	mov	r7, r31
     c22:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c24:	0f 2e       	mov	r0, r31
     c26:	f8 ef       	ldi	r31, 0xF8	; 248
     c28:	4f 2e       	mov	r4, r31
     c2a:	f1 e0       	ldi	r31, 0x01	; 1
     c2c:	5f 2e       	mov	r5, r31
     c2e:	f0 2d       	mov	r31, r0
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");*/
		while (1) {
			ser_write("204 Wat kan ik voor u doen");
     c30:	c8 01       	movw	r24, r16
     c32:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
			ser_readln(in_buf, sizeof(in_buf), 1);
     c36:	ce 01       	movw	r24, r28
     c38:	6e e1       	ldi	r22, 0x1E	; 30
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	0e 94 26 09 	call	0x124c	; 0x124c <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c42:	c7 01       	movw	r24, r14
     c44:	be 01       	movw	r22, r28
     c46:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     c4a:	28 2f       	mov	r18, r24
     c4c:	39 2f       	mov	r19, r25
     c4e:	21 15       	cp	r18, r1
     c50:	31 05       	cpc	r19, r1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <protocolCom+0xa8>
				if ((get_unrollStatus() % 2) == 1){
     c54:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divmodhi4>
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	21 f4       	brne	.+8      	; 0xc6e <protocolCom+0x9a>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     c66:	8a e5       	ldi	r24, 0x5A	; 90
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     c6e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     c72:	80 fd       	sbrc	r24, 0
     c74:	1f c0       	rjmp	.+62     	; 0xcb4 <protocolCom+0xe0>
					uitrollen();
     c76:	0e 94 71 09 	call	0x12e2	; 0x12e2 <uitrollen>
     c7a:	1c c0       	rjmp	.+56     	; 0xcb4 <protocolCom+0xe0>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     c7c:	c4 01       	movw	r24, r8
     c7e:	be 01       	movw	r22, r28
     c80:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     c84:	28 2f       	mov	r18, r24
     c86:	39 2f       	mov	r19, r25
     c88:	21 15       	cp	r18, r1
     c8a:	31 05       	cpc	r19, r1
     c8c:	99 f4       	brne	.+38     	; 0xcb4 <protocolCom+0xe0>
				if ((get_unrollStatus() % 2) == 0){
     c8e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     c92:	80 fd       	sbrc	r24, 0
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <protocolCom+0xca>
					ser_writeln("501 Zonnescherm is al opgerold!");
     c96:	82 e8       	ldi	r24, 0x82	; 130
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     c9e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     ca2:	62 e0       	ldi	r22, 0x02	; 2
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divmodhi4>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	11 f4       	brne	.+4      	; 0xcb4 <protocolCom+0xe0>
					oprollen();
     cb0:	0e 94 cd 09 	call	0x139a	; 0x139a <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     cb4:	c6 01       	movw	r24, r12
     cb6:	be 01       	movw	r22, r28
     cb8:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     cbc:	28 2f       	mov	r18, r24
     cbe:	39 2f       	mov	r19, r25
     cc0:	21 15       	cp	r18, r1
     cc2:	31 05       	cpc	r19, r1
     cc4:	a1 f4       	brne	.+40     	; 0xcee <protocolCom+0x11a>
				printf("202 Status: %i", get_unrollStatus());
     cc6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
     cca:	00 d0       	rcall	.+0      	; 0xccc <protocolCom+0xf8>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <protocolCom+0xfa>
     cce:	ad b7       	in	r26, 0x3d	; 61
     cd0:	be b7       	in	r27, 0x3e	; 62
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	3c 92       	st	X, r3
     cd6:	2e 92       	st	-X, r2
     cd8:	11 97       	sbiw	r26, 0x01	; 1
     cda:	14 96       	adiw	r26, 0x04	; 4
     cdc:	9c 93       	st	X, r25
     cde:	8e 93       	st	-X, r24
     ce0:	13 97       	sbiw	r26, 0x03	; 3
     ce2:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
			}
			
			if (strcmp("TOGGLEAUT", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     cee:	c5 01       	movw	r24, r10
     cf0:	be 01       	movw	r22, r28
     cf2:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     cf6:	28 2f       	mov	r18, r24
     cf8:	39 2f       	mov	r19, r25
     cfa:	21 15       	cp	r18, r1
     cfc:	31 05       	cpc	r19, r1
     cfe:	e1 f4       	brne	.+56     	; 0xd38 <protocolCom+0x164>

			if ((get_automatishStatus()%2)==1){
     d00:	0e 94 e5 05 	call	0xbca	; 0xbca <get_automatishStatus>
     d04:	62 e0       	ldi	r22, 0x02	; 2
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divmodhi4>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	91 05       	cpc	r25, r1
     d10:	29 f4       	brne	.+10     	; 0xd1c <protocolCom+0x148>
				printf("202 AUT UIT \n");
     d12:	82 ec       	ldi	r24, 0xC2	; 194
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 77 12 	call	0x24ee	; 0x24ee <puts>
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <protocolCom+0x150>
			}
			else{
				printf("202 AUT AAN \n");
     d1c:	8f ec       	ldi	r24, 0xCF	; 207
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 77 12 	call	0x24ee	; 0x24ee <puts>
			}	
			AUT = AUT + 1;	
     d24:	80 91 e0 06 	lds	r24, 0x06E0
     d28:	90 91 e1 06 	lds	r25, 0x06E1
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	90 93 e1 06 	sts	0x06E1, r25
     d32:	80 93 e0 06 	sts	0x06E0, r24
     d36:	7c cf       	rjmp	.-264    	; 0xc30 <protocolCom+0x5c>
		}
			
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     d38:	c3 01       	movw	r24, r6
     d3a:	be 01       	movw	r22, r28
     d3c:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     d40:	28 2f       	mov	r18, r24
     d42:	39 2f       	mov	r19, r25
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	e1 f4       	brne	.+56     	; 0xd82 <protocolCom+0x1ae>
				printf("202 TEMP= % 6.2f \n", getTemp());
     d4a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	00 d0       	rcall	.+0      	; 0xd54 <protocolCom+0x180>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <protocolCom+0x182>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <protocolCom+0x184>
     d58:	25 ee       	ldi	r18, 0xE5	; 229
     d5a:	31 e0       	ldi	r19, 0x01	; 1
     d5c:	ed b7       	in	r30, 0x3d	; 61
     d5e:	fe b7       	in	r31, 0x3e	; 62
     d60:	32 83       	std	Z+2, r19	; 0x02
     d62:	21 83       	std	Z+1, r18	; 0x01
     d64:	83 83       	std	Z+3, r24	; 0x03
     d66:	94 83       	std	Z+4, r25	; 0x04
     d68:	a5 83       	std	Z+5, r26	; 0x05
     d6a:	b6 83       	std	Z+6, r27	; 0x06
     d6c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
     d70:	8d b7       	in	r24, 0x3d	; 61
     d72:	9e b7       	in	r25, 0x3e	; 62
     d74:	06 96       	adiw	r24, 0x06	; 6
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	9e bf       	out	0x3e, r25	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	8d bf       	out	0x3d, r24	; 61
     d80:	57 cf       	rjmp	.-338    	; 0xc30 <protocolCom+0x5c>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     d82:	c2 01       	movw	r24, r4
     d84:	be 01       	movw	r22, r28
     d86:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     d8a:	28 2f       	mov	r18, r24
     d8c:	39 2f       	mov	r19, r25
     d8e:	21 15       	cp	r18, r1
     d90:	31 05       	cpc	r19, r1
     d92:	49 f4       	brne	.+18     	; 0xda6 <protocolCom+0x1d2>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     d94:	87 e0       	ldi	r24, 0x07	; 7
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     d9c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <get_grensTemp>
     da0:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     da4:	45 cf       	rjmp	.-374    	; 0xc30 <protocolCom+0x5c>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     da6:	87 e1       	ldi	r24, 0x17	; 23
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	be 01       	movw	r22, r28
     dac:	4e e0       	ldi	r20, 0x0E	; 14
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
     db4:	28 2f       	mov	r18, r24
     db6:	39 2f       	mov	r19, r25
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	c9 f4       	brne	.+50     	; 0xdf0 <protocolCom+0x21c>
					int temp = sizeof in_buf;
					printf("504 Ongeldige temperatuur");
				}*				
				
				else{*/
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     dbe:	89 e2       	ldi	r24, 0x29	; 41
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     dc6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <get_grensTemp>
     dca:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     dce:	8a e3       	ldi	r24, 0x3A	; 58
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
				set_substring();
     dd6:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
				set_grensTemp(substring);
     dda:	80 91 dc 07 	lds	r24, 0x07DC
     dde:	90 91 dd 07 	lds	r25, 0x07DD
     de2:	0e 94 4e 04 	call	0x89c	; 0x89c <set_grensTemp>
				ser_writeln(get_grensTemp());
     de6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <get_grensTemp>
     dea:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     dee:	20 cf       	rjmp	.-448    	; 0xc30 <protocolCom+0x5c>
				//}
			}
		else if(strcmp("GET_ALL", in_buf) == 0)
     df0:	8f e3       	ldi	r24, 0x3F	; 63
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	be 01       	movw	r22, r28
     df6:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     dfa:	28 2f       	mov	r18, r24
     dfc:	39 2f       	mov	r19, r25
     dfe:	21 15       	cp	r18, r1
     e00:	31 05       	cpc	r19, r1
     e02:	09 f0       	breq	.+2      	; 0xe06 <protocolCom+0x232>
     e04:	5e c0       	rjmp	.+188    	; 0xec2 <protocolCom+0x2ee>
		{
			printf("202 TEMP%6.2f \n", getTemp());
     e06:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <protocolCom+0x23c>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <protocolCom+0x23e>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <protocolCom+0x240>
     e14:	27 e4       	ldi	r18, 0x47	; 71
     e16:	32 e0       	ldi	r19, 0x02	; 2
     e18:	ed b7       	in	r30, 0x3d	; 61
     e1a:	fe b7       	in	r31, 0x3e	; 62
     e1c:	32 83       	std	Z+2, r19	; 0x02
     e1e:	21 83       	std	Z+1, r18	; 0x01
     e20:	83 83       	std	Z+3, r24	; 0x03
     e22:	94 83       	std	Z+4, r25	; 0x04
     e24:	a5 83       	std	Z+5, r26	; 0x05
     e26:	b6 83       	std	Z+6, r27	; 0x06
     e28:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
			printf("203 LIGHT %i \n", getLight());
     e2c:	8d b7       	in	r24, 0x3d	; 61
     e2e:	9e b7       	in	r25, 0x3e	; 62
     e30:	06 96       	adiw	r24, 0x06	; 6
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	9e bf       	out	0x3e, r25	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	8d bf       	out	0x3d, r24	; 61
     e3c:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <protocolCom+0x26e>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <protocolCom+0x270>
     e44:	ed b7       	in	r30, 0x3d	; 61
     e46:	fe b7       	in	r31, 0x3e	; 62
     e48:	31 96       	adiw	r30, 0x01	; 1
     e4a:	27 e5       	ldi	r18, 0x57	; 87
     e4c:	32 e0       	ldi	r19, 0x02	; 2
     e4e:	ad b7       	in	r26, 0x3d	; 61
     e50:	be b7       	in	r27, 0x3e	; 62
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	3c 93       	st	X, r19
     e56:	2e 93       	st	-X, r18
     e58:	11 97       	sbiw	r26, 0x01	; 1
     e5a:	82 83       	std	Z+2, r24	; 0x02
     e5c:	13 82       	std	Z+3, r1	; 0x03
     e5e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
			printf("204 AFSTAND % 6.2f cm \n", getDistance());
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	00 d0       	rcall	.+0      	; 0xe74 <protocolCom+0x2a0>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <protocolCom+0x2a2>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <protocolCom+0x2a4>
     e78:	26 e6       	ldi	r18, 0x66	; 102
     e7a:	32 e0       	ldi	r19, 0x02	; 2
     e7c:	ed b7       	in	r30, 0x3d	; 61
     e7e:	fe b7       	in	r31, 0x3e	; 62
     e80:	32 83       	std	Z+2, r19	; 0x02
     e82:	21 83       	std	Z+1, r18	; 0x01
     e84:	83 83       	std	Z+3, r24	; 0x03
     e86:	94 83       	std	Z+4, r25	; 0x04
     e88:	a5 83       	std	Z+5, r26	; 0x05
     e8a:	b6 83       	std	Z+6, r27	; 0x06
     e8c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
			ser_write("205 "),  ser_writeln(get_Naam());
     e90:	8d b7       	in	r24, 0x3d	; 61
     e92:	9e b7       	in	r25, 0x3e	; 62
     e94:	06 96       	adiw	r24, 0x06	; 6
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	9e bf       	out	0x3e, r25	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	8d bf       	out	0x3d, r24	; 61
     ea0:	8e e7       	ldi	r24, 0x7E	; 126
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     ea8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <get_Naam>
     eac:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
			ser_write("206 "), ser_writeln(get_Locatie());
     eb0:	83 e8       	ldi	r24, 0x83	; 131
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     eb8:	0e 94 ad 03 	call	0x75a	; 0x75a <get_Locatie>
     ebc:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     ec0:	b7 ce       	rjmp	.-658    	; 0xc30 <protocolCom+0x5c>
			
		}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     ec2:	88 e8       	ldi	r24, 0x88	; 136
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	be 01       	movw	r22, r28
     ec8:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     ecc:	28 2f       	mov	r18, r24
     ece:	39 2f       	mov	r19, r25
     ed0:	21 15       	cp	r18, r1
     ed2:	31 05       	cpc	r19, r1
     ed4:	c1 f4       	brne	.+48     	; 0xf06 <protocolCom+0x332>
				printf("202 LIGHT %i \n", getLight());
     ed6:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     eda:	00 d0       	rcall	.+0      	; 0xedc <protocolCom+0x308>
     edc:	00 d0       	rcall	.+0      	; 0xede <protocolCom+0x30a>
     ede:	ed b7       	in	r30, 0x3d	; 61
     ee0:	fe b7       	in	r31, 0x3e	; 62
     ee2:	31 96       	adiw	r30, 0x01	; 1
     ee4:	22 e9       	ldi	r18, 0x92	; 146
     ee6:	32 e0       	ldi	r19, 0x02	; 2
     ee8:	ad b7       	in	r26, 0x3d	; 61
     eea:	be b7       	in	r27, 0x3e	; 62
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	3c 93       	st	X, r19
     ef0:	2e 93       	st	-X, r18
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	82 83       	std	Z+2, r24	; 0x02
     ef6:	13 82       	std	Z+3, r1	; 0x03
     ef8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	95 ce       	rjmp	.-726    	; 0xc30 <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     f06:	81 ea       	ldi	r24, 0xA1	; 161
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	be 01       	movw	r22, r28
     f0c:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     f10:	28 2f       	mov	r18, r24
     f12:	39 2f       	mov	r19, r25
     f14:	21 15       	cp	r18, r1
     f16:	31 05       	cpc	r19, r1
     f18:	49 f4       	brne	.+18     	; 0xf2c <protocolCom+0x358>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     f1a:	81 eb       	ldi	r24, 0xB1	; 177
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     f22:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_grensLight>
     f26:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     f2a:	82 ce       	rjmp	.-764    	; 0xc30 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     f2c:	82 ec       	ldi	r24, 0xC2	; 194
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	be 01       	movw	r22, r28
     f32:	4f e0       	ldi	r20, 0x0F	; 15
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
     f3a:	28 2f       	mov	r18, r24
     f3c:	39 2f       	mov	r19, r25
     f3e:	21 15       	cp	r18, r1
     f40:	31 05       	cpc	r19, r1
     f42:	c9 f4       	brne	.+50     	; 0xf76 <protocolCom+0x3a2>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				/*if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
				}
				else{*/
				ser_write("203 GRENS_LIGHT: "), ser_write(get_grensLight()), ser_write(" -> ");
     f44:	85 ed       	ldi	r24, 0xD5	; 213
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     f4c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_grensLight>
     f50:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     f54:	8a e3       	ldi	r24, 0x3A	; 58
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
				set_substring();
     f5c:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
				set_grensLicht(substring);
     f60:	80 91 dc 07 	lds	r24, 0x07DC
     f64:	90 91 dd 07 	lds	r25, 0x07DD
     f68:	0e 94 b5 04 	call	0x96a	; 0x96a <set_grensLicht>
				ser_writeln(get_grensLight());
     f6c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_grensLight>
     f70:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     f74:	5d ce       	rjmp	.-838    	; 0xc30 <protocolCom+0x5c>
				//}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     f76:	87 ee       	ldi	r24, 0xE7	; 231
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	be 01       	movw	r22, r28
     f7c:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     f80:	28 2f       	mov	r18, r24
     f82:	39 2f       	mov	r19, r25
     f84:	21 15       	cp	r18, r1
     f86:	31 05       	cpc	r19, r1
     f88:	49 f4       	brne	.+18     	; 0xf9c <protocolCom+0x3c8>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     f8a:	86 ef       	ldi	r24, 0xF6	; 246
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     f92:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_maxUnroll>
     f96:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     f9a:	4a ce       	rjmp	.-876    	; 0xc30 <protocolCom+0x5c>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     f9c:	87 e0       	ldi	r24, 0x07	; 7
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	be 01       	movw	r22, r28
     fa2:	4f e0       	ldi	r20, 0x0F	; 15
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
     faa:	28 2f       	mov	r18, r24
     fac:	39 2f       	mov	r19, r25
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	c9 f4       	brne	.+50     	; 0xfe6 <protocolCom+0x412>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
				}
				else{*/
				ser_write("203 MAX_UNROLL: "), ser_write(get_maxUnroll()), ser_write(" -> ");
     fb4:	86 ef       	ldi	r24, 0xF6	; 246
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     fbc:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_maxUnroll>
     fc0:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
     fc4:	8a e3       	ldi	r24, 0x3A	; 58
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
				set_substring();
     fcc:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
				set_maxUnroll(substring);
     fd0:	80 91 dc 07 	lds	r24, 0x07DC
     fd4:	90 91 dd 07 	lds	r25, 0x07DD
     fd8:	0e 94 6f 05 	call	0xade	; 0xade <set_maxUnroll>
				ser_writeln(get_maxUnroll());
     fdc:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_maxUnroll>
     fe0:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
     fe4:	25 ce       	rjmp	.-950    	; 0xc30 <protocolCom+0x5c>
				//}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     fe6:	89 e1       	ldi	r24, 0x19	; 25
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	be 01       	movw	r22, r28
     fec:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
     ff0:	28 2f       	mov	r18, r24
     ff2:	39 2f       	mov	r19, r25
     ff4:	21 15       	cp	r18, r1
     ff6:	31 05       	cpc	r19, r1
     ff8:	49 f4       	brne	.+18     	; 0x100c <protocolCom+0x438>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     ffa:	88 e2       	ldi	r24, 0x28	; 40
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
    1002:	0e 94 3f 05 	call	0xa7e	; 0xa7e <get_minUnroll>
    1006:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    100a:	12 ce       	rjmp	.-988    	; 0xc30 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
    100c:	89 e3       	ldi	r24, 0x39	; 57
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	be 01       	movw	r22, r28
    1012:	4f e0       	ldi	r20, 0x0F	; 15
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
    101a:	28 2f       	mov	r18, r24
    101c:	39 2f       	mov	r19, r25
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	c9 f4       	brne	.+50     	; 0x1056 <protocolCom+0x482>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
				}
				else{*/
				ser_write("203 MIN_UNROLL: "), ser_write(get_minUnroll()), ser_write(" -> ");
    1024:	88 e2       	ldi	r24, 0x28	; 40
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
    102c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <get_minUnroll>
    1030:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
    1034:	8a e3       	ldi	r24, 0x3A	; 58
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
				set_substring();
    103c:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
				set_minUnroll(substring);
    1040:	80 91 dc 07 	lds	r24, 0x07DC
    1044:	90 91 dd 07 	lds	r25, 0x07DD
    1048:	0e 94 12 05 	call	0xa24	; 0xa24 <set_minUnroll>
				ser_writeln(get_minUnroll());
    104c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <get_minUnroll>
    1050:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    1054:	ed cd       	rjmp	.-1062   	; 0xc30 <protocolCom+0x5c>
				//}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
    1056:	8b e4       	ldi	r24, 0x4B	; 75
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	be 01       	movw	r22, r28
    105c:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
    1060:	28 2f       	mov	r18, r24
    1062:	39 2f       	mov	r19, r25
    1064:	21 15       	cp	r18, r1
    1066:	31 05       	cpc	r19, r1
    1068:	49 f4       	brne	.+18     	; 0x107c <protocolCom+0x4a8>
				ser_write("202 "),  ser_writeln(get_Naam());
    106a:	84 e5       	ldi	r24, 0x54	; 84
    106c:	93 e0       	ldi	r25, 0x03	; 3
    106e:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
    1072:	0e 94 59 03 	call	0x6b2	; 0x6b2 <get_Naam>
    1076:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    107a:	da cd       	rjmp	.-1100   	; 0xc30 <protocolCom+0x5c>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
    107c:	89 e5       	ldi	r24, 0x59	; 89
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	be 01       	movw	r22, r28
    1082:	48 e0       	ldi	r20, 0x08	; 8
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
    108a:	28 2f       	mov	r18, r24
    108c:	39 2f       	mov	r19, r25
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	69 f4       	brne	.+26     	; 0x10ae <protocolCom+0x4da>
				/*if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{*/
				set_substring();
    1094:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
				set_Naam(substring);
    1098:	80 91 dc 07 	lds	r24, 0x07DC
    109c:	90 91 dd 07 	lds	r25, 0x07DD
    10a0:	0e 94 34 03 	call	0x668	; 0x668 <set_Naam>
				printf("200 OK \n");
    10a4:	85 e6       	ldi	r24, 0x65	; 101
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	0e 94 77 12 	call	0x24ee	; 0x24ee <puts>
    10ac:	c1 cd       	rjmp	.-1150   	; 0xc30 <protocolCom+0x5c>
				//}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
    10ae:	8d e6       	ldi	r24, 0x6D	; 109
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	be 01       	movw	r22, r28
    10b4:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
    10b8:	28 2f       	mov	r18, r24
    10ba:	39 2f       	mov	r19, r25
    10bc:	21 15       	cp	r18, r1
    10be:	31 05       	cpc	r19, r1
    10c0:	49 f4       	brne	.+18     	; 0x10d4 <protocolCom+0x500>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
    10c2:	84 e5       	ldi	r24, 0x54	; 84
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
    10ca:	0e 94 ad 03 	call	0x75a	; 0x75a <get_Locatie>
    10ce:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    10d2:	ae cd       	rjmp	.-1188   	; 0xc30 <protocolCom+0x5c>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
    10d4:	8a e7       	ldi	r24, 0x7A	; 122
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	be 01       	movw	r22, r28
    10da:	4c e0       	ldi	r20, 0x0C	; 12
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
    10e2:	28 2f       	mov	r18, r24
    10e4:	39 2f       	mov	r19, r25
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	69 f4       	brne	.+26     	; 0x1106 <protocolCom+0x532>
				/*if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{*/
				set_substring();
    10ec:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
				set_Locatie(substring);
    10f0:	80 91 dc 07 	lds	r24, 0x07DC
    10f4:	90 91 dd 07 	lds	r25, 0x07DD
    10f8:	0e 94 80 03 	call	0x700	; 0x700 <set_Locatie>
				
				printf("200 OK \n");
    10fc:	85 e6       	ldi	r24, 0x65	; 101
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	0e 94 77 12 	call	0x24ee	; 0x24ee <puts>
    1104:	95 cd       	rjmp	.-1238   	; 0xc30 <protocolCom+0x5c>
				//}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
    1106:	8a e8       	ldi	r24, 0x8A	; 138
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	be 01       	movw	r22, r28
    110c:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
    1110:	28 2f       	mov	r18, r24
    1112:	39 2f       	mov	r19, r25
    1114:	21 15       	cp	r18, r1
    1116:	31 05       	cpc	r19, r1
    1118:	49 f4       	brne	.+18     	; 0x112c <protocolCom+0x558>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
    111a:	86 e9       	ldi	r24, 0x96	; 150
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
    1122:	0e 94 14 04 	call	0x828	; 0x828 <get_Versie>
    1126:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    112a:	82 cd       	rjmp	.-1276   	; 0xc30 <protocolCom+0x5c>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
    112c:	83 ea       	ldi	r24, 0xA3	; 163
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	be 01       	movw	r22, r28
    1132:	4c e0       	ldi	r20, 0x0C	; 12
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	0e 94 1d 12 	call	0x243a	; 0x243a <strncmp>
    113a:	28 2f       	mov	r18, r24
    113c:	39 2f       	mov	r19, r25
    113e:	21 15       	cp	r18, r1
    1140:	31 05       	cpc	r19, r1
    1142:	69 f4       	brne	.+26     	; 0x115e <protocolCom+0x58a>
					/*if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
					}
					else{*/
					set_substring();
    1144:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_substring>
					set_Versie(substring);
    1148:	80 91 dc 07 	lds	r24, 0x07DC
    114c:	90 91 dd 07 	lds	r25, 0x07DD
    1150:	0e 94 e7 03 	call	0x7ce	; 0x7ce <set_Versie>
					
					printf("200 OK \n");
    1154:	85 e6       	ldi	r24, 0x65	; 101
    1156:	93 e0       	ldi	r25, 0x03	; 3
    1158:	0e 94 77 12 	call	0x24ee	; 0x24ee <puts>
    115c:	69 cd       	rjmp	.-1326   	; 0xc30 <protocolCom+0x5c>
					//}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
    115e:	82 eb       	ldi	r24, 0xB2	; 178
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	be 01       	movw	r22, r28
    1164:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
    1168:	28 2f       	mov	r18, r24
    116a:	39 2f       	mov	r19, r25
    116c:	21 15       	cp	r18, r1
    116e:	31 05       	cpc	r19, r1
    1170:	89 f4       	brne	.+34     	; 0x1194 <protocolCom+0x5c0>
				if ((get_unrollStatus() % 2) == 1){
    1172:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_unrollStatus>
    1176:	62 e0       	ldi	r22, 0x02	; 2
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divmodhi4>
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	11 f4       	brne	.+4      	; 0x1188 <protocolCom+0x5b4>
					uitrollen();					
    1184:	0e 94 71 09 	call	0x12e2	; 0x12e2 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
    1188:	87 eb       	ldi	r24, 0xB7	; 183
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
				abort();
    1190:	0e 94 01 11 	call	0x2202	; 0x2202 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
    1194:	80 ec       	ldi	r24, 0xC0	; 192
    1196:	93 e0       	ldi	r25, 0x03	; 3
    1198:	be 01       	movw	r22, r28
    119a:	0e 94 14 12 	call	0x2428	; 0x2428 <strcmp>
    119e:	28 2f       	mov	r18, r24
    11a0:	39 2f       	mov	r19, r25
    11a2:	21 15       	cp	r18, r1
    11a4:	31 05       	cpc	r19, r1
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <protocolCom+0x5de>
				ser_writeln(
    11a8:	85 ec       	ldi	r24, 0xC5	; 197
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    11b0:	3f cd       	rjmp	.-1410   	; 0xc30 <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
    11b2:	83 e1       	ldi	r24, 0x13	; 19
    11b4:	96 e0       	ldi	r25, 0x06	; 6
    11b6:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    11ba:	3a cd       	rjmp	.-1420   	; 0xc30 <protocolCom+0x5c>

000011bc <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
    11bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
    11c0:	83 e3       	ldi	r24, 0x33	; 51
    11c2:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
    11c6:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    11ca:	88 e1       	ldi	r24, 0x18	; 24
    11cc:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
    11d6:	89 e5       	ldi	r24, 0x59	; 89
    11d8:	96 e0       	ldi	r25, 0x06	; 6
    11da:	90 93 03 08 	sts	0x0803, r25
    11de:	80 93 02 08 	sts	0x0802, r24
}
    11e2:	08 95       	ret

000011e4 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    11e4:	e0 ec       	ldi	r30, 0xC0	; 192
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	90 81       	ld	r25, Z
    11ea:	95 ff       	sbrs	r25, 5
    11ec:	fd cf       	rjmp	.-6      	; 0x11e8 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
    11ee:	80 93 c6 00 	sts	0x00C6, r24
}
    11f2:	08 95       	ret

000011f4 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
    11f4:	cf 93       	push	r28
    11f6:	c8 2f       	mov	r28, r24
	if (c=='\n') {
    11f8:	8a 30       	cpi	r24, 0x0A	; 10
    11fa:	19 f4       	brne	.+6      	; 0x1202 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
    11fc:	8d e0       	ldi	r24, 0x0D	; 13
    11fe:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>
	}
	ser_transmit(c);
    1202:	8c 2f       	mov	r24, r28
    1204:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>
}
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    120c:	e0 ec       	ldi	r30, 0xC0	; 192
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 23       	and	r24, r24
    1214:	ec f7       	brge	.-6      	; 0x1210 <ser_receive+0x4>
	return UDR0;
    1216:	80 91 c6 00 	lds	r24, 0x00C6
}
    121a:	08 95       	ret

0000121c <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    1222:	88 81       	ld	r24, Y
    1224:	88 23       	and	r24, r24
    1226:	31 f0       	breq	.+12     	; 0x1234 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    1228:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    122a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    122e:	89 91       	ld	r24, Y+
    1230:	88 23       	and	r24, r24
    1232:	d9 f7       	brne	.-10     	; 0x122a <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    123a:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
	ser_transmit('\r');
    123e:	8d e0       	ldi	r24, 0x0D	; 13
    1240:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>
	ser_transmit('\n');
    1244:	8a e0       	ldi	r24, 0x0A	; 10
    1246:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>
}
    124a:	08 95       	ret

0000124c <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	5c 01       	movw	r10, r24
    1262:	d4 2f       	mov	r29, r20
	int i=0;
    1264:	6c 01       	movw	r12, r24
    1266:	ee 24       	eor	r14, r14
    1268:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    126a:	8b 01       	movw	r16, r22
    126c:	01 50       	subi	r16, 0x01	; 1
    126e:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1270:	0e 94 06 09 	call	0x120c	; 0x120c <ser_receive>
    1274:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    1276:	dd 23       	and	r29, r29
    1278:	11 f0       	breq	.+4      	; 0x127e <ser_readln+0x32>
    127a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>
		if (c=='\r') {
    127e:	cd 30       	cpi	r28, 0x0D	; 13
    1280:	31 f4       	brne	.+12     	; 0x128e <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1282:	dd 23       	and	r29, r29
    1284:	71 f0       	breq	.+28     	; 0x12a2 <ser_readln+0x56>
    1286:	8a e0       	ldi	r24, 0x0A	; 10
    1288:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ser_transmit>
    128c:	0a c0       	rjmp	.+20     	; 0x12a2 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    128e:	e0 16       	cp	r14, r16
    1290:	f1 06       	cpc	r15, r17
    1292:	74 f7       	brge	.-36     	; 0x1270 <ser_readln+0x24>
			buf[i++]=c;
    1294:	f6 01       	movw	r30, r12
    1296:	c1 93       	st	Z+, r28
    1298:	6f 01       	movw	r12, r30
    129a:	08 94       	sec
    129c:	e1 1c       	adc	r14, r1
    129e:	f1 1c       	adc	r15, r1
    12a0:	e7 cf       	rjmp	.-50     	; 0x1270 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    12a2:	ea 0c       	add	r14, r10
    12a4:	fb 1c       	adc	r15, r11
    12a6:	f7 01       	movw	r30, r14
    12a8:	10 82       	st	Z, r1
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	bf 90       	pop	r11
    12bc:	af 90       	pop	r10
    12be:	08 95       	ret

000012c0 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    12c0:	80 91 e2 06 	lds	r24, 0x06E2
    12c4:	90 91 e3 06 	lds	r25, 0x06E3
    12c8:	08 95       	ret

000012ca <init_scherm_ports>:



void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    12ca:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    12cc:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    12ce:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    12d0:	e9 e6       	ldi	r30, 0x69	; 105
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    12de:	2d 9a       	sbi	0x05, 5	; 5
}
    12e0:	08 95       	ret

000012e2 <uitrollen>:

void uitrollen(){
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
	IN = (IN + 1);
    12ea:	80 91 e2 06 	lds	r24, 0x06E2
    12ee:	90 91 e3 06 	lds	r25, 0x06E3
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	90 93 e3 06 	sts	0x06E3, r25
    12f8:	80 93 e2 06 	sts	0x06E2, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    12fc:	87 e6       	ldi	r24, 0x67	; 103
    12fe:	96 e0       	ldi	r25, 0x06	; 6
    1300:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1304:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1306:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1308:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <strtod>
    1314:	6b 01       	movw	r12, r22
    1316:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    131a:	2c 9a       	sbi	0x05, 4	; 5
    131c:	8f e3       	ldi	r24, 0x3F	; 63
    131e:	9d e0       	ldi	r25, 0x0D	; 13
    1320:	a3 e0       	ldi	r26, 0x03	; 3
    1322:	81 50       	subi	r24, 0x01	; 1
    1324:	90 40       	sbci	r25, 0x00	; 0
    1326:	a0 40       	sbci	r26, 0x00	; 0
    1328:	e1 f7       	brne	.-8      	; 0x1322 <uitrollen+0x40>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <uitrollen+0x4a>
    132c:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    132e:	2c 98       	cbi	0x05, 4	; 5
    1330:	8f e3       	ldi	r24, 0x3F	; 63
    1332:	9d e0       	ldi	r25, 0x0D	; 13
    1334:	a3 e0       	ldi	r26, 0x03	; 3
    1336:	81 50       	subi	r24, 0x01	; 1
    1338:	90 40       	sbci	r25, 0x00	; 0
    133a:	a0 40       	sbci	r26, 0x00	; 0
    133c:	e1 f7       	brne	.-8      	; 0x1336 <uitrollen+0x54>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <uitrollen+0x5e>
    1340:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1342:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1346:	a7 01       	movw	r20, r14
    1348:	96 01       	movw	r18, r12
    134a:	0e 94 90 0a 	call	0x1520	; 0x1520 <__cmpsf2>
    134e:	88 23       	and	r24, r24
    1350:	24 f3       	brlt	.-56     	; 0x131a <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    1352:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	00 d0       	rcall	.+0      	; 0x135c <uitrollen+0x7a>
    135c:	00 d0       	rcall	.+0      	; 0x135e <uitrollen+0x7c>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <uitrollen+0x7e>
    1360:	2d e6       	ldi	r18, 0x6D	; 109
    1362:	36 e0       	ldi	r19, 0x06	; 6
    1364:	ed b7       	in	r30, 0x3d	; 61
    1366:	fe b7       	in	r31, 0x3e	; 62
    1368:	32 83       	std	Z+2, r19	; 0x02
    136a:	21 83       	std	Z+1, r18	; 0x01
    136c:	83 83       	std	Z+3, r24	; 0x03
    136e:	94 83       	std	Z+4, r25	; 0x04
    1370:	a5 83       	std	Z+5, r26	; 0x05
    1372:	b6 83       	std	Z+6, r27	; 0x06
    1374:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    1378:	8d b7       	in	r24, 0x3d	; 61
    137a:	9e b7       	in	r25, 0x3e	; 62
    137c:	06 96       	adiw	r24, 0x06	; 6
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	9e bf       	out	0x3e, r25	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	8d bf       	out	0x3d, r24	; 61
    1388:	81 e9       	ldi	r24, 0x91	; 145
    138a:	96 e0       	ldi	r25, 0x06	; 6
    138c:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
}
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	08 95       	ret

0000139a <oprollen>:
	
	


void oprollen(){
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
	IN = (IN + 1);
    13a2:	80 91 e2 06 	lds	r24, 0x06E2
    13a6:	90 91 e3 06 	lds	r25, 0x06E3
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	90 93 e3 06 	sts	0x06E3, r25
    13b0:	80 93 e2 06 	sts	0x06E2, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    13b4:	8f ea       	ldi	r24, 0xAF	; 175
    13b6:	96 e0       	ldi	r25, 0x06	; 6
    13b8:	0e 94 0e 09 	call	0x121c	; 0x121c <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    13bc:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    13be:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    13c0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <strtod>
    13cc:	6b 01       	movw	r12, r22
    13ce:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    13d2:	2c 9a       	sbi	0x05, 4	; 5
    13d4:	8f e3       	ldi	r24, 0x3F	; 63
    13d6:	9d e0       	ldi	r25, 0x0D	; 13
    13d8:	a3 e0       	ldi	r26, 0x03	; 3
    13da:	81 50       	subi	r24, 0x01	; 1
    13dc:	90 40       	sbci	r25, 0x00	; 0
    13de:	a0 40       	sbci	r26, 0x00	; 0
    13e0:	e1 f7       	brne	.-8      	; 0x13da <oprollen+0x40>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <oprollen+0x4a>
    13e4:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    13e6:	2c 98       	cbi	0x05, 4	; 5
    13e8:	8f e3       	ldi	r24, 0x3F	; 63
    13ea:	9d e0       	ldi	r25, 0x0D	; 13
    13ec:	a3 e0       	ldi	r26, 0x03	; 3
    13ee:	81 50       	subi	r24, 0x01	; 1
    13f0:	90 40       	sbci	r25, 0x00	; 0
    13f2:	a0 40       	sbci	r26, 0x00	; 0
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <oprollen+0x54>
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <oprollen+0x5e>
    13f8:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    13fa:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13fe:	a7 01       	movw	r20, r14
    1400:	96 01       	movw	r18, r12
    1402:	0e 94 46 0b 	call	0x168c	; 0x168c <__gesf2>
    1406:	18 16       	cp	r1, r24
    1408:	24 f3       	brlt	.-56     	; 0x13d2 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    140a:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    140e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	00 d0       	rcall	.+0      	; 0x1418 <oprollen+0x7e>
    1418:	00 d0       	rcall	.+0      	; 0x141a <oprollen+0x80>
    141a:	00 d0       	rcall	.+0      	; 0x141c <oprollen+0x82>
    141c:	2d e6       	ldi	r18, 0x6D	; 109
    141e:	36 e0       	ldi	r19, 0x06	; 6
    1420:	ed b7       	in	r30, 0x3d	; 61
    1422:	fe b7       	in	r31, 0x3e	; 62
    1424:	32 83       	std	Z+2, r19	; 0x02
    1426:	21 83       	std	Z+1, r18	; 0x01
    1428:	83 83       	std	Z+3, r24	; 0x03
    142a:	94 83       	std	Z+4, r25	; 0x04
    142c:	a5 83       	std	Z+5, r26	; 0x05
    142e:	b6 83       	std	Z+6, r27	; 0x06
    1430:	0e 94 62 12 	call	0x24c4	; 0x24c4 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    1434:	8d b7       	in	r24, 0x3d	; 61
    1436:	9e b7       	in	r25, 0x3e	; 62
    1438:	06 96       	adiw	r24, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	9e bf       	out	0x3e, r25	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	8d bf       	out	0x3d, r24	; 61
    1444:	84 eb       	ldi	r24, 0xB4	; 180
    1446:	96 e0       	ldi	r25, 0x06	; 6
    1448:	0e 94 1d 09 	call	0x123a	; 0x123a <ser_writeln>
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <__subsf3>:
    1456:	50 58       	subi	r21, 0x80	; 128

00001458 <__addsf3>:
    1458:	bb 27       	eor	r27, r27
    145a:	aa 27       	eor	r26, r26
    145c:	0e d0       	rcall	.+28     	; 0x147a <__addsf3x>
    145e:	dc c0       	rjmp	.+440    	; 0x1618 <__fp_round>
    1460:	cd d0       	rcall	.+410    	; 0x15fc <__fp_pscA>
    1462:	30 f0       	brcs	.+12     	; 0x1470 <__addsf3+0x18>
    1464:	d2 d0       	rcall	.+420    	; 0x160a <__fp_pscB>
    1466:	20 f0       	brcs	.+8      	; 0x1470 <__addsf3+0x18>
    1468:	31 f4       	brne	.+12     	; 0x1476 <__addsf3+0x1e>
    146a:	9f 3f       	cpi	r25, 0xFF	; 255
    146c:	11 f4       	brne	.+4      	; 0x1472 <__addsf3+0x1a>
    146e:	1e f4       	brtc	.+6      	; 0x1476 <__addsf3+0x1e>
    1470:	c2 c0       	rjmp	.+388    	; 0x15f6 <__fp_nan>
    1472:	0e f4       	brtc	.+2      	; 0x1476 <__addsf3+0x1e>
    1474:	e0 95       	com	r30
    1476:	e7 fb       	bst	r30, 7
    1478:	b8 c0       	rjmp	.+368    	; 0x15ea <__fp_inf>

0000147a <__addsf3x>:
    147a:	e9 2f       	mov	r30, r25
    147c:	de d0       	rcall	.+444    	; 0x163a <__fp_split3>
    147e:	80 f3       	brcs	.-32     	; 0x1460 <__addsf3+0x8>
    1480:	ba 17       	cp	r27, r26
    1482:	62 07       	cpc	r22, r18
    1484:	73 07       	cpc	r23, r19
    1486:	84 07       	cpc	r24, r20
    1488:	95 07       	cpc	r25, r21
    148a:	18 f0       	brcs	.+6      	; 0x1492 <__addsf3x+0x18>
    148c:	71 f4       	brne	.+28     	; 0x14aa <__addsf3x+0x30>
    148e:	9e f5       	brtc	.+102    	; 0x14f6 <__addsf3x+0x7c>
    1490:	f6 c0       	rjmp	.+492    	; 0x167e <__fp_zero>
    1492:	0e f4       	brtc	.+2      	; 0x1496 <__addsf3x+0x1c>
    1494:	e0 95       	com	r30
    1496:	0b 2e       	mov	r0, r27
    1498:	ba 2f       	mov	r27, r26
    149a:	a0 2d       	mov	r26, r0
    149c:	0b 01       	movw	r0, r22
    149e:	b9 01       	movw	r22, r18
    14a0:	90 01       	movw	r18, r0
    14a2:	0c 01       	movw	r0, r24
    14a4:	ca 01       	movw	r24, r20
    14a6:	a0 01       	movw	r20, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	ff 27       	eor	r31, r31
    14ac:	59 1b       	sub	r21, r25
    14ae:	99 f0       	breq	.+38     	; 0x14d6 <__addsf3x+0x5c>
    14b0:	59 3f       	cpi	r21, 0xF9	; 249
    14b2:	50 f4       	brcc	.+20     	; 0x14c8 <__addsf3x+0x4e>
    14b4:	50 3e       	cpi	r21, 0xE0	; 224
    14b6:	68 f1       	brcs	.+90     	; 0x1512 <__addsf3x+0x98>
    14b8:	1a 16       	cp	r1, r26
    14ba:	f0 40       	sbci	r31, 0x00	; 0
    14bc:	a2 2f       	mov	r26, r18
    14be:	23 2f       	mov	r18, r19
    14c0:	34 2f       	mov	r19, r20
    14c2:	44 27       	eor	r20, r20
    14c4:	58 5f       	subi	r21, 0xF8	; 248
    14c6:	f3 cf       	rjmp	.-26     	; 0x14ae <__addsf3x+0x34>
    14c8:	46 95       	lsr	r20
    14ca:	37 95       	ror	r19
    14cc:	27 95       	ror	r18
    14ce:	a7 95       	ror	r26
    14d0:	f0 40       	sbci	r31, 0x00	; 0
    14d2:	53 95       	inc	r21
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__addsf3x+0x4e>
    14d6:	7e f4       	brtc	.+30     	; 0x14f6 <__addsf3x+0x7c>
    14d8:	1f 16       	cp	r1, r31
    14da:	ba 0b       	sbc	r27, r26
    14dc:	62 0b       	sbc	r22, r18
    14de:	73 0b       	sbc	r23, r19
    14e0:	84 0b       	sbc	r24, r20
    14e2:	ba f0       	brmi	.+46     	; 0x1512 <__addsf3x+0x98>
    14e4:	91 50       	subi	r25, 0x01	; 1
    14e6:	a1 f0       	breq	.+40     	; 0x1510 <__addsf3x+0x96>
    14e8:	ff 0f       	add	r31, r31
    14ea:	bb 1f       	adc	r27, r27
    14ec:	66 1f       	adc	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	c2 f7       	brpl	.-16     	; 0x14e4 <__addsf3x+0x6a>
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <__addsf3x+0x98>
    14f6:	ba 0f       	add	r27, r26
    14f8:	62 1f       	adc	r22, r18
    14fa:	73 1f       	adc	r23, r19
    14fc:	84 1f       	adc	r24, r20
    14fe:	48 f4       	brcc	.+18     	; 0x1512 <__addsf3x+0x98>
    1500:	87 95       	ror	r24
    1502:	77 95       	ror	r23
    1504:	67 95       	ror	r22
    1506:	b7 95       	ror	r27
    1508:	f7 95       	ror	r31
    150a:	9e 3f       	cpi	r25, 0xFE	; 254
    150c:	08 f0       	brcs	.+2      	; 0x1510 <__addsf3x+0x96>
    150e:	b3 cf       	rjmp	.-154    	; 0x1476 <__addsf3+0x1e>
    1510:	93 95       	inc	r25
    1512:	88 0f       	add	r24, r24
    1514:	08 f0       	brcs	.+2      	; 0x1518 <__addsf3x+0x9e>
    1516:	99 27       	eor	r25, r25
    1518:	ee 0f       	add	r30, r30
    151a:	97 95       	ror	r25
    151c:	87 95       	ror	r24
    151e:	08 95       	ret

00001520 <__cmpsf2>:
    1520:	40 d0       	rcall	.+128    	; 0x15a2 <__fp_cmp>
    1522:	08 f4       	brcc	.+2      	; 0x1526 <__cmpsf2+0x6>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	08 95       	ret

00001528 <__floatunsisf>:
    1528:	e8 94       	clt
    152a:	09 c0       	rjmp	.+18     	; 0x153e <__floatsisf+0x12>

0000152c <__floatsisf>:
    152c:	97 fb       	bst	r25, 7
    152e:	3e f4       	brtc	.+14     	; 0x153e <__floatsisf+0x12>
    1530:	90 95       	com	r25
    1532:	80 95       	com	r24
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8f 4f       	sbci	r24, 0xFF	; 255
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	99 23       	and	r25, r25
    1540:	a9 f0       	breq	.+42     	; 0x156c <__floatsisf+0x40>
    1542:	f9 2f       	mov	r31, r25
    1544:	96 e9       	ldi	r25, 0x96	; 150
    1546:	bb 27       	eor	r27, r27
    1548:	93 95       	inc	r25
    154a:	f6 95       	lsr	r31
    154c:	87 95       	ror	r24
    154e:	77 95       	ror	r23
    1550:	67 95       	ror	r22
    1552:	b7 95       	ror	r27
    1554:	f1 11       	cpse	r31, r1
    1556:	f8 cf       	rjmp	.-16     	; 0x1548 <__floatsisf+0x1c>
    1558:	fa f4       	brpl	.+62     	; 0x1598 <__floatsisf+0x6c>
    155a:	bb 0f       	add	r27, r27
    155c:	11 f4       	brne	.+4      	; 0x1562 <__floatsisf+0x36>
    155e:	60 ff       	sbrs	r22, 0
    1560:	1b c0       	rjmp	.+54     	; 0x1598 <__floatsisf+0x6c>
    1562:	6f 5f       	subi	r22, 0xFF	; 255
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	8f 4f       	sbci	r24, 0xFF	; 255
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <__floatsisf+0x6c>
    156c:	88 23       	and	r24, r24
    156e:	11 f0       	breq	.+4      	; 0x1574 <__floatsisf+0x48>
    1570:	96 e9       	ldi	r25, 0x96	; 150
    1572:	11 c0       	rjmp	.+34     	; 0x1596 <__floatsisf+0x6a>
    1574:	77 23       	and	r23, r23
    1576:	21 f0       	breq	.+8      	; 0x1580 <__floatsisf+0x54>
    1578:	9e e8       	ldi	r25, 0x8E	; 142
    157a:	87 2f       	mov	r24, r23
    157c:	76 2f       	mov	r23, r22
    157e:	05 c0       	rjmp	.+10     	; 0x158a <__floatsisf+0x5e>
    1580:	66 23       	and	r22, r22
    1582:	71 f0       	breq	.+28     	; 0x15a0 <__floatsisf+0x74>
    1584:	96 e8       	ldi	r25, 0x86	; 134
    1586:	86 2f       	mov	r24, r22
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	2a f0       	brmi	.+10     	; 0x1598 <__floatsisf+0x6c>
    158e:	9a 95       	dec	r25
    1590:	66 0f       	add	r22, r22
    1592:	77 1f       	adc	r23, r23
    1594:	88 1f       	adc	r24, r24
    1596:	da f7       	brpl	.-10     	; 0x158e <__floatsisf+0x62>
    1598:	88 0f       	add	r24, r24
    159a:	96 95       	lsr	r25
    159c:	87 95       	ror	r24
    159e:	97 f9       	bld	r25, 7
    15a0:	08 95       	ret

000015a2 <__fp_cmp>:
    15a2:	99 0f       	add	r25, r25
    15a4:	00 08       	sbc	r0, r0
    15a6:	55 0f       	add	r21, r21
    15a8:	aa 0b       	sbc	r26, r26
    15aa:	e0 e8       	ldi	r30, 0x80	; 128
    15ac:	fe ef       	ldi	r31, 0xFE	; 254
    15ae:	16 16       	cp	r1, r22
    15b0:	17 06       	cpc	r1, r23
    15b2:	e8 07       	cpc	r30, r24
    15b4:	f9 07       	cpc	r31, r25
    15b6:	c0 f0       	brcs	.+48     	; 0x15e8 <__fp_cmp+0x46>
    15b8:	12 16       	cp	r1, r18
    15ba:	13 06       	cpc	r1, r19
    15bc:	e4 07       	cpc	r30, r20
    15be:	f5 07       	cpc	r31, r21
    15c0:	98 f0       	brcs	.+38     	; 0x15e8 <__fp_cmp+0x46>
    15c2:	62 1b       	sub	r22, r18
    15c4:	73 0b       	sbc	r23, r19
    15c6:	84 0b       	sbc	r24, r20
    15c8:	95 0b       	sbc	r25, r21
    15ca:	39 f4       	brne	.+14     	; 0x15da <__fp_cmp+0x38>
    15cc:	0a 26       	eor	r0, r26
    15ce:	61 f0       	breq	.+24     	; 0x15e8 <__fp_cmp+0x46>
    15d0:	23 2b       	or	r18, r19
    15d2:	24 2b       	or	r18, r20
    15d4:	25 2b       	or	r18, r21
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <__fp_cmp+0x3e>
    15d8:	08 95       	ret
    15da:	0a 26       	eor	r0, r26
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <__fp_cmp+0x3e>
    15de:	a1 40       	sbci	r26, 0x01	; 1
    15e0:	a6 95       	lsr	r26
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	81 1d       	adc	r24, r1
    15e6:	81 1d       	adc	r24, r1
    15e8:	08 95       	ret

000015ea <__fp_inf>:
    15ea:	97 f9       	bld	r25, 7
    15ec:	9f 67       	ori	r25, 0x7F	; 127
    15ee:	80 e8       	ldi	r24, 0x80	; 128
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	08 95       	ret

000015f6 <__fp_nan>:
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	80 ec       	ldi	r24, 0xC0	; 192
    15fa:	08 95       	ret

000015fc <__fp_pscA>:
    15fc:	00 24       	eor	r0, r0
    15fe:	0a 94       	dec	r0
    1600:	16 16       	cp	r1, r22
    1602:	17 06       	cpc	r1, r23
    1604:	18 06       	cpc	r1, r24
    1606:	09 06       	cpc	r0, r25
    1608:	08 95       	ret

0000160a <__fp_pscB>:
    160a:	00 24       	eor	r0, r0
    160c:	0a 94       	dec	r0
    160e:	12 16       	cp	r1, r18
    1610:	13 06       	cpc	r1, r19
    1612:	14 06       	cpc	r1, r20
    1614:	05 06       	cpc	r0, r21
    1616:	08 95       	ret

00001618 <__fp_round>:
    1618:	09 2e       	mov	r0, r25
    161a:	03 94       	inc	r0
    161c:	00 0c       	add	r0, r0
    161e:	11 f4       	brne	.+4      	; 0x1624 <__fp_round+0xc>
    1620:	88 23       	and	r24, r24
    1622:	52 f0       	brmi	.+20     	; 0x1638 <__fp_round+0x20>
    1624:	bb 0f       	add	r27, r27
    1626:	40 f4       	brcc	.+16     	; 0x1638 <__fp_round+0x20>
    1628:	bf 2b       	or	r27, r31
    162a:	11 f4       	brne	.+4      	; 0x1630 <__fp_round+0x18>
    162c:	60 ff       	sbrs	r22, 0
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <__fp_round+0x20>
    1630:	6f 5f       	subi	r22, 0xFF	; 255
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	08 95       	ret

0000163a <__fp_split3>:
    163a:	57 fd       	sbrc	r21, 7
    163c:	90 58       	subi	r25, 0x80	; 128
    163e:	44 0f       	add	r20, r20
    1640:	55 1f       	adc	r21, r21
    1642:	59 f0       	breq	.+22     	; 0x165a <__fp_splitA+0x10>
    1644:	5f 3f       	cpi	r21, 0xFF	; 255
    1646:	71 f0       	breq	.+28     	; 0x1664 <__fp_splitA+0x1a>
    1648:	47 95       	ror	r20

0000164a <__fp_splitA>:
    164a:	88 0f       	add	r24, r24
    164c:	97 fb       	bst	r25, 7
    164e:	99 1f       	adc	r25, r25
    1650:	61 f0       	breq	.+24     	; 0x166a <__fp_splitA+0x20>
    1652:	9f 3f       	cpi	r25, 0xFF	; 255
    1654:	79 f0       	breq	.+30     	; 0x1674 <__fp_splitA+0x2a>
    1656:	87 95       	ror	r24
    1658:	08 95       	ret
    165a:	12 16       	cp	r1, r18
    165c:	13 06       	cpc	r1, r19
    165e:	14 06       	cpc	r1, r20
    1660:	55 1f       	adc	r21, r21
    1662:	f2 cf       	rjmp	.-28     	; 0x1648 <__fp_split3+0xe>
    1664:	46 95       	lsr	r20
    1666:	f1 df       	rcall	.-30     	; 0x164a <__fp_splitA>
    1668:	08 c0       	rjmp	.+16     	; 0x167a <__fp_splitA+0x30>
    166a:	16 16       	cp	r1, r22
    166c:	17 06       	cpc	r1, r23
    166e:	18 06       	cpc	r1, r24
    1670:	99 1f       	adc	r25, r25
    1672:	f1 cf       	rjmp	.-30     	; 0x1656 <__fp_splitA+0xc>
    1674:	86 95       	lsr	r24
    1676:	71 05       	cpc	r23, r1
    1678:	61 05       	cpc	r22, r1
    167a:	08 94       	sec
    167c:	08 95       	ret

0000167e <__fp_zero>:
    167e:	e8 94       	clt

00001680 <__fp_szero>:
    1680:	bb 27       	eor	r27, r27
    1682:	66 27       	eor	r22, r22
    1684:	77 27       	eor	r23, r23
    1686:	cb 01       	movw	r24, r22
    1688:	97 f9       	bld	r25, 7
    168a:	08 95       	ret

0000168c <__gesf2>:
    168c:	8a df       	rcall	.-236    	; 0x15a2 <__fp_cmp>
    168e:	08 f4       	brcc	.+2      	; 0x1692 <__gesf2+0x6>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	08 95       	ret

00001694 <__mulsf3>:
    1694:	0b d0       	rcall	.+22     	; 0x16ac <__mulsf3x>
    1696:	c0 cf       	rjmp	.-128    	; 0x1618 <__fp_round>
    1698:	b1 df       	rcall	.-158    	; 0x15fc <__fp_pscA>
    169a:	28 f0       	brcs	.+10     	; 0x16a6 <__mulsf3+0x12>
    169c:	b6 df       	rcall	.-148    	; 0x160a <__fp_pscB>
    169e:	18 f0       	brcs	.+6      	; 0x16a6 <__mulsf3+0x12>
    16a0:	95 23       	and	r25, r21
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <__mulsf3+0x12>
    16a4:	a2 cf       	rjmp	.-188    	; 0x15ea <__fp_inf>
    16a6:	a7 cf       	rjmp	.-178    	; 0x15f6 <__fp_nan>
    16a8:	11 24       	eor	r1, r1
    16aa:	ea cf       	rjmp	.-44     	; 0x1680 <__fp_szero>

000016ac <__mulsf3x>:
    16ac:	c6 df       	rcall	.-116    	; 0x163a <__fp_split3>
    16ae:	a0 f3       	brcs	.-24     	; 0x1698 <__mulsf3+0x4>

000016b0 <__mulsf3_pse>:
    16b0:	95 9f       	mul	r25, r21
    16b2:	d1 f3       	breq	.-12     	; 0x16a8 <__mulsf3+0x14>
    16b4:	95 0f       	add	r25, r21
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	55 1f       	adc	r21, r21
    16ba:	62 9f       	mul	r22, r18
    16bc:	f0 01       	movw	r30, r0
    16be:	72 9f       	mul	r23, r18
    16c0:	bb 27       	eor	r27, r27
    16c2:	f0 0d       	add	r31, r0
    16c4:	b1 1d       	adc	r27, r1
    16c6:	63 9f       	mul	r22, r19
    16c8:	aa 27       	eor	r26, r26
    16ca:	f0 0d       	add	r31, r0
    16cc:	b1 1d       	adc	r27, r1
    16ce:	aa 1f       	adc	r26, r26
    16d0:	64 9f       	mul	r22, r20
    16d2:	66 27       	eor	r22, r22
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	66 1f       	adc	r22, r22
    16da:	82 9f       	mul	r24, r18
    16dc:	22 27       	eor	r18, r18
    16de:	b0 0d       	add	r27, r0
    16e0:	a1 1d       	adc	r26, r1
    16e2:	62 1f       	adc	r22, r18
    16e4:	73 9f       	mul	r23, r19
    16e6:	b0 0d       	add	r27, r0
    16e8:	a1 1d       	adc	r26, r1
    16ea:	62 1f       	adc	r22, r18
    16ec:	83 9f       	mul	r24, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	22 1f       	adc	r18, r18
    16f4:	74 9f       	mul	r23, r20
    16f6:	33 27       	eor	r19, r19
    16f8:	a0 0d       	add	r26, r0
    16fa:	61 1d       	adc	r22, r1
    16fc:	23 1f       	adc	r18, r19
    16fe:	84 9f       	mul	r24, r20
    1700:	60 0d       	add	r22, r0
    1702:	21 1d       	adc	r18, r1
    1704:	82 2f       	mov	r24, r18
    1706:	76 2f       	mov	r23, r22
    1708:	6a 2f       	mov	r22, r26
    170a:	11 24       	eor	r1, r1
    170c:	9f 57       	subi	r25, 0x7F	; 127
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	8a f0       	brmi	.+34     	; 0x1734 <__mulsf3_pse+0x84>
    1712:	e1 f0       	breq	.+56     	; 0x174c <__mulsf3_pse+0x9c>
    1714:	88 23       	and	r24, r24
    1716:	4a f0       	brmi	.+18     	; 0x172a <__mulsf3_pse+0x7a>
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	bb 1f       	adc	r27, r27
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	a9 f7       	brne	.-22     	; 0x1714 <__mulsf3_pse+0x64>
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	51 05       	cpc	r21, r1
    172e:	70 f0       	brcs	.+28     	; 0x174c <__mulsf3_pse+0x9c>
    1730:	5c cf       	rjmp	.-328    	; 0x15ea <__fp_inf>
    1732:	a6 cf       	rjmp	.-180    	; 0x1680 <__fp_szero>
    1734:	5f 3f       	cpi	r21, 0xFF	; 255
    1736:	ec f3       	brlt	.-6      	; 0x1732 <__mulsf3_pse+0x82>
    1738:	98 3e       	cpi	r25, 0xE8	; 232
    173a:	dc f3       	brlt	.-10     	; 0x1732 <__mulsf3_pse+0x82>
    173c:	86 95       	lsr	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b7 95       	ror	r27
    1744:	f7 95       	ror	r31
    1746:	e7 95       	ror	r30
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	c1 f7       	brne	.-16     	; 0x173c <__mulsf3_pse+0x8c>
    174c:	fe 2b       	or	r31, r30
    174e:	88 0f       	add	r24, r24
    1750:	91 1d       	adc	r25, r1
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <vfprintf>:
    175a:	a5 e1       	ldi	r26, 0x15	; 21
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e3 eb       	ldi	r30, 0xB3	; 179
    1760:	fb e0       	ldi	r31, 0x0B	; 11
    1762:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__>
    1766:	4c 01       	movw	r8, r24
    1768:	7f 87       	std	Y+15, r23	; 0x0f
    176a:	6e 87       	std	Y+14, r22	; 0x0e
    176c:	fc 01       	movw	r30, r24
    176e:	17 82       	std	Z+7, r1	; 0x07
    1770:	16 82       	std	Z+6, r1	; 0x06
    1772:	83 81       	ldd	r24, Z+3	; 0x03
    1774:	81 fd       	sbrc	r24, 1
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <vfprintf+0x26>
    1778:	76 c3       	rjmp	.+1772   	; 0x1e66 <vfprintf+0x70c>
    177a:	4c 85       	ldd	r20, Y+12	; 0x0c
    177c:	5d 85       	ldd	r21, Y+13	; 0x0d
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <vfprintf+0x2e>
    1780:	1e 01       	movw	r2, r28
    1782:	08 94       	sec
    1784:	21 1c       	adc	r2, r1
    1786:	31 1c       	adc	r3, r1
    1788:	f4 01       	movw	r30, r8
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	ee 85       	ldd	r30, Y+14	; 0x0e
    178e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1790:	93 fd       	sbrc	r25, 3
    1792:	85 91       	lpm	r24, Z+
    1794:	93 ff       	sbrs	r25, 3
    1796:	81 91       	ld	r24, Z+
    1798:	ff 87       	std	Y+15, r31	; 0x0f
    179a:	ee 87       	std	Y+14, r30	; 0x0e
    179c:	88 23       	and	r24, r24
    179e:	09 f4       	brne	.+2      	; 0x17a2 <vfprintf+0x48>
    17a0:	5e c3       	rjmp	.+1724   	; 0x1e5e <vfprintf+0x704>
    17a2:	85 32       	cpi	r24, 0x25	; 37
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <vfprintf+0x5c>
    17a6:	93 fd       	sbrc	r25, 3
    17a8:	85 91       	lpm	r24, Z+
    17aa:	93 ff       	sbrs	r25, 3
    17ac:	81 91       	ld	r24, Z+
    17ae:	ff 87       	std	Y+15, r31	; 0x0f
    17b0:	ee 87       	std	Y+14, r30	; 0x0e
    17b2:	85 32       	cpi	r24, 0x25	; 37
    17b4:	59 f4       	brne	.+22     	; 0x17cc <vfprintf+0x72>
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	b4 01       	movw	r22, r8
    17ba:	4c 8b       	std	Y+20, r20	; 0x14
    17bc:	5d 8b       	std	Y+21, r21	; 0x15
    17be:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    17c2:	4c 89       	ldd	r20, Y+20	; 0x14
    17c4:	5d 89       	ldd	r21, Y+21	; 0x15
    17c6:	5d 87       	std	Y+13, r21	; 0x0d
    17c8:	4c 87       	std	Y+12, r20	; 0x0c
    17ca:	d7 cf       	rjmp	.-82     	; 0x177a <vfprintf+0x20>
    17cc:	ff 24       	eor	r15, r15
    17ce:	dd 24       	eor	r13, r13
    17d0:	10 e0       	ldi	r17, 0x00	; 0
    17d2:	10 32       	cpi	r17, 0x20	; 32
    17d4:	b0 f4       	brcc	.+44     	; 0x1802 <vfprintf+0xa8>
    17d6:	8b 32       	cpi	r24, 0x2B	; 43
    17d8:	69 f0       	breq	.+26     	; 0x17f4 <vfprintf+0x9a>
    17da:	8c 32       	cpi	r24, 0x2C	; 44
    17dc:	28 f4       	brcc	.+10     	; 0x17e8 <vfprintf+0x8e>
    17de:	80 32       	cpi	r24, 0x20	; 32
    17e0:	51 f0       	breq	.+20     	; 0x17f6 <vfprintf+0x9c>
    17e2:	83 32       	cpi	r24, 0x23	; 35
    17e4:	71 f4       	brne	.+28     	; 0x1802 <vfprintf+0xa8>
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <vfprintf+0xa4>
    17e8:	8d 32       	cpi	r24, 0x2D	; 45
    17ea:	39 f0       	breq	.+14     	; 0x17fa <vfprintf+0xa0>
    17ec:	80 33       	cpi	r24, 0x30	; 48
    17ee:	49 f4       	brne	.+18     	; 0x1802 <vfprintf+0xa8>
    17f0:	11 60       	ori	r17, 0x01	; 1
    17f2:	2c c0       	rjmp	.+88     	; 0x184c <vfprintf+0xf2>
    17f4:	12 60       	ori	r17, 0x02	; 2
    17f6:	14 60       	ori	r17, 0x04	; 4
    17f8:	29 c0       	rjmp	.+82     	; 0x184c <vfprintf+0xf2>
    17fa:	18 60       	ori	r17, 0x08	; 8
    17fc:	27 c0       	rjmp	.+78     	; 0x184c <vfprintf+0xf2>
    17fe:	10 61       	ori	r17, 0x10	; 16
    1800:	25 c0       	rjmp	.+74     	; 0x184c <vfprintf+0xf2>
    1802:	17 fd       	sbrc	r17, 7
    1804:	2e c0       	rjmp	.+92     	; 0x1862 <vfprintf+0x108>
    1806:	28 2f       	mov	r18, r24
    1808:	20 53       	subi	r18, 0x30	; 48
    180a:	2a 30       	cpi	r18, 0x0A	; 10
    180c:	98 f4       	brcc	.+38     	; 0x1834 <vfprintf+0xda>
    180e:	16 ff       	sbrs	r17, 6
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <vfprintf+0xc8>
    1812:	8f 2d       	mov	r24, r15
    1814:	88 0f       	add	r24, r24
    1816:	f8 2e       	mov	r15, r24
    1818:	ff 0c       	add	r15, r15
    181a:	ff 0c       	add	r15, r15
    181c:	f8 0e       	add	r15, r24
    181e:	f2 0e       	add	r15, r18
    1820:	15 c0       	rjmp	.+42     	; 0x184c <vfprintf+0xf2>
    1822:	8d 2d       	mov	r24, r13
    1824:	88 0f       	add	r24, r24
    1826:	d8 2e       	mov	r13, r24
    1828:	dd 0c       	add	r13, r13
    182a:	dd 0c       	add	r13, r13
    182c:	d8 0e       	add	r13, r24
    182e:	d2 0e       	add	r13, r18
    1830:	10 62       	ori	r17, 0x20	; 32
    1832:	0c c0       	rjmp	.+24     	; 0x184c <vfprintf+0xf2>
    1834:	8e 32       	cpi	r24, 0x2E	; 46
    1836:	21 f4       	brne	.+8      	; 0x1840 <vfprintf+0xe6>
    1838:	16 fd       	sbrc	r17, 6
    183a:	11 c3       	rjmp	.+1570   	; 0x1e5e <vfprintf+0x704>
    183c:	10 64       	ori	r17, 0x40	; 64
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0xf2>
    1840:	8c 36       	cpi	r24, 0x6C	; 108
    1842:	11 f4       	brne	.+4      	; 0x1848 <vfprintf+0xee>
    1844:	10 68       	ori	r17, 0x80	; 128
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0xf2>
    1848:	88 36       	cpi	r24, 0x68	; 104
    184a:	59 f4       	brne	.+22     	; 0x1862 <vfprintf+0x108>
    184c:	ee 85       	ldd	r30, Y+14	; 0x0e
    184e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1850:	93 fd       	sbrc	r25, 3
    1852:	85 91       	lpm	r24, Z+
    1854:	93 ff       	sbrs	r25, 3
    1856:	81 91       	ld	r24, Z+
    1858:	ff 87       	std	Y+15, r31	; 0x0f
    185a:	ee 87       	std	Y+14, r30	; 0x0e
    185c:	88 23       	and	r24, r24
    185e:	09 f0       	breq	.+2      	; 0x1862 <vfprintf+0x108>
    1860:	b8 cf       	rjmp	.-144    	; 0x17d2 <vfprintf+0x78>
    1862:	98 2f       	mov	r25, r24
    1864:	95 54       	subi	r25, 0x45	; 69
    1866:	93 30       	cpi	r25, 0x03	; 3
    1868:	18 f4       	brcc	.+6      	; 0x1870 <vfprintf+0x116>
    186a:	10 61       	ori	r17, 0x10	; 16
    186c:	80 5e       	subi	r24, 0xE0	; 224
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x122>
    1870:	98 2f       	mov	r25, r24
    1872:	95 56       	subi	r25, 0x65	; 101
    1874:	93 30       	cpi	r25, 0x03	; 3
    1876:	08 f0       	brcs	.+2      	; 0x187a <vfprintf+0x120>
    1878:	a2 c1       	rjmp	.+836    	; 0x1bbe <vfprintf+0x464>
    187a:	1f 7e       	andi	r17, 0xEF	; 239
    187c:	16 fd       	sbrc	r17, 6
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <vfprintf+0x12a>
    1880:	e6 e0       	ldi	r30, 0x06	; 6
    1882:	fe 2e       	mov	r15, r30
    1884:	1f 73       	andi	r17, 0x3F	; 63
    1886:	85 36       	cpi	r24, 0x65	; 101
    1888:	11 f4       	brne	.+4      	; 0x188e <vfprintf+0x134>
    188a:	10 64       	ori	r17, 0x40	; 64
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x140>
    188e:	86 36       	cpi	r24, 0x66	; 102
    1890:	11 f4       	brne	.+4      	; 0x1896 <vfprintf+0x13c>
    1892:	10 68       	ori	r17, 0x80	; 128
    1894:	02 c0       	rjmp	.+4      	; 0x189a <vfprintf+0x140>
    1896:	f1 10       	cpse	r15, r1
    1898:	fa 94       	dec	r15
    189a:	17 ff       	sbrs	r17, 7
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <vfprintf+0x152>
    189e:	fb e3       	ldi	r31, 0x3B	; 59
    18a0:	ff 15       	cp	r31, r15
    18a2:	48 f0       	brcs	.+18     	; 0x18b6 <vfprintf+0x15c>
    18a4:	ef 2c       	mov	r14, r15
    18a6:	e3 94       	inc	r14
    18a8:	27 e0       	ldi	r18, 0x07	; 7
    18aa:	0d c0       	rjmp	.+26     	; 0x18c6 <vfprintf+0x16c>
    18ac:	27 e0       	ldi	r18, 0x07	; 7
    18ae:	2f 15       	cp	r18, r15
    18b0:	30 f0       	brcs	.+12     	; 0x18be <vfprintf+0x164>
    18b2:	2f 2d       	mov	r18, r15
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <vfprintf+0x16a>
    18b6:	27 e0       	ldi	r18, 0x07	; 7
    18b8:	7c e3       	ldi	r23, 0x3C	; 60
    18ba:	e7 2e       	mov	r14, r23
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <vfprintf+0x16c>
    18be:	27 e0       	ldi	r18, 0x07	; 7
    18c0:	67 e0       	ldi	r22, 0x07	; 7
    18c2:	f6 2e       	mov	r15, r22
    18c4:	ee 24       	eor	r14, r14
    18c6:	ca 01       	movw	r24, r20
    18c8:	04 96       	adiw	r24, 0x04	; 4
    18ca:	9d 87       	std	Y+13, r25	; 0x0d
    18cc:	8c 87       	std	Y+12, r24	; 0x0c
    18ce:	fa 01       	movw	r30, r20
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	a1 01       	movw	r20, r2
    18da:	0e 2d       	mov	r16, r14
    18dc:	0e 94 06 11 	call	0x220c	; 0x220c <__ftoa_engine>
    18e0:	5c 01       	movw	r10, r24
    18e2:	c9 80       	ldd	r12, Y+1	; 0x01
    18e4:	2c 2d       	mov	r18, r12
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	39 8b       	std	Y+17, r19	; 0x11
    18ea:	28 8b       	std	Y+16, r18	; 0x10
    18ec:	c0 fe       	sbrs	r12, 0
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <vfprintf+0x19c>
    18f0:	38 89       	ldd	r19, Y+16	; 0x10
    18f2:	33 ff       	sbrs	r19, 3
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x1a8>
    18f6:	11 fd       	sbrc	r17, 1
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <vfprintf+0x1ac>
    18fa:	12 ff       	sbrs	r17, 2
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <vfprintf+0x1b0>
    18fe:	00 e2       	ldi	r16, 0x20	; 32
    1900:	05 c0       	rjmp	.+10     	; 0x190c <vfprintf+0x1b2>
    1902:	0d e2       	ldi	r16, 0x2D	; 45
    1904:	03 c0       	rjmp	.+6      	; 0x190c <vfprintf+0x1b2>
    1906:	0b e2       	ldi	r16, 0x2B	; 43
    1908:	01 c0       	rjmp	.+2      	; 0x190c <vfprintf+0x1b2>
    190a:	00 e0       	ldi	r16, 0x00	; 0
    190c:	88 89       	ldd	r24, Y+16	; 0x10
    190e:	99 89       	ldd	r25, Y+17	; 0x11
    1910:	8c 70       	andi	r24, 0x0C	; 12
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	09 f4       	brne	.+2      	; 0x191a <vfprintf+0x1c0>
    1918:	3c c0       	rjmp	.+120    	; 0x1992 <vfprintf+0x238>
    191a:	00 23       	and	r16, r16
    191c:	11 f0       	breq	.+4      	; 0x1922 <vfprintf+0x1c8>
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x1ca>
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	8d 15       	cp	r24, r13
    1926:	58 f4       	brcc	.+22     	; 0x193e <vfprintf+0x1e4>
    1928:	d8 1a       	sub	r13, r24
    192a:	13 fd       	sbrc	r17, 3
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <vfprintf+0x1e6>
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	b4 01       	movw	r22, r8
    1934:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1938:	da 94       	dec	r13
    193a:	c9 f7       	brne	.-14     	; 0x192e <vfprintf+0x1d4>
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <vfprintf+0x1e6>
    193e:	dd 24       	eor	r13, r13
    1940:	00 23       	and	r16, r16
    1942:	29 f0       	breq	.+10     	; 0x194e <vfprintf+0x1f4>
    1944:	80 2f       	mov	r24, r16
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b4 01       	movw	r22, r8
    194a:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    194e:	88 89       	ldd	r24, Y+16	; 0x10
    1950:	83 fd       	sbrc	r24, 3
    1952:	05 c0       	rjmp	.+10     	; 0x195e <vfprintf+0x204>
    1954:	3c e6       	ldi	r19, 0x6C	; 108
    1956:	e3 2e       	mov	r14, r19
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	f3 2e       	mov	r15, r19
    195c:	11 c0       	rjmp	.+34     	; 0x1980 <vfprintf+0x226>
    195e:	28 e6       	ldi	r18, 0x68	; 104
    1960:	e2 2e       	mov	r14, r18
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	f2 2e       	mov	r15, r18
    1966:	0c c0       	rjmp	.+24     	; 0x1980 <vfprintf+0x226>
    1968:	01 15       	cp	r16, r1
    196a:	11 05       	cpc	r17, r1
    196c:	09 f0       	breq	.+2      	; 0x1970 <vfprintf+0x216>
    196e:	80 52       	subi	r24, 0x20	; 32
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	b4 01       	movw	r22, r8
    1974:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1978:	08 94       	sec
    197a:	e1 1c       	adc	r14, r1
    197c:	f1 1c       	adc	r15, r1
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <vfprintf+0x22e>
    1980:	01 2f       	mov	r16, r17
    1982:	10 e0       	ldi	r17, 0x00	; 0
    1984:	00 71       	andi	r16, 0x10	; 16
    1986:	10 70       	andi	r17, 0x00	; 0
    1988:	f7 01       	movw	r30, r14
    198a:	84 91       	lpm	r24, Z
    198c:	88 23       	and	r24, r24
    198e:	61 f7       	brne	.-40     	; 0x1968 <vfprintf+0x20e>
    1990:	63 c2       	rjmp	.+1222   	; 0x1e58 <vfprintf+0x6fe>
    1992:	17 ff       	sbrs	r17, 7
    1994:	0e c0       	rjmp	.+28     	; 0x19b2 <vfprintf+0x258>
    1996:	ea 0c       	add	r14, r10
    1998:	f8 89       	ldd	r31, Y+16	; 0x10
    199a:	f4 ff       	sbrs	r31, 4
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <vfprintf+0x24c>
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	81 33       	cpi	r24, 0x31	; 49
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <vfprintf+0x24c>
    19a4:	ea 94       	dec	r14
    19a6:	1e 14       	cp	r1, r14
    19a8:	4c f5       	brge	.+82     	; 0x19fc <vfprintf+0x2a2>
    19aa:	28 e0       	ldi	r18, 0x08	; 8
    19ac:	2e 15       	cp	r18, r14
    19ae:	48 f1       	brcs	.+82     	; 0x1a02 <vfprintf+0x2a8>
    19b0:	2c c0       	rjmp	.+88     	; 0x1a0a <vfprintf+0x2b0>
    19b2:	16 fd       	sbrc	r17, 6
    19b4:	2a c0       	rjmp	.+84     	; 0x1a0a <vfprintf+0x2b0>
    19b6:	8f 2d       	mov	r24, r15
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	8a 15       	cp	r24, r10
    19bc:	9b 05       	cpc	r25, r11
    19be:	44 f0       	brlt	.+16     	; 0x19d0 <vfprintf+0x276>
    19c0:	3c ef       	ldi	r19, 0xFC	; 252
    19c2:	a3 16       	cp	r10, r19
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	b3 06       	cpc	r11, r19
    19c8:	1c f0       	brlt	.+6      	; 0x19d0 <vfprintf+0x276>
    19ca:	10 68       	ori	r17, 0x80	; 128
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <vfprintf+0x276>
    19ce:	fa 94       	dec	r15
    19d0:	ff 20       	and	r15, r15
    19d2:	49 f0       	breq	.+18     	; 0x19e6 <vfprintf+0x28c>
    19d4:	e2 e0       	ldi	r30, 0x02	; 2
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	ec 0f       	add	r30, r28
    19da:	fd 1f       	adc	r31, r29
    19dc:	ef 0d       	add	r30, r15
    19de:	f1 1d       	adc	r31, r1
    19e0:	80 81       	ld	r24, Z
    19e2:	80 33       	cpi	r24, 0x30	; 48
    19e4:	a1 f3       	breq	.-24     	; 0x19ce <vfprintf+0x274>
    19e6:	17 ff       	sbrs	r17, 7
    19e8:	10 c0       	rjmp	.+32     	; 0x1a0a <vfprintf+0x2b0>
    19ea:	ef 2c       	mov	r14, r15
    19ec:	e3 94       	inc	r14
    19ee:	8f 2d       	mov	r24, r15
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a8 16       	cp	r10, r24
    19f4:	b9 06       	cpc	r11, r25
    19f6:	44 f4       	brge	.+16     	; 0x1a08 <vfprintf+0x2ae>
    19f8:	fa 18       	sub	r15, r10
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <vfprintf+0x2b0>
    19fc:	ee 24       	eor	r14, r14
    19fe:	e3 94       	inc	r14
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <vfprintf+0x2b0>
    1a02:	98 e0       	ldi	r25, 0x08	; 8
    1a04:	e9 2e       	mov	r14, r25
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <vfprintf+0x2b0>
    1a08:	ff 24       	eor	r15, r15
    1a0a:	17 ff       	sbrs	r17, 7
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <vfprintf+0x2c2>
    1a0e:	1a 14       	cp	r1, r10
    1a10:	1b 04       	cpc	r1, r11
    1a12:	3c f4       	brge	.+14     	; 0x1a22 <vfprintf+0x2c8>
    1a14:	95 01       	movw	r18, r10
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <vfprintf+0x2cc>
    1a1c:	25 e0       	ldi	r18, 0x05	; 5
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0x2cc>
    1a22:	21 e0       	ldi	r18, 0x01	; 1
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	00 23       	and	r16, r16
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <vfprintf+0x2d4>
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	ff 20       	and	r15, r15
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <vfprintf+0x2e2>
    1a32:	8f 2d       	mov	r24, r15
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	28 0f       	add	r18, r24
    1a3a:	39 1f       	adc	r19, r25
    1a3c:	8d 2d       	mov	r24, r13
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	28 17       	cp	r18, r24
    1a42:	39 07       	cpc	r19, r25
    1a44:	14 f4       	brge	.+4      	; 0x1a4a <vfprintf+0x2f0>
    1a46:	d2 1a       	sub	r13, r18
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <vfprintf+0x2f2>
    1a4a:	dd 24       	eor	r13, r13
    1a4c:	61 2e       	mov	r6, r17
    1a4e:	77 24       	eor	r7, r7
    1a50:	c3 01       	movw	r24, r6
    1a52:	89 70       	andi	r24, 0x09	; 9
    1a54:	90 70       	andi	r25, 0x00	; 0
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	49 f4       	brne	.+18     	; 0x1a6c <vfprintf+0x312>
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <vfprintf+0x30e>
    1a5c:	80 e2       	ldi	r24, 0x20	; 32
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	b4 01       	movw	r22, r8
    1a62:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1a66:	da 94       	dec	r13
    1a68:	dd 20       	and	r13, r13
    1a6a:	c1 f7       	brne	.-16     	; 0x1a5c <vfprintf+0x302>
    1a6c:	00 23       	and	r16, r16
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <vfprintf+0x320>
    1a70:	80 2f       	mov	r24, r16
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	b4 01       	movw	r22, r8
    1a76:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1a7a:	63 fc       	sbrc	r6, 3
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <vfprintf+0x336>
    1a7e:	06 c0       	rjmp	.+12     	; 0x1a8c <vfprintf+0x332>
    1a80:	80 e3       	ldi	r24, 0x30	; 48
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	b4 01       	movw	r22, r8
    1a86:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1a8a:	da 94       	dec	r13
    1a8c:	dd 20       	and	r13, r13
    1a8e:	c1 f7       	brne	.-16     	; 0x1a80 <vfprintf+0x326>
    1a90:	17 ff       	sbrs	r17, 7
    1a92:	48 c0       	rjmp	.+144    	; 0x1b24 <vfprintf+0x3ca>
    1a94:	85 01       	movw	r16, r10
    1a96:	b7 fe       	sbrs	r11, 7
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x344>
    1a9a:	00 e0       	ldi	r16, 0x00	; 0
    1a9c:	10 e0       	ldi	r17, 0x00	; 0
    1a9e:	66 24       	eor	r6, r6
    1aa0:	77 24       	eor	r7, r7
    1aa2:	95 01       	movw	r18, r10
    1aa4:	2e 19       	sub	r18, r14
    1aa6:	31 09       	sbc	r19, r1
    1aa8:	3b 8b       	std	Y+19, r19	; 0x13
    1aaa:	2a 8b       	std	Y+18, r18	; 0x12
    1aac:	25 01       	movw	r4, r10
    1aae:	40 1a       	sub	r4, r16
    1ab0:	51 0a       	sbc	r5, r17
    1ab2:	42 0c       	add	r4, r2
    1ab4:	53 1c       	adc	r5, r3
    1ab6:	6f 2d       	mov	r22, r15
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	ee 24       	eor	r14, r14
    1abc:	ff 24       	eor	r15, r15
    1abe:	e6 1a       	sub	r14, r22
    1ac0:	f7 0a       	sbc	r15, r23
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	0f 3f       	cpi	r16, 0xFF	; 255
    1ac6:	13 07       	cpc	r17, r19
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <vfprintf+0x37a>
    1aca:	8e e2       	ldi	r24, 0x2E	; 46
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	b4 01       	movw	r22, r8
    1ad0:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1ad4:	a0 16       	cp	r10, r16
    1ad6:	b1 06       	cpc	r11, r17
    1ad8:	54 f0       	brlt	.+20     	; 0x1aee <vfprintf+0x394>
    1ada:	2a 89       	ldd	r18, Y+18	; 0x12
    1adc:	3b 89       	ldd	r19, Y+19	; 0x13
    1ade:	20 17       	cp	r18, r16
    1ae0:	31 07       	cpc	r19, r17
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <vfprintf+0x394>
    1ae4:	f2 01       	movw	r30, r4
    1ae6:	e6 0d       	add	r30, r6
    1ae8:	f7 1d       	adc	r31, r7
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <vfprintf+0x396>
    1aee:	80 e3       	ldi	r24, 0x30	; 48
    1af0:	01 50       	subi	r16, 0x01	; 1
    1af2:	10 40       	sbci	r17, 0x00	; 0
    1af4:	08 94       	sec
    1af6:	61 1c       	adc	r6, r1
    1af8:	71 1c       	adc	r7, r1
    1afa:	0e 15       	cp	r16, r14
    1afc:	1f 05       	cpc	r17, r15
    1afe:	2c f0       	brlt	.+10     	; 0x1b0a <vfprintf+0x3b0>
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	b4 01       	movw	r22, r8
    1b04:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1b08:	dc cf       	rjmp	.-72     	; 0x1ac2 <vfprintf+0x368>
    1b0a:	0a 15       	cp	r16, r10
    1b0c:	1b 05       	cpc	r17, r11
    1b0e:	41 f4       	brne	.+16     	; 0x1b20 <vfprintf+0x3c6>
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	96 33       	cpi	r25, 0x36	; 54
    1b14:	20 f4       	brcc	.+8      	; 0x1b1e <vfprintf+0x3c4>
    1b16:	95 33       	cpi	r25, 0x35	; 53
    1b18:	19 f4       	brne	.+6      	; 0x1b20 <vfprintf+0x3c6>
    1b1a:	38 89       	ldd	r19, Y+16	; 0x10
    1b1c:	34 ff       	sbrs	r19, 4
    1b1e:	81 e3       	ldi	r24, 0x31	; 49
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	49 c0       	rjmp	.+146    	; 0x1bb6 <vfprintf+0x45c>
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	81 33       	cpi	r24, 0x31	; 49
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <vfprintf+0x3d4>
    1b2a:	9f ee       	ldi	r25, 0xEF	; 239
    1b2c:	c9 22       	and	r12, r25
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	b4 01       	movw	r22, r8
    1b32:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1b36:	ff 20       	and	r15, r15
    1b38:	89 f0       	breq	.+34     	; 0x1b5c <vfprintf+0x402>
    1b3a:	8e e2       	ldi	r24, 0x2E	; 46
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	b4 01       	movw	r22, r8
    1b40:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1b44:	12 e0       	ldi	r17, 0x02	; 2
    1b46:	f1 01       	movw	r30, r2
    1b48:	e1 0f       	add	r30, r17
    1b4a:	f1 1d       	adc	r31, r1
    1b4c:	1f 5f       	subi	r17, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	b4 01       	movw	r22, r8
    1b54:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1b58:	fa 94       	dec	r15
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <vfprintf+0x3ec>
    1b5c:	64 fe       	sbrs	r6, 4
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <vfprintf+0x40c>
    1b60:	85 e4       	ldi	r24, 0x45	; 69
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <vfprintf+0x410>
    1b66:	85 e6       	ldi	r24, 0x65	; 101
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	b4 01       	movw	r22, r8
    1b6c:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1b70:	b7 fc       	sbrc	r11, 7
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <vfprintf+0x424>
    1b74:	a1 14       	cp	r10, r1
    1b76:	b1 04       	cpc	r11, r1
    1b78:	41 f4       	brne	.+16     	; 0x1b8a <vfprintf+0x430>
    1b7a:	c4 fe       	sbrs	r12, 4
    1b7c:	06 c0       	rjmp	.+12     	; 0x1b8a <vfprintf+0x430>
    1b7e:	b0 94       	com	r11
    1b80:	a1 94       	neg	r10
    1b82:	b1 08       	sbc	r11, r1
    1b84:	b3 94       	inc	r11
    1b86:	8d e2       	ldi	r24, 0x2D	; 45
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <vfprintf+0x432>
    1b8a:	8b e2       	ldi	r24, 0x2B	; 43
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	b4 01       	movw	r22, r8
    1b90:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <vfprintf+0x448>
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	e6 ef       	ldi	r30, 0xF6	; 246
    1b9c:	ff ef       	ldi	r31, 0xFF	; 255
    1b9e:	ae 0e       	add	r10, r30
    1ba0:	bf 1e       	adc	r11, r31
    1ba2:	fa e0       	ldi	r31, 0x0A	; 10
    1ba4:	af 16       	cp	r10, r31
    1ba6:	b1 04       	cpc	r11, r1
    1ba8:	bc f7       	brge	.-18     	; 0x1b98 <vfprintf+0x43e>
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	b4 01       	movw	r22, r8
    1bae:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1bb2:	c5 01       	movw	r24, r10
    1bb4:	c0 96       	adiw	r24, 0x30	; 48
    1bb6:	b4 01       	movw	r22, r8
    1bb8:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1bbc:	4d c1       	rjmp	.+666    	; 0x1e58 <vfprintf+0x6fe>
    1bbe:	83 36       	cpi	r24, 0x63	; 99
    1bc0:	31 f0       	breq	.+12     	; 0x1bce <vfprintf+0x474>
    1bc2:	83 37       	cpi	r24, 0x73	; 115
    1bc4:	89 f0       	breq	.+34     	; 0x1be8 <vfprintf+0x48e>
    1bc6:	83 35       	cpi	r24, 0x53	; 83
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <vfprintf+0x472>
    1bca:	59 c0       	rjmp	.+178    	; 0x1c7e <vfprintf+0x524>
    1bcc:	22 c0       	rjmp	.+68     	; 0x1c12 <vfprintf+0x4b8>
    1bce:	9a 01       	movw	r18, r20
    1bd0:	2e 5f       	subi	r18, 0xFE	; 254
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	3d 87       	std	Y+13, r19	; 0x0d
    1bd6:	2c 87       	std	Y+12, r18	; 0x0c
    1bd8:	fa 01       	movw	r30, r20
    1bda:	80 81       	ld	r24, Z
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	e8 2e       	mov	r14, r24
    1be2:	f1 2c       	mov	r15, r1
    1be4:	51 01       	movw	r10, r2
    1be6:	13 c0       	rjmp	.+38     	; 0x1c0e <vfprintf+0x4b4>
    1be8:	9a 01       	movw	r18, r20
    1bea:	2e 5f       	subi	r18, 0xFE	; 254
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	3d 87       	std	Y+13, r19	; 0x0d
    1bf0:	2c 87       	std	Y+12, r18	; 0x0c
    1bf2:	fa 01       	movw	r30, r20
    1bf4:	a0 80       	ld	r10, Z
    1bf6:	b1 80       	ldd	r11, Z+1	; 0x01
    1bf8:	16 ff       	sbrs	r17, 6
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <vfprintf+0x4a8>
    1bfc:	6f 2d       	mov	r22, r15
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <vfprintf+0x4ac>
    1c02:	6f ef       	ldi	r22, 0xFF	; 255
    1c04:	7f ef       	ldi	r23, 0xFF	; 255
    1c06:	c5 01       	movw	r24, r10
    1c08:	0e 94 2b 12 	call	0x2456	; 0x2456 <strnlen>
    1c0c:	7c 01       	movw	r14, r24
    1c0e:	1f 77       	andi	r17, 0x7F	; 127
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <vfprintf+0x4e0>
    1c12:	9a 01       	movw	r18, r20
    1c14:	2e 5f       	subi	r18, 0xFE	; 254
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	3d 87       	std	Y+13, r19	; 0x0d
    1c1a:	2c 87       	std	Y+12, r18	; 0x0c
    1c1c:	fa 01       	movw	r30, r20
    1c1e:	a0 80       	ld	r10, Z
    1c20:	b1 80       	ldd	r11, Z+1	; 0x01
    1c22:	16 ff       	sbrs	r17, 6
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <vfprintf+0x4d2>
    1c26:	6f 2d       	mov	r22, r15
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vfprintf+0x4d6>
    1c2c:	6f ef       	ldi	r22, 0xFF	; 255
    1c2e:	7f ef       	ldi	r23, 0xFF	; 255
    1c30:	c5 01       	movw	r24, r10
    1c32:	0e 94 fe 11 	call	0x23fc	; 0x23fc <strnlen_P>
    1c36:	7c 01       	movw	r14, r24
    1c38:	10 68       	ori	r17, 0x80	; 128
    1c3a:	13 fd       	sbrc	r17, 3
    1c3c:	1c c0       	rjmp	.+56     	; 0x1c76 <vfprintf+0x51c>
    1c3e:	06 c0       	rjmp	.+12     	; 0x1c4c <vfprintf+0x4f2>
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	b4 01       	movw	r22, r8
    1c46:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1c4a:	da 94       	dec	r13
    1c4c:	8d 2d       	mov	r24, r13
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	e8 16       	cp	r14, r24
    1c52:	f9 06       	cpc	r15, r25
    1c54:	a8 f3       	brcs	.-22     	; 0x1c40 <vfprintf+0x4e6>
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <vfprintf+0x51c>
    1c58:	f5 01       	movw	r30, r10
    1c5a:	17 fd       	sbrc	r17, 7
    1c5c:	85 91       	lpm	r24, Z+
    1c5e:	17 ff       	sbrs	r17, 7
    1c60:	81 91       	ld	r24, Z+
    1c62:	5f 01       	movw	r10, r30
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	b4 01       	movw	r22, r8
    1c68:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1c6c:	d1 10       	cpse	r13, r1
    1c6e:	da 94       	dec	r13
    1c70:	08 94       	sec
    1c72:	e1 08       	sbc	r14, r1
    1c74:	f1 08       	sbc	r15, r1
    1c76:	e1 14       	cp	r14, r1
    1c78:	f1 04       	cpc	r15, r1
    1c7a:	71 f7       	brne	.-36     	; 0x1c58 <vfprintf+0x4fe>
    1c7c:	ed c0       	rjmp	.+474    	; 0x1e58 <vfprintf+0x6fe>
    1c7e:	84 36       	cpi	r24, 0x64	; 100
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <vfprintf+0x52c>
    1c82:	89 36       	cpi	r24, 0x69	; 105
    1c84:	71 f5       	brne	.+92     	; 0x1ce2 <vfprintf+0x588>
    1c86:	9a 01       	movw	r18, r20
    1c88:	17 ff       	sbrs	r17, 7
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <vfprintf+0x546>
    1c8c:	2c 5f       	subi	r18, 0xFC	; 252
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	3d 87       	std	Y+13, r19	; 0x0d
    1c92:	2c 87       	std	Y+12, r18	; 0x0c
    1c94:	fa 01       	movw	r30, r20
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	a2 81       	ldd	r26, Z+2	; 0x02
    1c9c:	b3 81       	ldd	r27, Z+3	; 0x03
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <vfprintf+0x55c>
    1ca0:	2e 5f       	subi	r18, 0xFE	; 254
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	3d 87       	std	Y+13, r19	; 0x0d
    1ca6:	2c 87       	std	Y+12, r18	; 0x0c
    1ca8:	fa 01       	movw	r30, r20
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	aa 27       	eor	r26, r26
    1cb0:	97 fd       	sbrc	r25, 7
    1cb2:	a0 95       	com	r26
    1cb4:	ba 2f       	mov	r27, r26
    1cb6:	01 2f       	mov	r16, r17
    1cb8:	0f 76       	andi	r16, 0x6F	; 111
    1cba:	b7 ff       	sbrs	r27, 7
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <vfprintf+0x574>
    1cbe:	b0 95       	com	r27
    1cc0:	a0 95       	com	r26
    1cc2:	90 95       	com	r25
    1cc4:	81 95       	neg	r24
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	af 4f       	sbci	r26, 0xFF	; 255
    1cca:	bf 4f       	sbci	r27, 0xFF	; 255
    1ccc:	00 68       	ori	r16, 0x80	; 128
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	a1 01       	movw	r20, r2
    1cd4:	2a e0       	ldi	r18, 0x0A	; 10
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	0e 94 a5 12 	call	0x254a	; 0x254a <__ultoa_invert>
    1cdc:	e8 2e       	mov	r14, r24
    1cde:	e2 18       	sub	r14, r2
    1ce0:	41 c0       	rjmp	.+130    	; 0x1d64 <vfprintf+0x60a>
    1ce2:	85 37       	cpi	r24, 0x75	; 117
    1ce4:	21 f4       	brne	.+8      	; 0x1cee <vfprintf+0x594>
    1ce6:	1f 7e       	andi	r17, 0xEF	; 239
    1ce8:	2a e0       	ldi	r18, 0x0A	; 10
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	20 c0       	rjmp	.+64     	; 0x1d2e <vfprintf+0x5d4>
    1cee:	19 7f       	andi	r17, 0xF9	; 249
    1cf0:	8f 36       	cpi	r24, 0x6F	; 111
    1cf2:	a9 f0       	breq	.+42     	; 0x1d1e <vfprintf+0x5c4>
    1cf4:	80 37       	cpi	r24, 0x70	; 112
    1cf6:	20 f4       	brcc	.+8      	; 0x1d00 <vfprintf+0x5a6>
    1cf8:	88 35       	cpi	r24, 0x58	; 88
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <vfprintf+0x5a4>
    1cfc:	b0 c0       	rjmp	.+352    	; 0x1e5e <vfprintf+0x704>
    1cfe:	0b c0       	rjmp	.+22     	; 0x1d16 <vfprintf+0x5bc>
    1d00:	80 37       	cpi	r24, 0x70	; 112
    1d02:	21 f0       	breq	.+8      	; 0x1d0c <vfprintf+0x5b2>
    1d04:	88 37       	cpi	r24, 0x78	; 120
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <vfprintf+0x5b0>
    1d08:	aa c0       	rjmp	.+340    	; 0x1e5e <vfprintf+0x704>
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <vfprintf+0x5b4>
    1d0c:	10 61       	ori	r17, 0x10	; 16
    1d0e:	14 ff       	sbrs	r17, 4
    1d10:	09 c0       	rjmp	.+18     	; 0x1d24 <vfprintf+0x5ca>
    1d12:	14 60       	ori	r17, 0x04	; 4
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <vfprintf+0x5ca>
    1d16:	14 ff       	sbrs	r17, 4
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <vfprintf+0x5d0>
    1d1a:	16 60       	ori	r17, 0x06	; 6
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <vfprintf+0x5d0>
    1d1e:	28 e0       	ldi	r18, 0x08	; 8
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <vfprintf+0x5d4>
    1d24:	20 e1       	ldi	r18, 0x10	; 16
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <vfprintf+0x5d4>
    1d2a:	20 e1       	ldi	r18, 0x10	; 16
    1d2c:	32 e0       	ldi	r19, 0x02	; 2
    1d2e:	ca 01       	movw	r24, r20
    1d30:	17 ff       	sbrs	r17, 7
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <vfprintf+0x5ec>
    1d34:	04 96       	adiw	r24, 0x04	; 4
    1d36:	9d 87       	std	Y+13, r25	; 0x0d
    1d38:	8c 87       	std	Y+12, r24	; 0x0c
    1d3a:	fa 01       	movw	r30, r20
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	08 c0       	rjmp	.+16     	; 0x1d56 <vfprintf+0x5fc>
    1d46:	02 96       	adiw	r24, 0x02	; 2
    1d48:	9d 87       	std	Y+13, r25	; 0x0d
    1d4a:	8c 87       	std	Y+12, r24	; 0x0c
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a1 01       	movw	r20, r2
    1d58:	0e 94 a5 12 	call	0x254a	; 0x254a <__ultoa_invert>
    1d5c:	e8 2e       	mov	r14, r24
    1d5e:	e2 18       	sub	r14, r2
    1d60:	01 2f       	mov	r16, r17
    1d62:	0f 77       	andi	r16, 0x7F	; 127
    1d64:	06 ff       	sbrs	r16, 6
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <vfprintf+0x620>
    1d68:	0e 7f       	andi	r16, 0xFE	; 254
    1d6a:	ef 14       	cp	r14, r15
    1d6c:	30 f4       	brcc	.+12     	; 0x1d7a <vfprintf+0x620>
    1d6e:	04 ff       	sbrs	r16, 4
    1d70:	06 c0       	rjmp	.+12     	; 0x1d7e <vfprintf+0x624>
    1d72:	02 fd       	sbrc	r16, 2
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <vfprintf+0x624>
    1d76:	0f 7e       	andi	r16, 0xEF	; 239
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <vfprintf+0x624>
    1d7a:	1e 2d       	mov	r17, r14
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <vfprintf+0x626>
    1d7e:	1f 2d       	mov	r17, r15
    1d80:	80 2f       	mov	r24, r16
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	04 ff       	sbrs	r16, 4
    1d86:	0c c0       	rjmp	.+24     	; 0x1da0 <vfprintf+0x646>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ee 0d       	add	r30, r14
    1d8c:	f1 1d       	adc	r31, r1
    1d8e:	20 81       	ld	r18, Z
    1d90:	20 33       	cpi	r18, 0x30	; 48
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <vfprintf+0x63e>
    1d94:	09 7e       	andi	r16, 0xE9	; 233
    1d96:	09 c0       	rjmp	.+18     	; 0x1daa <vfprintf+0x650>
    1d98:	02 ff       	sbrs	r16, 2
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <vfprintf+0x64e>
    1d9c:	1e 5f       	subi	r17, 0xFE	; 254
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <vfprintf+0x650>
    1da0:	86 78       	andi	r24, 0x86	; 134
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	09 f0       	breq	.+2      	; 0x1daa <vfprintf+0x650>
    1da8:	1f 5f       	subi	r17, 0xFF	; 255
    1daa:	a0 2e       	mov	r10, r16
    1dac:	bb 24       	eor	r11, r11
    1dae:	03 fd       	sbrc	r16, 3
    1db0:	12 c0       	rjmp	.+36     	; 0x1dd6 <vfprintf+0x67c>
    1db2:	00 ff       	sbrs	r16, 0
    1db4:	0d c0       	rjmp	.+26     	; 0x1dd0 <vfprintf+0x676>
    1db6:	fe 2c       	mov	r15, r14
    1db8:	1d 15       	cp	r17, r13
    1dba:	50 f4       	brcc	.+20     	; 0x1dd0 <vfprintf+0x676>
    1dbc:	fd 0c       	add	r15, r13
    1dbe:	f1 1a       	sub	r15, r17
    1dc0:	1d 2d       	mov	r17, r13
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <vfprintf+0x676>
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	b4 01       	movw	r22, r8
    1dca:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1dce:	1f 5f       	subi	r17, 0xFF	; 255
    1dd0:	1d 15       	cp	r17, r13
    1dd2:	c0 f3       	brcs	.-16     	; 0x1dc4 <vfprintf+0x66a>
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <vfprintf+0x684>
    1dd6:	1d 15       	cp	r17, r13
    1dd8:	10 f4       	brcc	.+4      	; 0x1dde <vfprintf+0x684>
    1dda:	d1 1a       	sub	r13, r17
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <vfprintf+0x686>
    1dde:	dd 24       	eor	r13, r13
    1de0:	a4 fe       	sbrs	r10, 4
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <vfprintf+0x6a8>
    1de4:	80 e3       	ldi	r24, 0x30	; 48
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b4 01       	movw	r22, r8
    1dea:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1dee:	a2 fe       	sbrs	r10, 2
    1df0:	1f c0       	rjmp	.+62     	; 0x1e30 <vfprintf+0x6d6>
    1df2:	a1 fe       	sbrs	r10, 1
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <vfprintf+0x6a2>
    1df6:	88 e5       	ldi	r24, 0x58	; 88
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	10 c0       	rjmp	.+32     	; 0x1e1c <vfprintf+0x6c2>
    1dfc:	88 e7       	ldi	r24, 0x78	; 120
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <vfprintf+0x6c2>
    1e02:	c5 01       	movw	r24, r10
    1e04:	86 78       	andi	r24, 0x86	; 134
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	91 f0       	breq	.+36     	; 0x1e30 <vfprintf+0x6d6>
    1e0c:	a1 fc       	sbrc	r10, 1
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <vfprintf+0x6ba>
    1e10:	80 e2       	ldi	r24, 0x20	; 32
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vfprintf+0x6bc>
    1e14:	8b e2       	ldi	r24, 0x2B	; 43
    1e16:	07 fd       	sbrc	r16, 7
    1e18:	8d e2       	ldi	r24, 0x2D	; 45
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	b4 01       	movw	r22, r8
    1e1e:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <vfprintf+0x6d6>
    1e24:	80 e3       	ldi	r24, 0x30	; 48
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	b4 01       	movw	r22, r8
    1e2a:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1e2e:	fa 94       	dec	r15
    1e30:	ef 14       	cp	r14, r15
    1e32:	c0 f3       	brcs	.-16     	; 0x1e24 <vfprintf+0x6ca>
    1e34:	ea 94       	dec	r14
    1e36:	f1 01       	movw	r30, r2
    1e38:	ee 0d       	add	r30, r14
    1e3a:	f1 1d       	adc	r31, r1
    1e3c:	80 81       	ld	r24, Z
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	b4 01       	movw	r22, r8
    1e42:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1e46:	ee 20       	and	r14, r14
    1e48:	a9 f7       	brne	.-22     	; 0x1e34 <vfprintf+0x6da>
    1e4a:	06 c0       	rjmp	.+12     	; 0x1e58 <vfprintf+0x6fe>
    1e4c:	80 e2       	ldi	r24, 0x20	; 32
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	b4 01       	movw	r22, r8
    1e52:	0e 94 36 12 	call	0x246c	; 0x246c <fputc>
    1e56:	da 94       	dec	r13
    1e58:	dd 20       	and	r13, r13
    1e5a:	c1 f7       	brne	.-16     	; 0x1e4c <vfprintf+0x6f2>
    1e5c:	8e cc       	rjmp	.-1764   	; 0x177a <vfprintf+0x20>
    1e5e:	f4 01       	movw	r30, r8
    1e60:	86 81       	ldd	r24, Z+6	; 0x06
    1e62:	97 81       	ldd	r25, Z+7	; 0x07
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <vfprintf+0x710>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
    1e6a:	65 96       	adiw	r28, 0x15	; 21
    1e6c:	e2 e1       	ldi	r30, 0x12	; 18
    1e6e:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__>

00001e72 <__divmodhi4>:
    1e72:	97 fb       	bst	r25, 7
    1e74:	09 2e       	mov	r0, r25
    1e76:	07 26       	eor	r0, r23
    1e78:	0a d0       	rcall	.+20     	; 0x1e8e <__divmodhi4_neg1>
    1e7a:	77 fd       	sbrc	r23, 7
    1e7c:	04 d0       	rcall	.+8      	; 0x1e86 <__divmodhi4_neg2>
    1e7e:	43 d0       	rcall	.+134    	; 0x1f06 <__udivmodhi4>
    1e80:	06 d0       	rcall	.+12     	; 0x1e8e <__divmodhi4_neg1>
    1e82:	00 20       	and	r0, r0
    1e84:	1a f4       	brpl	.+6      	; 0x1e8c <__divmodhi4_exit>

00001e86 <__divmodhi4_neg2>:
    1e86:	70 95       	com	r23
    1e88:	61 95       	neg	r22
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001e8c <__divmodhi4_exit>:
    1e8c:	08 95       	ret

00001e8e <__divmodhi4_neg1>:
    1e8e:	f6 f7       	brtc	.-4      	; 0x1e8c <__divmodhi4_exit>
    1e90:	90 95       	com	r25
    1e92:	81 95       	neg	r24
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	08 95       	ret

00001e98 <__prologue_saves__>:
    1e98:	2f 92       	push	r2
    1e9a:	3f 92       	push	r3
    1e9c:	4f 92       	push	r4
    1e9e:	5f 92       	push	r5
    1ea0:	6f 92       	push	r6
    1ea2:	7f 92       	push	r7
    1ea4:	8f 92       	push	r8
    1ea6:	9f 92       	push	r9
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	ca 1b       	sub	r28, r26
    1ec2:	db 0b       	sbc	r29, r27
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	09 94       	ijmp

00001ed0 <__epilogue_restores__>:
    1ed0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ed2:	39 88       	ldd	r3, Y+17	; 0x11
    1ed4:	48 88       	ldd	r4, Y+16	; 0x10
    1ed6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eda:	7d 84       	ldd	r7, Y+13	; 0x0d
    1edc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ede:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ee0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ee2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ee4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee6:	df 80       	ldd	r13, Y+7	; 0x07
    1ee8:	ee 80       	ldd	r14, Y+6	; 0x06
    1eea:	fd 80       	ldd	r15, Y+5	; 0x05
    1eec:	0c 81       	ldd	r16, Y+4	; 0x04
    1eee:	1b 81       	ldd	r17, Y+3	; 0x03
    1ef0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ef2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef4:	ce 0f       	add	r28, r30
    1ef6:	d1 1d       	adc	r29, r1
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	ed 01       	movw	r28, r26
    1f04:	08 95       	ret

00001f06 <__udivmodhi4>:
    1f06:	aa 1b       	sub	r26, r26
    1f08:	bb 1b       	sub	r27, r27
    1f0a:	51 e1       	ldi	r21, 0x11	; 17
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <__udivmodhi4_ep>

00001f0e <__udivmodhi4_loop>:
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	bb 1f       	adc	r27, r27
    1f12:	a6 17       	cp	r26, r22
    1f14:	b7 07       	cpc	r27, r23
    1f16:	10 f0       	brcs	.+4      	; 0x1f1c <__udivmodhi4_ep>
    1f18:	a6 1b       	sub	r26, r22
    1f1a:	b7 0b       	sbc	r27, r23

00001f1c <__udivmodhi4_ep>:
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	5a 95       	dec	r21
    1f22:	a9 f7       	brne	.-22     	; 0x1f0e <__udivmodhi4_loop>
    1f24:	80 95       	com	r24
    1f26:	90 95       	com	r25
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	08 95       	ret

00001f2e <strtod>:
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	ed e9       	ldi	r30, 0x9D	; 157
    1f34:	ff e0       	ldi	r31, 0x0F	; 15
    1f36:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__prologue_saves__+0x8>
    1f3a:	5b 01       	movw	r10, r22
    1f3c:	61 15       	cp	r22, r1
    1f3e:	71 05       	cpc	r23, r1
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <strtod+0x1c>
    1f42:	db 01       	movw	r26, r22
    1f44:	8c 93       	st	X, r24
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	9c 93       	st	X, r25
    1f4a:	7c 01       	movw	r14, r24
    1f4c:	e7 01       	movw	r28, r14
    1f4e:	08 94       	sec
    1f50:	e1 1c       	adc	r14, r1
    1f52:	f1 1c       	adc	r15, r1
    1f54:	08 81       	ld	r16, Y
    1f56:	67 01       	movw	r12, r14
    1f58:	80 2f       	mov	r24, r16
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 de 11 	call	0x23bc	; 0x23bc <isspace>
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	a1 f7       	brne	.-24     	; 0x1f4c <strtod+0x1e>
    1f64:	0d 32       	cpi	r16, 0x2D	; 45
    1f66:	41 f4       	brne	.+16     	; 0x1f78 <strtod+0x4a>
    1f68:	09 81       	ldd	r16, Y+1	; 0x01
    1f6a:	42 e0       	ldi	r20, 0x02	; 2
    1f6c:	c4 2e       	mov	r12, r20
    1f6e:	d1 2c       	mov	r13, r1
    1f70:	cc 0e       	add	r12, r28
    1f72:	dd 1e       	adc	r13, r29
    1f74:	11 e0       	ldi	r17, 0x01	; 1
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <strtod+0x5c>
    1f78:	0b 32       	cpi	r16, 0x2B	; 43
    1f7a:	31 f4       	brne	.+12     	; 0x1f88 <strtod+0x5a>
    1f7c:	09 81       	ldd	r16, Y+1	; 0x01
    1f7e:	32 e0       	ldi	r19, 0x02	; 2
    1f80:	c3 2e       	mov	r12, r19
    1f82:	d1 2c       	mov	r13, r1
    1f84:	cc 0e       	add	r12, r28
    1f86:	dd 1e       	adc	r13, r29
    1f88:	10 e0       	ldi	r17, 0x00	; 0
    1f8a:	e6 01       	movw	r28, r12
    1f8c:	21 97       	sbiw	r28, 0x01	; 1
    1f8e:	ce 01       	movw	r24, r28
    1f90:	60 e7       	ldi	r22, 0x70	; 112
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	43 e0       	ldi	r20, 0x03	; 3
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strncasecmp_P>
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	d1 f4       	brne	.+52     	; 0x1fd4 <strtod+0xa6>
    1fa0:	e6 01       	movw	r28, r12
    1fa2:	22 96       	adiw	r28, 0x02	; 2
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	63 e7       	ldi	r22, 0x73	; 115
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	45 e0       	ldi	r20, 0x05	; 5
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strncasecmp_P>
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <strtod+0x8c>
    1fb6:	e6 01       	movw	r28, r12
    1fb8:	27 96       	adiw	r28, 0x07	; 7
    1fba:	a1 14       	cp	r10, r1
    1fbc:	b1 04       	cpc	r11, r1
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <strtod+0x98>
    1fc0:	f5 01       	movw	r30, r10
    1fc2:	d1 83       	std	Z+1, r29	; 0x01
    1fc4:	c0 83       	st	Z, r28
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	90 e8       	ldi	r25, 0x80	; 128
    1fcc:	11 23       	and	r17, r17
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <strtod+0xa4>
    1fd0:	0a c1       	rjmp	.+532    	; 0x21e6 <strtod+0x2b8>
    1fd2:	04 c1       	rjmp	.+520    	; 0x21dc <strtod+0x2ae>
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	68 e7       	ldi	r22, 0x78	; 120
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	43 e0       	ldi	r20, 0x03	; 3
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strncasecmp_P>
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	59 f4       	brne	.+22     	; 0x1ffc <strtod+0xce>
    1fe6:	a1 14       	cp	r10, r1
    1fe8:	b1 04       	cpc	r11, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <strtod+0xc0>
    1fec:	f9 c0       	rjmp	.+498    	; 0x21e0 <strtod+0x2b2>
    1fee:	c6 01       	movw	r24, r12
    1ff0:	02 96       	adiw	r24, 0x02	; 2
    1ff2:	d5 01       	movw	r26, r10
    1ff4:	11 96       	adiw	r26, 0x01	; 1
    1ff6:	9c 93       	st	X, r25
    1ff8:	8e 93       	st	-X, r24
    1ffa:	f2 c0       	rjmp	.+484    	; 0x21e0 <strtod+0x2b2>
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	ba 01       	movw	r22, r20
    2002:	88 24       	eor	r8, r8
    2004:	99 24       	eor	r9, r9
    2006:	00 53       	subi	r16, 0x30	; 48
    2008:	0a 30       	cpi	r16, 0x0A	; 10
    200a:	90 f5       	brcc	.+100    	; 0x2070 <strtod+0x142>
    200c:	12 60       	ori	r17, 0x02	; 2
    200e:	21 2f       	mov	r18, r17
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	c9 01       	movw	r24, r18
    2014:	88 70       	andi	r24, 0x08	; 8
    2016:	90 70       	andi	r25, 0x00	; 0
    2018:	12 ff       	sbrs	r17, 2
    201a:	06 c0       	rjmp	.+12     	; 0x2028 <strtod+0xfa>
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f5       	brne	.+90     	; 0x207a <strtod+0x14c>
    2020:	08 94       	sec
    2022:	81 1c       	adc	r8, r1
    2024:	91 1c       	adc	r9, r1
    2026:	29 c0       	rjmp	.+82     	; 0x207a <strtod+0x14c>
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	19 f0       	breq	.+6      	; 0x2032 <strtod+0x104>
    202c:	08 94       	sec
    202e:	81 08       	sbc	r8, r1
    2030:	91 08       	sbc	r9, r1
    2032:	db 01       	movw	r26, r22
    2034:	ca 01       	movw	r24, r20
    2036:	d2 e0       	ldi	r29, 0x02	; 2
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	aa 1f       	adc	r26, r26
    203e:	bb 1f       	adc	r27, r27
    2040:	da 95       	dec	r29
    2042:	d1 f7       	brne	.-12     	; 0x2038 <strtod+0x10a>
    2044:	48 0f       	add	r20, r24
    2046:	59 1f       	adc	r21, r25
    2048:	6a 1f       	adc	r22, r26
    204a:	7b 1f       	adc	r23, r27
    204c:	44 0f       	add	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	66 1f       	adc	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	40 0f       	add	r20, r16
    2056:	51 1d       	adc	r21, r1
    2058:	61 1d       	adc	r22, r1
    205a:	71 1d       	adc	r23, r1
    205c:	48 39       	cpi	r20, 0x98	; 152
    205e:	b9 e9       	ldi	r27, 0x99	; 153
    2060:	5b 07       	cpc	r21, r27
    2062:	b9 e9       	ldi	r27, 0x99	; 153
    2064:	6b 07       	cpc	r22, r27
    2066:	b9 e1       	ldi	r27, 0x19	; 25
    2068:	7b 07       	cpc	r23, r27
    206a:	38 f0       	brcs	.+14     	; 0x207a <strtod+0x14c>
    206c:	14 60       	ori	r17, 0x04	; 4
    206e:	05 c0       	rjmp	.+10     	; 0x207a <strtod+0x14c>
    2070:	0e 3f       	cpi	r16, 0xFE	; 254
    2072:	39 f4       	brne	.+14     	; 0x2082 <strtod+0x154>
    2074:	13 fd       	sbrc	r17, 3
    2076:	43 c0       	rjmp	.+134    	; 0x20fe <strtod+0x1d0>
    2078:	18 60       	ori	r17, 0x08	; 8
    207a:	f6 01       	movw	r30, r12
    207c:	01 91       	ld	r16, Z+
    207e:	6f 01       	movw	r12, r30
    2080:	c2 cf       	rjmp	.-124    	; 0x2006 <strtod+0xd8>
    2082:	05 33       	cpi	r16, 0x35	; 53
    2084:	11 f0       	breq	.+4      	; 0x208a <strtod+0x15c>
    2086:	05 31       	cpi	r16, 0x15	; 21
    2088:	d1 f5       	brne	.+116    	; 0x20fe <strtod+0x1d0>
    208a:	d6 01       	movw	r26, r12
    208c:	ec 91       	ld	r30, X
    208e:	ed 32       	cpi	r30, 0x2D	; 45
    2090:	11 f4       	brne	.+4      	; 0x2096 <strtod+0x168>
    2092:	10 61       	ori	r17, 0x10	; 16
    2094:	08 c0       	rjmp	.+16     	; 0x20a6 <strtod+0x178>
    2096:	eb 32       	cpi	r30, 0x2B	; 43
    2098:	29 f0       	breq	.+10     	; 0x20a4 <strtod+0x176>
    209a:	c6 01       	movw	r24, r12
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	21 e0       	ldi	r18, 0x01	; 1
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	08 c0       	rjmp	.+16     	; 0x20b4 <strtod+0x186>
    20a4:	d6 01       	movw	r26, r12
    20a6:	11 96       	adiw	r26, 0x01	; 1
    20a8:	ec 91       	ld	r30, X
    20aa:	11 97       	sbiw	r26, 0x01	; 1
    20ac:	c6 01       	movw	r24, r12
    20ae:	02 96       	adiw	r24, 0x02	; 2
    20b0:	22 e0       	ldi	r18, 0x02	; 2
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	e0 53       	subi	r30, 0x30	; 48
    20b6:	ea 30       	cpi	r30, 0x0A	; 10
    20b8:	20 f0       	brcs	.+8      	; 0x20c2 <strtod+0x194>
    20ba:	6c 01       	movw	r12, r24
    20bc:	c2 1a       	sub	r12, r18
    20be:	d3 0a       	sbc	r13, r19
    20c0:	1e c0       	rjmp	.+60     	; 0x20fe <strtod+0x1d0>
    20c2:	dc 01       	movw	r26, r24
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	fc e0       	ldi	r31, 0x0C	; 12
    20ca:	20 38       	cpi	r18, 0x80	; 128
    20cc:	3f 07       	cpc	r19, r31
    20ce:	5c f4       	brge	.+22     	; 0x20e6 <strtod+0x1b8>
    20d0:	c9 01       	movw	r24, r18
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	28 0f       	add	r18, r24
    20dc:	39 1f       	adc	r19, r25
    20de:	22 0f       	add	r18, r18
    20e0:	33 1f       	adc	r19, r19
    20e2:	2e 0f       	add	r18, r30
    20e4:	31 1d       	adc	r19, r1
    20e6:	ed 91       	ld	r30, X+
    20e8:	e0 53       	subi	r30, 0x30	; 48
    20ea:	6d 01       	movw	r12, r26
    20ec:	ea 30       	cpi	r30, 0x0A	; 10
    20ee:	60 f3       	brcs	.-40     	; 0x20c8 <strtod+0x19a>
    20f0:	14 ff       	sbrs	r17, 4
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <strtod+0x1cc>
    20f4:	30 95       	com	r19
    20f6:	21 95       	neg	r18
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	82 0e       	add	r8, r18
    20fc:	93 1e       	adc	r9, r19
    20fe:	c1 2f       	mov	r28, r17
    2100:	d0 e0       	ldi	r29, 0x00	; 0
    2102:	11 ff       	sbrs	r17, 1
    2104:	08 c0       	rjmp	.+16     	; 0x2116 <strtod+0x1e8>
    2106:	a1 14       	cp	r10, r1
    2108:	b1 04       	cpc	r11, r1
    210a:	29 f0       	breq	.+10     	; 0x2116 <strtod+0x1e8>
    210c:	c6 01       	movw	r24, r12
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	d5 01       	movw	r26, r10
    2112:	8d 93       	st	X+, r24
    2114:	9c 93       	st	X, r25
    2116:	cb 01       	movw	r24, r22
    2118:	ba 01       	movw	r22, r20
    211a:	0e 94 94 0a 	call	0x1528	; 0x1528 <__floatunsisf>
    211e:	6b 01       	movw	r12, r22
    2120:	7c 01       	movw	r14, r24
    2122:	ce 01       	movw	r24, r28
    2124:	83 70       	andi	r24, 0x03	; 3
    2126:	90 70       	andi	r25, 0x00	; 0
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	91 05       	cpc	r25, r1
    212c:	21 f4       	brne	.+8      	; 0x2136 <strtod+0x208>
    212e:	f7 fa       	bst	r15, 7
    2130:	f0 94       	com	r15
    2132:	f7 f8       	bld	r15, 7
    2134:	f0 94       	com	r15
    2136:	c7 01       	movw	r24, r14
    2138:	b6 01       	movw	r22, r12
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	a9 01       	movw	r20, r18
    2140:	0e 94 90 0a 	call	0x1520	; 0x1520 <__cmpsf2>
    2144:	88 23       	and	r24, r24
    2146:	09 f4       	brne	.+2      	; 0x214a <strtod+0x21c>
    2148:	44 c0       	rjmp	.+136    	; 0x21d2 <strtod+0x2a4>
    214a:	97 fe       	sbrs	r9, 7
    214c:	07 c0       	rjmp	.+14     	; 0x215c <strtod+0x22e>
    214e:	90 94       	com	r9
    2150:	81 94       	neg	r8
    2152:	91 08       	sbc	r9, r1
    2154:	93 94       	inc	r9
    2156:	c7 ea       	ldi	r28, 0xA7	; 167
    2158:	d0 e0       	ldi	r29, 0x00	; 0
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <strtod+0x232>
    215c:	cf e8       	ldi	r28, 0x8F	; 143
    215e:	d0 e0       	ldi	r29, 0x00	; 0
    2160:	98 ee       	ldi	r25, 0xE8	; 232
    2162:	69 2e       	mov	r6, r25
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	79 2e       	mov	r7, r25
    2168:	6c 0e       	add	r6, r28
    216a:	7d 1e       	adc	r7, r29
    216c:	20 e2       	ldi	r18, 0x20	; 32
    216e:	a2 2e       	mov	r10, r18
    2170:	b1 2c       	mov	r11, r1
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <strtod+0x264>
    2174:	fe 01       	movw	r30, r28
    2176:	05 91       	lpm	r16, Z+
    2178:	15 91       	lpm	r17, Z+
    217a:	25 91       	lpm	r18, Z+
    217c:	34 91       	lpm	r19, Z
    217e:	c7 01       	movw	r24, r14
    2180:	b6 01       	movw	r22, r12
    2182:	a9 01       	movw	r20, r18
    2184:	98 01       	movw	r18, r16
    2186:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3>
    218a:	6b 01       	movw	r12, r22
    218c:	7c 01       	movw	r14, r24
    218e:	8a 18       	sub	r8, r10
    2190:	9b 08       	sbc	r9, r11
    2192:	8a 14       	cp	r8, r10
    2194:	9b 04       	cpc	r9, r11
    2196:	74 f7       	brge	.-36     	; 0x2174 <strtod+0x246>
    2198:	24 97       	sbiw	r28, 0x04	; 4
    219a:	b5 94       	asr	r11
    219c:	a7 94       	ror	r10
    219e:	c6 15       	cp	r28, r6
    21a0:	d7 05       	cpc	r29, r7
    21a2:	b9 f7       	brne	.-18     	; 0x2192 <strtod+0x264>
    21a4:	c6 01       	movw	r24, r12
    21a6:	d7 01       	movw	r26, r14
    21a8:	2a 2f       	mov	r18, r26
    21aa:	22 0f       	add	r18, r18
    21ac:	2b 2f       	mov	r18, r27
    21ae:	22 1f       	adc	r18, r18
    21b0:	2f 3f       	cpi	r18, 0xFF	; 255
    21b2:	49 f0       	breq	.+18     	; 0x21c6 <strtod+0x298>
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	a9 01       	movw	r20, r18
    21be:	0e 94 90 0a 	call	0x1520	; 0x1520 <__cmpsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	31 f4       	brne	.+12     	; 0x21d2 <strtod+0x2a4>
    21c6:	82 e2       	ldi	r24, 0x22	; 34
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	90 93 07 08 	sts	0x0807, r25
    21ce:	80 93 06 08 	sts	0x0806, r24
    21d2:	3c 2d       	mov	r19, r12
    21d4:	2d 2d       	mov	r18, r13
    21d6:	9e 2d       	mov	r25, r14
    21d8:	8f 2d       	mov	r24, r15
    21da:	06 c0       	rjmp	.+12     	; 0x21e8 <strtod+0x2ba>
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <strtod+0x2ba>
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	90 ec       	ldi	r25, 0xC0	; 192
    21e6:	8f e7       	ldi	r24, 0x7F	; 127
    21e8:	b9 01       	movw	r22, r18
    21ea:	ac 01       	movw	r20, r24
    21ec:	87 2f       	mov	r24, r23
    21ee:	92 2f       	mov	r25, r18
    21f0:	a5 2f       	mov	r26, r21
    21f2:	b4 2f       	mov	r27, r20
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	ee e0       	ldi	r30, 0x0E	; 14
    21fe:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__epilogue_restores__+0x8>

00002202 <abort>:
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	f8 94       	cli
    2208:	0c 94 20 13 	jmp	0x2640	; 0x2640 <_exit>

0000220c <__ftoa_engine>:
    220c:	28 30       	cpi	r18, 0x08	; 8
    220e:	08 f0       	brcs	.+2      	; 0x2212 <__ftoa_engine+0x6>
    2210:	27 e0       	ldi	r18, 0x07	; 7
    2212:	33 27       	eor	r19, r19
    2214:	da 01       	movw	r26, r20
    2216:	99 0f       	add	r25, r25
    2218:	31 1d       	adc	r19, r1
    221a:	87 fd       	sbrc	r24, 7
    221c:	91 60       	ori	r25, 0x01	; 1
    221e:	00 96       	adiw	r24, 0x00	; 0
    2220:	61 05       	cpc	r22, r1
    2222:	71 05       	cpc	r23, r1
    2224:	39 f4       	brne	.+14     	; 0x2234 <__ftoa_engine+0x28>
    2226:	32 60       	ori	r19, 0x02	; 2
    2228:	2e 5f       	subi	r18, 0xFE	; 254
    222a:	3d 93       	st	X+, r19
    222c:	30 e3       	ldi	r19, 0x30	; 48
    222e:	2a 95       	dec	r18
    2230:	e1 f7       	brne	.-8      	; 0x222a <__ftoa_engine+0x1e>
    2232:	08 95       	ret
    2234:	9f 3f       	cpi	r25, 0xFF	; 255
    2236:	30 f0       	brcs	.+12     	; 0x2244 <__ftoa_engine+0x38>
    2238:	80 38       	cpi	r24, 0x80	; 128
    223a:	71 05       	cpc	r23, r1
    223c:	61 05       	cpc	r22, r1
    223e:	09 f0       	breq	.+2      	; 0x2242 <__ftoa_engine+0x36>
    2240:	3c 5f       	subi	r19, 0xFC	; 252
    2242:	3c 5f       	subi	r19, 0xFC	; 252
    2244:	3d 93       	st	X+, r19
    2246:	91 30       	cpi	r25, 0x01	; 1
    2248:	08 f0       	brcs	.+2      	; 0x224c <__ftoa_engine+0x40>
    224a:	80 68       	ori	r24, 0x80	; 128
    224c:	91 1d       	adc	r25, r1
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	1f 93       	push	r17
    2254:	0f 93       	push	r16
    2256:	ff 92       	push	r15
    2258:	ef 92       	push	r14
    225a:	19 2f       	mov	r17, r25
    225c:	98 7f       	andi	r25, 0xF8	; 248
    225e:	96 95       	lsr	r25
    2260:	e9 2f       	mov	r30, r25
    2262:	96 95       	lsr	r25
    2264:	96 95       	lsr	r25
    2266:	e9 0f       	add	r30, r25
    2268:	ff 27       	eor	r31, r31
    226a:	eb 5f       	subi	r30, 0xFB	; 251
    226c:	fe 4f       	sbci	r31, 0xFE	; 254
    226e:	99 27       	eor	r25, r25
    2270:	33 27       	eor	r19, r19
    2272:	ee 24       	eor	r14, r14
    2274:	ff 24       	eor	r15, r15
    2276:	a7 01       	movw	r20, r14
    2278:	e7 01       	movw	r28, r14
    227a:	05 90       	lpm	r0, Z+
    227c:	08 94       	sec
    227e:	07 94       	ror	r0
    2280:	28 f4       	brcc	.+10     	; 0x228c <__ftoa_engine+0x80>
    2282:	36 0f       	add	r19, r22
    2284:	e7 1e       	adc	r14, r23
    2286:	f8 1e       	adc	r15, r24
    2288:	49 1f       	adc	r20, r25
    228a:	51 1d       	adc	r21, r1
    228c:	66 0f       	add	r22, r22
    228e:	77 1f       	adc	r23, r23
    2290:	88 1f       	adc	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	06 94       	lsr	r0
    2296:	a1 f7       	brne	.-24     	; 0x2280 <__ftoa_engine+0x74>
    2298:	05 90       	lpm	r0, Z+
    229a:	07 94       	ror	r0
    229c:	28 f4       	brcc	.+10     	; 0x22a8 <__ftoa_engine+0x9c>
    229e:	e7 0e       	add	r14, r23
    22a0:	f8 1e       	adc	r15, r24
    22a2:	49 1f       	adc	r20, r25
    22a4:	56 1f       	adc	r21, r22
    22a6:	c1 1d       	adc	r28, r1
    22a8:	77 0f       	add	r23, r23
    22aa:	88 1f       	adc	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	66 1f       	adc	r22, r22
    22b0:	06 94       	lsr	r0
    22b2:	a1 f7       	brne	.-24     	; 0x229c <__ftoa_engine+0x90>
    22b4:	05 90       	lpm	r0, Z+
    22b6:	07 94       	ror	r0
    22b8:	28 f4       	brcc	.+10     	; 0x22c4 <__ftoa_engine+0xb8>
    22ba:	f8 0e       	add	r15, r24
    22bc:	49 1f       	adc	r20, r25
    22be:	56 1f       	adc	r21, r22
    22c0:	c7 1f       	adc	r28, r23
    22c2:	d1 1d       	adc	r29, r1
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	66 1f       	adc	r22, r22
    22ca:	77 1f       	adc	r23, r23
    22cc:	06 94       	lsr	r0
    22ce:	a1 f7       	brne	.-24     	; 0x22b8 <__ftoa_engine+0xac>
    22d0:	05 90       	lpm	r0, Z+
    22d2:	07 94       	ror	r0
    22d4:	20 f4       	brcc	.+8      	; 0x22de <__ftoa_engine+0xd2>
    22d6:	49 0f       	add	r20, r25
    22d8:	56 1f       	adc	r21, r22
    22da:	c7 1f       	adc	r28, r23
    22dc:	d8 1f       	adc	r29, r24
    22de:	99 0f       	add	r25, r25
    22e0:	66 1f       	adc	r22, r22
    22e2:	77 1f       	adc	r23, r23
    22e4:	88 1f       	adc	r24, r24
    22e6:	06 94       	lsr	r0
    22e8:	a9 f7       	brne	.-22     	; 0x22d4 <__ftoa_engine+0xc8>
    22ea:	84 91       	lpm	r24, Z
    22ec:	10 95       	com	r17
    22ee:	17 70       	andi	r17, 0x07	; 7
    22f0:	41 f0       	breq	.+16     	; 0x2302 <__ftoa_engine+0xf6>
    22f2:	d6 95       	lsr	r29
    22f4:	c7 95       	ror	r28
    22f6:	57 95       	ror	r21
    22f8:	47 95       	ror	r20
    22fa:	f7 94       	ror	r15
    22fc:	e7 94       	ror	r14
    22fe:	1a 95       	dec	r17
    2300:	c1 f7       	brne	.-16     	; 0x22f2 <__ftoa_engine+0xe6>
    2302:	eb ea       	ldi	r30, 0xAB	; 171
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	68 94       	set
    2308:	15 90       	lpm	r1, Z+
    230a:	15 91       	lpm	r17, Z+
    230c:	35 91       	lpm	r19, Z+
    230e:	65 91       	lpm	r22, Z+
    2310:	95 91       	lpm	r25, Z+
    2312:	05 90       	lpm	r0, Z+
    2314:	7f e2       	ldi	r23, 0x2F	; 47
    2316:	73 95       	inc	r23
    2318:	e1 18       	sub	r14, r1
    231a:	f1 0a       	sbc	r15, r17
    231c:	43 0b       	sbc	r20, r19
    231e:	56 0b       	sbc	r21, r22
    2320:	c9 0b       	sbc	r28, r25
    2322:	d0 09       	sbc	r29, r0
    2324:	c0 f7       	brcc	.-16     	; 0x2316 <__ftoa_engine+0x10a>
    2326:	e1 0c       	add	r14, r1
    2328:	f1 1e       	adc	r15, r17
    232a:	43 1f       	adc	r20, r19
    232c:	56 1f       	adc	r21, r22
    232e:	c9 1f       	adc	r28, r25
    2330:	d0 1d       	adc	r29, r0
    2332:	7e f4       	brtc	.+30     	; 0x2352 <__ftoa_engine+0x146>
    2334:	70 33       	cpi	r23, 0x30	; 48
    2336:	11 f4       	brne	.+4      	; 0x233c <__ftoa_engine+0x130>
    2338:	8a 95       	dec	r24
    233a:	e6 cf       	rjmp	.-52     	; 0x2308 <__ftoa_engine+0xfc>
    233c:	e8 94       	clt
    233e:	01 50       	subi	r16, 0x01	; 1
    2340:	30 f0       	brcs	.+12     	; 0x234e <__ftoa_engine+0x142>
    2342:	08 0f       	add	r16, r24
    2344:	0a f4       	brpl	.+2      	; 0x2348 <__ftoa_engine+0x13c>
    2346:	00 27       	eor	r16, r16
    2348:	02 17       	cp	r16, r18
    234a:	08 f4       	brcc	.+2      	; 0x234e <__ftoa_engine+0x142>
    234c:	20 2f       	mov	r18, r16
    234e:	23 95       	inc	r18
    2350:	02 2f       	mov	r16, r18
    2352:	7a 33       	cpi	r23, 0x3A	; 58
    2354:	28 f0       	brcs	.+10     	; 0x2360 <__ftoa_engine+0x154>
    2356:	79 e3       	ldi	r23, 0x39	; 57
    2358:	7d 93       	st	X+, r23
    235a:	2a 95       	dec	r18
    235c:	e9 f7       	brne	.-6      	; 0x2358 <__ftoa_engine+0x14c>
    235e:	10 c0       	rjmp	.+32     	; 0x2380 <__ftoa_engine+0x174>
    2360:	7d 93       	st	X+, r23
    2362:	2a 95       	dec	r18
    2364:	89 f6       	brne	.-94     	; 0x2308 <__ftoa_engine+0xfc>
    2366:	06 94       	lsr	r0
    2368:	97 95       	ror	r25
    236a:	67 95       	ror	r22
    236c:	37 95       	ror	r19
    236e:	17 95       	ror	r17
    2370:	17 94       	ror	r1
    2372:	e1 18       	sub	r14, r1
    2374:	f1 0a       	sbc	r15, r17
    2376:	43 0b       	sbc	r20, r19
    2378:	56 0b       	sbc	r21, r22
    237a:	c9 0b       	sbc	r28, r25
    237c:	d0 09       	sbc	r29, r0
    237e:	98 f0       	brcs	.+38     	; 0x23a6 <__ftoa_engine+0x19a>
    2380:	23 95       	inc	r18
    2382:	7e 91       	ld	r23, -X
    2384:	73 95       	inc	r23
    2386:	7a 33       	cpi	r23, 0x3A	; 58
    2388:	08 f0       	brcs	.+2      	; 0x238c <__ftoa_engine+0x180>
    238a:	70 e3       	ldi	r23, 0x30	; 48
    238c:	7c 93       	st	X, r23
    238e:	20 13       	cpse	r18, r16
    2390:	b8 f7       	brcc	.-18     	; 0x2380 <__ftoa_engine+0x174>
    2392:	7e 91       	ld	r23, -X
    2394:	70 61       	ori	r23, 0x10	; 16
    2396:	7d 93       	st	X+, r23
    2398:	30 f0       	brcs	.+12     	; 0x23a6 <__ftoa_engine+0x19a>
    239a:	83 95       	inc	r24
    239c:	71 e3       	ldi	r23, 0x31	; 49
    239e:	7d 93       	st	X+, r23
    23a0:	70 e3       	ldi	r23, 0x30	; 48
    23a2:	2a 95       	dec	r18
    23a4:	e1 f7       	brne	.-8      	; 0x239e <__ftoa_engine+0x192>
    23a6:	11 24       	eor	r1, r1
    23a8:	ef 90       	pop	r14
    23aa:	ff 90       	pop	r15
    23ac:	0f 91       	pop	r16
    23ae:	1f 91       	pop	r17
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	99 27       	eor	r25, r25
    23b6:	87 fd       	sbrc	r24, 7
    23b8:	90 95       	com	r25
    23ba:	08 95       	ret

000023bc <isspace>:
    23bc:	91 11       	cpse	r25, r1
    23be:	3d c1       	rjmp	.+634    	; 0x263a <__ctype_isfalse>
    23c0:	80 32       	cpi	r24, 0x20	; 32
    23c2:	19 f0       	breq	.+6      	; 0x23ca <isspace+0xe>
    23c4:	89 50       	subi	r24, 0x09	; 9
    23c6:	85 50       	subi	r24, 0x05	; 5
    23c8:	d0 f7       	brcc	.-12     	; 0x23be <isspace+0x2>
    23ca:	08 95       	ret

000023cc <strncasecmp_P>:
    23cc:	fb 01       	movw	r30, r22
    23ce:	dc 01       	movw	r26, r24
    23d0:	41 50       	subi	r20, 0x01	; 1
    23d2:	50 40       	sbci	r21, 0x00	; 0
    23d4:	88 f0       	brcs	.+34     	; 0x23f8 <strncasecmp_P+0x2c>
    23d6:	8d 91       	ld	r24, X+
    23d8:	81 34       	cpi	r24, 0x41	; 65
    23da:	1c f0       	brlt	.+6      	; 0x23e2 <strncasecmp_P+0x16>
    23dc:	8b 35       	cpi	r24, 0x5B	; 91
    23de:	0c f4       	brge	.+2      	; 0x23e2 <strncasecmp_P+0x16>
    23e0:	80 5e       	subi	r24, 0xE0	; 224
    23e2:	65 91       	lpm	r22, Z+
    23e4:	61 34       	cpi	r22, 0x41	; 65
    23e6:	1c f0       	brlt	.+6      	; 0x23ee <strncasecmp_P+0x22>
    23e8:	6b 35       	cpi	r22, 0x5B	; 91
    23ea:	0c f4       	brge	.+2      	; 0x23ee <strncasecmp_P+0x22>
    23ec:	60 5e       	subi	r22, 0xE0	; 224
    23ee:	86 1b       	sub	r24, r22
    23f0:	61 11       	cpse	r22, r1
    23f2:	71 f3       	breq	.-36     	; 0x23d0 <strncasecmp_P+0x4>
    23f4:	99 0b       	sbc	r25, r25
    23f6:	08 95       	ret
    23f8:	88 1b       	sub	r24, r24
    23fa:	fc cf       	rjmp	.-8      	; 0x23f4 <strncasecmp_P+0x28>

000023fc <strnlen_P>:
    23fc:	fc 01       	movw	r30, r24
    23fe:	05 90       	lpm	r0, Z+
    2400:	61 50       	subi	r22, 0x01	; 1
    2402:	70 40       	sbci	r23, 0x00	; 0
    2404:	01 10       	cpse	r0, r1
    2406:	d8 f7       	brcc	.-10     	; 0x23fe <strnlen_P+0x2>
    2408:	80 95       	com	r24
    240a:	90 95       	com	r25
    240c:	8e 0f       	add	r24, r30
    240e:	9f 1f       	adc	r25, r31
    2410:	08 95       	ret

00002412 <strchr>:
    2412:	fc 01       	movw	r30, r24
    2414:	81 91       	ld	r24, Z+
    2416:	86 17       	cp	r24, r22
    2418:	21 f0       	breq	.+8      	; 0x2422 <strchr+0x10>
    241a:	88 23       	and	r24, r24
    241c:	d9 f7       	brne	.-10     	; 0x2414 <strchr+0x2>
    241e:	99 27       	eor	r25, r25
    2420:	08 95       	ret
    2422:	31 97       	sbiw	r30, 0x01	; 1
    2424:	cf 01       	movw	r24, r30
    2426:	08 95       	ret

00002428 <strcmp>:
    2428:	fb 01       	movw	r30, r22
    242a:	dc 01       	movw	r26, r24
    242c:	8d 91       	ld	r24, X+
    242e:	01 90       	ld	r0, Z+
    2430:	80 19       	sub	r24, r0
    2432:	01 10       	cpse	r0, r1
    2434:	d9 f3       	breq	.-10     	; 0x242c <strcmp+0x4>
    2436:	99 0b       	sbc	r25, r25
    2438:	08 95       	ret

0000243a <strncmp>:
    243a:	fb 01       	movw	r30, r22
    243c:	dc 01       	movw	r26, r24
    243e:	41 50       	subi	r20, 0x01	; 1
    2440:	50 40       	sbci	r21, 0x00	; 0
    2442:	30 f0       	brcs	.+12     	; 0x2450 <strncmp+0x16>
    2444:	8d 91       	ld	r24, X+
    2446:	01 90       	ld	r0, Z+
    2448:	80 19       	sub	r24, r0
    244a:	19 f4       	brne	.+6      	; 0x2452 <strncmp+0x18>
    244c:	00 20       	and	r0, r0
    244e:	b9 f7       	brne	.-18     	; 0x243e <strncmp+0x4>
    2450:	88 1b       	sub	r24, r24
    2452:	99 0b       	sbc	r25, r25
    2454:	08 95       	ret

00002456 <strnlen>:
    2456:	fc 01       	movw	r30, r24
    2458:	61 50       	subi	r22, 0x01	; 1
    245a:	70 40       	sbci	r23, 0x00	; 0
    245c:	01 90       	ld	r0, Z+
    245e:	01 10       	cpse	r0, r1
    2460:	d8 f7       	brcc	.-10     	; 0x2458 <strnlen+0x2>
    2462:	80 95       	com	r24
    2464:	90 95       	com	r25
    2466:	8e 0f       	add	r24, r30
    2468:	9f 1f       	adc	r25, r31
    246a:	08 95       	ret

0000246c <fputc>:
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	8c 01       	movw	r16, r24
    2476:	eb 01       	movw	r28, r22
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	81 ff       	sbrs	r24, 1
    247c:	1b c0       	rjmp	.+54     	; 0x24b4 <fputc+0x48>
    247e:	82 ff       	sbrs	r24, 2
    2480:	0d c0       	rjmp	.+26     	; 0x249c <fputc+0x30>
    2482:	2e 81       	ldd	r18, Y+6	; 0x06
    2484:	3f 81       	ldd	r19, Y+7	; 0x07
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	28 17       	cp	r18, r24
    248c:	39 07       	cpc	r19, r25
    248e:	64 f4       	brge	.+24     	; 0x24a8 <fputc+0x3c>
    2490:	e8 81       	ld	r30, Y
    2492:	f9 81       	ldd	r31, Y+1	; 0x01
    2494:	01 93       	st	Z+, r16
    2496:	f9 83       	std	Y+1, r31	; 0x01
    2498:	e8 83       	st	Y, r30
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <fputc+0x3c>
    249c:	e8 85       	ldd	r30, Y+8	; 0x08
    249e:	f9 85       	ldd	r31, Y+9	; 0x09
    24a0:	80 2f       	mov	r24, r16
    24a2:	09 95       	icall
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	31 f4       	brne	.+12     	; 0x24b4 <fputc+0x48>
    24a8:	8e 81       	ldd	r24, Y+6	; 0x06
    24aa:	9f 81       	ldd	r25, Y+7	; 0x07
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	9f 83       	std	Y+7, r25	; 0x07
    24b0:	8e 83       	std	Y+6, r24	; 0x06
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <fputc+0x4c>
    24b4:	0f ef       	ldi	r16, 0xFF	; 255
    24b6:	1f ef       	ldi	r17, 0xFF	; 255
    24b8:	c8 01       	movw	r24, r16
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <printf>:
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e8 e6       	ldi	r30, 0x68	; 104
    24ca:	f2 e1       	ldi	r31, 0x12	; 18
    24cc:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__prologue_saves__+0x20>
    24d0:	fe 01       	movw	r30, r28
    24d2:	35 96       	adiw	r30, 0x05	; 5
    24d4:	61 91       	ld	r22, Z+
    24d6:	71 91       	ld	r23, Z+
    24d8:	80 91 02 08 	lds	r24, 0x0802
    24dc:	90 91 03 08 	lds	r25, 0x0803
    24e0:	af 01       	movw	r20, r30
    24e2:	0e 94 ad 0b 	call	0x175a	; 0x175a <vfprintf>
    24e6:	20 96       	adiw	r28, 0x00	; 0
    24e8:	e2 e0       	ldi	r30, 0x02	; 2
    24ea:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__epilogue_restores__+0x20>

000024ee <puts>:
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	8c 01       	movw	r16, r24
    24f8:	e0 91 02 08 	lds	r30, 0x0802
    24fc:	f0 91 03 08 	lds	r31, 0x0803
    2500:	83 81       	ldd	r24, Z+3	; 0x03
    2502:	81 ff       	sbrs	r24, 1
    2504:	1a c0       	rjmp	.+52     	; 0x253a <puts+0x4c>
    2506:	c0 e0       	ldi	r28, 0x00	; 0
    2508:	d0 e0       	ldi	r29, 0x00	; 0
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <puts+0x28>
    250c:	09 95       	icall
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	11 f0       	breq	.+4      	; 0x2516 <puts+0x28>
    2512:	cf ef       	ldi	r28, 0xFF	; 255
    2514:	df ef       	ldi	r29, 0xFF	; 255
    2516:	f8 01       	movw	r30, r16
    2518:	81 91       	ld	r24, Z+
    251a:	8f 01       	movw	r16, r30
    251c:	60 91 02 08 	lds	r22, 0x0802
    2520:	70 91 03 08 	lds	r23, 0x0803
    2524:	db 01       	movw	r26, r22
    2526:	18 96       	adiw	r26, 0x08	; 8
    2528:	ed 91       	ld	r30, X+
    252a:	fc 91       	ld	r31, X
    252c:	19 97       	sbiw	r26, 0x09	; 9
    252e:	88 23       	and	r24, r24
    2530:	69 f7       	brne	.-38     	; 0x250c <puts+0x1e>
    2532:	8a e0       	ldi	r24, 0x0A	; 10
    2534:	09 95       	icall
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	11 f0       	breq	.+4      	; 0x253e <puts+0x50>
    253a:	cf ef       	ldi	r28, 0xFF	; 255
    253c:	df ef       	ldi	r29, 0xFF	; 255
    253e:	ce 01       	movw	r24, r28
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <__ultoa_invert>:
    254a:	fa 01       	movw	r30, r20
    254c:	aa 27       	eor	r26, r26
    254e:	28 30       	cpi	r18, 0x08	; 8
    2550:	51 f1       	breq	.+84     	; 0x25a6 <__ultoa_invert+0x5c>
    2552:	20 31       	cpi	r18, 0x10	; 16
    2554:	81 f1       	breq	.+96     	; 0x25b6 <__ultoa_invert+0x6c>
    2556:	e8 94       	clt
    2558:	6f 93       	push	r22
    255a:	6e 7f       	andi	r22, 0xFE	; 254
    255c:	6e 5f       	subi	r22, 0xFE	; 254
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8f 4f       	sbci	r24, 0xFF	; 255
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	af 4f       	sbci	r26, 0xFF	; 255
    2566:	b1 e0       	ldi	r27, 0x01	; 1
    2568:	3e d0       	rcall	.+124    	; 0x25e6 <__ultoa_invert+0x9c>
    256a:	b4 e0       	ldi	r27, 0x04	; 4
    256c:	3c d0       	rcall	.+120    	; 0x25e6 <__ultoa_invert+0x9c>
    256e:	67 0f       	add	r22, r23
    2570:	78 1f       	adc	r23, r24
    2572:	89 1f       	adc	r24, r25
    2574:	9a 1f       	adc	r25, r26
    2576:	a1 1d       	adc	r26, r1
    2578:	68 0f       	add	r22, r24
    257a:	79 1f       	adc	r23, r25
    257c:	8a 1f       	adc	r24, r26
    257e:	91 1d       	adc	r25, r1
    2580:	a1 1d       	adc	r26, r1
    2582:	6a 0f       	add	r22, r26
    2584:	71 1d       	adc	r23, r1
    2586:	81 1d       	adc	r24, r1
    2588:	91 1d       	adc	r25, r1
    258a:	a1 1d       	adc	r26, r1
    258c:	20 d0       	rcall	.+64     	; 0x25ce <__ultoa_invert+0x84>
    258e:	09 f4       	brne	.+2      	; 0x2592 <__ultoa_invert+0x48>
    2590:	68 94       	set
    2592:	3f 91       	pop	r19
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	26 9f       	mul	r18, r22
    2598:	11 24       	eor	r1, r1
    259a:	30 19       	sub	r19, r0
    259c:	30 5d       	subi	r19, 0xD0	; 208
    259e:	31 93       	st	Z+, r19
    25a0:	de f6       	brtc	.-74     	; 0x2558 <__ultoa_invert+0xe>
    25a2:	cf 01       	movw	r24, r30
    25a4:	08 95       	ret
    25a6:	46 2f       	mov	r20, r22
    25a8:	47 70       	andi	r20, 0x07	; 7
    25aa:	40 5d       	subi	r20, 0xD0	; 208
    25ac:	41 93       	st	Z+, r20
    25ae:	b3 e0       	ldi	r27, 0x03	; 3
    25b0:	0f d0       	rcall	.+30     	; 0x25d0 <__ultoa_invert+0x86>
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__ultoa_invert+0x5c>
    25b4:	f6 cf       	rjmp	.-20     	; 0x25a2 <__ultoa_invert+0x58>
    25b6:	46 2f       	mov	r20, r22
    25b8:	4f 70       	andi	r20, 0x0F	; 15
    25ba:	40 5d       	subi	r20, 0xD0	; 208
    25bc:	4a 33       	cpi	r20, 0x3A	; 58
    25be:	18 f0       	brcs	.+6      	; 0x25c6 <__ultoa_invert+0x7c>
    25c0:	49 5d       	subi	r20, 0xD9	; 217
    25c2:	31 fd       	sbrc	r19, 1
    25c4:	40 52       	subi	r20, 0x20	; 32
    25c6:	41 93       	st	Z+, r20
    25c8:	02 d0       	rcall	.+4      	; 0x25ce <__ultoa_invert+0x84>
    25ca:	a9 f7       	brne	.-22     	; 0x25b6 <__ultoa_invert+0x6c>
    25cc:	ea cf       	rjmp	.-44     	; 0x25a2 <__ultoa_invert+0x58>
    25ce:	b4 e0       	ldi	r27, 0x04	; 4
    25d0:	a6 95       	lsr	r26
    25d2:	97 95       	ror	r25
    25d4:	87 95       	ror	r24
    25d6:	77 95       	ror	r23
    25d8:	67 95       	ror	r22
    25da:	ba 95       	dec	r27
    25dc:	c9 f7       	brne	.-14     	; 0x25d0 <__ultoa_invert+0x86>
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	61 05       	cpc	r22, r1
    25e2:	71 05       	cpc	r23, r1
    25e4:	08 95       	ret
    25e6:	9b 01       	movw	r18, r22
    25e8:	ac 01       	movw	r20, r24
    25ea:	0a 2e       	mov	r0, r26
    25ec:	06 94       	lsr	r0
    25ee:	57 95       	ror	r21
    25f0:	47 95       	ror	r20
    25f2:	37 95       	ror	r19
    25f4:	27 95       	ror	r18
    25f6:	ba 95       	dec	r27
    25f8:	c9 f7       	brne	.-14     	; 0x25ec <__ultoa_invert+0xa2>
    25fa:	62 0f       	add	r22, r18
    25fc:	73 1f       	adc	r23, r19
    25fe:	84 1f       	adc	r24, r20
    2600:	95 1f       	adc	r25, r21
    2602:	a0 1d       	adc	r26, r0
    2604:	08 95       	ret

00002606 <__eerd_byte_m328p>:
    2606:	f9 99       	sbic	0x1f, 1	; 31
    2608:	fe cf       	rjmp	.-4      	; 0x2606 <__eerd_byte_m328p>
    260a:	92 bd       	out	0x22, r25	; 34
    260c:	81 bd       	out	0x21, r24	; 33
    260e:	f8 9a       	sbi	0x1f, 0	; 31
    2610:	99 27       	eor	r25, r25
    2612:	80 b5       	in	r24, 0x20	; 32
    2614:	08 95       	ret

00002616 <__eeupd_byte_m328p>:
    2616:	26 2f       	mov	r18, r22

00002618 <__eeupd_r18_m328p>:
    2618:	f9 99       	sbic	0x1f, 1	; 31
    261a:	fe cf       	rjmp	.-4      	; 0x2618 <__eeupd_r18_m328p>
    261c:	92 bd       	out	0x22, r25	; 34
    261e:	81 bd       	out	0x21, r24	; 33
    2620:	f8 9a       	sbi	0x1f, 0	; 31
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	00 b4       	in	r0, 0x20	; 32
    2626:	02 16       	cp	r0, r18
    2628:	39 f0       	breq	.+14     	; 0x2638 <__eeupd_r18_m328p+0x20>
    262a:	1f ba       	out	0x1f, r1	; 31
    262c:	20 bd       	out	0x20, r18	; 32
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	fa 9a       	sbi	0x1f, 2	; 31
    2634:	f9 9a       	sbi	0x1f, 1	; 31
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	08 95       	ret

0000263a <__ctype_isfalse>:
    263a:	99 27       	eor	r25, r25
    263c:	88 27       	eor	r24, r24

0000263e <__ctype_istrue>:
    263e:	08 95       	ret

00002640 <_exit>:
    2640:	f8 94       	cli

00002642 <__stop_program>:
    2642:	ff cf       	rjmp	.-2      	; 0x2642 <__stop_program>
