
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000504  00800100  00002052  000020e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002052  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  00800604  00800604  000025ea  2**0
                  ALLOC
  3 .stab         00003000  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a27  00000000  00000000  000055ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00006018  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002560  00000000  00000000  00006218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c16  00000000  00000000  00008778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f2  00000000  00000000  0000938e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  0000a780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079a  00000000  00000000  0000ae30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017c3  00000000  00000000  0000b5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000cd8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	16 e0       	ldi	r17, 0x06	; 6
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 e5       	ldi	r30, 0x52	; 82
     17e:	f0 e2       	ldi	r31, 0x20	; 32
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a4 30       	cpi	r26, 0x04	; 4
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	17 e0       	ldi	r17, 0x07	; 7
     18e:	a4 e0       	ldi	r26, 0x04	; 4
     190:	b6 e0       	ldi	r27, 0x06	; 6
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 33       	cpi	r26, 0x3C	; 60
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
     1a0:	0c 94 27 10 	jmp	0x204e	; 0x204e <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	80 93 7e 00 	sts	0x007E, r24
	
}
     1b4:	08 95       	ret

000001b6 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1b6:	ea e7       	ldi	r30, 0x7A	; 122
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 64       	ori	r24, 0x40	; 64
     1be:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1c0:	80 81       	ld	r24, Z
     1c2:	86 fd       	sbrc	r24, 6
     1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     1c6:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     1ca:	08 95       	ret

000001cc <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     1cc:	85 e4       	ldi	r24, 0x45	; 69
     1ce:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1dc:	80 81       	ld	r24, Z
     1de:	86 fd       	sbrc	r24, 6
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <get_temp_adc+0x10>
	return ADC;
     1e2:	80 91 78 00 	lds	r24, 0x0078
     1e6:	90 91 79 00 	lds	r25, 0x0079
}
     1ea:	08 95       	ret

000001ec <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     1ec:	82 e6       	ldi	r24, 0x62	; 98
     1ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
     206:	08 95       	ret

00000208 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     208:	87 ef       	ldi	r24, 0xF7	; 247
     20a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	84 b9       	out	0x04, r24	; 4
}
     210:	08 95       	ret

00000212 <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     21c:	10 92 80 00 	sts	0x0080, r1
}
     220:	08 95       	ret

00000222 <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     222:	80 91 04 06 	lds	r24, 0x0604
     226:	90 91 05 06 	lds	r25, 0x0605
}	
     22a:	08 95       	ret

0000022c <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     22c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9c e9       	ldi	r25, 0x9C	; 156
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <getDistance+0x6>
     236:	00 c0       	rjmp	.+0      	; 0x238 <getDistance+0xc>
     238:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     23a:	28 98       	cbi	0x05, 0	; 5
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	91 ee       	ldi	r25, 0xE1	; 225
     240:	a4 e0       	ldi	r26, 0x04	; 4
     242:	81 50       	subi	r24, 0x01	; 1
     244:	90 40       	sbci	r25, 0x00	; 0
     246:	a0 40       	sbci	r26, 0x00	; 0
     248:	e1 f7       	brne	.-8      	; 0x242 <getDistance+0x16>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <getDistance+0x20>
     24c:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     24e:	60 91 12 06 	lds	r22, 0x0612
     252:	70 91 13 06 	lds	r23, 0x0613
     256:	80 91 14 06 	lds	r24, 0x0614
     25a:	90 91 15 06 	lds	r25, 0x0615
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	5f e3       	ldi	r21, 0x3F	; 63
     266:	0e 94 de 09 	call	0x13bc	; 0x13bc <__mulsf3>
     26a:	29 e9       	ldi	r18, 0x99	; 153
     26c:	3b eb       	ldi	r19, 0xBB	; 187
     26e:	46 e1       	ldi	r20, 0x16	; 22
     270:	5b e3       	ldi	r21, 0x3B	; 59
     272:	0e 94 de 09 	call	0x13bc	; 0x13bc <__mulsf3>
     276:	26 2f       	mov	r18, r22
     278:	37 2f       	mov	r19, r23
     27a:	f8 2f       	mov	r31, r24
     27c:	e9 2f       	mov	r30, r25
     27e:	46 2f       	mov	r20, r22
     280:	57 2f       	mov	r21, r23
     282:	68 2f       	mov	r22, r24
     284:	79 2f       	mov	r23, r25
     286:	40 93 0c 06 	sts	0x060C, r20
     28a:	50 93 0d 06 	sts	0x060D, r21
     28e:	60 93 0e 06 	sts	0x060E, r22
     292:	70 93 0f 06 	sts	0x060F, r23
	return afstand;
}
     296:	82 2f       	mov	r24, r18
     298:	93 2f       	mov	r25, r19
     29a:	af 2f       	mov	r26, r31
     29c:	be 2f       	mov	r27, r30
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	08 95       	ret

000002a4 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <get_temp_adc>
     2a8:	68 2f       	mov	r22, r24
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 2a 09 	call	0x1254	; 0x1254 <__floatsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 ea       	ldi	r20, 0xA0	; 160
     2ba:	5b e3       	ldi	r21, 0x3B	; 59
     2bc:	0e 94 de 09 	call	0x13bc	; 0x13bc <__mulsf3>
     2c0:	26 2f       	mov	r18, r22
     2c2:	37 2f       	mov	r19, r23
     2c4:	f8 2f       	mov	r31, r24
     2c6:	e9 2f       	mov	r30, r25
     2c8:	46 2f       	mov	r20, r22
     2ca:	57 2f       	mov	r21, r23
     2cc:	68 2f       	mov	r22, r24
     2ce:	79 2f       	mov	r23, r25
     2d0:	40 93 1a 06 	sts	0x061A, r20
     2d4:	50 93 1b 06 	sts	0x061B, r21
     2d8:	60 93 1c 06 	sts	0x061C, r22
     2dc:	70 93 1d 06 	sts	0x061D, r23
	ADCRes = (Volt - 0.5) * 100;
     2e0:	82 2f       	mov	r24, r18
     2e2:	93 2f       	mov	r25, r19
     2e4:	af 2f       	mov	r26, r31
     2e6:	be 2f       	mov	r27, r30
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	5f e3       	ldi	r21, 0x3F	; 63
     2f4:	0e 94 bf 08 	call	0x117e	; 0x117e <__subsf3>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	48 ec       	ldi	r20, 0xC8	; 200
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	0e 94 de 09 	call	0x13bc	; 0x13bc <__mulsf3>
     304:	26 2f       	mov	r18, r22
     306:	37 2f       	mov	r19, r23
     308:	f8 2f       	mov	r31, r24
     30a:	e9 2f       	mov	r30, r25
     30c:	46 2f       	mov	r20, r22
     30e:	57 2f       	mov	r21, r23
     310:	68 2f       	mov	r22, r24
     312:	79 2f       	mov	r23, r25
     314:	40 93 3e 06 	sts	0x063E, r20
     318:	50 93 3f 06 	sts	0x063F, r21
     31c:	60 93 40 06 	sts	0x0640, r22
     320:	70 93 41 06 	sts	0x0641, r23
	return ADCRes;
}
     324:	82 2f       	mov	r24, r18
     326:	93 2f       	mov	r25, r19
     328:	af 2f       	mov	r26, r31
     32a:	be 2f       	mov	r27, r30
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	08 95       	ret

00000332 <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <get_light_adc>
	return temp;
}
     336:	08 95       	ret

00000338 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     33c:	9c e9       	ldi	r25, 0x9C	; 156
     33e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     340:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     344:	85 b5       	in	r24, 0x25	; 37
     346:	85 60       	ori	r24, 0x05	; 5
     348:	85 bd       	out	0x25, r24	; 37
}
     34a:	08 95       	ret

0000034c <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     34c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <init_scherm_ports>
	init_timer();
     350:	0e 94 9c 01 	call	0x338	; 0x338 <init_timer>
	ser_init();
     354:	0e 94 2b 07 	call	0xe56	; 0xe56 <ser_init>
	ADC_init();
     358:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	
	init_ports();
     35c:	0e 94 04 01 	call	0x208	; 0x208 <init_ports>
	init_ext_int();
     360:	0e 94 09 01 	call	0x212	; 0x212 <init_ext_int>
	sei(); // set external interrupt
     364:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     366:	0e 94 44 05 	call	0xa88	; 0xa88 <protocolCom>
     36a:	fd cf       	rjmp	.-6      	; 0x366 <main+0x1a>

0000036c <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	8f 93       	push	r24
     378:	9f 93       	push	r25
	extraTime1++;
     37a:	80 91 06 06 	lds	r24, 0x0606
     37e:	90 91 07 06 	lds	r25, 0x0607
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 07 06 	sts	0x0607, r25
     388:	80 93 06 06 	sts	0x0606, r24
	if(extraTime1>100){
     38c:	80 91 06 06 	lds	r24, 0x0606
     390:	90 91 07 06 	lds	r25, 0x0607
     394:	85 36       	cpi	r24, 0x65	; 101
     396:	91 05       	cpc	r25, r1
     398:	6c f0       	brlt	.+26     	; 0x3b4 <__vector_14+0x48>
		timerVariable++;
     39a:	80 91 04 06 	lds	r24, 0x0604
     39e:	90 91 05 06 	lds	r25, 0x0605
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 05 06 	sts	0x0605, r25
     3a8:	80 93 04 06 	sts	0x0604, r24
		extraTime1 = 0;
     3ac:	10 92 07 06 	sts	0x0607, r1
     3b0:	10 92 06 06 	sts	0x0606, r1
		index++;
		
		// Resets de timer en de Totale timer ticks
		extraTime = 0;
	}*/
}
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <__vector_2>:

ISR(INT1_vect)
{
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	2f 93       	push	r18
     3ce:	3f 93       	push	r19
     3d0:	4f 93       	push	r20
     3d2:	5f 93       	push	r21
     3d4:	6f 93       	push	r22
     3d6:	7f 93       	push	r23
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
	if(i == 1)
     3e8:	80 91 10 06 	lds	r24, 0x0610
     3ec:	90 91 11 06 	lds	r25, 0x0611
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	91 05       	cpc	r25, r1
     3f4:	d1 f4       	brne	.+52     	; 0x42a <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     3f6:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     3fa:	c4 e8       	ldi	r28, 0x84	; 132
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
     3fe:	68 81       	ld	r22, Y
     400:	79 81       	ldd	r23, Y+1	; 0x01
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 28 09 	call	0x1250	; 0x1250 <__floatunsisf>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	80 93 12 06 	sts	0x0612, r24
     412:	90 93 13 06 	sts	0x0613, r25
     416:	a0 93 14 06 	sts	0x0614, r26
     41a:	b0 93 15 06 	sts	0x0615, r27
		TCNT1 = 0; //Reset duration
     41e:	19 82       	std	Y+1, r1	; 0x01
     420:	18 82       	st	Y, r1
		i = 0; //Reset counter
     422:	10 92 11 06 	sts	0x0611, r1
     426:	10 92 10 06 	sts	0x0610, r1
	}

	if(i==0)
     42a:	80 91 10 06 	lds	r24, 0x0610
     42e:	90 91 11 06 	lds	r25, 0x0611
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	59 f4       	brne	.+22     	; 0x44c <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     436:	e1 e8       	ldi	r30, 0x81	; 129
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
		i = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 11 06 	sts	0x0611, r25
     448:	80 93 10 06 	sts	0x0610, r24
	}
     44c:	ff 91       	pop	r31
     44e:	ef 91       	pop	r30
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	bf 91       	pop	r27
     456:	af 91       	pop	r26
     458:	9f 91       	pop	r25
     45a:	8f 91       	pop	r24
     45c:	7f 91       	pop	r23
     45e:	6f 91       	pop	r22
     460:	5f 91       	pop	r21
     462:	4f 91       	pop	r20
     464:	3f 91       	pop	r19
     466:	2f 91       	pop	r18
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	0f 90       	pop	r0
     46e:	1f 90       	pop	r1
     470:	18 95       	reti

00000472 <return_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	void return_maxUnroll(void){
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     47e:	e0 90 75 05 	lds	r14, 0x0575
     482:	f0 90 76 05 	lds	r15, 0x0576
     486:	80 91 81 05 	lds	r24, 0x0581
     48a:	90 91 82 05 	lds	r25, 0x0582
     48e:	99 23       	and	r25, r25
     490:	bc f0       	brlt	.+46     	; 0x4c0 <return_maxUnroll+0x4e>
     492:	01 e0       	ldi	r16, 0x01	; 1
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     49a:	c7 01       	movw	r24, r14
     49c:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     4a0:	ce 5f       	subi	r28, 0xFE	; 254
     4a2:	d8 4f       	sbci	r29, 0xF8	; 248
     4a4:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	void return_maxUnroll(void){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     4a6:	08 94       	sec
     4a8:	e1 1c       	adc	r14, r1
     4aa:	f1 1c       	adc	r15, r1
     4ac:	e8 01       	movw	r28, r16
     4ae:	0f 5f       	subi	r16, 0xFF	; 255
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	80 91 81 05 	lds	r24, 0x0581
     4b6:	90 91 82 05 	lds	r25, 0x0582
     4ba:	8c 17       	cp	r24, r28
     4bc:	9d 07       	cpc	r25, r29
     4be:	6c f7       	brge	.-38     	; 0x49a <return_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("203 MAX_UNROLL: "), ser_writeln(maxUnrollRes);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	97 e0       	ldi	r25, 0x07	; 7
     4cc:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <return_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	void return_minUnroll(void){
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     4ea:	e0 90 77 05 	lds	r14, 0x0577
     4ee:	f0 90 78 05 	lds	r15, 0x0578
     4f2:	80 91 83 05 	lds	r24, 0x0583
     4f6:	90 91 84 05 	lds	r25, 0x0584
     4fa:	99 23       	and	r25, r25
     4fc:	bc f0       	brlt	.+46     	; 0x52c <return_minUnroll+0x4e>
     4fe:	01 e0       	ldi	r16, 0x01	; 1
     500:	10 e0       	ldi	r17, 0x00	; 0
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     506:	c7 01       	movw	r24, r14
     508:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     50c:	ce 5b       	subi	r28, 0xBE	; 190
     50e:	d9 4f       	sbci	r29, 0xF9	; 249
     510:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	void return_minUnroll(void){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     512:	08 94       	sec
     514:	e1 1c       	adc	r14, r1
     516:	f1 1c       	adc	r15, r1
     518:	e8 01       	movw	r28, r16
     51a:	0f 5f       	subi	r16, 0xFF	; 255
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	80 91 83 05 	lds	r24, 0x0583
     522:	90 91 84 05 	lds	r25, 0x0584
     526:	8c 17       	cp	r24, r28
     528:	9d 07       	cpc	r25, r29
     52a:	6c f7       	brge	.-38     	; 0x506 <return_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("203, MIN_UNROLL: "), ser_writeln(minUnrollRes);
     52c:	81 e1       	ldi	r24, 0x11	; 17
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     534:	82 e4       	ldi	r24, 0x42	; 66
     536:	96 e0       	ldi	r25, 0x06	; 6
     538:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
	}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <return_grensLicht>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	void return_grensLicht(void){
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     556:	e0 90 79 05 	lds	r14, 0x0579
     55a:	f0 90 7a 05 	lds	r15, 0x057A
     55e:	80 91 85 05 	lds	r24, 0x0585
     562:	90 91 86 05 	lds	r25, 0x0586
     566:	99 23       	and	r25, r25
     568:	bc f0       	brlt	.+46     	; 0x598 <return_grensLicht+0x4e>
     56a:	01 e0       	ldi	r16, 0x01	; 1
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	c0 e0       	ldi	r28, 0x00	; 0
     570:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     572:	c7 01       	movw	r24, r14
     574:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     578:	cc 52       	subi	r28, 0x2C	; 44
     57a:	d9 4f       	sbci	r29, 0xF9	; 249
     57c:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	void return_grensLicht(void){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     57e:	08 94       	sec
     580:	e1 1c       	adc	r14, r1
     582:	f1 1c       	adc	r15, r1
     584:	e8 01       	movw	r28, r16
     586:	0f 5f       	subi	r16, 0xFF	; 255
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	80 91 85 05 	lds	r24, 0x0585
     58e:	90 91 86 05 	lds	r25, 0x0586
     592:	8c 17       	cp	r24, r28
     594:	9d 07       	cpc	r25, r29
     596:	6c f7       	brge	.-38     	; 0x572 <return_grensLicht+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 licht_TEMP:" ), ser_writeln(grens_lichtintRes);
     598:	83 e2       	ldi	r24, 0x23	; 35
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     5a0:	84 ed       	ldi	r24, 0xD4	; 212
     5a2:	96 e0       	ldi	r25, 0x06	; 6
     5a4:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
	}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	08 95       	ret

000005b6 <return_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	void return_grensTemp(void){
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5c6:	e0 90 7b 05 	lds	r14, 0x057B
     5ca:	f0 90 7c 05 	lds	r15, 0x057C
     5ce:	80 91 87 05 	lds	r24, 0x0587
     5d2:	90 91 88 05 	lds	r25, 0x0588
     5d6:	99 23       	and	r25, r25
     5d8:	ec f0       	brlt	.+58     	; 0x614 <return_grensTemp+0x5e>
     5da:	01 e0       	ldi	r16, 0x01	; 1
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	c0 e0       	ldi	r28, 0x00	; 0
     5e0:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     5e2:	0f 2e       	mov	r0, r31
     5e4:	fd e7       	ldi	r31, 0x7D	; 125
     5e6:	cf 2e       	mov	r12, r31
     5e8:	f6 e0       	ldi	r31, 0x06	; 6
     5ea:	df 2e       	mov	r13, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	c7 01       	movw	r24, r14
     5f0:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     5f4:	cc 0d       	add	r28, r12
     5f6:	dd 1d       	adc	r29, r13
     5f8:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	void return_grensTemp(void){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5fa:	08 94       	sec
     5fc:	e1 1c       	adc	r14, r1
     5fe:	f1 1c       	adc	r15, r1
     600:	e8 01       	movw	r28, r16
     602:	0f 5f       	subi	r16, 0xFF	; 255
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	80 91 87 05 	lds	r24, 0x0587
     60a:	90 91 88 05 	lds	r25, 0x0588
     60e:	8c 17       	cp	r24, r28
     610:	9d 07       	cpc	r25, r29
     612:	6c f7       	brge	.-38     	; 0x5ee <return_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
     614:	83 e3       	ldi	r24, 0x33	; 51
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     61c:	8d e7       	ldi	r24, 0x7D	; 125
     61e:	96 e0       	ldi	r25, 0x06	; 6
     620:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
	}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <return_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	void return_Versie(void){
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     646:	e0 90 7d 05 	lds	r14, 0x057D
     64a:	f0 90 7e 05 	lds	r15, 0x057E
     64e:	80 91 89 05 	lds	r24, 0x0589
     652:	90 91 8a 05 	lds	r25, 0x058A
     656:	99 23       	and	r25, r25
     658:	ec f0       	brlt	.+58     	; 0x694 <return_Versie+0x5e>
     65a:	01 e0       	ldi	r16, 0x01	; 1
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     662:	0f 2e       	mov	r0, r31
     664:	fc ec       	ldi	r31, 0xCC	; 204
     666:	cf 2e       	mov	r12, r31
     668:	f6 e0       	ldi	r31, 0x06	; 6
     66a:	df 2e       	mov	r13, r31
     66c:	f0 2d       	mov	r31, r0
     66e:	c7 01       	movw	r24, r14
     670:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     674:	cc 0d       	add	r28, r12
     676:	dd 1d       	adc	r29, r13
     678:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	void return_Versie(void){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     67a:	08 94       	sec
     67c:	e1 1c       	adc	r14, r1
     67e:	f1 1c       	adc	r15, r1
     680:	e8 01       	movw	r28, r16
     682:	0f 5f       	subi	r16, 0xFF	; 255
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	80 91 89 05 	lds	r24, 0x0589
     68a:	90 91 8a 05 	lds	r25, 0x058A
     68e:	8c 17       	cp	r24, r28
     690:	9d 07       	cpc	r25, r29
     692:	6c f7       	brge	.-38     	; 0x66e <return_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 versie: "), ser_writeln(versieRes);
     694:	83 e4       	ldi	r24, 0x43	; 67
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     69c:	8c ec       	ldi	r24, 0xCC	; 204
     69e:	96 e0       	ldi	r25, 0x06	; 6
     6a0:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
	}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	08 95       	ret

000006b6 <return_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	void return_Locatie(){
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6c6:	e0 90 7f 05 	lds	r14, 0x057F
     6ca:	f0 90 80 05 	lds	r15, 0x0580
     6ce:	80 91 8b 05 	lds	r24, 0x058B
     6d2:	90 91 8c 05 	lds	r25, 0x058C
     6d6:	99 23       	and	r25, r25
     6d8:	ec f0       	brlt	.+58     	; 0x714 <return_Locatie+0x5e>
     6da:	01 e0       	ldi	r16, 0x01	; 1
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	c0 e0       	ldi	r28, 0x00	; 0
     6e0:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     6e2:	0f 2e       	mov	r0, r31
     6e4:	f1 e5       	ldi	r31, 0x51	; 81
     6e6:	cf 2e       	mov	r12, r31
     6e8:	f6 e0       	ldi	r31, 0x06	; 6
     6ea:	df 2e       	mov	r13, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	c7 01       	movw	r24, r14
     6f0:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     6f4:	cc 0d       	add	r28, r12
     6f6:	dd 1d       	adc	r29, r13
     6f8:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	void return_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6fa:	08 94       	sec
     6fc:	e1 1c       	adc	r14, r1
     6fe:	f1 1c       	adc	r15, r1
     700:	e8 01       	movw	r28, r16
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
     706:	80 91 8b 05 	lds	r24, 0x058B
     70a:	90 91 8c 05 	lds	r25, 0x058C
     70e:	8c 17       	cp	r24, r28
     710:	9d 07       	cpc	r25, r29
     712:	6c f7       	brge	.-38     	; 0x6ee <return_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 "), ser_writeln(locatieRes);
     714:	80 e5       	ldi	r24, 0x50	; 80
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     71c:	81 e5       	ldi	r24, 0x51	; 81
     71e:	96 e0       	ldi	r25, 0x06	; 6
     720:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
	}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	08 95       	ret

00000736 <return_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	void return_Naam(){
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     73e:	c0 91 16 06 	lds	r28, 0x0616
     742:	d0 91 17 06 	lds	r29, 0x0617
     746:	80 91 8d 05 	lds	r24, 0x058D
     74a:	90 91 8e 05 	lds	r25, 0x058E
     74e:	8c 17       	cp	r24, r28
     750:	9d 07       	cpc	r25, r29
     752:	8c f0       	brlt	.+34     	; 0x776 <return_Naam+0x40>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	void return_Naam(){
     754:	8e 01       	movw	r16, r28
     756:	00 58       	subi	r16, 0x80	; 128
     758:	19 4f       	sbci	r17, 0xF9	; 249
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 0d 10 	call	0x201a	; 0x201a <__eerd_byte_m328p>
     760:	f8 01       	movw	r30, r16
     762:	81 93       	st	Z+, r24
     764:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	void return_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     766:	21 96       	adiw	r28, 0x01	; 1
     768:	80 91 8d 05 	lds	r24, 0x058D
     76c:	90 91 8e 05 	lds	r25, 0x058E
     770:	8c 17       	cp	r24, r28
     772:	9d 07       	cpc	r25, r29
     774:	94 f7       	brge	.-28     	; 0x75a <return_Naam+0x24>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 "),  ser_writeln(naamRes);
     776:	80 e5       	ldi	r24, 0x50	; 80
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
     77e:	80 e8       	ldi	r24, 0x80	; 128
     780:	96 e0       	ldi	r25, 0x06	; 6
     782:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
	}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <set_maxUnroll>:
		}
		ser_write("203, MIN_UNROLL: "), ser_writeln(minUnrollRes);
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     79a:	c0 91 75 05 	lds	r28, 0x0575
     79e:	d0 91 76 05 	lds	r29, 0x0576
     7a2:	80 91 81 05 	lds	r24, 0x0581
     7a6:	90 91 82 05 	lds	r25, 0x0582
     7aa:	99 23       	and	r25, r25
     7ac:	cc f0       	brlt	.+50     	; 0x7e0 <set_maxUnroll+0x50>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     7b2:	f8 01       	movw	r30, r16
     7b4:	e8 0f       	add	r30, r24
     7b6:	f9 1f       	adc	r31, r25
     7b8:	ce 01       	movw	r24, r28
     7ba:	60 81       	ld	r22, Z
     7bc:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
		ser_write("203, MIN_UNROLL: "), ser_writeln(minUnrollRes);
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     7c0:	21 96       	adiw	r28, 0x01	; 1
     7c2:	80 91 75 05 	lds	r24, 0x0575
     7c6:	90 91 76 05 	lds	r25, 0x0576
     7ca:	9e 01       	movw	r18, r28
     7cc:	28 1b       	sub	r18, r24
     7ce:	39 0b       	sbc	r19, r25
     7d0:	c9 01       	movw	r24, r18
     7d2:	20 91 81 05 	lds	r18, 0x0581
     7d6:	30 91 82 05 	lds	r19, 0x0582
     7da:	28 17       	cp	r18, r24
     7dc:	39 07       	cpc	r19, r25
     7de:	4c f7       	brge	.-46     	; 0x7b2 <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <set_minUnroll>:
		}
		ser_write("202 licht_TEMP:" ), ser_writeln(grens_lichtintRes);
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     7f4:	c0 91 77 05 	lds	r28, 0x0577
     7f8:	d0 91 78 05 	lds	r29, 0x0578
     7fc:	80 91 83 05 	lds	r24, 0x0583
     800:	90 91 84 05 	lds	r25, 0x0584
     804:	99 23       	and	r25, r25
     806:	cc f0       	brlt	.+50     	; 0x83a <set_minUnroll+0x50>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     80c:	f8 01       	movw	r30, r16
     80e:	e8 0f       	add	r30, r24
     810:	f9 1f       	adc	r31, r25
     812:	ce 01       	movw	r24, r28
     814:	60 81       	ld	r22, Z
     816:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
		ser_write("202 licht_TEMP:" ), ser_writeln(grens_lichtintRes);
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	80 91 77 05 	lds	r24, 0x0577
     820:	90 91 78 05 	lds	r25, 0x0578
     824:	9e 01       	movw	r18, r28
     826:	28 1b       	sub	r18, r24
     828:	39 0b       	sbc	r19, r25
     82a:	c9 01       	movw	r24, r18
     82c:	20 91 83 05 	lds	r18, 0x0583
     830:	30 91 84 05 	lds	r19, 0x0584
     834:	28 17       	cp	r18, r24
     836:	39 07       	cpc	r19, r25
     838:	4c f7       	brge	.-46     	; 0x80c <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <set_grensLicht>:
		}
		ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84e:	c0 91 79 05 	lds	r28, 0x0579
     852:	d0 91 7a 05 	lds	r29, 0x057A
     856:	80 91 85 05 	lds	r24, 0x0585
     85a:	90 91 86 05 	lds	r25, 0x0586
     85e:	99 23       	and	r25, r25
     860:	cc f0       	brlt	.+50     	; 0x894 <set_grensLicht+0x50>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     866:	f8 01       	movw	r30, r16
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	ce 01       	movw	r24, r28
     86e:	60 81       	ld	r22, Z
     870:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
		ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     874:	21 96       	adiw	r28, 0x01	; 1
     876:	80 91 79 05 	lds	r24, 0x0579
     87a:	90 91 7a 05 	lds	r25, 0x057A
     87e:	9e 01       	movw	r18, r28
     880:	28 1b       	sub	r18, r24
     882:	39 0b       	sbc	r19, r25
     884:	c9 01       	movw	r24, r18
     886:	20 91 85 05 	lds	r18, 0x0585
     88a:	30 91 86 05 	lds	r19, 0x0586
     88e:	28 17       	cp	r18, r24
     890:	39 07       	cpc	r19, r25
     892:	4c f7       	brge	.-46     	; 0x866 <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <set_grensTemp>:
		}
		ser_write("202 versie: "), ser_writeln(versieRes);
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8a8:	c0 91 7b 05 	lds	r28, 0x057B
     8ac:	d0 91 7c 05 	lds	r29, 0x057C
     8b0:	80 91 87 05 	lds	r24, 0x0587
     8b4:	90 91 88 05 	lds	r25, 0x0588
     8b8:	99 23       	and	r25, r25
     8ba:	cc f0       	brlt	.+50     	; 0x8ee <set_grensTemp+0x50>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     8c0:	f8 01       	movw	r30, r16
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	ce 01       	movw	r24, r28
     8c8:	60 81       	ld	r22, Z
     8ca:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
		ser_write("202 versie: "), ser_writeln(versieRes);
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8ce:	21 96       	adiw	r28, 0x01	; 1
     8d0:	80 91 7b 05 	lds	r24, 0x057B
     8d4:	90 91 7c 05 	lds	r25, 0x057C
     8d8:	9e 01       	movw	r18, r28
     8da:	28 1b       	sub	r18, r24
     8dc:	39 0b       	sbc	r19, r25
     8de:	c9 01       	movw	r24, r18
     8e0:	20 91 87 05 	lds	r18, 0x0587
     8e4:	30 91 88 05 	lds	r19, 0x0588
     8e8:	28 17       	cp	r18, r24
     8ea:	39 07       	cpc	r19, r25
     8ec:	4c f7       	brge	.-46     	; 0x8c0 <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <set_Versie>:
		}
		ser_write("202 "), ser_writeln(locatieRes);
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     902:	c0 91 7d 05 	lds	r28, 0x057D
     906:	d0 91 7e 05 	lds	r29, 0x057E
     90a:	80 91 89 05 	lds	r24, 0x0589
     90e:	90 91 8a 05 	lds	r25, 0x058A
     912:	99 23       	and	r25, r25
     914:	cc f0       	brlt	.+50     	; 0x948 <__stack+0x49>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     91a:	f8 01       	movw	r30, r16
     91c:	e8 0f       	add	r30, r24
     91e:	f9 1f       	adc	r31, r25
     920:	ce 01       	movw	r24, r28
     922:	60 81       	ld	r22, Z
     924:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
		ser_write("202 "), ser_writeln(locatieRes);
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	80 91 7d 05 	lds	r24, 0x057D
     92e:	90 91 7e 05 	lds	r25, 0x057E
     932:	9e 01       	movw	r18, r28
     934:	28 1b       	sub	r18, r24
     936:	39 0b       	sbc	r19, r25
     938:	c9 01       	movw	r24, r18
     93a:	20 91 89 05 	lds	r18, 0x0589
     93e:	30 91 8a 05 	lds	r19, 0x058A
     942:	28 17       	cp	r18, r24
     944:	39 07       	cpc	r19, r25
     946:	4c f7       	brge	.-46     	; 0x91a <__stack+0x1b>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <set_Locatie>:
		}
		ser_write("202 "),  ser_writeln(naamRes);
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     95c:	c0 91 7f 05 	lds	r28, 0x057F
     960:	d0 91 80 05 	lds	r29, 0x0580
     964:	80 91 8b 05 	lds	r24, 0x058B
     968:	90 91 8c 05 	lds	r25, 0x058C
     96c:	99 23       	and	r25, r25
     96e:	cc f0       	brlt	.+50     	; 0x9a2 <set_Locatie+0x50>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     974:	f8 01       	movw	r30, r16
     976:	e8 0f       	add	r30, r24
     978:	f9 1f       	adc	r31, r25
     97a:	ce 01       	movw	r24, r28
     97c:	60 81       	ld	r22, Z
     97e:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
		ser_write("202 "),  ser_writeln(naamRes);
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     982:	21 96       	adiw	r28, 0x01	; 1
     984:	80 91 7f 05 	lds	r24, 0x057F
     988:	90 91 80 05 	lds	r25, 0x0580
     98c:	9e 01       	movw	r18, r28
     98e:	28 1b       	sub	r18, r24
     990:	39 0b       	sbc	r19, r25
     992:	c9 01       	movw	r24, r18
     994:	20 91 8b 05 	lds	r18, 0x058B
     998:	30 91 8c 05 	lds	r19, 0x058C
     99c:	28 17       	cp	r18, r24
     99e:	39 07       	cpc	r19, r25
     9a0:	4c f7       	brge	.-46     	; 0x974 <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <set_Naam>:
			char * p1 = strstr (in_buf, "(");
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
	//Zetten van naam.
	void set_Naam(char* n){
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     9b4:	c0 91 16 06 	lds	r28, 0x0616
     9b8:	d0 91 17 06 	lds	r29, 0x0617
     9bc:	20 91 8d 05 	lds	r18, 0x058D
     9c0:	30 91 8e 05 	lds	r19, 0x058E
     9c4:	2c 17       	cp	r18, r28
     9c6:	3d 07       	cpc	r19, r29
     9c8:	8c f0       	brlt	.+34     	; 0x9ec <set_Naam+0x40>
			char * p1 = strstr (in_buf, "(");
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
	//Zetten van naam.
	void set_Naam(char* n){
     9ca:	8c 01       	movw	r16, r24
     9cc:	0c 0f       	add	r16, r28
     9ce:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     9d0:	f8 01       	movw	r30, r16
     9d2:	61 91       	ld	r22, Z+
     9d4:	8f 01       	movw	r16, r30
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 15 10 	call	0x202a	; 0x202a <__eeupd_byte_m328p>
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     9dc:	21 96       	adiw	r28, 0x01	; 1
     9de:	80 91 8d 05 	lds	r24, 0x058D
     9e2:	90 91 8e 05 	lds	r25, 0x058E
     9e6:	8c 17       	cp	r24, r28
     9e8:	9d 07       	cpc	r25, r29
     9ea:	94 f7       	brge	.-28     	; 0x9d0 <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <set_substring>:
			
			
	//________________________________________________________________________________________//
	
	 void set_substring(){
			char * p1 = strstr (in_buf, "(");
     9f6:	8e ea       	ldi	r24, 0xAE	; 174
     9f8:	96 e0       	ldi	r25, 0x06	; 6
     9fa:	68 e2       	ldi	r22, 0x28	; 40
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <strchr>
			p1[strlen(p1) -1] = '\0';
     a02:	e8 2f       	mov	r30, r24
     a04:	f9 2f       	mov	r31, r25
     a06:	df 01       	movw	r26, r30
     a08:	0d 90       	ld	r0, X+
     a0a:	00 20       	and	r0, r0
     a0c:	e9 f7       	brne	.-6      	; 0xa08 <set_substring+0x12>
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	ae 1b       	sub	r26, r30
     a12:	bf 0b       	sbc	r27, r31
     a14:	a8 0f       	add	r26, r24
     a16:	b9 1f       	adc	r27, r25
     a18:	11 97       	sbiw	r26, 0x01	; 1
     a1a:	1c 92       	st	X, r1
			substring = p1 +1;
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 ad 06 	sts	0x06AD, r25
     a22:	80 93 ac 06 	sts	0x06AC, r24
		}
     a26:	08 95       	ret

00000a28 <get_grens_light>:
double max_unroll= 20;
double min_unroll= 4;

uint8_t get_grens_light(){
	return grens_light;
}	
     a28:	80 91 70 05 	lds	r24, 0x0570
     a2c:	08 95       	ret

00000a2e <get_grens_temp>:

double get_grens_temp(){
	return grens_temp;
}
     a2e:	50 91 71 05 	lds	r21, 0x0571
     a32:	40 91 72 05 	lds	r20, 0x0572
     a36:	30 91 73 05 	lds	r19, 0x0573
     a3a:	20 91 74 05 	lds	r18, 0x0574
     a3e:	85 2f       	mov	r24, r21
     a40:	94 2f       	mov	r25, r20
     a42:	a3 2f       	mov	r26, r19
     a44:	b2 2f       	mov	r27, r18
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	08 95       	ret

00000a4c <get_max_unroll>:

double get_max_unroll(){
	return max_unroll;
}
     a4c:	50 91 6c 05 	lds	r21, 0x056C
     a50:	40 91 6d 05 	lds	r20, 0x056D
     a54:	30 91 6e 05 	lds	r19, 0x056E
     a58:	20 91 6f 05 	lds	r18, 0x056F
     a5c:	85 2f       	mov	r24, r21
     a5e:	94 2f       	mov	r25, r20
     a60:	a3 2f       	mov	r26, r19
     a62:	b2 2f       	mov	r27, r18
     a64:	bc 01       	movw	r22, r24
     a66:	cd 01       	movw	r24, r26
     a68:	08 95       	ret

00000a6a <get_min_unroll>:
double get_min_unroll(){
	return min_unroll;
}
     a6a:	50 91 68 05 	lds	r21, 0x0568
     a6e:	40 91 69 05 	lds	r20, 0x0569
     a72:	30 91 6a 05 	lds	r19, 0x056A
     a76:	20 91 6b 05 	lds	r18, 0x056B
     a7a:	85 2f       	mov	r24, r21
     a7c:	94 2f       	mov	r25, r20
     a7e:	a3 2f       	mov	r26, r19
     a80:	b2 2f       	mov	r27, r18
     a82:	bc 01       	movw	r22, r24
     a84:	cd 01       	movw	r24, r26
     a86:	08 95       	ret

00000a88 <protocolCom>:
//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     a88:	05 e5       	ldi	r16, 0x55	; 85
     a8a:	11 e0       	ldi	r17, 0x01	; 1
		ser_readln(in_buf, sizeof(in_buf), 1);
     a8c:	ce ea       	ldi	r28, 0xAE	; 174
     a8e:	d6 e0       	ldi	r29, 0x06	; 6
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     a90:	0f 2e       	mov	r0, r31
     a92:	fe e6       	ldi	r31, 0x6E	; 110
     a94:	ef 2e       	mov	r14, r31
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	ff 2e       	mov	r15, r31
     a9a:	f0 2d       	mov	r31, r0
				} if((getOut() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     a9c:	0f 2e       	mov	r0, r31
     a9e:	f6 e9       	ldi	r31, 0x96	; 150
     aa0:	af 2e       	mov	r10, r31
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	bf 2e       	mov	r11, r31
     aa6:	f0 2d       	mov	r31, r0
				if ((getIn() % 2) == 0){
					ser_writeln("999 Zonnescherm is al opgerold!");
     aa8:	0f 2e       	mov	r0, r31
     aaa:	fd e9       	ldi	r31, 0x9D	; 157
     aac:	2f 2e       	mov	r2, r31
     aae:	f1 e0       	ldi	r31, 0x01	; 1
     ab0:	3f 2e       	mov	r3, r31
     ab2:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fd eb       	ldi	r31, 0xBD	; 189
     ab8:	cf 2e       	mov	r12, r31
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	df 2e       	mov	r13, r31
     abe:	f0 2d       	mov	r31, r0

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f4 ec       	ldi	r31, 0xC4	; 196
     ac4:	8f 2e       	mov	r8, r31
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	9f 2e       	mov	r9, r31
     aca:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     acc:	0f 2e       	mov	r0, r31
     ace:	f0 ee       	ldi	r31, 0xE0	; 224
     ad0:	6f 2e       	mov	r6, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	7f 2e       	mov	r7, r31
     ad6:	f0 2d       	mov	r31, r0
				return_grensTemp();
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff ee       	ldi	r31, 0xEF	; 239
     adc:	4f 2e       	mov	r4, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	5f 2e       	mov	r5, r31
     ae2:	f0 2d       	mov	r31, r0
	return min_unroll;
}
//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     ae4:	c8 01       	movw	r24, r16
     ae6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
		ser_readln(in_buf, sizeof(in_buf), 1);
     aea:	ce 01       	movw	r24, r28
     aec:	6e e1       	ldi	r22, 0x1E	; 30
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	0e 94 73 07 	call	0xee6	; 0xee6 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     af6:	c7 01       	movw	r24, r14
     af8:	be 01       	movw	r22, r28
     afa:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     afe:	28 2f       	mov	r18, r24
     b00:	39 2f       	mov	r19, r25
     b02:	21 15       	cp	r18, r1
     b04:	31 05       	cpc	r19, r1
     b06:	a1 f4       	brne	.+40     	; 0xb30 <protocolCom+0xa8>
				if ((getOut() % 2) == 1){
     b08:	0e 94 b2 07 	call	0xf64	; 0xf64 <getOut>
     b0c:	62 e0       	ldi	r22, 0x02	; 2
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__divmodhi4>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	91 05       	cpc	r25, r1
     b18:	21 f4       	brne	.+8      	; 0xb22 <protocolCom+0x9a>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     b1a:	85 e7       	ldi	r24, 0x75	; 117
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
				} if((getOut() % 2) == 0){
     b22:	0e 94 b2 07 	call	0xf64	; 0xf64 <getOut>
     b26:	80 fd       	sbrc	r24, 0
     b28:	1e c0       	rjmp	.+60     	; 0xb66 <protocolCom+0xde>
					uitrollen();
     b2a:	0e 94 c3 07 	call	0xf86	; 0xf86 <uitrollen>
     b2e:	1b c0       	rjmp	.+54     	; 0xb66 <protocolCom+0xde>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b30:	c5 01       	movw	r24, r10
     b32:	be 01       	movw	r22, r28
     b34:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     b38:	28 2f       	mov	r18, r24
     b3a:	39 2f       	mov	r19, r25
     b3c:	21 15       	cp	r18, r1
     b3e:	31 05       	cpc	r19, r1
     b40:	91 f4       	brne	.+36     	; 0xb66 <protocolCom+0xde>
				if ((getIn() % 2) == 0){
     b42:	0e 94 ad 07 	call	0xf5a	; 0xf5a <getIn>
     b46:	80 fd       	sbrc	r24, 0
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <protocolCom+0xc8>
					ser_writeln("999 Zonnescherm is al opgerold!");
     b4a:	c1 01       	movw	r24, r2
     b4c:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
				} if((getIn() % 2) == 1){
     b50:	0e 94 ad 07 	call	0xf5a	; 0xf5a <getIn>
     b54:	62 e0       	ldi	r22, 0x02	; 2
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__divmodhi4>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <protocolCom+0xde>
					oprollen();
     b62:	0e 94 3b 08 	call	0x1076	; 0x1076 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b66:	c6 01       	movw	r24, r12
     b68:	be 01       	movw	r22, r28
     b6a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     b6e:	28 2f       	mov	r18, r24
     b70:	39 2f       	mov	r19, r25
     b72:	21 15       	cp	r18, r1
     b74:	31 05       	cpc	r19, r1
     b76:	09 f4       	brne	.+2      	; 0xb7a <protocolCom+0xf2>
     b78:	b5 cf       	rjmp	.-150    	; 0xae4 <protocolCom+0x5c>

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     b7a:	c4 01       	movw	r24, r8
     b7c:	be 01       	movw	r22, r28
     b7e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     b82:	28 2f       	mov	r18, r24
     b84:	39 2f       	mov	r19, r25
     b86:	21 15       	cp	r18, r1
     b88:	31 05       	cpc	r19, r1
     b8a:	e1 f4       	brne	.+56     	; 0xbc4 <protocolCom+0x13c>
				printf("202 TEMP= % 6.2f \n", getTemp());
     b8c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <getTemp>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	00 d0       	rcall	.+0      	; 0xb96 <protocolCom+0x10e>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <protocolCom+0x110>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <protocolCom+0x112>
     b9a:	2d ec       	ldi	r18, 0xCD	; 205
     b9c:	31 e0       	ldi	r19, 0x01	; 1
     b9e:	ed b7       	in	r30, 0x3d	; 61
     ba0:	fe b7       	in	r31, 0x3e	; 62
     ba2:	32 83       	std	Z+2, r19	; 0x02
     ba4:	21 83       	std	Z+1, r18	; 0x01
     ba6:	83 83       	std	Z+3, r24	; 0x03
     ba8:	94 83       	std	Z+4, r25	; 0x04
     baa:	a5 83       	std	Z+5, r26	; 0x05
     bac:	b6 83       	std	Z+6, r27	; 0x06
     bae:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     bb2:	8d b7       	in	r24, 0x3d	; 61
     bb4:	9e b7       	in	r25, 0x3e	; 62
     bb6:	06 96       	adiw	r24, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	9e bf       	out	0x3e, r25	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	8d bf       	out	0x3d, r24	; 61
     bc2:	90 cf       	rjmp	.-224    	; 0xae4 <protocolCom+0x5c>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     bc4:	c3 01       	movw	r24, r6
     bc6:	be 01       	movw	r22, r28
     bc8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     bcc:	28 2f       	mov	r18, r24
     bce:	39 2f       	mov	r19, r25
     bd0:	21 15       	cp	r18, r1
     bd2:	31 05       	cpc	r19, r1
     bd4:	19 f4       	brne	.+6      	; 0xbdc <protocolCom+0x154>
				return_grensTemp();
     bd6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <return_grensTemp>
     bda:	84 cf       	rjmp	.-248    	; 0xae4 <protocolCom+0x5c>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     bdc:	c2 01       	movw	r24, r4
     bde:	be 01       	movw	r22, r28
     be0:	4e e0       	ldi	r20, 0x0E	; 14
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     be8:	28 2f       	mov	r18, r24
     bea:	39 2f       	mov	r19, r25
     bec:	21 15       	cp	r18, r1
     bee:	31 05       	cpc	r19, r1
     bf0:	49 f4       	brne	.+18     	; 0xc04 <protocolCom+0x17c>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				set_substring();
     bf2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
				set_grensTemp(substring);
     bf6:	80 91 ac 06 	lds	r24, 0x06AC
     bfa:	90 91 ad 06 	lds	r25, 0x06AD
     bfe:	0e 94 4f 04 	call	0x89e	; 0x89e <set_grensTemp>
     c02:	70 cf       	rjmp	.-288    	; 0xae4 <protocolCom+0x5c>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	be 01       	movw	r22, r28
     c0a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     c0e:	28 2f       	mov	r18, r24
     c10:	39 2f       	mov	r19, r25
     c12:	21 15       	cp	r18, r1
     c14:	31 05       	cpc	r19, r1
     c16:	c1 f4       	brne	.+48     	; 0xc48 <protocolCom+0x1c0>
				printf("202 LIGHT %i \n", getLight());
     c18:	0e 94 99 01 	call	0x332	; 0x332 <getLight>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <protocolCom+0x196>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <protocolCom+0x198>
     c20:	ed b7       	in	r30, 0x3d	; 61
     c22:	fe b7       	in	r31, 0x3e	; 62
     c24:	31 96       	adiw	r30, 0x01	; 1
     c26:	2b e0       	ldi	r18, 0x0B	; 11
     c28:	32 e0       	ldi	r19, 0x02	; 2
     c2a:	ad b7       	in	r26, 0x3d	; 61
     c2c:	be b7       	in	r27, 0x3e	; 62
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	3c 93       	st	X, r19
     c32:	2e 93       	st	-X, r18
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 83       	std	Z+2, r24	; 0x02
     c38:	13 82       	std	Z+3, r1	; 0x03
     c3a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	4e cf       	rjmp	.-356    	; 0xae4 <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     c48:	8a e1       	ldi	r24, 0x1A	; 26
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	be 01       	movw	r22, r28
     c4e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     c52:	28 2f       	mov	r18, r24
     c54:	39 2f       	mov	r19, r25
     c56:	21 15       	cp	r18, r1
     c58:	31 05       	cpc	r19, r1
     c5a:	19 f4       	brne	.+6      	; 0xc62 <protocolCom+0x1da>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				return_grensLicht();
     c5c:	0e 94 a5 02 	call	0x54a	; 0x54a <return_grensLicht>
     c60:	41 cf       	rjmp	.-382    	; 0xae4 <protocolCom+0x5c>
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     c62:	8a e2       	ldi	r24, 0x2A	; 42
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	be 01       	movw	r22, r28
     c68:	4f e0       	ldi	r20, 0x0F	; 15
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     c70:	28 2f       	mov	r18, r24
     c72:	39 2f       	mov	r19, r25
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	49 f4       	brne	.+18     	; 0xc8c <protocolCom+0x204>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				set_substring();
     c7a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
				set_grensLicht(substring);
     c7e:	80 91 ac 06 	lds	r24, 0x06AC
     c82:	90 91 ad 06 	lds	r25, 0x06AD
     c86:	0e 94 22 04 	call	0x844	; 0x844 <set_grensLicht>
     c8a:	2c cf       	rjmp	.-424    	; 0xae4 <protocolCom+0x5c>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     c8c:	8d e3       	ldi	r24, 0x3D	; 61
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	be 01       	movw	r22, r28
     c92:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     c96:	28 2f       	mov	r18, r24
     c98:	39 2f       	mov	r19, r25
     c9a:	21 15       	cp	r18, r1
     c9c:	31 05       	cpc	r19, r1
     c9e:	19 f4       	brne	.+6      	; 0xca6 <protocolCom+0x21e>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				return_maxUnroll();
     ca0:	0e 94 39 02 	call	0x472	; 0x472 <return_maxUnroll>
     ca4:	1f cf       	rjmp	.-450    	; 0xae4 <protocolCom+0x5c>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     ca6:	8c e4       	ldi	r24, 0x4C	; 76
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	be 01       	movw	r22, r28
     cac:	4f e0       	ldi	r20, 0x0F	; 15
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     cb4:	28 2f       	mov	r18, r24
     cb6:	39 2f       	mov	r19, r25
     cb8:	21 15       	cp	r18, r1
     cba:	31 05       	cpc	r19, r1
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <protocolCom+0x248>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				set_substring();
     cbe:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
				set_maxUnroll(substring);
     cc2:	80 91 ac 06 	lds	r24, 0x06AC
     cc6:	90 91 ad 06 	lds	r25, 0x06AD
     cca:	0e 94 c8 03 	call	0x790	; 0x790 <set_maxUnroll>
     cce:	0a cf       	rjmp	.-492    	; 0xae4 <protocolCom+0x5c>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     cd0:	8e e5       	ldi	r24, 0x5E	; 94
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	be 01       	movw	r22, r28
     cd6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     cda:	28 2f       	mov	r18, r24
     cdc:	39 2f       	mov	r19, r25
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	19 f4       	brne	.+6      	; 0xcea <protocolCom+0x262>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				return_minUnroll();
     ce4:	0e 94 6f 02 	call	0x4de	; 0x4de <return_minUnroll>
     ce8:	fd ce       	rjmp	.-518    	; 0xae4 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     cea:	8d e6       	ldi	r24, 0x6D	; 109
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	be 01       	movw	r22, r28
     cf0:	4f e0       	ldi	r20, 0x0F	; 15
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     cf8:	28 2f       	mov	r18, r24
     cfa:	39 2f       	mov	r19, r25
     cfc:	21 15       	cp	r18, r1
     cfe:	31 05       	cpc	r19, r1
     d00:	49 f4       	brne	.+18     	; 0xd14 <protocolCom+0x28c>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				set_substring();
     d02:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
				set_minUnroll(substring);
     d06:	80 91 ac 06 	lds	r24, 0x06AC
     d0a:	90 91 ad 06 	lds	r25, 0x06AD
     d0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_minUnroll>
     d12:	e8 ce       	rjmp	.-560    	; 0xae4 <protocolCom+0x5c>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     d14:	8f e7       	ldi	r24, 0x7F	; 127
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	be 01       	movw	r22, r28
     d1a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     d1e:	28 2f       	mov	r18, r24
     d20:	39 2f       	mov	r19, r25
     d22:	21 15       	cp	r18, r1
     d24:	31 05       	cpc	r19, r1
     d26:	19 f4       	brne	.+6      	; 0xd2e <protocolCom+0x2a6>
				return_Naam();
     d28:	0e 94 9b 03 	call	0x736	; 0x736 <return_Naam>
     d2c:	db ce       	rjmp	.-586    	; 0xae4 <protocolCom+0x5c>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     d2e:	88 e8       	ldi	r24, 0x88	; 136
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	be 01       	movw	r22, r28
     d34:	48 e0       	ldi	r20, 0x08	; 8
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     d3c:	28 2f       	mov	r18, r24
     d3e:	39 2f       	mov	r19, r25
     d40:	21 15       	cp	r18, r1
     d42:	31 05       	cpc	r19, r1
     d44:	69 f4       	brne	.+26     	; 0xd60 <protocolCom+0x2d8>
				set_substring();
     d46:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
				set_Naam(substring);
     d4a:	80 91 ac 06 	lds	r24, 0x06AC
     d4e:	90 91 ad 06 	lds	r25, 0x06AD
     d52:	0e 94 d6 04 	call	0x9ac	; 0x9ac <set_Naam>
				printf("200 OK \n");
     d56:	84 e9       	ldi	r24, 0x94	; 148
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <puts>
     d5e:	c2 ce       	rjmp	.-636    	; 0xae4 <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     d60:	8c e9       	ldi	r24, 0x9C	; 156
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	be 01       	movw	r22, r28
     d66:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     d6a:	28 2f       	mov	r18, r24
     d6c:	39 2f       	mov	r19, r25
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	19 f4       	brne	.+6      	; 0xd7a <protocolCom+0x2f2>
				//printf("202 NAME %s", locatieRes);
				return_Locatie();
     d74:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <return_Locatie>
     d78:	b5 ce       	rjmp	.-662    	; 0xae4 <protocolCom+0x5c>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     d7a:	89 ea       	ldi	r24, 0xA9	; 169
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	be 01       	movw	r22, r28
     d80:	4c e0       	ldi	r20, 0x0C	; 12
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     d88:	28 2f       	mov	r18, r24
     d8a:	39 2f       	mov	r19, r25
     d8c:	21 15       	cp	r18, r1
     d8e:	31 05       	cpc	r19, r1
     d90:	69 f4       	brne	.+26     	; 0xdac <protocolCom+0x324>
				set_substring();
     d92:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
				set_Locatie(substring);
     d96:	80 91 ac 06 	lds	r24, 0x06AC
     d9a:	90 91 ad 06 	lds	r25, 0x06AD
     d9e:	0e 94 a9 04 	call	0x952	; 0x952 <set_Locatie>
				
				printf("200 OK \n");
     da2:	84 e9       	ldi	r24, 0x94	; 148
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <puts>
     daa:	9c ce       	rjmp	.-712    	; 0xae4 <protocolCom+0x5c>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     dac:	89 eb       	ldi	r24, 0xB9	; 185
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	be 01       	movw	r22, r28
     db2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     db6:	28 2f       	mov	r18, r24
     db8:	39 2f       	mov	r19, r25
     dba:	21 15       	cp	r18, r1
     dbc:	31 05       	cpc	r19, r1
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <protocolCom+0x33e>
					//printf("202 NAME %s", versieRes);
					return_Versie();
     dc0:	0e 94 1b 03 	call	0x636	; 0x636 <return_Versie>
     dc4:	8f ce       	rjmp	.-738    	; 0xae4 <protocolCom+0x5c>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     dc6:	85 ec       	ldi	r24, 0xC5	; 197
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	be 01       	movw	r22, r28
     dcc:	4c e0       	ldi	r20, 0x0C	; 12
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <strncmp>
     dd4:	28 2f       	mov	r18, r24
     dd6:	39 2f       	mov	r19, r25
     dd8:	21 15       	cp	r18, r1
     dda:	31 05       	cpc	r19, r1
     ddc:	69 f4       	brne	.+26     	; 0xdf8 <protocolCom+0x370>
					set_substring();
     dde:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <set_substring>
					set_Versie(substring);
     de2:	80 91 ac 06 	lds	r24, 0x06AC
     de6:	90 91 ad 06 	lds	r25, 0x06AD
     dea:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_Versie>
					
					printf("200 OK \n");
     dee:	84 e9       	ldi	r24, 0x94	; 148
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <puts>
     df6:	76 ce       	rjmp	.-788    	; 0xae4 <protocolCom+0x5c>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     df8:	84 ed       	ldi	r24, 0xD4	; 212
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	be 01       	movw	r22, r28
     dfe:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     e02:	28 2f       	mov	r18, r24
     e04:	39 2f       	mov	r19, r25
     e06:	21 15       	cp	r18, r1
     e08:	31 05       	cpc	r19, r1
     e0a:	89 f4       	brne	.+34     	; 0xe2e <protocolCom+0x3a6>
				if ((getOut() % 2) == 1){
     e0c:	0e 94 b2 07 	call	0xf64	; 0xf64 <getOut>
     e10:	62 e0       	ldi	r22, 0x02	; 2
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__divmodhi4>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	11 f4       	brne	.+4      	; 0xe22 <protocolCom+0x39a>
					uitrollen();					
     e1e:	0e 94 c3 07 	call	0xf86	; 0xf86 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     e22:	89 ed       	ldi	r24, 0xD9	; 217
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
				abort();
     e2a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     e2e:	82 ee       	ldi	r24, 0xE2	; 226
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	be 01       	movw	r22, r28
     e34:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strcmp>
     e38:	28 2f       	mov	r18, r24
     e3a:	39 2f       	mov	r19, r25
     e3c:	21 15       	cp	r18, r1
     e3e:	31 05       	cpc	r19, r1
     e40:	29 f4       	brne	.+10     	; 0xe4c <protocolCom+0x3c4>
				ser_writeln(
     e42:	87 ee       	ldi	r24, 0xE7	; 231
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
     e4a:	4c ce       	rjmp	.-872    	; 0xae4 <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     e4c:	8c e2       	ldi	r24, 0x2C	; 44
     e4e:	95 e0       	ldi	r25, 0x05	; 5
     e50:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
     e54:	47 ce       	rjmp	.-882    	; 0xae4 <protocolCom+0x5c>

00000e56 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     e56:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     e5a:	83 e3       	ldi	r24, 0x33	; 51
     e5c:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     e60:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     e64:	88 e1       	ldi	r24, 0x18	; 24
     e66:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     e6a:	86 e0       	ldi	r24, 0x06	; 6
     e6c:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     e70:	8f e8       	ldi	r24, 0x8F	; 143
     e72:	95 e0       	ldi	r25, 0x05	; 5
     e74:	90 93 39 07 	sts	0x0739, r25
     e78:	80 93 38 07 	sts	0x0738, r24
}
     e7c:	08 95       	ret

00000e7e <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     e7e:	e0 ec       	ldi	r30, 0xC0	; 192
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	90 81       	ld	r25, Z
     e84:	95 ff       	sbrs	r25, 5
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     e88:	80 93 c6 00 	sts	0x00C6, r24
}
     e8c:	08 95       	ret

00000e8e <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     e8e:	cf 93       	push	r28
     e90:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     e92:	8a 30       	cpi	r24, 0x0A	; 10
     e94:	19 f4       	brne	.+6      	; 0xe9c <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     e96:	8d e0       	ldi	r24, 0x0D	; 13
     e98:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>
	}
	ser_transmit(c);
     e9c:	8c 2f       	mov	r24, r28
     e9e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>
}
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     ea6:	e0 ec       	ldi	r30, 0xC0	; 192
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	ec f7       	brge	.-6      	; 0xeaa <ser_receive+0x4>
	return UDR0;
     eb0:	80 91 c6 00 	lds	r24, 0x00C6
}
     eb4:	08 95       	ret

00000eb6 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     ebc:	88 81       	ld	r24, Y
     ebe:	88 23       	and	r24, r24
     ec0:	31 f0       	breq	.+12     	; 0xece <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     ec2:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     ec4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     ec8:	89 91       	ld	r24, Y+
     eca:	88 23       	and	r24, r24
     ecc:	d9 f7       	brne	.-10     	; 0xec4 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     ed4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
	ser_transmit('\r');
     ed8:	8d e0       	ldi	r24, 0x0D	; 13
     eda:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>
	ser_transmit('\n');
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>
}
     ee4:	08 95       	ret

00000ee6 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	5c 01       	movw	r10, r24
     efc:	d4 2f       	mov	r29, r20
	int i=0;
     efe:	6c 01       	movw	r12, r24
     f00:	ee 24       	eor	r14, r14
     f02:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f04:	8b 01       	movw	r16, r22
     f06:	01 50       	subi	r16, 0x01	; 1
     f08:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     f0a:	0e 94 53 07 	call	0xea6	; 0xea6 <ser_receive>
     f0e:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     f10:	dd 23       	and	r29, r29
     f12:	11 f0       	breq	.+4      	; 0xf18 <ser_readln+0x32>
     f14:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>
		if (c=='\r') {
     f18:	cd 30       	cpi	r28, 0x0D	; 13
     f1a:	31 f4       	brne	.+12     	; 0xf28 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     f1c:	dd 23       	and	r29, r29
     f1e:	71 f0       	breq	.+28     	; 0xf3c <ser_readln+0x56>
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ser_transmit>
     f26:	0a c0       	rjmp	.+20     	; 0xf3c <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f28:	e0 16       	cp	r14, r16
     f2a:	f1 06       	cpc	r15, r17
     f2c:	74 f7       	brge	.-36     	; 0xf0a <ser_readln+0x24>
			buf[i++]=c;
     f2e:	f6 01       	movw	r30, r12
     f30:	c1 93       	st	Z+, r28
     f32:	6f 01       	movw	r12, r30
     f34:	08 94       	sec
     f36:	e1 1c       	adc	r14, r1
     f38:	f1 1c       	adc	r15, r1
     f3a:	e7 cf       	rjmp	.-50     	; 0xf0a <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     f3c:	ea 0c       	add	r14, r10
     f3e:	fb 1c       	adc	r15, r11
     f40:	f7 01       	movw	r30, r14
     f42:	10 82       	st	Z, r1
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	bf 90       	pop	r11
     f56:	af 90       	pop	r10
     f58:	08 95       	ret

00000f5a <getIn>:

int j, IN, OUT = 0; //Voor knipperen van zonnescherm | Voor het kijken of hij uitgerold/opgerold is

int getIn(){
	return IN;
}
     f5a:	80 91 34 07 	lds	r24, 0x0734
     f5e:	90 91 35 07 	lds	r25, 0x0735
     f62:	08 95       	ret

00000f64 <getOut>:

int getOut(){
	return OUT;
}
     f64:	80 91 18 06 	lds	r24, 0x0618
     f68:	90 91 19 06 	lds	r25, 0x0619
     f6c:	08 95       	ret

00000f6e <init_scherm_ports>:

init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
     f6e:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
     f70:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
     f72:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
     f74:	e9 e6       	ldi	r30, 0x69	; 105
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
     f82:	2d 9a       	sbi	0x05, 5	; 5
}
     f84:	08 95       	ret

00000f86 <uitrollen>:

void uitrollen(){
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
	OUT = (OUT + 1);
     f8a:	80 91 18 06 	lds	r24, 0x0618
     f8e:	90 91 19 06 	lds	r25, 0x0619
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	90 93 19 06 	sts	0x0619, r25
     f98:	80 93 18 06 	sts	0x0618, r24
	IN = (IN + 1);
     f9c:	80 91 34 07 	lds	r24, 0x0734
     fa0:	90 91 35 07 	lds	r25, 0x0735
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	90 93 35 07 	sts	0x0735, r25
     faa:	80 93 34 07 	sts	0x0734, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
     fae:	8d e9       	ldi	r24, 0x9D	; 157
     fb0:	95 e0       	ldi	r25, 0x05	; 5
     fb2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
     fb6:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
     fb8:	2b 9a       	sbi	0x05, 3	; 5
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
     fba:	c2 ea       	ldi	r28, 0xA2	; 162
     fbc:	d5 e0       	ldi	r29, 0x05	; 5
	
	PORTB |= _BV(PORTB3);
	
	//printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	
	while (getDistance()<20){
     fbe:	22 c0       	rjmp	.+68     	; 0x1004 <uitrollen+0x7e>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
     fc0:	2c 9a       	sbi	0x05, 4	; 5
     fc2:	8f e3       	ldi	r24, 0x3F	; 63
     fc4:	9d e0       	ldi	r25, 0x0D	; 13
     fc6:	a3 e0       	ldi	r26, 0x03	; 3
     fc8:	81 50       	subi	r24, 0x01	; 1
     fca:	90 40       	sbci	r25, 0x00	; 0
     fcc:	a0 40       	sbci	r26, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <uitrollen+0x42>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <uitrollen+0x4c>
     fd2:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
     fd4:	2c 98       	cbi	0x05, 4	; 5
     fd6:	8f e3       	ldi	r24, 0x3F	; 63
     fd8:	9d e0       	ldi	r25, 0x0D	; 13
     fda:	a3 e0       	ldi	r26, 0x03	; 3
     fdc:	81 50       	subi	r24, 0x01	; 1
     fde:	90 40       	sbci	r25, 0x00	; 0
     fe0:	a0 40       	sbci	r26, 0x00	; 0
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <uitrollen+0x56>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <uitrollen+0x60>
     fe6:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
     fe8:	80 91 32 07 	lds	r24, 0x0732
     fec:	90 91 33 07 	lds	r25, 0x0733
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	90 93 33 07 	sts	0x0733, r25
     ff6:	80 93 32 07 	sts	0x0732, r24
		if (j % 2 == 0){ser_write(".");}
     ffa:	80 fd       	sbrc	r24, 0
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <uitrollen+0x7e>
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
	
	PORTB |= _BV(PORTB3);
	
	//printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	
	while (getDistance()<20){
    1004:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 ea       	ldi	r20, 0xA0	; 160
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 24 09 	call	0x1248	; 0x1248 <__cmpsf2>
    1014:	88 23       	and	r24, r24
    1016:	a4 f2       	brlt	.-88     	; 0xfc0 <uitrollen+0x3a>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    1018:	10 92 33 07 	sts	0x0733, r1
    101c:	10 92 32 07 	sts	0x0732, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    1020:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	00 d0       	rcall	.+0      	; 0x102a <uitrollen+0xa4>
    102a:	00 d0       	rcall	.+0      	; 0x102c <uitrollen+0xa6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <uitrollen+0xa8>
    102e:	24 ea       	ldi	r18, 0xA4	; 164
    1030:	35 e0       	ldi	r19, 0x05	; 5
    1032:	ed b7       	in	r30, 0x3d	; 61
    1034:	fe b7       	in	r31, 0x3e	; 62
    1036:	32 83       	std	Z+2, r19	; 0x02
    1038:	21 83       	std	Z+1, r18	; 0x01
    103a:	83 83       	std	Z+3, r24	; 0x03
    103c:	94 83       	std	Z+4, r25	; 0x04
    103e:	a5 83       	std	Z+5, r26	; 0x05
    1040:	b6 83       	std	Z+6, r27	; 0x06
    1042:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
	ser_writeln("\n\r201 Zonnescherm is uitgerold\n");
    1046:	8d b7       	in	r24, 0x3d	; 61
    1048:	9e b7       	in	r25, 0x3e	; 62
    104a:	06 96       	adiw	r24, 0x06	; 6
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	9e bf       	out	0x3e, r25	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	8d bf       	out	0x3d, r24	; 61
    1056:	84 ec       	ldi	r24, 0xC4	; 196
    1058:	95 e0       	ldi	r25, 0x05	; 5
    105a:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
    105e:	8f e3       	ldi	r24, 0x3F	; 63
    1060:	9d e0       	ldi	r25, 0x0D	; 13
    1062:	a3 e0       	ldi	r26, 0x03	; 3
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	a0 40       	sbci	r26, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <uitrollen+0xde>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <uitrollen+0xe8>
    106e:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <oprollen>:
	
	


void oprollen(){
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
	IN = (IN + 1);
    1082:	80 91 34 07 	lds	r24, 0x0734
    1086:	90 91 35 07 	lds	r25, 0x0735
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	90 93 35 07 	sts	0x0735, r25
    1090:	80 93 34 07 	sts	0x0734, r24
	OUT = (OUT + 1);
    1094:	80 91 18 06 	lds	r24, 0x0618
    1098:	90 91 19 06 	lds	r25, 0x0619
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	90 93 19 06 	sts	0x0619, r25
    10a2:	80 93 18 06 	sts	0x0618, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    10a6:	8d e9       	ldi	r24, 0x9D	; 157
    10a8:	95 e0       	ldi	r25, 0x05	; 5
    10aa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    10ae:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    10b0:	2d 9a       	sbi	0x05, 5	; 5
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    10b2:	c2 ea       	ldi	r28, 0xA2	; 162
    10b4:	d5 e0       	ldi	r29, 0x05	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	//printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	
	while (getDistance()>get_min_unroll()){
    10b6:	22 c0       	rjmp	.+68     	; 0x10fc <oprollen+0x86>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    10b8:	2c 9a       	sbi	0x05, 4	; 5
    10ba:	8f e3       	ldi	r24, 0x3F	; 63
    10bc:	9d e0       	ldi	r25, 0x0D	; 13
    10be:	a3 e0       	ldi	r26, 0x03	; 3
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	90 40       	sbci	r25, 0x00	; 0
    10c4:	a0 40       	sbci	r26, 0x00	; 0
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <oprollen+0x4a>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <oprollen+0x54>
    10ca:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    10cc:	2c 98       	cbi	0x05, 4	; 5
    10ce:	8f e3       	ldi	r24, 0x3F	; 63
    10d0:	9d e0       	ldi	r25, 0x0D	; 13
    10d2:	a3 e0       	ldi	r26, 0x03	; 3
    10d4:	81 50       	subi	r24, 0x01	; 1
    10d6:	90 40       	sbci	r25, 0x00	; 0
    10d8:	a0 40       	sbci	r26, 0x00	; 0
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <oprollen+0x5e>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <oprollen+0x68>
    10de:	00 00       	nop
		_delay_ms(DELAY_MS);

		j += 1;
    10e0:	80 91 32 07 	lds	r24, 0x0732
    10e4:	90 91 33 07 	lds	r25, 0x0733
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	90 93 33 07 	sts	0x0733, r25
    10ee:	80 93 32 07 	sts	0x0732, r24
		if (j % 2 == 0){ser_write(".");}
    10f2:	80 fd       	sbrc	r24, 0
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <oprollen+0x86>
    10f6:	ce 01       	movw	r24, r28
    10f8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ser_write>
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	//printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	
	while (getDistance()>get_min_unroll()){
    10fc:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1100:	6b 01       	movw	r12, r22
    1102:	7c 01       	movw	r14, r24
    1104:	0e 94 35 05 	call	0xa6a	; 0xa6a <get_min_unroll>
    1108:	9b 01       	movw	r18, r22
    110a:	ac 01       	movw	r20, r24
    110c:	c7 01       	movw	r24, r14
    110e:	b6 01       	movw	r22, r12
    1110:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__gesf2>
    1114:	18 16       	cp	r1, r24
    1116:	84 f2       	brlt	.-96     	; 0x10b8 <oprollen+0x42>
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}			
	j = 0;
    1118:	10 92 33 07 	sts	0x0733, r1
    111c:	10 92 32 07 	sts	0x0732, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    1120:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	00 d0       	rcall	.+0      	; 0x112a <oprollen+0xb4>
    112a:	00 d0       	rcall	.+0      	; 0x112c <oprollen+0xb6>
    112c:	00 d0       	rcall	.+0      	; 0x112e <oprollen+0xb8>
    112e:	24 ea       	ldi	r18, 0xA4	; 164
    1130:	35 e0       	ldi	r19, 0x05	; 5
    1132:	ed b7       	in	r30, 0x3d	; 61
    1134:	fe b7       	in	r31, 0x3e	; 62
    1136:	32 83       	std	Z+2, r19	; 0x02
    1138:	21 83       	std	Z+1, r18	; 0x01
    113a:	83 83       	std	Z+3, r24	; 0x03
    113c:	94 83       	std	Z+4, r25	; 0x04
    113e:	a5 83       	std	Z+5, r26	; 0x05
    1140:	b6 83       	std	Z+6, r27	; 0x06
    1142:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <printf>
	ser_writeln("\n\r201 Zonnescherm is opgerold\n");
    1146:	8d b7       	in	r24, 0x3d	; 61
    1148:	9e b7       	in	r25, 0x3e	; 62
    114a:	06 96       	adiw	r24, 0x06	; 6
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	9e bf       	out	0x3e, r25	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	8d bf       	out	0x3d, r24	; 61
    1156:	84 ee       	ldi	r24, 0xE4	; 228
    1158:	95 e0       	ldi	r25, 0x05	; 5
    115a:	0e 94 6a 07 	call	0xed4	; 0xed4 <ser_writeln>
    115e:	8f e3       	ldi	r24, 0x3F	; 63
    1160:	9d e0       	ldi	r25, 0x0D	; 13
    1162:	a3 e0       	ldi	r26, 0x03	; 3
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	a0 40       	sbci	r26, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <oprollen+0xee>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <oprollen+0xf8>
    116e:	00 00       	nop
	_delay_ms(DELAY_MS);
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	08 95       	ret

0000117e <__subsf3>:
    117e:	50 58       	subi	r21, 0x80	; 128

00001180 <__addsf3>:
    1180:	bb 27       	eor	r27, r27
    1182:	aa 27       	eor	r26, r26
    1184:	0e d0       	rcall	.+28     	; 0x11a2 <__addsf3x>
    1186:	dc c0       	rjmp	.+440    	; 0x1340 <__fp_round>
    1188:	cd d0       	rcall	.+410    	; 0x1324 <__fp_pscA>
    118a:	30 f0       	brcs	.+12     	; 0x1198 <__addsf3+0x18>
    118c:	d2 d0       	rcall	.+420    	; 0x1332 <__fp_pscB>
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__addsf3+0x18>
    1190:	31 f4       	brne	.+12     	; 0x119e <__addsf3+0x1e>
    1192:	9f 3f       	cpi	r25, 0xFF	; 255
    1194:	11 f4       	brne	.+4      	; 0x119a <__addsf3+0x1a>
    1196:	1e f4       	brtc	.+6      	; 0x119e <__addsf3+0x1e>
    1198:	c2 c0       	rjmp	.+388    	; 0x131e <__fp_nan>
    119a:	0e f4       	brtc	.+2      	; 0x119e <__addsf3+0x1e>
    119c:	e0 95       	com	r30
    119e:	e7 fb       	bst	r30, 7
    11a0:	b8 c0       	rjmp	.+368    	; 0x1312 <__fp_inf>

000011a2 <__addsf3x>:
    11a2:	e9 2f       	mov	r30, r25
    11a4:	de d0       	rcall	.+444    	; 0x1362 <__fp_split3>
    11a6:	80 f3       	brcs	.-32     	; 0x1188 <__addsf3+0x8>
    11a8:	ba 17       	cp	r27, r26
    11aa:	62 07       	cpc	r22, r18
    11ac:	73 07       	cpc	r23, r19
    11ae:	84 07       	cpc	r24, r20
    11b0:	95 07       	cpc	r25, r21
    11b2:	18 f0       	brcs	.+6      	; 0x11ba <__addsf3x+0x18>
    11b4:	71 f4       	brne	.+28     	; 0x11d2 <__addsf3x+0x30>
    11b6:	9e f5       	brtc	.+102    	; 0x121e <__addsf3x+0x7c>
    11b8:	f6 c0       	rjmp	.+492    	; 0x13a6 <__fp_zero>
    11ba:	0e f4       	brtc	.+2      	; 0x11be <__addsf3x+0x1c>
    11bc:	e0 95       	com	r30
    11be:	0b 2e       	mov	r0, r27
    11c0:	ba 2f       	mov	r27, r26
    11c2:	a0 2d       	mov	r26, r0
    11c4:	0b 01       	movw	r0, r22
    11c6:	b9 01       	movw	r22, r18
    11c8:	90 01       	movw	r18, r0
    11ca:	0c 01       	movw	r0, r24
    11cc:	ca 01       	movw	r24, r20
    11ce:	a0 01       	movw	r20, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	ff 27       	eor	r31, r31
    11d4:	59 1b       	sub	r21, r25
    11d6:	99 f0       	breq	.+38     	; 0x11fe <__addsf3x+0x5c>
    11d8:	59 3f       	cpi	r21, 0xF9	; 249
    11da:	50 f4       	brcc	.+20     	; 0x11f0 <__addsf3x+0x4e>
    11dc:	50 3e       	cpi	r21, 0xE0	; 224
    11de:	68 f1       	brcs	.+90     	; 0x123a <__addsf3x+0x98>
    11e0:	1a 16       	cp	r1, r26
    11e2:	f0 40       	sbci	r31, 0x00	; 0
    11e4:	a2 2f       	mov	r26, r18
    11e6:	23 2f       	mov	r18, r19
    11e8:	34 2f       	mov	r19, r20
    11ea:	44 27       	eor	r20, r20
    11ec:	58 5f       	subi	r21, 0xF8	; 248
    11ee:	f3 cf       	rjmp	.-26     	; 0x11d6 <__addsf3x+0x34>
    11f0:	46 95       	lsr	r20
    11f2:	37 95       	ror	r19
    11f4:	27 95       	ror	r18
    11f6:	a7 95       	ror	r26
    11f8:	f0 40       	sbci	r31, 0x00	; 0
    11fa:	53 95       	inc	r21
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__addsf3x+0x4e>
    11fe:	7e f4       	brtc	.+30     	; 0x121e <__addsf3x+0x7c>
    1200:	1f 16       	cp	r1, r31
    1202:	ba 0b       	sbc	r27, r26
    1204:	62 0b       	sbc	r22, r18
    1206:	73 0b       	sbc	r23, r19
    1208:	84 0b       	sbc	r24, r20
    120a:	ba f0       	brmi	.+46     	; 0x123a <__addsf3x+0x98>
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	a1 f0       	breq	.+40     	; 0x1238 <__addsf3x+0x96>
    1210:	ff 0f       	add	r31, r31
    1212:	bb 1f       	adc	r27, r27
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	c2 f7       	brpl	.-16     	; 0x120c <__addsf3x+0x6a>
    121c:	0e c0       	rjmp	.+28     	; 0x123a <__addsf3x+0x98>
    121e:	ba 0f       	add	r27, r26
    1220:	62 1f       	adc	r22, r18
    1222:	73 1f       	adc	r23, r19
    1224:	84 1f       	adc	r24, r20
    1226:	48 f4       	brcc	.+18     	; 0x123a <__addsf3x+0x98>
    1228:	87 95       	ror	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f7 95       	ror	r31
    1232:	9e 3f       	cpi	r25, 0xFE	; 254
    1234:	08 f0       	brcs	.+2      	; 0x1238 <__addsf3x+0x96>
    1236:	b3 cf       	rjmp	.-154    	; 0x119e <__addsf3+0x1e>
    1238:	93 95       	inc	r25
    123a:	88 0f       	add	r24, r24
    123c:	08 f0       	brcs	.+2      	; 0x1240 <__addsf3x+0x9e>
    123e:	99 27       	eor	r25, r25
    1240:	ee 0f       	add	r30, r30
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	08 95       	ret

00001248 <__cmpsf2>:
    1248:	40 d0       	rcall	.+128    	; 0x12ca <__fp_cmp>
    124a:	08 f4       	brcc	.+2      	; 0x124e <__cmpsf2+0x6>
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	08 95       	ret

00001250 <__floatunsisf>:
    1250:	e8 94       	clt
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <__floatsisf+0x12>

00001254 <__floatsisf>:
    1254:	97 fb       	bst	r25, 7
    1256:	3e f4       	brtc	.+14     	; 0x1266 <__floatsisf+0x12>
    1258:	90 95       	com	r25
    125a:	80 95       	com	r24
    125c:	70 95       	com	r23
    125e:	61 95       	neg	r22
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	99 23       	and	r25, r25
    1268:	a9 f0       	breq	.+42     	; 0x1294 <__floatsisf+0x40>
    126a:	f9 2f       	mov	r31, r25
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	bb 27       	eor	r27, r27
    1270:	93 95       	inc	r25
    1272:	f6 95       	lsr	r31
    1274:	87 95       	ror	r24
    1276:	77 95       	ror	r23
    1278:	67 95       	ror	r22
    127a:	b7 95       	ror	r27
    127c:	f1 11       	cpse	r31, r1
    127e:	f8 cf       	rjmp	.-16     	; 0x1270 <__floatsisf+0x1c>
    1280:	fa f4       	brpl	.+62     	; 0x12c0 <__floatsisf+0x6c>
    1282:	bb 0f       	add	r27, r27
    1284:	11 f4       	brne	.+4      	; 0x128a <__floatsisf+0x36>
    1286:	60 ff       	sbrs	r22, 0
    1288:	1b c0       	rjmp	.+54     	; 0x12c0 <__floatsisf+0x6c>
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <__floatsisf+0x6c>
    1294:	88 23       	and	r24, r24
    1296:	11 f0       	breq	.+4      	; 0x129c <__floatsisf+0x48>
    1298:	96 e9       	ldi	r25, 0x96	; 150
    129a:	11 c0       	rjmp	.+34     	; 0x12be <__floatsisf+0x6a>
    129c:	77 23       	and	r23, r23
    129e:	21 f0       	breq	.+8      	; 0x12a8 <__floatsisf+0x54>
    12a0:	9e e8       	ldi	r25, 0x8E	; 142
    12a2:	87 2f       	mov	r24, r23
    12a4:	76 2f       	mov	r23, r22
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <__floatsisf+0x5e>
    12a8:	66 23       	and	r22, r22
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <__floatsisf+0x74>
    12ac:	96 e8       	ldi	r25, 0x86	; 134
    12ae:	86 2f       	mov	r24, r22
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	2a f0       	brmi	.+10     	; 0x12c0 <__floatsisf+0x6c>
    12b6:	9a 95       	dec	r25
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	88 1f       	adc	r24, r24
    12be:	da f7       	brpl	.-10     	; 0x12b6 <__floatsisf+0x62>
    12c0:	88 0f       	add	r24, r24
    12c2:	96 95       	lsr	r25
    12c4:	87 95       	ror	r24
    12c6:	97 f9       	bld	r25, 7
    12c8:	08 95       	ret

000012ca <__fp_cmp>:
    12ca:	99 0f       	add	r25, r25
    12cc:	00 08       	sbc	r0, r0
    12ce:	55 0f       	add	r21, r21
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	e0 e8       	ldi	r30, 0x80	; 128
    12d4:	fe ef       	ldi	r31, 0xFE	; 254
    12d6:	16 16       	cp	r1, r22
    12d8:	17 06       	cpc	r1, r23
    12da:	e8 07       	cpc	r30, r24
    12dc:	f9 07       	cpc	r31, r25
    12de:	c0 f0       	brcs	.+48     	; 0x1310 <__fp_cmp+0x46>
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	e4 07       	cpc	r30, r20
    12e6:	f5 07       	cpc	r31, r21
    12e8:	98 f0       	brcs	.+38     	; 0x1310 <__fp_cmp+0x46>
    12ea:	62 1b       	sub	r22, r18
    12ec:	73 0b       	sbc	r23, r19
    12ee:	84 0b       	sbc	r24, r20
    12f0:	95 0b       	sbc	r25, r21
    12f2:	39 f4       	brne	.+14     	; 0x1302 <__fp_cmp+0x38>
    12f4:	0a 26       	eor	r0, r26
    12f6:	61 f0       	breq	.+24     	; 0x1310 <__fp_cmp+0x46>
    12f8:	23 2b       	or	r18, r19
    12fa:	24 2b       	or	r18, r20
    12fc:	25 2b       	or	r18, r21
    12fe:	21 f4       	brne	.+8      	; 0x1308 <__fp_cmp+0x3e>
    1300:	08 95       	ret
    1302:	0a 26       	eor	r0, r26
    1304:	09 f4       	brne	.+2      	; 0x1308 <__fp_cmp+0x3e>
    1306:	a1 40       	sbci	r26, 0x01	; 1
    1308:	a6 95       	lsr	r26
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	81 1d       	adc	r24, r1
    130e:	81 1d       	adc	r24, r1
    1310:	08 95       	ret

00001312 <__fp_inf>:
    1312:	97 f9       	bld	r25, 7
    1314:	9f 67       	ori	r25, 0x7F	; 127
    1316:	80 e8       	ldi	r24, 0x80	; 128
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	08 95       	ret

0000131e <__fp_nan>:
    131e:	9f ef       	ldi	r25, 0xFF	; 255
    1320:	80 ec       	ldi	r24, 0xC0	; 192
    1322:	08 95       	ret

00001324 <__fp_pscA>:
    1324:	00 24       	eor	r0, r0
    1326:	0a 94       	dec	r0
    1328:	16 16       	cp	r1, r22
    132a:	17 06       	cpc	r1, r23
    132c:	18 06       	cpc	r1, r24
    132e:	09 06       	cpc	r0, r25
    1330:	08 95       	ret

00001332 <__fp_pscB>:
    1332:	00 24       	eor	r0, r0
    1334:	0a 94       	dec	r0
    1336:	12 16       	cp	r1, r18
    1338:	13 06       	cpc	r1, r19
    133a:	14 06       	cpc	r1, r20
    133c:	05 06       	cpc	r0, r21
    133e:	08 95       	ret

00001340 <__fp_round>:
    1340:	09 2e       	mov	r0, r25
    1342:	03 94       	inc	r0
    1344:	00 0c       	add	r0, r0
    1346:	11 f4       	brne	.+4      	; 0x134c <__fp_round+0xc>
    1348:	88 23       	and	r24, r24
    134a:	52 f0       	brmi	.+20     	; 0x1360 <__fp_round+0x20>
    134c:	bb 0f       	add	r27, r27
    134e:	40 f4       	brcc	.+16     	; 0x1360 <__fp_round+0x20>
    1350:	bf 2b       	or	r27, r31
    1352:	11 f4       	brne	.+4      	; 0x1358 <__fp_round+0x18>
    1354:	60 ff       	sbrs	r22, 0
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <__fp_round+0x20>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__fp_split3>:
    1362:	57 fd       	sbrc	r21, 7
    1364:	90 58       	subi	r25, 0x80	; 128
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	59 f0       	breq	.+22     	; 0x1382 <__fp_splitA+0x10>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	71 f0       	breq	.+28     	; 0x138c <__fp_splitA+0x1a>
    1370:	47 95       	ror	r20

00001372 <__fp_splitA>:
    1372:	88 0f       	add	r24, r24
    1374:	97 fb       	bst	r25, 7
    1376:	99 1f       	adc	r25, r25
    1378:	61 f0       	breq	.+24     	; 0x1392 <__fp_splitA+0x20>
    137a:	9f 3f       	cpi	r25, 0xFF	; 255
    137c:	79 f0       	breq	.+30     	; 0x139c <__fp_splitA+0x2a>
    137e:	87 95       	ror	r24
    1380:	08 95       	ret
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	55 1f       	adc	r21, r21
    138a:	f2 cf       	rjmp	.-28     	; 0x1370 <__fp_split3+0xe>
    138c:	46 95       	lsr	r20
    138e:	f1 df       	rcall	.-30     	; 0x1372 <__fp_splitA>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <__fp_splitA+0x30>
    1392:	16 16       	cp	r1, r22
    1394:	17 06       	cpc	r1, r23
    1396:	18 06       	cpc	r1, r24
    1398:	99 1f       	adc	r25, r25
    139a:	f1 cf       	rjmp	.-30     	; 0x137e <__fp_splitA+0xc>
    139c:	86 95       	lsr	r24
    139e:	71 05       	cpc	r23, r1
    13a0:	61 05       	cpc	r22, r1
    13a2:	08 94       	sec
    13a4:	08 95       	ret

000013a6 <__fp_zero>:
    13a6:	e8 94       	clt

000013a8 <__fp_szero>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	66 27       	eor	r22, r22
    13ac:	77 27       	eor	r23, r23
    13ae:	cb 01       	movw	r24, r22
    13b0:	97 f9       	bld	r25, 7
    13b2:	08 95       	ret

000013b4 <__gesf2>:
    13b4:	8a df       	rcall	.-236    	; 0x12ca <__fp_cmp>
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <__gesf2+0x6>
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__mulsf3>:
    13bc:	0b d0       	rcall	.+22     	; 0x13d4 <__mulsf3x>
    13be:	c0 cf       	rjmp	.-128    	; 0x1340 <__fp_round>
    13c0:	b1 df       	rcall	.-158    	; 0x1324 <__fp_pscA>
    13c2:	28 f0       	brcs	.+10     	; 0x13ce <__mulsf3+0x12>
    13c4:	b6 df       	rcall	.-148    	; 0x1332 <__fp_pscB>
    13c6:	18 f0       	brcs	.+6      	; 0x13ce <__mulsf3+0x12>
    13c8:	95 23       	and	r25, r21
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__mulsf3+0x12>
    13cc:	a2 cf       	rjmp	.-188    	; 0x1312 <__fp_inf>
    13ce:	a7 cf       	rjmp	.-178    	; 0x131e <__fp_nan>
    13d0:	11 24       	eor	r1, r1
    13d2:	ea cf       	rjmp	.-44     	; 0x13a8 <__fp_szero>

000013d4 <__mulsf3x>:
    13d4:	c6 df       	rcall	.-116    	; 0x1362 <__fp_split3>
    13d6:	a0 f3       	brcs	.-24     	; 0x13c0 <__mulsf3+0x4>

000013d8 <__mulsf3_pse>:
    13d8:	95 9f       	mul	r25, r21
    13da:	d1 f3       	breq	.-12     	; 0x13d0 <__mulsf3+0x14>
    13dc:	95 0f       	add	r25, r21
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	55 1f       	adc	r21, r21
    13e2:	62 9f       	mul	r22, r18
    13e4:	f0 01       	movw	r30, r0
    13e6:	72 9f       	mul	r23, r18
    13e8:	bb 27       	eor	r27, r27
    13ea:	f0 0d       	add	r31, r0
    13ec:	b1 1d       	adc	r27, r1
    13ee:	63 9f       	mul	r22, r19
    13f0:	aa 27       	eor	r26, r26
    13f2:	f0 0d       	add	r31, r0
    13f4:	b1 1d       	adc	r27, r1
    13f6:	aa 1f       	adc	r26, r26
    13f8:	64 9f       	mul	r22, r20
    13fa:	66 27       	eor	r22, r22
    13fc:	b0 0d       	add	r27, r0
    13fe:	a1 1d       	adc	r26, r1
    1400:	66 1f       	adc	r22, r22
    1402:	82 9f       	mul	r24, r18
    1404:	22 27       	eor	r18, r18
    1406:	b0 0d       	add	r27, r0
    1408:	a1 1d       	adc	r26, r1
    140a:	62 1f       	adc	r22, r18
    140c:	73 9f       	mul	r23, r19
    140e:	b0 0d       	add	r27, r0
    1410:	a1 1d       	adc	r26, r1
    1412:	62 1f       	adc	r22, r18
    1414:	83 9f       	mul	r24, r19
    1416:	a0 0d       	add	r26, r0
    1418:	61 1d       	adc	r22, r1
    141a:	22 1f       	adc	r18, r18
    141c:	74 9f       	mul	r23, r20
    141e:	33 27       	eor	r19, r19
    1420:	a0 0d       	add	r26, r0
    1422:	61 1d       	adc	r22, r1
    1424:	23 1f       	adc	r18, r19
    1426:	84 9f       	mul	r24, r20
    1428:	60 0d       	add	r22, r0
    142a:	21 1d       	adc	r18, r1
    142c:	82 2f       	mov	r24, r18
    142e:	76 2f       	mov	r23, r22
    1430:	6a 2f       	mov	r22, r26
    1432:	11 24       	eor	r1, r1
    1434:	9f 57       	subi	r25, 0x7F	; 127
    1436:	50 40       	sbci	r21, 0x00	; 0
    1438:	8a f0       	brmi	.+34     	; 0x145c <__mulsf3_pse+0x84>
    143a:	e1 f0       	breq	.+56     	; 0x1474 <__mulsf3_pse+0x9c>
    143c:	88 23       	and	r24, r24
    143e:	4a f0       	brmi	.+18     	; 0x1452 <__mulsf3_pse+0x7a>
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	bb 1f       	adc	r27, r27
    1446:	66 1f       	adc	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	91 50       	subi	r25, 0x01	; 1
    144e:	50 40       	sbci	r21, 0x00	; 0
    1450:	a9 f7       	brne	.-22     	; 0x143c <__mulsf3_pse+0x64>
    1452:	9e 3f       	cpi	r25, 0xFE	; 254
    1454:	51 05       	cpc	r21, r1
    1456:	70 f0       	brcs	.+28     	; 0x1474 <__mulsf3_pse+0x9c>
    1458:	5c cf       	rjmp	.-328    	; 0x1312 <__fp_inf>
    145a:	a6 cf       	rjmp	.-180    	; 0x13a8 <__fp_szero>
    145c:	5f 3f       	cpi	r21, 0xFF	; 255
    145e:	ec f3       	brlt	.-6      	; 0x145a <__mulsf3_pse+0x82>
    1460:	98 3e       	cpi	r25, 0xE8	; 232
    1462:	dc f3       	brlt	.-10     	; 0x145a <__mulsf3_pse+0x82>
    1464:	86 95       	lsr	r24
    1466:	77 95       	ror	r23
    1468:	67 95       	ror	r22
    146a:	b7 95       	ror	r27
    146c:	f7 95       	ror	r31
    146e:	e7 95       	ror	r30
    1470:	9f 5f       	subi	r25, 0xFF	; 255
    1472:	c1 f7       	brne	.-16     	; 0x1464 <__mulsf3_pse+0x8c>
    1474:	fe 2b       	or	r31, r30
    1476:	88 0f       	add	r24, r24
    1478:	91 1d       	adc	r25, r1
    147a:	96 95       	lsr	r25
    147c:	87 95       	ror	r24
    147e:	97 f9       	bld	r25, 7
    1480:	08 95       	ret

00001482 <vfprintf>:
    1482:	a5 e1       	ldi	r26, 0x15	; 21
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e7 e4       	ldi	r30, 0x47	; 71
    1488:	fa e0       	ldi	r31, 0x0A	; 10
    148a:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__prologue_saves__>
    148e:	4c 01       	movw	r8, r24
    1490:	7f 87       	std	Y+15, r23	; 0x0f
    1492:	6e 87       	std	Y+14, r22	; 0x0e
    1494:	fc 01       	movw	r30, r24
    1496:	17 82       	std	Z+7, r1	; 0x07
    1498:	16 82       	std	Z+6, r1	; 0x06
    149a:	83 81       	ldd	r24, Z+3	; 0x03
    149c:	81 fd       	sbrc	r24, 1
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <vfprintf+0x26>
    14a0:	76 c3       	rjmp	.+1772   	; 0x1b8e <vfprintf+0x70c>
    14a2:	4c 85       	ldd	r20, Y+12	; 0x0c
    14a4:	5d 85       	ldd	r21, Y+13	; 0x0d
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <vfprintf+0x2e>
    14a8:	1e 01       	movw	r2, r28
    14aa:	08 94       	sec
    14ac:	21 1c       	adc	r2, r1
    14ae:	31 1c       	adc	r3, r1
    14b0:	f4 01       	movw	r30, r8
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    14b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    14b8:	93 fd       	sbrc	r25, 3
    14ba:	85 91       	lpm	r24, Z+
    14bc:	93 ff       	sbrs	r25, 3
    14be:	81 91       	ld	r24, Z+
    14c0:	ff 87       	std	Y+15, r31	; 0x0f
    14c2:	ee 87       	std	Y+14, r30	; 0x0e
    14c4:	88 23       	and	r24, r24
    14c6:	09 f4       	brne	.+2      	; 0x14ca <vfprintf+0x48>
    14c8:	5e c3       	rjmp	.+1724   	; 0x1b86 <vfprintf+0x704>
    14ca:	85 32       	cpi	r24, 0x25	; 37
    14cc:	41 f4       	brne	.+16     	; 0x14de <vfprintf+0x5c>
    14ce:	93 fd       	sbrc	r25, 3
    14d0:	85 91       	lpm	r24, Z+
    14d2:	93 ff       	sbrs	r25, 3
    14d4:	81 91       	ld	r24, Z+
    14d6:	ff 87       	std	Y+15, r31	; 0x0f
    14d8:	ee 87       	std	Y+14, r30	; 0x0e
    14da:	85 32       	cpi	r24, 0x25	; 37
    14dc:	59 f4       	brne	.+22     	; 0x14f4 <vfprintf+0x72>
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	b4 01       	movw	r22, r8
    14e2:	4c 8b       	std	Y+20, r20	; 0x14
    14e4:	5d 8b       	std	Y+21, r21	; 0x15
    14e6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    14ea:	4c 89       	ldd	r20, Y+20	; 0x14
    14ec:	5d 89       	ldd	r21, Y+21	; 0x15
    14ee:	5d 87       	std	Y+13, r21	; 0x0d
    14f0:	4c 87       	std	Y+12, r20	; 0x0c
    14f2:	d7 cf       	rjmp	.-82     	; 0x14a2 <vfprintf+0x20>
    14f4:	ff 24       	eor	r15, r15
    14f6:	dd 24       	eor	r13, r13
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	10 32       	cpi	r17, 0x20	; 32
    14fc:	b0 f4       	brcc	.+44     	; 0x152a <vfprintf+0xa8>
    14fe:	8b 32       	cpi	r24, 0x2B	; 43
    1500:	69 f0       	breq	.+26     	; 0x151c <vfprintf+0x9a>
    1502:	8c 32       	cpi	r24, 0x2C	; 44
    1504:	28 f4       	brcc	.+10     	; 0x1510 <vfprintf+0x8e>
    1506:	80 32       	cpi	r24, 0x20	; 32
    1508:	51 f0       	breq	.+20     	; 0x151e <vfprintf+0x9c>
    150a:	83 32       	cpi	r24, 0x23	; 35
    150c:	71 f4       	brne	.+28     	; 0x152a <vfprintf+0xa8>
    150e:	0b c0       	rjmp	.+22     	; 0x1526 <vfprintf+0xa4>
    1510:	8d 32       	cpi	r24, 0x2D	; 45
    1512:	39 f0       	breq	.+14     	; 0x1522 <vfprintf+0xa0>
    1514:	80 33       	cpi	r24, 0x30	; 48
    1516:	49 f4       	brne	.+18     	; 0x152a <vfprintf+0xa8>
    1518:	11 60       	ori	r17, 0x01	; 1
    151a:	2c c0       	rjmp	.+88     	; 0x1574 <vfprintf+0xf2>
    151c:	12 60       	ori	r17, 0x02	; 2
    151e:	14 60       	ori	r17, 0x04	; 4
    1520:	29 c0       	rjmp	.+82     	; 0x1574 <vfprintf+0xf2>
    1522:	18 60       	ori	r17, 0x08	; 8
    1524:	27 c0       	rjmp	.+78     	; 0x1574 <vfprintf+0xf2>
    1526:	10 61       	ori	r17, 0x10	; 16
    1528:	25 c0       	rjmp	.+74     	; 0x1574 <vfprintf+0xf2>
    152a:	17 fd       	sbrc	r17, 7
    152c:	2e c0       	rjmp	.+92     	; 0x158a <vfprintf+0x108>
    152e:	28 2f       	mov	r18, r24
    1530:	20 53       	subi	r18, 0x30	; 48
    1532:	2a 30       	cpi	r18, 0x0A	; 10
    1534:	98 f4       	brcc	.+38     	; 0x155c <vfprintf+0xda>
    1536:	16 ff       	sbrs	r17, 6
    1538:	08 c0       	rjmp	.+16     	; 0x154a <vfprintf+0xc8>
    153a:	8f 2d       	mov	r24, r15
    153c:	88 0f       	add	r24, r24
    153e:	f8 2e       	mov	r15, r24
    1540:	ff 0c       	add	r15, r15
    1542:	ff 0c       	add	r15, r15
    1544:	f8 0e       	add	r15, r24
    1546:	f2 0e       	add	r15, r18
    1548:	15 c0       	rjmp	.+42     	; 0x1574 <vfprintf+0xf2>
    154a:	8d 2d       	mov	r24, r13
    154c:	88 0f       	add	r24, r24
    154e:	d8 2e       	mov	r13, r24
    1550:	dd 0c       	add	r13, r13
    1552:	dd 0c       	add	r13, r13
    1554:	d8 0e       	add	r13, r24
    1556:	d2 0e       	add	r13, r18
    1558:	10 62       	ori	r17, 0x20	; 32
    155a:	0c c0       	rjmp	.+24     	; 0x1574 <vfprintf+0xf2>
    155c:	8e 32       	cpi	r24, 0x2E	; 46
    155e:	21 f4       	brne	.+8      	; 0x1568 <vfprintf+0xe6>
    1560:	16 fd       	sbrc	r17, 6
    1562:	11 c3       	rjmp	.+1570   	; 0x1b86 <vfprintf+0x704>
    1564:	10 64       	ori	r17, 0x40	; 64
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0xf2>
    1568:	8c 36       	cpi	r24, 0x6C	; 108
    156a:	11 f4       	brne	.+4      	; 0x1570 <vfprintf+0xee>
    156c:	10 68       	ori	r17, 0x80	; 128
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0xf2>
    1570:	88 36       	cpi	r24, 0x68	; 104
    1572:	59 f4       	brne	.+22     	; 0x158a <vfprintf+0x108>
    1574:	ee 85       	ldd	r30, Y+14	; 0x0e
    1576:	ff 85       	ldd	r31, Y+15	; 0x0f
    1578:	93 fd       	sbrc	r25, 3
    157a:	85 91       	lpm	r24, Z+
    157c:	93 ff       	sbrs	r25, 3
    157e:	81 91       	ld	r24, Z+
    1580:	ff 87       	std	Y+15, r31	; 0x0f
    1582:	ee 87       	std	Y+14, r30	; 0x0e
    1584:	88 23       	and	r24, r24
    1586:	09 f0       	breq	.+2      	; 0x158a <vfprintf+0x108>
    1588:	b8 cf       	rjmp	.-144    	; 0x14fa <vfprintf+0x78>
    158a:	98 2f       	mov	r25, r24
    158c:	95 54       	subi	r25, 0x45	; 69
    158e:	93 30       	cpi	r25, 0x03	; 3
    1590:	18 f4       	brcc	.+6      	; 0x1598 <vfprintf+0x116>
    1592:	10 61       	ori	r17, 0x10	; 16
    1594:	80 5e       	subi	r24, 0xE0	; 224
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <vfprintf+0x122>
    1598:	98 2f       	mov	r25, r24
    159a:	95 56       	subi	r25, 0x65	; 101
    159c:	93 30       	cpi	r25, 0x03	; 3
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <vfprintf+0x120>
    15a0:	a2 c1       	rjmp	.+836    	; 0x18e6 <vfprintf+0x464>
    15a2:	1f 7e       	andi	r17, 0xEF	; 239
    15a4:	16 fd       	sbrc	r17, 6
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x12a>
    15a8:	e6 e0       	ldi	r30, 0x06	; 6
    15aa:	fe 2e       	mov	r15, r30
    15ac:	1f 73       	andi	r17, 0x3F	; 63
    15ae:	85 36       	cpi	r24, 0x65	; 101
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <vfprintf+0x134>
    15b2:	10 64       	ori	r17, 0x40	; 64
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0x140>
    15b6:	86 36       	cpi	r24, 0x66	; 102
    15b8:	11 f4       	brne	.+4      	; 0x15be <vfprintf+0x13c>
    15ba:	10 68       	ori	r17, 0x80	; 128
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <vfprintf+0x140>
    15be:	f1 10       	cpse	r15, r1
    15c0:	fa 94       	dec	r15
    15c2:	17 ff       	sbrs	r17, 7
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <vfprintf+0x152>
    15c6:	fb e3       	ldi	r31, 0x3B	; 59
    15c8:	ff 15       	cp	r31, r15
    15ca:	48 f0       	brcs	.+18     	; 0x15de <vfprintf+0x15c>
    15cc:	ef 2c       	mov	r14, r15
    15ce:	e3 94       	inc	r14
    15d0:	27 e0       	ldi	r18, 0x07	; 7
    15d2:	0d c0       	rjmp	.+26     	; 0x15ee <vfprintf+0x16c>
    15d4:	27 e0       	ldi	r18, 0x07	; 7
    15d6:	2f 15       	cp	r18, r15
    15d8:	30 f0       	brcs	.+12     	; 0x15e6 <vfprintf+0x164>
    15da:	2f 2d       	mov	r18, r15
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <vfprintf+0x16a>
    15de:	27 e0       	ldi	r18, 0x07	; 7
    15e0:	7c e3       	ldi	r23, 0x3C	; 60
    15e2:	e7 2e       	mov	r14, r23
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <vfprintf+0x16c>
    15e6:	27 e0       	ldi	r18, 0x07	; 7
    15e8:	67 e0       	ldi	r22, 0x07	; 7
    15ea:	f6 2e       	mov	r15, r22
    15ec:	ee 24       	eor	r14, r14
    15ee:	ca 01       	movw	r24, r20
    15f0:	04 96       	adiw	r24, 0x04	; 4
    15f2:	9d 87       	std	Y+13, r25	; 0x0d
    15f4:	8c 87       	std	Y+12, r24	; 0x0c
    15f6:	fa 01       	movw	r30, r20
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	a1 01       	movw	r20, r2
    1602:	0e 2d       	mov	r16, r14
    1604:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__ftoa_engine>
    1608:	5c 01       	movw	r10, r24
    160a:	c9 80       	ldd	r12, Y+1	; 0x01
    160c:	2c 2d       	mov	r18, r12
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	39 8b       	std	Y+17, r19	; 0x11
    1612:	28 8b       	std	Y+16, r18	; 0x10
    1614:	c0 fe       	sbrs	r12, 0
    1616:	03 c0       	rjmp	.+6      	; 0x161e <vfprintf+0x19c>
    1618:	38 89       	ldd	r19, Y+16	; 0x10
    161a:	33 ff       	sbrs	r19, 3
    161c:	06 c0       	rjmp	.+12     	; 0x162a <vfprintf+0x1a8>
    161e:	11 fd       	sbrc	r17, 1
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0x1ac>
    1622:	12 ff       	sbrs	r17, 2
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x1b0>
    1626:	00 e2       	ldi	r16, 0x20	; 32
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <vfprintf+0x1b2>
    162a:	0d e2       	ldi	r16, 0x2D	; 45
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <vfprintf+0x1b2>
    162e:	0b e2       	ldi	r16, 0x2B	; 43
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <vfprintf+0x1b2>
    1632:	00 e0       	ldi	r16, 0x00	; 0
    1634:	88 89       	ldd	r24, Y+16	; 0x10
    1636:	99 89       	ldd	r25, Y+17	; 0x11
    1638:	8c 70       	andi	r24, 0x0C	; 12
    163a:	90 70       	andi	r25, 0x00	; 0
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	09 f4       	brne	.+2      	; 0x1642 <vfprintf+0x1c0>
    1640:	3c c0       	rjmp	.+120    	; 0x16ba <vfprintf+0x238>
    1642:	00 23       	and	r16, r16
    1644:	11 f0       	breq	.+4      	; 0x164a <vfprintf+0x1c8>
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	01 c0       	rjmp	.+2      	; 0x164c <vfprintf+0x1ca>
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	8d 15       	cp	r24, r13
    164e:	58 f4       	brcc	.+22     	; 0x1666 <vfprintf+0x1e4>
    1650:	d8 1a       	sub	r13, r24
    1652:	13 fd       	sbrc	r17, 3
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <vfprintf+0x1e6>
    1656:	80 e2       	ldi	r24, 0x20	; 32
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	b4 01       	movw	r22, r8
    165c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1660:	da 94       	dec	r13
    1662:	c9 f7       	brne	.-14     	; 0x1656 <vfprintf+0x1d4>
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <vfprintf+0x1e6>
    1666:	dd 24       	eor	r13, r13
    1668:	00 23       	and	r16, r16
    166a:	29 f0       	breq	.+10     	; 0x1676 <vfprintf+0x1f4>
    166c:	80 2f       	mov	r24, r16
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b4 01       	movw	r22, r8
    1672:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1676:	88 89       	ldd	r24, Y+16	; 0x10
    1678:	83 fd       	sbrc	r24, 3
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <vfprintf+0x204>
    167c:	3c e6       	ldi	r19, 0x6C	; 108
    167e:	e3 2e       	mov	r14, r19
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	f3 2e       	mov	r15, r19
    1684:	11 c0       	rjmp	.+34     	; 0x16a8 <vfprintf+0x226>
    1686:	28 e6       	ldi	r18, 0x68	; 104
    1688:	e2 2e       	mov	r14, r18
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	f2 2e       	mov	r15, r18
    168e:	0c c0       	rjmp	.+24     	; 0x16a8 <vfprintf+0x226>
    1690:	01 15       	cp	r16, r1
    1692:	11 05       	cpc	r17, r1
    1694:	09 f0       	breq	.+2      	; 0x1698 <vfprintf+0x216>
    1696:	80 52       	subi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	b4 01       	movw	r22, r8
    169c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    16a0:	08 94       	sec
    16a2:	e1 1c       	adc	r14, r1
    16a4:	f1 1c       	adc	r15, r1
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <vfprintf+0x22e>
    16a8:	01 2f       	mov	r16, r17
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	00 71       	andi	r16, 0x10	; 16
    16ae:	10 70       	andi	r17, 0x00	; 0
    16b0:	f7 01       	movw	r30, r14
    16b2:	84 91       	lpm	r24, Z
    16b4:	88 23       	and	r24, r24
    16b6:	61 f7       	brne	.-40     	; 0x1690 <vfprintf+0x20e>
    16b8:	63 c2       	rjmp	.+1222   	; 0x1b80 <vfprintf+0x6fe>
    16ba:	17 ff       	sbrs	r17, 7
    16bc:	0e c0       	rjmp	.+28     	; 0x16da <vfprintf+0x258>
    16be:	ea 0c       	add	r14, r10
    16c0:	f8 89       	ldd	r31, Y+16	; 0x10
    16c2:	f4 ff       	sbrs	r31, 4
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <vfprintf+0x24c>
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	81 33       	cpi	r24, 0x31	; 49
    16ca:	09 f4       	brne	.+2      	; 0x16ce <vfprintf+0x24c>
    16cc:	ea 94       	dec	r14
    16ce:	1e 14       	cp	r1, r14
    16d0:	4c f5       	brge	.+82     	; 0x1724 <vfprintf+0x2a2>
    16d2:	28 e0       	ldi	r18, 0x08	; 8
    16d4:	2e 15       	cp	r18, r14
    16d6:	48 f1       	brcs	.+82     	; 0x172a <vfprintf+0x2a8>
    16d8:	2c c0       	rjmp	.+88     	; 0x1732 <vfprintf+0x2b0>
    16da:	16 fd       	sbrc	r17, 6
    16dc:	2a c0       	rjmp	.+84     	; 0x1732 <vfprintf+0x2b0>
    16de:	8f 2d       	mov	r24, r15
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	8a 15       	cp	r24, r10
    16e4:	9b 05       	cpc	r25, r11
    16e6:	44 f0       	brlt	.+16     	; 0x16f8 <vfprintf+0x276>
    16e8:	3c ef       	ldi	r19, 0xFC	; 252
    16ea:	a3 16       	cp	r10, r19
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	b3 06       	cpc	r11, r19
    16f0:	1c f0       	brlt	.+6      	; 0x16f8 <vfprintf+0x276>
    16f2:	10 68       	ori	r17, 0x80	; 128
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <vfprintf+0x276>
    16f6:	fa 94       	dec	r15
    16f8:	ff 20       	and	r15, r15
    16fa:	49 f0       	breq	.+18     	; 0x170e <vfprintf+0x28c>
    16fc:	e2 e0       	ldi	r30, 0x02	; 2
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	ec 0f       	add	r30, r28
    1702:	fd 1f       	adc	r31, r29
    1704:	ef 0d       	add	r30, r15
    1706:	f1 1d       	adc	r31, r1
    1708:	80 81       	ld	r24, Z
    170a:	80 33       	cpi	r24, 0x30	; 48
    170c:	a1 f3       	breq	.-24     	; 0x16f6 <vfprintf+0x274>
    170e:	17 ff       	sbrs	r17, 7
    1710:	10 c0       	rjmp	.+32     	; 0x1732 <vfprintf+0x2b0>
    1712:	ef 2c       	mov	r14, r15
    1714:	e3 94       	inc	r14
    1716:	8f 2d       	mov	r24, r15
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a8 16       	cp	r10, r24
    171c:	b9 06       	cpc	r11, r25
    171e:	44 f4       	brge	.+16     	; 0x1730 <vfprintf+0x2ae>
    1720:	fa 18       	sub	r15, r10
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <vfprintf+0x2b0>
    1724:	ee 24       	eor	r14, r14
    1726:	e3 94       	inc	r14
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <vfprintf+0x2b0>
    172a:	98 e0       	ldi	r25, 0x08	; 8
    172c:	e9 2e       	mov	r14, r25
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <vfprintf+0x2b0>
    1730:	ff 24       	eor	r15, r15
    1732:	17 ff       	sbrs	r17, 7
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <vfprintf+0x2c2>
    1736:	1a 14       	cp	r1, r10
    1738:	1b 04       	cpc	r1, r11
    173a:	3c f4       	brge	.+14     	; 0x174a <vfprintf+0x2c8>
    173c:	95 01       	movw	r18, r10
    173e:	2f 5f       	subi	r18, 0xFF	; 255
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	05 c0       	rjmp	.+10     	; 0x174e <vfprintf+0x2cc>
    1744:	25 e0       	ldi	r18, 0x05	; 5
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x2cc>
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	00 23       	and	r16, r16
    1750:	11 f0       	breq	.+4      	; 0x1756 <vfprintf+0x2d4>
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	ff 20       	and	r15, r15
    1758:	29 f0       	breq	.+10     	; 0x1764 <vfprintf+0x2e2>
    175a:	8f 2d       	mov	r24, r15
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	28 0f       	add	r18, r24
    1762:	39 1f       	adc	r19, r25
    1764:	8d 2d       	mov	r24, r13
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	14 f4       	brge	.+4      	; 0x1772 <vfprintf+0x2f0>
    176e:	d2 1a       	sub	r13, r18
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <vfprintf+0x2f2>
    1772:	dd 24       	eor	r13, r13
    1774:	61 2e       	mov	r6, r17
    1776:	77 24       	eor	r7, r7
    1778:	c3 01       	movw	r24, r6
    177a:	89 70       	andi	r24, 0x09	; 9
    177c:	90 70       	andi	r25, 0x00	; 0
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	49 f4       	brne	.+18     	; 0x1794 <vfprintf+0x312>
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <vfprintf+0x30e>
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	b4 01       	movw	r22, r8
    178a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    178e:	da 94       	dec	r13
    1790:	dd 20       	and	r13, r13
    1792:	c1 f7       	brne	.-16     	; 0x1784 <vfprintf+0x302>
    1794:	00 23       	and	r16, r16
    1796:	29 f0       	breq	.+10     	; 0x17a2 <vfprintf+0x320>
    1798:	80 2f       	mov	r24, r16
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	b4 01       	movw	r22, r8
    179e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    17a2:	63 fc       	sbrc	r6, 3
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <vfprintf+0x336>
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x332>
    17a8:	80 e3       	ldi	r24, 0x30	; 48
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	b4 01       	movw	r22, r8
    17ae:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    17b2:	da 94       	dec	r13
    17b4:	dd 20       	and	r13, r13
    17b6:	c1 f7       	brne	.-16     	; 0x17a8 <vfprintf+0x326>
    17b8:	17 ff       	sbrs	r17, 7
    17ba:	48 c0       	rjmp	.+144    	; 0x184c <vfprintf+0x3ca>
    17bc:	85 01       	movw	r16, r10
    17be:	b7 fe       	sbrs	r11, 7
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <vfprintf+0x344>
    17c2:	00 e0       	ldi	r16, 0x00	; 0
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	66 24       	eor	r6, r6
    17c8:	77 24       	eor	r7, r7
    17ca:	95 01       	movw	r18, r10
    17cc:	2e 19       	sub	r18, r14
    17ce:	31 09       	sbc	r19, r1
    17d0:	3b 8b       	std	Y+19, r19	; 0x13
    17d2:	2a 8b       	std	Y+18, r18	; 0x12
    17d4:	25 01       	movw	r4, r10
    17d6:	40 1a       	sub	r4, r16
    17d8:	51 0a       	sbc	r5, r17
    17da:	42 0c       	add	r4, r2
    17dc:	53 1c       	adc	r5, r3
    17de:	6f 2d       	mov	r22, r15
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	ee 24       	eor	r14, r14
    17e4:	ff 24       	eor	r15, r15
    17e6:	e6 1a       	sub	r14, r22
    17e8:	f7 0a       	sbc	r15, r23
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	0f 3f       	cpi	r16, 0xFF	; 255
    17ee:	13 07       	cpc	r17, r19
    17f0:	29 f4       	brne	.+10     	; 0x17fc <vfprintf+0x37a>
    17f2:	8e e2       	ldi	r24, 0x2E	; 46
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b4 01       	movw	r22, r8
    17f8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    17fc:	a0 16       	cp	r10, r16
    17fe:	b1 06       	cpc	r11, r17
    1800:	54 f0       	brlt	.+20     	; 0x1816 <vfprintf+0x394>
    1802:	2a 89       	ldd	r18, Y+18	; 0x12
    1804:	3b 89       	ldd	r19, Y+19	; 0x13
    1806:	20 17       	cp	r18, r16
    1808:	31 07       	cpc	r19, r17
    180a:	2c f4       	brge	.+10     	; 0x1816 <vfprintf+0x394>
    180c:	f2 01       	movw	r30, r4
    180e:	e6 0d       	add	r30, r6
    1810:	f7 1d       	adc	r31, r7
    1812:	81 81       	ldd	r24, Z+1	; 0x01
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <vfprintf+0x396>
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	01 50       	subi	r16, 0x01	; 1
    181a:	10 40       	sbci	r17, 0x00	; 0
    181c:	08 94       	sec
    181e:	61 1c       	adc	r6, r1
    1820:	71 1c       	adc	r7, r1
    1822:	0e 15       	cp	r16, r14
    1824:	1f 05       	cpc	r17, r15
    1826:	2c f0       	brlt	.+10     	; 0x1832 <vfprintf+0x3b0>
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	b4 01       	movw	r22, r8
    182c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1830:	dc cf       	rjmp	.-72     	; 0x17ea <vfprintf+0x368>
    1832:	0a 15       	cp	r16, r10
    1834:	1b 05       	cpc	r17, r11
    1836:	41 f4       	brne	.+16     	; 0x1848 <vfprintf+0x3c6>
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	96 33       	cpi	r25, 0x36	; 54
    183c:	20 f4       	brcc	.+8      	; 0x1846 <vfprintf+0x3c4>
    183e:	95 33       	cpi	r25, 0x35	; 53
    1840:	19 f4       	brne	.+6      	; 0x1848 <vfprintf+0x3c6>
    1842:	38 89       	ldd	r19, Y+16	; 0x10
    1844:	34 ff       	sbrs	r19, 4
    1846:	81 e3       	ldi	r24, 0x31	; 49
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	49 c0       	rjmp	.+146    	; 0x18de <vfprintf+0x45c>
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	81 33       	cpi	r24, 0x31	; 49
    1850:	11 f0       	breq	.+4      	; 0x1856 <vfprintf+0x3d4>
    1852:	9f ee       	ldi	r25, 0xEF	; 239
    1854:	c9 22       	and	r12, r25
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	b4 01       	movw	r22, r8
    185a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    185e:	ff 20       	and	r15, r15
    1860:	89 f0       	breq	.+34     	; 0x1884 <vfprintf+0x402>
    1862:	8e e2       	ldi	r24, 0x2E	; 46
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	b4 01       	movw	r22, r8
    1868:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    186c:	12 e0       	ldi	r17, 0x02	; 2
    186e:	f1 01       	movw	r30, r2
    1870:	e1 0f       	add	r30, r17
    1872:	f1 1d       	adc	r31, r1
    1874:	1f 5f       	subi	r17, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b4 01       	movw	r22, r8
    187c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1880:	fa 94       	dec	r15
    1882:	a9 f7       	brne	.-22     	; 0x186e <vfprintf+0x3ec>
    1884:	64 fe       	sbrs	r6, 4
    1886:	03 c0       	rjmp	.+6      	; 0x188e <vfprintf+0x40c>
    1888:	85 e4       	ldi	r24, 0x45	; 69
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <vfprintf+0x410>
    188e:	85 e6       	ldi	r24, 0x65	; 101
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	b4 01       	movw	r22, r8
    1894:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1898:	b7 fc       	sbrc	r11, 7
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <vfprintf+0x424>
    189c:	a1 14       	cp	r10, r1
    189e:	b1 04       	cpc	r11, r1
    18a0:	41 f4       	brne	.+16     	; 0x18b2 <vfprintf+0x430>
    18a2:	c4 fe       	sbrs	r12, 4
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <vfprintf+0x430>
    18a6:	b0 94       	com	r11
    18a8:	a1 94       	neg	r10
    18aa:	b1 08       	sbc	r11, r1
    18ac:	b3 94       	inc	r11
    18ae:	8d e2       	ldi	r24, 0x2D	; 45
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <vfprintf+0x432>
    18b2:	8b e2       	ldi	r24, 0x2B	; 43
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	b4 01       	movw	r22, r8
    18b8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    18bc:	80 e3       	ldi	r24, 0x30	; 48
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <vfprintf+0x448>
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	e6 ef       	ldi	r30, 0xF6	; 246
    18c4:	ff ef       	ldi	r31, 0xFF	; 255
    18c6:	ae 0e       	add	r10, r30
    18c8:	bf 1e       	adc	r11, r31
    18ca:	fa e0       	ldi	r31, 0x0A	; 10
    18cc:	af 16       	cp	r10, r31
    18ce:	b1 04       	cpc	r11, r1
    18d0:	bc f7       	brge	.-18     	; 0x18c0 <vfprintf+0x43e>
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	b4 01       	movw	r22, r8
    18d6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    18da:	c5 01       	movw	r24, r10
    18dc:	c0 96       	adiw	r24, 0x30	; 48
    18de:	b4 01       	movw	r22, r8
    18e0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    18e4:	4d c1       	rjmp	.+666    	; 0x1b80 <vfprintf+0x6fe>
    18e6:	83 36       	cpi	r24, 0x63	; 99
    18e8:	31 f0       	breq	.+12     	; 0x18f6 <vfprintf+0x474>
    18ea:	83 37       	cpi	r24, 0x73	; 115
    18ec:	89 f0       	breq	.+34     	; 0x1910 <vfprintf+0x48e>
    18ee:	83 35       	cpi	r24, 0x53	; 83
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <vfprintf+0x472>
    18f2:	59 c0       	rjmp	.+178    	; 0x19a6 <vfprintf+0x524>
    18f4:	22 c0       	rjmp	.+68     	; 0x193a <vfprintf+0x4b8>
    18f6:	9a 01       	movw	r18, r20
    18f8:	2e 5f       	subi	r18, 0xFE	; 254
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	3d 87       	std	Y+13, r19	; 0x0d
    18fe:	2c 87       	std	Y+12, r18	; 0x0c
    1900:	fa 01       	movw	r30, r20
    1902:	80 81       	ld	r24, Z
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	e8 2e       	mov	r14, r24
    190a:	f1 2c       	mov	r15, r1
    190c:	51 01       	movw	r10, r2
    190e:	13 c0       	rjmp	.+38     	; 0x1936 <vfprintf+0x4b4>
    1910:	9a 01       	movw	r18, r20
    1912:	2e 5f       	subi	r18, 0xFE	; 254
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	3d 87       	std	Y+13, r19	; 0x0d
    1918:	2c 87       	std	Y+12, r18	; 0x0c
    191a:	fa 01       	movw	r30, r20
    191c:	a0 80       	ld	r10, Z
    191e:	b1 80       	ldd	r11, Z+1	; 0x01
    1920:	16 ff       	sbrs	r17, 6
    1922:	03 c0       	rjmp	.+6      	; 0x192a <vfprintf+0x4a8>
    1924:	6f 2d       	mov	r22, r15
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x4ac>
    192a:	6f ef       	ldi	r22, 0xFF	; 255
    192c:	7f ef       	ldi	r23, 0xFF	; 255
    192e:	c5 01       	movw	r24, r10
    1930:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <strnlen>
    1934:	7c 01       	movw	r14, r24
    1936:	1f 77       	andi	r17, 0x7F	; 127
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <vfprintf+0x4e0>
    193a:	9a 01       	movw	r18, r20
    193c:	2e 5f       	subi	r18, 0xFE	; 254
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	3d 87       	std	Y+13, r19	; 0x0d
    1942:	2c 87       	std	Y+12, r18	; 0x0c
    1944:	fa 01       	movw	r30, r20
    1946:	a0 80       	ld	r10, Z
    1948:	b1 80       	ldd	r11, Z+1	; 0x01
    194a:	16 ff       	sbrs	r17, 6
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <vfprintf+0x4d2>
    194e:	6f 2d       	mov	r22, r15
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0x4d6>
    1954:	6f ef       	ldi	r22, 0xFF	; 255
    1956:	7f ef       	ldi	r23, 0xFF	; 255
    1958:	c5 01       	movw	r24, r10
    195a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <strnlen_P>
    195e:	7c 01       	movw	r14, r24
    1960:	10 68       	ori	r17, 0x80	; 128
    1962:	13 fd       	sbrc	r17, 3
    1964:	1c c0       	rjmp	.+56     	; 0x199e <vfprintf+0x51c>
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <vfprintf+0x4f2>
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	b4 01       	movw	r22, r8
    196e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1972:	da 94       	dec	r13
    1974:	8d 2d       	mov	r24, r13
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	e8 16       	cp	r14, r24
    197a:	f9 06       	cpc	r15, r25
    197c:	a8 f3       	brcs	.-22     	; 0x1968 <vfprintf+0x4e6>
    197e:	0f c0       	rjmp	.+30     	; 0x199e <vfprintf+0x51c>
    1980:	f5 01       	movw	r30, r10
    1982:	17 fd       	sbrc	r17, 7
    1984:	85 91       	lpm	r24, Z+
    1986:	17 ff       	sbrs	r17, 7
    1988:	81 91       	ld	r24, Z+
    198a:	5f 01       	movw	r10, r30
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1994:	d1 10       	cpse	r13, r1
    1996:	da 94       	dec	r13
    1998:	08 94       	sec
    199a:	e1 08       	sbc	r14, r1
    199c:	f1 08       	sbc	r15, r1
    199e:	e1 14       	cp	r14, r1
    19a0:	f1 04       	cpc	r15, r1
    19a2:	71 f7       	brne	.-36     	; 0x1980 <vfprintf+0x4fe>
    19a4:	ed c0       	rjmp	.+474    	; 0x1b80 <vfprintf+0x6fe>
    19a6:	84 36       	cpi	r24, 0x64	; 100
    19a8:	11 f0       	breq	.+4      	; 0x19ae <vfprintf+0x52c>
    19aa:	89 36       	cpi	r24, 0x69	; 105
    19ac:	71 f5       	brne	.+92     	; 0x1a0a <vfprintf+0x588>
    19ae:	9a 01       	movw	r18, r20
    19b0:	17 ff       	sbrs	r17, 7
    19b2:	0a c0       	rjmp	.+20     	; 0x19c8 <vfprintf+0x546>
    19b4:	2c 5f       	subi	r18, 0xFC	; 252
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	3d 87       	std	Y+13, r19	; 0x0d
    19ba:	2c 87       	std	Y+12, r18	; 0x0c
    19bc:	fa 01       	movw	r30, r20
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	a2 81       	ldd	r26, Z+2	; 0x02
    19c4:	b3 81       	ldd	r27, Z+3	; 0x03
    19c6:	0b c0       	rjmp	.+22     	; 0x19de <vfprintf+0x55c>
    19c8:	2e 5f       	subi	r18, 0xFE	; 254
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	3d 87       	std	Y+13, r19	; 0x0d
    19ce:	2c 87       	std	Y+12, r18	; 0x0c
    19d0:	fa 01       	movw	r30, r20
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	aa 27       	eor	r26, r26
    19d8:	97 fd       	sbrc	r25, 7
    19da:	a0 95       	com	r26
    19dc:	ba 2f       	mov	r27, r26
    19de:	01 2f       	mov	r16, r17
    19e0:	0f 76       	andi	r16, 0x6F	; 111
    19e2:	b7 ff       	sbrs	r27, 7
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <vfprintf+0x574>
    19e6:	b0 95       	com	r27
    19e8:	a0 95       	com	r26
    19ea:	90 95       	com	r25
    19ec:	81 95       	neg	r24
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	af 4f       	sbci	r26, 0xFF	; 255
    19f2:	bf 4f       	sbci	r27, 0xFF	; 255
    19f4:	00 68       	ori	r16, 0x80	; 128
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	a1 01       	movw	r20, r2
    19fc:	2a e0       	ldi	r18, 0x0A	; 10
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__ultoa_invert>
    1a04:	e8 2e       	mov	r14, r24
    1a06:	e2 18       	sub	r14, r2
    1a08:	41 c0       	rjmp	.+130    	; 0x1a8c <vfprintf+0x60a>
    1a0a:	85 37       	cpi	r24, 0x75	; 117
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <vfprintf+0x594>
    1a0e:	1f 7e       	andi	r17, 0xEF	; 239
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	20 c0       	rjmp	.+64     	; 0x1a56 <vfprintf+0x5d4>
    1a16:	19 7f       	andi	r17, 0xF9	; 249
    1a18:	8f 36       	cpi	r24, 0x6F	; 111
    1a1a:	a9 f0       	breq	.+42     	; 0x1a46 <vfprintf+0x5c4>
    1a1c:	80 37       	cpi	r24, 0x70	; 112
    1a1e:	20 f4       	brcc	.+8      	; 0x1a28 <vfprintf+0x5a6>
    1a20:	88 35       	cpi	r24, 0x58	; 88
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <vfprintf+0x5a4>
    1a24:	b0 c0       	rjmp	.+352    	; 0x1b86 <vfprintf+0x704>
    1a26:	0b c0       	rjmp	.+22     	; 0x1a3e <vfprintf+0x5bc>
    1a28:	80 37       	cpi	r24, 0x70	; 112
    1a2a:	21 f0       	breq	.+8      	; 0x1a34 <vfprintf+0x5b2>
    1a2c:	88 37       	cpi	r24, 0x78	; 120
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <vfprintf+0x5b0>
    1a30:	aa c0       	rjmp	.+340    	; 0x1b86 <vfprintf+0x704>
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <vfprintf+0x5b4>
    1a34:	10 61       	ori	r17, 0x10	; 16
    1a36:	14 ff       	sbrs	r17, 4
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <vfprintf+0x5ca>
    1a3a:	14 60       	ori	r17, 0x04	; 4
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <vfprintf+0x5ca>
    1a3e:	14 ff       	sbrs	r17, 4
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <vfprintf+0x5d0>
    1a42:	16 60       	ori	r17, 0x06	; 6
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <vfprintf+0x5d0>
    1a46:	28 e0       	ldi	r18, 0x08	; 8
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <vfprintf+0x5d4>
    1a4c:	20 e1       	ldi	r18, 0x10	; 16
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <vfprintf+0x5d4>
    1a52:	20 e1       	ldi	r18, 0x10	; 16
    1a54:	32 e0       	ldi	r19, 0x02	; 2
    1a56:	ca 01       	movw	r24, r20
    1a58:	17 ff       	sbrs	r17, 7
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <vfprintf+0x5ec>
    1a5c:	04 96       	adiw	r24, 0x04	; 4
    1a5e:	9d 87       	std	Y+13, r25	; 0x0d
    1a60:	8c 87       	std	Y+12, r24	; 0x0c
    1a62:	fa 01       	movw	r30, r20
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <vfprintf+0x5fc>
    1a6e:	02 96       	adiw	r24, 0x02	; 2
    1a70:	9d 87       	std	Y+13, r25	; 0x0d
    1a72:	8c 87       	std	Y+12, r24	; 0x0c
    1a74:	fa 01       	movw	r30, r20
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a1 01       	movw	r20, r2
    1a80:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__ultoa_invert>
    1a84:	e8 2e       	mov	r14, r24
    1a86:	e2 18       	sub	r14, r2
    1a88:	01 2f       	mov	r16, r17
    1a8a:	0f 77       	andi	r16, 0x7F	; 127
    1a8c:	06 ff       	sbrs	r16, 6
    1a8e:	09 c0       	rjmp	.+18     	; 0x1aa2 <vfprintf+0x620>
    1a90:	0e 7f       	andi	r16, 0xFE	; 254
    1a92:	ef 14       	cp	r14, r15
    1a94:	30 f4       	brcc	.+12     	; 0x1aa2 <vfprintf+0x620>
    1a96:	04 ff       	sbrs	r16, 4
    1a98:	06 c0       	rjmp	.+12     	; 0x1aa6 <vfprintf+0x624>
    1a9a:	02 fd       	sbrc	r16, 2
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <vfprintf+0x624>
    1a9e:	0f 7e       	andi	r16, 0xEF	; 239
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <vfprintf+0x624>
    1aa2:	1e 2d       	mov	r17, r14
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <vfprintf+0x626>
    1aa6:	1f 2d       	mov	r17, r15
    1aa8:	80 2f       	mov	r24, r16
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	04 ff       	sbrs	r16, 4
    1aae:	0c c0       	rjmp	.+24     	; 0x1ac8 <vfprintf+0x646>
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ee 0d       	add	r30, r14
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	20 81       	ld	r18, Z
    1ab8:	20 33       	cpi	r18, 0x30	; 48
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <vfprintf+0x63e>
    1abc:	09 7e       	andi	r16, 0xE9	; 233
    1abe:	09 c0       	rjmp	.+18     	; 0x1ad2 <vfprintf+0x650>
    1ac0:	02 ff       	sbrs	r16, 2
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x64e>
    1ac4:	1e 5f       	subi	r17, 0xFE	; 254
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <vfprintf+0x650>
    1ac8:	86 78       	andi	r24, 0x86	; 134
    1aca:	90 70       	andi	r25, 0x00	; 0
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <vfprintf+0x650>
    1ad0:	1f 5f       	subi	r17, 0xFF	; 255
    1ad2:	a0 2e       	mov	r10, r16
    1ad4:	bb 24       	eor	r11, r11
    1ad6:	03 fd       	sbrc	r16, 3
    1ad8:	12 c0       	rjmp	.+36     	; 0x1afe <vfprintf+0x67c>
    1ada:	00 ff       	sbrs	r16, 0
    1adc:	0d c0       	rjmp	.+26     	; 0x1af8 <vfprintf+0x676>
    1ade:	fe 2c       	mov	r15, r14
    1ae0:	1d 15       	cp	r17, r13
    1ae2:	50 f4       	brcc	.+20     	; 0x1af8 <vfprintf+0x676>
    1ae4:	fd 0c       	add	r15, r13
    1ae6:	f1 1a       	sub	r15, r17
    1ae8:	1d 2d       	mov	r17, r13
    1aea:	06 c0       	rjmp	.+12     	; 0x1af8 <vfprintf+0x676>
    1aec:	80 e2       	ldi	r24, 0x20	; 32
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	b4 01       	movw	r22, r8
    1af2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1af6:	1f 5f       	subi	r17, 0xFF	; 255
    1af8:	1d 15       	cp	r17, r13
    1afa:	c0 f3       	brcs	.-16     	; 0x1aec <vfprintf+0x66a>
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <vfprintf+0x684>
    1afe:	1d 15       	cp	r17, r13
    1b00:	10 f4       	brcc	.+4      	; 0x1b06 <vfprintf+0x684>
    1b02:	d1 1a       	sub	r13, r17
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <vfprintf+0x686>
    1b06:	dd 24       	eor	r13, r13
    1b08:	a4 fe       	sbrs	r10, 4
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <vfprintf+0x6a8>
    1b0c:	80 e3       	ldi	r24, 0x30	; 48
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	b4 01       	movw	r22, r8
    1b12:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1b16:	a2 fe       	sbrs	r10, 2
    1b18:	1f c0       	rjmp	.+62     	; 0x1b58 <vfprintf+0x6d6>
    1b1a:	a1 fe       	sbrs	r10, 1
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <vfprintf+0x6a2>
    1b1e:	88 e5       	ldi	r24, 0x58	; 88
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <vfprintf+0x6c2>
    1b24:	88 e7       	ldi	r24, 0x78	; 120
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0d c0       	rjmp	.+26     	; 0x1b44 <vfprintf+0x6c2>
    1b2a:	c5 01       	movw	r24, r10
    1b2c:	86 78       	andi	r24, 0x86	; 134
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	91 f0       	breq	.+36     	; 0x1b58 <vfprintf+0x6d6>
    1b34:	a1 fc       	sbrc	r10, 1
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <vfprintf+0x6ba>
    1b38:	80 e2       	ldi	r24, 0x20	; 32
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <vfprintf+0x6bc>
    1b3c:	8b e2       	ldi	r24, 0x2B	; 43
    1b3e:	07 fd       	sbrc	r16, 7
    1b40:	8d e2       	ldi	r24, 0x2D	; 45
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	b4 01       	movw	r22, r8
    1b46:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <vfprintf+0x6d6>
    1b4c:	80 e3       	ldi	r24, 0x30	; 48
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	b4 01       	movw	r22, r8
    1b52:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1b56:	fa 94       	dec	r15
    1b58:	ef 14       	cp	r14, r15
    1b5a:	c0 f3       	brcs	.-16     	; 0x1b4c <vfprintf+0x6ca>
    1b5c:	ea 94       	dec	r14
    1b5e:	f1 01       	movw	r30, r2
    1b60:	ee 0d       	add	r30, r14
    1b62:	f1 1d       	adc	r31, r1
    1b64:	80 81       	ld	r24, Z
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	b4 01       	movw	r22, r8
    1b6a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1b6e:	ee 20       	and	r14, r14
    1b70:	a9 f7       	brne	.-22     	; 0x1b5c <vfprintf+0x6da>
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <vfprintf+0x6fe>
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	b4 01       	movw	r22, r8
    1b7a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <fputc>
    1b7e:	da 94       	dec	r13
    1b80:	dd 20       	and	r13, r13
    1b82:	c1 f7       	brne	.-16     	; 0x1b74 <vfprintf+0x6f2>
    1b84:	8e cc       	rjmp	.-1764   	; 0x14a2 <vfprintf+0x20>
    1b86:	f4 01       	movw	r30, r8
    1b88:	86 81       	ldd	r24, Z+6	; 0x06
    1b8a:	97 81       	ldd	r25, Z+7	; 0x07
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <vfprintf+0x710>
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	9f ef       	ldi	r25, 0xFF	; 255
    1b92:	65 96       	adiw	r28, 0x15	; 21
    1b94:	e2 e1       	ldi	r30, 0x12	; 18
    1b96:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__epilogue_restores__>

00001b9a <__divmodhi4>:
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	09 2e       	mov	r0, r25
    1b9e:	07 26       	eor	r0, r23
    1ba0:	0a d0       	rcall	.+20     	; 0x1bb6 <__divmodhi4_neg1>
    1ba2:	77 fd       	sbrc	r23, 7
    1ba4:	04 d0       	rcall	.+8      	; 0x1bae <__divmodhi4_neg2>
    1ba6:	43 d0       	rcall	.+134    	; 0x1c2e <__udivmodhi4>
    1ba8:	06 d0       	rcall	.+12     	; 0x1bb6 <__divmodhi4_neg1>
    1baa:	00 20       	and	r0, r0
    1bac:	1a f4       	brpl	.+6      	; 0x1bb4 <__divmodhi4_exit>

00001bae <__divmodhi4_neg2>:
    1bae:	70 95       	com	r23
    1bb0:	61 95       	neg	r22
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255

00001bb4 <__divmodhi4_exit>:
    1bb4:	08 95       	ret

00001bb6 <__divmodhi4_neg1>:
    1bb6:	f6 f7       	brtc	.-4      	; 0x1bb4 <__divmodhi4_exit>
    1bb8:	90 95       	com	r25
    1bba:	81 95       	neg	r24
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	08 95       	ret

00001bc0 <__prologue_saves__>:
    1bc0:	2f 92       	push	r2
    1bc2:	3f 92       	push	r3
    1bc4:	4f 92       	push	r4
    1bc6:	5f 92       	push	r5
    1bc8:	6f 92       	push	r6
    1bca:	7f 92       	push	r7
    1bcc:	8f 92       	push	r8
    1bce:	9f 92       	push	r9
    1bd0:	af 92       	push	r10
    1bd2:	bf 92       	push	r11
    1bd4:	cf 92       	push	r12
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	ca 1b       	sub	r28, r26
    1bea:	db 0b       	sbc	r29, r27
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	09 94       	ijmp

00001bf8 <__epilogue_restores__>:
    1bf8:	2a 88       	ldd	r2, Y+18	; 0x12
    1bfa:	39 88       	ldd	r3, Y+17	; 0x11
    1bfc:	48 88       	ldd	r4, Y+16	; 0x10
    1bfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c00:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c02:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c04:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c06:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c08:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c0a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c0c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c0e:	df 80       	ldd	r13, Y+7	; 0x07
    1c10:	ee 80       	ldd	r14, Y+6	; 0x06
    1c12:	fd 80       	ldd	r15, Y+5	; 0x05
    1c14:	0c 81       	ldd	r16, Y+4	; 0x04
    1c16:	1b 81       	ldd	r17, Y+3	; 0x03
    1c18:	aa 81       	ldd	r26, Y+2	; 0x02
    1c1a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c1c:	ce 0f       	add	r28, r30
    1c1e:	d1 1d       	adc	r29, r1
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	ed 01       	movw	r28, r26
    1c2c:	08 95       	ret

00001c2e <__udivmodhi4>:
    1c2e:	aa 1b       	sub	r26, r26
    1c30:	bb 1b       	sub	r27, r27
    1c32:	51 e1       	ldi	r21, 0x11	; 17
    1c34:	07 c0       	rjmp	.+14     	; 0x1c44 <__udivmodhi4_ep>

00001c36 <__udivmodhi4_loop>:
    1c36:	aa 1f       	adc	r26, r26
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	a6 17       	cp	r26, r22
    1c3c:	b7 07       	cpc	r27, r23
    1c3e:	10 f0       	brcs	.+4      	; 0x1c44 <__udivmodhi4_ep>
    1c40:	a6 1b       	sub	r26, r22
    1c42:	b7 0b       	sbc	r27, r23

00001c44 <__udivmodhi4_ep>:
    1c44:	88 1f       	adc	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	5a 95       	dec	r21
    1c4a:	a9 f7       	brne	.-22     	; 0x1c36 <__udivmodhi4_loop>
    1c4c:	80 95       	com	r24
    1c4e:	90 95       	com	r25
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	08 95       	ret

00001c56 <abort>:
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	f8 94       	cli
    1c5c:	0c 94 27 10 	jmp	0x204e	; 0x204e <_exit>

00001c60 <__ftoa_engine>:
    1c60:	28 30       	cpi	r18, 0x08	; 8
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <__ftoa_engine+0x6>
    1c64:	27 e0       	ldi	r18, 0x07	; 7
    1c66:	33 27       	eor	r19, r19
    1c68:	da 01       	movw	r26, r20
    1c6a:	99 0f       	add	r25, r25
    1c6c:	31 1d       	adc	r19, r1
    1c6e:	87 fd       	sbrc	r24, 7
    1c70:	91 60       	ori	r25, 0x01	; 1
    1c72:	00 96       	adiw	r24, 0x00	; 0
    1c74:	61 05       	cpc	r22, r1
    1c76:	71 05       	cpc	r23, r1
    1c78:	39 f4       	brne	.+14     	; 0x1c88 <__ftoa_engine+0x28>
    1c7a:	32 60       	ori	r19, 0x02	; 2
    1c7c:	2e 5f       	subi	r18, 0xFE	; 254
    1c7e:	3d 93       	st	X+, r19
    1c80:	30 e3       	ldi	r19, 0x30	; 48
    1c82:	2a 95       	dec	r18
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <__ftoa_engine+0x1e>
    1c86:	08 95       	ret
    1c88:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8a:	30 f0       	brcs	.+12     	; 0x1c98 <__ftoa_engine+0x38>
    1c8c:	80 38       	cpi	r24, 0x80	; 128
    1c8e:	71 05       	cpc	r23, r1
    1c90:	61 05       	cpc	r22, r1
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <__ftoa_engine+0x36>
    1c94:	3c 5f       	subi	r19, 0xFC	; 252
    1c96:	3c 5f       	subi	r19, 0xFC	; 252
    1c98:	3d 93       	st	X+, r19
    1c9a:	91 30       	cpi	r25, 0x01	; 1
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <__ftoa_engine+0x40>
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	1f 93       	push	r17
    1ca8:	0f 93       	push	r16
    1caa:	ff 92       	push	r15
    1cac:	ef 92       	push	r14
    1cae:	19 2f       	mov	r17, r25
    1cb0:	98 7f       	andi	r25, 0xF8	; 248
    1cb2:	96 95       	lsr	r25
    1cb4:	e9 2f       	mov	r30, r25
    1cb6:	96 95       	lsr	r25
    1cb8:	96 95       	lsr	r25
    1cba:	e9 0f       	add	r30, r25
    1cbc:	ff 27       	eor	r31, r31
    1cbe:	e6 53       	subi	r30, 0x36	; 54
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	99 27       	eor	r25, r25
    1cc4:	33 27       	eor	r19, r19
    1cc6:	ee 24       	eor	r14, r14
    1cc8:	ff 24       	eor	r15, r15
    1cca:	a7 01       	movw	r20, r14
    1ccc:	e7 01       	movw	r28, r14
    1cce:	05 90       	lpm	r0, Z+
    1cd0:	08 94       	sec
    1cd2:	07 94       	ror	r0
    1cd4:	28 f4       	brcc	.+10     	; 0x1ce0 <__ftoa_engine+0x80>
    1cd6:	36 0f       	add	r19, r22
    1cd8:	e7 1e       	adc	r14, r23
    1cda:	f8 1e       	adc	r15, r24
    1cdc:	49 1f       	adc	r20, r25
    1cde:	51 1d       	adc	r21, r1
    1ce0:	66 0f       	add	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	88 1f       	adc	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	06 94       	lsr	r0
    1cea:	a1 f7       	brne	.-24     	; 0x1cd4 <__ftoa_engine+0x74>
    1cec:	05 90       	lpm	r0, Z+
    1cee:	07 94       	ror	r0
    1cf0:	28 f4       	brcc	.+10     	; 0x1cfc <__ftoa_engine+0x9c>
    1cf2:	e7 0e       	add	r14, r23
    1cf4:	f8 1e       	adc	r15, r24
    1cf6:	49 1f       	adc	r20, r25
    1cf8:	56 1f       	adc	r21, r22
    1cfa:	c1 1d       	adc	r28, r1
    1cfc:	77 0f       	add	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	66 1f       	adc	r22, r22
    1d04:	06 94       	lsr	r0
    1d06:	a1 f7       	brne	.-24     	; 0x1cf0 <__ftoa_engine+0x90>
    1d08:	05 90       	lpm	r0, Z+
    1d0a:	07 94       	ror	r0
    1d0c:	28 f4       	brcc	.+10     	; 0x1d18 <__ftoa_engine+0xb8>
    1d0e:	f8 0e       	add	r15, r24
    1d10:	49 1f       	adc	r20, r25
    1d12:	56 1f       	adc	r21, r22
    1d14:	c7 1f       	adc	r28, r23
    1d16:	d1 1d       	adc	r29, r1
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	66 1f       	adc	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	06 94       	lsr	r0
    1d22:	a1 f7       	brne	.-24     	; 0x1d0c <__ftoa_engine+0xac>
    1d24:	05 90       	lpm	r0, Z+
    1d26:	07 94       	ror	r0
    1d28:	20 f4       	brcc	.+8      	; 0x1d32 <__ftoa_engine+0xd2>
    1d2a:	49 0f       	add	r20, r25
    1d2c:	56 1f       	adc	r21, r22
    1d2e:	c7 1f       	adc	r28, r23
    1d30:	d8 1f       	adc	r29, r24
    1d32:	99 0f       	add	r25, r25
    1d34:	66 1f       	adc	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	06 94       	lsr	r0
    1d3c:	a9 f7       	brne	.-22     	; 0x1d28 <__ftoa_engine+0xc8>
    1d3e:	84 91       	lpm	r24, Z
    1d40:	10 95       	com	r17
    1d42:	17 70       	andi	r17, 0x07	; 7
    1d44:	41 f0       	breq	.+16     	; 0x1d56 <__ftoa_engine+0xf6>
    1d46:	d6 95       	lsr	r29
    1d48:	c7 95       	ror	r28
    1d4a:	57 95       	ror	r21
    1d4c:	47 95       	ror	r20
    1d4e:	f7 94       	ror	r15
    1d50:	e7 94       	ror	r14
    1d52:	1a 95       	dec	r17
    1d54:	c1 f7       	brne	.-16     	; 0x1d46 <__ftoa_engine+0xe6>
    1d56:	e0 e7       	ldi	r30, 0x70	; 112
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	68 94       	set
    1d5c:	15 90       	lpm	r1, Z+
    1d5e:	15 91       	lpm	r17, Z+
    1d60:	35 91       	lpm	r19, Z+
    1d62:	65 91       	lpm	r22, Z+
    1d64:	95 91       	lpm	r25, Z+
    1d66:	05 90       	lpm	r0, Z+
    1d68:	7f e2       	ldi	r23, 0x2F	; 47
    1d6a:	73 95       	inc	r23
    1d6c:	e1 18       	sub	r14, r1
    1d6e:	f1 0a       	sbc	r15, r17
    1d70:	43 0b       	sbc	r20, r19
    1d72:	56 0b       	sbc	r21, r22
    1d74:	c9 0b       	sbc	r28, r25
    1d76:	d0 09       	sbc	r29, r0
    1d78:	c0 f7       	brcc	.-16     	; 0x1d6a <__ftoa_engine+0x10a>
    1d7a:	e1 0c       	add	r14, r1
    1d7c:	f1 1e       	adc	r15, r17
    1d7e:	43 1f       	adc	r20, r19
    1d80:	56 1f       	adc	r21, r22
    1d82:	c9 1f       	adc	r28, r25
    1d84:	d0 1d       	adc	r29, r0
    1d86:	7e f4       	brtc	.+30     	; 0x1da6 <__ftoa_engine+0x146>
    1d88:	70 33       	cpi	r23, 0x30	; 48
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <__ftoa_engine+0x130>
    1d8c:	8a 95       	dec	r24
    1d8e:	e6 cf       	rjmp	.-52     	; 0x1d5c <__ftoa_engine+0xfc>
    1d90:	e8 94       	clt
    1d92:	01 50       	subi	r16, 0x01	; 1
    1d94:	30 f0       	brcs	.+12     	; 0x1da2 <__ftoa_engine+0x142>
    1d96:	08 0f       	add	r16, r24
    1d98:	0a f4       	brpl	.+2      	; 0x1d9c <__ftoa_engine+0x13c>
    1d9a:	00 27       	eor	r16, r16
    1d9c:	02 17       	cp	r16, r18
    1d9e:	08 f4       	brcc	.+2      	; 0x1da2 <__ftoa_engine+0x142>
    1da0:	20 2f       	mov	r18, r16
    1da2:	23 95       	inc	r18
    1da4:	02 2f       	mov	r16, r18
    1da6:	7a 33       	cpi	r23, 0x3A	; 58
    1da8:	28 f0       	brcs	.+10     	; 0x1db4 <__ftoa_engine+0x154>
    1daa:	79 e3       	ldi	r23, 0x39	; 57
    1dac:	7d 93       	st	X+, r23
    1dae:	2a 95       	dec	r18
    1db0:	e9 f7       	brne	.-6      	; 0x1dac <__ftoa_engine+0x14c>
    1db2:	10 c0       	rjmp	.+32     	; 0x1dd4 <__ftoa_engine+0x174>
    1db4:	7d 93       	st	X+, r23
    1db6:	2a 95       	dec	r18
    1db8:	89 f6       	brne	.-94     	; 0x1d5c <__ftoa_engine+0xfc>
    1dba:	06 94       	lsr	r0
    1dbc:	97 95       	ror	r25
    1dbe:	67 95       	ror	r22
    1dc0:	37 95       	ror	r19
    1dc2:	17 95       	ror	r17
    1dc4:	17 94       	ror	r1
    1dc6:	e1 18       	sub	r14, r1
    1dc8:	f1 0a       	sbc	r15, r17
    1dca:	43 0b       	sbc	r20, r19
    1dcc:	56 0b       	sbc	r21, r22
    1dce:	c9 0b       	sbc	r28, r25
    1dd0:	d0 09       	sbc	r29, r0
    1dd2:	98 f0       	brcs	.+38     	; 0x1dfa <__ftoa_engine+0x19a>
    1dd4:	23 95       	inc	r18
    1dd6:	7e 91       	ld	r23, -X
    1dd8:	73 95       	inc	r23
    1dda:	7a 33       	cpi	r23, 0x3A	; 58
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <__ftoa_engine+0x180>
    1dde:	70 e3       	ldi	r23, 0x30	; 48
    1de0:	7c 93       	st	X, r23
    1de2:	20 13       	cpse	r18, r16
    1de4:	b8 f7       	brcc	.-18     	; 0x1dd4 <__ftoa_engine+0x174>
    1de6:	7e 91       	ld	r23, -X
    1de8:	70 61       	ori	r23, 0x10	; 16
    1dea:	7d 93       	st	X+, r23
    1dec:	30 f0       	brcs	.+12     	; 0x1dfa <__ftoa_engine+0x19a>
    1dee:	83 95       	inc	r24
    1df0:	71 e3       	ldi	r23, 0x31	; 49
    1df2:	7d 93       	st	X+, r23
    1df4:	70 e3       	ldi	r23, 0x30	; 48
    1df6:	2a 95       	dec	r18
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <__ftoa_engine+0x192>
    1dfa:	11 24       	eor	r1, r1
    1dfc:	ef 90       	pop	r14
    1dfe:	ff 90       	pop	r15
    1e00:	0f 91       	pop	r16
    1e02:	1f 91       	pop	r17
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	99 27       	eor	r25, r25
    1e0a:	87 fd       	sbrc	r24, 7
    1e0c:	90 95       	com	r25
    1e0e:	08 95       	ret

00001e10 <strnlen_P>:
    1e10:	fc 01       	movw	r30, r24
    1e12:	05 90       	lpm	r0, Z+
    1e14:	61 50       	subi	r22, 0x01	; 1
    1e16:	70 40       	sbci	r23, 0x00	; 0
    1e18:	01 10       	cpse	r0, r1
    1e1a:	d8 f7       	brcc	.-10     	; 0x1e12 <strnlen_P+0x2>
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	8e 0f       	add	r24, r30
    1e22:	9f 1f       	adc	r25, r31
    1e24:	08 95       	ret

00001e26 <strchr>:
    1e26:	fc 01       	movw	r30, r24
    1e28:	81 91       	ld	r24, Z+
    1e2a:	86 17       	cp	r24, r22
    1e2c:	21 f0       	breq	.+8      	; 0x1e36 <strchr+0x10>
    1e2e:	88 23       	and	r24, r24
    1e30:	d9 f7       	brne	.-10     	; 0x1e28 <strchr+0x2>
    1e32:	99 27       	eor	r25, r25
    1e34:	08 95       	ret
    1e36:	31 97       	sbiw	r30, 0x01	; 1
    1e38:	cf 01       	movw	r24, r30
    1e3a:	08 95       	ret

00001e3c <strcmp>:
    1e3c:	fb 01       	movw	r30, r22
    1e3e:	dc 01       	movw	r26, r24
    1e40:	8d 91       	ld	r24, X+
    1e42:	01 90       	ld	r0, Z+
    1e44:	80 19       	sub	r24, r0
    1e46:	01 10       	cpse	r0, r1
    1e48:	d9 f3       	breq	.-10     	; 0x1e40 <strcmp+0x4>
    1e4a:	99 0b       	sbc	r25, r25
    1e4c:	08 95       	ret

00001e4e <strncmp>:
    1e4e:	fb 01       	movw	r30, r22
    1e50:	dc 01       	movw	r26, r24
    1e52:	41 50       	subi	r20, 0x01	; 1
    1e54:	50 40       	sbci	r21, 0x00	; 0
    1e56:	30 f0       	brcs	.+12     	; 0x1e64 <strncmp+0x16>
    1e58:	8d 91       	ld	r24, X+
    1e5a:	01 90       	ld	r0, Z+
    1e5c:	80 19       	sub	r24, r0
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <strncmp+0x18>
    1e60:	00 20       	and	r0, r0
    1e62:	b9 f7       	brne	.-18     	; 0x1e52 <strncmp+0x4>
    1e64:	88 1b       	sub	r24, r24
    1e66:	99 0b       	sbc	r25, r25
    1e68:	08 95       	ret

00001e6a <strnlen>:
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	61 50       	subi	r22, 0x01	; 1
    1e6e:	70 40       	sbci	r23, 0x00	; 0
    1e70:	01 90       	ld	r0, Z+
    1e72:	01 10       	cpse	r0, r1
    1e74:	d8 f7       	brcc	.-10     	; 0x1e6c <strnlen+0x2>
    1e76:	80 95       	com	r24
    1e78:	90 95       	com	r25
    1e7a:	8e 0f       	add	r24, r30
    1e7c:	9f 1f       	adc	r25, r31
    1e7e:	08 95       	ret

00001e80 <fputc>:
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	8c 01       	movw	r16, r24
    1e8a:	eb 01       	movw	r28, r22
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	81 ff       	sbrs	r24, 1
    1e90:	1b c0       	rjmp	.+54     	; 0x1ec8 <fputc+0x48>
    1e92:	82 ff       	sbrs	r24, 2
    1e94:	0d c0       	rjmp	.+26     	; 0x1eb0 <fputc+0x30>
    1e96:	2e 81       	ldd	r18, Y+6	; 0x06
    1e98:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	28 17       	cp	r18, r24
    1ea0:	39 07       	cpc	r19, r25
    1ea2:	64 f4       	brge	.+24     	; 0x1ebc <fputc+0x3c>
    1ea4:	e8 81       	ld	r30, Y
    1ea6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea8:	01 93       	st	Z+, r16
    1eaa:	f9 83       	std	Y+1, r31	; 0x01
    1eac:	e8 83       	st	Y, r30
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <fputc+0x3c>
    1eb0:	e8 85       	ldd	r30, Y+8	; 0x08
    1eb2:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb4:	80 2f       	mov	r24, r16
    1eb6:	09 95       	icall
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <fputc+0x48>
    1ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	9f 83       	std	Y+7, r25	; 0x07
    1ec4:	8e 83       	std	Y+6, r24	; 0x06
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <fputc+0x4c>
    1ec8:	0f ef       	ldi	r16, 0xFF	; 255
    1eca:	1f ef       	ldi	r17, 0xFF	; 255
    1ecc:	c8 01       	movw	r24, r16
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <printf>:
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e2 e7       	ldi	r30, 0x72	; 114
    1ede:	ff e0       	ldi	r31, 0x0F	; 15
    1ee0:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__prologue_saves__+0x20>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	35 96       	adiw	r30, 0x05	; 5
    1ee8:	61 91       	ld	r22, Z+
    1eea:	71 91       	ld	r23, Z+
    1eec:	80 91 38 07 	lds	r24, 0x0738
    1ef0:	90 91 39 07 	lds	r25, 0x0739
    1ef4:	af 01       	movw	r20, r30
    1ef6:	0e 94 41 0a 	call	0x1482	; 0x1482 <vfprintf>
    1efa:	20 96       	adiw	r28, 0x00	; 0
    1efc:	e2 e0       	ldi	r30, 0x02	; 2
    1efe:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__epilogue_restores__+0x20>

00001f02 <puts>:
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	8c 01       	movw	r16, r24
    1f0c:	e0 91 38 07 	lds	r30, 0x0738
    1f10:	f0 91 39 07 	lds	r31, 0x0739
    1f14:	83 81       	ldd	r24, Z+3	; 0x03
    1f16:	81 ff       	sbrs	r24, 1
    1f18:	1a c0       	rjmp	.+52     	; 0x1f4e <puts+0x4c>
    1f1a:	c0 e0       	ldi	r28, 0x00	; 0
    1f1c:	d0 e0       	ldi	r29, 0x00	; 0
    1f1e:	05 c0       	rjmp	.+10     	; 0x1f2a <puts+0x28>
    1f20:	09 95       	icall
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <puts+0x28>
    1f26:	cf ef       	ldi	r28, 0xFF	; 255
    1f28:	df ef       	ldi	r29, 0xFF	; 255
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	81 91       	ld	r24, Z+
    1f2e:	8f 01       	movw	r16, r30
    1f30:	60 91 38 07 	lds	r22, 0x0738
    1f34:	70 91 39 07 	lds	r23, 0x0739
    1f38:	db 01       	movw	r26, r22
    1f3a:	18 96       	adiw	r26, 0x08	; 8
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	19 97       	sbiw	r26, 0x09	; 9
    1f42:	88 23       	and	r24, r24
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <puts+0x1e>
    1f46:	8a e0       	ldi	r24, 0x0A	; 10
    1f48:	09 95       	icall
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <puts+0x50>
    1f4e:	cf ef       	ldi	r28, 0xFF	; 255
    1f50:	df ef       	ldi	r29, 0xFF	; 255
    1f52:	ce 01       	movw	r24, r28
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	08 95       	ret

00001f5e <__ultoa_invert>:
    1f5e:	fa 01       	movw	r30, r20
    1f60:	aa 27       	eor	r26, r26
    1f62:	28 30       	cpi	r18, 0x08	; 8
    1f64:	51 f1       	breq	.+84     	; 0x1fba <__ultoa_invert+0x5c>
    1f66:	20 31       	cpi	r18, 0x10	; 16
    1f68:	81 f1       	breq	.+96     	; 0x1fca <__ultoa_invert+0x6c>
    1f6a:	e8 94       	clt
    1f6c:	6f 93       	push	r22
    1f6e:	6e 7f       	andi	r22, 0xFE	; 254
    1f70:	6e 5f       	subi	r22, 0xFE	; 254
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	8f 4f       	sbci	r24, 0xFF	; 255
    1f76:	9f 4f       	sbci	r25, 0xFF	; 255
    1f78:	af 4f       	sbci	r26, 0xFF	; 255
    1f7a:	b1 e0       	ldi	r27, 0x01	; 1
    1f7c:	3e d0       	rcall	.+124    	; 0x1ffa <__ultoa_invert+0x9c>
    1f7e:	b4 e0       	ldi	r27, 0x04	; 4
    1f80:	3c d0       	rcall	.+120    	; 0x1ffa <__ultoa_invert+0x9c>
    1f82:	67 0f       	add	r22, r23
    1f84:	78 1f       	adc	r23, r24
    1f86:	89 1f       	adc	r24, r25
    1f88:	9a 1f       	adc	r25, r26
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	68 0f       	add	r22, r24
    1f8e:	79 1f       	adc	r23, r25
    1f90:	8a 1f       	adc	r24, r26
    1f92:	91 1d       	adc	r25, r1
    1f94:	a1 1d       	adc	r26, r1
    1f96:	6a 0f       	add	r22, r26
    1f98:	71 1d       	adc	r23, r1
    1f9a:	81 1d       	adc	r24, r1
    1f9c:	91 1d       	adc	r25, r1
    1f9e:	a1 1d       	adc	r26, r1
    1fa0:	20 d0       	rcall	.+64     	; 0x1fe2 <__ultoa_invert+0x84>
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <__ultoa_invert+0x48>
    1fa4:	68 94       	set
    1fa6:	3f 91       	pop	r19
    1fa8:	2a e0       	ldi	r18, 0x0A	; 10
    1faa:	26 9f       	mul	r18, r22
    1fac:	11 24       	eor	r1, r1
    1fae:	30 19       	sub	r19, r0
    1fb0:	30 5d       	subi	r19, 0xD0	; 208
    1fb2:	31 93       	st	Z+, r19
    1fb4:	de f6       	brtc	.-74     	; 0x1f6c <__ultoa_invert+0xe>
    1fb6:	cf 01       	movw	r24, r30
    1fb8:	08 95       	ret
    1fba:	46 2f       	mov	r20, r22
    1fbc:	47 70       	andi	r20, 0x07	; 7
    1fbe:	40 5d       	subi	r20, 0xD0	; 208
    1fc0:	41 93       	st	Z+, r20
    1fc2:	b3 e0       	ldi	r27, 0x03	; 3
    1fc4:	0f d0       	rcall	.+30     	; 0x1fe4 <__ultoa_invert+0x86>
    1fc6:	c9 f7       	brne	.-14     	; 0x1fba <__ultoa_invert+0x5c>
    1fc8:	f6 cf       	rjmp	.-20     	; 0x1fb6 <__ultoa_invert+0x58>
    1fca:	46 2f       	mov	r20, r22
    1fcc:	4f 70       	andi	r20, 0x0F	; 15
    1fce:	40 5d       	subi	r20, 0xD0	; 208
    1fd0:	4a 33       	cpi	r20, 0x3A	; 58
    1fd2:	18 f0       	brcs	.+6      	; 0x1fda <__ultoa_invert+0x7c>
    1fd4:	49 5d       	subi	r20, 0xD9	; 217
    1fd6:	31 fd       	sbrc	r19, 1
    1fd8:	40 52       	subi	r20, 0x20	; 32
    1fda:	41 93       	st	Z+, r20
    1fdc:	02 d0       	rcall	.+4      	; 0x1fe2 <__ultoa_invert+0x84>
    1fde:	a9 f7       	brne	.-22     	; 0x1fca <__ultoa_invert+0x6c>
    1fe0:	ea cf       	rjmp	.-44     	; 0x1fb6 <__ultoa_invert+0x58>
    1fe2:	b4 e0       	ldi	r27, 0x04	; 4
    1fe4:	a6 95       	lsr	r26
    1fe6:	97 95       	ror	r25
    1fe8:	87 95       	ror	r24
    1fea:	77 95       	ror	r23
    1fec:	67 95       	ror	r22
    1fee:	ba 95       	dec	r27
    1ff0:	c9 f7       	brne	.-14     	; 0x1fe4 <__ultoa_invert+0x86>
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	61 05       	cpc	r22, r1
    1ff6:	71 05       	cpc	r23, r1
    1ff8:	08 95       	ret
    1ffa:	9b 01       	movw	r18, r22
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	0a 2e       	mov	r0, r26
    2000:	06 94       	lsr	r0
    2002:	57 95       	ror	r21
    2004:	47 95       	ror	r20
    2006:	37 95       	ror	r19
    2008:	27 95       	ror	r18
    200a:	ba 95       	dec	r27
    200c:	c9 f7       	brne	.-14     	; 0x2000 <__ultoa_invert+0xa2>
    200e:	62 0f       	add	r22, r18
    2010:	73 1f       	adc	r23, r19
    2012:	84 1f       	adc	r24, r20
    2014:	95 1f       	adc	r25, r21
    2016:	a0 1d       	adc	r26, r0
    2018:	08 95       	ret

0000201a <__eerd_byte_m328p>:
    201a:	f9 99       	sbic	0x1f, 1	; 31
    201c:	fe cf       	rjmp	.-4      	; 0x201a <__eerd_byte_m328p>
    201e:	92 bd       	out	0x22, r25	; 34
    2020:	81 bd       	out	0x21, r24	; 33
    2022:	f8 9a       	sbi	0x1f, 0	; 31
    2024:	99 27       	eor	r25, r25
    2026:	80 b5       	in	r24, 0x20	; 32
    2028:	08 95       	ret

0000202a <__eeupd_byte_m328p>:
    202a:	26 2f       	mov	r18, r22

0000202c <__eeupd_r18_m328p>:
    202c:	f9 99       	sbic	0x1f, 1	; 31
    202e:	fe cf       	rjmp	.-4      	; 0x202c <__eeupd_r18_m328p>
    2030:	92 bd       	out	0x22, r25	; 34
    2032:	81 bd       	out	0x21, r24	; 33
    2034:	f8 9a       	sbi	0x1f, 0	; 31
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	00 b4       	in	r0, 0x20	; 32
    203a:	02 16       	cp	r0, r18
    203c:	39 f0       	breq	.+14     	; 0x204c <__eeupd_r18_m328p+0x20>
    203e:	1f ba       	out	0x1f, r1	; 31
    2040:	20 bd       	out	0x20, r18	; 32
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	fa 9a       	sbi	0x1f, 2	; 31
    2048:	f9 9a       	sbi	0x1f, 1	; 31
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	08 95       	ret

0000204e <_exit>:
    204e:	f8 94       	cli

00002050 <__stop_program>:
    2050:	ff cf       	rjmp	.-2      	; 0x2050 <__stop_program>
