
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005e6  00800100  000025e8  0000267c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  008006e6  008006e6  00002c62  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000069c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002767  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e55  00000000  00000000  00009367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000161d  00000000  00000000  0000a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  0000b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000898  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001df8  00000000  00000000  0000c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e8 ee       	ldi	r30, 0xE8	; 232
     1ba:	f5 e2       	ldi	r31, 0x25	; 37
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a6 3e       	cpi	r26, 0xE6	; 230
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	18 e0       	ldi	r17, 0x08	; 8
     1ca:	a6 ee       	ldi	r26, 0xE6	; 230
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ac 31       	cpi	r26, 0x1C	; 28
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:




void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 e6 06 	lds	r24, 0x06E6
     262:	90 91 e7 06 	lds	r25, 0x06E7
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 ee 06 	lds	r22, 0x06EE
     28a:	70 91 ef 06 	lds	r23, 0x06EF
     28e:	80 91 f0 06 	lds	r24, 0x06F0
     292:	90 91 f1 06 	lds	r25, 0x06F1
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 00 01 	sts	0x0100, r20
     2c2:	50 93 01 01 	sts	0x0101, r21
     2c6:	60 93 02 01 	sts	0x0102, r22
     2ca:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 f8 06 	sts	0x06F8, r20
     30c:	50 93 f9 06 	sts	0x06F9, r21
     310:	60 93 fa 06 	sts	0x06FA, r22
     314:	70 93 fb 06 	sts	0x06FB, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 1c 07 	sts	0x071C, r20
     350:	50 93 1d 07 	sts	0x071D, r21
     354:	60 93 1e 07 	sts	0x071E, r22
     358:	70 93 1f 07 	sts	0x071F, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 37 09 	call	0x126e	; 0x126e <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 b0 08 	call	0x1160	; 0x1160 <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 9c 05 	call	0xb38	; 0xb38 <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 92       	push	r8
     3b0:	9f 92       	push	r9
     3b2:	af 92       	push	r10
     3b4:	bf 92       	push	r11
     3b6:	cf 92       	push	r12
     3b8:	df 92       	push	r13
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	2f 93       	push	r18
     3c0:	3f 93       	push	r19
     3c2:	4f 93       	push	r20
     3c4:	5f 93       	push	r21
     3c6:	6f 93       	push	r22
     3c8:	7f 93       	push	r23
     3ca:	8f 93       	push	r24
     3cc:	9f 93       	push	r25
     3ce:	af 93       	push	r26
     3d0:	bf 93       	push	r27
     3d2:	ef 93       	push	r30
     3d4:	ff 93       	push	r31
	
	extraTime1++;
     3d6:	80 91 e8 06 	lds	r24, 0x06E8
     3da:	90 91 e9 06 	lds	r25, 0x06E9
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	90 93 e9 06 	sts	0x06E9, r25
     3e4:	80 93 e8 06 	sts	0x06E8, r24
	if(extraTime1>100){
     3e8:	80 91 e8 06 	lds	r24, 0x06E8
     3ec:	90 91 e9 06 	lds	r25, 0x06E9
     3f0:	85 36       	cpi	r24, 0x65	; 101
     3f2:	91 05       	cpc	r25, r1
     3f4:	6c f0       	brlt	.+26     	; 0x410 <__vector_14+0x6c>
		timerVariable++;
     3f6:	80 91 e6 06 	lds	r24, 0x06E6
     3fa:	90 91 e7 06 	lds	r25, 0x06E7
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	90 93 e7 06 	sts	0x06E7, r25
     404:	80 93 e6 06 	sts	0x06E6, r24
		extraTime1 = 0;
     408:	10 92 e9 06 	sts	0x06E9, r1
     40c:	10 92 e8 06 	sts	0x06E8, r1
	}
	extraTime++;
     410:	80 91 ea 06 	lds	r24, 0x06EA
     414:	90 91 eb 06 	lds	r25, 0x06EB
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	90 93 eb 06 	sts	0x06EB, r25
     41e:	80 93 ea 06 	sts	0x06EA, r24
	
	if((get_automatishStatus() % 2)==1){
     422:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_automatishStatus>
     426:	62 e0       	ldi	r22, 0x02	; 2
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__divmodhi4>
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	91 05       	cpc	r25, r1
     432:	09 f0       	breq	.+2      	; 0x436 <__vector_14+0x92>
     434:	5a c0       	rjmp	.+180    	; 0x4ea <__vector_14+0x146>
	if(extraTime>3000){
     436:	80 91 ea 06 	lds	r24, 0x06EA
     43a:	90 91 eb 06 	lds	r25, 0x06EB
     43e:	2b e0       	ldi	r18, 0x0B	; 11
     440:	89 3b       	cpi	r24, 0xB9	; 185
     442:	92 07       	cpc	r25, r18
     444:	0c f4       	brge	.+2      	; 0x448 <__vector_14+0xa4>
     446:	51 c0       	rjmp	.+162    	; 0x4ea <__vector_14+0x146>
		char* l = get_grensLight();
     448:	0e 94 94 04 	call	0x928	; 0x928 <get_grensLight>
		double grenslight;
		grenslight = strtod(l, NULL);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strtod>
     454:	6b 01       	movw	r12, r22
     456:	7c 01       	movw	r14, r24
		
		char* t = get_grensTemp();
     458:	0e 94 2d 04 	call	0x85a	; 0x85a <get_grensTemp>
		double grenstemp;
		grenstemp = strtod(t, NULL);
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strtod>
     464:	4b 01       	movw	r8, r22
     466:	5c 01       	movw	r10, r24
		

		// Als het boven de grenslight is, en boven de grenstemperatuur is,
		// en ingerold dan moet het uitrollen
		
		if(getLight()> grenslight && getTemp() > grenstemp && (get_unrollStatus() % 2) == 0)
     468:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     46c:	68 2f       	mov	r22, r24
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__floatsisf>
     478:	a7 01       	movw	r20, r14
     47a:	96 01       	movw	r18, r12
     47c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__gesf2>
     480:	18 16       	cp	r1, r24
     482:	74 f4       	brge	.+28     	; 0x4a0 <__vector_14+0xfc>
     484:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     488:	a5 01       	movw	r20, r10
     48a:	94 01       	movw	r18, r8
     48c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__gesf2>
     490:	18 16       	cp	r1, r24
     492:	34 f4       	brge	.+12     	; 0x4a0 <__vector_14+0xfc>
     494:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     498:	80 fd       	sbrc	r24, 0
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__vector_14+0xfc>
		{
			uitrollen();
     49c:	0e 94 43 09 	call	0x1286	; 0x1286 <uitrollen>
		}
		
		// Als het onder de grenslight is, en boven de grenstemperatuur is,
		// en uitgerold is. Dan moet het inrollen.
		if(getLight()< grenslight && getTemp() < grenstemp && (get_unrollStatus() % 2) == 1)
     4a0:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     4a4:	68 2f       	mov	r22, r24
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__floatsisf>
     4b0:	a7 01       	movw	r20, r14
     4b2:	96 01       	movw	r18, r12
     4b4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__cmpsf2>
     4b8:	88 23       	and	r24, r24
     4ba:	9c f4       	brge	.+38     	; 0x4e2 <__vector_14+0x13e>
     4bc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     4c0:	a5 01       	movw	r20, r10
     4c2:	94 01       	movw	r18, r8
     4c4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__cmpsf2>
     4c8:	88 23       	and	r24, r24
     4ca:	5c f4       	brge	.+22     	; 0x4e2 <__vector_14+0x13e>
     4cc:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     4d0:	62 e0       	ldi	r22, 0x02	; 2
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__divmodhi4>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	91 05       	cpc	r25, r1
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <__vector_14+0x13e>
		{
			oprollen();
     4de:	0e 94 9f 09 	call	0x133e	; 0x133e <oprollen>
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
     4e2:	10 92 eb 06 	sts	0x06EB, r1
     4e6:	10 92 ea 06 	sts	0x06EA, r1
	}
	}	
}
     4ea:	ff 91       	pop	r31
     4ec:	ef 91       	pop	r30
     4ee:	bf 91       	pop	r27
     4f0:	af 91       	pop	r26
     4f2:	9f 91       	pop	r25
     4f4:	8f 91       	pop	r24
     4f6:	7f 91       	pop	r23
     4f8:	6f 91       	pop	r22
     4fa:	5f 91       	pop	r21
     4fc:	4f 91       	pop	r20
     4fe:	3f 91       	pop	r19
     500:	2f 91       	pop	r18
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
	if(i == 1)
     542:	80 91 ec 06 	lds	r24, 0x06EC
     546:	90 91 ed 06 	lds	r25, 0x06ED
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	91 05       	cpc	r25, r1
     54e:	d1 f4       	brne	.+52     	; 0x584 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     550:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     554:	c4 e8       	ldi	r28, 0x84	; 132
     556:	d0 e0       	ldi	r29, 0x00	; 0
     558:	68 81       	ld	r22, Y
     55a:	79 81       	ldd	r23, Y+1	; 0x01
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatunsisf>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	80 93 ee 06 	sts	0x06EE, r24
     56c:	90 93 ef 06 	sts	0x06EF, r25
     570:	a0 93 f0 06 	sts	0x06F0, r26
     574:	b0 93 f1 06 	sts	0x06F1, r27
		TCNT1 = 0; //Reset duration
     578:	19 82       	std	Y+1, r1	; 0x01
     57a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     57c:	10 92 ed 06 	sts	0x06ED, r1
     580:	10 92 ec 06 	sts	0x06EC, r1
	}

	if(i==0)
     584:	80 91 ec 06 	lds	r24, 0x06EC
     588:	90 91 ed 06 	lds	r25, 0x06ED
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	59 f4       	brne	.+22     	; 0x5a6 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     590:	e1 e8       	ldi	r30, 0x81	; 129
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	81 60       	ori	r24, 0x01	; 1
     598:	80 83       	st	Z, r24
		i = 1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	90 93 ed 06 	sts	0x06ED, r25
     5a2:	80 93 ec 06 	sts	0x06EC, r24
	}
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	0f 90       	pop	r0
     5c8:	1f 90       	pop	r1
     5ca:	18 95       	reti

000005cc <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     5d4:	c0 91 f2 06 	lds	r28, 0x06F2
     5d8:	d0 91 f3 06 	lds	r29, 0x06F3
     5dc:	20 91 1c 01 	lds	r18, 0x011C
     5e0:	30 91 1d 01 	lds	r19, 0x011D
     5e4:	2c 17       	cp	r18, r28
     5e6:	3d 07       	cpc	r19, r29
     5e8:	8c f0       	brlt	.+34     	; 0x60c <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     5ea:	8c 01       	movw	r16, r24
     5ec:	0c 0f       	add	r16, r28
     5ee:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     5f0:	f8 01       	movw	r30, r16
     5f2:	61 91       	ld	r22, Z+
     5f4:	8f 01       	movw	r16, r30
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     5fc:	21 96       	adiw	r28, 0x01	; 1
     5fe:	80 91 1c 01 	lds	r24, 0x011C
     602:	90 91 1d 01 	lds	r25, 0x011D
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	94 f7       	brge	.-28     	; 0x5f0 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     61e:	c0 91 f2 06 	lds	r28, 0x06F2
     622:	d0 91 f3 06 	lds	r29, 0x06F3
     626:	80 91 1c 01 	lds	r24, 0x011C
     62a:	90 91 1d 01 	lds	r25, 0x011D
     62e:	8c 17       	cp	r24, r28
     630:	9d 07       	cpc	r25, r29
     632:	8c f0       	brlt	.+34     	; 0x656 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     634:	8e 01       	movw	r16, r28
     636:	02 5a       	subi	r16, 0xA2	; 162
     638:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     63a:	ce 01       	movw	r24, r28
     63c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     640:	f8 01       	movw	r30, r16
     642:	81 93       	st	Z+, r24
     644:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	80 91 1c 01 	lds	r24, 0x011C
     64c:	90 91 1d 01 	lds	r25, 0x011D
     650:	8c 17       	cp	r24, r28
     652:	9d 07       	cpc	r25, r29
     654:	94 f7       	brge	.-28     	; 0x63a <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     656:	8e e5       	ldi	r24, 0x5E	; 94
     658:	97 e0       	ldi	r25, 0x07	; 7
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     66e:	c0 91 0e 01 	lds	r28, 0x010E
     672:	d0 91 0f 01 	lds	r29, 0x010F
     676:	80 91 1a 01 	lds	r24, 0x011A
     67a:	90 91 1b 01 	lds	r25, 0x011B
     67e:	99 23       	and	r25, r25
     680:	cc f0       	brlt	.+50     	; 0x6b4 <set_Locatie+0x50>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     686:	f8 01       	movw	r30, r16
     688:	e8 0f       	add	r30, r24
     68a:	f9 1f       	adc	r31, r25
     68c:	ce 01       	movw	r24, r28
     68e:	60 81       	ld	r22, Z
     690:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     694:	21 96       	adiw	r28, 0x01	; 1
     696:	80 91 0e 01 	lds	r24, 0x010E
     69a:	90 91 0f 01 	lds	r25, 0x010F
     69e:	9e 01       	movw	r18, r28
     6a0:	28 1b       	sub	r18, r24
     6a2:	39 0b       	sbc	r19, r25
     6a4:	c9 01       	movw	r24, r18
     6a6:	20 91 1a 01 	lds	r18, 0x011A
     6aa:	30 91 1b 01 	lds	r19, 0x011B
     6ae:	28 17       	cp	r18, r24
     6b0:	39 07       	cpc	r19, r25
     6b2:	4c f7       	brge	.-46     	; 0x686 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6ce:	e0 90 0e 01 	lds	r14, 0x010E
     6d2:	f0 90 0f 01 	lds	r15, 0x010F
     6d6:	80 91 1a 01 	lds	r24, 0x011A
     6da:	90 91 1b 01 	lds	r25, 0x011B
     6de:	99 23       	and	r25, r25
     6e0:	ec f0       	brlt	.+58     	; 0x71c <get_Locatie+0x5e>
     6e2:	01 e0       	ldi	r16, 0x01	; 1
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     6ea:	0f 2e       	mov	r0, r31
     6ec:	ff e2       	ldi	r31, 0x2F	; 47
     6ee:	cf 2e       	mov	r12, r31
     6f0:	f7 e0       	ldi	r31, 0x07	; 7
     6f2:	df 2e       	mov	r13, r31
     6f4:	f0 2d       	mov	r31, r0
     6f6:	c7 01       	movw	r24, r14
     6f8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     6fc:	cc 0d       	add	r28, r12
     6fe:	dd 1d       	adc	r29, r13
     700:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     702:	08 94       	sec
     704:	e1 1c       	adc	r14, r1
     706:	f1 1c       	adc	r15, r1
     708:	e8 01       	movw	r28, r16
     70a:	0f 5f       	subi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	80 91 1a 01 	lds	r24, 0x011A
     712:	90 91 1b 01 	lds	r25, 0x011B
     716:	8c 17       	cp	r24, r28
     718:	9d 07       	cpc	r25, r29
     71a:	6c f7       	brge	.-38     	; 0x6f6 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     71c:	8f e2       	ldi	r24, 0x2F	; 47
     71e:	97 e0       	ldi	r25, 0x07	; 7
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	08 95       	ret

00000732 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     73c:	c0 91 0c 01 	lds	r28, 0x010C
     740:	d0 91 0d 01 	lds	r29, 0x010D
     744:	80 91 18 01 	lds	r24, 0x0118
     748:	90 91 19 01 	lds	r25, 0x0119
     74c:	99 23       	and	r25, r25
     74e:	cc f0       	brlt	.+50     	; 0x782 <set_Versie+0x50>
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     754:	f8 01       	movw	r30, r16
     756:	e8 0f       	add	r30, r24
     758:	f9 1f       	adc	r31, r25
     75a:	ce 01       	movw	r24, r28
     75c:	60 81       	ld	r22, Z
     75e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     762:	21 96       	adiw	r28, 0x01	; 1
     764:	80 91 0c 01 	lds	r24, 0x010C
     768:	90 91 0d 01 	lds	r25, 0x010D
     76c:	9e 01       	movw	r18, r28
     76e:	28 1b       	sub	r18, r24
     770:	39 0b       	sbc	r19, r25
     772:	c9 01       	movw	r24, r18
     774:	20 91 18 01 	lds	r18, 0x0118
     778:	30 91 19 01 	lds	r19, 0x0119
     77c:	28 17       	cp	r18, r24
     77e:	39 07       	cpc	r19, r25
     780:	4c f7       	brge	.-46     	; 0x754 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     79c:	e0 90 0c 01 	lds	r14, 0x010C
     7a0:	f0 90 0d 01 	lds	r15, 0x010D
     7a4:	80 91 18 01 	lds	r24, 0x0118
     7a8:	90 91 19 01 	lds	r25, 0x0119
     7ac:	99 23       	and	r25, r25
     7ae:	ec f0       	brlt	.+58     	; 0x7ea <get_Versie+0x5e>
     7b0:	01 e0       	ldi	r16, 0x01	; 1
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	c0 e0       	ldi	r28, 0x00	; 0
     7b6:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     7b8:	0f 2e       	mov	r0, r31
     7ba:	fa e8       	ldi	r31, 0x8A	; 138
     7bc:	cf 2e       	mov	r12, r31
     7be:	f7 e0       	ldi	r31, 0x07	; 7
     7c0:	df 2e       	mov	r13, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	c7 01       	movw	r24, r14
     7c6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     7ca:	cc 0d       	add	r28, r12
     7cc:	dd 1d       	adc	r29, r13
     7ce:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7d0:	08 94       	sec
     7d2:	e1 1c       	adc	r14, r1
     7d4:	f1 1c       	adc	r15, r1
     7d6:	e8 01       	movw	r28, r16
     7d8:	0f 5f       	subi	r16, 0xFF	; 255
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	80 91 18 01 	lds	r24, 0x0118
     7e0:	90 91 19 01 	lds	r25, 0x0119
     7e4:	8c 17       	cp	r24, r28
     7e6:	9d 07       	cpc	r25, r29
     7e8:	6c f7       	brge	.-38     	; 0x7c4 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     7ea:	8a e8       	ldi	r24, 0x8A	; 138
     7ec:	97 e0       	ldi	r25, 0x07	; 7
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     80a:	c0 91 0a 01 	lds	r28, 0x010A
     80e:	d0 91 0b 01 	lds	r29, 0x010B
     812:	80 91 16 01 	lds	r24, 0x0116
     816:	90 91 17 01 	lds	r25, 0x0117
     81a:	99 23       	and	r25, r25
     81c:	cc f0       	brlt	.+50     	; 0x850 <set_grensTemp+0x50>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     822:	f8 01       	movw	r30, r16
     824:	e8 0f       	add	r30, r24
     826:	f9 1f       	adc	r31, r25
     828:	ce 01       	movw	r24, r28
     82a:	60 81       	ld	r22, Z
     82c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     830:	21 96       	adiw	r28, 0x01	; 1
     832:	80 91 0a 01 	lds	r24, 0x010A
     836:	90 91 0b 01 	lds	r25, 0x010B
     83a:	9e 01       	movw	r18, r28
     83c:	28 1b       	sub	r18, r24
     83e:	39 0b       	sbc	r19, r25
     840:	c9 01       	movw	r24, r18
     842:	20 91 16 01 	lds	r18, 0x0116
     846:	30 91 17 01 	lds	r19, 0x0117
     84a:	28 17       	cp	r18, r24
     84c:	39 07       	cpc	r19, r25
     84e:	4c f7       	brge	.-46     	; 0x822 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     86a:	e0 90 0a 01 	lds	r14, 0x010A
     86e:	f0 90 0b 01 	lds	r15, 0x010B
     872:	80 91 16 01 	lds	r24, 0x0116
     876:	90 91 17 01 	lds	r25, 0x0117
     87a:	99 23       	and	r25, r25
     87c:	ec f0       	brlt	.+58     	; 0x8b8 <get_grensTemp+0x5e>
     87e:	01 e0       	ldi	r16, 0x01	; 1
     880:	10 e0       	ldi	r17, 0x00	; 0
     882:	c0 e0       	ldi	r28, 0x00	; 0
     884:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     886:	0f 2e       	mov	r0, r31
     888:	fb e5       	ldi	r31, 0x5B	; 91
     88a:	cf 2e       	mov	r12, r31
     88c:	f7 e0       	ldi	r31, 0x07	; 7
     88e:	df 2e       	mov	r13, r31
     890:	f0 2d       	mov	r31, r0
     892:	c7 01       	movw	r24, r14
     894:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     898:	cc 0d       	add	r28, r12
     89a:	dd 1d       	adc	r29, r13
     89c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     89e:	08 94       	sec
     8a0:	e1 1c       	adc	r14, r1
     8a2:	f1 1c       	adc	r15, r1
     8a4:	e8 01       	movw	r28, r16
     8a6:	0f 5f       	subi	r16, 0xFF	; 255
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	80 91 16 01 	lds	r24, 0x0116
     8ae:	90 91 17 01 	lds	r25, 0x0117
     8b2:	8c 17       	cp	r24, r28
     8b4:	9d 07       	cpc	r25, r29
     8b6:	6c f7       	brge	.-38     	; 0x892 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     8b8:	8b e5       	ldi	r24, 0x5B	; 91
     8ba:	97 e0       	ldi	r25, 0x07	; 7
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	08 95       	ret

000008ce <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     8d8:	c0 91 08 01 	lds	r28, 0x0108
     8dc:	d0 91 09 01 	lds	r29, 0x0109
     8e0:	80 91 14 01 	lds	r24, 0x0114
     8e4:	90 91 15 01 	lds	r25, 0x0115
     8e8:	99 23       	and	r25, r25
     8ea:	cc f0       	brlt	.+50     	; 0x91e <__stack+0x1f>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     8f0:	f8 01       	movw	r30, r16
     8f2:	e8 0f       	add	r30, r24
     8f4:	f9 1f       	adc	r31, r25
     8f6:	ce 01       	movw	r24, r28
     8f8:	60 81       	ld	r22, Z
     8fa:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     8fe:	21 96       	adiw	r28, 0x01	; 1
     900:	80 91 08 01 	lds	r24, 0x0108
     904:	90 91 09 01 	lds	r25, 0x0109
     908:	9e 01       	movw	r18, r28
     90a:	28 1b       	sub	r18, r24
     90c:	39 0b       	sbc	r19, r25
     90e:	c9 01       	movw	r24, r18
     910:	20 91 14 01 	lds	r18, 0x0114
     914:	30 91 15 01 	lds	r19, 0x0115
     918:	28 17       	cp	r18, r24
     91a:	39 07       	cpc	r19, r25
     91c:	4c f7       	brge	.-46     	; 0x8f0 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     934:	e0 90 08 01 	lds	r14, 0x0108
     938:	f0 90 09 01 	lds	r15, 0x0109
     93c:	80 91 14 01 	lds	r24, 0x0114
     940:	90 91 15 01 	lds	r25, 0x0115
     944:	99 23       	and	r25, r25
     946:	bc f0       	brlt	.+46     	; 0x976 <get_grensLight+0x4e>
     948:	01 e0       	ldi	r16, 0x01	; 1
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	c0 e0       	ldi	r28, 0x00	; 0
     94e:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     950:	c7 01       	movw	r24, r14
     952:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     956:	ce 56       	subi	r28, 0x6E	; 110
     958:	d8 4f       	sbci	r29, 0xF8	; 248
     95a:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     95c:	08 94       	sec
     95e:	e1 1c       	adc	r14, r1
     960:	f1 1c       	adc	r15, r1
     962:	e8 01       	movw	r28, r16
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	80 91 14 01 	lds	r24, 0x0114
     96c:	90 91 15 01 	lds	r25, 0x0115
     970:	8c 17       	cp	r24, r28
     972:	9d 07       	cpc	r25, r29
     974:	6c f7       	brge	.-38     	; 0x950 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     976:	82 e9       	ldi	r24, 0x92	; 146
     978:	97 e0       	ldi	r25, 0x07	; 7
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     992:	c0 91 06 01 	lds	r28, 0x0106
     996:	d0 91 07 01 	lds	r29, 0x0107
     99a:	80 91 12 01 	lds	r24, 0x0112
     99e:	90 91 13 01 	lds	r25, 0x0113
     9a2:	99 23       	and	r25, r25
     9a4:	cc f0       	brlt	.+50     	; 0x9d8 <set_minUnroll+0x50>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     9aa:	f8 01       	movw	r30, r16
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	ce 01       	movw	r24, r28
     9b2:	60 81       	ld	r22, Z
     9b4:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     9b8:	21 96       	adiw	r28, 0x01	; 1
     9ba:	80 91 06 01 	lds	r24, 0x0106
     9be:	90 91 07 01 	lds	r25, 0x0107
     9c2:	9e 01       	movw	r18, r28
     9c4:	28 1b       	sub	r18, r24
     9c6:	39 0b       	sbc	r19, r25
     9c8:	c9 01       	movw	r24, r18
     9ca:	20 91 12 01 	lds	r18, 0x0112
     9ce:	30 91 13 01 	lds	r19, 0x0113
     9d2:	28 17       	cp	r18, r24
     9d4:	39 07       	cpc	r19, r25
     9d6:	4c f7       	brge	.-46     	; 0x9aa <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     9ee:	e0 90 06 01 	lds	r14, 0x0106
     9f2:	f0 90 07 01 	lds	r15, 0x0107
     9f6:	80 91 12 01 	lds	r24, 0x0112
     9fa:	90 91 13 01 	lds	r25, 0x0113
     9fe:	99 23       	and	r25, r25
     a00:	bc f0       	brlt	.+46     	; 0xa30 <get_minUnroll+0x4e>
     a02:	01 e0       	ldi	r16, 0x01	; 1
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	c0 e0       	ldi	r28, 0x00	; 0
     a08:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     a0a:	c7 01       	movw	r24, r14
     a0c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     a10:	c0 5e       	subi	r28, 0xE0	; 224
     a12:	d8 4f       	sbci	r29, 0xF8	; 248
     a14:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     a16:	08 94       	sec
     a18:	e1 1c       	adc	r14, r1
     a1a:	f1 1c       	adc	r15, r1
     a1c:	e8 01       	movw	r28, r16
     a1e:	0f 5f       	subi	r16, 0xFF	; 255
     a20:	1f 4f       	sbci	r17, 0xFF	; 255
     a22:	80 91 12 01 	lds	r24, 0x0112
     a26:	90 91 13 01 	lds	r25, 0x0113
     a2a:	8c 17       	cp	r24, r28
     a2c:	9d 07       	cpc	r25, r29
     a2e:	6c f7       	brge	.-38     	; 0xa0a <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	97 e0       	ldi	r25, 0x07	; 7
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	08 95       	ret

00000a42 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     a4c:	c0 91 04 01 	lds	r28, 0x0104
     a50:	d0 91 05 01 	lds	r29, 0x0105
     a54:	80 91 10 01 	lds	r24, 0x0110
     a58:	90 91 11 01 	lds	r25, 0x0111
     a5c:	99 23       	and	r25, r25
     a5e:	cc f0       	brlt	.+50     	; 0xa92 <set_maxUnroll+0x50>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     a64:	f8 01       	movw	r30, r16
     a66:	e8 0f       	add	r30, r24
     a68:	f9 1f       	adc	r31, r25
     a6a:	ce 01       	movw	r24, r28
     a6c:	60 81       	ld	r22, Z
     a6e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     a72:	21 96       	adiw	r28, 0x01	; 1
     a74:	80 91 04 01 	lds	r24, 0x0104
     a78:	90 91 05 01 	lds	r25, 0x0105
     a7c:	9e 01       	movw	r18, r28
     a7e:	28 1b       	sub	r18, r24
     a80:	39 0b       	sbc	r19, r25
     a82:	c9 01       	movw	r24, r18
     a84:	20 91 10 01 	lds	r18, 0x0110
     a88:	30 91 11 01 	lds	r19, 0x0111
     a8c:	28 17       	cp	r18, r24
     a8e:	39 07       	cpc	r19, r25
     a90:	4c f7       	brge	.-46     	; 0xa64 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     aa8:	e0 90 04 01 	lds	r14, 0x0104
     aac:	f0 90 05 01 	lds	r15, 0x0105
     ab0:	80 91 10 01 	lds	r24, 0x0110
     ab4:	90 91 11 01 	lds	r25, 0x0111
     ab8:	99 23       	and	r25, r25
     aba:	bc f0       	brlt	.+46     	; 0xaea <get_maxUnroll+0x4e>
     abc:	01 e0       	ldi	r16, 0x01	; 1
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     ac4:	c7 01       	movw	r24, r14
     ac6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__eerd_byte_m328p>
     aca:	c0 54       	subi	r28, 0x40	; 64
     acc:	d8 4f       	sbci	r29, 0xF8	; 248
     ace:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     ad0:	08 94       	sec
     ad2:	e1 1c       	adc	r14, r1
     ad4:	f1 1c       	adc	r15, r1
     ad6:	e8 01       	movw	r28, r16
     ad8:	0f 5f       	subi	r16, 0xFF	; 255
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	80 91 10 01 	lds	r24, 0x0110
     ae0:	90 91 11 01 	lds	r25, 0x0111
     ae4:	8c 17       	cp	r24, r28
     ae6:	9d 07       	cpc	r25, r29
     ae8:	6c f7       	brge	.-38     	; 0xac4 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     aea:	80 ec       	ldi	r24, 0xC0	; 192
     aec:	97 e0       	ldi	r25, 0x07	; 7
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     afc:	84 ef       	ldi	r24, 0xF4	; 244
     afe:	97 e0       	ldi	r25, 0x07	; 7
     b00:	68 e2       	ldi	r22, 0x28	; 40
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 db 11 	call	0x23b6	; 0x23b6 <strchr>
	p1[strlen(p1) -1] = '\0';
     b08:	e8 2f       	mov	r30, r24
     b0a:	f9 2f       	mov	r31, r25
     b0c:	df 01       	movw	r26, r30
     b0e:	0d 90       	ld	r0, X+
     b10:	00 20       	and	r0, r0
     b12:	e9 f7       	brne	.-6      	; 0xb0e <set_substring+0x12>
     b14:	11 97       	sbiw	r26, 0x01	; 1
     b16:	ae 1b       	sub	r26, r30
     b18:	bf 0b       	sbc	r27, r31
     b1a:	a8 0f       	add	r26, r24
     b1c:	b9 1f       	adc	r27, r25
     b1e:	11 97       	sbiw	r26, 0x01	; 1
     b20:	1c 92       	st	X, r1
	substring = p1 +1;
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	90 93 f1 07 	sts	0x07F1, r25
     b28:	80 93 f0 07 	sts	0x07F0, r24
     b2c:	08 95       	ret

00000b2e <get_automatishStatus>:

int AUT = 0;

int get_automatishStatus(){
	return AUT;
}
     b2e:	80 91 f4 06 	lds	r24, 0x06F4
     b32:	90 91 f5 06 	lds	r25, 0x06F5
     b36:	08 95       	ret

00000b38 <protocolCom>:
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");*/
		while (1) {
			ser_write("204 Wat kan ik voor u doen");
     b38:	0e e1       	ldi	r16, 0x1E	; 30
     b3a:	11 e0       	ldi	r17, 0x01	; 1
			ser_readln(in_buf, sizeof(in_buf), 1);
     b3c:	c4 ef       	ldi	r28, 0xF4	; 244
     b3e:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b40:	0f 2e       	mov	r0, r31
     b42:	f9 e3       	ldi	r31, 0x39	; 57
     b44:	ef 2e       	mov	r14, r31
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	ff 2e       	mov	r15, r31
     b4a:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b4c:	0f 2e       	mov	r0, r31
     b4e:	f1 e6       	ldi	r31, 0x61	; 97
     b50:	8f 2e       	mov	r8, r31
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	9f 2e       	mov	r9, r31
     b56:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b58:	0f 2e       	mov	r0, r31
     b5a:	f8 e8       	ldi	r31, 0x88	; 136
     b5c:	cf 2e       	mov	r12, r31
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	df 2e       	mov	r13, r31
     b62:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
     b64:	0f 2e       	mov	r0, r31
     b66:	ff e8       	ldi	r31, 0x8F	; 143
     b68:	2f 2e       	mov	r2, r31
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	3f 2e       	mov	r3, r31
     b6e:	f0 2d       	mov	r31, r0
			}
			
			if (strcmp("TOGGLEAUT", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b70:	0f 2e       	mov	r0, r31
     b72:	fe e9       	ldi	r31, 0x9E	; 158
     b74:	af 2e       	mov	r10, r31
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	bf 2e       	mov	r11, r31
     b7a:	f0 2d       	mov	r31, r0
			}	
			AUT = AUT + 1;	
		}
			
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f2 ec       	ldi	r31, 0xC2	; 194
     b80:	6f 2e       	mov	r6, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	7f 2e       	mov	r7, r31
     b86:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     b88:	0f 2e       	mov	r0, r31
     b8a:	fe ed       	ldi	r31, 0xDE	; 222
     b8c:	4f 2e       	mov	r4, r31
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
     b90:	5f 2e       	mov	r5, r31
     b92:	f0 2d       	mov	r31, r0
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");*/
		while (1) {
			ser_write("204 Wat kan ik voor u doen");
     b94:	c8 01       	movw	r24, r16
     b96:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
			ser_readln(in_buf, sizeof(in_buf), 1);
     b9a:	ce 01       	movw	r24, r28
     b9c:	6e e1       	ldi	r22, 0x1E	; 30
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ba6:	c7 01       	movw	r24, r14
     ba8:	be 01       	movw	r22, r28
     baa:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     bae:	28 2f       	mov	r18, r24
     bb0:	39 2f       	mov	r19, r25
     bb2:	21 15       	cp	r18, r1
     bb4:	31 05       	cpc	r19, r1
     bb6:	a1 f4       	brne	.+40     	; 0xbe0 <protocolCom+0xa8>
				if ((get_unrollStatus() % 2) == 1){
     bb8:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__divmodhi4>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <protocolCom+0x9a>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     bca:	80 e4       	ldi	r24, 0x40	; 64
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     bd2:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     bd6:	80 fd       	sbrc	r24, 0
     bd8:	1f c0       	rjmp	.+62     	; 0xc18 <protocolCom+0xe0>
					uitrollen();
     bda:	0e 94 43 09 	call	0x1286	; 0x1286 <uitrollen>
     bde:	1c c0       	rjmp	.+56     	; 0xc18 <protocolCom+0xe0>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     be0:	c4 01       	movw	r24, r8
     be2:	be 01       	movw	r22, r28
     be4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     be8:	28 2f       	mov	r18, r24
     bea:	39 2f       	mov	r19, r25
     bec:	21 15       	cp	r18, r1
     bee:	31 05       	cpc	r19, r1
     bf0:	99 f4       	brne	.+38     	; 0xc18 <protocolCom+0xe0>
				if ((get_unrollStatus() % 2) == 0){
     bf2:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     bf6:	80 fd       	sbrc	r24, 0
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <protocolCom+0xca>
					ser_writeln("501 Zonnescherm is al opgerold!");
     bfa:	88 e6       	ldi	r24, 0x68	; 104
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     c02:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__divmodhi4>
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	91 05       	cpc	r25, r1
     c12:	11 f4       	brne	.+4      	; 0xc18 <protocolCom+0xe0>
					oprollen();
     c14:	0e 94 9f 09 	call	0x133e	; 0x133e <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c18:	c6 01       	movw	r24, r12
     c1a:	be 01       	movw	r22, r28
     c1c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     c20:	28 2f       	mov	r18, r24
     c22:	39 2f       	mov	r19, r25
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	a1 f4       	brne	.+40     	; 0xc52 <protocolCom+0x11a>
				printf("202 Status: %i", get_unrollStatus());
     c2a:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <protocolCom+0xf8>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <protocolCom+0xfa>
     c32:	ad b7       	in	r26, 0x3d	; 61
     c34:	be b7       	in	r27, 0x3e	; 62
     c36:	12 96       	adiw	r26, 0x02	; 2
     c38:	3c 92       	st	X, r3
     c3a:	2e 92       	st	-X, r2
     c3c:	11 97       	sbiw	r26, 0x01	; 1
     c3e:	14 96       	adiw	r26, 0x04	; 4
     c40:	9c 93       	st	X, r25
     c42:	8e 93       	st	-X, r24
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
			}
			
			if (strcmp("TOGGLEAUT", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c52:	c5 01       	movw	r24, r10
     c54:	be 01       	movw	r22, r28
     c56:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     c5a:	28 2f       	mov	r18, r24
     c5c:	39 2f       	mov	r19, r25
     c5e:	21 15       	cp	r18, r1
     c60:	31 05       	cpc	r19, r1
     c62:	e1 f4       	brne	.+56     	; 0xc9c <protocolCom+0x164>

			if ((get_automatishStatus()%2)==1){
     c64:	0e 94 97 05 	call	0xb2e	; 0xb2e <get_automatishStatus>
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__divmodhi4>
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	91 05       	cpc	r25, r1
     c74:	29 f4       	brne	.+10     	; 0xc80 <protocolCom+0x148>
				printf("202 AUT UIT \n");
     c76:	88 ea       	ldi	r24, 0xA8	; 168
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 49 12 	call	0x2492	; 0x2492 <puts>
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <protocolCom+0x150>
			}
			else{
				printf("202 AUT AAN \n");
     c80:	85 eb       	ldi	r24, 0xB5	; 181
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 49 12 	call	0x2492	; 0x2492 <puts>
			}	
			AUT = AUT + 1;	
     c88:	80 91 f4 06 	lds	r24, 0x06F4
     c8c:	90 91 f5 06 	lds	r25, 0x06F5
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	90 93 f5 06 	sts	0x06F5, r25
     c96:	80 93 f4 06 	sts	0x06F4, r24
     c9a:	7c cf       	rjmp	.-264    	; 0xb94 <protocolCom+0x5c>
		}
			
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     c9c:	c3 01       	movw	r24, r6
     c9e:	be 01       	movw	r22, r28
     ca0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     ca4:	28 2f       	mov	r18, r24
     ca6:	39 2f       	mov	r19, r25
     ca8:	21 15       	cp	r18, r1
     caa:	31 05       	cpc	r19, r1
     cac:	e1 f4       	brne	.+56     	; 0xce6 <protocolCom+0x1ae>
				printf("202 TEMP= % 6.2f \n", getTemp());
     cae:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <protocolCom+0x180>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <protocolCom+0x182>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <protocolCom+0x184>
     cbc:	2b ec       	ldi	r18, 0xCB	; 203
     cbe:	31 e0       	ldi	r19, 0x01	; 1
     cc0:	ed b7       	in	r30, 0x3d	; 61
     cc2:	fe b7       	in	r31, 0x3e	; 62
     cc4:	32 83       	std	Z+2, r19	; 0x02
     cc6:	21 83       	std	Z+1, r18	; 0x01
     cc8:	83 83       	std	Z+3, r24	; 0x03
     cca:	94 83       	std	Z+4, r25	; 0x04
     ccc:	a5 83       	std	Z+5, r26	; 0x05
     cce:	b6 83       	std	Z+6, r27	; 0x06
     cd0:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
     cd4:	8d b7       	in	r24, 0x3d	; 61
     cd6:	9e b7       	in	r25, 0x3e	; 62
     cd8:	06 96       	adiw	r24, 0x06	; 6
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	9e bf       	out	0x3e, r25	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	8d bf       	out	0x3d, r24	; 61
     ce4:	57 cf       	rjmp	.-338    	; 0xb94 <protocolCom+0x5c>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     ce6:	c2 01       	movw	r24, r4
     ce8:	be 01       	movw	r22, r28
     cea:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     cee:	28 2f       	mov	r18, r24
     cf0:	39 2f       	mov	r19, r25
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	49 f4       	brne	.+18     	; 0xd0a <protocolCom+0x1d2>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     cf8:	8d ee       	ldi	r24, 0xED	; 237
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     d00:	0e 94 2d 04 	call	0x85a	; 0x85a <get_grensTemp>
     d04:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     d08:	45 cf       	rjmp	.-374    	; 0xb94 <protocolCom+0x5c>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     d0a:	8d ef       	ldi	r24, 0xFD	; 253
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	be 01       	movw	r22, r28
     d10:	4e e0       	ldi	r20, 0x0E	; 14
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
     d18:	28 2f       	mov	r18, r24
     d1a:	39 2f       	mov	r19, r25
     d1c:	21 15       	cp	r18, r1
     d1e:	31 05       	cpc	r19, r1
     d20:	c9 f4       	brne	.+50     	; 0xd54 <protocolCom+0x21c>
					int temp = sizeof in_buf;
					printf("504 Ongeldige temperatuur");
				}*				
				
				else{*/
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     d22:	8f e0       	ldi	r24, 0x0F	; 15
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     d2a:	0e 94 2d 04 	call	0x85a	; 0x85a <get_grensTemp>
     d2e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     d32:	80 e2       	ldi	r24, 0x20	; 32
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
				set_substring();
     d3a:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
				set_grensTemp(substring);
     d3e:	80 91 f0 07 	lds	r24, 0x07F0
     d42:	90 91 f1 07 	lds	r25, 0x07F1
     d46:	0e 94 00 04 	call	0x800	; 0x800 <set_grensTemp>
				ser_writeln(get_grensTemp());
     d4a:	0e 94 2d 04 	call	0x85a	; 0x85a <get_grensTemp>
     d4e:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     d52:	20 cf       	rjmp	.-448    	; 0xb94 <protocolCom+0x5c>
				//}
			}
		else if(strcmp("GET_ALL", in_buf) == 0)
     d54:	85 e2       	ldi	r24, 0x25	; 37
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	be 01       	movw	r22, r28
     d5a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     d5e:	28 2f       	mov	r18, r24
     d60:	39 2f       	mov	r19, r25
     d62:	21 15       	cp	r18, r1
     d64:	31 05       	cpc	r19, r1
     d66:	09 f0       	breq	.+2      	; 0xd6a <protocolCom+0x232>
     d68:	7e c0       	rjmp	.+252    	; 0xe66 <protocolCom+0x32e>
		{
			printf("202 TEMP%6.2f \n", getTemp());
     d6a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	00 d0       	rcall	.+0      	; 0xd74 <protocolCom+0x23c>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <protocolCom+0x23e>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <protocolCom+0x240>
     d78:	2d e2       	ldi	r18, 0x2D	; 45
     d7a:	32 e0       	ldi	r19, 0x02	; 2
     d7c:	ed b7       	in	r30, 0x3d	; 61
     d7e:	fe b7       	in	r31, 0x3e	; 62
     d80:	32 83       	std	Z+2, r19	; 0x02
     d82:	21 83       	std	Z+1, r18	; 0x01
     d84:	83 83       	std	Z+3, r24	; 0x03
     d86:	94 83       	std	Z+4, r25	; 0x04
     d88:	a5 83       	std	Z+5, r26	; 0x05
     d8a:	b6 83       	std	Z+6, r27	; 0x06
     d8c:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
			printf("202 LIGHT %i \n", getLight());
     d90:	8d b7       	in	r24, 0x3d	; 61
     d92:	9e b7       	in	r25, 0x3e	; 62
     d94:	06 96       	adiw	r24, 0x06	; 6
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	9e bf       	out	0x3e, r25	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	8d bf       	out	0x3d, r24	; 61
     da0:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <protocolCom+0x26e>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <protocolCom+0x270>
     da8:	ed b7       	in	r30, 0x3d	; 61
     daa:	fe b7       	in	r31, 0x3e	; 62
     dac:	31 96       	adiw	r30, 0x01	; 1
     dae:	2d e3       	ldi	r18, 0x3D	; 61
     db0:	32 e0       	ldi	r19, 0x02	; 2
     db2:	ad b7       	in	r26, 0x3d	; 61
     db4:	be b7       	in	r27, 0x3e	; 62
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	3c 93       	st	X, r19
     dba:	2e 93       	st	-X, r18
     dbc:	11 97       	sbiw	r26, 0x01	; 1
     dbe:	82 83       	std	Z+2, r24	; 0x02
     dc0:	13 82       	std	Z+3, r1	; 0x03
     dc2:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
			printf("204 AFSTAND%6.2fcm \n", getDistance());
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <protocolCom+0x2a0>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <protocolCom+0x2a2>
     dda:	00 d0       	rcall	.+0      	; 0xddc <protocolCom+0x2a4>
     ddc:	2c e4       	ldi	r18, 0x4C	; 76
     dde:	32 e0       	ldi	r19, 0x02	; 2
     de0:	ed b7       	in	r30, 0x3d	; 61
     de2:	fe b7       	in	r31, 0x3e	; 62
     de4:	32 83       	std	Z+2, r19	; 0x02
     de6:	21 83       	std	Z+1, r18	; 0x01
     de8:	83 83       	std	Z+3, r24	; 0x03
     dea:	94 83       	std	Z+4, r25	; 0x04
     dec:	a5 83       	std	Z+5, r26	; 0x05
     dee:	b6 83       	std	Z+6, r27	; 0x06
     df0:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
			ser_write("205 MAX_UNROLL "), ser_writeln(get_maxUnroll());
     df4:	8d b7       	in	r24, 0x3d	; 61
     df6:	9e b7       	in	r25, 0x3e	; 62
     df8:	06 96       	adiw	r24, 0x06	; 6
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	9e bf       	out	0x3e, r25	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	8d bf       	out	0x3d, r24	; 61
     e04:	81 e6       	ldi	r24, 0x61	; 97
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     e0c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_maxUnroll>
     e10:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
			ser_write("206 MIN_UNROLL "), ser_writeln(get_minUnroll());
     e14:	81 e7       	ldi	r24, 0x71	; 113
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     e1c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <get_minUnroll>
     e20:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
			ser_write("207 GRENS_LIGHT " ), ser_writeln(get_grensLight());
     e24:	81 e8       	ldi	r24, 0x81	; 129
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     e2c:	0e 94 94 04 	call	0x928	; 0x928 <get_grensLight>
     e30:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
			ser_write("208 GRENS_TEMP " ), ser_writeln(get_grensTemp());
     e34:	82 e9       	ldi	r24, 0x92	; 146
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     e3c:	0e 94 2d 04 	call	0x85a	; 0x85a <get_grensTemp>
     e40:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
			ser_write("205 "),  ser_writeln(get_Naam());
     e44:	82 ea       	ldi	r24, 0xA2	; 162
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     e4c:	0e 94 0b 03 	call	0x616	; 0x616 <get_Naam>
     e50:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
			ser_write("206 "), ser_writeln(get_Locatie());
     e54:	87 ea       	ldi	r24, 0xA7	; 167
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     e5c:	0e 94 5f 03 	call	0x6be	; 0x6be <get_Locatie>
     e60:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     e64:	97 ce       	rjmp	.-722    	; 0xb94 <protocolCom+0x5c>
			
		}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     e66:	8c ea       	ldi	r24, 0xAC	; 172
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	be 01       	movw	r22, r28
     e6c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     e70:	28 2f       	mov	r18, r24
     e72:	39 2f       	mov	r19, r25
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	c1 f4       	brne	.+48     	; 0xeaa <protocolCom+0x372>
				printf("202 LIGHT %i \n", getLight());
     e7a:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <protocolCom+0x348>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <protocolCom+0x34a>
     e82:	ed b7       	in	r30, 0x3d	; 61
     e84:	fe b7       	in	r31, 0x3e	; 62
     e86:	31 96       	adiw	r30, 0x01	; 1
     e88:	2d e3       	ldi	r18, 0x3D	; 61
     e8a:	32 e0       	ldi	r19, 0x02	; 2
     e8c:	ad b7       	in	r26, 0x3d	; 61
     e8e:	be b7       	in	r27, 0x3e	; 62
     e90:	12 96       	adiw	r26, 0x02	; 2
     e92:	3c 93       	st	X, r19
     e94:	2e 93       	st	-X, r18
     e96:	11 97       	sbiw	r26, 0x01	; 1
     e98:	82 83       	std	Z+2, r24	; 0x02
     e9a:	13 82       	std	Z+3, r1	; 0x03
     e9c:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	75 ce       	rjmp	.-790    	; 0xb94 <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     eaa:	86 eb       	ldi	r24, 0xB6	; 182
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	be 01       	movw	r22, r28
     eb0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     eb4:	28 2f       	mov	r18, r24
     eb6:	39 2f       	mov	r19, r25
     eb8:	21 15       	cp	r18, r1
     eba:	31 05       	cpc	r19, r1
     ebc:	49 f4       	brne	.+18     	; 0xed0 <protocolCom+0x398>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     ebe:	86 ec       	ldi	r24, 0xC6	; 198
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     ec6:	0e 94 94 04 	call	0x928	; 0x928 <get_grensLight>
     eca:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     ece:	62 ce       	rjmp	.-828    	; 0xb94 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     ed0:	87 ed       	ldi	r24, 0xD7	; 215
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	be 01       	movw	r22, r28
     ed6:	4f e0       	ldi	r20, 0x0F	; 15
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
     ede:	28 2f       	mov	r18, r24
     ee0:	39 2f       	mov	r19, r25
     ee2:	21 15       	cp	r18, r1
     ee4:	31 05       	cpc	r19, r1
     ee6:	c9 f4       	brne	.+50     	; 0xf1a <protocolCom+0x3e2>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				/*if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
				}
				else{*/
				ser_write("203 GRENS_LIGHT: "), ser_write(get_grensLight()), ser_write(" -> ");
     ee8:	8a ee       	ldi	r24, 0xEA	; 234
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     ef0:	0e 94 94 04 	call	0x928	; 0x928 <get_grensLight>
     ef4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     ef8:	80 e2       	ldi	r24, 0x20	; 32
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
				set_substring();
     f00:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
				set_grensLicht(substring);
     f04:	80 91 f0 07 	lds	r24, 0x07F0
     f08:	90 91 f1 07 	lds	r25, 0x07F1
     f0c:	0e 94 67 04 	call	0x8ce	; 0x8ce <set_grensLicht>
				ser_writeln(get_grensLight());
     f10:	0e 94 94 04 	call	0x928	; 0x928 <get_grensLight>
     f14:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     f18:	3d ce       	rjmp	.-902    	; 0xb94 <protocolCom+0x5c>
				//}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     f1a:	8c ef       	ldi	r24, 0xFC	; 252
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	be 01       	movw	r22, r28
     f20:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     f24:	28 2f       	mov	r18, r24
     f26:	39 2f       	mov	r19, r25
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	49 f4       	brne	.+18     	; 0xf40 <protocolCom+0x408>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     f2e:	8b e0       	ldi	r24, 0x0B	; 11
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     f36:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_maxUnroll>
     f3a:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     f3e:	2a ce       	rjmp	.-940    	; 0xb94 <protocolCom+0x5c>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     f40:	8c e1       	ldi	r24, 0x1C	; 28
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	be 01       	movw	r22, r28
     f46:	4f e0       	ldi	r20, 0x0F	; 15
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
     f4e:	28 2f       	mov	r18, r24
     f50:	39 2f       	mov	r19, r25
     f52:	21 15       	cp	r18, r1
     f54:	31 05       	cpc	r19, r1
     f56:	c9 f4       	brne	.+50     	; 0xf8a <protocolCom+0x452>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
				}
				else{*/
				ser_write("203 MAX_UNROLL: "), ser_write(get_maxUnroll()), ser_write(" -> ");
     f58:	8b e0       	ldi	r24, 0x0B	; 11
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     f60:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_maxUnroll>
     f64:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
				set_substring();
     f70:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
				set_maxUnroll(substring);
     f74:	80 91 f0 07 	lds	r24, 0x07F0
     f78:	90 91 f1 07 	lds	r25, 0x07F1
     f7c:	0e 94 21 05 	call	0xa42	; 0xa42 <set_maxUnroll>
				ser_writeln(get_maxUnroll());
     f80:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_maxUnroll>
     f84:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     f88:	05 ce       	rjmp	.-1014   	; 0xb94 <protocolCom+0x5c>
				//}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     f8a:	8e e2       	ldi	r24, 0x2E	; 46
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	be 01       	movw	r22, r28
     f90:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
     f94:	28 2f       	mov	r18, r24
     f96:	39 2f       	mov	r19, r25
     f98:	21 15       	cp	r18, r1
     f9a:	31 05       	cpc	r19, r1
     f9c:	49 f4       	brne	.+18     	; 0xfb0 <protocolCom+0x478>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     f9e:	8d e3       	ldi	r24, 0x3D	; 61
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     fa6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <get_minUnroll>
     faa:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     fae:	f2 cd       	rjmp	.-1052   	; 0xb94 <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     fb0:	8e e4       	ldi	r24, 0x4E	; 78
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	be 01       	movw	r22, r28
     fb6:	4f e0       	ldi	r20, 0x0F	; 15
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
     fbe:	28 2f       	mov	r18, r24
     fc0:	39 2f       	mov	r19, r25
     fc2:	21 15       	cp	r18, r1
     fc4:	31 05       	cpc	r19, r1
     fc6:	c9 f4       	brne	.+50     	; 0xffa <protocolCom+0x4c2>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
				}
				else{*/
				ser_write("203 MIN_UNROLL: "), ser_write(get_minUnroll()), ser_write(" -> ");
     fc8:	8d e3       	ldi	r24, 0x3D	; 61
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     fd0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <get_minUnroll>
     fd4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
     fd8:	80 e2       	ldi	r24, 0x20	; 32
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
				set_substring();
     fe0:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
				set_minUnroll(substring);
     fe4:	80 91 f0 07 	lds	r24, 0x07F0
     fe8:	90 91 f1 07 	lds	r25, 0x07F1
     fec:	0e 94 c4 04 	call	0x988	; 0x988 <set_minUnroll>
				ser_writeln(get_minUnroll());
     ff0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <get_minUnroll>
     ff4:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
     ff8:	cd cd       	rjmp	.-1126   	; 0xb94 <protocolCom+0x5c>
				//}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     ffa:	80 e6       	ldi	r24, 0x60	; 96
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	be 01       	movw	r22, r28
    1000:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
    1004:	28 2f       	mov	r18, r24
    1006:	39 2f       	mov	r19, r25
    1008:	21 15       	cp	r18, r1
    100a:	31 05       	cpc	r19, r1
    100c:	49 f4       	brne	.+18     	; 0x1020 <protocolCom+0x4e8>
				ser_write("202 "),  ser_writeln(get_Naam());
    100e:	89 e6       	ldi	r24, 0x69	; 105
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
    1016:	0e 94 0b 03 	call	0x616	; 0x616 <get_Naam>
    101a:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
    101e:	ba cd       	rjmp	.-1164   	; 0xb94 <protocolCom+0x5c>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
    1020:	8e e6       	ldi	r24, 0x6E	; 110
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	be 01       	movw	r22, r28
    1026:	48 e0       	ldi	r20, 0x08	; 8
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
    102e:	28 2f       	mov	r18, r24
    1030:	39 2f       	mov	r19, r25
    1032:	21 15       	cp	r18, r1
    1034:	31 05       	cpc	r19, r1
    1036:	69 f4       	brne	.+26     	; 0x1052 <protocolCom+0x51a>
				/*if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{*/
				set_substring();
    1038:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
				set_Naam(substring);
    103c:	80 91 f0 07 	lds	r24, 0x07F0
    1040:	90 91 f1 07 	lds	r25, 0x07F1
    1044:	0e 94 e6 02 	call	0x5cc	; 0x5cc <set_Naam>
				printf("200 OK \n");
    1048:	8a e7       	ldi	r24, 0x7A	; 122
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	0e 94 49 12 	call	0x2492	; 0x2492 <puts>
    1050:	a1 cd       	rjmp	.-1214   	; 0xb94 <protocolCom+0x5c>
				//}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
    1052:	82 e8       	ldi	r24, 0x82	; 130
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	be 01       	movw	r22, r28
    1058:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
    105c:	28 2f       	mov	r18, r24
    105e:	39 2f       	mov	r19, r25
    1060:	21 15       	cp	r18, r1
    1062:	31 05       	cpc	r19, r1
    1064:	49 f4       	brne	.+18     	; 0x1078 <protocolCom+0x540>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
    1066:	89 e6       	ldi	r24, 0x69	; 105
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
    106e:	0e 94 5f 03 	call	0x6be	; 0x6be <get_Locatie>
    1072:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
    1076:	8e cd       	rjmp	.-1252   	; 0xb94 <protocolCom+0x5c>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
    1078:	8f e8       	ldi	r24, 0x8F	; 143
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	be 01       	movw	r22, r28
    107e:	4c e0       	ldi	r20, 0x0C	; 12
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
    1086:	28 2f       	mov	r18, r24
    1088:	39 2f       	mov	r19, r25
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	69 f4       	brne	.+26     	; 0x10aa <protocolCom+0x572>
				/*if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{*/
				set_substring();
    1090:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
				set_Locatie(substring);
    1094:	80 91 f0 07 	lds	r24, 0x07F0
    1098:	90 91 f1 07 	lds	r25, 0x07F1
    109c:	0e 94 32 03 	call	0x664	; 0x664 <set_Locatie>
				
				printf("200 OK \n");
    10a0:	8a e7       	ldi	r24, 0x7A	; 122
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	0e 94 49 12 	call	0x2492	; 0x2492 <puts>
    10a8:	75 cd       	rjmp	.-1302   	; 0xb94 <protocolCom+0x5c>
				//}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
    10aa:	8f e9       	ldi	r24, 0x9F	; 159
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	be 01       	movw	r22, r28
    10b0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
    10b4:	28 2f       	mov	r18, r24
    10b6:	39 2f       	mov	r19, r25
    10b8:	21 15       	cp	r18, r1
    10ba:	31 05       	cpc	r19, r1
    10bc:	49 f4       	brne	.+18     	; 0x10d0 <protocolCom+0x598>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
    10be:	8b ea       	ldi	r24, 0xAB	; 171
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
    10c6:	0e 94 c6 03 	call	0x78c	; 0x78c <get_Versie>
    10ca:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
    10ce:	62 cd       	rjmp	.-1340   	; 0xb94 <protocolCom+0x5c>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
    10d0:	88 eb       	ldi	r24, 0xB8	; 184
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	be 01       	movw	r22, r28
    10d6:	4c e0       	ldi	r20, 0x0C	; 12
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	0e 94 ef 11 	call	0x23de	; 0x23de <strncmp>
    10de:	28 2f       	mov	r18, r24
    10e0:	39 2f       	mov	r19, r25
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	69 f4       	brne	.+26     	; 0x1102 <protocolCom+0x5ca>
					/*if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
					}
					else{*/
					set_substring();
    10e8:	0e 94 7e 05 	call	0xafc	; 0xafc <set_substring>
					set_Versie(substring);
    10ec:	80 91 f0 07 	lds	r24, 0x07F0
    10f0:	90 91 f1 07 	lds	r25, 0x07F1
    10f4:	0e 94 99 03 	call	0x732	; 0x732 <set_Versie>
					
					printf("200 OK \n");
    10f8:	8a e7       	ldi	r24, 0x7A	; 122
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 49 12 	call	0x2492	; 0x2492 <puts>
    1100:	49 cd       	rjmp	.-1390   	; 0xb94 <protocolCom+0x5c>
					//}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
    1102:	87 ec       	ldi	r24, 0xC7	; 199
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	be 01       	movw	r22, r28
    1108:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
    110c:	28 2f       	mov	r18, r24
    110e:	39 2f       	mov	r19, r25
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	89 f4       	brne	.+34     	; 0x1138 <protocolCom+0x600>
				if ((get_unrollStatus() % 2) == 1){
    1116:	0e 94 32 09 	call	0x1264	; 0x1264 <get_unrollStatus>
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__divmodhi4>
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 05       	cpc	r25, r1
    1126:	11 f4       	brne	.+4      	; 0x112c <protocolCom+0x5f4>
					uitrollen();					
    1128:	0e 94 43 09 	call	0x1286	; 0x1286 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
    112c:	8c ec       	ldi	r24, 0xCC	; 204
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
				abort();
    1134:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
    1138:	85 ed       	ldi	r24, 0xD5	; 213
    113a:	93 e0       	ldi	r25, 0x03	; 3
    113c:	be 01       	movw	r22, r28
    113e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <strcmp>
    1142:	28 2f       	mov	r18, r24
    1144:	39 2f       	mov	r19, r25
    1146:	21 15       	cp	r18, r1
    1148:	31 05       	cpc	r19, r1
    114a:	29 f4       	brne	.+10     	; 0x1156 <protocolCom+0x61e>
				ser_writeln(
    114c:	8a ed       	ldi	r24, 0xDA	; 218
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
    1154:	1f cd       	rjmp	.-1474   	; 0xb94 <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
    1156:	88 e2       	ldi	r24, 0x28	; 40
    1158:	96 e0       	ldi	r25, 0x06	; 6
    115a:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
    115e:	1a cd       	rjmp	.-1484   	; 0xb94 <protocolCom+0x5c>

00001160 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
    1160:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
    1164:	83 e3       	ldi	r24, 0x33	; 51
    1166:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
    116a:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    116e:	88 e1       	ldi	r24, 0x18	; 24
    1170:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    1174:	86 e0       	ldi	r24, 0x06	; 6
    1176:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
    117a:	8e e6       	ldi	r24, 0x6E	; 110
    117c:	96 e0       	ldi	r25, 0x06	; 6
    117e:	90 93 17 08 	sts	0x0817, r25
    1182:	80 93 16 08 	sts	0x0816, r24
}
    1186:	08 95       	ret

00001188 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    1188:	e0 ec       	ldi	r30, 0xC0	; 192
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	90 81       	ld	r25, Z
    118e:	95 ff       	sbrs	r25, 5
    1190:	fd cf       	rjmp	.-6      	; 0x118c <ser_transmit+0x4>
	// send the data
	UDR0 = data;
    1192:	80 93 c6 00 	sts	0x00C6, r24
}
    1196:	08 95       	ret

00001198 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
    1198:	cf 93       	push	r28
    119a:	c8 2f       	mov	r28, r24
	if (c=='\n') {
    119c:	8a 30       	cpi	r24, 0x0A	; 10
    119e:	19 f4       	brne	.+6      	; 0x11a6 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
    11a0:	8d e0       	ldi	r24, 0x0D	; 13
    11a2:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>
	}
	ser_transmit(c);
    11a6:	8c 2f       	mov	r24, r28
    11a8:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>
}
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    11b0:	e0 ec       	ldi	r30, 0xC0	; 192
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 23       	and	r24, r24
    11b8:	ec f7       	brge	.-6      	; 0x11b4 <ser_receive+0x4>
	return UDR0;
    11ba:	80 91 c6 00 	lds	r24, 0x00C6
}
    11be:	08 95       	ret

000011c0 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    11c6:	88 81       	ld	r24, Y
    11c8:	88 23       	and	r24, r24
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    11cc:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    11ce:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    11d2:	89 91       	ld	r24, Y+
    11d4:	88 23       	and	r24, r24
    11d6:	d9 f7       	brne	.-10     	; 0x11ce <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    11de:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
	ser_transmit('\r');
    11e2:	8d e0       	ldi	r24, 0x0D	; 13
    11e4:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>
	ser_transmit('\n');
    11e8:	8a e0       	ldi	r24, 0x0A	; 10
    11ea:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>
}
    11ee:	08 95       	ret

000011f0 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	5c 01       	movw	r10, r24
    1206:	d4 2f       	mov	r29, r20
	int i=0;
    1208:	6c 01       	movw	r12, r24
    120a:	ee 24       	eor	r14, r14
    120c:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    120e:	8b 01       	movw	r16, r22
    1210:	01 50       	subi	r16, 0x01	; 1
    1212:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1214:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <ser_receive>
    1218:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    121a:	dd 23       	and	r29, r29
    121c:	11 f0       	breq	.+4      	; 0x1222 <ser_readln+0x32>
    121e:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>
		if (c=='\r') {
    1222:	cd 30       	cpi	r28, 0x0D	; 13
    1224:	31 f4       	brne	.+12     	; 0x1232 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1226:	dd 23       	and	r29, r29
    1228:	71 f0       	breq	.+28     	; 0x1246 <ser_readln+0x56>
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	0e 94 c4 08 	call	0x1188	; 0x1188 <ser_transmit>
    1230:	0a c0       	rjmp	.+20     	; 0x1246 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1232:	e0 16       	cp	r14, r16
    1234:	f1 06       	cpc	r15, r17
    1236:	74 f7       	brge	.-36     	; 0x1214 <ser_readln+0x24>
			buf[i++]=c;
    1238:	f6 01       	movw	r30, r12
    123a:	c1 93       	st	Z+, r28
    123c:	6f 01       	movw	r12, r30
    123e:	08 94       	sec
    1240:	e1 1c       	adc	r14, r1
    1242:	f1 1c       	adc	r15, r1
    1244:	e7 cf       	rjmp	.-50     	; 0x1214 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    1246:	ea 0c       	add	r14, r10
    1248:	fb 1c       	adc	r15, r11
    124a:	f7 01       	movw	r30, r14
    124c:	10 82       	st	Z, r1
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	08 95       	ret

00001264 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    1264:	80 91 f6 06 	lds	r24, 0x06F6
    1268:	90 91 f7 06 	lds	r25, 0x06F7
    126c:	08 95       	ret

0000126e <init_scherm_ports>:



void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    126e:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    1270:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    1272:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    1274:	e9 e6       	ldi	r30, 0x69	; 105
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    1282:	2d 9a       	sbi	0x05, 5	; 5
}
    1284:	08 95       	ret

00001286 <uitrollen>:

void uitrollen(){
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
	IN = (IN + 1);
    128e:	80 91 f6 06 	lds	r24, 0x06F6
    1292:	90 91 f7 06 	lds	r25, 0x06F7
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	90 93 f7 06 	sts	0x06F7, r25
    129c:	80 93 f6 06 	sts	0x06F6, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    12a0:	8c e7       	ldi	r24, 0x7C	; 124
    12a2:	96 e0       	ldi	r25, 0x06	; 6
    12a4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    12a8:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    12aa:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    12ac:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strtod>
    12b8:	6b 01       	movw	r12, r22
    12ba:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    12be:	2c 9a       	sbi	0x05, 4	; 5
    12c0:	8f e3       	ldi	r24, 0x3F	; 63
    12c2:	9d e0       	ldi	r25, 0x0D	; 13
    12c4:	a3 e0       	ldi	r26, 0x03	; 3
    12c6:	81 50       	subi	r24, 0x01	; 1
    12c8:	90 40       	sbci	r25, 0x00	; 0
    12ca:	a0 40       	sbci	r26, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <uitrollen+0x40>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <uitrollen+0x4a>
    12d0:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    12d2:	2c 98       	cbi	0x05, 4	; 5
    12d4:	8f e3       	ldi	r24, 0x3F	; 63
    12d6:	9d e0       	ldi	r25, 0x0D	; 13
    12d8:	a3 e0       	ldi	r26, 0x03	; 3
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	90 40       	sbci	r25, 0x00	; 0
    12de:	a0 40       	sbci	r26, 0x00	; 0
    12e0:	e1 f7       	brne	.-8      	; 0x12da <uitrollen+0x54>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <uitrollen+0x5e>
    12e4:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    12e6:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    12ea:	a7 01       	movw	r20, r14
    12ec:	96 01       	movw	r18, r12
    12ee:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__cmpsf2>
    12f2:	88 23       	and	r24, r24
    12f4:	24 f3       	brlt	.-56     	; 0x12be <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    12f6:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <uitrollen+0x7a>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <uitrollen+0x7c>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <uitrollen+0x7e>
    1304:	22 e8       	ldi	r18, 0x82	; 130
    1306:	36 e0       	ldi	r19, 0x06	; 6
    1308:	ed b7       	in	r30, 0x3d	; 61
    130a:	fe b7       	in	r31, 0x3e	; 62
    130c:	32 83       	std	Z+2, r19	; 0x02
    130e:	21 83       	std	Z+1, r18	; 0x01
    1310:	83 83       	std	Z+3, r24	; 0x03
    1312:	94 83       	std	Z+4, r25	; 0x04
    1314:	a5 83       	std	Z+5, r26	; 0x05
    1316:	b6 83       	std	Z+6, r27	; 0x06
    1318:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    131c:	8d b7       	in	r24, 0x3d	; 61
    131e:	9e b7       	in	r25, 0x3e	; 62
    1320:	06 96       	adiw	r24, 0x06	; 6
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	9e bf       	out	0x3e, r25	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	8d bf       	out	0x3d, r24	; 61
    132c:	86 ea       	ldi	r24, 0xA6	; 166
    132e:	96 e0       	ldi	r25, 0x06	; 6
    1330:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
}
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	08 95       	ret

0000133e <oprollen>:
	
	


void oprollen(){
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
	IN = (IN + 1);
    1346:	80 91 f6 06 	lds	r24, 0x06F6
    134a:	90 91 f7 06 	lds	r25, 0x06F7
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	90 93 f7 06 	sts	0x06F7, r25
    1354:	80 93 f6 06 	sts	0x06F6, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    1358:	84 ec       	ldi	r24, 0xC4	; 196
    135a:	96 e0       	ldi	r25, 0x06	; 6
    135c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    1360:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1362:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1364:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strtod>
    1370:	6b 01       	movw	r12, r22
    1372:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    1374:	14 c0       	rjmp	.+40     	; 0x139e <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1376:	2c 9a       	sbi	0x05, 4	; 5
    1378:	8f e3       	ldi	r24, 0x3F	; 63
    137a:	9d e0       	ldi	r25, 0x0D	; 13
    137c:	a3 e0       	ldi	r26, 0x03	; 3
    137e:	81 50       	subi	r24, 0x01	; 1
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	a0 40       	sbci	r26, 0x00	; 0
    1384:	e1 f7       	brne	.-8      	; 0x137e <oprollen+0x40>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <oprollen+0x4a>
    1388:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    138a:	2c 98       	cbi	0x05, 4	; 5
    138c:	8f e3       	ldi	r24, 0x3F	; 63
    138e:	9d e0       	ldi	r25, 0x0D	; 13
    1390:	a3 e0       	ldi	r26, 0x03	; 3
    1392:	81 50       	subi	r24, 0x01	; 1
    1394:	90 40       	sbci	r25, 0x00	; 0
    1396:	a0 40       	sbci	r26, 0x00	; 0
    1398:	e1 f7       	brne	.-8      	; 0x1392 <oprollen+0x54>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <oprollen+0x5e>
    139c:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    139e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13a2:	a7 01       	movw	r20, r14
    13a4:	96 01       	movw	r18, r12
    13a6:	0e 94 18 0b 	call	0x1630	; 0x1630 <__gesf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	24 f3       	brlt	.-56     	; 0x1376 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    13ae:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    13b2:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <oprollen+0x7e>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <oprollen+0x80>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <oprollen+0x82>
    13c0:	22 e8       	ldi	r18, 0x82	; 130
    13c2:	36 e0       	ldi	r19, 0x06	; 6
    13c4:	ed b7       	in	r30, 0x3d	; 61
    13c6:	fe b7       	in	r31, 0x3e	; 62
    13c8:	32 83       	std	Z+2, r19	; 0x02
    13ca:	21 83       	std	Z+1, r18	; 0x01
    13cc:	83 83       	std	Z+3, r24	; 0x03
    13ce:	94 83       	std	Z+4, r25	; 0x04
    13d0:	a5 83       	std	Z+5, r26	; 0x05
    13d2:	b6 83       	std	Z+6, r27	; 0x06
    13d4:	0e 94 34 12 	call	0x2468	; 0x2468 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    13d8:	8d b7       	in	r24, 0x3d	; 61
    13da:	9e b7       	in	r25, 0x3e	; 62
    13dc:	06 96       	adiw	r24, 0x06	; 6
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	9e bf       	out	0x3e, r25	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	8d bf       	out	0x3d, r24	; 61
    13e8:	89 ec       	ldi	r24, 0xC9	; 201
    13ea:	96 e0       	ldi	r25, 0x06	; 6
    13ec:	0e 94 ef 08 	call	0x11de	; 0x11de <ser_writeln>
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	08 95       	ret

000013fa <__subsf3>:
    13fa:	50 58       	subi	r21, 0x80	; 128

000013fc <__addsf3>:
    13fc:	bb 27       	eor	r27, r27
    13fe:	aa 27       	eor	r26, r26
    1400:	0e d0       	rcall	.+28     	; 0x141e <__addsf3x>
    1402:	dc c0       	rjmp	.+440    	; 0x15bc <__fp_round>
    1404:	cd d0       	rcall	.+410    	; 0x15a0 <__fp_pscA>
    1406:	30 f0       	brcs	.+12     	; 0x1414 <__addsf3+0x18>
    1408:	d2 d0       	rcall	.+420    	; 0x15ae <__fp_pscB>
    140a:	20 f0       	brcs	.+8      	; 0x1414 <__addsf3+0x18>
    140c:	31 f4       	brne	.+12     	; 0x141a <__addsf3+0x1e>
    140e:	9f 3f       	cpi	r25, 0xFF	; 255
    1410:	11 f4       	brne	.+4      	; 0x1416 <__addsf3+0x1a>
    1412:	1e f4       	brtc	.+6      	; 0x141a <__addsf3+0x1e>
    1414:	c2 c0       	rjmp	.+388    	; 0x159a <__fp_nan>
    1416:	0e f4       	brtc	.+2      	; 0x141a <__addsf3+0x1e>
    1418:	e0 95       	com	r30
    141a:	e7 fb       	bst	r30, 7
    141c:	b8 c0       	rjmp	.+368    	; 0x158e <__fp_inf>

0000141e <__addsf3x>:
    141e:	e9 2f       	mov	r30, r25
    1420:	de d0       	rcall	.+444    	; 0x15de <__fp_split3>
    1422:	80 f3       	brcs	.-32     	; 0x1404 <__addsf3+0x8>
    1424:	ba 17       	cp	r27, r26
    1426:	62 07       	cpc	r22, r18
    1428:	73 07       	cpc	r23, r19
    142a:	84 07       	cpc	r24, r20
    142c:	95 07       	cpc	r25, r21
    142e:	18 f0       	brcs	.+6      	; 0x1436 <__addsf3x+0x18>
    1430:	71 f4       	brne	.+28     	; 0x144e <__addsf3x+0x30>
    1432:	9e f5       	brtc	.+102    	; 0x149a <__addsf3x+0x7c>
    1434:	f6 c0       	rjmp	.+492    	; 0x1622 <__fp_zero>
    1436:	0e f4       	brtc	.+2      	; 0x143a <__addsf3x+0x1c>
    1438:	e0 95       	com	r30
    143a:	0b 2e       	mov	r0, r27
    143c:	ba 2f       	mov	r27, r26
    143e:	a0 2d       	mov	r26, r0
    1440:	0b 01       	movw	r0, r22
    1442:	b9 01       	movw	r22, r18
    1444:	90 01       	movw	r18, r0
    1446:	0c 01       	movw	r0, r24
    1448:	ca 01       	movw	r24, r20
    144a:	a0 01       	movw	r20, r0
    144c:	11 24       	eor	r1, r1
    144e:	ff 27       	eor	r31, r31
    1450:	59 1b       	sub	r21, r25
    1452:	99 f0       	breq	.+38     	; 0x147a <__addsf3x+0x5c>
    1454:	59 3f       	cpi	r21, 0xF9	; 249
    1456:	50 f4       	brcc	.+20     	; 0x146c <__addsf3x+0x4e>
    1458:	50 3e       	cpi	r21, 0xE0	; 224
    145a:	68 f1       	brcs	.+90     	; 0x14b6 <__addsf3x+0x98>
    145c:	1a 16       	cp	r1, r26
    145e:	f0 40       	sbci	r31, 0x00	; 0
    1460:	a2 2f       	mov	r26, r18
    1462:	23 2f       	mov	r18, r19
    1464:	34 2f       	mov	r19, r20
    1466:	44 27       	eor	r20, r20
    1468:	58 5f       	subi	r21, 0xF8	; 248
    146a:	f3 cf       	rjmp	.-26     	; 0x1452 <__addsf3x+0x34>
    146c:	46 95       	lsr	r20
    146e:	37 95       	ror	r19
    1470:	27 95       	ror	r18
    1472:	a7 95       	ror	r26
    1474:	f0 40       	sbci	r31, 0x00	; 0
    1476:	53 95       	inc	r21
    1478:	c9 f7       	brne	.-14     	; 0x146c <__addsf3x+0x4e>
    147a:	7e f4       	brtc	.+30     	; 0x149a <__addsf3x+0x7c>
    147c:	1f 16       	cp	r1, r31
    147e:	ba 0b       	sbc	r27, r26
    1480:	62 0b       	sbc	r22, r18
    1482:	73 0b       	sbc	r23, r19
    1484:	84 0b       	sbc	r24, r20
    1486:	ba f0       	brmi	.+46     	; 0x14b6 <__addsf3x+0x98>
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	a1 f0       	breq	.+40     	; 0x14b4 <__addsf3x+0x96>
    148c:	ff 0f       	add	r31, r31
    148e:	bb 1f       	adc	r27, r27
    1490:	66 1f       	adc	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	c2 f7       	brpl	.-16     	; 0x1488 <__addsf3x+0x6a>
    1498:	0e c0       	rjmp	.+28     	; 0x14b6 <__addsf3x+0x98>
    149a:	ba 0f       	add	r27, r26
    149c:	62 1f       	adc	r22, r18
    149e:	73 1f       	adc	r23, r19
    14a0:	84 1f       	adc	r24, r20
    14a2:	48 f4       	brcc	.+18     	; 0x14b6 <__addsf3x+0x98>
    14a4:	87 95       	ror	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b7 95       	ror	r27
    14ac:	f7 95       	ror	r31
    14ae:	9e 3f       	cpi	r25, 0xFE	; 254
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <__addsf3x+0x96>
    14b2:	b3 cf       	rjmp	.-154    	; 0x141a <__addsf3+0x1e>
    14b4:	93 95       	inc	r25
    14b6:	88 0f       	add	r24, r24
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <__addsf3x+0x9e>
    14ba:	99 27       	eor	r25, r25
    14bc:	ee 0f       	add	r30, r30
    14be:	97 95       	ror	r25
    14c0:	87 95       	ror	r24
    14c2:	08 95       	ret

000014c4 <__cmpsf2>:
    14c4:	40 d0       	rcall	.+128    	; 0x1546 <__fp_cmp>
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <__cmpsf2+0x6>
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	08 95       	ret

000014cc <__floatunsisf>:
    14cc:	e8 94       	clt
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <__floatsisf+0x12>

000014d0 <__floatsisf>:
    14d0:	97 fb       	bst	r25, 7
    14d2:	3e f4       	brtc	.+14     	; 0x14e2 <__floatsisf+0x12>
    14d4:	90 95       	com	r25
    14d6:	80 95       	com	r24
    14d8:	70 95       	com	r23
    14da:	61 95       	neg	r22
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	99 23       	and	r25, r25
    14e4:	a9 f0       	breq	.+42     	; 0x1510 <__floatsisf+0x40>
    14e6:	f9 2f       	mov	r31, r25
    14e8:	96 e9       	ldi	r25, 0x96	; 150
    14ea:	bb 27       	eor	r27, r27
    14ec:	93 95       	inc	r25
    14ee:	f6 95       	lsr	r31
    14f0:	87 95       	ror	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f1 11       	cpse	r31, r1
    14fa:	f8 cf       	rjmp	.-16     	; 0x14ec <__floatsisf+0x1c>
    14fc:	fa f4       	brpl	.+62     	; 0x153c <__floatsisf+0x6c>
    14fe:	bb 0f       	add	r27, r27
    1500:	11 f4       	brne	.+4      	; 0x1506 <__floatsisf+0x36>
    1502:	60 ff       	sbrs	r22, 0
    1504:	1b c0       	rjmp	.+54     	; 0x153c <__floatsisf+0x6c>
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	8f 4f       	sbci	r24, 0xFF	; 255
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	16 c0       	rjmp	.+44     	; 0x153c <__floatsisf+0x6c>
    1510:	88 23       	and	r24, r24
    1512:	11 f0       	breq	.+4      	; 0x1518 <__floatsisf+0x48>
    1514:	96 e9       	ldi	r25, 0x96	; 150
    1516:	11 c0       	rjmp	.+34     	; 0x153a <__floatsisf+0x6a>
    1518:	77 23       	and	r23, r23
    151a:	21 f0       	breq	.+8      	; 0x1524 <__floatsisf+0x54>
    151c:	9e e8       	ldi	r25, 0x8E	; 142
    151e:	87 2f       	mov	r24, r23
    1520:	76 2f       	mov	r23, r22
    1522:	05 c0       	rjmp	.+10     	; 0x152e <__floatsisf+0x5e>
    1524:	66 23       	and	r22, r22
    1526:	71 f0       	breq	.+28     	; 0x1544 <__floatsisf+0x74>
    1528:	96 e8       	ldi	r25, 0x86	; 134
    152a:	86 2f       	mov	r24, r22
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	2a f0       	brmi	.+10     	; 0x153c <__floatsisf+0x6c>
    1532:	9a 95       	dec	r25
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	da f7       	brpl	.-10     	; 0x1532 <__floatsisf+0x62>
    153c:	88 0f       	add	r24, r24
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	97 f9       	bld	r25, 7
    1544:	08 95       	ret

00001546 <__fp_cmp>:
    1546:	99 0f       	add	r25, r25
    1548:	00 08       	sbc	r0, r0
    154a:	55 0f       	add	r21, r21
    154c:	aa 0b       	sbc	r26, r26
    154e:	e0 e8       	ldi	r30, 0x80	; 128
    1550:	fe ef       	ldi	r31, 0xFE	; 254
    1552:	16 16       	cp	r1, r22
    1554:	17 06       	cpc	r1, r23
    1556:	e8 07       	cpc	r30, r24
    1558:	f9 07       	cpc	r31, r25
    155a:	c0 f0       	brcs	.+48     	; 0x158c <__fp_cmp+0x46>
    155c:	12 16       	cp	r1, r18
    155e:	13 06       	cpc	r1, r19
    1560:	e4 07       	cpc	r30, r20
    1562:	f5 07       	cpc	r31, r21
    1564:	98 f0       	brcs	.+38     	; 0x158c <__fp_cmp+0x46>
    1566:	62 1b       	sub	r22, r18
    1568:	73 0b       	sbc	r23, r19
    156a:	84 0b       	sbc	r24, r20
    156c:	95 0b       	sbc	r25, r21
    156e:	39 f4       	brne	.+14     	; 0x157e <__fp_cmp+0x38>
    1570:	0a 26       	eor	r0, r26
    1572:	61 f0       	breq	.+24     	; 0x158c <__fp_cmp+0x46>
    1574:	23 2b       	or	r18, r19
    1576:	24 2b       	or	r18, r20
    1578:	25 2b       	or	r18, r21
    157a:	21 f4       	brne	.+8      	; 0x1584 <__fp_cmp+0x3e>
    157c:	08 95       	ret
    157e:	0a 26       	eor	r0, r26
    1580:	09 f4       	brne	.+2      	; 0x1584 <__fp_cmp+0x3e>
    1582:	a1 40       	sbci	r26, 0x01	; 1
    1584:	a6 95       	lsr	r26
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	81 1d       	adc	r24, r1
    158a:	81 1d       	adc	r24, r1
    158c:	08 95       	ret

0000158e <__fp_inf>:
    158e:	97 f9       	bld	r25, 7
    1590:	9f 67       	ori	r25, 0x7F	; 127
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	08 95       	ret

0000159a <__fp_nan>:
    159a:	9f ef       	ldi	r25, 0xFF	; 255
    159c:	80 ec       	ldi	r24, 0xC0	; 192
    159e:	08 95       	ret

000015a0 <__fp_pscA>:
    15a0:	00 24       	eor	r0, r0
    15a2:	0a 94       	dec	r0
    15a4:	16 16       	cp	r1, r22
    15a6:	17 06       	cpc	r1, r23
    15a8:	18 06       	cpc	r1, r24
    15aa:	09 06       	cpc	r0, r25
    15ac:	08 95       	ret

000015ae <__fp_pscB>:
    15ae:	00 24       	eor	r0, r0
    15b0:	0a 94       	dec	r0
    15b2:	12 16       	cp	r1, r18
    15b4:	13 06       	cpc	r1, r19
    15b6:	14 06       	cpc	r1, r20
    15b8:	05 06       	cpc	r0, r21
    15ba:	08 95       	ret

000015bc <__fp_round>:
    15bc:	09 2e       	mov	r0, r25
    15be:	03 94       	inc	r0
    15c0:	00 0c       	add	r0, r0
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <__fp_round+0xc>
    15c4:	88 23       	and	r24, r24
    15c6:	52 f0       	brmi	.+20     	; 0x15dc <__fp_round+0x20>
    15c8:	bb 0f       	add	r27, r27
    15ca:	40 f4       	brcc	.+16     	; 0x15dc <__fp_round+0x20>
    15cc:	bf 2b       	or	r27, r31
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <__fp_round+0x18>
    15d0:	60 ff       	sbrs	r22, 0
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <__fp_round+0x20>
    15d4:	6f 5f       	subi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	8f 4f       	sbci	r24, 0xFF	; 255
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	08 95       	ret

000015de <__fp_split3>:
    15de:	57 fd       	sbrc	r21, 7
    15e0:	90 58       	subi	r25, 0x80	; 128
    15e2:	44 0f       	add	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	59 f0       	breq	.+22     	; 0x15fe <__fp_splitA+0x10>
    15e8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ea:	71 f0       	breq	.+28     	; 0x1608 <__fp_splitA+0x1a>
    15ec:	47 95       	ror	r20

000015ee <__fp_splitA>:
    15ee:	88 0f       	add	r24, r24
    15f0:	97 fb       	bst	r25, 7
    15f2:	99 1f       	adc	r25, r25
    15f4:	61 f0       	breq	.+24     	; 0x160e <__fp_splitA+0x20>
    15f6:	9f 3f       	cpi	r25, 0xFF	; 255
    15f8:	79 f0       	breq	.+30     	; 0x1618 <__fp_splitA+0x2a>
    15fa:	87 95       	ror	r24
    15fc:	08 95       	ret
    15fe:	12 16       	cp	r1, r18
    1600:	13 06       	cpc	r1, r19
    1602:	14 06       	cpc	r1, r20
    1604:	55 1f       	adc	r21, r21
    1606:	f2 cf       	rjmp	.-28     	; 0x15ec <__fp_split3+0xe>
    1608:	46 95       	lsr	r20
    160a:	f1 df       	rcall	.-30     	; 0x15ee <__fp_splitA>
    160c:	08 c0       	rjmp	.+16     	; 0x161e <__fp_splitA+0x30>
    160e:	16 16       	cp	r1, r22
    1610:	17 06       	cpc	r1, r23
    1612:	18 06       	cpc	r1, r24
    1614:	99 1f       	adc	r25, r25
    1616:	f1 cf       	rjmp	.-30     	; 0x15fa <__fp_splitA+0xc>
    1618:	86 95       	lsr	r24
    161a:	71 05       	cpc	r23, r1
    161c:	61 05       	cpc	r22, r1
    161e:	08 94       	sec
    1620:	08 95       	ret

00001622 <__fp_zero>:
    1622:	e8 94       	clt

00001624 <__fp_szero>:
    1624:	bb 27       	eor	r27, r27
    1626:	66 27       	eor	r22, r22
    1628:	77 27       	eor	r23, r23
    162a:	cb 01       	movw	r24, r22
    162c:	97 f9       	bld	r25, 7
    162e:	08 95       	ret

00001630 <__gesf2>:
    1630:	8a df       	rcall	.-236    	; 0x1546 <__fp_cmp>
    1632:	08 f4       	brcc	.+2      	; 0x1636 <__gesf2+0x6>
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	08 95       	ret

00001638 <__mulsf3>:
    1638:	0b d0       	rcall	.+22     	; 0x1650 <__mulsf3x>
    163a:	c0 cf       	rjmp	.-128    	; 0x15bc <__fp_round>
    163c:	b1 df       	rcall	.-158    	; 0x15a0 <__fp_pscA>
    163e:	28 f0       	brcs	.+10     	; 0x164a <__mulsf3+0x12>
    1640:	b6 df       	rcall	.-148    	; 0x15ae <__fp_pscB>
    1642:	18 f0       	brcs	.+6      	; 0x164a <__mulsf3+0x12>
    1644:	95 23       	and	r25, r21
    1646:	09 f0       	breq	.+2      	; 0x164a <__mulsf3+0x12>
    1648:	a2 cf       	rjmp	.-188    	; 0x158e <__fp_inf>
    164a:	a7 cf       	rjmp	.-178    	; 0x159a <__fp_nan>
    164c:	11 24       	eor	r1, r1
    164e:	ea cf       	rjmp	.-44     	; 0x1624 <__fp_szero>

00001650 <__mulsf3x>:
    1650:	c6 df       	rcall	.-116    	; 0x15de <__fp_split3>
    1652:	a0 f3       	brcs	.-24     	; 0x163c <__mulsf3+0x4>

00001654 <__mulsf3_pse>:
    1654:	95 9f       	mul	r25, r21
    1656:	d1 f3       	breq	.-12     	; 0x164c <__mulsf3+0x14>
    1658:	95 0f       	add	r25, r21
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	55 1f       	adc	r21, r21
    165e:	62 9f       	mul	r22, r18
    1660:	f0 01       	movw	r30, r0
    1662:	72 9f       	mul	r23, r18
    1664:	bb 27       	eor	r27, r27
    1666:	f0 0d       	add	r31, r0
    1668:	b1 1d       	adc	r27, r1
    166a:	63 9f       	mul	r22, r19
    166c:	aa 27       	eor	r26, r26
    166e:	f0 0d       	add	r31, r0
    1670:	b1 1d       	adc	r27, r1
    1672:	aa 1f       	adc	r26, r26
    1674:	64 9f       	mul	r22, r20
    1676:	66 27       	eor	r22, r22
    1678:	b0 0d       	add	r27, r0
    167a:	a1 1d       	adc	r26, r1
    167c:	66 1f       	adc	r22, r22
    167e:	82 9f       	mul	r24, r18
    1680:	22 27       	eor	r18, r18
    1682:	b0 0d       	add	r27, r0
    1684:	a1 1d       	adc	r26, r1
    1686:	62 1f       	adc	r22, r18
    1688:	73 9f       	mul	r23, r19
    168a:	b0 0d       	add	r27, r0
    168c:	a1 1d       	adc	r26, r1
    168e:	62 1f       	adc	r22, r18
    1690:	83 9f       	mul	r24, r19
    1692:	a0 0d       	add	r26, r0
    1694:	61 1d       	adc	r22, r1
    1696:	22 1f       	adc	r18, r18
    1698:	74 9f       	mul	r23, r20
    169a:	33 27       	eor	r19, r19
    169c:	a0 0d       	add	r26, r0
    169e:	61 1d       	adc	r22, r1
    16a0:	23 1f       	adc	r18, r19
    16a2:	84 9f       	mul	r24, r20
    16a4:	60 0d       	add	r22, r0
    16a6:	21 1d       	adc	r18, r1
    16a8:	82 2f       	mov	r24, r18
    16aa:	76 2f       	mov	r23, r22
    16ac:	6a 2f       	mov	r22, r26
    16ae:	11 24       	eor	r1, r1
    16b0:	9f 57       	subi	r25, 0x7F	; 127
    16b2:	50 40       	sbci	r21, 0x00	; 0
    16b4:	8a f0       	brmi	.+34     	; 0x16d8 <__mulsf3_pse+0x84>
    16b6:	e1 f0       	breq	.+56     	; 0x16f0 <__mulsf3_pse+0x9c>
    16b8:	88 23       	and	r24, r24
    16ba:	4a f0       	brmi	.+18     	; 0x16ce <__mulsf3_pse+0x7a>
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	bb 1f       	adc	r27, r27
    16c2:	66 1f       	adc	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	91 50       	subi	r25, 0x01	; 1
    16ca:	50 40       	sbci	r21, 0x00	; 0
    16cc:	a9 f7       	brne	.-22     	; 0x16b8 <__mulsf3_pse+0x64>
    16ce:	9e 3f       	cpi	r25, 0xFE	; 254
    16d0:	51 05       	cpc	r21, r1
    16d2:	70 f0       	brcs	.+28     	; 0x16f0 <__mulsf3_pse+0x9c>
    16d4:	5c cf       	rjmp	.-328    	; 0x158e <__fp_inf>
    16d6:	a6 cf       	rjmp	.-180    	; 0x1624 <__fp_szero>
    16d8:	5f 3f       	cpi	r21, 0xFF	; 255
    16da:	ec f3       	brlt	.-6      	; 0x16d6 <__mulsf3_pse+0x82>
    16dc:	98 3e       	cpi	r25, 0xE8	; 232
    16de:	dc f3       	brlt	.-10     	; 0x16d6 <__mulsf3_pse+0x82>
    16e0:	86 95       	lsr	r24
    16e2:	77 95       	ror	r23
    16e4:	67 95       	ror	r22
    16e6:	b7 95       	ror	r27
    16e8:	f7 95       	ror	r31
    16ea:	e7 95       	ror	r30
    16ec:	9f 5f       	subi	r25, 0xFF	; 255
    16ee:	c1 f7       	brne	.-16     	; 0x16e0 <__mulsf3_pse+0x8c>
    16f0:	fe 2b       	or	r31, r30
    16f2:	88 0f       	add	r24, r24
    16f4:	91 1d       	adc	r25, r1
    16f6:	96 95       	lsr	r25
    16f8:	87 95       	ror	r24
    16fa:	97 f9       	bld	r25, 7
    16fc:	08 95       	ret

000016fe <vfprintf>:
    16fe:	a5 e1       	ldi	r26, 0x15	; 21
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e8       	ldi	r30, 0x85	; 133
    1704:	fb e0       	ldi	r31, 0x0B	; 11
    1706:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__prologue_saves__>
    170a:	4c 01       	movw	r8, r24
    170c:	7f 87       	std	Y+15, r23	; 0x0f
    170e:	6e 87       	std	Y+14, r22	; 0x0e
    1710:	fc 01       	movw	r30, r24
    1712:	17 82       	std	Z+7, r1	; 0x07
    1714:	16 82       	std	Z+6, r1	; 0x06
    1716:	83 81       	ldd	r24, Z+3	; 0x03
    1718:	81 fd       	sbrc	r24, 1
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <vfprintf+0x26>
    171c:	76 c3       	rjmp	.+1772   	; 0x1e0a <vfprintf+0x70c>
    171e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1720:	5d 85       	ldd	r21, Y+13	; 0x0d
    1722:	04 c0       	rjmp	.+8      	; 0x172c <vfprintf+0x2e>
    1724:	1e 01       	movw	r2, r28
    1726:	08 94       	sec
    1728:	21 1c       	adc	r2, r1
    172a:	31 1c       	adc	r3, r1
    172c:	f4 01       	movw	r30, r8
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	ee 85       	ldd	r30, Y+14	; 0x0e
    1732:	ff 85       	ldd	r31, Y+15	; 0x0f
    1734:	93 fd       	sbrc	r25, 3
    1736:	85 91       	lpm	r24, Z+
    1738:	93 ff       	sbrs	r25, 3
    173a:	81 91       	ld	r24, Z+
    173c:	ff 87       	std	Y+15, r31	; 0x0f
    173e:	ee 87       	std	Y+14, r30	; 0x0e
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <vfprintf+0x48>
    1744:	5e c3       	rjmp	.+1724   	; 0x1e02 <vfprintf+0x704>
    1746:	85 32       	cpi	r24, 0x25	; 37
    1748:	41 f4       	brne	.+16     	; 0x175a <vfprintf+0x5c>
    174a:	93 fd       	sbrc	r25, 3
    174c:	85 91       	lpm	r24, Z+
    174e:	93 ff       	sbrs	r25, 3
    1750:	81 91       	ld	r24, Z+
    1752:	ff 87       	std	Y+15, r31	; 0x0f
    1754:	ee 87       	std	Y+14, r30	; 0x0e
    1756:	85 32       	cpi	r24, 0x25	; 37
    1758:	59 f4       	brne	.+22     	; 0x1770 <vfprintf+0x72>
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	b4 01       	movw	r22, r8
    175e:	4c 8b       	std	Y+20, r20	; 0x14
    1760:	5d 8b       	std	Y+21, r21	; 0x15
    1762:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1766:	4c 89       	ldd	r20, Y+20	; 0x14
    1768:	5d 89       	ldd	r21, Y+21	; 0x15
    176a:	5d 87       	std	Y+13, r21	; 0x0d
    176c:	4c 87       	std	Y+12, r20	; 0x0c
    176e:	d7 cf       	rjmp	.-82     	; 0x171e <vfprintf+0x20>
    1770:	ff 24       	eor	r15, r15
    1772:	dd 24       	eor	r13, r13
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	10 32       	cpi	r17, 0x20	; 32
    1778:	b0 f4       	brcc	.+44     	; 0x17a6 <vfprintf+0xa8>
    177a:	8b 32       	cpi	r24, 0x2B	; 43
    177c:	69 f0       	breq	.+26     	; 0x1798 <vfprintf+0x9a>
    177e:	8c 32       	cpi	r24, 0x2C	; 44
    1780:	28 f4       	brcc	.+10     	; 0x178c <vfprintf+0x8e>
    1782:	80 32       	cpi	r24, 0x20	; 32
    1784:	51 f0       	breq	.+20     	; 0x179a <vfprintf+0x9c>
    1786:	83 32       	cpi	r24, 0x23	; 35
    1788:	71 f4       	brne	.+28     	; 0x17a6 <vfprintf+0xa8>
    178a:	0b c0       	rjmp	.+22     	; 0x17a2 <vfprintf+0xa4>
    178c:	8d 32       	cpi	r24, 0x2D	; 45
    178e:	39 f0       	breq	.+14     	; 0x179e <vfprintf+0xa0>
    1790:	80 33       	cpi	r24, 0x30	; 48
    1792:	49 f4       	brne	.+18     	; 0x17a6 <vfprintf+0xa8>
    1794:	11 60       	ori	r17, 0x01	; 1
    1796:	2c c0       	rjmp	.+88     	; 0x17f0 <vfprintf+0xf2>
    1798:	12 60       	ori	r17, 0x02	; 2
    179a:	14 60       	ori	r17, 0x04	; 4
    179c:	29 c0       	rjmp	.+82     	; 0x17f0 <vfprintf+0xf2>
    179e:	18 60       	ori	r17, 0x08	; 8
    17a0:	27 c0       	rjmp	.+78     	; 0x17f0 <vfprintf+0xf2>
    17a2:	10 61       	ori	r17, 0x10	; 16
    17a4:	25 c0       	rjmp	.+74     	; 0x17f0 <vfprintf+0xf2>
    17a6:	17 fd       	sbrc	r17, 7
    17a8:	2e c0       	rjmp	.+92     	; 0x1806 <vfprintf+0x108>
    17aa:	28 2f       	mov	r18, r24
    17ac:	20 53       	subi	r18, 0x30	; 48
    17ae:	2a 30       	cpi	r18, 0x0A	; 10
    17b0:	98 f4       	brcc	.+38     	; 0x17d8 <vfprintf+0xda>
    17b2:	16 ff       	sbrs	r17, 6
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <vfprintf+0xc8>
    17b6:	8f 2d       	mov	r24, r15
    17b8:	88 0f       	add	r24, r24
    17ba:	f8 2e       	mov	r15, r24
    17bc:	ff 0c       	add	r15, r15
    17be:	ff 0c       	add	r15, r15
    17c0:	f8 0e       	add	r15, r24
    17c2:	f2 0e       	add	r15, r18
    17c4:	15 c0       	rjmp	.+42     	; 0x17f0 <vfprintf+0xf2>
    17c6:	8d 2d       	mov	r24, r13
    17c8:	88 0f       	add	r24, r24
    17ca:	d8 2e       	mov	r13, r24
    17cc:	dd 0c       	add	r13, r13
    17ce:	dd 0c       	add	r13, r13
    17d0:	d8 0e       	add	r13, r24
    17d2:	d2 0e       	add	r13, r18
    17d4:	10 62       	ori	r17, 0x20	; 32
    17d6:	0c c0       	rjmp	.+24     	; 0x17f0 <vfprintf+0xf2>
    17d8:	8e 32       	cpi	r24, 0x2E	; 46
    17da:	21 f4       	brne	.+8      	; 0x17e4 <vfprintf+0xe6>
    17dc:	16 fd       	sbrc	r17, 6
    17de:	11 c3       	rjmp	.+1570   	; 0x1e02 <vfprintf+0x704>
    17e0:	10 64       	ori	r17, 0x40	; 64
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <vfprintf+0xf2>
    17e4:	8c 36       	cpi	r24, 0x6C	; 108
    17e6:	11 f4       	brne	.+4      	; 0x17ec <vfprintf+0xee>
    17e8:	10 68       	ori	r17, 0x80	; 128
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0xf2>
    17ec:	88 36       	cpi	r24, 0x68	; 104
    17ee:	59 f4       	brne	.+22     	; 0x1806 <vfprintf+0x108>
    17f0:	ee 85       	ldd	r30, Y+14	; 0x0e
    17f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    17f4:	93 fd       	sbrc	r25, 3
    17f6:	85 91       	lpm	r24, Z+
    17f8:	93 ff       	sbrs	r25, 3
    17fa:	81 91       	ld	r24, Z+
    17fc:	ff 87       	std	Y+15, r31	; 0x0f
    17fe:	ee 87       	std	Y+14, r30	; 0x0e
    1800:	88 23       	and	r24, r24
    1802:	09 f0       	breq	.+2      	; 0x1806 <vfprintf+0x108>
    1804:	b8 cf       	rjmp	.-144    	; 0x1776 <vfprintf+0x78>
    1806:	98 2f       	mov	r25, r24
    1808:	95 54       	subi	r25, 0x45	; 69
    180a:	93 30       	cpi	r25, 0x03	; 3
    180c:	18 f4       	brcc	.+6      	; 0x1814 <vfprintf+0x116>
    180e:	10 61       	ori	r17, 0x10	; 16
    1810:	80 5e       	subi	r24, 0xE0	; 224
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <vfprintf+0x122>
    1814:	98 2f       	mov	r25, r24
    1816:	95 56       	subi	r25, 0x65	; 101
    1818:	93 30       	cpi	r25, 0x03	; 3
    181a:	08 f0       	brcs	.+2      	; 0x181e <vfprintf+0x120>
    181c:	a2 c1       	rjmp	.+836    	; 0x1b62 <vfprintf+0x464>
    181e:	1f 7e       	andi	r17, 0xEF	; 239
    1820:	16 fd       	sbrc	r17, 6
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x12a>
    1824:	e6 e0       	ldi	r30, 0x06	; 6
    1826:	fe 2e       	mov	r15, r30
    1828:	1f 73       	andi	r17, 0x3F	; 63
    182a:	85 36       	cpi	r24, 0x65	; 101
    182c:	11 f4       	brne	.+4      	; 0x1832 <vfprintf+0x134>
    182e:	10 64       	ori	r17, 0x40	; 64
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0x140>
    1832:	86 36       	cpi	r24, 0x66	; 102
    1834:	11 f4       	brne	.+4      	; 0x183a <vfprintf+0x13c>
    1836:	10 68       	ori	r17, 0x80	; 128
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x140>
    183a:	f1 10       	cpse	r15, r1
    183c:	fa 94       	dec	r15
    183e:	17 ff       	sbrs	r17, 7
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <vfprintf+0x152>
    1842:	fb e3       	ldi	r31, 0x3B	; 59
    1844:	ff 15       	cp	r31, r15
    1846:	48 f0       	brcs	.+18     	; 0x185a <vfprintf+0x15c>
    1848:	ef 2c       	mov	r14, r15
    184a:	e3 94       	inc	r14
    184c:	27 e0       	ldi	r18, 0x07	; 7
    184e:	0d c0       	rjmp	.+26     	; 0x186a <vfprintf+0x16c>
    1850:	27 e0       	ldi	r18, 0x07	; 7
    1852:	2f 15       	cp	r18, r15
    1854:	30 f0       	brcs	.+12     	; 0x1862 <vfprintf+0x164>
    1856:	2f 2d       	mov	r18, r15
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <vfprintf+0x16a>
    185a:	27 e0       	ldi	r18, 0x07	; 7
    185c:	7c e3       	ldi	r23, 0x3C	; 60
    185e:	e7 2e       	mov	r14, r23
    1860:	04 c0       	rjmp	.+8      	; 0x186a <vfprintf+0x16c>
    1862:	27 e0       	ldi	r18, 0x07	; 7
    1864:	67 e0       	ldi	r22, 0x07	; 7
    1866:	f6 2e       	mov	r15, r22
    1868:	ee 24       	eor	r14, r14
    186a:	ca 01       	movw	r24, r20
    186c:	04 96       	adiw	r24, 0x04	; 4
    186e:	9d 87       	std	Y+13, r25	; 0x0d
    1870:	8c 87       	std	Y+12, r24	; 0x0c
    1872:	fa 01       	movw	r30, r20
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	a1 01       	movw	r20, r2
    187e:	0e 2d       	mov	r16, r14
    1880:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__ftoa_engine>
    1884:	5c 01       	movw	r10, r24
    1886:	c9 80       	ldd	r12, Y+1	; 0x01
    1888:	2c 2d       	mov	r18, r12
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	39 8b       	std	Y+17, r19	; 0x11
    188e:	28 8b       	std	Y+16, r18	; 0x10
    1890:	c0 fe       	sbrs	r12, 0
    1892:	03 c0       	rjmp	.+6      	; 0x189a <vfprintf+0x19c>
    1894:	38 89       	ldd	r19, Y+16	; 0x10
    1896:	33 ff       	sbrs	r19, 3
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0x1a8>
    189a:	11 fd       	sbrc	r17, 1
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x1ac>
    189e:	12 ff       	sbrs	r17, 2
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <vfprintf+0x1b0>
    18a2:	00 e2       	ldi	r16, 0x20	; 32
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x1b2>
    18a6:	0d e2       	ldi	r16, 0x2D	; 45
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x1b2>
    18aa:	0b e2       	ldi	r16, 0x2B	; 43
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <vfprintf+0x1b2>
    18ae:	00 e0       	ldi	r16, 0x00	; 0
    18b0:	88 89       	ldd	r24, Y+16	; 0x10
    18b2:	99 89       	ldd	r25, Y+17	; 0x11
    18b4:	8c 70       	andi	r24, 0x0C	; 12
    18b6:	90 70       	andi	r25, 0x00	; 0
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	09 f4       	brne	.+2      	; 0x18be <vfprintf+0x1c0>
    18bc:	3c c0       	rjmp	.+120    	; 0x1936 <vfprintf+0x238>
    18be:	00 23       	and	r16, r16
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <vfprintf+0x1c8>
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x1ca>
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	8d 15       	cp	r24, r13
    18ca:	58 f4       	brcc	.+22     	; 0x18e2 <vfprintf+0x1e4>
    18cc:	d8 1a       	sub	r13, r24
    18ce:	13 fd       	sbrc	r17, 3
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <vfprintf+0x1e6>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	b4 01       	movw	r22, r8
    18d8:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    18dc:	da 94       	dec	r13
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <vfprintf+0x1d4>
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <vfprintf+0x1e6>
    18e2:	dd 24       	eor	r13, r13
    18e4:	00 23       	and	r16, r16
    18e6:	29 f0       	breq	.+10     	; 0x18f2 <vfprintf+0x1f4>
    18e8:	80 2f       	mov	r24, r16
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	b4 01       	movw	r22, r8
    18ee:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    18f2:	88 89       	ldd	r24, Y+16	; 0x10
    18f4:	83 fd       	sbrc	r24, 3
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <vfprintf+0x204>
    18f8:	3c e6       	ldi	r19, 0x6C	; 108
    18fa:	e3 2e       	mov	r14, r19
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	f3 2e       	mov	r15, r19
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <vfprintf+0x226>
    1902:	28 e6       	ldi	r18, 0x68	; 104
    1904:	e2 2e       	mov	r14, r18
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	f2 2e       	mov	r15, r18
    190a:	0c c0       	rjmp	.+24     	; 0x1924 <vfprintf+0x226>
    190c:	01 15       	cp	r16, r1
    190e:	11 05       	cpc	r17, r1
    1910:	09 f0       	breq	.+2      	; 0x1914 <vfprintf+0x216>
    1912:	80 52       	subi	r24, 0x20	; 32
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b4 01       	movw	r22, r8
    1918:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    191c:	08 94       	sec
    191e:	e1 1c       	adc	r14, r1
    1920:	f1 1c       	adc	r15, r1
    1922:	04 c0       	rjmp	.+8      	; 0x192c <vfprintf+0x22e>
    1924:	01 2f       	mov	r16, r17
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	00 71       	andi	r16, 0x10	; 16
    192a:	10 70       	andi	r17, 0x00	; 0
    192c:	f7 01       	movw	r30, r14
    192e:	84 91       	lpm	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	61 f7       	brne	.-40     	; 0x190c <vfprintf+0x20e>
    1934:	63 c2       	rjmp	.+1222   	; 0x1dfc <vfprintf+0x6fe>
    1936:	17 ff       	sbrs	r17, 7
    1938:	0e c0       	rjmp	.+28     	; 0x1956 <vfprintf+0x258>
    193a:	ea 0c       	add	r14, r10
    193c:	f8 89       	ldd	r31, Y+16	; 0x10
    193e:	f4 ff       	sbrs	r31, 4
    1940:	04 c0       	rjmp	.+8      	; 0x194a <vfprintf+0x24c>
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	81 33       	cpi	r24, 0x31	; 49
    1946:	09 f4       	brne	.+2      	; 0x194a <vfprintf+0x24c>
    1948:	ea 94       	dec	r14
    194a:	1e 14       	cp	r1, r14
    194c:	4c f5       	brge	.+82     	; 0x19a0 <vfprintf+0x2a2>
    194e:	28 e0       	ldi	r18, 0x08	; 8
    1950:	2e 15       	cp	r18, r14
    1952:	48 f1       	brcs	.+82     	; 0x19a6 <vfprintf+0x2a8>
    1954:	2c c0       	rjmp	.+88     	; 0x19ae <vfprintf+0x2b0>
    1956:	16 fd       	sbrc	r17, 6
    1958:	2a c0       	rjmp	.+84     	; 0x19ae <vfprintf+0x2b0>
    195a:	8f 2d       	mov	r24, r15
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	8a 15       	cp	r24, r10
    1960:	9b 05       	cpc	r25, r11
    1962:	44 f0       	brlt	.+16     	; 0x1974 <vfprintf+0x276>
    1964:	3c ef       	ldi	r19, 0xFC	; 252
    1966:	a3 16       	cp	r10, r19
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	b3 06       	cpc	r11, r19
    196c:	1c f0       	brlt	.+6      	; 0x1974 <vfprintf+0x276>
    196e:	10 68       	ori	r17, 0x80	; 128
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <vfprintf+0x276>
    1972:	fa 94       	dec	r15
    1974:	ff 20       	and	r15, r15
    1976:	49 f0       	breq	.+18     	; 0x198a <vfprintf+0x28c>
    1978:	e2 e0       	ldi	r30, 0x02	; 2
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ec 0f       	add	r30, r28
    197e:	fd 1f       	adc	r31, r29
    1980:	ef 0d       	add	r30, r15
    1982:	f1 1d       	adc	r31, r1
    1984:	80 81       	ld	r24, Z
    1986:	80 33       	cpi	r24, 0x30	; 48
    1988:	a1 f3       	breq	.-24     	; 0x1972 <vfprintf+0x274>
    198a:	17 ff       	sbrs	r17, 7
    198c:	10 c0       	rjmp	.+32     	; 0x19ae <vfprintf+0x2b0>
    198e:	ef 2c       	mov	r14, r15
    1990:	e3 94       	inc	r14
    1992:	8f 2d       	mov	r24, r15
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a8 16       	cp	r10, r24
    1998:	b9 06       	cpc	r11, r25
    199a:	44 f4       	brge	.+16     	; 0x19ac <vfprintf+0x2ae>
    199c:	fa 18       	sub	r15, r10
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <vfprintf+0x2b0>
    19a0:	ee 24       	eor	r14, r14
    19a2:	e3 94       	inc	r14
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <vfprintf+0x2b0>
    19a6:	98 e0       	ldi	r25, 0x08	; 8
    19a8:	e9 2e       	mov	r14, r25
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <vfprintf+0x2b0>
    19ac:	ff 24       	eor	r15, r15
    19ae:	17 ff       	sbrs	r17, 7
    19b0:	07 c0       	rjmp	.+14     	; 0x19c0 <vfprintf+0x2c2>
    19b2:	1a 14       	cp	r1, r10
    19b4:	1b 04       	cpc	r1, r11
    19b6:	3c f4       	brge	.+14     	; 0x19c6 <vfprintf+0x2c8>
    19b8:	95 01       	movw	r18, r10
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <vfprintf+0x2cc>
    19c0:	25 e0       	ldi	r18, 0x05	; 5
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <vfprintf+0x2cc>
    19c6:	21 e0       	ldi	r18, 0x01	; 1
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	00 23       	and	r16, r16
    19cc:	11 f0       	breq	.+4      	; 0x19d2 <vfprintf+0x2d4>
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	ff 20       	and	r15, r15
    19d4:	29 f0       	breq	.+10     	; 0x19e0 <vfprintf+0x2e2>
    19d6:	8f 2d       	mov	r24, r15
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	28 0f       	add	r18, r24
    19de:	39 1f       	adc	r19, r25
    19e0:	8d 2d       	mov	r24, r13
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	28 17       	cp	r18, r24
    19e6:	39 07       	cpc	r19, r25
    19e8:	14 f4       	brge	.+4      	; 0x19ee <vfprintf+0x2f0>
    19ea:	d2 1a       	sub	r13, r18
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <vfprintf+0x2f2>
    19ee:	dd 24       	eor	r13, r13
    19f0:	61 2e       	mov	r6, r17
    19f2:	77 24       	eor	r7, r7
    19f4:	c3 01       	movw	r24, r6
    19f6:	89 70       	andi	r24, 0x09	; 9
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	49 f4       	brne	.+18     	; 0x1a10 <vfprintf+0x312>
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <vfprintf+0x30e>
    1a00:	80 e2       	ldi	r24, 0x20	; 32
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	b4 01       	movw	r22, r8
    1a06:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1a0a:	da 94       	dec	r13
    1a0c:	dd 20       	and	r13, r13
    1a0e:	c1 f7       	brne	.-16     	; 0x1a00 <vfprintf+0x302>
    1a10:	00 23       	and	r16, r16
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <vfprintf+0x320>
    1a14:	80 2f       	mov	r24, r16
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	b4 01       	movw	r22, r8
    1a1a:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1a1e:	63 fc       	sbrc	r6, 3
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <vfprintf+0x336>
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <vfprintf+0x332>
    1a24:	80 e3       	ldi	r24, 0x30	; 48
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	b4 01       	movw	r22, r8
    1a2a:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1a2e:	da 94       	dec	r13
    1a30:	dd 20       	and	r13, r13
    1a32:	c1 f7       	brne	.-16     	; 0x1a24 <vfprintf+0x326>
    1a34:	17 ff       	sbrs	r17, 7
    1a36:	48 c0       	rjmp	.+144    	; 0x1ac8 <vfprintf+0x3ca>
    1a38:	85 01       	movw	r16, r10
    1a3a:	b7 fe       	sbrs	r11, 7
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <vfprintf+0x344>
    1a3e:	00 e0       	ldi	r16, 0x00	; 0
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	66 24       	eor	r6, r6
    1a44:	77 24       	eor	r7, r7
    1a46:	95 01       	movw	r18, r10
    1a48:	2e 19       	sub	r18, r14
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	3b 8b       	std	Y+19, r19	; 0x13
    1a4e:	2a 8b       	std	Y+18, r18	; 0x12
    1a50:	25 01       	movw	r4, r10
    1a52:	40 1a       	sub	r4, r16
    1a54:	51 0a       	sbc	r5, r17
    1a56:	42 0c       	add	r4, r2
    1a58:	53 1c       	adc	r5, r3
    1a5a:	6f 2d       	mov	r22, r15
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	ee 24       	eor	r14, r14
    1a60:	ff 24       	eor	r15, r15
    1a62:	e6 1a       	sub	r14, r22
    1a64:	f7 0a       	sbc	r15, r23
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	0f 3f       	cpi	r16, 0xFF	; 255
    1a6a:	13 07       	cpc	r17, r19
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <vfprintf+0x37a>
    1a6e:	8e e2       	ldi	r24, 0x2E	; 46
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	b4 01       	movw	r22, r8
    1a74:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1a78:	a0 16       	cp	r10, r16
    1a7a:	b1 06       	cpc	r11, r17
    1a7c:	54 f0       	brlt	.+20     	; 0x1a92 <vfprintf+0x394>
    1a7e:	2a 89       	ldd	r18, Y+18	; 0x12
    1a80:	3b 89       	ldd	r19, Y+19	; 0x13
    1a82:	20 17       	cp	r18, r16
    1a84:	31 07       	cpc	r19, r17
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <vfprintf+0x394>
    1a88:	f2 01       	movw	r30, r4
    1a8a:	e6 0d       	add	r30, r6
    1a8c:	f7 1d       	adc	r31, r7
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <vfprintf+0x396>
    1a92:	80 e3       	ldi	r24, 0x30	; 48
    1a94:	01 50       	subi	r16, 0x01	; 1
    1a96:	10 40       	sbci	r17, 0x00	; 0
    1a98:	08 94       	sec
    1a9a:	61 1c       	adc	r6, r1
    1a9c:	71 1c       	adc	r7, r1
    1a9e:	0e 15       	cp	r16, r14
    1aa0:	1f 05       	cpc	r17, r15
    1aa2:	2c f0       	brlt	.+10     	; 0x1aae <vfprintf+0x3b0>
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	b4 01       	movw	r22, r8
    1aa8:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1aac:	dc cf       	rjmp	.-72     	; 0x1a66 <vfprintf+0x368>
    1aae:	0a 15       	cp	r16, r10
    1ab0:	1b 05       	cpc	r17, r11
    1ab2:	41 f4       	brne	.+16     	; 0x1ac4 <vfprintf+0x3c6>
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	96 33       	cpi	r25, 0x36	; 54
    1ab8:	20 f4       	brcc	.+8      	; 0x1ac2 <vfprintf+0x3c4>
    1aba:	95 33       	cpi	r25, 0x35	; 53
    1abc:	19 f4       	brne	.+6      	; 0x1ac4 <vfprintf+0x3c6>
    1abe:	38 89       	ldd	r19, Y+16	; 0x10
    1ac0:	34 ff       	sbrs	r19, 4
    1ac2:	81 e3       	ldi	r24, 0x31	; 49
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	49 c0       	rjmp	.+146    	; 0x1b5a <vfprintf+0x45c>
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	81 33       	cpi	r24, 0x31	; 49
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <vfprintf+0x3d4>
    1ace:	9f ee       	ldi	r25, 0xEF	; 239
    1ad0:	c9 22       	and	r12, r25
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	b4 01       	movw	r22, r8
    1ad6:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1ada:	ff 20       	and	r15, r15
    1adc:	89 f0       	breq	.+34     	; 0x1b00 <vfprintf+0x402>
    1ade:	8e e2       	ldi	r24, 0x2E	; 46
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	b4 01       	movw	r22, r8
    1ae4:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1ae8:	12 e0       	ldi	r17, 0x02	; 2
    1aea:	f1 01       	movw	r30, r2
    1aec:	e1 0f       	add	r30, r17
    1aee:	f1 1d       	adc	r31, r1
    1af0:	1f 5f       	subi	r17, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	b4 01       	movw	r22, r8
    1af8:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1afc:	fa 94       	dec	r15
    1afe:	a9 f7       	brne	.-22     	; 0x1aea <vfprintf+0x3ec>
    1b00:	64 fe       	sbrs	r6, 4
    1b02:	03 c0       	rjmp	.+6      	; 0x1b0a <vfprintf+0x40c>
    1b04:	85 e4       	ldi	r24, 0x45	; 69
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <vfprintf+0x410>
    1b0a:	85 e6       	ldi	r24, 0x65	; 101
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	b4 01       	movw	r22, r8
    1b10:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1b14:	b7 fc       	sbrc	r11, 7
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <vfprintf+0x424>
    1b18:	a1 14       	cp	r10, r1
    1b1a:	b1 04       	cpc	r11, r1
    1b1c:	41 f4       	brne	.+16     	; 0x1b2e <vfprintf+0x430>
    1b1e:	c4 fe       	sbrs	r12, 4
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <vfprintf+0x430>
    1b22:	b0 94       	com	r11
    1b24:	a1 94       	neg	r10
    1b26:	b1 08       	sbc	r11, r1
    1b28:	b3 94       	inc	r11
    1b2a:	8d e2       	ldi	r24, 0x2D	; 45
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <vfprintf+0x432>
    1b2e:	8b e2       	ldi	r24, 0x2B	; 43
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	b4 01       	movw	r22, r8
    1b34:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1b38:	80 e3       	ldi	r24, 0x30	; 48
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <vfprintf+0x448>
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	e6 ef       	ldi	r30, 0xF6	; 246
    1b40:	ff ef       	ldi	r31, 0xFF	; 255
    1b42:	ae 0e       	add	r10, r30
    1b44:	bf 1e       	adc	r11, r31
    1b46:	fa e0       	ldi	r31, 0x0A	; 10
    1b48:	af 16       	cp	r10, r31
    1b4a:	b1 04       	cpc	r11, r1
    1b4c:	bc f7       	brge	.-18     	; 0x1b3c <vfprintf+0x43e>
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	b4 01       	movw	r22, r8
    1b52:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1b56:	c5 01       	movw	r24, r10
    1b58:	c0 96       	adiw	r24, 0x30	; 48
    1b5a:	b4 01       	movw	r22, r8
    1b5c:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1b60:	4d c1       	rjmp	.+666    	; 0x1dfc <vfprintf+0x6fe>
    1b62:	83 36       	cpi	r24, 0x63	; 99
    1b64:	31 f0       	breq	.+12     	; 0x1b72 <vfprintf+0x474>
    1b66:	83 37       	cpi	r24, 0x73	; 115
    1b68:	89 f0       	breq	.+34     	; 0x1b8c <vfprintf+0x48e>
    1b6a:	83 35       	cpi	r24, 0x53	; 83
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <vfprintf+0x472>
    1b6e:	59 c0       	rjmp	.+178    	; 0x1c22 <vfprintf+0x524>
    1b70:	22 c0       	rjmp	.+68     	; 0x1bb6 <vfprintf+0x4b8>
    1b72:	9a 01       	movw	r18, r20
    1b74:	2e 5f       	subi	r18, 0xFE	; 254
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	3d 87       	std	Y+13, r19	; 0x0d
    1b7a:	2c 87       	std	Y+12, r18	; 0x0c
    1b7c:	fa 01       	movw	r30, r20
    1b7e:	80 81       	ld	r24, Z
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	e8 2e       	mov	r14, r24
    1b86:	f1 2c       	mov	r15, r1
    1b88:	51 01       	movw	r10, r2
    1b8a:	13 c0       	rjmp	.+38     	; 0x1bb2 <vfprintf+0x4b4>
    1b8c:	9a 01       	movw	r18, r20
    1b8e:	2e 5f       	subi	r18, 0xFE	; 254
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	3d 87       	std	Y+13, r19	; 0x0d
    1b94:	2c 87       	std	Y+12, r18	; 0x0c
    1b96:	fa 01       	movw	r30, r20
    1b98:	a0 80       	ld	r10, Z
    1b9a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9c:	16 ff       	sbrs	r17, 6
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <vfprintf+0x4a8>
    1ba0:	6f 2d       	mov	r22, r15
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfprintf+0x4ac>
    1ba6:	6f ef       	ldi	r22, 0xFF	; 255
    1ba8:	7f ef       	ldi	r23, 0xFF	; 255
    1baa:	c5 01       	movw	r24, r10
    1bac:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strnlen>
    1bb0:	7c 01       	movw	r14, r24
    1bb2:	1f 77       	andi	r17, 0x7F	; 127
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <vfprintf+0x4e0>
    1bb6:	9a 01       	movw	r18, r20
    1bb8:	2e 5f       	subi	r18, 0xFE	; 254
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	3d 87       	std	Y+13, r19	; 0x0d
    1bbe:	2c 87       	std	Y+12, r18	; 0x0c
    1bc0:	fa 01       	movw	r30, r20
    1bc2:	a0 80       	ld	r10, Z
    1bc4:	b1 80       	ldd	r11, Z+1	; 0x01
    1bc6:	16 ff       	sbrs	r17, 6
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <vfprintf+0x4d2>
    1bca:	6f 2d       	mov	r22, r15
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <vfprintf+0x4d6>
    1bd0:	6f ef       	ldi	r22, 0xFF	; 255
    1bd2:	7f ef       	ldi	r23, 0xFF	; 255
    1bd4:	c5 01       	movw	r24, r10
    1bd6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <strnlen_P>
    1bda:	7c 01       	movw	r14, r24
    1bdc:	10 68       	ori	r17, 0x80	; 128
    1bde:	13 fd       	sbrc	r17, 3
    1be0:	1c c0       	rjmp	.+56     	; 0x1c1a <vfprintf+0x51c>
    1be2:	06 c0       	rjmp	.+12     	; 0x1bf0 <vfprintf+0x4f2>
    1be4:	80 e2       	ldi	r24, 0x20	; 32
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	b4 01       	movw	r22, r8
    1bea:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1bee:	da 94       	dec	r13
    1bf0:	8d 2d       	mov	r24, r13
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	e8 16       	cp	r14, r24
    1bf6:	f9 06       	cpc	r15, r25
    1bf8:	a8 f3       	brcs	.-22     	; 0x1be4 <vfprintf+0x4e6>
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <vfprintf+0x51c>
    1bfc:	f5 01       	movw	r30, r10
    1bfe:	17 fd       	sbrc	r17, 7
    1c00:	85 91       	lpm	r24, Z+
    1c02:	17 ff       	sbrs	r17, 7
    1c04:	81 91       	ld	r24, Z+
    1c06:	5f 01       	movw	r10, r30
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	b4 01       	movw	r22, r8
    1c0c:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1c10:	d1 10       	cpse	r13, r1
    1c12:	da 94       	dec	r13
    1c14:	08 94       	sec
    1c16:	e1 08       	sbc	r14, r1
    1c18:	f1 08       	sbc	r15, r1
    1c1a:	e1 14       	cp	r14, r1
    1c1c:	f1 04       	cpc	r15, r1
    1c1e:	71 f7       	brne	.-36     	; 0x1bfc <vfprintf+0x4fe>
    1c20:	ed c0       	rjmp	.+474    	; 0x1dfc <vfprintf+0x6fe>
    1c22:	84 36       	cpi	r24, 0x64	; 100
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <vfprintf+0x52c>
    1c26:	89 36       	cpi	r24, 0x69	; 105
    1c28:	71 f5       	brne	.+92     	; 0x1c86 <vfprintf+0x588>
    1c2a:	9a 01       	movw	r18, r20
    1c2c:	17 ff       	sbrs	r17, 7
    1c2e:	0a c0       	rjmp	.+20     	; 0x1c44 <vfprintf+0x546>
    1c30:	2c 5f       	subi	r18, 0xFC	; 252
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	3d 87       	std	Y+13, r19	; 0x0d
    1c36:	2c 87       	std	Y+12, r18	; 0x0c
    1c38:	fa 01       	movw	r30, r20
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	a2 81       	ldd	r26, Z+2	; 0x02
    1c40:	b3 81       	ldd	r27, Z+3	; 0x03
    1c42:	0b c0       	rjmp	.+22     	; 0x1c5a <vfprintf+0x55c>
    1c44:	2e 5f       	subi	r18, 0xFE	; 254
    1c46:	3f 4f       	sbci	r19, 0xFF	; 255
    1c48:	3d 87       	std	Y+13, r19	; 0x0d
    1c4a:	2c 87       	std	Y+12, r18	; 0x0c
    1c4c:	fa 01       	movw	r30, r20
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	aa 27       	eor	r26, r26
    1c54:	97 fd       	sbrc	r25, 7
    1c56:	a0 95       	com	r26
    1c58:	ba 2f       	mov	r27, r26
    1c5a:	01 2f       	mov	r16, r17
    1c5c:	0f 76       	andi	r16, 0x6F	; 111
    1c5e:	b7 ff       	sbrs	r27, 7
    1c60:	08 c0       	rjmp	.+16     	; 0x1c72 <vfprintf+0x574>
    1c62:	b0 95       	com	r27
    1c64:	a0 95       	com	r26
    1c66:	90 95       	com	r25
    1c68:	81 95       	neg	r24
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	af 4f       	sbci	r26, 0xFF	; 255
    1c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c70:	00 68       	ori	r16, 0x80	; 128
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	a1 01       	movw	r20, r2
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	0e 94 77 12 	call	0x24ee	; 0x24ee <__ultoa_invert>
    1c80:	e8 2e       	mov	r14, r24
    1c82:	e2 18       	sub	r14, r2
    1c84:	41 c0       	rjmp	.+130    	; 0x1d08 <vfprintf+0x60a>
    1c86:	85 37       	cpi	r24, 0x75	; 117
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <vfprintf+0x594>
    1c8a:	1f 7e       	andi	r17, 0xEF	; 239
    1c8c:	2a e0       	ldi	r18, 0x0A	; 10
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	20 c0       	rjmp	.+64     	; 0x1cd2 <vfprintf+0x5d4>
    1c92:	19 7f       	andi	r17, 0xF9	; 249
    1c94:	8f 36       	cpi	r24, 0x6F	; 111
    1c96:	a9 f0       	breq	.+42     	; 0x1cc2 <vfprintf+0x5c4>
    1c98:	80 37       	cpi	r24, 0x70	; 112
    1c9a:	20 f4       	brcc	.+8      	; 0x1ca4 <vfprintf+0x5a6>
    1c9c:	88 35       	cpi	r24, 0x58	; 88
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <vfprintf+0x5a4>
    1ca0:	b0 c0       	rjmp	.+352    	; 0x1e02 <vfprintf+0x704>
    1ca2:	0b c0       	rjmp	.+22     	; 0x1cba <vfprintf+0x5bc>
    1ca4:	80 37       	cpi	r24, 0x70	; 112
    1ca6:	21 f0       	breq	.+8      	; 0x1cb0 <vfprintf+0x5b2>
    1ca8:	88 37       	cpi	r24, 0x78	; 120
    1caa:	09 f0       	breq	.+2      	; 0x1cae <vfprintf+0x5b0>
    1cac:	aa c0       	rjmp	.+340    	; 0x1e02 <vfprintf+0x704>
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <vfprintf+0x5b4>
    1cb0:	10 61       	ori	r17, 0x10	; 16
    1cb2:	14 ff       	sbrs	r17, 4
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <vfprintf+0x5ca>
    1cb6:	14 60       	ori	r17, 0x04	; 4
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <vfprintf+0x5ca>
    1cba:	14 ff       	sbrs	r17, 4
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <vfprintf+0x5d0>
    1cbe:	16 60       	ori	r17, 0x06	; 6
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x5d0>
    1cc2:	28 e0       	ldi	r18, 0x08	; 8
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <vfprintf+0x5d4>
    1cc8:	20 e1       	ldi	r18, 0x10	; 16
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <vfprintf+0x5d4>
    1cce:	20 e1       	ldi	r18, 0x10	; 16
    1cd0:	32 e0       	ldi	r19, 0x02	; 2
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	17 ff       	sbrs	r17, 7
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <vfprintf+0x5ec>
    1cd8:	04 96       	adiw	r24, 0x04	; 4
    1cda:	9d 87       	std	Y+13, r25	; 0x0d
    1cdc:	8c 87       	std	Y+12, r24	; 0x0c
    1cde:	fa 01       	movw	r30, r20
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x5fc>
    1cea:	02 96       	adiw	r24, 0x02	; 2
    1cec:	9d 87       	std	Y+13, r25	; 0x0d
    1cee:	8c 87       	std	Y+12, r24	; 0x0c
    1cf0:	fa 01       	movw	r30, r20
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a1 01       	movw	r20, r2
    1cfc:	0e 94 77 12 	call	0x24ee	; 0x24ee <__ultoa_invert>
    1d00:	e8 2e       	mov	r14, r24
    1d02:	e2 18       	sub	r14, r2
    1d04:	01 2f       	mov	r16, r17
    1d06:	0f 77       	andi	r16, 0x7F	; 127
    1d08:	06 ff       	sbrs	r16, 6
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <vfprintf+0x620>
    1d0c:	0e 7f       	andi	r16, 0xFE	; 254
    1d0e:	ef 14       	cp	r14, r15
    1d10:	30 f4       	brcc	.+12     	; 0x1d1e <vfprintf+0x620>
    1d12:	04 ff       	sbrs	r16, 4
    1d14:	06 c0       	rjmp	.+12     	; 0x1d22 <vfprintf+0x624>
    1d16:	02 fd       	sbrc	r16, 2
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <vfprintf+0x624>
    1d1a:	0f 7e       	andi	r16, 0xEF	; 239
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <vfprintf+0x624>
    1d1e:	1e 2d       	mov	r17, r14
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <vfprintf+0x626>
    1d22:	1f 2d       	mov	r17, r15
    1d24:	80 2f       	mov	r24, r16
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	04 ff       	sbrs	r16, 4
    1d2a:	0c c0       	rjmp	.+24     	; 0x1d44 <vfprintf+0x646>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ee 0d       	add	r30, r14
    1d30:	f1 1d       	adc	r31, r1
    1d32:	20 81       	ld	r18, Z
    1d34:	20 33       	cpi	r18, 0x30	; 48
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <vfprintf+0x63e>
    1d38:	09 7e       	andi	r16, 0xE9	; 233
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <vfprintf+0x650>
    1d3c:	02 ff       	sbrs	r16, 2
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <vfprintf+0x64e>
    1d40:	1e 5f       	subi	r17, 0xFE	; 254
    1d42:	05 c0       	rjmp	.+10     	; 0x1d4e <vfprintf+0x650>
    1d44:	86 78       	andi	r24, 0x86	; 134
    1d46:	90 70       	andi	r25, 0x00	; 0
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <vfprintf+0x650>
    1d4c:	1f 5f       	subi	r17, 0xFF	; 255
    1d4e:	a0 2e       	mov	r10, r16
    1d50:	bb 24       	eor	r11, r11
    1d52:	03 fd       	sbrc	r16, 3
    1d54:	12 c0       	rjmp	.+36     	; 0x1d7a <vfprintf+0x67c>
    1d56:	00 ff       	sbrs	r16, 0
    1d58:	0d c0       	rjmp	.+26     	; 0x1d74 <vfprintf+0x676>
    1d5a:	fe 2c       	mov	r15, r14
    1d5c:	1d 15       	cp	r17, r13
    1d5e:	50 f4       	brcc	.+20     	; 0x1d74 <vfprintf+0x676>
    1d60:	fd 0c       	add	r15, r13
    1d62:	f1 1a       	sub	r15, r17
    1d64:	1d 2d       	mov	r17, r13
    1d66:	06 c0       	rjmp	.+12     	; 0x1d74 <vfprintf+0x676>
    1d68:	80 e2       	ldi	r24, 0x20	; 32
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	b4 01       	movw	r22, r8
    1d6e:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1d72:	1f 5f       	subi	r17, 0xFF	; 255
    1d74:	1d 15       	cp	r17, r13
    1d76:	c0 f3       	brcs	.-16     	; 0x1d68 <vfprintf+0x66a>
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <vfprintf+0x684>
    1d7a:	1d 15       	cp	r17, r13
    1d7c:	10 f4       	brcc	.+4      	; 0x1d82 <vfprintf+0x684>
    1d7e:	d1 1a       	sub	r13, r17
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <vfprintf+0x686>
    1d82:	dd 24       	eor	r13, r13
    1d84:	a4 fe       	sbrs	r10, 4
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <vfprintf+0x6a8>
    1d88:	80 e3       	ldi	r24, 0x30	; 48
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	b4 01       	movw	r22, r8
    1d8e:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1d92:	a2 fe       	sbrs	r10, 2
    1d94:	1f c0       	rjmp	.+62     	; 0x1dd4 <vfprintf+0x6d6>
    1d96:	a1 fe       	sbrs	r10, 1
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <vfprintf+0x6a2>
    1d9a:	88 e5       	ldi	r24, 0x58	; 88
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	10 c0       	rjmp	.+32     	; 0x1dc0 <vfprintf+0x6c2>
    1da0:	88 e7       	ldi	r24, 0x78	; 120
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <vfprintf+0x6c2>
    1da6:	c5 01       	movw	r24, r10
    1da8:	86 78       	andi	r24, 0x86	; 134
    1daa:	90 70       	andi	r25, 0x00	; 0
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	91 f0       	breq	.+36     	; 0x1dd4 <vfprintf+0x6d6>
    1db0:	a1 fc       	sbrc	r10, 1
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <vfprintf+0x6ba>
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <vfprintf+0x6bc>
    1db8:	8b e2       	ldi	r24, 0x2B	; 43
    1dba:	07 fd       	sbrc	r16, 7
    1dbc:	8d e2       	ldi	r24, 0x2D	; 45
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	b4 01       	movw	r22, r8
    1dc2:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <vfprintf+0x6d6>
    1dc8:	80 e3       	ldi	r24, 0x30	; 48
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	b4 01       	movw	r22, r8
    1dce:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1dd2:	fa 94       	dec	r15
    1dd4:	ef 14       	cp	r14, r15
    1dd6:	c0 f3       	brcs	.-16     	; 0x1dc8 <vfprintf+0x6ca>
    1dd8:	ea 94       	dec	r14
    1dda:	f1 01       	movw	r30, r2
    1ddc:	ee 0d       	add	r30, r14
    1dde:	f1 1d       	adc	r31, r1
    1de0:	80 81       	ld	r24, Z
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	b4 01       	movw	r22, r8
    1de6:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1dea:	ee 20       	and	r14, r14
    1dec:	a9 f7       	brne	.-22     	; 0x1dd8 <vfprintf+0x6da>
    1dee:	06 c0       	rjmp	.+12     	; 0x1dfc <vfprintf+0x6fe>
    1df0:	80 e2       	ldi	r24, 0x20	; 32
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	b4 01       	movw	r22, r8
    1df6:	0e 94 08 12 	call	0x2410	; 0x2410 <fputc>
    1dfa:	da 94       	dec	r13
    1dfc:	dd 20       	and	r13, r13
    1dfe:	c1 f7       	brne	.-16     	; 0x1df0 <vfprintf+0x6f2>
    1e00:	8e cc       	rjmp	.-1764   	; 0x171e <vfprintf+0x20>
    1e02:	f4 01       	movw	r30, r8
    1e04:	86 81       	ldd	r24, Z+6	; 0x06
    1e06:	97 81       	ldd	r25, Z+7	; 0x07
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vfprintf+0x710>
    1e0a:	8f ef       	ldi	r24, 0xFF	; 255
    1e0c:	9f ef       	ldi	r25, 0xFF	; 255
    1e0e:	65 96       	adiw	r28, 0x15	; 21
    1e10:	e2 e1       	ldi	r30, 0x12	; 18
    1e12:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__epilogue_restores__>

00001e16 <__divmodhi4>:
    1e16:	97 fb       	bst	r25, 7
    1e18:	09 2e       	mov	r0, r25
    1e1a:	07 26       	eor	r0, r23
    1e1c:	0a d0       	rcall	.+20     	; 0x1e32 <__divmodhi4_neg1>
    1e1e:	77 fd       	sbrc	r23, 7
    1e20:	04 d0       	rcall	.+8      	; 0x1e2a <__divmodhi4_neg2>
    1e22:	43 d0       	rcall	.+134    	; 0x1eaa <__udivmodhi4>
    1e24:	06 d0       	rcall	.+12     	; 0x1e32 <__divmodhi4_neg1>
    1e26:	00 20       	and	r0, r0
    1e28:	1a f4       	brpl	.+6      	; 0x1e30 <__divmodhi4_exit>

00001e2a <__divmodhi4_neg2>:
    1e2a:	70 95       	com	r23
    1e2c:	61 95       	neg	r22
    1e2e:	7f 4f       	sbci	r23, 0xFF	; 255

00001e30 <__divmodhi4_exit>:
    1e30:	08 95       	ret

00001e32 <__divmodhi4_neg1>:
    1e32:	f6 f7       	brtc	.-4      	; 0x1e30 <__divmodhi4_exit>
    1e34:	90 95       	com	r25
    1e36:	81 95       	neg	r24
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	08 95       	ret

00001e3c <__prologue_saves__>:
    1e3c:	2f 92       	push	r2
    1e3e:	3f 92       	push	r3
    1e40:	4f 92       	push	r4
    1e42:	5f 92       	push	r5
    1e44:	6f 92       	push	r6
    1e46:	7f 92       	push	r7
    1e48:	8f 92       	push	r8
    1e4a:	9f 92       	push	r9
    1e4c:	af 92       	push	r10
    1e4e:	bf 92       	push	r11
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	ca 1b       	sub	r28, r26
    1e66:	db 0b       	sbc	r29, r27
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	09 94       	ijmp

00001e74 <__epilogue_restores__>:
    1e74:	2a 88       	ldd	r2, Y+18	; 0x12
    1e76:	39 88       	ldd	r3, Y+17	; 0x11
    1e78:	48 88       	ldd	r4, Y+16	; 0x10
    1e7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e80:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e82:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e84:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e86:	b9 84       	ldd	r11, Y+9	; 0x09
    1e88:	c8 84       	ldd	r12, Y+8	; 0x08
    1e8a:	df 80       	ldd	r13, Y+7	; 0x07
    1e8c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e8e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e90:	0c 81       	ldd	r16, Y+4	; 0x04
    1e92:	1b 81       	ldd	r17, Y+3	; 0x03
    1e94:	aa 81       	ldd	r26, Y+2	; 0x02
    1e96:	b9 81       	ldd	r27, Y+1	; 0x01
    1e98:	ce 0f       	add	r28, r30
    1e9a:	d1 1d       	adc	r29, r1
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	ed 01       	movw	r28, r26
    1ea8:	08 95       	ret

00001eaa <__udivmodhi4>:
    1eaa:	aa 1b       	sub	r26, r26
    1eac:	bb 1b       	sub	r27, r27
    1eae:	51 e1       	ldi	r21, 0x11	; 17
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <__udivmodhi4_ep>

00001eb2 <__udivmodhi4_loop>:
    1eb2:	aa 1f       	adc	r26, r26
    1eb4:	bb 1f       	adc	r27, r27
    1eb6:	a6 17       	cp	r26, r22
    1eb8:	b7 07       	cpc	r27, r23
    1eba:	10 f0       	brcs	.+4      	; 0x1ec0 <__udivmodhi4_ep>
    1ebc:	a6 1b       	sub	r26, r22
    1ebe:	b7 0b       	sbc	r27, r23

00001ec0 <__udivmodhi4_ep>:
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	5a 95       	dec	r21
    1ec6:	a9 f7       	brne	.-22     	; 0x1eb2 <__udivmodhi4_loop>
    1ec8:	80 95       	com	r24
    1eca:	90 95       	com	r25
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	08 95       	ret

00001ed2 <strtod>:
    1ed2:	a0 e0       	ldi	r26, 0x00	; 0
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ef e6       	ldi	r30, 0x6F	; 111
    1ed8:	ff e0       	ldi	r31, 0x0F	; 15
    1eda:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x8>
    1ede:	5b 01       	movw	r10, r22
    1ee0:	61 15       	cp	r22, r1
    1ee2:	71 05       	cpc	r23, r1
    1ee4:	21 f0       	breq	.+8      	; 0x1eee <strtod+0x1c>
    1ee6:	db 01       	movw	r26, r22
    1ee8:	8c 93       	st	X, r24
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	9c 93       	st	X, r25
    1eee:	7c 01       	movw	r14, r24
    1ef0:	e7 01       	movw	r28, r14
    1ef2:	08 94       	sec
    1ef4:	e1 1c       	adc	r14, r1
    1ef6:	f1 1c       	adc	r15, r1
    1ef8:	08 81       	ld	r16, Y
    1efa:	67 01       	movw	r12, r14
    1efc:	80 2f       	mov	r24, r16
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 b0 11 	call	0x2360	; 0x2360 <isspace>
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	a1 f7       	brne	.-24     	; 0x1ef0 <strtod+0x1e>
    1f08:	0d 32       	cpi	r16, 0x2D	; 45
    1f0a:	41 f4       	brne	.+16     	; 0x1f1c <strtod+0x4a>
    1f0c:	09 81       	ldd	r16, Y+1	; 0x01
    1f0e:	42 e0       	ldi	r20, 0x02	; 2
    1f10:	c4 2e       	mov	r12, r20
    1f12:	d1 2c       	mov	r13, r1
    1f14:	cc 0e       	add	r12, r28
    1f16:	dd 1e       	adc	r13, r29
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	09 c0       	rjmp	.+18     	; 0x1f2e <strtod+0x5c>
    1f1c:	0b 32       	cpi	r16, 0x2B	; 43
    1f1e:	31 f4       	brne	.+12     	; 0x1f2c <strtod+0x5a>
    1f20:	09 81       	ldd	r16, Y+1	; 0x01
    1f22:	32 e0       	ldi	r19, 0x02	; 2
    1f24:	c3 2e       	mov	r12, r19
    1f26:	d1 2c       	mov	r13, r1
    1f28:	cc 0e       	add	r12, r28
    1f2a:	dd 1e       	adc	r13, r29
    1f2c:	10 e0       	ldi	r17, 0x00	; 0
    1f2e:	e6 01       	movw	r28, r12
    1f30:	21 97       	sbiw	r28, 0x01	; 1
    1f32:	ce 01       	movw	r24, r28
    1f34:	60 e7       	ldi	r22, 0x70	; 112
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	43 e0       	ldi	r20, 0x03	; 3
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	0e 94 b8 11 	call	0x2370	; 0x2370 <strncasecmp_P>
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	d1 f4       	brne	.+52     	; 0x1f78 <strtod+0xa6>
    1f44:	e6 01       	movw	r28, r12
    1f46:	22 96       	adiw	r28, 0x02	; 2
    1f48:	ce 01       	movw	r24, r28
    1f4a:	63 e7       	ldi	r22, 0x73	; 115
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	45 e0       	ldi	r20, 0x05	; 5
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	0e 94 b8 11 	call	0x2370	; 0x2370 <strncasecmp_P>
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <strtod+0x8c>
    1f5a:	e6 01       	movw	r28, r12
    1f5c:	27 96       	adiw	r28, 0x07	; 7
    1f5e:	a1 14       	cp	r10, r1
    1f60:	b1 04       	cpc	r11, r1
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <strtod+0x98>
    1f64:	f5 01       	movw	r30, r10
    1f66:	d1 83       	std	Z+1, r29	; 0x01
    1f68:	c0 83       	st	Z, r28
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	90 e8       	ldi	r25, 0x80	; 128
    1f70:	11 23       	and	r17, r17
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <strtod+0xa4>
    1f74:	0a c1       	rjmp	.+532    	; 0x218a <strtod+0x2b8>
    1f76:	04 c1       	rjmp	.+520    	; 0x2180 <strtod+0x2ae>
    1f78:	ce 01       	movw	r24, r28
    1f7a:	68 e7       	ldi	r22, 0x78	; 120
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	43 e0       	ldi	r20, 0x03	; 3
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	0e 94 b8 11 	call	0x2370	; 0x2370 <strncasecmp_P>
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	59 f4       	brne	.+22     	; 0x1fa0 <strtod+0xce>
    1f8a:	a1 14       	cp	r10, r1
    1f8c:	b1 04       	cpc	r11, r1
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <strtod+0xc0>
    1f90:	f9 c0       	rjmp	.+498    	; 0x2184 <strtod+0x2b2>
    1f92:	c6 01       	movw	r24, r12
    1f94:	02 96       	adiw	r24, 0x02	; 2
    1f96:	d5 01       	movw	r26, r10
    1f98:	11 96       	adiw	r26, 0x01	; 1
    1f9a:	9c 93       	st	X, r25
    1f9c:	8e 93       	st	-X, r24
    1f9e:	f2 c0       	rjmp	.+484    	; 0x2184 <strtod+0x2b2>
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	ba 01       	movw	r22, r20
    1fa6:	88 24       	eor	r8, r8
    1fa8:	99 24       	eor	r9, r9
    1faa:	00 53       	subi	r16, 0x30	; 48
    1fac:	0a 30       	cpi	r16, 0x0A	; 10
    1fae:	90 f5       	brcc	.+100    	; 0x2014 <strtod+0x142>
    1fb0:	12 60       	ori	r17, 0x02	; 2
    1fb2:	21 2f       	mov	r18, r17
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	88 70       	andi	r24, 0x08	; 8
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	12 ff       	sbrs	r17, 2
    1fbe:	06 c0       	rjmp	.+12     	; 0x1fcc <strtod+0xfa>
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	69 f5       	brne	.+90     	; 0x201e <strtod+0x14c>
    1fc4:	08 94       	sec
    1fc6:	81 1c       	adc	r8, r1
    1fc8:	91 1c       	adc	r9, r1
    1fca:	29 c0       	rjmp	.+82     	; 0x201e <strtod+0x14c>
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	19 f0       	breq	.+6      	; 0x1fd6 <strtod+0x104>
    1fd0:	08 94       	sec
    1fd2:	81 08       	sbc	r8, r1
    1fd4:	91 08       	sbc	r9, r1
    1fd6:	db 01       	movw	r26, r22
    1fd8:	ca 01       	movw	r24, r20
    1fda:	d2 e0       	ldi	r29, 0x02	; 2
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	aa 1f       	adc	r26, r26
    1fe2:	bb 1f       	adc	r27, r27
    1fe4:	da 95       	dec	r29
    1fe6:	d1 f7       	brne	.-12     	; 0x1fdc <strtod+0x10a>
    1fe8:	48 0f       	add	r20, r24
    1fea:	59 1f       	adc	r21, r25
    1fec:	6a 1f       	adc	r22, r26
    1fee:	7b 1f       	adc	r23, r27
    1ff0:	44 0f       	add	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	66 1f       	adc	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	40 0f       	add	r20, r16
    1ffa:	51 1d       	adc	r21, r1
    1ffc:	61 1d       	adc	r22, r1
    1ffe:	71 1d       	adc	r23, r1
    2000:	48 39       	cpi	r20, 0x98	; 152
    2002:	b9 e9       	ldi	r27, 0x99	; 153
    2004:	5b 07       	cpc	r21, r27
    2006:	b9 e9       	ldi	r27, 0x99	; 153
    2008:	6b 07       	cpc	r22, r27
    200a:	b9 e1       	ldi	r27, 0x19	; 25
    200c:	7b 07       	cpc	r23, r27
    200e:	38 f0       	brcs	.+14     	; 0x201e <strtod+0x14c>
    2010:	14 60       	ori	r17, 0x04	; 4
    2012:	05 c0       	rjmp	.+10     	; 0x201e <strtod+0x14c>
    2014:	0e 3f       	cpi	r16, 0xFE	; 254
    2016:	39 f4       	brne	.+14     	; 0x2026 <strtod+0x154>
    2018:	13 fd       	sbrc	r17, 3
    201a:	43 c0       	rjmp	.+134    	; 0x20a2 <strtod+0x1d0>
    201c:	18 60       	ori	r17, 0x08	; 8
    201e:	f6 01       	movw	r30, r12
    2020:	01 91       	ld	r16, Z+
    2022:	6f 01       	movw	r12, r30
    2024:	c2 cf       	rjmp	.-124    	; 0x1faa <strtod+0xd8>
    2026:	05 33       	cpi	r16, 0x35	; 53
    2028:	11 f0       	breq	.+4      	; 0x202e <strtod+0x15c>
    202a:	05 31       	cpi	r16, 0x15	; 21
    202c:	d1 f5       	brne	.+116    	; 0x20a2 <strtod+0x1d0>
    202e:	d6 01       	movw	r26, r12
    2030:	ec 91       	ld	r30, X
    2032:	ed 32       	cpi	r30, 0x2D	; 45
    2034:	11 f4       	brne	.+4      	; 0x203a <strtod+0x168>
    2036:	10 61       	ori	r17, 0x10	; 16
    2038:	08 c0       	rjmp	.+16     	; 0x204a <strtod+0x178>
    203a:	eb 32       	cpi	r30, 0x2B	; 43
    203c:	29 f0       	breq	.+10     	; 0x2048 <strtod+0x176>
    203e:	c6 01       	movw	r24, r12
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	21 e0       	ldi	r18, 0x01	; 1
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	08 c0       	rjmp	.+16     	; 0x2058 <strtod+0x186>
    2048:	d6 01       	movw	r26, r12
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	ec 91       	ld	r30, X
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	c6 01       	movw	r24, r12
    2052:	02 96       	adiw	r24, 0x02	; 2
    2054:	22 e0       	ldi	r18, 0x02	; 2
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	e0 53       	subi	r30, 0x30	; 48
    205a:	ea 30       	cpi	r30, 0x0A	; 10
    205c:	20 f0       	brcs	.+8      	; 0x2066 <strtod+0x194>
    205e:	6c 01       	movw	r12, r24
    2060:	c2 1a       	sub	r12, r18
    2062:	d3 0a       	sbc	r13, r19
    2064:	1e c0       	rjmp	.+60     	; 0x20a2 <strtod+0x1d0>
    2066:	dc 01       	movw	r26, r24
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	fc e0       	ldi	r31, 0x0C	; 12
    206e:	20 38       	cpi	r18, 0x80	; 128
    2070:	3f 07       	cpc	r19, r31
    2072:	5c f4       	brge	.+22     	; 0x208a <strtod+0x1b8>
    2074:	c9 01       	movw	r24, r18
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	28 0f       	add	r18, r24
    2080:	39 1f       	adc	r19, r25
    2082:	22 0f       	add	r18, r18
    2084:	33 1f       	adc	r19, r19
    2086:	2e 0f       	add	r18, r30
    2088:	31 1d       	adc	r19, r1
    208a:	ed 91       	ld	r30, X+
    208c:	e0 53       	subi	r30, 0x30	; 48
    208e:	6d 01       	movw	r12, r26
    2090:	ea 30       	cpi	r30, 0x0A	; 10
    2092:	60 f3       	brcs	.-40     	; 0x206c <strtod+0x19a>
    2094:	14 ff       	sbrs	r17, 4
    2096:	03 c0       	rjmp	.+6      	; 0x209e <strtod+0x1cc>
    2098:	30 95       	com	r19
    209a:	21 95       	neg	r18
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	82 0e       	add	r8, r18
    20a0:	93 1e       	adc	r9, r19
    20a2:	c1 2f       	mov	r28, r17
    20a4:	d0 e0       	ldi	r29, 0x00	; 0
    20a6:	11 ff       	sbrs	r17, 1
    20a8:	08 c0       	rjmp	.+16     	; 0x20ba <strtod+0x1e8>
    20aa:	a1 14       	cp	r10, r1
    20ac:	b1 04       	cpc	r11, r1
    20ae:	29 f0       	breq	.+10     	; 0x20ba <strtod+0x1e8>
    20b0:	c6 01       	movw	r24, r12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	d5 01       	movw	r26, r10
    20b6:	8d 93       	st	X+, r24
    20b8:	9c 93       	st	X, r25
    20ba:	cb 01       	movw	r24, r22
    20bc:	ba 01       	movw	r22, r20
    20be:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatunsisf>
    20c2:	6b 01       	movw	r12, r22
    20c4:	7c 01       	movw	r14, r24
    20c6:	ce 01       	movw	r24, r28
    20c8:	83 70       	andi	r24, 0x03	; 3
    20ca:	90 70       	andi	r25, 0x00	; 0
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	91 05       	cpc	r25, r1
    20d0:	21 f4       	brne	.+8      	; 0x20da <strtod+0x208>
    20d2:	f7 fa       	bst	r15, 7
    20d4:	f0 94       	com	r15
    20d6:	f7 f8       	bld	r15, 7
    20d8:	f0 94       	com	r15
    20da:	c7 01       	movw	r24, r14
    20dc:	b6 01       	movw	r22, r12
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	a9 01       	movw	r20, r18
    20e4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__cmpsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	09 f4       	brne	.+2      	; 0x20ee <strtod+0x21c>
    20ec:	44 c0       	rjmp	.+136    	; 0x2176 <strtod+0x2a4>
    20ee:	97 fe       	sbrs	r9, 7
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <strtod+0x22e>
    20f2:	90 94       	com	r9
    20f4:	81 94       	neg	r8
    20f6:	91 08       	sbc	r9, r1
    20f8:	93 94       	inc	r9
    20fa:	c7 ea       	ldi	r28, 0xA7	; 167
    20fc:	d0 e0       	ldi	r29, 0x00	; 0
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <strtod+0x232>
    2100:	cf e8       	ldi	r28, 0x8F	; 143
    2102:	d0 e0       	ldi	r29, 0x00	; 0
    2104:	98 ee       	ldi	r25, 0xE8	; 232
    2106:	69 2e       	mov	r6, r25
    2108:	9f ef       	ldi	r25, 0xFF	; 255
    210a:	79 2e       	mov	r7, r25
    210c:	6c 0e       	add	r6, r28
    210e:	7d 1e       	adc	r7, r29
    2110:	20 e2       	ldi	r18, 0x20	; 32
    2112:	a2 2e       	mov	r10, r18
    2114:	b1 2c       	mov	r11, r1
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <strtod+0x264>
    2118:	fe 01       	movw	r30, r28
    211a:	05 91       	lpm	r16, Z+
    211c:	15 91       	lpm	r17, Z+
    211e:	25 91       	lpm	r18, Z+
    2120:	34 91       	lpm	r19, Z
    2122:	c7 01       	movw	r24, r14
    2124:	b6 01       	movw	r22, r12
    2126:	a9 01       	movw	r20, r18
    2128:	98 01       	movw	r18, r16
    212a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsf3>
    212e:	6b 01       	movw	r12, r22
    2130:	7c 01       	movw	r14, r24
    2132:	8a 18       	sub	r8, r10
    2134:	9b 08       	sbc	r9, r11
    2136:	8a 14       	cp	r8, r10
    2138:	9b 04       	cpc	r9, r11
    213a:	74 f7       	brge	.-36     	; 0x2118 <strtod+0x246>
    213c:	24 97       	sbiw	r28, 0x04	; 4
    213e:	b5 94       	asr	r11
    2140:	a7 94       	ror	r10
    2142:	c6 15       	cp	r28, r6
    2144:	d7 05       	cpc	r29, r7
    2146:	b9 f7       	brne	.-18     	; 0x2136 <strtod+0x264>
    2148:	c6 01       	movw	r24, r12
    214a:	d7 01       	movw	r26, r14
    214c:	2a 2f       	mov	r18, r26
    214e:	22 0f       	add	r18, r18
    2150:	2b 2f       	mov	r18, r27
    2152:	22 1f       	adc	r18, r18
    2154:	2f 3f       	cpi	r18, 0xFF	; 255
    2156:	49 f0       	breq	.+18     	; 0x216a <strtod+0x298>
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	a9 01       	movw	r20, r18
    2162:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__cmpsf2>
    2166:	88 23       	and	r24, r24
    2168:	31 f4       	brne	.+12     	; 0x2176 <strtod+0x2a4>
    216a:	82 e2       	ldi	r24, 0x22	; 34
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	90 93 1b 08 	sts	0x081B, r25
    2172:	80 93 1a 08 	sts	0x081A, r24
    2176:	3c 2d       	mov	r19, r12
    2178:	2d 2d       	mov	r18, r13
    217a:	9e 2d       	mov	r25, r14
    217c:	8f 2d       	mov	r24, r15
    217e:	06 c0       	rjmp	.+12     	; 0x218c <strtod+0x2ba>
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	04 c0       	rjmp	.+8      	; 0x218c <strtod+0x2ba>
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	90 ec       	ldi	r25, 0xC0	; 192
    218a:	8f e7       	ldi	r24, 0x7F	; 127
    218c:	b9 01       	movw	r22, r18
    218e:	ac 01       	movw	r20, r24
    2190:	87 2f       	mov	r24, r23
    2192:	92 2f       	mov	r25, r18
    2194:	a5 2f       	mov	r26, r21
    2196:	b4 2f       	mov	r27, r20
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	ee e0       	ldi	r30, 0x0E	; 14
    21a2:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x8>

000021a6 <abort>:
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	f8 94       	cli
    21ac:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_exit>

000021b0 <__ftoa_engine>:
    21b0:	28 30       	cpi	r18, 0x08	; 8
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <__ftoa_engine+0x6>
    21b4:	27 e0       	ldi	r18, 0x07	; 7
    21b6:	33 27       	eor	r19, r19
    21b8:	da 01       	movw	r26, r20
    21ba:	99 0f       	add	r25, r25
    21bc:	31 1d       	adc	r19, r1
    21be:	87 fd       	sbrc	r24, 7
    21c0:	91 60       	ori	r25, 0x01	; 1
    21c2:	00 96       	adiw	r24, 0x00	; 0
    21c4:	61 05       	cpc	r22, r1
    21c6:	71 05       	cpc	r23, r1
    21c8:	39 f4       	brne	.+14     	; 0x21d8 <__ftoa_engine+0x28>
    21ca:	32 60       	ori	r19, 0x02	; 2
    21cc:	2e 5f       	subi	r18, 0xFE	; 254
    21ce:	3d 93       	st	X+, r19
    21d0:	30 e3       	ldi	r19, 0x30	; 48
    21d2:	2a 95       	dec	r18
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <__ftoa_engine+0x1e>
    21d6:	08 95       	ret
    21d8:	9f 3f       	cpi	r25, 0xFF	; 255
    21da:	30 f0       	brcs	.+12     	; 0x21e8 <__ftoa_engine+0x38>
    21dc:	80 38       	cpi	r24, 0x80	; 128
    21de:	71 05       	cpc	r23, r1
    21e0:	61 05       	cpc	r22, r1
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <__ftoa_engine+0x36>
    21e4:	3c 5f       	subi	r19, 0xFC	; 252
    21e6:	3c 5f       	subi	r19, 0xFC	; 252
    21e8:	3d 93       	st	X+, r19
    21ea:	91 30       	cpi	r25, 0x01	; 1
    21ec:	08 f0       	brcs	.+2      	; 0x21f0 <__ftoa_engine+0x40>
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	91 1d       	adc	r25, r1
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	1f 93       	push	r17
    21f8:	0f 93       	push	r16
    21fa:	ff 92       	push	r15
    21fc:	ef 92       	push	r14
    21fe:	19 2f       	mov	r17, r25
    2200:	98 7f       	andi	r25, 0xF8	; 248
    2202:	96 95       	lsr	r25
    2204:	e9 2f       	mov	r30, r25
    2206:	96 95       	lsr	r25
    2208:	96 95       	lsr	r25
    220a:	e9 0f       	add	r30, r25
    220c:	ff 27       	eor	r31, r31
    220e:	eb 5f       	subi	r30, 0xFB	; 251
    2210:	fe 4f       	sbci	r31, 0xFE	; 254
    2212:	99 27       	eor	r25, r25
    2214:	33 27       	eor	r19, r19
    2216:	ee 24       	eor	r14, r14
    2218:	ff 24       	eor	r15, r15
    221a:	a7 01       	movw	r20, r14
    221c:	e7 01       	movw	r28, r14
    221e:	05 90       	lpm	r0, Z+
    2220:	08 94       	sec
    2222:	07 94       	ror	r0
    2224:	28 f4       	brcc	.+10     	; 0x2230 <__ftoa_engine+0x80>
    2226:	36 0f       	add	r19, r22
    2228:	e7 1e       	adc	r14, r23
    222a:	f8 1e       	adc	r15, r24
    222c:	49 1f       	adc	r20, r25
    222e:	51 1d       	adc	r21, r1
    2230:	66 0f       	add	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	06 94       	lsr	r0
    223a:	a1 f7       	brne	.-24     	; 0x2224 <__ftoa_engine+0x74>
    223c:	05 90       	lpm	r0, Z+
    223e:	07 94       	ror	r0
    2240:	28 f4       	brcc	.+10     	; 0x224c <__ftoa_engine+0x9c>
    2242:	e7 0e       	add	r14, r23
    2244:	f8 1e       	adc	r15, r24
    2246:	49 1f       	adc	r20, r25
    2248:	56 1f       	adc	r21, r22
    224a:	c1 1d       	adc	r28, r1
    224c:	77 0f       	add	r23, r23
    224e:	88 1f       	adc	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	66 1f       	adc	r22, r22
    2254:	06 94       	lsr	r0
    2256:	a1 f7       	brne	.-24     	; 0x2240 <__ftoa_engine+0x90>
    2258:	05 90       	lpm	r0, Z+
    225a:	07 94       	ror	r0
    225c:	28 f4       	brcc	.+10     	; 0x2268 <__ftoa_engine+0xb8>
    225e:	f8 0e       	add	r15, r24
    2260:	49 1f       	adc	r20, r25
    2262:	56 1f       	adc	r21, r22
    2264:	c7 1f       	adc	r28, r23
    2266:	d1 1d       	adc	r29, r1
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	66 1f       	adc	r22, r22
    226e:	77 1f       	adc	r23, r23
    2270:	06 94       	lsr	r0
    2272:	a1 f7       	brne	.-24     	; 0x225c <__ftoa_engine+0xac>
    2274:	05 90       	lpm	r0, Z+
    2276:	07 94       	ror	r0
    2278:	20 f4       	brcc	.+8      	; 0x2282 <__ftoa_engine+0xd2>
    227a:	49 0f       	add	r20, r25
    227c:	56 1f       	adc	r21, r22
    227e:	c7 1f       	adc	r28, r23
    2280:	d8 1f       	adc	r29, r24
    2282:	99 0f       	add	r25, r25
    2284:	66 1f       	adc	r22, r22
    2286:	77 1f       	adc	r23, r23
    2288:	88 1f       	adc	r24, r24
    228a:	06 94       	lsr	r0
    228c:	a9 f7       	brne	.-22     	; 0x2278 <__ftoa_engine+0xc8>
    228e:	84 91       	lpm	r24, Z
    2290:	10 95       	com	r17
    2292:	17 70       	andi	r17, 0x07	; 7
    2294:	41 f0       	breq	.+16     	; 0x22a6 <__ftoa_engine+0xf6>
    2296:	d6 95       	lsr	r29
    2298:	c7 95       	ror	r28
    229a:	57 95       	ror	r21
    229c:	47 95       	ror	r20
    229e:	f7 94       	ror	r15
    22a0:	e7 94       	ror	r14
    22a2:	1a 95       	dec	r17
    22a4:	c1 f7       	brne	.-16     	; 0x2296 <__ftoa_engine+0xe6>
    22a6:	eb ea       	ldi	r30, 0xAB	; 171
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	68 94       	set
    22ac:	15 90       	lpm	r1, Z+
    22ae:	15 91       	lpm	r17, Z+
    22b0:	35 91       	lpm	r19, Z+
    22b2:	65 91       	lpm	r22, Z+
    22b4:	95 91       	lpm	r25, Z+
    22b6:	05 90       	lpm	r0, Z+
    22b8:	7f e2       	ldi	r23, 0x2F	; 47
    22ba:	73 95       	inc	r23
    22bc:	e1 18       	sub	r14, r1
    22be:	f1 0a       	sbc	r15, r17
    22c0:	43 0b       	sbc	r20, r19
    22c2:	56 0b       	sbc	r21, r22
    22c4:	c9 0b       	sbc	r28, r25
    22c6:	d0 09       	sbc	r29, r0
    22c8:	c0 f7       	brcc	.-16     	; 0x22ba <__ftoa_engine+0x10a>
    22ca:	e1 0c       	add	r14, r1
    22cc:	f1 1e       	adc	r15, r17
    22ce:	43 1f       	adc	r20, r19
    22d0:	56 1f       	adc	r21, r22
    22d2:	c9 1f       	adc	r28, r25
    22d4:	d0 1d       	adc	r29, r0
    22d6:	7e f4       	brtc	.+30     	; 0x22f6 <__ftoa_engine+0x146>
    22d8:	70 33       	cpi	r23, 0x30	; 48
    22da:	11 f4       	brne	.+4      	; 0x22e0 <__ftoa_engine+0x130>
    22dc:	8a 95       	dec	r24
    22de:	e6 cf       	rjmp	.-52     	; 0x22ac <__ftoa_engine+0xfc>
    22e0:	e8 94       	clt
    22e2:	01 50       	subi	r16, 0x01	; 1
    22e4:	30 f0       	brcs	.+12     	; 0x22f2 <__ftoa_engine+0x142>
    22e6:	08 0f       	add	r16, r24
    22e8:	0a f4       	brpl	.+2      	; 0x22ec <__ftoa_engine+0x13c>
    22ea:	00 27       	eor	r16, r16
    22ec:	02 17       	cp	r16, r18
    22ee:	08 f4       	brcc	.+2      	; 0x22f2 <__ftoa_engine+0x142>
    22f0:	20 2f       	mov	r18, r16
    22f2:	23 95       	inc	r18
    22f4:	02 2f       	mov	r16, r18
    22f6:	7a 33       	cpi	r23, 0x3A	; 58
    22f8:	28 f0       	brcs	.+10     	; 0x2304 <__ftoa_engine+0x154>
    22fa:	79 e3       	ldi	r23, 0x39	; 57
    22fc:	7d 93       	st	X+, r23
    22fe:	2a 95       	dec	r18
    2300:	e9 f7       	brne	.-6      	; 0x22fc <__ftoa_engine+0x14c>
    2302:	10 c0       	rjmp	.+32     	; 0x2324 <__ftoa_engine+0x174>
    2304:	7d 93       	st	X+, r23
    2306:	2a 95       	dec	r18
    2308:	89 f6       	brne	.-94     	; 0x22ac <__ftoa_engine+0xfc>
    230a:	06 94       	lsr	r0
    230c:	97 95       	ror	r25
    230e:	67 95       	ror	r22
    2310:	37 95       	ror	r19
    2312:	17 95       	ror	r17
    2314:	17 94       	ror	r1
    2316:	e1 18       	sub	r14, r1
    2318:	f1 0a       	sbc	r15, r17
    231a:	43 0b       	sbc	r20, r19
    231c:	56 0b       	sbc	r21, r22
    231e:	c9 0b       	sbc	r28, r25
    2320:	d0 09       	sbc	r29, r0
    2322:	98 f0       	brcs	.+38     	; 0x234a <__ftoa_engine+0x19a>
    2324:	23 95       	inc	r18
    2326:	7e 91       	ld	r23, -X
    2328:	73 95       	inc	r23
    232a:	7a 33       	cpi	r23, 0x3A	; 58
    232c:	08 f0       	brcs	.+2      	; 0x2330 <__ftoa_engine+0x180>
    232e:	70 e3       	ldi	r23, 0x30	; 48
    2330:	7c 93       	st	X, r23
    2332:	20 13       	cpse	r18, r16
    2334:	b8 f7       	brcc	.-18     	; 0x2324 <__ftoa_engine+0x174>
    2336:	7e 91       	ld	r23, -X
    2338:	70 61       	ori	r23, 0x10	; 16
    233a:	7d 93       	st	X+, r23
    233c:	30 f0       	brcs	.+12     	; 0x234a <__ftoa_engine+0x19a>
    233e:	83 95       	inc	r24
    2340:	71 e3       	ldi	r23, 0x31	; 49
    2342:	7d 93       	st	X+, r23
    2344:	70 e3       	ldi	r23, 0x30	; 48
    2346:	2a 95       	dec	r18
    2348:	e1 f7       	brne	.-8      	; 0x2342 <__ftoa_engine+0x192>
    234a:	11 24       	eor	r1, r1
    234c:	ef 90       	pop	r14
    234e:	ff 90       	pop	r15
    2350:	0f 91       	pop	r16
    2352:	1f 91       	pop	r17
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	99 27       	eor	r25, r25
    235a:	87 fd       	sbrc	r24, 7
    235c:	90 95       	com	r25
    235e:	08 95       	ret

00002360 <isspace>:
    2360:	91 11       	cpse	r25, r1
    2362:	3d c1       	rjmp	.+634    	; 0x25de <__ctype_isfalse>
    2364:	80 32       	cpi	r24, 0x20	; 32
    2366:	19 f0       	breq	.+6      	; 0x236e <isspace+0xe>
    2368:	89 50       	subi	r24, 0x09	; 9
    236a:	85 50       	subi	r24, 0x05	; 5
    236c:	d0 f7       	brcc	.-12     	; 0x2362 <isspace+0x2>
    236e:	08 95       	ret

00002370 <strncasecmp_P>:
    2370:	fb 01       	movw	r30, r22
    2372:	dc 01       	movw	r26, r24
    2374:	41 50       	subi	r20, 0x01	; 1
    2376:	50 40       	sbci	r21, 0x00	; 0
    2378:	88 f0       	brcs	.+34     	; 0x239c <strncasecmp_P+0x2c>
    237a:	8d 91       	ld	r24, X+
    237c:	81 34       	cpi	r24, 0x41	; 65
    237e:	1c f0       	brlt	.+6      	; 0x2386 <strncasecmp_P+0x16>
    2380:	8b 35       	cpi	r24, 0x5B	; 91
    2382:	0c f4       	brge	.+2      	; 0x2386 <strncasecmp_P+0x16>
    2384:	80 5e       	subi	r24, 0xE0	; 224
    2386:	65 91       	lpm	r22, Z+
    2388:	61 34       	cpi	r22, 0x41	; 65
    238a:	1c f0       	brlt	.+6      	; 0x2392 <strncasecmp_P+0x22>
    238c:	6b 35       	cpi	r22, 0x5B	; 91
    238e:	0c f4       	brge	.+2      	; 0x2392 <strncasecmp_P+0x22>
    2390:	60 5e       	subi	r22, 0xE0	; 224
    2392:	86 1b       	sub	r24, r22
    2394:	61 11       	cpse	r22, r1
    2396:	71 f3       	breq	.-36     	; 0x2374 <strncasecmp_P+0x4>
    2398:	99 0b       	sbc	r25, r25
    239a:	08 95       	ret
    239c:	88 1b       	sub	r24, r24
    239e:	fc cf       	rjmp	.-8      	; 0x2398 <strncasecmp_P+0x28>

000023a0 <strnlen_P>:
    23a0:	fc 01       	movw	r30, r24
    23a2:	05 90       	lpm	r0, Z+
    23a4:	61 50       	subi	r22, 0x01	; 1
    23a6:	70 40       	sbci	r23, 0x00	; 0
    23a8:	01 10       	cpse	r0, r1
    23aa:	d8 f7       	brcc	.-10     	; 0x23a2 <strnlen_P+0x2>
    23ac:	80 95       	com	r24
    23ae:	90 95       	com	r25
    23b0:	8e 0f       	add	r24, r30
    23b2:	9f 1f       	adc	r25, r31
    23b4:	08 95       	ret

000023b6 <strchr>:
    23b6:	fc 01       	movw	r30, r24
    23b8:	81 91       	ld	r24, Z+
    23ba:	86 17       	cp	r24, r22
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <strchr+0x10>
    23be:	88 23       	and	r24, r24
    23c0:	d9 f7       	brne	.-10     	; 0x23b8 <strchr+0x2>
    23c2:	99 27       	eor	r25, r25
    23c4:	08 95       	ret
    23c6:	31 97       	sbiw	r30, 0x01	; 1
    23c8:	cf 01       	movw	r24, r30
    23ca:	08 95       	ret

000023cc <strcmp>:
    23cc:	fb 01       	movw	r30, r22
    23ce:	dc 01       	movw	r26, r24
    23d0:	8d 91       	ld	r24, X+
    23d2:	01 90       	ld	r0, Z+
    23d4:	80 19       	sub	r24, r0
    23d6:	01 10       	cpse	r0, r1
    23d8:	d9 f3       	breq	.-10     	; 0x23d0 <strcmp+0x4>
    23da:	99 0b       	sbc	r25, r25
    23dc:	08 95       	ret

000023de <strncmp>:
    23de:	fb 01       	movw	r30, r22
    23e0:	dc 01       	movw	r26, r24
    23e2:	41 50       	subi	r20, 0x01	; 1
    23e4:	50 40       	sbci	r21, 0x00	; 0
    23e6:	30 f0       	brcs	.+12     	; 0x23f4 <strncmp+0x16>
    23e8:	8d 91       	ld	r24, X+
    23ea:	01 90       	ld	r0, Z+
    23ec:	80 19       	sub	r24, r0
    23ee:	19 f4       	brne	.+6      	; 0x23f6 <strncmp+0x18>
    23f0:	00 20       	and	r0, r0
    23f2:	b9 f7       	brne	.-18     	; 0x23e2 <strncmp+0x4>
    23f4:	88 1b       	sub	r24, r24
    23f6:	99 0b       	sbc	r25, r25
    23f8:	08 95       	ret

000023fa <strnlen>:
    23fa:	fc 01       	movw	r30, r24
    23fc:	61 50       	subi	r22, 0x01	; 1
    23fe:	70 40       	sbci	r23, 0x00	; 0
    2400:	01 90       	ld	r0, Z+
    2402:	01 10       	cpse	r0, r1
    2404:	d8 f7       	brcc	.-10     	; 0x23fc <strnlen+0x2>
    2406:	80 95       	com	r24
    2408:	90 95       	com	r25
    240a:	8e 0f       	add	r24, r30
    240c:	9f 1f       	adc	r25, r31
    240e:	08 95       	ret

00002410 <fputc>:
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	8c 01       	movw	r16, r24
    241a:	eb 01       	movw	r28, r22
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	81 ff       	sbrs	r24, 1
    2420:	1b c0       	rjmp	.+54     	; 0x2458 <fputc+0x48>
    2422:	82 ff       	sbrs	r24, 2
    2424:	0d c0       	rjmp	.+26     	; 0x2440 <fputc+0x30>
    2426:	2e 81       	ldd	r18, Y+6	; 0x06
    2428:	3f 81       	ldd	r19, Y+7	; 0x07
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	28 17       	cp	r18, r24
    2430:	39 07       	cpc	r19, r25
    2432:	64 f4       	brge	.+24     	; 0x244c <fputc+0x3c>
    2434:	e8 81       	ld	r30, Y
    2436:	f9 81       	ldd	r31, Y+1	; 0x01
    2438:	01 93       	st	Z+, r16
    243a:	f9 83       	std	Y+1, r31	; 0x01
    243c:	e8 83       	st	Y, r30
    243e:	06 c0       	rjmp	.+12     	; 0x244c <fputc+0x3c>
    2440:	e8 85       	ldd	r30, Y+8	; 0x08
    2442:	f9 85       	ldd	r31, Y+9	; 0x09
    2444:	80 2f       	mov	r24, r16
    2446:	09 95       	icall
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	31 f4       	brne	.+12     	; 0x2458 <fputc+0x48>
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	01 96       	adiw	r24, 0x01	; 1
    2452:	9f 83       	std	Y+7, r25	; 0x07
    2454:	8e 83       	std	Y+6, r24	; 0x06
    2456:	02 c0       	rjmp	.+4      	; 0x245c <fputc+0x4c>
    2458:	0f ef       	ldi	r16, 0xFF	; 255
    245a:	1f ef       	ldi	r17, 0xFF	; 255
    245c:	c8 01       	movw	r24, r16
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	08 95       	ret

00002468 <printf>:
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	ea e3       	ldi	r30, 0x3A	; 58
    246e:	f2 e1       	ldi	r31, 0x12	; 18
    2470:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__prologue_saves__+0x20>
    2474:	fe 01       	movw	r30, r28
    2476:	35 96       	adiw	r30, 0x05	; 5
    2478:	61 91       	ld	r22, Z+
    247a:	71 91       	ld	r23, Z+
    247c:	80 91 16 08 	lds	r24, 0x0816
    2480:	90 91 17 08 	lds	r25, 0x0817
    2484:	af 01       	movw	r20, r30
    2486:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <vfprintf>
    248a:	20 96       	adiw	r28, 0x00	; 0
    248c:	e2 e0       	ldi	r30, 0x02	; 2
    248e:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__epilogue_restores__+0x20>

00002492 <puts>:
    2492:	0f 93       	push	r16
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	8c 01       	movw	r16, r24
    249c:	e0 91 16 08 	lds	r30, 0x0816
    24a0:	f0 91 17 08 	lds	r31, 0x0817
    24a4:	83 81       	ldd	r24, Z+3	; 0x03
    24a6:	81 ff       	sbrs	r24, 1
    24a8:	1a c0       	rjmp	.+52     	; 0x24de <puts+0x4c>
    24aa:	c0 e0       	ldi	r28, 0x00	; 0
    24ac:	d0 e0       	ldi	r29, 0x00	; 0
    24ae:	05 c0       	rjmp	.+10     	; 0x24ba <puts+0x28>
    24b0:	09 95       	icall
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	11 f0       	breq	.+4      	; 0x24ba <puts+0x28>
    24b6:	cf ef       	ldi	r28, 0xFF	; 255
    24b8:	df ef       	ldi	r29, 0xFF	; 255
    24ba:	f8 01       	movw	r30, r16
    24bc:	81 91       	ld	r24, Z+
    24be:	8f 01       	movw	r16, r30
    24c0:	60 91 16 08 	lds	r22, 0x0816
    24c4:	70 91 17 08 	lds	r23, 0x0817
    24c8:	db 01       	movw	r26, r22
    24ca:	18 96       	adiw	r26, 0x08	; 8
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	19 97       	sbiw	r26, 0x09	; 9
    24d2:	88 23       	and	r24, r24
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <puts+0x1e>
    24d6:	8a e0       	ldi	r24, 0x0A	; 10
    24d8:	09 95       	icall
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	11 f0       	breq	.+4      	; 0x24e2 <puts+0x50>
    24de:	cf ef       	ldi	r28, 0xFF	; 255
    24e0:	df ef       	ldi	r29, 0xFF	; 255
    24e2:	ce 01       	movw	r24, r28
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	08 95       	ret

000024ee <__ultoa_invert>:
    24ee:	fa 01       	movw	r30, r20
    24f0:	aa 27       	eor	r26, r26
    24f2:	28 30       	cpi	r18, 0x08	; 8
    24f4:	51 f1       	breq	.+84     	; 0x254a <__ultoa_invert+0x5c>
    24f6:	20 31       	cpi	r18, 0x10	; 16
    24f8:	81 f1       	breq	.+96     	; 0x255a <__ultoa_invert+0x6c>
    24fa:	e8 94       	clt
    24fc:	6f 93       	push	r22
    24fe:	6e 7f       	andi	r22, 0xFE	; 254
    2500:	6e 5f       	subi	r22, 0xFE	; 254
    2502:	7f 4f       	sbci	r23, 0xFF	; 255
    2504:	8f 4f       	sbci	r24, 0xFF	; 255
    2506:	9f 4f       	sbci	r25, 0xFF	; 255
    2508:	af 4f       	sbci	r26, 0xFF	; 255
    250a:	b1 e0       	ldi	r27, 0x01	; 1
    250c:	3e d0       	rcall	.+124    	; 0x258a <__ultoa_invert+0x9c>
    250e:	b4 e0       	ldi	r27, 0x04	; 4
    2510:	3c d0       	rcall	.+120    	; 0x258a <__ultoa_invert+0x9c>
    2512:	67 0f       	add	r22, r23
    2514:	78 1f       	adc	r23, r24
    2516:	89 1f       	adc	r24, r25
    2518:	9a 1f       	adc	r25, r26
    251a:	a1 1d       	adc	r26, r1
    251c:	68 0f       	add	r22, r24
    251e:	79 1f       	adc	r23, r25
    2520:	8a 1f       	adc	r24, r26
    2522:	91 1d       	adc	r25, r1
    2524:	a1 1d       	adc	r26, r1
    2526:	6a 0f       	add	r22, r26
    2528:	71 1d       	adc	r23, r1
    252a:	81 1d       	adc	r24, r1
    252c:	91 1d       	adc	r25, r1
    252e:	a1 1d       	adc	r26, r1
    2530:	20 d0       	rcall	.+64     	; 0x2572 <__ultoa_invert+0x84>
    2532:	09 f4       	brne	.+2      	; 0x2536 <__ultoa_invert+0x48>
    2534:	68 94       	set
    2536:	3f 91       	pop	r19
    2538:	2a e0       	ldi	r18, 0x0A	; 10
    253a:	26 9f       	mul	r18, r22
    253c:	11 24       	eor	r1, r1
    253e:	30 19       	sub	r19, r0
    2540:	30 5d       	subi	r19, 0xD0	; 208
    2542:	31 93       	st	Z+, r19
    2544:	de f6       	brtc	.-74     	; 0x24fc <__ultoa_invert+0xe>
    2546:	cf 01       	movw	r24, r30
    2548:	08 95       	ret
    254a:	46 2f       	mov	r20, r22
    254c:	47 70       	andi	r20, 0x07	; 7
    254e:	40 5d       	subi	r20, 0xD0	; 208
    2550:	41 93       	st	Z+, r20
    2552:	b3 e0       	ldi	r27, 0x03	; 3
    2554:	0f d0       	rcall	.+30     	; 0x2574 <__ultoa_invert+0x86>
    2556:	c9 f7       	brne	.-14     	; 0x254a <__ultoa_invert+0x5c>
    2558:	f6 cf       	rjmp	.-20     	; 0x2546 <__ultoa_invert+0x58>
    255a:	46 2f       	mov	r20, r22
    255c:	4f 70       	andi	r20, 0x0F	; 15
    255e:	40 5d       	subi	r20, 0xD0	; 208
    2560:	4a 33       	cpi	r20, 0x3A	; 58
    2562:	18 f0       	brcs	.+6      	; 0x256a <__ultoa_invert+0x7c>
    2564:	49 5d       	subi	r20, 0xD9	; 217
    2566:	31 fd       	sbrc	r19, 1
    2568:	40 52       	subi	r20, 0x20	; 32
    256a:	41 93       	st	Z+, r20
    256c:	02 d0       	rcall	.+4      	; 0x2572 <__ultoa_invert+0x84>
    256e:	a9 f7       	brne	.-22     	; 0x255a <__ultoa_invert+0x6c>
    2570:	ea cf       	rjmp	.-44     	; 0x2546 <__ultoa_invert+0x58>
    2572:	b4 e0       	ldi	r27, 0x04	; 4
    2574:	a6 95       	lsr	r26
    2576:	97 95       	ror	r25
    2578:	87 95       	ror	r24
    257a:	77 95       	ror	r23
    257c:	67 95       	ror	r22
    257e:	ba 95       	dec	r27
    2580:	c9 f7       	brne	.-14     	; 0x2574 <__ultoa_invert+0x86>
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	61 05       	cpc	r22, r1
    2586:	71 05       	cpc	r23, r1
    2588:	08 95       	ret
    258a:	9b 01       	movw	r18, r22
    258c:	ac 01       	movw	r20, r24
    258e:	0a 2e       	mov	r0, r26
    2590:	06 94       	lsr	r0
    2592:	57 95       	ror	r21
    2594:	47 95       	ror	r20
    2596:	37 95       	ror	r19
    2598:	27 95       	ror	r18
    259a:	ba 95       	dec	r27
    259c:	c9 f7       	brne	.-14     	; 0x2590 <__ultoa_invert+0xa2>
    259e:	62 0f       	add	r22, r18
    25a0:	73 1f       	adc	r23, r19
    25a2:	84 1f       	adc	r24, r20
    25a4:	95 1f       	adc	r25, r21
    25a6:	a0 1d       	adc	r26, r0
    25a8:	08 95       	ret

000025aa <__eerd_byte_m328p>:
    25aa:	f9 99       	sbic	0x1f, 1	; 31
    25ac:	fe cf       	rjmp	.-4      	; 0x25aa <__eerd_byte_m328p>
    25ae:	92 bd       	out	0x22, r25	; 34
    25b0:	81 bd       	out	0x21, r24	; 33
    25b2:	f8 9a       	sbi	0x1f, 0	; 31
    25b4:	99 27       	eor	r25, r25
    25b6:	80 b5       	in	r24, 0x20	; 32
    25b8:	08 95       	ret

000025ba <__eeupd_byte_m328p>:
    25ba:	26 2f       	mov	r18, r22

000025bc <__eeupd_r18_m328p>:
    25bc:	f9 99       	sbic	0x1f, 1	; 31
    25be:	fe cf       	rjmp	.-4      	; 0x25bc <__eeupd_r18_m328p>
    25c0:	92 bd       	out	0x22, r25	; 34
    25c2:	81 bd       	out	0x21, r24	; 33
    25c4:	f8 9a       	sbi	0x1f, 0	; 31
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	00 b4       	in	r0, 0x20	; 32
    25ca:	02 16       	cp	r0, r18
    25cc:	39 f0       	breq	.+14     	; 0x25dc <__eeupd_r18_m328p+0x20>
    25ce:	1f ba       	out	0x1f, r1	; 31
    25d0:	20 bd       	out	0x20, r18	; 32
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	fa 9a       	sbi	0x1f, 2	; 31
    25d8:	f9 9a       	sbi	0x1f, 1	; 31
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	08 95       	ret

000025de <__ctype_isfalse>:
    25de:	99 27       	eor	r25, r25
    25e0:	88 27       	eor	r24, r24

000025e2 <__ctype_istrue>:
    25e2:	08 95       	ret

000025e4 <_exit>:
    25e4:	f8 94       	cli

000025e6 <__stop_program>:
    25e6:	ff cf       	rjmp	.-2      	; 0x25e6 <__stop_program>
