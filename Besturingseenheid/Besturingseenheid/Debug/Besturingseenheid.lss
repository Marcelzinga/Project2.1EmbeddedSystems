
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000558  00800100  00001cac  00001d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800658  00800658  00002298  2**0
                  ALLOC
  3 .stab         00002c64  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007de  00000000  00000000  00004efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000056e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b46  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8e  00000000  00000000  00007406  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001241  00000000  00000000  00007e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  000090d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051f  00000000  00000000  00009598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001066  00000000  00000000  00009ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	16 e0       	ldi	r17, 0x06	; 6
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ec ea       	ldi	r30, 0xAC	; 172
     17e:	fc e1       	ldi	r31, 0x1C	; 28
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 35       	cpi	r26, 0x58	; 88
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	16 e0       	ldi	r17, 0x06	; 6
     18e:	a8 e5       	ldi	r26, 0x58	; 88
     190:	b6 e0       	ldi	r27, 0x06	; 6
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3b       	cpi	r26, 0xB8	; 184
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
     1a0:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	80 93 7e 00 	sts	0x007E, r24
	
}
     1b4:	08 95       	ret

000001b6 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1b6:	ea e7       	ldi	r30, 0x7A	; 122
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 64       	ori	r24, 0x40	; 64
     1be:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1c0:	80 81       	ld	r24, Z
     1c2:	86 fd       	sbrc	r24, 6
     1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     1c6:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     1ca:	08 95       	ret

000001cc <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     1cc:	85 e4       	ldi	r24, 0x45	; 69
     1ce:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1dc:	80 81       	ld	r24, Z
     1de:	86 fd       	sbrc	r24, 6
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <get_temp_adc+0x10>
	return ADC;
     1e2:	80 91 78 00 	lds	r24, 0x0078
     1e6:	90 91 79 00 	lds	r25, 0x0079
}
     1ea:	08 95       	ret

000001ec <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     1ec:	82 e6       	ldi	r24, 0x62	; 98
     1ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
     206:	08 95       	ret

00000208 <init_ports>:

volatile int index = 0;
volatile int extraTime = 0;

void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     208:	87 ef       	ldi	r24, 0xF7	; 247
     20a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	84 b9       	out	0x04, r24	; 4
}
     210:	08 95       	ret

00000212 <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     21c:	10 92 80 00 	sts	0x0080, r1
}
     220:	08 95       	ret

00000222 <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	return afstand;
}
     222:	50 91 5c 06 	lds	r21, 0x065C
     226:	40 91 5d 06 	lds	r20, 0x065D
     22a:	30 91 5e 06 	lds	r19, 0x065E
     22e:	20 91 5f 06 	lds	r18, 0x065F
     232:	85 2f       	mov	r24, r21
     234:	94 2f       	mov	r25, r20
     236:	a3 2f       	mov	r26, r19
     238:	b2 2f       	mov	r27, r18
     23a:	bc 01       	movw	r22, r24
     23c:	cd 01       	movw	r24, r26
     23e:	08 95       	ret

00000240 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     240:	0e 94 e6 00 	call	0x1cc	; 0x1cc <get_temp_adc>
     244:	68 2f       	mov	r22, r24
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__floatsisf>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 ea       	ldi	r20, 0xA0	; 160
     256:	5b e3       	ldi	r21, 0x3B	; 59
     258:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__mulsf3>
     25c:	26 2f       	mov	r18, r22
     25e:	37 2f       	mov	r19, r23
     260:	f8 2f       	mov	r31, r24
     262:	e9 2f       	mov	r30, r25
     264:	46 2f       	mov	r20, r22
     266:	57 2f       	mov	r21, r23
     268:	68 2f       	mov	r22, r24
     26a:	79 2f       	mov	r23, r25
     26c:	40 93 68 06 	sts	0x0668, r20
     270:	50 93 69 06 	sts	0x0669, r21
     274:	60 93 6a 06 	sts	0x066A, r22
     278:	70 93 6b 06 	sts	0x066B, r23
	ADCRes = (Volt - 0.5) * 100;
     27c:	82 2f       	mov	r24, r18
     27e:	93 2f       	mov	r25, r19
     280:	af 2f       	mov	r26, r31
     282:	be 2f       	mov	r27, r30
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	20 e0       	ldi	r18, 0x00	; 0
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	5f e3       	ldi	r21, 0x3F	; 63
     290:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__subsf3>
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	48 ec       	ldi	r20, 0xC8	; 200
     29a:	52 e4       	ldi	r21, 0x42	; 66
     29c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__mulsf3>
     2a0:	26 2f       	mov	r18, r22
     2a2:	37 2f       	mov	r19, r23
     2a4:	f8 2f       	mov	r31, r24
     2a6:	e9 2f       	mov	r30, r25
     2a8:	46 2f       	mov	r20, r22
     2aa:	57 2f       	mov	r21, r23
     2ac:	68 2f       	mov	r22, r24
     2ae:	79 2f       	mov	r23, r25
     2b0:	40 93 8c 06 	sts	0x068C, r20
     2b4:	50 93 8d 06 	sts	0x068D, r21
     2b8:	60 93 8e 06 	sts	0x068E, r22
     2bc:	70 93 8f 06 	sts	0x068F, r23
	return ADCRes;
}
     2c0:	82 2f       	mov	r24, r18
     2c2:	93 2f       	mov	r25, r19
     2c4:	af 2f       	mov	r26, r31
     2c6:	be 2f       	mov	r27, r30
     2c8:	bc 01       	movw	r22, r24
     2ca:	cd 01       	movw	r24, r26
     2cc:	08 95       	ret

000002ce <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     2ce:	0e 94 f6 00 	call	0x1ec	; 0x1ec <get_light_adc>
	return temp;
}
     2d2:	08 95       	ret

000002d4 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156; // Dit geeft 1/10 miliseconde
     2d8:	9c e9       	ldi	r25, 0x9C	; 156
     2da:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     2dc:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     2e0:	85 b5       	in	r24, 0x25	; 37
     2e2:	85 60       	ori	r24, 0x05	; 5
     2e4:	85 bd       	out	0x25, r24	; 37
	
}
     2e6:	08 95       	ret

000002e8 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     2e8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <init_scherm_ports>
	init_timer();
     2ec:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <init_timer>
	ser_init();
     2f0:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ser_init>
	ADC_init();
     2f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	
	init_ports();
     2f8:	0e 94 04 01 	call	0x208	; 0x208 <init_ports>
	init_ext_int();
     2fc:	0e 94 09 01 	call	0x212	; 0x212 <init_ext_int>
	
	sei(); // set external interrupt
     300:	78 94       	sei
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	while(1){
		protocolCom();
		
		PORTB = (1<<PINB0); //set trigger HIGH
     302:	c1 e0       	ldi	r28, 0x01	; 1
	sei(); // set external interrupt
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	while(1){
		protocolCom();
     304:	0e 94 48 03 	call	0x690	; 0x690 <protocolCom>
		
		PORTB = (1<<PINB0); //set trigger HIGH
     308:	c5 b9       	out	0x05, r28	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	99 e6       	ldi	r25, 0x69	; 105
     30e:	a8 e1       	ldi	r26, 0x18	; 24
     310:	81 50       	subi	r24, 0x01	; 1
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	a0 40       	sbci	r26, 0x00	; 0
     316:	e1 f7       	brne	.-8      	; 0x310 <main+0x28>
     318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x32>
     31a:	00 00       	nop
		_delay_ms(500); //500 ms delay
		PORTB &= ~(1<<PINB0); //set trigger LOW
     31c:	28 98       	cbi	0x05, 0	; 5
		
		afstand = (pulse * 0.5) * 0.0023;
     31e:	60 91 62 06 	lds	r22, 0x0662
     322:	70 91 63 06 	lds	r23, 0x0663
     326:	80 91 64 06 	lds	r24, 0x0664
     32a:	90 91 65 06 	lds	r25, 0x0665
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__mulsf3>
     33a:	29 e9       	ldi	r18, 0x99	; 153
     33c:	3b eb       	ldi	r19, 0xBB	; 187
     33e:	46 e1       	ldi	r20, 0x16	; 22
     340:	5b e3       	ldi	r21, 0x3B	; 59
     342:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__mulsf3>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	80 93 5c 06 	sts	0x065C, r24
     34e:	90 93 5d 06 	sts	0x065D, r25
     352:	a0 93 5e 06 	sts	0x065E, r26
     356:	b0 93 5f 06 	sts	0x065F, r27
     35a:	d4 cf       	rjmp	.-88     	; 0x304 <main+0x1c>

0000035c <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	2f 93       	push	r18
     370:	3f 93       	push	r19
     372:	4f 93       	push	r20
     374:	5f 93       	push	r21
     376:	6f 93       	push	r22
     378:	7f 93       	push	r23
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	af 93       	push	r26
     380:	bf 93       	push	r27
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ef 93       	push	r30
     388:	ff 93       	push	r31
	
	extraTime++;
     38a:	80 91 58 06 	lds	r24, 0x0658
     38e:	90 91 59 06 	lds	r25, 0x0659
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	90 93 59 06 	sts	0x0659, r25
     398:	80 93 58 06 	sts	0x0658, r24
	
	if(extraTime>1000){
     39c:	80 91 58 06 	lds	r24, 0x0658
     3a0:	90 91 59 06 	lds	r25, 0x0659
     3a4:	23 e0       	ldi	r18, 0x03	; 3
     3a6:	89 3e       	cpi	r24, 0xE9	; 233
     3a8:	92 07       	cpc	r25, r18
     3aa:	0c f4       	brge	.+2      	; 0x3ae <__vector_14+0x52>
     3ac:	d5 c0       	rjmp	.+426    	; 0x558 <__vector_14+0x1fc>
		printf("%i temperatuur=% 6.2f\n", index, getTemp());
     3ae:	c0 91 5a 06 	lds	r28, 0x065A
     3b2:	d0 91 5b 06 	lds	r29, 0x065B
     3b6:	0e 94 20 01 	call	0x240	; 0x240 <getTemp>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	ed b7       	in	r30, 0x3d	; 61
     3c0:	fe b7       	in	r31, 0x3e	; 62
     3c2:	38 97       	sbiw	r30, 0x08	; 8
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	fe bf       	out	0x3e, r31	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	ed bf       	out	0x3d, r30	; 61
     3ce:	4d b7       	in	r20, 0x3d	; 61
     3d0:	5e b7       	in	r21, 0x3e	; 62
     3d2:	4f 5f       	subi	r20, 0xFF	; 255
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	32 83       	std	Z+2, r19	; 0x02
     3dc:	21 83       	std	Z+1, r18	; 0x01
     3de:	fa 01       	movw	r30, r20
     3e0:	d3 83       	std	Z+3, r29	; 0x03
     3e2:	c2 83       	std	Z+2, r28	; 0x02
     3e4:	84 83       	std	Z+4, r24	; 0x04
     3e6:	95 83       	std	Z+5, r25	; 0x05
     3e8:	a6 83       	std	Z+6, r26	; 0x06
     3ea:	b7 83       	std	Z+7, r27	; 0x07
     3ec:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     3f0:	8f e3       	ldi	r24, 0x3F	; 63
     3f2:	9c e9       	ldi	r25, 0x9C	; 156
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <__vector_14+0x98>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <__vector_14+0x9e>
     3fa:	00 00       	nop
		_delay_ms(10);
		printf("%i intensiteit=%d\n", index, getLight());
     3fc:	c0 91 5a 06 	lds	r28, 0x065A
     400:	d0 91 5b 06 	lds	r29, 0x065B
     404:	ad b7       	in	r26, 0x3d	; 61
     406:	be b7       	in	r27, 0x3e	; 62
     408:	18 96       	adiw	r26, 0x08	; 8
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	be bf       	out	0x3e, r27	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	ad bf       	out	0x3d, r26	; 61
     414:	0e 94 67 01 	call	0x2ce	; 0x2ce <getLight>
     418:	00 d0       	rcall	.+0      	; 0x41a <__vector_14+0xbe>
     41a:	00 d0       	rcall	.+0      	; 0x41c <__vector_14+0xc0>
     41c:	00 d0       	rcall	.+0      	; 0x41e <__vector_14+0xc2>
     41e:	ed b7       	in	r30, 0x3d	; 61
     420:	fe b7       	in	r31, 0x3e	; 62
     422:	31 96       	adiw	r30, 0x01	; 1
     424:	27 e1       	ldi	r18, 0x17	; 23
     426:	31 e0       	ldi	r19, 0x01	; 1
     428:	ad b7       	in	r26, 0x3d	; 61
     42a:	be b7       	in	r27, 0x3e	; 62
     42c:	12 96       	adiw	r26, 0x02	; 2
     42e:	3c 93       	st	X, r19
     430:	2e 93       	st	-X, r18
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	d3 83       	std	Z+3, r29	; 0x03
     436:	c2 83       	std	Z+2, r28	; 0x02
     438:	84 83       	std	Z+4, r24	; 0x04
     43a:	15 82       	std	Z+5, r1	; 0x05
     43c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     440:	ef e3       	ldi	r30, 0x3F	; 63
     442:	fc e9       	ldi	r31, 0x9C	; 156
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__vector_14+0xe8>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__vector_14+0xee>
     44a:	00 00       	nop
     44c:	8f e3       	ldi	r24, 0x3F	; 63
     44e:	9c e9       	ldi	r25, 0x9C	; 156
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <__vector_14+0xf4>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__vector_14+0xfa>
     456:	00 00       	nop
		_delay_ms(10);
		//printf("Zonnescherm: % 6.2f cm \n", afstand);

		_delay_ms(10);
		printf("%d, %d, %i, %i", getLight(), get_grens_light(), getIn(), getOut());
     458:	ad b7       	in	r26, 0x3d	; 61
     45a:	be b7       	in	r27, 0x3e	; 62
     45c:	16 96       	adiw	r26, 0x06	; 6
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	be bf       	out	0x3e, r27	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	ad bf       	out	0x3d, r26	; 61
     468:	0e 94 67 01 	call	0x2ce	; 0x2ce <getLight>
     46c:	c8 2f       	mov	r28, r24
     46e:	0e 94 1b 03 	call	0x636	; 0x636 <get_grens_light>
     472:	8c 01       	movw	r16, r24
     474:	0e 94 57 06 	call	0xcae	; 0xcae <getIn>
     478:	7c 01       	movw	r14, r24
     47a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <getOut>
     47e:	ed b7       	in	r30, 0x3d	; 61
     480:	fe b7       	in	r31, 0x3e	; 62
     482:	3a 97       	sbiw	r30, 0x0a	; 10
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	fe bf       	out	0x3e, r31	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	ed bf       	out	0x3d, r30	; 61
     48e:	31 96       	adiw	r30, 0x01	; 1
     490:	2a e2       	ldi	r18, 0x2A	; 42
     492:	31 e0       	ldi	r19, 0x01	; 1
     494:	ad b7       	in	r26, 0x3d	; 61
     496:	be b7       	in	r27, 0x3e	; 62
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	3c 93       	st	X, r19
     49c:	2e 93       	st	-X, r18
     49e:	11 97       	sbiw	r26, 0x01	; 1
     4a0:	c2 83       	std	Z+2, r28	; 0x02
     4a2:	13 82       	std	Z+3, r1	; 0x03
     4a4:	15 83       	std	Z+5, r17	; 0x05
     4a6:	04 83       	std	Z+4, r16	; 0x04
     4a8:	f7 82       	std	Z+7, r15	; 0x07
     4aa:	e6 82       	std	Z+6, r14	; 0x06
     4ac:	91 87       	std	Z+9, r25	; 0x09
     4ae:	80 87       	std	Z+8, r24	; 0x08
     4b0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
		if(getLight()> get_grens_light() && (getOut() % 2) == 0)
     4b4:	ed b7       	in	r30, 0x3d	; 61
     4b6:	fe b7       	in	r31, 0x3e	; 62
     4b8:	3a 96       	adiw	r30, 0x0a	; 10
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	fe bf       	out	0x3e, r31	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	ed bf       	out	0x3d, r30	; 61
     4c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <getLight>
     4c8:	c8 2f       	mov	r28, r24
     4ca:	0e 94 1b 03 	call	0x636	; 0x636 <get_grens_light>
     4ce:	2c 2f       	mov	r18, r28
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	9c f4       	brge	.+38     	; 0x4fe <__vector_14+0x1a2>
     4d8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <getOut>
     4dc:	80 fd       	sbrc	r24, 0
     4de:	0f c0       	rjmp	.+30     	; 0x4fe <__vector_14+0x1a2>
		{
			printf("test1");
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <__vector_14+0x186>
     4e2:	89 e3       	ldi	r24, 0x39	; 57
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	ad b7       	in	r26, 0x3d	; 61
     4e8:	be b7       	in	r27, 0x3e	; 62
     4ea:	12 96       	adiw	r26, 0x02	; 2
     4ec:	9c 93       	st	X, r25
     4ee:	8e 93       	st	-X, r24
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
			uitrollen();
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0e 94 6d 06 	call	0xcda	; 0xcda <uitrollen>
		}
		if(getLight()< get_grens_light() && (getIn() % 2) == 1)
     4fe:	0e 94 67 01 	call	0x2ce	; 0x2ce <getLight>
     502:	c8 2f       	mov	r28, r24
     504:	0e 94 1b 03 	call	0x636	; 0x636 <get_grens_light>
     508:	2c 2f       	mov	r18, r28
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	28 17       	cp	r18, r24
     50e:	39 07       	cpc	r19, r25
     510:	b4 f4       	brge	.+44     	; 0x53e <__vector_14+0x1e2>
     512:	0e 94 57 06 	call	0xcae	; 0xcae <getIn>
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divmodhi4>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	91 05       	cpc	r25, r1
     522:	69 f4       	brne	.+26     	; 0x53e <__vector_14+0x1e2>
		{
			printf("test2");
     524:	00 d0       	rcall	.+0      	; 0x526 <__vector_14+0x1ca>
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	ed b7       	in	r30, 0x3d	; 61
     52c:	fe b7       	in	r31, 0x3e	; 62
     52e:	92 83       	std	Z+2, r25	; 0x02
     530:	81 83       	std	Z+1, r24	; 0x01
     532:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
			oprollen();
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0e 94 dd 06 	call	0xdba	; 0xdba <oprollen>
		}	
	
		index++;
     53e:	80 91 5a 06 	lds	r24, 0x065A
     542:	90 91 5b 06 	lds	r25, 0x065B
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	90 93 5b 06 	sts	0x065B, r25
     54c:	80 93 5a 06 	sts	0x065A, r24
		
		// Resets de timer en de Totale timer ticks
		extraTime = 0;
     550:	10 92 59 06 	sts	0x0659, r1
     554:	10 92 58 06 	sts	0x0658, r1
	}
}
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_2>:

ISR(INT1_vect)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ef 93       	push	r30
     5aa:	ff 93       	push	r31
	if(i == 1)
     5ac:	80 91 60 06 	lds	r24, 0x0660
     5b0:	90 91 61 06 	lds	r25, 0x0661
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	91 05       	cpc	r25, r1
     5b8:	d1 f4       	brne	.+52     	; 0x5ee <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     5ba:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     5be:	c4 e8       	ldi	r28, 0x84	; 132
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
     5c2:	68 81       	ld	r22, Y
     5c4:	79 81       	ldd	r23, Y+1	; 0x01
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 de 07 	call	0xfbc	; 0xfbc <__floatunsisf>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	80 93 62 06 	sts	0x0662, r24
     5d6:	90 93 63 06 	sts	0x0663, r25
     5da:	a0 93 64 06 	sts	0x0664, r26
     5de:	b0 93 65 06 	sts	0x0665, r27
		TCNT1 = 0; //Reset duration
     5e2:	19 82       	std	Y+1, r1	; 0x01
     5e4:	18 82       	st	Y, r1
		i = 0; //Reset counter
     5e6:	10 92 61 06 	sts	0x0661, r1
     5ea:	10 92 60 06 	sts	0x0660, r1
	}

	if(i==0)
     5ee:	80 91 60 06 	lds	r24, 0x0660
     5f2:	90 91 61 06 	lds	r25, 0x0661
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	59 f4       	brne	.+22     	; 0x610 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     5fa:	e1 e8       	ldi	r30, 0x81	; 129
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	81 60       	ori	r24, 0x01	; 1
     602:	80 83       	st	Z, r24
		i = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 61 06 	sts	0x0661, r25
     60c:	80 93 60 06 	sts	0x0660, r24
	}
     610:	ff 91       	pop	r31
     612:	ef 91       	pop	r30
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti

00000636 <get_grens_light>:
double MAX_UNROLL= 50.0;
double MIN_UNROLL= 0.05;

uint8_t get_grens_light(){
	return GRENS_LIGHT;
}	
     636:	80 91 e7 05 	lds	r24, 0x05E7
     63a:	08 95       	ret

0000063c <get_grens_temp>:

uint8_t get_grens_temp(){
	return GRENS_TEMP;
     63c:	60 91 e8 05 	lds	r22, 0x05E8
     640:	70 91 e9 05 	lds	r23, 0x05E9
     644:	80 91 ea 05 	lds	r24, 0x05EA
     648:	90 91 eb 05 	lds	r25, 0x05EB
     64c:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fixunssfsi>
     650:	86 2f       	mov	r24, r22
}
     652:	08 95       	ret

00000654 <get_max_unroll>:

double get_max_unroll(){
	return MAX_UNROLL;
}
     654:	50 91 e3 05 	lds	r21, 0x05E3
     658:	40 91 e4 05 	lds	r20, 0x05E4
     65c:	30 91 e5 05 	lds	r19, 0x05E5
     660:	20 91 e6 05 	lds	r18, 0x05E6
     664:	85 2f       	mov	r24, r21
     666:	94 2f       	mov	r25, r20
     668:	a3 2f       	mov	r26, r19
     66a:	b2 2f       	mov	r27, r18
     66c:	bc 01       	movw	r22, r24
     66e:	cd 01       	movw	r24, r26
     670:	08 95       	ret

00000672 <get_min_unroll>:
double get_min_unroll(){
	return MIN_UNROLL;
}
     672:	50 91 df 05 	lds	r21, 0x05DF
     676:	40 91 e0 05 	lds	r20, 0x05E0
     67a:	30 91 e1 05 	lds	r19, 0x05E1
     67e:	20 91 e2 05 	lds	r18, 0x05E2
     682:	85 2f       	mov	r24, r21
     684:	94 2f       	mov	r25, r20
     686:	a3 2f       	mov	r26, r19
     688:	b2 2f       	mov	r27, r18
     68a:	bc 01       	movw	r22, r24
     68c:	cd 01       	movw	r24, r26
     68e:	08 95       	ret

00000690 <protocolCom>:

void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen?");
     690:	05 e4       	ldi	r16, 0x45	; 69
     692:	11 e0       	ldi	r17, 0x01	; 1
		ser_readln(in_buf, sizeof(in_buf), 1);
     694:	c0 e9       	ldi	r28, 0x90	; 144
     696:	d6 e0       	ldi	r29, 0x06	; 6
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     698:	0f 2e       	mov	r0, r31
     69a:	fd e5       	ldi	r31, 0x5D	; 93
     69c:	ef 2e       	mov	r14, r31
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	ff 2e       	mov	r15, r31
     6a2:	f0 2d       	mov	r31, r0
				} if((getOut() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     6a4:	0f 2e       	mov	r0, r31
     6a6:	f1 e8       	ldi	r31, 0x81	; 129
     6a8:	af 2e       	mov	r10, r31
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	bf 2e       	mov	r11, r31
     6ae:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     6b0:	0f 2e       	mov	r0, r31
     6b2:	f4 ea       	ldi	r31, 0xA4	; 164
     6b4:	cf 2e       	mov	r12, r31
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	df 2e       	mov	r13, r31
     6ba:	f0 2d       	mov	r31, r0

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     6bc:	0f 2e       	mov	r0, r31
     6be:	fb ea       	ldi	r31, 0xAB	; 171
     6c0:	8f 2e       	mov	r8, r31
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	9f 2e       	mov	r9, r31
     6c6:	f0 2d       	mov	r31, r0
				char ADCOut[24];
				sprintf(ADCOut, "% 6.2f", ADCRes);
				printf("%f", ADCRes);
				ser_write("202 TEMP: "); ser_writeln(ADCOut);*/
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     6c8:	0f 2e       	mov	r0, r31
     6ca:	f7 ec       	ldi	r31, 0xC7	; 199
     6cc:	6f 2e       	mov	r6, r31
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	7f 2e       	mov	r7, r31
     6d2:	f0 2d       	mov	r31, r0
				printf("202 GRENS_TEMP: % 6.2f \n", GRENS_TEMP);
			}
			else if(strcmp("SET_GRENS_TEMP(Z)", in_buf) == 0){
     6d4:	0f 2e       	mov	r0, r31
     6d6:	ff ee       	ldi	r31, 0xEF	; 239
     6d8:	4f 2e       	mov	r4, r31
     6da:	f1 e0       	ldi	r31, 0x01	; 1
     6dc:	5f 2e       	mov	r5, r31
     6de:	f0 2d       	mov	r31, r0
				printf("203 GRENS_TEMP: %6.2f -> %6.2f ", GRENS_LIGHT, in_buf);
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f1 e2       	ldi	r31, 0x21	; 33
     6e4:	2f 2e       	mov	r2, r31
     6e6:	f2 e0       	ldi	r31, 0x02	; 2
     6e8:	3f 2e       	mov	r3, r31
     6ea:	f0 2d       	mov	r31, r0
	return MIN_UNROLL;
}

void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen?");
     6ec:	c8 01       	movw	r24, r16
     6ee:	0e 94 05 06 	call	0xc0a	; 0xc0a <ser_write>
		ser_readln(in_buf, sizeof(in_buf), 1);
     6f2:	ce 01       	movw	r24, r28
     6f4:	6e e1       	ldi	r22, 0x1E	; 30
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	0e 94 1d 06 	call	0xc3a	; 0xc3a <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     6fe:	c7 01       	movw	r24, r14
     700:	be 01       	movw	r22, r28
     702:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     706:	28 2f       	mov	r18, r24
     708:	39 2f       	mov	r19, r25
     70a:	21 15       	cp	r18, r1
     70c:	31 05       	cpc	r19, r1
     70e:	a1 f4       	brne	.+40     	; 0x738 <protocolCom+0xa8>
				if ((getOut() % 2) == 1){
     710:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <getOut>
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divmodhi4>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	91 05       	cpc	r25, r1
     720:	21 f4       	brne	.+8      	; 0x72a <protocolCom+0x9a>
					ser_writeln("Zonnescherm is al uitgerold!");
     722:	84 e6       	ldi	r24, 0x64	; 100
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
				} if((getOut() % 2) == 0){
     72a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <getOut>
     72e:	80 fd       	sbrc	r24, 0
     730:	1f c0       	rjmp	.+62     	; 0x770 <protocolCom+0xe0>
					uitrollen();
     732:	0e 94 6d 06 	call	0xcda	; 0xcda <uitrollen>
     736:	1c c0       	rjmp	.+56     	; 0x770 <protocolCom+0xe0>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     738:	c5 01       	movw	r24, r10
     73a:	be 01       	movw	r22, r28
     73c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     740:	28 2f       	mov	r18, r24
     742:	39 2f       	mov	r19, r25
     744:	21 15       	cp	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	99 f4       	brne	.+38     	; 0x770 <protocolCom+0xe0>
				if ((getIn() % 2) == 0){
     74a:	0e 94 57 06 	call	0xcae	; 0xcae <getIn>
     74e:	80 fd       	sbrc	r24, 0
     750:	04 c0       	rjmp	.+8      	; 0x75a <protocolCom+0xca>
					ser_writeln("Zonnescherm is al opgerold!");
     752:	88 e8       	ldi	r24, 0x88	; 136
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
				} if((getIn() % 2) == 1){
     75a:	0e 94 57 06 	call	0xcae	; 0xcae <getIn>
     75e:	62 e0       	ldi	r22, 0x02	; 2
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divmodhi4>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	91 05       	cpc	r25, r1
     76a:	11 f4       	brne	.+4      	; 0x770 <protocolCom+0xe0>
					oprollen();
     76c:	0e 94 dd 06 	call	0xdba	; 0xdba <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     770:	c6 01       	movw	r24, r12
     772:	be 01       	movw	r22, r28
     774:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     778:	28 2f       	mov	r18, r24
     77a:	39 2f       	mov	r19, r25
     77c:	21 15       	cp	r18, r1
     77e:	31 05       	cpc	r19, r1
     780:	09 f4       	brne	.+2      	; 0x784 <protocolCom+0xf4>
     782:	b4 cf       	rjmp	.-152    	; 0x6ec <protocolCom+0x5c>

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     784:	c4 01       	movw	r24, r8
     786:	be 01       	movw	r22, r28
     788:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     78c:	28 2f       	mov	r18, r24
     78e:	39 2f       	mov	r19, r25
     790:	21 15       	cp	r18, r1
     792:	31 05       	cpc	r19, r1
     794:	b9 f4       	brne	.+46     	; 0x7c4 <protocolCom+0x134>
				printf("202 TEMP= % 6.2f \n", getTemp());
     796:	0e 94 20 01 	call	0x240	; 0x240 <getTemp>
     79a:	00 d0       	rcall	.+0      	; 0x79c <protocolCom+0x10c>
     79c:	00 d0       	rcall	.+0      	; 0x79e <protocolCom+0x10e>
     79e:	24 eb       	ldi	r18, 0xB4	; 180
     7a0:	31 e0       	ldi	r19, 0x01	; 1
     7a2:	ad b7       	in	r26, 0x3d	; 61
     7a4:	be b7       	in	r27, 0x3e	; 62
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	3c 93       	st	X, r19
     7aa:	2e 93       	st	-X, r18
     7ac:	11 97       	sbiw	r26, 0x01	; 1
     7ae:	14 96       	adiw	r26, 0x04	; 4
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
     7b4:	13 97       	sbiw	r26, 0x03	; 3
     7b6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	94 cf       	rjmp	.-216    	; 0x6ec <protocolCom+0x5c>
				char ADCOut[24];
				sprintf(ADCOut, "% 6.2f", ADCRes);
				printf("%f", ADCRes);
				ser_write("202 TEMP: "); ser_writeln(ADCOut);*/
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     7c4:	c3 01       	movw	r24, r6
     7c6:	be 01       	movw	r22, r28
     7c8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     7cc:	28 2f       	mov	r18, r24
     7ce:	39 2f       	mov	r19, r25
     7d0:	21 15       	cp	r18, r1
     7d2:	31 05       	cpc	r19, r1
     7d4:	01 f5       	brne	.+64     	; 0x816 <protocolCom+0x186>
				printf("202 GRENS_TEMP: % 6.2f \n", GRENS_TEMP);
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <protocolCom+0x148>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <protocolCom+0x14a>
     7da:	00 d0       	rcall	.+0      	; 0x7dc <protocolCom+0x14c>
     7dc:	86 ed       	ldi	r24, 0xD6	; 214
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	ed b7       	in	r30, 0x3d	; 61
     7e2:	fe b7       	in	r31, 0x3e	; 62
     7e4:	92 83       	std	Z+2, r25	; 0x02
     7e6:	81 83       	std	Z+1, r24	; 0x01
     7e8:	80 91 e8 05 	lds	r24, 0x05E8
     7ec:	90 91 e9 05 	lds	r25, 0x05E9
     7f0:	a0 91 ea 05 	lds	r26, 0x05EA
     7f4:	b0 91 eb 05 	lds	r27, 0x05EB
     7f8:	83 83       	std	Z+3, r24	; 0x03
     7fa:	94 83       	std	Z+4, r25	; 0x04
     7fc:	a5 83       	std	Z+5, r26	; 0x05
     7fe:	b6 83       	std	Z+6, r27	; 0x06
     800:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     804:	8d b7       	in	r24, 0x3d	; 61
     806:	9e b7       	in	r25, 0x3e	; 62
     808:	06 96       	adiw	r24, 0x06	; 6
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	9e bf       	out	0x3e, r25	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	8d bf       	out	0x3d, r24	; 61
     814:	6b cf       	rjmp	.-298    	; 0x6ec <protocolCom+0x5c>
			}
			else if(strcmp("SET_GRENS_TEMP(Z)", in_buf) == 0){
     816:	c2 01       	movw	r24, r4
     818:	be 01       	movw	r22, r28
     81a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     81e:	28 2f       	mov	r18, r24
     820:	39 2f       	mov	r19, r25
     822:	21 15       	cp	r18, r1
     824:	31 05       	cpc	r19, r1
     826:	f9 f4       	brne	.+62     	; 0x866 <protocolCom+0x1d6>
				printf("203 GRENS_TEMP: %6.2f -> %6.2f ", GRENS_LIGHT, in_buf);
     828:	00 d0       	rcall	.+0      	; 0x82a <protocolCom+0x19a>
     82a:	00 d0       	rcall	.+0      	; 0x82c <protocolCom+0x19c>
     82c:	00 d0       	rcall	.+0      	; 0x82e <protocolCom+0x19e>
     82e:	ed b7       	in	r30, 0x3d	; 61
     830:	fe b7       	in	r31, 0x3e	; 62
     832:	31 96       	adiw	r30, 0x01	; 1
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	ad b7       	in	r26, 0x3d	; 61
     83a:	be b7       	in	r27, 0x3e	; 62
     83c:	12 96       	adiw	r26, 0x02	; 2
     83e:	9c 93       	st	X, r25
     840:	8e 93       	st	-X, r24
     842:	11 97       	sbiw	r26, 0x01	; 1
     844:	80 91 e7 05 	lds	r24, 0x05E7
     848:	82 83       	std	Z+2, r24	; 0x02
     84a:	13 82       	std	Z+3, r1	; 0x03
     84c:	d5 83       	std	Z+5, r29	; 0x05
     84e:	c4 83       	std	Z+4, r28	; 0x04
     850:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     854:	ed b7       	in	r30, 0x3d	; 61
     856:	fe b7       	in	r31, 0x3e	; 62
     858:	36 96       	adiw	r30, 0x06	; 6
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	fe bf       	out	0x3e, r31	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	ed bf       	out	0x3d, r30	; 61
     864:	43 cf       	rjmp	.-378    	; 0x6ec <protocolCom+0x5c>
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     866:	c1 01       	movw	r24, r2
     868:	be 01       	movw	r22, r28
     86a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     86e:	28 2f       	mov	r18, r24
     870:	39 2f       	mov	r19, r25
     872:	21 15       	cp	r18, r1
     874:	31 05       	cpc	r19, r1
     876:	b9 f4       	brne	.+46     	; 0x8a6 <protocolCom+0x216>
				printf("202 LIGHT %i \n", getLight());
     878:	0e 94 67 01 	call	0x2ce	; 0x2ce <getLight>
     87c:	00 d0       	rcall	.+0      	; 0x87e <protocolCom+0x1ee>
     87e:	00 d0       	rcall	.+0      	; 0x880 <protocolCom+0x1f0>
     880:	2b e2       	ldi	r18, 0x2B	; 43
     882:	32 e0       	ldi	r19, 0x02	; 2
     884:	ad b7       	in	r26, 0x3d	; 61
     886:	be b7       	in	r27, 0x3e	; 62
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	3c 93       	st	X, r19
     88c:	2e 93       	st	-X, r18
     88e:	11 97       	sbiw	r26, 0x01	; 1
     890:	14 96       	adiw	r26, 0x04	; 4
     892:	9c 93       	st	X, r25
     894:	8e 93       	st	-X, r24
     896:	13 97       	sbiw	r26, 0x03	; 3
     898:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	23 cf       	rjmp	.-442    	; 0x6ec <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     8a6:	8a e3       	ldi	r24, 0x3A	; 58
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	be 01       	movw	r22, r28
     8ac:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     8b0:	28 2f       	mov	r18, r24
     8b2:	39 2f       	mov	r19, r25
     8b4:	21 15       	cp	r18, r1
     8b6:	31 05       	cpc	r19, r1
     8b8:	c1 f4       	brne	.+48     	; 0x8ea <protocolCom+0x25a>
				printf("202 GRENS_LIGHT: % 6.2f \n", GRENS_LIGHT);
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <protocolCom+0x22c>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <protocolCom+0x22e>
     8be:	ed b7       	in	r30, 0x3d	; 61
     8c0:	fe b7       	in	r31, 0x3e	; 62
     8c2:	31 96       	adiw	r30, 0x01	; 1
     8c4:	8a e4       	ldi	r24, 0x4A	; 74
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	ad b7       	in	r26, 0x3d	; 61
     8ca:	be b7       	in	r27, 0x3e	; 62
     8cc:	12 96       	adiw	r26, 0x02	; 2
     8ce:	9c 93       	st	X, r25
     8d0:	8e 93       	st	-X, r24
     8d2:	11 97       	sbiw	r26, 0x01	; 1
     8d4:	80 91 e7 05 	lds	r24, 0x05E7
     8d8:	82 83       	std	Z+2, r24	; 0x02
     8da:	13 82       	std	Z+3, r1	; 0x03
     8dc:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	01 cf       	rjmp	.-510    	; 0x6ec <protocolCom+0x5c>
			}
			else if(strcmp("SET_GRENS_LIGHT(Z)", in_buf) == 0){
     8ea:	84 e6       	ldi	r24, 0x64	; 100
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	be 01       	movw	r22, r28
     8f0:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     8f4:	28 2f       	mov	r18, r24
     8f6:	39 2f       	mov	r19, r25
     8f8:	21 15       	cp	r18, r1
     8fa:	31 05       	cpc	r19, r1
     8fc:	f9 f4       	brne	.+62     	; 0x93c <__stack+0x3d>
				printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", GRENS_LIGHT, in_buf);
     8fe:	00 d0       	rcall	.+0      	; 0x900 <__stack+0x1>
     900:	00 d0       	rcall	.+0      	; 0x902 <__stack+0x3>
     902:	00 d0       	rcall	.+0      	; 0x904 <__stack+0x5>
     904:	ed b7       	in	r30, 0x3d	; 61
     906:	fe b7       	in	r31, 0x3e	; 62
     908:	31 96       	adiw	r30, 0x01	; 1
     90a:	87 e7       	ldi	r24, 0x77	; 119
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	ad b7       	in	r26, 0x3d	; 61
     910:	be b7       	in	r27, 0x3e	; 62
     912:	12 96       	adiw	r26, 0x02	; 2
     914:	9c 93       	st	X, r25
     916:	8e 93       	st	-X, r24
     918:	11 97       	sbiw	r26, 0x01	; 1
     91a:	80 91 e7 05 	lds	r24, 0x05E7
     91e:	82 83       	std	Z+2, r24	; 0x02
     920:	13 82       	std	Z+3, r1	; 0x03
     922:	d5 83       	std	Z+5, r29	; 0x05
     924:	c4 83       	std	Z+4, r28	; 0x04
     926:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     92a:	ed b7       	in	r30, 0x3d	; 61
     92c:	fe b7       	in	r31, 0x3e	; 62
     92e:	36 96       	adiw	r30, 0x06	; 6
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	fe bf       	out	0x3e, r31	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	ed bf       	out	0x3d, r30	; 61
     93a:	d8 ce       	rjmp	.-592    	; 0x6ec <protocolCom+0x5c>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     93c:	88 e9       	ldi	r24, 0x98	; 152
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	be 01       	movw	r22, r28
     942:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     946:	28 2f       	mov	r18, r24
     948:	39 2f       	mov	r19, r25
     94a:	21 15       	cp	r18, r1
     94c:	31 05       	cpc	r19, r1
     94e:	21 f5       	brne	.+72     	; 0x998 <__stack+0x99>
				printf("202 TEMP= % 6.2f \n", MAX_UNROLL);
     950:	00 d0       	rcall	.+0      	; 0x952 <__stack+0x53>
     952:	00 d0       	rcall	.+0      	; 0x954 <__stack+0x55>
     954:	00 d0       	rcall	.+0      	; 0x956 <__stack+0x57>
     956:	84 eb       	ldi	r24, 0xB4	; 180
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	ad b7       	in	r26, 0x3d	; 61
     95c:	be b7       	in	r27, 0x3e	; 62
     95e:	12 96       	adiw	r26, 0x02	; 2
     960:	9c 93       	st	X, r25
     962:	8e 93       	st	-X, r24
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	80 91 e3 05 	lds	r24, 0x05E3
     96a:	90 91 e4 05 	lds	r25, 0x05E4
     96e:	a0 91 e5 05 	lds	r26, 0x05E5
     972:	b0 91 e6 05 	lds	r27, 0x05E6
     976:	ed b7       	in	r30, 0x3d	; 61
     978:	fe b7       	in	r31, 0x3e	; 62
     97a:	83 83       	std	Z+3, r24	; 0x03
     97c:	94 83       	std	Z+4, r25	; 0x04
     97e:	a5 83       	std	Z+5, r26	; 0x05
     980:	b6 83       	std	Z+6, r27	; 0x06
     982:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     986:	8d b7       	in	r24, 0x3d	; 61
     988:	9e b7       	in	r25, 0x3e	; 62
     98a:	06 96       	adiw	r24, 0x06	; 6
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	9e bf       	out	0x3e, r25	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	8d bf       	out	0x3d, r24	; 61
     996:	aa ce       	rjmp	.-684    	; 0x6ec <protocolCom+0x5c>
			}
			else if(strcmp("SET_MAX_UNROLL(Z)", in_buf) == 0){
     998:	87 ea       	ldi	r24, 0xA7	; 167
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	be 01       	movw	r22, r28
     99e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     9a2:	28 2f       	mov	r18, r24
     9a4:	39 2f       	mov	r19, r25
     9a6:	21 15       	cp	r18, r1
     9a8:	31 05       	cpc	r19, r1
     9aa:	51 f5       	brne	.+84     	; 0xa00 <__stack+0x101>
				printf("203 MAX_UNROLL: %6.2f -> %6.2f ", MAX_UNROLL, in_buf);
     9ac:	ad b7       	in	r26, 0x3d	; 61
     9ae:	be b7       	in	r27, 0x3e	; 62
     9b0:	18 97       	sbiw	r26, 0x08	; 8
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	be bf       	out	0x3e, r27	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	ad bf       	out	0x3d, r26	; 61
     9bc:	ed b7       	in	r30, 0x3d	; 61
     9be:	fe b7       	in	r31, 0x3e	; 62
     9c0:	31 96       	adiw	r30, 0x01	; 1
     9c2:	89 eb       	ldi	r24, 0xB9	; 185
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	12 96       	adiw	r26, 0x02	; 2
     9c8:	9c 93       	st	X, r25
     9ca:	8e 93       	st	-X, r24
     9cc:	11 97       	sbiw	r26, 0x01	; 1
     9ce:	80 91 e3 05 	lds	r24, 0x05E3
     9d2:	90 91 e4 05 	lds	r25, 0x05E4
     9d6:	a0 91 e5 05 	lds	r26, 0x05E5
     9da:	b0 91 e6 05 	lds	r27, 0x05E6
     9de:	82 83       	std	Z+2, r24	; 0x02
     9e0:	93 83       	std	Z+3, r25	; 0x03
     9e2:	a4 83       	std	Z+4, r26	; 0x04
     9e4:	b5 83       	std	Z+5, r27	; 0x05
     9e6:	d7 83       	std	Z+7, r29	; 0x07
     9e8:	c6 83       	std	Z+6, r28	; 0x06
     9ea:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     9ee:	ed b7       	in	r30, 0x3d	; 61
     9f0:	fe b7       	in	r31, 0x3e	; 62
     9f2:	38 96       	adiw	r30, 0x08	; 8
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	fe bf       	out	0x3e, r31	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	ed bf       	out	0x3d, r30	; 61
     9fe:	76 ce       	rjmp	.-788    	; 0x6ec <protocolCom+0x5c>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     a00:	89 ed       	ldi	r24, 0xD9	; 217
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	be 01       	movw	r22, r28
     a06:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     a0a:	28 2f       	mov	r18, r24
     a0c:	39 2f       	mov	r19, r25
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	21 f5       	brne	.+72     	; 0xa5c <__stack+0x15d>
				printf("203 MAX_UNROLL: %6.2f -> %6.2f ", MIN_UNROLL);
     a14:	00 d0       	rcall	.+0      	; 0xa16 <__stack+0x117>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <__stack+0x119>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <__stack+0x11b>
     a1a:	89 eb       	ldi	r24, 0xB9	; 185
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	ad b7       	in	r26, 0x3d	; 61
     a20:	be b7       	in	r27, 0x3e	; 62
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	9c 93       	st	X, r25
     a26:	8e 93       	st	-X, r24
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	80 91 df 05 	lds	r24, 0x05DF
     a2e:	90 91 e0 05 	lds	r25, 0x05E0
     a32:	a0 91 e1 05 	lds	r26, 0x05E1
     a36:	b0 91 e2 05 	lds	r27, 0x05E2
     a3a:	ed b7       	in	r30, 0x3d	; 61
     a3c:	fe b7       	in	r31, 0x3e	; 62
     a3e:	83 83       	std	Z+3, r24	; 0x03
     a40:	94 83       	std	Z+4, r25	; 0x04
     a42:	a5 83       	std	Z+5, r26	; 0x05
     a44:	b6 83       	std	Z+6, r27	; 0x06
     a46:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     a4a:	8d b7       	in	r24, 0x3d	; 61
     a4c:	9e b7       	in	r25, 0x3e	; 62
     a4e:	06 96       	adiw	r24, 0x06	; 6
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	9e bf       	out	0x3e, r25	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	8d bf       	out	0x3d, r24	; 61
     a5a:	48 ce       	rjmp	.-880    	; 0x6ec <protocolCom+0x5c>
			}
			else if(strcmp("SET_MIN_UNROLL(Z)", in_buf) == 0){
     a5c:	88 ee       	ldi	r24, 0xE8	; 232
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	be 01       	movw	r22, r28
     a62:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     a66:	28 2f       	mov	r18, r24
     a68:	39 2f       	mov	r19, r25
     a6a:	21 15       	cp	r18, r1
     a6c:	31 05       	cpc	r19, r1
     a6e:	51 f5       	brne	.+84     	; 0xac4 <__stack+0x1c5>
				printf("203 MIN_UNROLL: %6.2f -> %6.2f ", MAX_UNROLL, in_buf);
     a70:	ad b7       	in	r26, 0x3d	; 61
     a72:	be b7       	in	r27, 0x3e	; 62
     a74:	18 97       	sbiw	r26, 0x08	; 8
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	be bf       	out	0x3e, r27	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	ad bf       	out	0x3d, r26	; 61
     a80:	ed b7       	in	r30, 0x3d	; 61
     a82:	fe b7       	in	r31, 0x3e	; 62
     a84:	31 96       	adiw	r30, 0x01	; 1
     a86:	8a ef       	ldi	r24, 0xFA	; 250
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	12 96       	adiw	r26, 0x02	; 2
     a8c:	9c 93       	st	X, r25
     a8e:	8e 93       	st	-X, r24
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	80 91 e3 05 	lds	r24, 0x05E3
     a96:	90 91 e4 05 	lds	r25, 0x05E4
     a9a:	a0 91 e5 05 	lds	r26, 0x05E5
     a9e:	b0 91 e6 05 	lds	r27, 0x05E6
     aa2:	82 83       	std	Z+2, r24	; 0x02
     aa4:	93 83       	std	Z+3, r25	; 0x03
     aa6:	a4 83       	std	Z+4, r26	; 0x04
     aa8:	b5 83       	std	Z+5, r27	; 0x05
     aaa:	d7 83       	std	Z+7, r29	; 0x07
     aac:	c6 83       	std	Z+6, r28	; 0x06
     aae:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     ab2:	ed b7       	in	r30, 0x3d	; 61
     ab4:	fe b7       	in	r31, 0x3e	; 62
     ab6:	38 96       	adiw	r30, 0x08	; 8
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	fe bf       	out	0x3e, r31	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	ed bf       	out	0x3d, r30	; 61
     ac2:	14 ce       	rjmp	.-984    	; 0x6ec <protocolCom+0x5c>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     ac4:	8a e1       	ldi	r24, 0x1A	; 26
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	be 01       	movw	r22, r28
     aca:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     ace:	28 2f       	mov	r18, r24
     ad0:	39 2f       	mov	r19, r25
     ad2:	21 15       	cp	r18, r1
     ad4:	31 05       	cpc	r19, r1
     ad6:	09 f4       	brne	.+2      	; 0xada <__stack+0x1db>
     ad8:	09 ce       	rjmp	.-1006   	; 0x6ec <protocolCom+0x5c>

			}
			else if(strcmp("SET_NAME", in_buf) == 0){
     ada:	83 e2       	ldi	r24, 0x23	; 35
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	be 01       	movw	r22, r28
     ae0:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     ae4:	28 2f       	mov	r18, r24
     ae6:	39 2f       	mov	r19, r25
     ae8:	21 15       	cp	r18, r1
     aea:	31 05       	cpc	r19, r1
     aec:	71 f4       	brne	.+28     	; 0xb0a <__stack+0x20b>
				printf("200 OK ");
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <__stack+0x1f1>
     af0:	8c e2       	ldi	r24, 0x2C	; 44
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	ad b7       	in	r26, 0x3d	; 61
     af6:	be b7       	in	r27, 0x3e	; 62
     af8:	12 96       	adiw	r26, 0x02	; 2
     afa:	9c 93       	st	X, r25
     afc:	8e 93       	st	-X, r24
     afe:	11 97       	sbiw	r26, 0x01	; 1
     b00:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	f1 cd       	rjmp	.-1054   	; 0x6ec <protocolCom+0x5c>
			}
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     b0a:	84 e3       	ldi	r24, 0x34	; 52
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	be 01       	movw	r22, r28
     b10:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     b14:	28 2f       	mov	r18, r24
     b16:	39 2f       	mov	r19, r25
     b18:	21 15       	cp	r18, r1
     b1a:	31 05       	cpc	r19, r1
     b1c:	09 f4       	brne	.+2      	; 0xb20 <__stack+0x221>
     b1e:	e6 cd       	rjmp	.-1076   	; 0x6ec <protocolCom+0x5c>

			}
			else if(strcmp("SET_LOCATION(Z)", in_buf) == 0){
     b20:	81 e4       	ldi	r24, 0x41	; 65
     b22:	93 e0       	ldi	r25, 0x03	; 3
     b24:	be 01       	movw	r22, r28
     b26:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     b2a:	28 2f       	mov	r18, r24
     b2c:	39 2f       	mov	r19, r25
     b2e:	21 15       	cp	r18, r1
     b30:	31 05       	cpc	r19, r1
     b32:	61 f4       	brne	.+24     	; 0xb4c <__stack+0x24d>
				printf("200 OK ");
     b34:	00 d0       	rcall	.+0      	; 0xb36 <__stack+0x237>
     b36:	8c e2       	ldi	r24, 0x2C	; 44
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	ed b7       	in	r30, 0x3d	; 61
     b3c:	fe b7       	in	r31, 0x3e	; 62
     b3e:	92 83       	std	Z+2, r25	; 0x02
     b40:	81 83       	std	Z+1, r24	; 0x01
     b42:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	d0 cd       	rjmp	.-1120   	; 0x6ec <protocolCom+0x5c>
			}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     b4c:	81 e5       	ldi	r24, 0x51	; 81
     b4e:	93 e0       	ldi	r25, 0x03	; 3
     b50:	be 01       	movw	r22, r28
     b52:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     b56:	28 2f       	mov	r18, r24
     b58:	39 2f       	mov	r19, r25
     b5a:	21 15       	cp	r18, r1
     b5c:	31 05       	cpc	r19, r1
     b5e:	89 f4       	brne	.+34     	; 0xb82 <__stack+0x283>
				if ((getOut() % 2) == 1){
     b60:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <getOut>
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divmodhi4>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__stack+0x277>
					uitrollen();					
     b72:	0e 94 6d 06 	call	0xcda	; 0xcda <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     b76:	86 e5       	ldi	r24, 0x56	; 86
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
				abort();
     b7e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     b82:	8f e5       	ldi	r24, 0x5F	; 95
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	be 01       	movw	r22, r28
     b88:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <strcmp>
     b8c:	28 2f       	mov	r18, r24
     b8e:	39 2f       	mov	r19, r25
     b90:	21 15       	cp	r18, r1
     b92:	31 05       	cpc	r19, r1
     b94:	29 f4       	brne	.+10     	; 0xba0 <__stack+0x2a1>
				ser_writeln(
     b96:	84 e6       	ldi	r24, 0x64	; 100
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
     b9e:	a6 cd       	rjmp	.-1204   	; 0x6ec <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     ba0:	83 ea       	ldi	r24, 0xA3	; 163
     ba2:	95 e0       	ldi	r25, 0x05	; 5
     ba4:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
     ba8:	a1 cd       	rjmp	.-1214   	; 0x6ec <protocolCom+0x5c>

00000baa <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     baa:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     bae:	83 e3       	ldi	r24, 0x33	; 51
     bb0:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     bb4:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     bb8:	88 e1       	ldi	r24, 0x18	; 24
     bba:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     bc4:	8c ee       	ldi	r24, 0xEC	; 236
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	90 93 b5 06 	sts	0x06B5, r25
     bcc:	80 93 b4 06 	sts	0x06B4, r24
}
     bd0:	08 95       	ret

00000bd2 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     bd2:	e0 ec       	ldi	r30, 0xC0	; 192
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	90 81       	ld	r25, Z
     bd8:	95 ff       	sbrs	r25, 5
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     bdc:	80 93 c6 00 	sts	0x00C6, r24
}
     be0:	08 95       	ret

00000be2 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     be2:	cf 93       	push	r28
     be4:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     be6:	8a 30       	cpi	r24, 0x0A	; 10
     be8:	19 f4       	brne	.+6      	; 0xbf0 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     bea:	8d e0       	ldi	r24, 0x0D	; 13
     bec:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>
	}
	ser_transmit(c);
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>
}
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     bfa:	e0 ec       	ldi	r30, 0xC0	; 192
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 23       	and	r24, r24
     c02:	ec f7       	brge	.-6      	; 0xbfe <ser_receive+0x4>
	return UDR0;
     c04:	80 91 c6 00 	lds	r24, 0x00C6
}
     c08:	08 95       	ret

00000c0a <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     c10:	88 81       	ld	r24, Y
     c12:	88 23       	and	r24, r24
     c14:	31 f0       	breq	.+12     	; 0xc22 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     c16:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     c18:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     c1c:	89 91       	ld	r24, Y+
     c1e:	88 23       	and	r24, r24
     c20:	d9 f7       	brne	.-10     	; 0xc18 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     c28:	0e 94 05 06 	call	0xc0a	; 0xc0a <ser_write>
	ser_transmit('\r');
     c2c:	8d e0       	ldi	r24, 0x0D	; 13
     c2e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>
	ser_transmit('\n');
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>
}
     c38:	08 95       	ret

00000c3a <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	5c 01       	movw	r10, r24
     c50:	d4 2f       	mov	r29, r20
	int i=0;
     c52:	6c 01       	movw	r12, r24
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     c58:	8b 01       	movw	r16, r22
     c5a:	01 50       	subi	r16, 0x01	; 1
     c5c:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     c5e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <ser_receive>
     c62:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     c64:	dd 23       	and	r29, r29
     c66:	11 f0       	breq	.+4      	; 0xc6c <ser_readln+0x32>
     c68:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>
		if (c=='\r') {
     c6c:	cd 30       	cpi	r28, 0x0D	; 13
     c6e:	31 f4       	brne	.+12     	; 0xc7c <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     c70:	dd 23       	and	r29, r29
     c72:	71 f0       	breq	.+28     	; 0xc90 <ser_readln+0x56>
     c74:	8a e0       	ldi	r24, 0x0A	; 10
     c76:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ser_transmit>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     c7c:	e0 16       	cp	r14, r16
     c7e:	f1 06       	cpc	r15, r17
     c80:	74 f7       	brge	.-36     	; 0xc5e <ser_readln+0x24>
			buf[i++]=c;
     c82:	f6 01       	movw	r30, r12
     c84:	c1 93       	st	Z+, r28
     c86:	6f 01       	movw	r12, r30
     c88:	08 94       	sec
     c8a:	e1 1c       	adc	r14, r1
     c8c:	f1 1c       	adc	r15, r1
     c8e:	e7 cf       	rjmp	.-50     	; 0xc5e <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     c90:	ea 0c       	add	r14, r10
     c92:	fb 1c       	adc	r15, r11
     c94:	f7 01       	movw	r30, r14
     c96:	10 82       	st	Z, r1
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	bf 90       	pop	r11
     caa:	af 90       	pop	r10
     cac:	08 95       	ret

00000cae <getIn>:

int j, IN, OUT = 0; //Voor knipperen van zonnescherm | Voor het kijken of hij uitgerold/opgerold is

int getIn(){
	return IN;
}
     cae:	80 91 b0 06 	lds	r24, 0x06B0
     cb2:	90 91 b1 06 	lds	r25, 0x06B1
     cb6:	08 95       	ret

00000cb8 <getOut>:

int getOut(){
	return OUT;
}
     cb8:	80 91 66 06 	lds	r24, 0x0666
     cbc:	90 91 67 06 	lds	r25, 0x0667
     cc0:	08 95       	ret

00000cc2 <init_scherm_ports>:

init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
     cc2:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
     cc4:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
     cc6:	25 9a       	sbi	0x04, 5	; 4
	//DDRD = 0xff; //													DELETE AFTER
	
	//EIMSK = 1 << INT0;//													DELETE AFTER
	EICRA |= 1 << ISC00;
     cc8:	e9 e6       	ldi	r30, 0x69	; 105
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
     cd6:	2d 9a       	sbi	0x05, 5	; 5
}
     cd8:	08 95       	ret

00000cda <uitrollen>:
void uitrollen(){
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
	OUT = (OUT + 1);
     cde:	80 91 66 06 	lds	r24, 0x0666
     ce2:	90 91 67 06 	lds	r25, 0x0667
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	90 93 67 06 	sts	0x0667, r25
     cec:	80 93 66 06 	sts	0x0666, r24
	IN = (IN + 1);
     cf0:	80 91 b0 06 	lds	r24, 0x06B0
     cf4:	90 91 b1 06 	lds	r25, 0x06B1
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	90 93 b1 06 	sts	0x06B1, r25
     cfe:	80 93 b0 06 	sts	0x06B0, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
     d02:	8a ef       	ldi	r24, 0xFA	; 250
     d04:	95 e0       	ldi	r25, 0x05	; 5
     d06:	0e 94 05 06 	call	0xc0a	; 0xc0a <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
     d0a:	2d 98       	cbi	0x05, 5	; 5
	//PORTD = 0xff; //													DELETE AFTER
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
     d0c:	2b 9a       	sbi	0x05, 3	; 5
	
	printf("Zonnescherm % 6.2f cm \n", getDistance());
     d0e:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <uitrollen+0x3a>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <uitrollen+0x3c>
     d16:	2f ef       	ldi	r18, 0xFF	; 255
     d18:	35 e0       	ldi	r19, 0x05	; 5
     d1a:	ad b7       	in	r26, 0x3d	; 61
     d1c:	be b7       	in	r27, 0x3e	; 62
     d1e:	12 96       	adiw	r26, 0x02	; 2
     d20:	3c 93       	st	X, r19
     d22:	2e 93       	st	-X, r18
     d24:	11 97       	sbiw	r26, 0x01	; 1
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	9c 93       	st	X, r25
     d2a:	8e 93       	st	-X, r24
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
	
	while (j<25){
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
	if (j % 2 == 0){ser_write(".");}
     d3a:	c7 e1       	ldi	r28, 0x17	; 23
     d3c:	d6 e0       	ldi	r29, 0x06	; 6
	
	PORTB |= _BV(PORTB3);
	
	printf("Zonnescherm % 6.2f cm \n", getDistance());
	
	while (j<25){
     d3e:	22 c0       	rjmp	.+68     	; 0xd84 <uitrollen+0xaa>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
     d40:	2c 9a       	sbi	0x05, 4	; 5
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	9d e0       	ldi	r25, 0x0D	; 13
     d46:	a3 e0       	ldi	r26, 0x03	; 3
     d48:	81 50       	subi	r24, 0x01	; 1
     d4a:	90 40       	sbci	r25, 0x00	; 0
     d4c:	a0 40       	sbci	r26, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <uitrollen+0x6e>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <uitrollen+0x78>
     d52:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
     d54:	2c 98       	cbi	0x05, 4	; 5
     d56:	8f e3       	ldi	r24, 0x3F	; 63
     d58:	9d e0       	ldi	r25, 0x0D	; 13
     d5a:	a3 e0       	ldi	r26, 0x03	; 3
     d5c:	81 50       	subi	r24, 0x01	; 1
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	a0 40       	sbci	r26, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <uitrollen+0x82>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <uitrollen+0x8c>
     d66:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
     d68:	80 91 ae 06 	lds	r24, 0x06AE
     d6c:	90 91 af 06 	lds	r25, 0x06AF
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	90 93 af 06 	sts	0x06AF, r25
     d76:	80 93 ae 06 	sts	0x06AE, r24
	if (j % 2 == 0){ser_write(".");}
     d7a:	80 fd       	sbrc	r24, 0
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <uitrollen+0xaa>
     d7e:	ce 01       	movw	r24, r28
     d80:	0e 94 05 06 	call	0xc0a	; 0xc0a <ser_write>
	
	PORTB |= _BV(PORTB3);
	
	printf("Zonnescherm % 6.2f cm \n", getDistance());
	
	while (j<25){
     d84:	80 91 ae 06 	lds	r24, 0x06AE
     d88:	90 91 af 06 	lds	r25, 0x06AF
     d8c:	89 31       	cpi	r24, 0x19	; 25
     d8e:	91 05       	cpc	r25, r1
     d90:	bc f2       	brlt	.-82     	; 0xd40 <uitrollen+0x66>
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
	if (j % 2 == 0){ser_write(".");}
}
j = 0;
     d92:	10 92 af 06 	sts	0x06AF, r1
     d96:	10 92 ae 06 	sts	0x06AE, r1
ser_writeln("\n\r201 Zonnescherm is uitgerold\n");
     d9a:	89 e1       	ldi	r24, 0x19	; 25
     d9c:	96 e0       	ldi	r25, 0x06	; 6
     d9e:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	9d e0       	ldi	r25, 0x0D	; 13
     da6:	a3 e0       	ldi	r26, 0x03	; 3
     da8:	81 50       	subi	r24, 0x01	; 1
     daa:	90 40       	sbci	r25, 0x00	; 0
     dac:	a0 40       	sbci	r26, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <uitrollen+0xce>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <uitrollen+0xd8>
     db2:	00 00       	nop
_delay_ms(DELAY_MS);
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <oprollen>:

void oprollen(){
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
	IN = (IN + 1);
     dbe:	80 91 b0 06 	lds	r24, 0x06B0
     dc2:	90 91 b1 06 	lds	r25, 0x06B1
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	90 93 b1 06 	sts	0x06B1, r25
     dcc:	80 93 b0 06 	sts	0x06B0, r24
	OUT = (OUT + 1);
     dd0:	80 91 66 06 	lds	r24, 0x0666
     dd4:	90 91 67 06 	lds	r25, 0x0667
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	90 93 67 06 	sts	0x0667, r25
     dde:	80 93 66 06 	sts	0x0666, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
     de2:	8a ef       	ldi	r24, 0xFA	; 250
     de4:	95 e0       	ldi	r25, 0x05	; 5
     de6:	0e 94 05 06 	call	0xc0a	; 0xc0a <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
     dea:	2b 98       	cbi	0x05, 3	; 5
	//PORTD = 0x00; //													DELETE AFTER
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
     dec:	2d 9a       	sbi	0x05, 5	; 5
	
	printf("Zonnescherm % 6.2f cm \n", getDistance());
     dee:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <oprollen+0x3a>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <oprollen+0x3c>
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	35 e0       	ldi	r19, 0x05	; 5
     dfa:	ad b7       	in	r26, 0x3d	; 61
     dfc:	be b7       	in	r27, 0x3e	; 62
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	11 97       	sbiw	r26, 0x01	; 1
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	9c 93       	st	X, r25
     e0a:	8e 93       	st	-X, r24
     e0c:	13 97       	sbiw	r26, 0x03	; 3
     e0e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <printf>
	
	while (j<25){
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
     e1a:	c7 e1       	ldi	r28, 0x17	; 23
     e1c:	d6 e0       	ldi	r29, 0x06	; 6
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	printf("Zonnescherm % 6.2f cm \n", getDistance());
	
	while (j<25){
     e1e:	22 c0       	rjmp	.+68     	; 0xe64 <oprollen+0xaa>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
     e20:	2c 9a       	sbi	0x05, 4	; 5
     e22:	8f e3       	ldi	r24, 0x3F	; 63
     e24:	9d e0       	ldi	r25, 0x0D	; 13
     e26:	a3 e0       	ldi	r26, 0x03	; 3
     e28:	81 50       	subi	r24, 0x01	; 1
     e2a:	90 40       	sbci	r25, 0x00	; 0
     e2c:	a0 40       	sbci	r26, 0x00	; 0
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <oprollen+0x6e>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <oprollen+0x78>
     e32:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
     e34:	2c 98       	cbi	0x05, 4	; 5
     e36:	8f e3       	ldi	r24, 0x3F	; 63
     e38:	9d e0       	ldi	r25, 0x0D	; 13
     e3a:	a3 e0       	ldi	r26, 0x03	; 3
     e3c:	81 50       	subi	r24, 0x01	; 1
     e3e:	90 40       	sbci	r25, 0x00	; 0
     e40:	a0 40       	sbci	r26, 0x00	; 0
     e42:	e1 f7       	brne	.-8      	; 0xe3c <oprollen+0x82>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <oprollen+0x8c>
     e46:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
     e48:	80 91 ae 06 	lds	r24, 0x06AE
     e4c:	90 91 af 06 	lds	r25, 0x06AF
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	90 93 af 06 	sts	0x06AF, r25
     e56:	80 93 ae 06 	sts	0x06AE, r24
		if (j % 2 == 0){ser_write(".");}
     e5a:	80 fd       	sbrc	r24, 0
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <oprollen+0xaa>
     e5e:	ce 01       	movw	r24, r28
     e60:	0e 94 05 06 	call	0xc0a	; 0xc0a <ser_write>
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	printf("Zonnescherm % 6.2f cm \n", getDistance());
	
	while (j<25){
     e64:	80 91 ae 06 	lds	r24, 0x06AE
     e68:	90 91 af 06 	lds	r25, 0x06AF
     e6c:	89 31       	cpi	r24, 0x19	; 25
     e6e:	91 05       	cpc	r25, r1
     e70:	bc f2       	brlt	.-82     	; 0xe20 <oprollen+0x66>
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
		}			
		j = 0;
     e72:	10 92 af 06 	sts	0x06AF, r1
     e76:	10 92 ae 06 	sts	0x06AE, r1
		ser_writeln("\n\r201 Zonnescherm is opgerold\n");
     e7a:	89 e3       	ldi	r24, 0x39	; 57
     e7c:	96 e0       	ldi	r25, 0x06	; 6
     e7e:	0e 94 14 06 	call	0xc28	; 0xc28 <ser_writeln>
     e82:	8f e3       	ldi	r24, 0x3F	; 63
     e84:	9d e0       	ldi	r25, 0x0D	; 13
     e86:	a3 e0       	ldi	r26, 0x03	; 3
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	a0 40       	sbci	r26, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <oprollen+0xce>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <oprollen+0xd8>
     e92:	00 00       	nop
		_delay_ms(DELAY_MS);
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <__subsf3>:
     e9a:	50 58       	subi	r21, 0x80	; 128

00000e9c <__addsf3>:
     e9c:	bb 27       	eor	r27, r27
     e9e:	aa 27       	eor	r26, r26
     ea0:	0e d0       	rcall	.+28     	; 0xebe <__addsf3x>
     ea2:	e0 c0       	rjmp	.+448    	; 0x1064 <__fp_round>
     ea4:	d1 d0       	rcall	.+418    	; 0x1048 <__fp_pscA>
     ea6:	30 f0       	brcs	.+12     	; 0xeb4 <__addsf3+0x18>
     ea8:	d6 d0       	rcall	.+428    	; 0x1056 <__fp_pscB>
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__addsf3+0x18>
     eac:	31 f4       	brne	.+12     	; 0xeba <__addsf3+0x1e>
     eae:	9f 3f       	cpi	r25, 0xFF	; 255
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <__addsf3+0x1a>
     eb2:	1e f4       	brtc	.+6      	; 0xeba <__addsf3+0x1e>
     eb4:	c6 c0       	rjmp	.+396    	; 0x1042 <__fp_nan>
     eb6:	0e f4       	brtc	.+2      	; 0xeba <__addsf3+0x1e>
     eb8:	e0 95       	com	r30
     eba:	e7 fb       	bst	r30, 7
     ebc:	bc c0       	rjmp	.+376    	; 0x1036 <__fp_inf>

00000ebe <__addsf3x>:
     ebe:	e9 2f       	mov	r30, r25
     ec0:	e2 d0       	rcall	.+452    	; 0x1086 <__fp_split3>
     ec2:	80 f3       	brcs	.-32     	; 0xea4 <__addsf3+0x8>
     ec4:	ba 17       	cp	r27, r26
     ec6:	62 07       	cpc	r22, r18
     ec8:	73 07       	cpc	r23, r19
     eca:	84 07       	cpc	r24, r20
     ecc:	95 07       	cpc	r25, r21
     ece:	18 f0       	brcs	.+6      	; 0xed6 <__addsf3x+0x18>
     ed0:	71 f4       	brne	.+28     	; 0xeee <__addsf3x+0x30>
     ed2:	9e f5       	brtc	.+102    	; 0xf3a <__addsf3x+0x7c>
     ed4:	fa c0       	rjmp	.+500    	; 0x10ca <__fp_zero>
     ed6:	0e f4       	brtc	.+2      	; 0xeda <__addsf3x+0x1c>
     ed8:	e0 95       	com	r30
     eda:	0b 2e       	mov	r0, r27
     edc:	ba 2f       	mov	r27, r26
     ede:	a0 2d       	mov	r26, r0
     ee0:	0b 01       	movw	r0, r22
     ee2:	b9 01       	movw	r22, r18
     ee4:	90 01       	movw	r18, r0
     ee6:	0c 01       	movw	r0, r24
     ee8:	ca 01       	movw	r24, r20
     eea:	a0 01       	movw	r20, r0
     eec:	11 24       	eor	r1, r1
     eee:	ff 27       	eor	r31, r31
     ef0:	59 1b       	sub	r21, r25
     ef2:	99 f0       	breq	.+38     	; 0xf1a <__addsf3x+0x5c>
     ef4:	59 3f       	cpi	r21, 0xF9	; 249
     ef6:	50 f4       	brcc	.+20     	; 0xf0c <__addsf3x+0x4e>
     ef8:	50 3e       	cpi	r21, 0xE0	; 224
     efa:	68 f1       	brcs	.+90     	; 0xf56 <__addsf3x+0x98>
     efc:	1a 16       	cp	r1, r26
     efe:	f0 40       	sbci	r31, 0x00	; 0
     f00:	a2 2f       	mov	r26, r18
     f02:	23 2f       	mov	r18, r19
     f04:	34 2f       	mov	r19, r20
     f06:	44 27       	eor	r20, r20
     f08:	58 5f       	subi	r21, 0xF8	; 248
     f0a:	f3 cf       	rjmp	.-26     	; 0xef2 <__addsf3x+0x34>
     f0c:	46 95       	lsr	r20
     f0e:	37 95       	ror	r19
     f10:	27 95       	ror	r18
     f12:	a7 95       	ror	r26
     f14:	f0 40       	sbci	r31, 0x00	; 0
     f16:	53 95       	inc	r21
     f18:	c9 f7       	brne	.-14     	; 0xf0c <__addsf3x+0x4e>
     f1a:	7e f4       	brtc	.+30     	; 0xf3a <__addsf3x+0x7c>
     f1c:	1f 16       	cp	r1, r31
     f1e:	ba 0b       	sbc	r27, r26
     f20:	62 0b       	sbc	r22, r18
     f22:	73 0b       	sbc	r23, r19
     f24:	84 0b       	sbc	r24, r20
     f26:	ba f0       	brmi	.+46     	; 0xf56 <__addsf3x+0x98>
     f28:	91 50       	subi	r25, 0x01	; 1
     f2a:	a1 f0       	breq	.+40     	; 0xf54 <__addsf3x+0x96>
     f2c:	ff 0f       	add	r31, r31
     f2e:	bb 1f       	adc	r27, r27
     f30:	66 1f       	adc	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	88 1f       	adc	r24, r24
     f36:	c2 f7       	brpl	.-16     	; 0xf28 <__addsf3x+0x6a>
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <__addsf3x+0x98>
     f3a:	ba 0f       	add	r27, r26
     f3c:	62 1f       	adc	r22, r18
     f3e:	73 1f       	adc	r23, r19
     f40:	84 1f       	adc	r24, r20
     f42:	48 f4       	brcc	.+18     	; 0xf56 <__addsf3x+0x98>
     f44:	87 95       	ror	r24
     f46:	77 95       	ror	r23
     f48:	67 95       	ror	r22
     f4a:	b7 95       	ror	r27
     f4c:	f7 95       	ror	r31
     f4e:	9e 3f       	cpi	r25, 0xFE	; 254
     f50:	08 f0       	brcs	.+2      	; 0xf54 <__addsf3x+0x96>
     f52:	b3 cf       	rjmp	.-154    	; 0xeba <__addsf3+0x1e>
     f54:	93 95       	inc	r25
     f56:	88 0f       	add	r24, r24
     f58:	08 f0       	brcs	.+2      	; 0xf5c <__addsf3x+0x9e>
     f5a:	99 27       	eor	r25, r25
     f5c:	ee 0f       	add	r30, r30
     f5e:	97 95       	ror	r25
     f60:	87 95       	ror	r24
     f62:	08 95       	ret

00000f64 <__fixunssfsi>:
     f64:	98 d0       	rcall	.+304    	; 0x1096 <__fp_splitA>
     f66:	88 f0       	brcs	.+34     	; 0xf8a <__fixunssfsi+0x26>
     f68:	9f 57       	subi	r25, 0x7F	; 127
     f6a:	90 f0       	brcs	.+36     	; 0xf90 <__fixunssfsi+0x2c>
     f6c:	b9 2f       	mov	r27, r25
     f6e:	99 27       	eor	r25, r25
     f70:	b7 51       	subi	r27, 0x17	; 23
     f72:	a0 f0       	brcs	.+40     	; 0xf9c <__fixunssfsi+0x38>
     f74:	d1 f0       	breq	.+52     	; 0xfaa <__fixunssfsi+0x46>
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	1a f0       	brmi	.+6      	; 0xf86 <__fixunssfsi+0x22>
     f80:	ba 95       	dec	r27
     f82:	c9 f7       	brne	.-14     	; 0xf76 <__fixunssfsi+0x12>
     f84:	12 c0       	rjmp	.+36     	; 0xfaa <__fixunssfsi+0x46>
     f86:	b1 30       	cpi	r27, 0x01	; 1
     f88:	81 f0       	breq	.+32     	; 0xfaa <__fixunssfsi+0x46>
     f8a:	9f d0       	rcall	.+318    	; 0x10ca <__fp_zero>
     f8c:	b1 e0       	ldi	r27, 0x01	; 1
     f8e:	08 95       	ret
     f90:	9c c0       	rjmp	.+312    	; 0x10ca <__fp_zero>
     f92:	67 2f       	mov	r22, r23
     f94:	78 2f       	mov	r23, r24
     f96:	88 27       	eor	r24, r24
     f98:	b8 5f       	subi	r27, 0xF8	; 248
     f9a:	39 f0       	breq	.+14     	; 0xfaa <__fixunssfsi+0x46>
     f9c:	b9 3f       	cpi	r27, 0xF9	; 249
     f9e:	cc f3       	brlt	.-14     	; 0xf92 <__fixunssfsi+0x2e>
     fa0:	86 95       	lsr	r24
     fa2:	77 95       	ror	r23
     fa4:	67 95       	ror	r22
     fa6:	b3 95       	inc	r27
     fa8:	d9 f7       	brne	.-10     	; 0xfa0 <__fixunssfsi+0x3c>
     faa:	3e f4       	brtc	.+14     	; 0xfba <__fixunssfsi+0x56>
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	08 95       	ret

00000fbc <__floatunsisf>:
     fbc:	e8 94       	clt
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <__floatsisf+0x12>

00000fc0 <__floatsisf>:
     fc0:	97 fb       	bst	r25, 7
     fc2:	3e f4       	brtc	.+14     	; 0xfd2 <__floatsisf+0x12>
     fc4:	90 95       	com	r25
     fc6:	80 95       	com	r24
     fc8:	70 95       	com	r23
     fca:	61 95       	neg	r22
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	99 23       	and	r25, r25
     fd4:	a9 f0       	breq	.+42     	; 0x1000 <__floatsisf+0x40>
     fd6:	f9 2f       	mov	r31, r25
     fd8:	96 e9       	ldi	r25, 0x96	; 150
     fda:	bb 27       	eor	r27, r27
     fdc:	93 95       	inc	r25
     fde:	f6 95       	lsr	r31
     fe0:	87 95       	ror	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b7 95       	ror	r27
     fe8:	f1 11       	cpse	r31, r1
     fea:	f8 cf       	rjmp	.-16     	; 0xfdc <__floatsisf+0x1c>
     fec:	fa f4       	brpl	.+62     	; 0x102c <__floatsisf+0x6c>
     fee:	bb 0f       	add	r27, r27
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__floatsisf+0x36>
     ff2:	60 ff       	sbrs	r22, 0
     ff4:	1b c0       	rjmp	.+54     	; 0x102c <__floatsisf+0x6c>
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	16 c0       	rjmp	.+44     	; 0x102c <__floatsisf+0x6c>
    1000:	88 23       	and	r24, r24
    1002:	11 f0       	breq	.+4      	; 0x1008 <__floatsisf+0x48>
    1004:	96 e9       	ldi	r25, 0x96	; 150
    1006:	11 c0       	rjmp	.+34     	; 0x102a <__floatsisf+0x6a>
    1008:	77 23       	and	r23, r23
    100a:	21 f0       	breq	.+8      	; 0x1014 <__floatsisf+0x54>
    100c:	9e e8       	ldi	r25, 0x8E	; 142
    100e:	87 2f       	mov	r24, r23
    1010:	76 2f       	mov	r23, r22
    1012:	05 c0       	rjmp	.+10     	; 0x101e <__floatsisf+0x5e>
    1014:	66 23       	and	r22, r22
    1016:	71 f0       	breq	.+28     	; 0x1034 <__floatsisf+0x74>
    1018:	96 e8       	ldi	r25, 0x86	; 134
    101a:	86 2f       	mov	r24, r22
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	2a f0       	brmi	.+10     	; 0x102c <__floatsisf+0x6c>
    1022:	9a 95       	dec	r25
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	da f7       	brpl	.-10     	; 0x1022 <__floatsisf+0x62>
    102c:	88 0f       	add	r24, r24
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	97 f9       	bld	r25, 7
    1034:	08 95       	ret

00001036 <__fp_inf>:
    1036:	97 f9       	bld	r25, 7
    1038:	9f 67       	ori	r25, 0x7F	; 127
    103a:	80 e8       	ldi	r24, 0x80	; 128
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	08 95       	ret

00001042 <__fp_nan>:
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	80 ec       	ldi	r24, 0xC0	; 192
    1046:	08 95       	ret

00001048 <__fp_pscA>:
    1048:	00 24       	eor	r0, r0
    104a:	0a 94       	dec	r0
    104c:	16 16       	cp	r1, r22
    104e:	17 06       	cpc	r1, r23
    1050:	18 06       	cpc	r1, r24
    1052:	09 06       	cpc	r0, r25
    1054:	08 95       	ret

00001056 <__fp_pscB>:
    1056:	00 24       	eor	r0, r0
    1058:	0a 94       	dec	r0
    105a:	12 16       	cp	r1, r18
    105c:	13 06       	cpc	r1, r19
    105e:	14 06       	cpc	r1, r20
    1060:	05 06       	cpc	r0, r21
    1062:	08 95       	ret

00001064 <__fp_round>:
    1064:	09 2e       	mov	r0, r25
    1066:	03 94       	inc	r0
    1068:	00 0c       	add	r0, r0
    106a:	11 f4       	brne	.+4      	; 0x1070 <__fp_round+0xc>
    106c:	88 23       	and	r24, r24
    106e:	52 f0       	brmi	.+20     	; 0x1084 <__fp_round+0x20>
    1070:	bb 0f       	add	r27, r27
    1072:	40 f4       	brcc	.+16     	; 0x1084 <__fp_round+0x20>
    1074:	bf 2b       	or	r27, r31
    1076:	11 f4       	brne	.+4      	; 0x107c <__fp_round+0x18>
    1078:	60 ff       	sbrs	r22, 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <__fp_round+0x20>
    107c:	6f 5f       	subi	r22, 0xFF	; 255
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	8f 4f       	sbci	r24, 0xFF	; 255
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	08 95       	ret

00001086 <__fp_split3>:
    1086:	57 fd       	sbrc	r21, 7
    1088:	90 58       	subi	r25, 0x80	; 128
    108a:	44 0f       	add	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	59 f0       	breq	.+22     	; 0x10a6 <__fp_splitA+0x10>
    1090:	5f 3f       	cpi	r21, 0xFF	; 255
    1092:	71 f0       	breq	.+28     	; 0x10b0 <__fp_splitA+0x1a>
    1094:	47 95       	ror	r20

00001096 <__fp_splitA>:
    1096:	88 0f       	add	r24, r24
    1098:	97 fb       	bst	r25, 7
    109a:	99 1f       	adc	r25, r25
    109c:	61 f0       	breq	.+24     	; 0x10b6 <__fp_splitA+0x20>
    109e:	9f 3f       	cpi	r25, 0xFF	; 255
    10a0:	79 f0       	breq	.+30     	; 0x10c0 <__fp_splitA+0x2a>
    10a2:	87 95       	ror	r24
    10a4:	08 95       	ret
    10a6:	12 16       	cp	r1, r18
    10a8:	13 06       	cpc	r1, r19
    10aa:	14 06       	cpc	r1, r20
    10ac:	55 1f       	adc	r21, r21
    10ae:	f2 cf       	rjmp	.-28     	; 0x1094 <__fp_split3+0xe>
    10b0:	46 95       	lsr	r20
    10b2:	f1 df       	rcall	.-30     	; 0x1096 <__fp_splitA>
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <__fp_splitA+0x30>
    10b6:	16 16       	cp	r1, r22
    10b8:	17 06       	cpc	r1, r23
    10ba:	18 06       	cpc	r1, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	f1 cf       	rjmp	.-30     	; 0x10a2 <__fp_splitA+0xc>
    10c0:	86 95       	lsr	r24
    10c2:	71 05       	cpc	r23, r1
    10c4:	61 05       	cpc	r22, r1
    10c6:	08 94       	sec
    10c8:	08 95       	ret

000010ca <__fp_zero>:
    10ca:	e8 94       	clt

000010cc <__fp_szero>:
    10cc:	bb 27       	eor	r27, r27
    10ce:	66 27       	eor	r22, r22
    10d0:	77 27       	eor	r23, r23
    10d2:	cb 01       	movw	r24, r22
    10d4:	97 f9       	bld	r25, 7
    10d6:	08 95       	ret

000010d8 <__mulsf3>:
    10d8:	0b d0       	rcall	.+22     	; 0x10f0 <__mulsf3x>
    10da:	c4 cf       	rjmp	.-120    	; 0x1064 <__fp_round>
    10dc:	b5 df       	rcall	.-150    	; 0x1048 <__fp_pscA>
    10de:	28 f0       	brcs	.+10     	; 0x10ea <__mulsf3+0x12>
    10e0:	ba df       	rcall	.-140    	; 0x1056 <__fp_pscB>
    10e2:	18 f0       	brcs	.+6      	; 0x10ea <__mulsf3+0x12>
    10e4:	95 23       	and	r25, r21
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__mulsf3+0x12>
    10e8:	a6 cf       	rjmp	.-180    	; 0x1036 <__fp_inf>
    10ea:	ab cf       	rjmp	.-170    	; 0x1042 <__fp_nan>
    10ec:	11 24       	eor	r1, r1
    10ee:	ee cf       	rjmp	.-36     	; 0x10cc <__fp_szero>

000010f0 <__mulsf3x>:
    10f0:	ca df       	rcall	.-108    	; 0x1086 <__fp_split3>
    10f2:	a0 f3       	brcs	.-24     	; 0x10dc <__mulsf3+0x4>

000010f4 <__mulsf3_pse>:
    10f4:	95 9f       	mul	r25, r21
    10f6:	d1 f3       	breq	.-12     	; 0x10ec <__mulsf3+0x14>
    10f8:	95 0f       	add	r25, r21
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	55 1f       	adc	r21, r21
    10fe:	62 9f       	mul	r22, r18
    1100:	f0 01       	movw	r30, r0
    1102:	72 9f       	mul	r23, r18
    1104:	bb 27       	eor	r27, r27
    1106:	f0 0d       	add	r31, r0
    1108:	b1 1d       	adc	r27, r1
    110a:	63 9f       	mul	r22, r19
    110c:	aa 27       	eor	r26, r26
    110e:	f0 0d       	add	r31, r0
    1110:	b1 1d       	adc	r27, r1
    1112:	aa 1f       	adc	r26, r26
    1114:	64 9f       	mul	r22, r20
    1116:	66 27       	eor	r22, r22
    1118:	b0 0d       	add	r27, r0
    111a:	a1 1d       	adc	r26, r1
    111c:	66 1f       	adc	r22, r22
    111e:	82 9f       	mul	r24, r18
    1120:	22 27       	eor	r18, r18
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	62 1f       	adc	r22, r18
    1128:	73 9f       	mul	r23, r19
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	62 1f       	adc	r22, r18
    1130:	83 9f       	mul	r24, r19
    1132:	a0 0d       	add	r26, r0
    1134:	61 1d       	adc	r22, r1
    1136:	22 1f       	adc	r18, r18
    1138:	74 9f       	mul	r23, r20
    113a:	33 27       	eor	r19, r19
    113c:	a0 0d       	add	r26, r0
    113e:	61 1d       	adc	r22, r1
    1140:	23 1f       	adc	r18, r19
    1142:	84 9f       	mul	r24, r20
    1144:	60 0d       	add	r22, r0
    1146:	21 1d       	adc	r18, r1
    1148:	82 2f       	mov	r24, r18
    114a:	76 2f       	mov	r23, r22
    114c:	6a 2f       	mov	r22, r26
    114e:	11 24       	eor	r1, r1
    1150:	9f 57       	subi	r25, 0x7F	; 127
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	8a f0       	brmi	.+34     	; 0x1178 <__mulsf3_pse+0x84>
    1156:	e1 f0       	breq	.+56     	; 0x1190 <__mulsf3_pse+0x9c>
    1158:	88 23       	and	r24, r24
    115a:	4a f0       	brmi	.+18     	; 0x116e <__mulsf3_pse+0x7a>
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	bb 1f       	adc	r27, r27
    1162:	66 1f       	adc	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	a9 f7       	brne	.-22     	; 0x1158 <__mulsf3_pse+0x64>
    116e:	9e 3f       	cpi	r25, 0xFE	; 254
    1170:	51 05       	cpc	r21, r1
    1172:	70 f0       	brcs	.+28     	; 0x1190 <__mulsf3_pse+0x9c>
    1174:	60 cf       	rjmp	.-320    	; 0x1036 <__fp_inf>
    1176:	aa cf       	rjmp	.-172    	; 0x10cc <__fp_szero>
    1178:	5f 3f       	cpi	r21, 0xFF	; 255
    117a:	ec f3       	brlt	.-6      	; 0x1176 <__mulsf3_pse+0x82>
    117c:	98 3e       	cpi	r25, 0xE8	; 232
    117e:	dc f3       	brlt	.-10     	; 0x1176 <__mulsf3_pse+0x82>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	e7 95       	ror	r30
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	c1 f7       	brne	.-16     	; 0x1180 <__mulsf3_pse+0x8c>
    1190:	fe 2b       	or	r31, r30
    1192:	88 0f       	add	r24, r24
    1194:	91 1d       	adc	r25, r1
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	97 f9       	bld	r25, 7
    119c:	08 95       	ret

0000119e <vfprintf>:
    119e:	a5 e1       	ldi	r26, 0x15	; 21
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 ed       	ldi	r30, 0xD5	; 213
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__prologue_saves__>
    11aa:	4c 01       	movw	r8, r24
    11ac:	7f 87       	std	Y+15, r23	; 0x0f
    11ae:	6e 87       	std	Y+14, r22	; 0x0e
    11b0:	fc 01       	movw	r30, r24
    11b2:	17 82       	std	Z+7, r1	; 0x07
    11b4:	16 82       	std	Z+6, r1	; 0x06
    11b6:	83 81       	ldd	r24, Z+3	; 0x03
    11b8:	81 fd       	sbrc	r24, 1
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <vfprintf+0x26>
    11bc:	76 c3       	rjmp	.+1772   	; 0x18aa <vfprintf+0x70c>
    11be:	4c 85       	ldd	r20, Y+12	; 0x0c
    11c0:	5d 85       	ldd	r21, Y+13	; 0x0d
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <vfprintf+0x2e>
    11c4:	1e 01       	movw	r2, r28
    11c6:	08 94       	sec
    11c8:	21 1c       	adc	r2, r1
    11ca:	31 1c       	adc	r3, r1
    11cc:	f4 01       	movw	r30, r8
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    11d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    11d4:	93 fd       	sbrc	r25, 3
    11d6:	85 91       	lpm	r24, Z+
    11d8:	93 ff       	sbrs	r25, 3
    11da:	81 91       	ld	r24, Z+
    11dc:	ff 87       	std	Y+15, r31	; 0x0f
    11de:	ee 87       	std	Y+14, r30	; 0x0e
    11e0:	88 23       	and	r24, r24
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <vfprintf+0x48>
    11e4:	5e c3       	rjmp	.+1724   	; 0x18a2 <vfprintf+0x704>
    11e6:	85 32       	cpi	r24, 0x25	; 37
    11e8:	41 f4       	brne	.+16     	; 0x11fa <vfprintf+0x5c>
    11ea:	93 fd       	sbrc	r25, 3
    11ec:	85 91       	lpm	r24, Z+
    11ee:	93 ff       	sbrs	r25, 3
    11f0:	81 91       	ld	r24, Z+
    11f2:	ff 87       	std	Y+15, r31	; 0x0f
    11f4:	ee 87       	std	Y+14, r30	; 0x0e
    11f6:	85 32       	cpi	r24, 0x25	; 37
    11f8:	59 f4       	brne	.+22     	; 0x1210 <vfprintf+0x72>
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	b4 01       	movw	r22, r8
    11fe:	4c 8b       	std	Y+20, r20	; 0x14
    1200:	5d 8b       	std	Y+21, r21	; 0x15
    1202:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1206:	4c 89       	ldd	r20, Y+20	; 0x14
    1208:	5d 89       	ldd	r21, Y+21	; 0x15
    120a:	5d 87       	std	Y+13, r21	; 0x0d
    120c:	4c 87       	std	Y+12, r20	; 0x0c
    120e:	d7 cf       	rjmp	.-82     	; 0x11be <vfprintf+0x20>
    1210:	ff 24       	eor	r15, r15
    1212:	dd 24       	eor	r13, r13
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	10 32       	cpi	r17, 0x20	; 32
    1218:	b0 f4       	brcc	.+44     	; 0x1246 <vfprintf+0xa8>
    121a:	8b 32       	cpi	r24, 0x2B	; 43
    121c:	69 f0       	breq	.+26     	; 0x1238 <vfprintf+0x9a>
    121e:	8c 32       	cpi	r24, 0x2C	; 44
    1220:	28 f4       	brcc	.+10     	; 0x122c <vfprintf+0x8e>
    1222:	80 32       	cpi	r24, 0x20	; 32
    1224:	51 f0       	breq	.+20     	; 0x123a <vfprintf+0x9c>
    1226:	83 32       	cpi	r24, 0x23	; 35
    1228:	71 f4       	brne	.+28     	; 0x1246 <vfprintf+0xa8>
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <vfprintf+0xa4>
    122c:	8d 32       	cpi	r24, 0x2D	; 45
    122e:	39 f0       	breq	.+14     	; 0x123e <vfprintf+0xa0>
    1230:	80 33       	cpi	r24, 0x30	; 48
    1232:	49 f4       	brne	.+18     	; 0x1246 <vfprintf+0xa8>
    1234:	11 60       	ori	r17, 0x01	; 1
    1236:	2c c0       	rjmp	.+88     	; 0x1290 <vfprintf+0xf2>
    1238:	12 60       	ori	r17, 0x02	; 2
    123a:	14 60       	ori	r17, 0x04	; 4
    123c:	29 c0       	rjmp	.+82     	; 0x1290 <vfprintf+0xf2>
    123e:	18 60       	ori	r17, 0x08	; 8
    1240:	27 c0       	rjmp	.+78     	; 0x1290 <vfprintf+0xf2>
    1242:	10 61       	ori	r17, 0x10	; 16
    1244:	25 c0       	rjmp	.+74     	; 0x1290 <vfprintf+0xf2>
    1246:	17 fd       	sbrc	r17, 7
    1248:	2e c0       	rjmp	.+92     	; 0x12a6 <vfprintf+0x108>
    124a:	28 2f       	mov	r18, r24
    124c:	20 53       	subi	r18, 0x30	; 48
    124e:	2a 30       	cpi	r18, 0x0A	; 10
    1250:	98 f4       	brcc	.+38     	; 0x1278 <vfprintf+0xda>
    1252:	16 ff       	sbrs	r17, 6
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <vfprintf+0xc8>
    1256:	8f 2d       	mov	r24, r15
    1258:	88 0f       	add	r24, r24
    125a:	f8 2e       	mov	r15, r24
    125c:	ff 0c       	add	r15, r15
    125e:	ff 0c       	add	r15, r15
    1260:	f8 0e       	add	r15, r24
    1262:	f2 0e       	add	r15, r18
    1264:	15 c0       	rjmp	.+42     	; 0x1290 <vfprintf+0xf2>
    1266:	8d 2d       	mov	r24, r13
    1268:	88 0f       	add	r24, r24
    126a:	d8 2e       	mov	r13, r24
    126c:	dd 0c       	add	r13, r13
    126e:	dd 0c       	add	r13, r13
    1270:	d8 0e       	add	r13, r24
    1272:	d2 0e       	add	r13, r18
    1274:	10 62       	ori	r17, 0x20	; 32
    1276:	0c c0       	rjmp	.+24     	; 0x1290 <vfprintf+0xf2>
    1278:	8e 32       	cpi	r24, 0x2E	; 46
    127a:	21 f4       	brne	.+8      	; 0x1284 <vfprintf+0xe6>
    127c:	16 fd       	sbrc	r17, 6
    127e:	11 c3       	rjmp	.+1570   	; 0x18a2 <vfprintf+0x704>
    1280:	10 64       	ori	r17, 0x40	; 64
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <vfprintf+0xf2>
    1284:	8c 36       	cpi	r24, 0x6C	; 108
    1286:	11 f4       	brne	.+4      	; 0x128c <vfprintf+0xee>
    1288:	10 68       	ori	r17, 0x80	; 128
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <vfprintf+0xf2>
    128c:	88 36       	cpi	r24, 0x68	; 104
    128e:	59 f4       	brne	.+22     	; 0x12a6 <vfprintf+0x108>
    1290:	ee 85       	ldd	r30, Y+14	; 0x0e
    1292:	ff 85       	ldd	r31, Y+15	; 0x0f
    1294:	93 fd       	sbrc	r25, 3
    1296:	85 91       	lpm	r24, Z+
    1298:	93 ff       	sbrs	r25, 3
    129a:	81 91       	ld	r24, Z+
    129c:	ff 87       	std	Y+15, r31	; 0x0f
    129e:	ee 87       	std	Y+14, r30	; 0x0e
    12a0:	88 23       	and	r24, r24
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <vfprintf+0x108>
    12a4:	b8 cf       	rjmp	.-144    	; 0x1216 <vfprintf+0x78>
    12a6:	98 2f       	mov	r25, r24
    12a8:	95 54       	subi	r25, 0x45	; 69
    12aa:	93 30       	cpi	r25, 0x03	; 3
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <vfprintf+0x116>
    12ae:	10 61       	ori	r17, 0x10	; 16
    12b0:	80 5e       	subi	r24, 0xE0	; 224
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <vfprintf+0x122>
    12b4:	98 2f       	mov	r25, r24
    12b6:	95 56       	subi	r25, 0x65	; 101
    12b8:	93 30       	cpi	r25, 0x03	; 3
    12ba:	08 f0       	brcs	.+2      	; 0x12be <vfprintf+0x120>
    12bc:	a2 c1       	rjmp	.+836    	; 0x1602 <vfprintf+0x464>
    12be:	1f 7e       	andi	r17, 0xEF	; 239
    12c0:	16 fd       	sbrc	r17, 6
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0x12a>
    12c4:	e6 e0       	ldi	r30, 0x06	; 6
    12c6:	fe 2e       	mov	r15, r30
    12c8:	1f 73       	andi	r17, 0x3F	; 63
    12ca:	85 36       	cpi	r24, 0x65	; 101
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <vfprintf+0x134>
    12ce:	10 64       	ori	r17, 0x40	; 64
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <vfprintf+0x140>
    12d2:	86 36       	cpi	r24, 0x66	; 102
    12d4:	11 f4       	brne	.+4      	; 0x12da <vfprintf+0x13c>
    12d6:	10 68       	ori	r17, 0x80	; 128
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x140>
    12da:	f1 10       	cpse	r15, r1
    12dc:	fa 94       	dec	r15
    12de:	17 ff       	sbrs	r17, 7
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <vfprintf+0x152>
    12e2:	fb e3       	ldi	r31, 0x3B	; 59
    12e4:	ff 15       	cp	r31, r15
    12e6:	48 f0       	brcs	.+18     	; 0x12fa <vfprintf+0x15c>
    12e8:	ef 2c       	mov	r14, r15
    12ea:	e3 94       	inc	r14
    12ec:	27 e0       	ldi	r18, 0x07	; 7
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <vfprintf+0x16c>
    12f0:	27 e0       	ldi	r18, 0x07	; 7
    12f2:	2f 15       	cp	r18, r15
    12f4:	30 f0       	brcs	.+12     	; 0x1302 <vfprintf+0x164>
    12f6:	2f 2d       	mov	r18, r15
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <vfprintf+0x16a>
    12fa:	27 e0       	ldi	r18, 0x07	; 7
    12fc:	7c e3       	ldi	r23, 0x3C	; 60
    12fe:	e7 2e       	mov	r14, r23
    1300:	04 c0       	rjmp	.+8      	; 0x130a <vfprintf+0x16c>
    1302:	27 e0       	ldi	r18, 0x07	; 7
    1304:	67 e0       	ldi	r22, 0x07	; 7
    1306:	f6 2e       	mov	r15, r22
    1308:	ee 24       	eor	r14, r14
    130a:	ca 01       	movw	r24, r20
    130c:	04 96       	adiw	r24, 0x04	; 4
    130e:	9d 87       	std	Y+13, r25	; 0x0d
    1310:	8c 87       	std	Y+12, r24	; 0x0c
    1312:	fa 01       	movw	r30, r20
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	a1 01       	movw	r20, r2
    131e:	0e 2d       	mov	r16, r14
    1320:	0e 94 be 0c 	call	0x197c	; 0x197c <__ftoa_engine>
    1324:	5c 01       	movw	r10, r24
    1326:	c9 80       	ldd	r12, Y+1	; 0x01
    1328:	2c 2d       	mov	r18, r12
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	39 8b       	std	Y+17, r19	; 0x11
    132e:	28 8b       	std	Y+16, r18	; 0x10
    1330:	c0 fe       	sbrs	r12, 0
    1332:	03 c0       	rjmp	.+6      	; 0x133a <vfprintf+0x19c>
    1334:	38 89       	ldd	r19, Y+16	; 0x10
    1336:	33 ff       	sbrs	r19, 3
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <vfprintf+0x1a8>
    133a:	11 fd       	sbrc	r17, 1
    133c:	06 c0       	rjmp	.+12     	; 0x134a <vfprintf+0x1ac>
    133e:	12 ff       	sbrs	r17, 2
    1340:	06 c0       	rjmp	.+12     	; 0x134e <vfprintf+0x1b0>
    1342:	00 e2       	ldi	r16, 0x20	; 32
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <vfprintf+0x1b2>
    1346:	0d e2       	ldi	r16, 0x2D	; 45
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x1b2>
    134a:	0b e2       	ldi	r16, 0x2B	; 43
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <vfprintf+0x1b2>
    134e:	00 e0       	ldi	r16, 0x00	; 0
    1350:	88 89       	ldd	r24, Y+16	; 0x10
    1352:	99 89       	ldd	r25, Y+17	; 0x11
    1354:	8c 70       	andi	r24, 0x0C	; 12
    1356:	90 70       	andi	r25, 0x00	; 0
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f4       	brne	.+2      	; 0x135e <vfprintf+0x1c0>
    135c:	3c c0       	rjmp	.+120    	; 0x13d6 <vfprintf+0x238>
    135e:	00 23       	and	r16, r16
    1360:	11 f0       	breq	.+4      	; 0x1366 <vfprintf+0x1c8>
    1362:	84 e0       	ldi	r24, 0x04	; 4
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <vfprintf+0x1ca>
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	8d 15       	cp	r24, r13
    136a:	58 f4       	brcc	.+22     	; 0x1382 <vfprintf+0x1e4>
    136c:	d8 1a       	sub	r13, r24
    136e:	13 fd       	sbrc	r17, 3
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <vfprintf+0x1e6>
    1372:	80 e2       	ldi	r24, 0x20	; 32
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	b4 01       	movw	r22, r8
    1378:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    137c:	da 94       	dec	r13
    137e:	c9 f7       	brne	.-14     	; 0x1372 <vfprintf+0x1d4>
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <vfprintf+0x1e6>
    1382:	dd 24       	eor	r13, r13
    1384:	00 23       	and	r16, r16
    1386:	29 f0       	breq	.+10     	; 0x1392 <vfprintf+0x1f4>
    1388:	80 2f       	mov	r24, r16
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	b4 01       	movw	r22, r8
    138e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1392:	88 89       	ldd	r24, Y+16	; 0x10
    1394:	83 fd       	sbrc	r24, 3
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <vfprintf+0x204>
    1398:	3c e6       	ldi	r19, 0x6C	; 108
    139a:	e3 2e       	mov	r14, r19
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	f3 2e       	mov	r15, r19
    13a0:	11 c0       	rjmp	.+34     	; 0x13c4 <vfprintf+0x226>
    13a2:	28 e6       	ldi	r18, 0x68	; 104
    13a4:	e2 2e       	mov	r14, r18
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	f2 2e       	mov	r15, r18
    13aa:	0c c0       	rjmp	.+24     	; 0x13c4 <vfprintf+0x226>
    13ac:	01 15       	cp	r16, r1
    13ae:	11 05       	cpc	r17, r1
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <vfprintf+0x216>
    13b2:	80 52       	subi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	b4 01       	movw	r22, r8
    13b8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    13bc:	08 94       	sec
    13be:	e1 1c       	adc	r14, r1
    13c0:	f1 1c       	adc	r15, r1
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <vfprintf+0x22e>
    13c4:	01 2f       	mov	r16, r17
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	00 71       	andi	r16, 0x10	; 16
    13ca:	10 70       	andi	r17, 0x00	; 0
    13cc:	f7 01       	movw	r30, r14
    13ce:	84 91       	lpm	r24, Z
    13d0:	88 23       	and	r24, r24
    13d2:	61 f7       	brne	.-40     	; 0x13ac <vfprintf+0x20e>
    13d4:	63 c2       	rjmp	.+1222   	; 0x189c <vfprintf+0x6fe>
    13d6:	17 ff       	sbrs	r17, 7
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <vfprintf+0x258>
    13da:	ea 0c       	add	r14, r10
    13dc:	f8 89       	ldd	r31, Y+16	; 0x10
    13de:	f4 ff       	sbrs	r31, 4
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <vfprintf+0x24c>
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	81 33       	cpi	r24, 0x31	; 49
    13e6:	09 f4       	brne	.+2      	; 0x13ea <vfprintf+0x24c>
    13e8:	ea 94       	dec	r14
    13ea:	1e 14       	cp	r1, r14
    13ec:	4c f5       	brge	.+82     	; 0x1440 <vfprintf+0x2a2>
    13ee:	28 e0       	ldi	r18, 0x08	; 8
    13f0:	2e 15       	cp	r18, r14
    13f2:	48 f1       	brcs	.+82     	; 0x1446 <vfprintf+0x2a8>
    13f4:	2c c0       	rjmp	.+88     	; 0x144e <vfprintf+0x2b0>
    13f6:	16 fd       	sbrc	r17, 6
    13f8:	2a c0       	rjmp	.+84     	; 0x144e <vfprintf+0x2b0>
    13fa:	8f 2d       	mov	r24, r15
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	8a 15       	cp	r24, r10
    1400:	9b 05       	cpc	r25, r11
    1402:	44 f0       	brlt	.+16     	; 0x1414 <vfprintf+0x276>
    1404:	3c ef       	ldi	r19, 0xFC	; 252
    1406:	a3 16       	cp	r10, r19
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	b3 06       	cpc	r11, r19
    140c:	1c f0       	brlt	.+6      	; 0x1414 <vfprintf+0x276>
    140e:	10 68       	ori	r17, 0x80	; 128
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <vfprintf+0x276>
    1412:	fa 94       	dec	r15
    1414:	ff 20       	and	r15, r15
    1416:	49 f0       	breq	.+18     	; 0x142a <vfprintf+0x28c>
    1418:	e2 e0       	ldi	r30, 0x02	; 2
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	ec 0f       	add	r30, r28
    141e:	fd 1f       	adc	r31, r29
    1420:	ef 0d       	add	r30, r15
    1422:	f1 1d       	adc	r31, r1
    1424:	80 81       	ld	r24, Z
    1426:	80 33       	cpi	r24, 0x30	; 48
    1428:	a1 f3       	breq	.-24     	; 0x1412 <vfprintf+0x274>
    142a:	17 ff       	sbrs	r17, 7
    142c:	10 c0       	rjmp	.+32     	; 0x144e <vfprintf+0x2b0>
    142e:	ef 2c       	mov	r14, r15
    1430:	e3 94       	inc	r14
    1432:	8f 2d       	mov	r24, r15
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a8 16       	cp	r10, r24
    1438:	b9 06       	cpc	r11, r25
    143a:	44 f4       	brge	.+16     	; 0x144c <vfprintf+0x2ae>
    143c:	fa 18       	sub	r15, r10
    143e:	07 c0       	rjmp	.+14     	; 0x144e <vfprintf+0x2b0>
    1440:	ee 24       	eor	r14, r14
    1442:	e3 94       	inc	r14
    1444:	04 c0       	rjmp	.+8      	; 0x144e <vfprintf+0x2b0>
    1446:	98 e0       	ldi	r25, 0x08	; 8
    1448:	e9 2e       	mov	r14, r25
    144a:	01 c0       	rjmp	.+2      	; 0x144e <vfprintf+0x2b0>
    144c:	ff 24       	eor	r15, r15
    144e:	17 ff       	sbrs	r17, 7
    1450:	07 c0       	rjmp	.+14     	; 0x1460 <vfprintf+0x2c2>
    1452:	1a 14       	cp	r1, r10
    1454:	1b 04       	cpc	r1, r11
    1456:	3c f4       	brge	.+14     	; 0x1466 <vfprintf+0x2c8>
    1458:	95 01       	movw	r18, r10
    145a:	2f 5f       	subi	r18, 0xFF	; 255
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	05 c0       	rjmp	.+10     	; 0x146a <vfprintf+0x2cc>
    1460:	25 e0       	ldi	r18, 0x05	; 5
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <vfprintf+0x2cc>
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	00 23       	and	r16, r16
    146c:	11 f0       	breq	.+4      	; 0x1472 <vfprintf+0x2d4>
    146e:	2f 5f       	subi	r18, 0xFF	; 255
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	ff 20       	and	r15, r15
    1474:	29 f0       	breq	.+10     	; 0x1480 <vfprintf+0x2e2>
    1476:	8f 2d       	mov	r24, r15
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	28 0f       	add	r18, r24
    147e:	39 1f       	adc	r19, r25
    1480:	8d 2d       	mov	r24, r13
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	28 17       	cp	r18, r24
    1486:	39 07       	cpc	r19, r25
    1488:	14 f4       	brge	.+4      	; 0x148e <vfprintf+0x2f0>
    148a:	d2 1a       	sub	r13, r18
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <vfprintf+0x2f2>
    148e:	dd 24       	eor	r13, r13
    1490:	61 2e       	mov	r6, r17
    1492:	77 24       	eor	r7, r7
    1494:	c3 01       	movw	r24, r6
    1496:	89 70       	andi	r24, 0x09	; 9
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	49 f4       	brne	.+18     	; 0x14b0 <vfprintf+0x312>
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <vfprintf+0x30e>
    14a0:	80 e2       	ldi	r24, 0x20	; 32
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	b4 01       	movw	r22, r8
    14a6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    14aa:	da 94       	dec	r13
    14ac:	dd 20       	and	r13, r13
    14ae:	c1 f7       	brne	.-16     	; 0x14a0 <vfprintf+0x302>
    14b0:	00 23       	and	r16, r16
    14b2:	29 f0       	breq	.+10     	; 0x14be <vfprintf+0x320>
    14b4:	80 2f       	mov	r24, r16
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b4 01       	movw	r22, r8
    14ba:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    14be:	63 fc       	sbrc	r6, 3
    14c0:	09 c0       	rjmp	.+18     	; 0x14d4 <vfprintf+0x336>
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <vfprintf+0x332>
    14c4:	80 e3       	ldi	r24, 0x30	; 48
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	b4 01       	movw	r22, r8
    14ca:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    14ce:	da 94       	dec	r13
    14d0:	dd 20       	and	r13, r13
    14d2:	c1 f7       	brne	.-16     	; 0x14c4 <vfprintf+0x326>
    14d4:	17 ff       	sbrs	r17, 7
    14d6:	48 c0       	rjmp	.+144    	; 0x1568 <vfprintf+0x3ca>
    14d8:	85 01       	movw	r16, r10
    14da:	b7 fe       	sbrs	r11, 7
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x344>
    14de:	00 e0       	ldi	r16, 0x00	; 0
    14e0:	10 e0       	ldi	r17, 0x00	; 0
    14e2:	66 24       	eor	r6, r6
    14e4:	77 24       	eor	r7, r7
    14e6:	95 01       	movw	r18, r10
    14e8:	2e 19       	sub	r18, r14
    14ea:	31 09       	sbc	r19, r1
    14ec:	3b 8b       	std	Y+19, r19	; 0x13
    14ee:	2a 8b       	std	Y+18, r18	; 0x12
    14f0:	25 01       	movw	r4, r10
    14f2:	40 1a       	sub	r4, r16
    14f4:	51 0a       	sbc	r5, r17
    14f6:	42 0c       	add	r4, r2
    14f8:	53 1c       	adc	r5, r3
    14fa:	6f 2d       	mov	r22, r15
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	ee 24       	eor	r14, r14
    1500:	ff 24       	eor	r15, r15
    1502:	e6 1a       	sub	r14, r22
    1504:	f7 0a       	sbc	r15, r23
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	0f 3f       	cpi	r16, 0xFF	; 255
    150a:	13 07       	cpc	r17, r19
    150c:	29 f4       	brne	.+10     	; 0x1518 <vfprintf+0x37a>
    150e:	8e e2       	ldi	r24, 0x2E	; 46
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	b4 01       	movw	r22, r8
    1514:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1518:	a0 16       	cp	r10, r16
    151a:	b1 06       	cpc	r11, r17
    151c:	54 f0       	brlt	.+20     	; 0x1532 <vfprintf+0x394>
    151e:	2a 89       	ldd	r18, Y+18	; 0x12
    1520:	3b 89       	ldd	r19, Y+19	; 0x13
    1522:	20 17       	cp	r18, r16
    1524:	31 07       	cpc	r19, r17
    1526:	2c f4       	brge	.+10     	; 0x1532 <vfprintf+0x394>
    1528:	f2 01       	movw	r30, r4
    152a:	e6 0d       	add	r30, r6
    152c:	f7 1d       	adc	r31, r7
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <vfprintf+0x396>
    1532:	80 e3       	ldi	r24, 0x30	; 48
    1534:	01 50       	subi	r16, 0x01	; 1
    1536:	10 40       	sbci	r17, 0x00	; 0
    1538:	08 94       	sec
    153a:	61 1c       	adc	r6, r1
    153c:	71 1c       	adc	r7, r1
    153e:	0e 15       	cp	r16, r14
    1540:	1f 05       	cpc	r17, r15
    1542:	2c f0       	brlt	.+10     	; 0x154e <vfprintf+0x3b0>
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	b4 01       	movw	r22, r8
    1548:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    154c:	dc cf       	rjmp	.-72     	; 0x1506 <vfprintf+0x368>
    154e:	0a 15       	cp	r16, r10
    1550:	1b 05       	cpc	r17, r11
    1552:	41 f4       	brne	.+16     	; 0x1564 <vfprintf+0x3c6>
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	96 33       	cpi	r25, 0x36	; 54
    1558:	20 f4       	brcc	.+8      	; 0x1562 <vfprintf+0x3c4>
    155a:	95 33       	cpi	r25, 0x35	; 53
    155c:	19 f4       	brne	.+6      	; 0x1564 <vfprintf+0x3c6>
    155e:	38 89       	ldd	r19, Y+16	; 0x10
    1560:	34 ff       	sbrs	r19, 4
    1562:	81 e3       	ldi	r24, 0x31	; 49
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	49 c0       	rjmp	.+146    	; 0x15fa <vfprintf+0x45c>
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	81 33       	cpi	r24, 0x31	; 49
    156c:	11 f0       	breq	.+4      	; 0x1572 <vfprintf+0x3d4>
    156e:	9f ee       	ldi	r25, 0xEF	; 239
    1570:	c9 22       	and	r12, r25
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b4 01       	movw	r22, r8
    1576:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    157a:	ff 20       	and	r15, r15
    157c:	89 f0       	breq	.+34     	; 0x15a0 <vfprintf+0x402>
    157e:	8e e2       	ldi	r24, 0x2E	; 46
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	b4 01       	movw	r22, r8
    1584:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1588:	12 e0       	ldi	r17, 0x02	; 2
    158a:	f1 01       	movw	r30, r2
    158c:	e1 0f       	add	r30, r17
    158e:	f1 1d       	adc	r31, r1
    1590:	1f 5f       	subi	r17, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	b4 01       	movw	r22, r8
    1598:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    159c:	fa 94       	dec	r15
    159e:	a9 f7       	brne	.-22     	; 0x158a <vfprintf+0x3ec>
    15a0:	64 fe       	sbrs	r6, 4
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <vfprintf+0x40c>
    15a4:	85 e4       	ldi	r24, 0x45	; 69
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x410>
    15aa:	85 e6       	ldi	r24, 0x65	; 101
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	b4 01       	movw	r22, r8
    15b0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    15b4:	b7 fc       	sbrc	r11, 7
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <vfprintf+0x424>
    15b8:	a1 14       	cp	r10, r1
    15ba:	b1 04       	cpc	r11, r1
    15bc:	41 f4       	brne	.+16     	; 0x15ce <vfprintf+0x430>
    15be:	c4 fe       	sbrs	r12, 4
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x430>
    15c2:	b0 94       	com	r11
    15c4:	a1 94       	neg	r10
    15c6:	b1 08       	sbc	r11, r1
    15c8:	b3 94       	inc	r11
    15ca:	8d e2       	ldi	r24, 0x2D	; 45
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <vfprintf+0x432>
    15ce:	8b e2       	ldi	r24, 0x2B	; 43
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b4 01       	movw	r22, r8
    15d4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    15d8:	80 e3       	ldi	r24, 0x30	; 48
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <vfprintf+0x448>
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	e6 ef       	ldi	r30, 0xF6	; 246
    15e0:	ff ef       	ldi	r31, 0xFF	; 255
    15e2:	ae 0e       	add	r10, r30
    15e4:	bf 1e       	adc	r11, r31
    15e6:	fa e0       	ldi	r31, 0x0A	; 10
    15e8:	af 16       	cp	r10, r31
    15ea:	b1 04       	cpc	r11, r1
    15ec:	bc f7       	brge	.-18     	; 0x15dc <vfprintf+0x43e>
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	b4 01       	movw	r22, r8
    15f2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    15f6:	c5 01       	movw	r24, r10
    15f8:	c0 96       	adiw	r24, 0x30	; 48
    15fa:	b4 01       	movw	r22, r8
    15fc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1600:	4d c1       	rjmp	.+666    	; 0x189c <vfprintf+0x6fe>
    1602:	83 36       	cpi	r24, 0x63	; 99
    1604:	31 f0       	breq	.+12     	; 0x1612 <vfprintf+0x474>
    1606:	83 37       	cpi	r24, 0x73	; 115
    1608:	89 f0       	breq	.+34     	; 0x162c <vfprintf+0x48e>
    160a:	83 35       	cpi	r24, 0x53	; 83
    160c:	09 f0       	breq	.+2      	; 0x1610 <vfprintf+0x472>
    160e:	59 c0       	rjmp	.+178    	; 0x16c2 <vfprintf+0x524>
    1610:	22 c0       	rjmp	.+68     	; 0x1656 <vfprintf+0x4b8>
    1612:	9a 01       	movw	r18, r20
    1614:	2e 5f       	subi	r18, 0xFE	; 254
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	3d 87       	std	Y+13, r19	; 0x0d
    161a:	2c 87       	std	Y+12, r18	; 0x0c
    161c:	fa 01       	movw	r30, r20
    161e:	80 81       	ld	r24, Z
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	e8 2e       	mov	r14, r24
    1626:	f1 2c       	mov	r15, r1
    1628:	51 01       	movw	r10, r2
    162a:	13 c0       	rjmp	.+38     	; 0x1652 <vfprintf+0x4b4>
    162c:	9a 01       	movw	r18, r20
    162e:	2e 5f       	subi	r18, 0xFE	; 254
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	3d 87       	std	Y+13, r19	; 0x0d
    1634:	2c 87       	std	Y+12, r18	; 0x0c
    1636:	fa 01       	movw	r30, r20
    1638:	a0 80       	ld	r10, Z
    163a:	b1 80       	ldd	r11, Z+1	; 0x01
    163c:	16 ff       	sbrs	r17, 6
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <vfprintf+0x4a8>
    1640:	6f 2d       	mov	r22, r15
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x4ac>
    1646:	6f ef       	ldi	r22, 0xFF	; 255
    1648:	7f ef       	ldi	r23, 0xFF	; 255
    164a:	c5 01       	movw	r24, r10
    164c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <strnlen>
    1650:	7c 01       	movw	r14, r24
    1652:	1f 77       	andi	r17, 0x7F	; 127
    1654:	14 c0       	rjmp	.+40     	; 0x167e <vfprintf+0x4e0>
    1656:	9a 01       	movw	r18, r20
    1658:	2e 5f       	subi	r18, 0xFE	; 254
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	3d 87       	std	Y+13, r19	; 0x0d
    165e:	2c 87       	std	Y+12, r18	; 0x0c
    1660:	fa 01       	movw	r30, r20
    1662:	a0 80       	ld	r10, Z
    1664:	b1 80       	ldd	r11, Z+1	; 0x01
    1666:	16 ff       	sbrs	r17, 6
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <vfprintf+0x4d2>
    166a:	6f 2d       	mov	r22, r15
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x4d6>
    1670:	6f ef       	ldi	r22, 0xFF	; 255
    1672:	7f ef       	ldi	r23, 0xFF	; 255
    1674:	c5 01       	movw	r24, r10
    1676:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <strnlen_P>
    167a:	7c 01       	movw	r14, r24
    167c:	10 68       	ori	r17, 0x80	; 128
    167e:	13 fd       	sbrc	r17, 3
    1680:	1c c0       	rjmp	.+56     	; 0x16ba <vfprintf+0x51c>
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x4f2>
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	b4 01       	movw	r22, r8
    168a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    168e:	da 94       	dec	r13
    1690:	8d 2d       	mov	r24, r13
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	e8 16       	cp	r14, r24
    1696:	f9 06       	cpc	r15, r25
    1698:	a8 f3       	brcs	.-22     	; 0x1684 <vfprintf+0x4e6>
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <vfprintf+0x51c>
    169c:	f5 01       	movw	r30, r10
    169e:	17 fd       	sbrc	r17, 7
    16a0:	85 91       	lpm	r24, Z+
    16a2:	17 ff       	sbrs	r17, 7
    16a4:	81 91       	ld	r24, Z+
    16a6:	5f 01       	movw	r10, r30
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	b4 01       	movw	r22, r8
    16ac:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    16b0:	d1 10       	cpse	r13, r1
    16b2:	da 94       	dec	r13
    16b4:	08 94       	sec
    16b6:	e1 08       	sbc	r14, r1
    16b8:	f1 08       	sbc	r15, r1
    16ba:	e1 14       	cp	r14, r1
    16bc:	f1 04       	cpc	r15, r1
    16be:	71 f7       	brne	.-36     	; 0x169c <vfprintf+0x4fe>
    16c0:	ed c0       	rjmp	.+474    	; 0x189c <vfprintf+0x6fe>
    16c2:	84 36       	cpi	r24, 0x64	; 100
    16c4:	11 f0       	breq	.+4      	; 0x16ca <vfprintf+0x52c>
    16c6:	89 36       	cpi	r24, 0x69	; 105
    16c8:	71 f5       	brne	.+92     	; 0x1726 <vfprintf+0x588>
    16ca:	9a 01       	movw	r18, r20
    16cc:	17 ff       	sbrs	r17, 7
    16ce:	0a c0       	rjmp	.+20     	; 0x16e4 <vfprintf+0x546>
    16d0:	2c 5f       	subi	r18, 0xFC	; 252
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	3d 87       	std	Y+13, r19	; 0x0d
    16d6:	2c 87       	std	Y+12, r18	; 0x0c
    16d8:	fa 01       	movw	r30, r20
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	a2 81       	ldd	r26, Z+2	; 0x02
    16e0:	b3 81       	ldd	r27, Z+3	; 0x03
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <vfprintf+0x55c>
    16e4:	2e 5f       	subi	r18, 0xFE	; 254
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	3d 87       	std	Y+13, r19	; 0x0d
    16ea:	2c 87       	std	Y+12, r18	; 0x0c
    16ec:	fa 01       	movw	r30, r20
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	aa 27       	eor	r26, r26
    16f4:	97 fd       	sbrc	r25, 7
    16f6:	a0 95       	com	r26
    16f8:	ba 2f       	mov	r27, r26
    16fa:	01 2f       	mov	r16, r17
    16fc:	0f 76       	andi	r16, 0x6F	; 111
    16fe:	b7 ff       	sbrs	r27, 7
    1700:	08 c0       	rjmp	.+16     	; 0x1712 <vfprintf+0x574>
    1702:	b0 95       	com	r27
    1704:	a0 95       	com	r26
    1706:	90 95       	com	r25
    1708:	81 95       	neg	r24
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	af 4f       	sbci	r26, 0xFF	; 255
    170e:	bf 4f       	sbci	r27, 0xFF	; 255
    1710:	00 68       	ori	r16, 0x80	; 128
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	a1 01       	movw	r20, r2
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__ultoa_invert>
    1720:	e8 2e       	mov	r14, r24
    1722:	e2 18       	sub	r14, r2
    1724:	41 c0       	rjmp	.+130    	; 0x17a8 <vfprintf+0x60a>
    1726:	85 37       	cpi	r24, 0x75	; 117
    1728:	21 f4       	brne	.+8      	; 0x1732 <vfprintf+0x594>
    172a:	1f 7e       	andi	r17, 0xEF	; 239
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	20 c0       	rjmp	.+64     	; 0x1772 <vfprintf+0x5d4>
    1732:	19 7f       	andi	r17, 0xF9	; 249
    1734:	8f 36       	cpi	r24, 0x6F	; 111
    1736:	a9 f0       	breq	.+42     	; 0x1762 <vfprintf+0x5c4>
    1738:	80 37       	cpi	r24, 0x70	; 112
    173a:	20 f4       	brcc	.+8      	; 0x1744 <vfprintf+0x5a6>
    173c:	88 35       	cpi	r24, 0x58	; 88
    173e:	09 f0       	breq	.+2      	; 0x1742 <vfprintf+0x5a4>
    1740:	b0 c0       	rjmp	.+352    	; 0x18a2 <vfprintf+0x704>
    1742:	0b c0       	rjmp	.+22     	; 0x175a <vfprintf+0x5bc>
    1744:	80 37       	cpi	r24, 0x70	; 112
    1746:	21 f0       	breq	.+8      	; 0x1750 <vfprintf+0x5b2>
    1748:	88 37       	cpi	r24, 0x78	; 120
    174a:	09 f0       	breq	.+2      	; 0x174e <vfprintf+0x5b0>
    174c:	aa c0       	rjmp	.+340    	; 0x18a2 <vfprintf+0x704>
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <vfprintf+0x5b4>
    1750:	10 61       	ori	r17, 0x10	; 16
    1752:	14 ff       	sbrs	r17, 4
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x5ca>
    1756:	14 60       	ori	r17, 0x04	; 4
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <vfprintf+0x5ca>
    175a:	14 ff       	sbrs	r17, 4
    175c:	08 c0       	rjmp	.+16     	; 0x176e <vfprintf+0x5d0>
    175e:	16 60       	ori	r17, 0x06	; 6
    1760:	06 c0       	rjmp	.+12     	; 0x176e <vfprintf+0x5d0>
    1762:	28 e0       	ldi	r18, 0x08	; 8
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <vfprintf+0x5d4>
    1768:	20 e1       	ldi	r18, 0x10	; 16
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <vfprintf+0x5d4>
    176e:	20 e1       	ldi	r18, 0x10	; 16
    1770:	32 e0       	ldi	r19, 0x02	; 2
    1772:	ca 01       	movw	r24, r20
    1774:	17 ff       	sbrs	r17, 7
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x5ec>
    1778:	04 96       	adiw	r24, 0x04	; 4
    177a:	9d 87       	std	Y+13, r25	; 0x0d
    177c:	8c 87       	std	Y+12, r24	; 0x0c
    177e:	fa 01       	movw	r30, r20
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	08 c0       	rjmp	.+16     	; 0x179a <vfprintf+0x5fc>
    178a:	02 96       	adiw	r24, 0x02	; 2
    178c:	9d 87       	std	Y+13, r25	; 0x0d
    178e:	8c 87       	std	Y+12, r24	; 0x0c
    1790:	fa 01       	movw	r30, r20
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a1 01       	movw	r20, r2
    179c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__ultoa_invert>
    17a0:	e8 2e       	mov	r14, r24
    17a2:	e2 18       	sub	r14, r2
    17a4:	01 2f       	mov	r16, r17
    17a6:	0f 77       	andi	r16, 0x7F	; 127
    17a8:	06 ff       	sbrs	r16, 6
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x620>
    17ac:	0e 7f       	andi	r16, 0xFE	; 254
    17ae:	ef 14       	cp	r14, r15
    17b0:	30 f4       	brcc	.+12     	; 0x17be <vfprintf+0x620>
    17b2:	04 ff       	sbrs	r16, 4
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0x624>
    17b6:	02 fd       	sbrc	r16, 2
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <vfprintf+0x624>
    17ba:	0f 7e       	andi	r16, 0xEF	; 239
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <vfprintf+0x624>
    17be:	1e 2d       	mov	r17, r14
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <vfprintf+0x626>
    17c2:	1f 2d       	mov	r17, r15
    17c4:	80 2f       	mov	r24, r16
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	04 ff       	sbrs	r16, 4
    17ca:	0c c0       	rjmp	.+24     	; 0x17e4 <vfprintf+0x646>
    17cc:	fe 01       	movw	r30, r28
    17ce:	ee 0d       	add	r30, r14
    17d0:	f1 1d       	adc	r31, r1
    17d2:	20 81       	ld	r18, Z
    17d4:	20 33       	cpi	r18, 0x30	; 48
    17d6:	11 f4       	brne	.+4      	; 0x17dc <vfprintf+0x63e>
    17d8:	09 7e       	andi	r16, 0xE9	; 233
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <vfprintf+0x650>
    17dc:	02 ff       	sbrs	r16, 2
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x64e>
    17e0:	1e 5f       	subi	r17, 0xFE	; 254
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <vfprintf+0x650>
    17e4:	86 78       	andi	r24, 0x86	; 134
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	09 f0       	breq	.+2      	; 0x17ee <vfprintf+0x650>
    17ec:	1f 5f       	subi	r17, 0xFF	; 255
    17ee:	a0 2e       	mov	r10, r16
    17f0:	bb 24       	eor	r11, r11
    17f2:	03 fd       	sbrc	r16, 3
    17f4:	12 c0       	rjmp	.+36     	; 0x181a <vfprintf+0x67c>
    17f6:	00 ff       	sbrs	r16, 0
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <vfprintf+0x676>
    17fa:	fe 2c       	mov	r15, r14
    17fc:	1d 15       	cp	r17, r13
    17fe:	50 f4       	brcc	.+20     	; 0x1814 <vfprintf+0x676>
    1800:	fd 0c       	add	r15, r13
    1802:	f1 1a       	sub	r15, r17
    1804:	1d 2d       	mov	r17, r13
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <vfprintf+0x676>
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	b4 01       	movw	r22, r8
    180e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1812:	1f 5f       	subi	r17, 0xFF	; 255
    1814:	1d 15       	cp	r17, r13
    1816:	c0 f3       	brcs	.-16     	; 0x1808 <vfprintf+0x66a>
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <vfprintf+0x684>
    181a:	1d 15       	cp	r17, r13
    181c:	10 f4       	brcc	.+4      	; 0x1822 <vfprintf+0x684>
    181e:	d1 1a       	sub	r13, r17
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <vfprintf+0x686>
    1822:	dd 24       	eor	r13, r13
    1824:	a4 fe       	sbrs	r10, 4
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <vfprintf+0x6a8>
    1828:	80 e3       	ldi	r24, 0x30	; 48
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	b4 01       	movw	r22, r8
    182e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1832:	a2 fe       	sbrs	r10, 2
    1834:	1f c0       	rjmp	.+62     	; 0x1874 <vfprintf+0x6d6>
    1836:	a1 fe       	sbrs	r10, 1
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <vfprintf+0x6a2>
    183a:	88 e5       	ldi	r24, 0x58	; 88
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	10 c0       	rjmp	.+32     	; 0x1860 <vfprintf+0x6c2>
    1840:	88 e7       	ldi	r24, 0x78	; 120
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <vfprintf+0x6c2>
    1846:	c5 01       	movw	r24, r10
    1848:	86 78       	andi	r24, 0x86	; 134
    184a:	90 70       	andi	r25, 0x00	; 0
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	91 f0       	breq	.+36     	; 0x1874 <vfprintf+0x6d6>
    1850:	a1 fc       	sbrc	r10, 1
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x6ba>
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x6bc>
    1858:	8b e2       	ldi	r24, 0x2B	; 43
    185a:	07 fd       	sbrc	r16, 7
    185c:	8d e2       	ldi	r24, 0x2D	; 45
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	b4 01       	movw	r22, r8
    1862:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <vfprintf+0x6d6>
    1868:	80 e3       	ldi	r24, 0x30	; 48
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	b4 01       	movw	r22, r8
    186e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    1872:	fa 94       	dec	r15
    1874:	ef 14       	cp	r14, r15
    1876:	c0 f3       	brcs	.-16     	; 0x1868 <vfprintf+0x6ca>
    1878:	ea 94       	dec	r14
    187a:	f1 01       	movw	r30, r2
    187c:	ee 0d       	add	r30, r14
    187e:	f1 1d       	adc	r31, r1
    1880:	80 81       	ld	r24, Z
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	b4 01       	movw	r22, r8
    1886:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    188a:	ee 20       	and	r14, r14
    188c:	a9 f7       	brne	.-22     	; 0x1878 <vfprintf+0x6da>
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0x6fe>
    1890:	80 e2       	ldi	r24, 0x20	; 32
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	b4 01       	movw	r22, r8
    1896:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <fputc>
    189a:	da 94       	dec	r13
    189c:	dd 20       	and	r13, r13
    189e:	c1 f7       	brne	.-16     	; 0x1890 <vfprintf+0x6f2>
    18a0:	8e cc       	rjmp	.-1764   	; 0x11be <vfprintf+0x20>
    18a2:	f4 01       	movw	r30, r8
    18a4:	86 81       	ldd	r24, Z+6	; 0x06
    18a6:	97 81       	ldd	r25, Z+7	; 0x07
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <vfprintf+0x710>
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
    18ae:	65 96       	adiw	r28, 0x15	; 21
    18b0:	e2 e1       	ldi	r30, 0x12	; 18
    18b2:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__epilogue_restores__>

000018b6 <__divmodhi4>:
    18b6:	97 fb       	bst	r25, 7
    18b8:	09 2e       	mov	r0, r25
    18ba:	07 26       	eor	r0, r23
    18bc:	0a d0       	rcall	.+20     	; 0x18d2 <__divmodhi4_neg1>
    18be:	77 fd       	sbrc	r23, 7
    18c0:	04 d0       	rcall	.+8      	; 0x18ca <__divmodhi4_neg2>
    18c2:	43 d0       	rcall	.+134    	; 0x194a <__udivmodhi4>
    18c4:	06 d0       	rcall	.+12     	; 0x18d2 <__divmodhi4_neg1>
    18c6:	00 20       	and	r0, r0
    18c8:	1a f4       	brpl	.+6      	; 0x18d0 <__divmodhi4_exit>

000018ca <__divmodhi4_neg2>:
    18ca:	70 95       	com	r23
    18cc:	61 95       	neg	r22
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255

000018d0 <__divmodhi4_exit>:
    18d0:	08 95       	ret

000018d2 <__divmodhi4_neg1>:
    18d2:	f6 f7       	brtc	.-4      	; 0x18d0 <__divmodhi4_exit>
    18d4:	90 95       	com	r25
    18d6:	81 95       	neg	r24
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	08 95       	ret

000018dc <__prologue_saves__>:
    18dc:	2f 92       	push	r2
    18de:	3f 92       	push	r3
    18e0:	4f 92       	push	r4
    18e2:	5f 92       	push	r5
    18e4:	6f 92       	push	r6
    18e6:	7f 92       	push	r7
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	ca 1b       	sub	r28, r26
    1906:	db 0b       	sbc	r29, r27
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	09 94       	ijmp

00001914 <__epilogue_restores__>:
    1914:	2a 88       	ldd	r2, Y+18	; 0x12
    1916:	39 88       	ldd	r3, Y+17	; 0x11
    1918:	48 88       	ldd	r4, Y+16	; 0x10
    191a:	5f 84       	ldd	r5, Y+15	; 0x0f
    191c:	6e 84       	ldd	r6, Y+14	; 0x0e
    191e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1920:	8c 84       	ldd	r8, Y+12	; 0x0c
    1922:	9b 84       	ldd	r9, Y+11	; 0x0b
    1924:	aa 84       	ldd	r10, Y+10	; 0x0a
    1926:	b9 84       	ldd	r11, Y+9	; 0x09
    1928:	c8 84       	ldd	r12, Y+8	; 0x08
    192a:	df 80       	ldd	r13, Y+7	; 0x07
    192c:	ee 80       	ldd	r14, Y+6	; 0x06
    192e:	fd 80       	ldd	r15, Y+5	; 0x05
    1930:	0c 81       	ldd	r16, Y+4	; 0x04
    1932:	1b 81       	ldd	r17, Y+3	; 0x03
    1934:	aa 81       	ldd	r26, Y+2	; 0x02
    1936:	b9 81       	ldd	r27, Y+1	; 0x01
    1938:	ce 0f       	add	r28, r30
    193a:	d1 1d       	adc	r29, r1
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	ed 01       	movw	r28, r26
    1948:	08 95       	ret

0000194a <__udivmodhi4>:
    194a:	aa 1b       	sub	r26, r26
    194c:	bb 1b       	sub	r27, r27
    194e:	51 e1       	ldi	r21, 0x11	; 17
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <__udivmodhi4_ep>

00001952 <__udivmodhi4_loop>:
    1952:	aa 1f       	adc	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	a6 17       	cp	r26, r22
    1958:	b7 07       	cpc	r27, r23
    195a:	10 f0       	brcs	.+4      	; 0x1960 <__udivmodhi4_ep>
    195c:	a6 1b       	sub	r26, r22
    195e:	b7 0b       	sbc	r27, r23

00001960 <__udivmodhi4_ep>:
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	5a 95       	dec	r21
    1966:	a9 f7       	brne	.-22     	; 0x1952 <__udivmodhi4_loop>
    1968:	80 95       	com	r24
    196a:	90 95       	com	r25
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	08 95       	ret

00001972 <abort>:
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	f8 94       	cli
    1978:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

0000197c <__ftoa_engine>:
    197c:	28 30       	cpi	r18, 0x08	; 8
    197e:	08 f0       	brcs	.+2      	; 0x1982 <__ftoa_engine+0x6>
    1980:	27 e0       	ldi	r18, 0x07	; 7
    1982:	33 27       	eor	r19, r19
    1984:	da 01       	movw	r26, r20
    1986:	99 0f       	add	r25, r25
    1988:	31 1d       	adc	r19, r1
    198a:	87 fd       	sbrc	r24, 7
    198c:	91 60       	ori	r25, 0x01	; 1
    198e:	00 96       	adiw	r24, 0x00	; 0
    1990:	61 05       	cpc	r22, r1
    1992:	71 05       	cpc	r23, r1
    1994:	39 f4       	brne	.+14     	; 0x19a4 <__ftoa_engine+0x28>
    1996:	32 60       	ori	r19, 0x02	; 2
    1998:	2e 5f       	subi	r18, 0xFE	; 254
    199a:	3d 93       	st	X+, r19
    199c:	30 e3       	ldi	r19, 0x30	; 48
    199e:	2a 95       	dec	r18
    19a0:	e1 f7       	brne	.-8      	; 0x199a <__ftoa_engine+0x1e>
    19a2:	08 95       	ret
    19a4:	9f 3f       	cpi	r25, 0xFF	; 255
    19a6:	30 f0       	brcs	.+12     	; 0x19b4 <__ftoa_engine+0x38>
    19a8:	80 38       	cpi	r24, 0x80	; 128
    19aa:	71 05       	cpc	r23, r1
    19ac:	61 05       	cpc	r22, r1
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <__ftoa_engine+0x36>
    19b0:	3c 5f       	subi	r19, 0xFC	; 252
    19b2:	3c 5f       	subi	r19, 0xFC	; 252
    19b4:	3d 93       	st	X+, r19
    19b6:	91 30       	cpi	r25, 0x01	; 1
    19b8:	08 f0       	brcs	.+2      	; 0x19bc <__ftoa_engine+0x40>
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	91 1d       	adc	r25, r1
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	1f 93       	push	r17
    19c4:	0f 93       	push	r16
    19c6:	ff 92       	push	r15
    19c8:	ef 92       	push	r14
    19ca:	19 2f       	mov	r17, r25
    19cc:	98 7f       	andi	r25, 0xF8	; 248
    19ce:	96 95       	lsr	r25
    19d0:	e9 2f       	mov	r30, r25
    19d2:	96 95       	lsr	r25
    19d4:	96 95       	lsr	r25
    19d6:	e9 0f       	add	r30, r25
    19d8:	ff 27       	eor	r31, r31
    19da:	e6 53       	subi	r30, 0x36	; 54
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	99 27       	eor	r25, r25
    19e0:	33 27       	eor	r19, r19
    19e2:	ee 24       	eor	r14, r14
    19e4:	ff 24       	eor	r15, r15
    19e6:	a7 01       	movw	r20, r14
    19e8:	e7 01       	movw	r28, r14
    19ea:	05 90       	lpm	r0, Z+
    19ec:	08 94       	sec
    19ee:	07 94       	ror	r0
    19f0:	28 f4       	brcc	.+10     	; 0x19fc <__ftoa_engine+0x80>
    19f2:	36 0f       	add	r19, r22
    19f4:	e7 1e       	adc	r14, r23
    19f6:	f8 1e       	adc	r15, r24
    19f8:	49 1f       	adc	r20, r25
    19fa:	51 1d       	adc	r21, r1
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	06 94       	lsr	r0
    1a06:	a1 f7       	brne	.-24     	; 0x19f0 <__ftoa_engine+0x74>
    1a08:	05 90       	lpm	r0, Z+
    1a0a:	07 94       	ror	r0
    1a0c:	28 f4       	brcc	.+10     	; 0x1a18 <__ftoa_engine+0x9c>
    1a0e:	e7 0e       	add	r14, r23
    1a10:	f8 1e       	adc	r15, r24
    1a12:	49 1f       	adc	r20, r25
    1a14:	56 1f       	adc	r21, r22
    1a16:	c1 1d       	adc	r28, r1
    1a18:	77 0f       	add	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	66 1f       	adc	r22, r22
    1a20:	06 94       	lsr	r0
    1a22:	a1 f7       	brne	.-24     	; 0x1a0c <__ftoa_engine+0x90>
    1a24:	05 90       	lpm	r0, Z+
    1a26:	07 94       	ror	r0
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__ftoa_engine+0xb8>
    1a2a:	f8 0e       	add	r15, r24
    1a2c:	49 1f       	adc	r20, r25
    1a2e:	56 1f       	adc	r21, r22
    1a30:	c7 1f       	adc	r28, r23
    1a32:	d1 1d       	adc	r29, r1
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	66 1f       	adc	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	06 94       	lsr	r0
    1a3e:	a1 f7       	brne	.-24     	; 0x1a28 <__ftoa_engine+0xac>
    1a40:	05 90       	lpm	r0, Z+
    1a42:	07 94       	ror	r0
    1a44:	20 f4       	brcc	.+8      	; 0x1a4e <__ftoa_engine+0xd2>
    1a46:	49 0f       	add	r20, r25
    1a48:	56 1f       	adc	r21, r22
    1a4a:	c7 1f       	adc	r28, r23
    1a4c:	d8 1f       	adc	r29, r24
    1a4e:	99 0f       	add	r25, r25
    1a50:	66 1f       	adc	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	06 94       	lsr	r0
    1a58:	a9 f7       	brne	.-22     	; 0x1a44 <__ftoa_engine+0xc8>
    1a5a:	84 91       	lpm	r24, Z
    1a5c:	10 95       	com	r17
    1a5e:	17 70       	andi	r17, 0x07	; 7
    1a60:	41 f0       	breq	.+16     	; 0x1a72 <__ftoa_engine+0xf6>
    1a62:	d6 95       	lsr	r29
    1a64:	c7 95       	ror	r28
    1a66:	57 95       	ror	r21
    1a68:	47 95       	ror	r20
    1a6a:	f7 94       	ror	r15
    1a6c:	e7 94       	ror	r14
    1a6e:	1a 95       	dec	r17
    1a70:	c1 f7       	brne	.-16     	; 0x1a62 <__ftoa_engine+0xe6>
    1a72:	e0 e7       	ldi	r30, 0x70	; 112
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	68 94       	set
    1a78:	15 90       	lpm	r1, Z+
    1a7a:	15 91       	lpm	r17, Z+
    1a7c:	35 91       	lpm	r19, Z+
    1a7e:	65 91       	lpm	r22, Z+
    1a80:	95 91       	lpm	r25, Z+
    1a82:	05 90       	lpm	r0, Z+
    1a84:	7f e2       	ldi	r23, 0x2F	; 47
    1a86:	73 95       	inc	r23
    1a88:	e1 18       	sub	r14, r1
    1a8a:	f1 0a       	sbc	r15, r17
    1a8c:	43 0b       	sbc	r20, r19
    1a8e:	56 0b       	sbc	r21, r22
    1a90:	c9 0b       	sbc	r28, r25
    1a92:	d0 09       	sbc	r29, r0
    1a94:	c0 f7       	brcc	.-16     	; 0x1a86 <__ftoa_engine+0x10a>
    1a96:	e1 0c       	add	r14, r1
    1a98:	f1 1e       	adc	r15, r17
    1a9a:	43 1f       	adc	r20, r19
    1a9c:	56 1f       	adc	r21, r22
    1a9e:	c9 1f       	adc	r28, r25
    1aa0:	d0 1d       	adc	r29, r0
    1aa2:	7e f4       	brtc	.+30     	; 0x1ac2 <__ftoa_engine+0x146>
    1aa4:	70 33       	cpi	r23, 0x30	; 48
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <__ftoa_engine+0x130>
    1aa8:	8a 95       	dec	r24
    1aaa:	e6 cf       	rjmp	.-52     	; 0x1a78 <__ftoa_engine+0xfc>
    1aac:	e8 94       	clt
    1aae:	01 50       	subi	r16, 0x01	; 1
    1ab0:	30 f0       	brcs	.+12     	; 0x1abe <__ftoa_engine+0x142>
    1ab2:	08 0f       	add	r16, r24
    1ab4:	0a f4       	brpl	.+2      	; 0x1ab8 <__ftoa_engine+0x13c>
    1ab6:	00 27       	eor	r16, r16
    1ab8:	02 17       	cp	r16, r18
    1aba:	08 f4       	brcc	.+2      	; 0x1abe <__ftoa_engine+0x142>
    1abc:	20 2f       	mov	r18, r16
    1abe:	23 95       	inc	r18
    1ac0:	02 2f       	mov	r16, r18
    1ac2:	7a 33       	cpi	r23, 0x3A	; 58
    1ac4:	28 f0       	brcs	.+10     	; 0x1ad0 <__ftoa_engine+0x154>
    1ac6:	79 e3       	ldi	r23, 0x39	; 57
    1ac8:	7d 93       	st	X+, r23
    1aca:	2a 95       	dec	r18
    1acc:	e9 f7       	brne	.-6      	; 0x1ac8 <__ftoa_engine+0x14c>
    1ace:	10 c0       	rjmp	.+32     	; 0x1af0 <__ftoa_engine+0x174>
    1ad0:	7d 93       	st	X+, r23
    1ad2:	2a 95       	dec	r18
    1ad4:	89 f6       	brne	.-94     	; 0x1a78 <__ftoa_engine+0xfc>
    1ad6:	06 94       	lsr	r0
    1ad8:	97 95       	ror	r25
    1ada:	67 95       	ror	r22
    1adc:	37 95       	ror	r19
    1ade:	17 95       	ror	r17
    1ae0:	17 94       	ror	r1
    1ae2:	e1 18       	sub	r14, r1
    1ae4:	f1 0a       	sbc	r15, r17
    1ae6:	43 0b       	sbc	r20, r19
    1ae8:	56 0b       	sbc	r21, r22
    1aea:	c9 0b       	sbc	r28, r25
    1aec:	d0 09       	sbc	r29, r0
    1aee:	98 f0       	brcs	.+38     	; 0x1b16 <__ftoa_engine+0x19a>
    1af0:	23 95       	inc	r18
    1af2:	7e 91       	ld	r23, -X
    1af4:	73 95       	inc	r23
    1af6:	7a 33       	cpi	r23, 0x3A	; 58
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <__ftoa_engine+0x180>
    1afa:	70 e3       	ldi	r23, 0x30	; 48
    1afc:	7c 93       	st	X, r23
    1afe:	20 13       	cpse	r18, r16
    1b00:	b8 f7       	brcc	.-18     	; 0x1af0 <__ftoa_engine+0x174>
    1b02:	7e 91       	ld	r23, -X
    1b04:	70 61       	ori	r23, 0x10	; 16
    1b06:	7d 93       	st	X+, r23
    1b08:	30 f0       	brcs	.+12     	; 0x1b16 <__ftoa_engine+0x19a>
    1b0a:	83 95       	inc	r24
    1b0c:	71 e3       	ldi	r23, 0x31	; 49
    1b0e:	7d 93       	st	X+, r23
    1b10:	70 e3       	ldi	r23, 0x30	; 48
    1b12:	2a 95       	dec	r18
    1b14:	e1 f7       	brne	.-8      	; 0x1b0e <__ftoa_engine+0x192>
    1b16:	11 24       	eor	r1, r1
    1b18:	ef 90       	pop	r14
    1b1a:	ff 90       	pop	r15
    1b1c:	0f 91       	pop	r16
    1b1e:	1f 91       	pop	r17
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	99 27       	eor	r25, r25
    1b26:	87 fd       	sbrc	r24, 7
    1b28:	90 95       	com	r25
    1b2a:	08 95       	ret

00001b2c <strnlen_P>:
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	05 90       	lpm	r0, Z+
    1b30:	61 50       	subi	r22, 0x01	; 1
    1b32:	70 40       	sbci	r23, 0x00	; 0
    1b34:	01 10       	cpse	r0, r1
    1b36:	d8 f7       	brcc	.-10     	; 0x1b2e <strnlen_P+0x2>
    1b38:	80 95       	com	r24
    1b3a:	90 95       	com	r25
    1b3c:	8e 0f       	add	r24, r30
    1b3e:	9f 1f       	adc	r25, r31
    1b40:	08 95       	ret

00001b42 <strcmp>:
    1b42:	fb 01       	movw	r30, r22
    1b44:	dc 01       	movw	r26, r24
    1b46:	8d 91       	ld	r24, X+
    1b48:	01 90       	ld	r0, Z+
    1b4a:	80 19       	sub	r24, r0
    1b4c:	01 10       	cpse	r0, r1
    1b4e:	d9 f3       	breq	.-10     	; 0x1b46 <strcmp+0x4>
    1b50:	99 0b       	sbc	r25, r25
    1b52:	08 95       	ret

00001b54 <strnlen>:
    1b54:	fc 01       	movw	r30, r24
    1b56:	61 50       	subi	r22, 0x01	; 1
    1b58:	70 40       	sbci	r23, 0x00	; 0
    1b5a:	01 90       	ld	r0, Z+
    1b5c:	01 10       	cpse	r0, r1
    1b5e:	d8 f7       	brcc	.-10     	; 0x1b56 <strnlen+0x2>
    1b60:	80 95       	com	r24
    1b62:	90 95       	com	r25
    1b64:	8e 0f       	add	r24, r30
    1b66:	9f 1f       	adc	r25, r31
    1b68:	08 95       	ret

00001b6a <fputc>:
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	8c 01       	movw	r16, r24
    1b74:	eb 01       	movw	r28, r22
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	81 ff       	sbrs	r24, 1
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <fputc+0x48>
    1b7c:	82 ff       	sbrs	r24, 2
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <fputc+0x30>
    1b80:	2e 81       	ldd	r18, Y+6	; 0x06
    1b82:	3f 81       	ldd	r19, Y+7	; 0x07
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	9d 81       	ldd	r25, Y+5	; 0x05
    1b88:	28 17       	cp	r18, r24
    1b8a:	39 07       	cpc	r19, r25
    1b8c:	64 f4       	brge	.+24     	; 0x1ba6 <fputc+0x3c>
    1b8e:	e8 81       	ld	r30, Y
    1b90:	f9 81       	ldd	r31, Y+1	; 0x01
    1b92:	01 93       	st	Z+, r16
    1b94:	f9 83       	std	Y+1, r31	; 0x01
    1b96:	e8 83       	st	Y, r30
    1b98:	06 c0       	rjmp	.+12     	; 0x1ba6 <fputc+0x3c>
    1b9a:	e8 85       	ldd	r30, Y+8	; 0x08
    1b9c:	f9 85       	ldd	r31, Y+9	; 0x09
    1b9e:	80 2f       	mov	r24, r16
    1ba0:	09 95       	icall
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	31 f4       	brne	.+12     	; 0x1bb2 <fputc+0x48>
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	9f 83       	std	Y+7, r25	; 0x07
    1bae:	8e 83       	std	Y+6, r24	; 0x06
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <fputc+0x4c>
    1bb2:	0f ef       	ldi	r16, 0xFF	; 255
    1bb4:	1f ef       	ldi	r17, 0xFF	; 255
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	08 95       	ret

00001bc2 <printf>:
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e7 ee       	ldi	r30, 0xE7	; 231
    1bc8:	fd e0       	ldi	r31, 0x0D	; 13
    1bca:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__prologue_saves__+0x20>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	35 96       	adiw	r30, 0x05	; 5
    1bd2:	61 91       	ld	r22, Z+
    1bd4:	71 91       	ld	r23, Z+
    1bd6:	80 91 b4 06 	lds	r24, 0x06B4
    1bda:	90 91 b5 06 	lds	r25, 0x06B5
    1bde:	af 01       	movw	r20, r30
    1be0:	0e 94 cf 08 	call	0x119e	; 0x119e <vfprintf>
    1be4:	20 96       	adiw	r28, 0x00	; 0
    1be6:	e2 e0       	ldi	r30, 0x02	; 2
    1be8:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__epilogue_restores__+0x20>

00001bec <__ultoa_invert>:
    1bec:	fa 01       	movw	r30, r20
    1bee:	aa 27       	eor	r26, r26
    1bf0:	28 30       	cpi	r18, 0x08	; 8
    1bf2:	51 f1       	breq	.+84     	; 0x1c48 <__ultoa_invert+0x5c>
    1bf4:	20 31       	cpi	r18, 0x10	; 16
    1bf6:	81 f1       	breq	.+96     	; 0x1c58 <__ultoa_invert+0x6c>
    1bf8:	e8 94       	clt
    1bfa:	6f 93       	push	r22
    1bfc:	6e 7f       	andi	r22, 0xFE	; 254
    1bfe:	6e 5f       	subi	r22, 0xFE	; 254
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	8f 4f       	sbci	r24, 0xFF	; 255
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	af 4f       	sbci	r26, 0xFF	; 255
    1c08:	b1 e0       	ldi	r27, 0x01	; 1
    1c0a:	3e d0       	rcall	.+124    	; 0x1c88 <__ultoa_invert+0x9c>
    1c0c:	b4 e0       	ldi	r27, 0x04	; 4
    1c0e:	3c d0       	rcall	.+120    	; 0x1c88 <__ultoa_invert+0x9c>
    1c10:	67 0f       	add	r22, r23
    1c12:	78 1f       	adc	r23, r24
    1c14:	89 1f       	adc	r24, r25
    1c16:	9a 1f       	adc	r25, r26
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	68 0f       	add	r22, r24
    1c1c:	79 1f       	adc	r23, r25
    1c1e:	8a 1f       	adc	r24, r26
    1c20:	91 1d       	adc	r25, r1
    1c22:	a1 1d       	adc	r26, r1
    1c24:	6a 0f       	add	r22, r26
    1c26:	71 1d       	adc	r23, r1
    1c28:	81 1d       	adc	r24, r1
    1c2a:	91 1d       	adc	r25, r1
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	20 d0       	rcall	.+64     	; 0x1c70 <__ultoa_invert+0x84>
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <__ultoa_invert+0x48>
    1c32:	68 94       	set
    1c34:	3f 91       	pop	r19
    1c36:	2a e0       	ldi	r18, 0x0A	; 10
    1c38:	26 9f       	mul	r18, r22
    1c3a:	11 24       	eor	r1, r1
    1c3c:	30 19       	sub	r19, r0
    1c3e:	30 5d       	subi	r19, 0xD0	; 208
    1c40:	31 93       	st	Z+, r19
    1c42:	de f6       	brtc	.-74     	; 0x1bfa <__ultoa_invert+0xe>
    1c44:	cf 01       	movw	r24, r30
    1c46:	08 95       	ret
    1c48:	46 2f       	mov	r20, r22
    1c4a:	47 70       	andi	r20, 0x07	; 7
    1c4c:	40 5d       	subi	r20, 0xD0	; 208
    1c4e:	41 93       	st	Z+, r20
    1c50:	b3 e0       	ldi	r27, 0x03	; 3
    1c52:	0f d0       	rcall	.+30     	; 0x1c72 <__ultoa_invert+0x86>
    1c54:	c9 f7       	brne	.-14     	; 0x1c48 <__ultoa_invert+0x5c>
    1c56:	f6 cf       	rjmp	.-20     	; 0x1c44 <__ultoa_invert+0x58>
    1c58:	46 2f       	mov	r20, r22
    1c5a:	4f 70       	andi	r20, 0x0F	; 15
    1c5c:	40 5d       	subi	r20, 0xD0	; 208
    1c5e:	4a 33       	cpi	r20, 0x3A	; 58
    1c60:	18 f0       	brcs	.+6      	; 0x1c68 <__ultoa_invert+0x7c>
    1c62:	49 5d       	subi	r20, 0xD9	; 217
    1c64:	31 fd       	sbrc	r19, 1
    1c66:	40 52       	subi	r20, 0x20	; 32
    1c68:	41 93       	st	Z+, r20
    1c6a:	02 d0       	rcall	.+4      	; 0x1c70 <__ultoa_invert+0x84>
    1c6c:	a9 f7       	brne	.-22     	; 0x1c58 <__ultoa_invert+0x6c>
    1c6e:	ea cf       	rjmp	.-44     	; 0x1c44 <__ultoa_invert+0x58>
    1c70:	b4 e0       	ldi	r27, 0x04	; 4
    1c72:	a6 95       	lsr	r26
    1c74:	97 95       	ror	r25
    1c76:	87 95       	ror	r24
    1c78:	77 95       	ror	r23
    1c7a:	67 95       	ror	r22
    1c7c:	ba 95       	dec	r27
    1c7e:	c9 f7       	brne	.-14     	; 0x1c72 <__ultoa_invert+0x86>
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	61 05       	cpc	r22, r1
    1c84:	71 05       	cpc	r23, r1
    1c86:	08 95       	ret
    1c88:	9b 01       	movw	r18, r22
    1c8a:	ac 01       	movw	r20, r24
    1c8c:	0a 2e       	mov	r0, r26
    1c8e:	06 94       	lsr	r0
    1c90:	57 95       	ror	r21
    1c92:	47 95       	ror	r20
    1c94:	37 95       	ror	r19
    1c96:	27 95       	ror	r18
    1c98:	ba 95       	dec	r27
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__ultoa_invert+0xa2>
    1c9c:	62 0f       	add	r22, r18
    1c9e:	73 1f       	adc	r23, r19
    1ca0:	84 1f       	adc	r24, r20
    1ca2:	95 1f       	adc	r25, r21
    1ca4:	a0 1d       	adc	r26, r0
    1ca6:	08 95       	ret

00001ca8 <_exit>:
    1ca8:	f8 94       	cli

00001caa <__stop_program>:
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <__stop_program>
