
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000598  00800100  00002444  000024d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  00800698  00800698  00002a70  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000067c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000270a  00000000  00000000  00006a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd1  00000000  00000000  00009112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015fb  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000873  00000000  00000000  0000bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d12  00000000  00000000  0000c46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e17d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e4 e4       	ldi	r30, 0x44	; 68
     1ba:	f4 e2       	ldi	r31, 0x24	; 36
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a8 39       	cpi	r26, 0x98	; 152
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	a8 e9       	ldi	r26, 0x98	; 152
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ac 3c       	cpi	r26, 0xCC	; 204
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
     1dc:	0c 94 20 12 	jmp	0x2440	; 0x2440 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 98 06 	lds	r24, 0x0698
     262:	90 91 99 06 	lds	r25, 0x0699
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	91 ee       	ldi	r25, 0xE1	; 225
     27e:	a4 e0       	ldi	r26, 0x04	; 4
     280:	81 50       	subi	r24, 0x01	; 1
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	a0 40       	sbci	r26, 0x00	; 0
     286:	e1 f7       	brne	.-8      	; 0x280 <getDistance+0x18>
     288:	00 c0       	rjmp	.+0      	; 0x28a <getDistance+0x22>
     28a:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     28c:	60 91 a0 06 	lds	r22, 0x06A0
     290:	70 91 a1 06 	lds	r23, 0x06A1
     294:	80 91 a2 06 	lds	r24, 0x06A2
     298:	90 91 a3 06 	lds	r25, 0x06A3
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	5f e3       	ldi	r21, 0x3F	; 63
     2a4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     2a8:	29 e9       	ldi	r18, 0x99	; 153
     2aa:	3b eb       	ldi	r19, 0xBB	; 187
     2ac:	46 e1       	ldi	r20, 0x16	; 22
     2ae:	5b e3       	ldi	r21, 0x3B	; 59
     2b0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     2b4:	26 2f       	mov	r18, r22
     2b6:	37 2f       	mov	r19, r23
     2b8:	f8 2f       	mov	r31, r24
     2ba:	e9 2f       	mov	r30, r25
     2bc:	46 2f       	mov	r20, r22
     2be:	57 2f       	mov	r21, r23
     2c0:	68 2f       	mov	r22, r24
     2c2:	79 2f       	mov	r23, r25
     2c4:	40 93 00 01 	sts	0x0100, r20
     2c8:	50 93 01 01 	sts	0x0101, r21
     2cc:	60 93 02 01 	sts	0x0102, r22
     2d0:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2d4:	82 2f       	mov	r24, r18
     2d6:	93 2f       	mov	r25, r19
     2d8:	af 2f       	mov	r26, r31
     2da:	be 2f       	mov	r27, r30
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	08 95       	ret

000002e2 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2e2:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e6:	68 2f       	mov	r22, r24
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 96 09 	call	0x132c	; 0x132c <__floatsisf>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 ea       	ldi	r20, 0xA0	; 160
     2f8:	5b e3       	ldi	r21, 0x3B	; 59
     2fa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     2fe:	26 2f       	mov	r18, r22
     300:	37 2f       	mov	r19, r23
     302:	f8 2f       	mov	r31, r24
     304:	e9 2f       	mov	r30, r25
     306:	46 2f       	mov	r20, r22
     308:	57 2f       	mov	r21, r23
     30a:	68 2f       	mov	r22, r24
     30c:	79 2f       	mov	r23, r25
     30e:	40 93 a8 06 	sts	0x06A8, r20
     312:	50 93 a9 06 	sts	0x06A9, r21
     316:	60 93 aa 06 	sts	0x06AA, r22
     31a:	70 93 ab 06 	sts	0x06AB, r23
	ADCRes = (Volt - 0.5) * 100;
     31e:	82 2f       	mov	r24, r18
     320:	93 2f       	mov	r25, r19
     322:	af 2f       	mov	r26, r31
     324:	be 2f       	mov	r27, r30
     326:	bc 01       	movw	r22, r24
     328:	cd 01       	movw	r24, r26
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 2b 09 	call	0x1256	; 0x1256 <__subsf3>
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	48 ec       	ldi	r20, 0xC8	; 200
     33c:	52 e4       	ldi	r21, 0x42	; 66
     33e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     342:	26 2f       	mov	r18, r22
     344:	37 2f       	mov	r19, r23
     346:	f8 2f       	mov	r31, r24
     348:	e9 2f       	mov	r30, r25
     34a:	46 2f       	mov	r20, r22
     34c:	57 2f       	mov	r21, r23
     34e:	68 2f       	mov	r22, r24
     350:	79 2f       	mov	r23, r25
     352:	40 93 cc 06 	sts	0x06CC, r20
     356:	50 93 cd 06 	sts	0x06CD, r21
     35a:	60 93 ce 06 	sts	0x06CE, r22
     35e:	70 93 cf 06 	sts	0x06CF, r23
	return ADCRes;
}
     362:	82 2f       	mov	r24, r18
     364:	93 2f       	mov	r25, r19
     366:	af 2f       	mov	r26, r31
     368:	be 2f       	mov	r27, r30
     36a:	bc 01       	movw	r22, r24
     36c:	cd 01       	movw	r24, r26
     36e:	08 95       	ret

00000370 <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     370:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     374:	08 95       	ret

00000376 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     37a:	9c e9       	ldi	r25, 0x9C	; 156
     37c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     37e:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     382:	85 b5       	in	r24, 0x25	; 37
     384:	85 60       	ori	r24, 0x05	; 5
     386:	85 bd       	out	0x25, r24	; 37
}
     388:	08 95       	ret

0000038a <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     38a:	0e 94 65 08 	call	0x10ca	; 0x10ca <init_scherm_ports>
	init_timer();
     38e:	0e 94 bb 01 	call	0x376	; 0x376 <init_timer>
	ser_init();
     392:	0e 94 de 07 	call	0xfbc	; 0xfbc <ser_init>
	ADC_init();
     396:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     39a:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     39e:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     3a2:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     3a4:	0e 94 12 05 	call	0xa24	; 0xa24 <protocolCom>
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <main+0x1a>

000003aa <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
	//sei();
	
	extraTime1++;
     3b8:	80 91 9a 06 	lds	r24, 0x069A
     3bc:	90 91 9b 06 	lds	r25, 0x069B
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 9b 06 	sts	0x069B, r25
     3c6:	80 93 9a 06 	sts	0x069A, r24
	if(extraTime1>100){
     3ca:	80 91 9a 06 	lds	r24, 0x069A
     3ce:	90 91 9b 06 	lds	r25, 0x069B
     3d2:	85 36       	cpi	r24, 0x65	; 101
     3d4:	91 05       	cpc	r25, r1
     3d6:	6c f0       	brlt	.+26     	; 0x3f2 <__vector_14+0x48>
		timerVariable++;
     3d8:	80 91 98 06 	lds	r24, 0x0698
     3dc:	90 91 99 06 	lds	r25, 0x0699
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	90 93 99 06 	sts	0x0699, r25
     3e6:	80 93 98 06 	sts	0x0698, r24
		extraTime1 = 0;
     3ea:	10 92 9b 06 	sts	0x069B, r1
     3ee:	10 92 9a 06 	sts	0x069A, r1
	}
	extraTime++;
     3f2:	80 91 9c 06 	lds	r24, 0x069C
     3f6:	90 91 9d 06 	lds	r25, 0x069D
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	90 93 9d 06 	sts	0x069D, r25
     400:	80 93 9c 06 	sts	0x069C, r24
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
	}*/
}
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ef 93       	push	r30
     436:	ff 93       	push	r31
	if(i == 1)
     438:	80 91 9e 06 	lds	r24, 0x069E
     43c:	90 91 9f 06 	lds	r25, 0x069F
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	91 05       	cpc	r25, r1
     444:	d1 f4       	brne	.+52     	; 0x47a <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     446:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     44a:	c4 e8       	ldi	r28, 0x84	; 132
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	68 81       	ld	r22, Y
     450:	79 81       	ldd	r23, Y+1	; 0x01
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	80 93 a0 06 	sts	0x06A0, r24
     462:	90 93 a1 06 	sts	0x06A1, r25
     466:	a0 93 a2 06 	sts	0x06A2, r26
     46a:	b0 93 a3 06 	sts	0x06A3, r27
		TCNT1 = 0; //Reset duration
     46e:	19 82       	std	Y+1, r1	; 0x01
     470:	18 82       	st	Y, r1
		i = 0; //Reset counter
     472:	10 92 9f 06 	sts	0x069F, r1
     476:	10 92 9e 06 	sts	0x069E, r1
	}

	if(i==0)
     47a:	80 91 9e 06 	lds	r24, 0x069E
     47e:	90 91 9f 06 	lds	r25, 0x069F
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	59 f4       	brne	.+22     	; 0x49c <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     486:	e1 e8       	ldi	r30, 0x81	; 129
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	80 83       	st	Z, r24
		i = 1;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 9f 06 	sts	0x069F, r25
     498:	80 93 9e 06 	sts	0x069E, r24
	}
     49c:	ff 91       	pop	r31
     49e:	ef 91       	pop	r30
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	bf 91       	pop	r27
     4a6:	af 91       	pop	r26
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	7f 91       	pop	r23
     4ae:	6f 91       	pop	r22
     4b0:	5f 91       	pop	r21
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4ca:	c0 91 a4 06 	lds	r28, 0x06A4
     4ce:	d0 91 a5 06 	lds	r29, 0x06A5
     4d2:	20 91 1c 01 	lds	r18, 0x011C
     4d6:	30 91 1d 01 	lds	r19, 0x011D
     4da:	2c 17       	cp	r18, r28
     4dc:	3d 07       	cpc	r19, r29
     4de:	8c f0       	brlt	.+34     	; 0x502 <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4e0:	8c 01       	movw	r16, r24
     4e2:	0c 0f       	add	r16, r28
     4e4:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     4e6:	f8 01       	movw	r30, r16
     4e8:	61 91       	ld	r22, Z+
     4ea:	8f 01       	movw	r16, r30
     4ec:	ce 01       	movw	r24, r28
     4ee:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4f2:	21 96       	adiw	r28, 0x01	; 1
     4f4:	80 91 1c 01 	lds	r24, 0x011C
     4f8:	90 91 1d 01 	lds	r25, 0x011D
     4fc:	8c 17       	cp	r24, r28
     4fe:	9d 07       	cpc	r25, r29
     500:	94 f7       	brge	.-28     	; 0x4e6 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	08 95       	ret

0000050c <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     514:	c0 91 a4 06 	lds	r28, 0x06A4
     518:	d0 91 a5 06 	lds	r29, 0x06A5
     51c:	80 91 1c 01 	lds	r24, 0x011C
     520:	90 91 1d 01 	lds	r25, 0x011D
     524:	8c 17       	cp	r24, r28
     526:	9d 07       	cpc	r25, r29
     528:	8c f0       	brlt	.+34     	; 0x54c <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     52a:	8e 01       	movw	r16, r28
     52c:	02 5f       	subi	r16, 0xF2	; 242
     52e:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     530:	ce 01       	movw	r24, r28
     532:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     536:	f8 01       	movw	r30, r16
     538:	81 93       	st	Z+, r24
     53a:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     53c:	21 96       	adiw	r28, 0x01	; 1
     53e:	80 91 1c 01 	lds	r24, 0x011C
     542:	90 91 1d 01 	lds	r25, 0x011D
     546:	8c 17       	cp	r24, r28
     548:	9d 07       	cpc	r25, r29
     54a:	94 f7       	brge	.-28     	; 0x530 <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     54c:	8e e0       	ldi	r24, 0x0E	; 14
     54e:	97 e0       	ldi	r25, 0x07	; 7
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     564:	c0 91 0e 01 	lds	r28, 0x010E
     568:	d0 91 0f 01 	lds	r29, 0x010F
     56c:	80 91 1a 01 	lds	r24, 0x011A
     570:	90 91 1b 01 	lds	r25, 0x011B
     574:	99 23       	and	r25, r25
     576:	cc f0       	brlt	.+50     	; 0x5aa <set_Locatie+0x50>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     57c:	f8 01       	movw	r30, r16
     57e:	e8 0f       	add	r30, r24
     580:	f9 1f       	adc	r31, r25
     582:	ce 01       	movw	r24, r28
     584:	60 81       	ld	r22, Z
     586:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     58a:	21 96       	adiw	r28, 0x01	; 1
     58c:	80 91 0e 01 	lds	r24, 0x010E
     590:	90 91 0f 01 	lds	r25, 0x010F
     594:	9e 01       	movw	r18, r28
     596:	28 1b       	sub	r18, r24
     598:	39 0b       	sbc	r19, r25
     59a:	c9 01       	movw	r24, r18
     59c:	20 91 1a 01 	lds	r18, 0x011A
     5a0:	30 91 1b 01 	lds	r19, 0x011B
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	4c f7       	brge	.-46     	; 0x57c <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5c4:	e0 90 0e 01 	lds	r14, 0x010E
     5c8:	f0 90 0f 01 	lds	r15, 0x010F
     5cc:	80 91 1a 01 	lds	r24, 0x011A
     5d0:	90 91 1b 01 	lds	r25, 0x011B
     5d4:	99 23       	and	r25, r25
     5d6:	ec f0       	brlt	.+58     	; 0x612 <get_Locatie+0x5e>
     5d8:	01 e0       	ldi	r16, 0x01	; 1
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     5e0:	0f 2e       	mov	r0, r31
     5e2:	ff ed       	ldi	r31, 0xDF	; 223
     5e4:	cf 2e       	mov	r12, r31
     5e6:	f6 e0       	ldi	r31, 0x06	; 6
     5e8:	df 2e       	mov	r13, r31
     5ea:	f0 2d       	mov	r31, r0
     5ec:	c7 01       	movw	r24, r14
     5ee:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     5f2:	cc 0d       	add	r28, r12
     5f4:	dd 1d       	adc	r29, r13
     5f6:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5f8:	08 94       	sec
     5fa:	e1 1c       	adc	r14, r1
     5fc:	f1 1c       	adc	r15, r1
     5fe:	e8 01       	movw	r28, r16
     600:	0f 5f       	subi	r16, 0xFF	; 255
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	80 91 1a 01 	lds	r24, 0x011A
     608:	90 91 1b 01 	lds	r25, 0x011B
     60c:	8c 17       	cp	r24, r28
     60e:	9d 07       	cpc	r25, r29
     610:	6c f7       	brge	.-38     	; 0x5ec <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     612:	8f ed       	ldi	r24, 0xDF	; 223
     614:	96 e0       	ldi	r25, 0x06	; 6
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	08 95       	ret

00000628 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     632:	c0 91 0c 01 	lds	r28, 0x010C
     636:	d0 91 0d 01 	lds	r29, 0x010D
     63a:	80 91 18 01 	lds	r24, 0x0118
     63e:	90 91 19 01 	lds	r25, 0x0119
     642:	99 23       	and	r25, r25
     644:	cc f0       	brlt	.+50     	; 0x678 <set_Versie+0x50>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     64a:	f8 01       	movw	r30, r16
     64c:	e8 0f       	add	r30, r24
     64e:	f9 1f       	adc	r31, r25
     650:	ce 01       	movw	r24, r28
     652:	60 81       	ld	r22, Z
     654:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     658:	21 96       	adiw	r28, 0x01	; 1
     65a:	80 91 0c 01 	lds	r24, 0x010C
     65e:	90 91 0d 01 	lds	r25, 0x010D
     662:	9e 01       	movw	r18, r28
     664:	28 1b       	sub	r18, r24
     666:	39 0b       	sbc	r19, r25
     668:	c9 01       	movw	r24, r18
     66a:	20 91 18 01 	lds	r18, 0x0118
     66e:	30 91 19 01 	lds	r19, 0x0119
     672:	28 17       	cp	r18, r24
     674:	39 07       	cpc	r19, r25
     676:	4c f7       	brge	.-46     	; 0x64a <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret

00000682 <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     692:	e0 90 0c 01 	lds	r14, 0x010C
     696:	f0 90 0d 01 	lds	r15, 0x010D
     69a:	80 91 18 01 	lds	r24, 0x0118
     69e:	90 91 19 01 	lds	r25, 0x0119
     6a2:	99 23       	and	r25, r25
     6a4:	ec f0       	brlt	.+58     	; 0x6e0 <get_Versie+0x5e>
     6a6:	01 e0       	ldi	r16, 0x01	; 1
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	c0 e0       	ldi	r28, 0x00	; 0
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     6ae:	0f 2e       	mov	r0, r31
     6b0:	fa e3       	ldi	r31, 0x3A	; 58
     6b2:	cf 2e       	mov	r12, r31
     6b4:	f7 e0       	ldi	r31, 0x07	; 7
     6b6:	df 2e       	mov	r13, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	c7 01       	movw	r24, r14
     6bc:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     6c0:	cc 0d       	add	r28, r12
     6c2:	dd 1d       	adc	r29, r13
     6c4:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     6c6:	08 94       	sec
     6c8:	e1 1c       	adc	r14, r1
     6ca:	f1 1c       	adc	r15, r1
     6cc:	e8 01       	movw	r28, r16
     6ce:	0f 5f       	subi	r16, 0xFF	; 255
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	80 91 18 01 	lds	r24, 0x0118
     6d6:	90 91 19 01 	lds	r25, 0x0119
     6da:	8c 17       	cp	r24, r28
     6dc:	9d 07       	cpc	r25, r29
     6de:	6c f7       	brge	.-38     	; 0x6ba <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     6e0:	8a e3       	ldi	r24, 0x3A	; 58
     6e2:	97 e0       	ldi	r25, 0x07	; 7
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	08 95       	ret

000006f6 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     700:	c0 91 0a 01 	lds	r28, 0x010A
     704:	d0 91 0b 01 	lds	r29, 0x010B
     708:	80 91 16 01 	lds	r24, 0x0116
     70c:	90 91 17 01 	lds	r25, 0x0117
     710:	99 23       	and	r25, r25
     712:	cc f0       	brlt	.+50     	; 0x746 <set_grensTemp+0x50>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     718:	f8 01       	movw	r30, r16
     71a:	e8 0f       	add	r30, r24
     71c:	f9 1f       	adc	r31, r25
     71e:	ce 01       	movw	r24, r28
     720:	60 81       	ld	r22, Z
     722:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     726:	21 96       	adiw	r28, 0x01	; 1
     728:	80 91 0a 01 	lds	r24, 0x010A
     72c:	90 91 0b 01 	lds	r25, 0x010B
     730:	9e 01       	movw	r18, r28
     732:	28 1b       	sub	r18, r24
     734:	39 0b       	sbc	r19, r25
     736:	c9 01       	movw	r24, r18
     738:	20 91 16 01 	lds	r18, 0x0116
     73c:	30 91 17 01 	lds	r19, 0x0117
     740:	28 17       	cp	r18, r24
     742:	39 07       	cpc	r19, r25
     744:	4c f7       	brge	.-46     	; 0x718 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     760:	e0 90 0a 01 	lds	r14, 0x010A
     764:	f0 90 0b 01 	lds	r15, 0x010B
     768:	80 91 16 01 	lds	r24, 0x0116
     76c:	90 91 17 01 	lds	r25, 0x0117
     770:	99 23       	and	r25, r25
     772:	ec f0       	brlt	.+58     	; 0x7ae <get_grensTemp+0x5e>
     774:	01 e0       	ldi	r16, 0x01	; 1
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	c0 e0       	ldi	r28, 0x00	; 0
     77a:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     77c:	0f 2e       	mov	r0, r31
     77e:	fb e0       	ldi	r31, 0x0B	; 11
     780:	cf 2e       	mov	r12, r31
     782:	f7 e0       	ldi	r31, 0x07	; 7
     784:	df 2e       	mov	r13, r31
     786:	f0 2d       	mov	r31, r0
     788:	c7 01       	movw	r24, r14
     78a:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     78e:	cc 0d       	add	r28, r12
     790:	dd 1d       	adc	r29, r13
     792:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     794:	08 94       	sec
     796:	e1 1c       	adc	r14, r1
     798:	f1 1c       	adc	r15, r1
     79a:	e8 01       	movw	r28, r16
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	80 91 16 01 	lds	r24, 0x0116
     7a4:	90 91 17 01 	lds	r25, 0x0117
     7a8:	8c 17       	cp	r24, r28
     7aa:	9d 07       	cpc	r25, r29
     7ac:	6c f7       	brge	.-38     	; 0x788 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     7ae:	8b e0       	ldi	r24, 0x0B	; 11
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7ce:	c0 91 08 01 	lds	r28, 0x0108
     7d2:	d0 91 09 01 	lds	r29, 0x0109
     7d6:	80 91 14 01 	lds	r24, 0x0114
     7da:	90 91 15 01 	lds	r25, 0x0115
     7de:	99 23       	and	r25, r25
     7e0:	cc f0       	brlt	.+50     	; 0x814 <set_grensLicht+0x50>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     7e6:	f8 01       	movw	r30, r16
     7e8:	e8 0f       	add	r30, r24
     7ea:	f9 1f       	adc	r31, r25
     7ec:	ce 01       	movw	r24, r28
     7ee:	60 81       	ld	r22, Z
     7f0:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7f4:	21 96       	adiw	r28, 0x01	; 1
     7f6:	80 91 08 01 	lds	r24, 0x0108
     7fa:	90 91 09 01 	lds	r25, 0x0109
     7fe:	9e 01       	movw	r18, r28
     800:	28 1b       	sub	r18, r24
     802:	39 0b       	sbc	r19, r25
     804:	c9 01       	movw	r24, r18
     806:	20 91 14 01 	lds	r18, 0x0114
     80a:	30 91 15 01 	lds	r19, 0x0115
     80e:	28 17       	cp	r18, r24
     810:	39 07       	cpc	r19, r25
     812:	4c f7       	brge	.-46     	; 0x7e6 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     82a:	e0 90 08 01 	lds	r14, 0x0108
     82e:	f0 90 09 01 	lds	r15, 0x0109
     832:	80 91 14 01 	lds	r24, 0x0114
     836:	90 91 15 01 	lds	r25, 0x0115
     83a:	99 23       	and	r25, r25
     83c:	bc f0       	brlt	.+46     	; 0x86c <get_grensLight+0x4e>
     83e:	01 e0       	ldi	r16, 0x01	; 1
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	c0 e0       	ldi	r28, 0x00	; 0
     844:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     846:	c7 01       	movw	r24, r14
     848:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     84c:	ce 5b       	subi	r28, 0xBE	; 190
     84e:	d8 4f       	sbci	r29, 0xF8	; 248
     850:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     852:	08 94       	sec
     854:	e1 1c       	adc	r14, r1
     856:	f1 1c       	adc	r15, r1
     858:	e8 01       	movw	r28, r16
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	80 91 14 01 	lds	r24, 0x0114
     862:	90 91 15 01 	lds	r25, 0x0115
     866:	8c 17       	cp	r24, r28
     868:	9d 07       	cpc	r25, r29
     86a:	6c f7       	brge	.-38     	; 0x846 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     86c:	82 e4       	ldi	r24, 0x42	; 66
     86e:	97 e0       	ldi	r25, 0x07	; 7
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     888:	c0 91 06 01 	lds	r28, 0x0106
     88c:	d0 91 07 01 	lds	r29, 0x0107
     890:	80 91 12 01 	lds	r24, 0x0112
     894:	90 91 13 01 	lds	r25, 0x0113
     898:	99 23       	and	r25, r25
     89a:	cc f0       	brlt	.+50     	; 0x8ce <set_minUnroll+0x50>
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     8a0:	f8 01       	movw	r30, r16
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	ce 01       	movw	r24, r28
     8a8:	60 81       	ld	r22, Z
     8aa:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8ae:	21 96       	adiw	r28, 0x01	; 1
     8b0:	80 91 06 01 	lds	r24, 0x0106
     8b4:	90 91 07 01 	lds	r25, 0x0107
     8b8:	9e 01       	movw	r18, r28
     8ba:	28 1b       	sub	r18, r24
     8bc:	39 0b       	sbc	r19, r25
     8be:	c9 01       	movw	r24, r18
     8c0:	20 91 12 01 	lds	r18, 0x0112
     8c4:	30 91 13 01 	lds	r19, 0x0113
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	4c f7       	brge	.-46     	; 0x8a0 <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8e4:	e0 90 06 01 	lds	r14, 0x0106
     8e8:	f0 90 07 01 	lds	r15, 0x0107
     8ec:	80 91 12 01 	lds	r24, 0x0112
     8f0:	90 91 13 01 	lds	r25, 0x0113
     8f4:	99 23       	and	r25, r25
     8f6:	bc f0       	brlt	.+46     	; 0x926 <__stack+0x27>
     8f8:	01 e0       	ldi	r16, 0x01	; 1
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     900:	c7 01       	movw	r24, r14
     902:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     906:	c0 53       	subi	r28, 0x30	; 48
     908:	d9 4f       	sbci	r29, 0xF9	; 249
     90a:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     90c:	08 94       	sec
     90e:	e1 1c       	adc	r14, r1
     910:	f1 1c       	adc	r15, r1
     912:	e8 01       	movw	r28, r16
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	80 91 12 01 	lds	r24, 0x0112
     91c:	90 91 13 01 	lds	r25, 0x0113
     920:	8c 17       	cp	r24, r28
     922:	9d 07       	cpc	r25, r29
     924:	6c f7       	brge	.-38     	; 0x900 <__stack+0x1>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     926:	80 ed       	ldi	r24, 0xD0	; 208
     928:	96 e0       	ldi	r25, 0x06	; 6
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	08 95       	ret

00000938 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     942:	c0 91 04 01 	lds	r28, 0x0104
     946:	d0 91 05 01 	lds	r29, 0x0105
     94a:	80 91 10 01 	lds	r24, 0x0110
     94e:	90 91 11 01 	lds	r25, 0x0111
     952:	99 23       	and	r25, r25
     954:	cc f0       	brlt	.+50     	; 0x988 <set_maxUnroll+0x50>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     95a:	f8 01       	movw	r30, r16
     95c:	e8 0f       	add	r30, r24
     95e:	f9 1f       	adc	r31, r25
     960:	ce 01       	movw	r24, r28
     962:	60 81       	ld	r22, Z
     964:	0e 94 0b 12 	call	0x2416	; 0x2416 <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     968:	21 96       	adiw	r28, 0x01	; 1
     96a:	80 91 04 01 	lds	r24, 0x0104
     96e:	90 91 05 01 	lds	r25, 0x0105
     972:	9e 01       	movw	r18, r28
     974:	28 1b       	sub	r18, r24
     976:	39 0b       	sbc	r19, r25
     978:	c9 01       	movw	r24, r18
     97a:	20 91 10 01 	lds	r18, 0x0110
     97e:	30 91 11 01 	lds	r19, 0x0111
     982:	28 17       	cp	r18, r24
     984:	39 07       	cpc	r19, r25
     986:	4c f7       	brge	.-46     	; 0x95a <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     99e:	e0 90 04 01 	lds	r14, 0x0104
     9a2:	f0 90 05 01 	lds	r15, 0x0105
     9a6:	80 91 10 01 	lds	r24, 0x0110
     9aa:	90 91 11 01 	lds	r25, 0x0111
     9ae:	99 23       	and	r25, r25
     9b0:	bc f0       	brlt	.+46     	; 0x9e0 <get_maxUnroll+0x4e>
     9b2:	01 e0       	ldi	r16, 0x01	; 1
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	c0 e0       	ldi	r28, 0x00	; 0
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     9ba:	c7 01       	movw	r24, r14
     9bc:	0e 94 03 12 	call	0x2406	; 0x2406 <__eerd_byte_m328p>
     9c0:	c0 59       	subi	r28, 0x90	; 144
     9c2:	d8 4f       	sbci	r29, 0xF8	; 248
     9c4:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9c6:	08 94       	sec
     9c8:	e1 1c       	adc	r14, r1
     9ca:	f1 1c       	adc	r15, r1
     9cc:	e8 01       	movw	r28, r16
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	80 91 10 01 	lds	r24, 0x0110
     9d6:	90 91 11 01 	lds	r25, 0x0111
     9da:	8c 17       	cp	r24, r28
     9dc:	9d 07       	cpc	r25, r29
     9de:	6c f7       	brge	.-38     	; 0x9ba <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     9e0:	80 e7       	ldi	r24, 0x70	; 112
     9e2:	97 e0       	ldi	r25, 0x07	; 7
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	08 95       	ret

000009f2 <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     9f2:	84 ea       	ldi	r24, 0xA4	; 164
     9f4:	97 e0       	ldi	r25, 0x07	; 7
     9f6:	68 e2       	ldi	r22, 0x28	; 40
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	0e 94 09 11 	call	0x2212	; 0x2212 <strchr>
	p1[strlen(p1) -1] = '\0';
     9fe:	e8 2f       	mov	r30, r24
     a00:	f9 2f       	mov	r31, r25
     a02:	df 01       	movw	r26, r30
     a04:	0d 90       	ld	r0, X+
     a06:	00 20       	and	r0, r0
     a08:	e9 f7       	brne	.-6      	; 0xa04 <set_substring+0x12>
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	ae 1b       	sub	r26, r30
     a0e:	bf 0b       	sbc	r27, r31
     a10:	a8 0f       	add	r26, r24
     a12:	b9 1f       	adc	r27, r25
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	1c 92       	st	X, r1
	substring = p1 +1;
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	90 93 a1 07 	sts	0x07A1, r25
     a1e:	80 93 a0 07 	sts	0x07A0, r24
     a22:	08 95       	ret

00000a24 <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     a24:	2f 92       	push	r2
     a26:	3f 92       	push	r3
     a28:	4f 92       	push	r4
     a2a:	5f 92       	push	r5
     a2c:	6f 92       	push	r6
     a2e:	7f 92       	push	r7
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
	ser_write("Please enter ID");
     a48:	8e e1       	ldi	r24, 0x1E	; 30
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     a50:	c4 ea       	ldi	r28, 0xA4	; 164
     a52:	d7 e0       	ldi	r29, 0x07	; 7
     a54:	ce 01       	movw	r24, r28
     a56:	6e e1       	ldi	r22, 0x1E	; 30
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 26 08 	call	0x104c	; 0x104c <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     a60:	85 e1       	ldi	r24, 0x15	; 21
     a62:	96 e0       	ldi	r25, 0x06	; 6
     a64:	be 01       	movw	r22, r28
     a66:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     a6a:	28 2f       	mov	r18, r24
     a6c:	39 2f       	mov	r19, r25
	if(ret |= 0){
     a6e:	21 15       	cp	r18, r1
     a70:	31 05       	cpc	r19, r1
     a72:	29 f0       	breq	.+10     	; 0xa7e <protocolCom+0x5a>
		ser_writeln("504: Verkeerde ID");
     a74:	8e e2       	ldi	r24, 0x2E	; 46
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     a7c:	8c c2       	rjmp	.+1304   	; 0xf96 <protocolCom+0x572>
	}
	else{
		printf("200 kersthaan \n");
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 77 11 	call	0x22ee	; 0x22ee <puts>
		ser_writeln("Please enter version");
     a86:	8f e4       	ldi	r24, 0x4F	; 79
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
		ser_readln(in_buf, sizeof(in_buf), 1);
     a8e:	c4 ea       	ldi	r28, 0xA4	; 164
     a90:	d7 e0       	ldi	r29, 0x07	; 7
     a92:	ce 01       	movw	r24, r28
     a94:	6e e1       	ldi	r22, 0x1E	; 30
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	0e 94 26 08 	call	0x104c	; 0x104c <ser_readln>
		char* c = get_Versie();
     a9e:	0e 94 41 03 	call	0x682	; 0x682 <get_Versie>
		double x;
		x = strtod(c, NULL);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <strtod>
		if(strcmp(get_Versie(), in_buf)){
     aaa:	0e 94 41 03 	call	0x682	; 0x682 <get_Versie>
     aae:	be 01       	movw	r22, r28
     ab0:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     ab4:	28 2f       	mov	r18, r24
     ab6:	39 2f       	mov	r19, r25
     ab8:	21 15       	cp	r18, r1
     aba:	31 05       	cpc	r19, r1
     abc:	29 f0       	breq	.+10     	; 0xac8 <protocolCom+0xa4>
			ser_writeln("504 Wrong version");
     abe:	84 e6       	ldi	r24, 0x64	; 100
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     ac6:	67 c2       	rjmp	.+1230   	; 0xf96 <protocolCom+0x572>
		}
		else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     ac8:	06 e7       	ldi	r16, 0x76	; 118
     aca:	11 e0       	ldi	r17, 0x01	; 1
				ser_readln(in_buf, sizeof(in_buf), 1);
     acc:	c4 ea       	ldi	r28, 0xA4	; 164
     ace:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ad0:	0f 2e       	mov	r0, r31
     ad2:	ff e8       	ldi	r31, 0x8F	; 143
     ad4:	ef 2e       	mov	r14, r31
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     adc:	0f 2e       	mov	r0, r31
     ade:	f7 eb       	ldi	r31, 0xB7	; 183
     ae0:	af 2e       	mov	r10, r31
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	bf 2e       	mov	r11, r31
     ae6:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ae8:	0f 2e       	mov	r0, r31
     aea:	fe ed       	ldi	r31, 0xDE	; 222
     aec:	cf 2e       	mov	r12, r31
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	df 2e       	mov	r13, r31
     af2:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     af4:	0f 2e       	mov	r0, r31
     af6:	f4 ef       	ldi	r31, 0xF4	; 244
     af8:	8f 2e       	mov	r8, r31
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	9f 2e       	mov	r9, r31
     afe:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     b00:	0f 2e       	mov	r0, r31
     b02:	f0 e1       	ldi	r31, 0x10	; 16
     b04:	6f 2e       	mov	r6, r31
     b06:	f2 e0       	ldi	r31, 0x02	; 2
     b08:	7f 2e       	mov	r7, r31
     b0a:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     b0c:	0f 2e       	mov	r0, r31
     b0e:	ff e2       	ldi	r31, 0x2F	; 47
     b10:	4f 2e       	mov	r4, r31
     b12:	f2 e0       	ldi	r31, 0x02	; 2
     b14:	5f 2e       	mov	r5, r31
     b16:	f0 2d       	mov	r31, r0
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     b18:	0f 2e       	mov	r0, r31
     b1a:	f7 e5       	ldi	r31, 0x57	; 87
     b1c:	2f 2e       	mov	r2, r31
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	3f 2e       	mov	r3, r31
     b22:	f0 2d       	mov	r31, r0
		if(strcmp(get_Versie(), in_buf)){
			ser_writeln("504 Wrong version");
		}
		else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
				ser_readln(in_buf, sizeof(in_buf), 1);
     b2a:	ce 01       	movw	r24, r28
     b2c:	6e e1       	ldi	r22, 0x1E	; 30
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	41 e0       	ldi	r20, 0x01	; 1
     b32:	0e 94 26 08 	call	0x104c	; 0x104c <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b36:	c7 01       	movw	r24, r14
     b38:	be 01       	movw	r22, r28
     b3a:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     b3e:	28 2f       	mov	r18, r24
     b40:	39 2f       	mov	r19, r25
     b42:	21 15       	cp	r18, r1
     b44:	31 05       	cpc	r19, r1
     b46:	a1 f4       	brne	.+40     	; 0xb70 <protocolCom+0x14c>
				if ((get_unrollStatus() % 2) == 1){
     b48:	0e 94 60 08 	call	0x10c0	; 0x10c0 <get_unrollStatus>
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__divmodhi4>
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	21 f4       	brne	.+8      	; 0xb62 <protocolCom+0x13e>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     b5a:	86 e9       	ldi	r24, 0x96	; 150
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     b62:	0e 94 60 08 	call	0x10c0	; 0x10c0 <get_unrollStatus>
     b66:	80 fd       	sbrc	r24, 0
     b68:	1f c0       	rjmp	.+62     	; 0xba8 <protocolCom+0x184>
					uitrollen();
     b6a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <uitrollen>
     b6e:	1c c0       	rjmp	.+56     	; 0xba8 <protocolCom+0x184>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b70:	c5 01       	movw	r24, r10
     b72:	be 01       	movw	r22, r28
     b74:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     b78:	28 2f       	mov	r18, r24
     b7a:	39 2f       	mov	r19, r25
     b7c:	21 15       	cp	r18, r1
     b7e:	31 05       	cpc	r19, r1
     b80:	99 f4       	brne	.+38     	; 0xba8 <protocolCom+0x184>
				if ((get_unrollStatus() % 2) == 0){
     b82:	0e 94 60 08 	call	0x10c0	; 0x10c0 <get_unrollStatus>
     b86:	80 fd       	sbrc	r24, 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <protocolCom+0x16e>
					ser_writeln("501 Zonnescherm is al opgerold!");
     b8a:	8e eb       	ldi	r24, 0xBE	; 190
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     b92:	0e 94 60 08 	call	0x10c0	; 0x10c0 <get_unrollStatus>
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__divmodhi4>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	91 05       	cpc	r25, r1
     ba2:	11 f4       	brne	.+4      	; 0xba8 <protocolCom+0x184>
					oprollen();
     ba4:	0e 94 cd 08 	call	0x119a	; 0x119a <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ba8:	c6 01       	movw	r24, r12
     baa:	be 01       	movw	r22, r28
     bac:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     bb0:	28 2f       	mov	r18, r24
     bb2:	39 2f       	mov	r19, r25
     bb4:	21 15       	cp	r18, r1
     bb6:	31 05       	cpc	r19, r1
     bb8:	b9 f4       	brne	.+46     	; 0xbe8 <protocolCom+0x1c4>
				printf("202 Status: %i", get_unrollStatus());
     bba:	0e 94 60 08 	call	0x10c0	; 0x10c0 <get_unrollStatus>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <protocolCom+0x19c>
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <protocolCom+0x19e>
     bc2:	25 ee       	ldi	r18, 0xE5	; 229
     bc4:	31 e0       	ldi	r19, 0x01	; 1
     bc6:	ad b7       	in	r26, 0x3d	; 61
     bc8:	be b7       	in	r27, 0x3e	; 62
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	3c 93       	st	X, r19
     bce:	2e 93       	st	-X, r18
     bd0:	11 97       	sbiw	r26, 0x01	; 1
     bd2:	14 96       	adiw	r26, 0x04	; 4
     bd4:	9c 93       	st	X, r25
     bd6:	8e 93       	st	-X, r24
     bd8:	13 97       	sbiw	r26, 0x03	; 3
     bda:	0e 94 62 11 	call	0x22c4	; 0x22c4 <printf>
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	9e cf       	rjmp	.-196    	; 0xb24 <protocolCom+0x100>
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     be8:	c4 01       	movw	r24, r8
     bea:	be 01       	movw	r22, r28
     bec:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     bf0:	28 2f       	mov	r18, r24
     bf2:	39 2f       	mov	r19, r25
     bf4:	21 15       	cp	r18, r1
     bf6:	31 05       	cpc	r19, r1
     bf8:	e1 f4       	brne	.+56     	; 0xc32 <protocolCom+0x20e>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bfa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getTemp>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	00 d0       	rcall	.+0      	; 0xc04 <protocolCom+0x1e0>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <protocolCom+0x1e2>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <protocolCom+0x1e4>
     c08:	2d ef       	ldi	r18, 0xFD	; 253
     c0a:	31 e0       	ldi	r19, 0x01	; 1
     c0c:	ed b7       	in	r30, 0x3d	; 61
     c0e:	fe b7       	in	r31, 0x3e	; 62
     c10:	32 83       	std	Z+2, r19	; 0x02
     c12:	21 83       	std	Z+1, r18	; 0x01
     c14:	83 83       	std	Z+3, r24	; 0x03
     c16:	94 83       	std	Z+4, r25	; 0x04
     c18:	a5 83       	std	Z+5, r26	; 0x05
     c1a:	b6 83       	std	Z+6, r27	; 0x06
     c1c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <printf>
     c20:	8d b7       	in	r24, 0x3d	; 61
     c22:	9e b7       	in	r25, 0x3e	; 62
     c24:	06 96       	adiw	r24, 0x06	; 6
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	9e bf       	out	0x3e, r25	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	8d bf       	out	0x3d, r24	; 61
     c30:	79 cf       	rjmp	.-270    	; 0xb24 <protocolCom+0x100>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c32:	c3 01       	movw	r24, r6
     c34:	be 01       	movw	r22, r28
     c36:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     c3a:	28 2f       	mov	r18, r24
     c3c:	39 2f       	mov	r19, r25
     c3e:	21 15       	cp	r18, r1
     c40:	31 05       	cpc	r19, r1
     c42:	49 f4       	brne	.+18     	; 0xc56 <protocolCom+0x232>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c44:	8f e1       	ldi	r24, 0x1F	; 31
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     c4c:	0e 94 a8 03 	call	0x750	; 0x750 <get_grensTemp>
     c50:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     c54:	67 cf       	rjmp	.-306    	; 0xb24 <protocolCom+0x100>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c56:	c2 01       	movw	r24, r4
     c58:	be 01       	movw	r22, r28
     c5a:	4e e0       	ldi	r20, 0x0E	; 14
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     c62:	28 2f       	mov	r18, r24
     c64:	39 2f       	mov	r19, r25
     c66:	21 15       	cp	r18, r1
     c68:	31 05       	cpc	r19, r1
     c6a:	c9 f4       	brne	.+50     	; 0xc9e <protocolCom+0x27a>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     c6c:	81 e4       	ldi	r24, 0x41	; 65
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     c74:	0e 94 a8 03 	call	0x750	; 0x750 <get_grensTemp>
     c78:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     c7c:	82 e5       	ldi	r24, 0x52	; 82
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
				set_substring();
     c84:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
				set_grensTemp(substring);
     c88:	80 91 a0 07 	lds	r24, 0x07A0
     c8c:	90 91 a1 07 	lds	r25, 0x07A1
     c90:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <set_grensTemp>
				ser_writeln(get_grensTemp());
     c94:	0e 94 a8 03 	call	0x750	; 0x750 <get_grensTemp>
     c98:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     c9c:	43 cf       	rjmp	.-378    	; 0xb24 <protocolCom+0x100>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c9e:	c1 01       	movw	r24, r2
     ca0:	be 01       	movw	r22, r28
     ca2:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     ca6:	28 2f       	mov	r18, r24
     ca8:	39 2f       	mov	r19, r25
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	c1 f4       	brne	.+48     	; 0xce0 <protocolCom+0x2bc>
				printf("202 LIGHT %i \n", getLight());
     cb0:	0e 94 b8 01 	call	0x370	; 0x370 <getLight>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <protocolCom+0x292>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <protocolCom+0x294>
     cb8:	ed b7       	in	r30, 0x3d	; 61
     cba:	fe b7       	in	r31, 0x3e	; 62
     cbc:	31 96       	adiw	r30, 0x01	; 1
     cbe:	21 e6       	ldi	r18, 0x61	; 97
     cc0:	32 e0       	ldi	r19, 0x02	; 2
     cc2:	ad b7       	in	r26, 0x3d	; 61
     cc4:	be b7       	in	r27, 0x3e	; 62
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	3c 93       	st	X, r19
     cca:	2e 93       	st	-X, r18
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	82 83       	std	Z+2, r24	; 0x02
     cd0:	13 82       	std	Z+3, r1	; 0x03
     cd2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <printf>
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	22 cf       	rjmp	.-444    	; 0xb24 <protocolCom+0x100>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     ce0:	80 e7       	ldi	r24, 0x70	; 112
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	be 01       	movw	r22, r28
     ce6:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     cea:	28 2f       	mov	r18, r24
     cec:	39 2f       	mov	r19, r25
     cee:	21 15       	cp	r18, r1
     cf0:	31 05       	cpc	r19, r1
     cf2:	49 f4       	brne	.+18     	; 0xd06 <protocolCom+0x2e2>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     cf4:	80 e8       	ldi	r24, 0x80	; 128
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     cfc:	0e 94 0f 04 	call	0x81e	; 0x81e <get_grensLight>
     d00:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     d04:	0f cf       	rjmp	.-482    	; 0xb24 <protocolCom+0x100>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     d06:	81 e9       	ldi	r24, 0x91	; 145
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	be 01       	movw	r22, r28
     d0c:	4f e0       	ldi	r20, 0x0F	; 15
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     d14:	28 2f       	mov	r18, r24
     d16:	39 2f       	mov	r19, r25
     d18:	21 15       	cp	r18, r1
     d1a:	31 05       	cpc	r19, r1
     d1c:	c9 f4       	brne	.+50     	; 0xd50 <protocolCom+0x32c>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				ser_write("203 GRENS_LIGHT: "), ser_write(get_grensLight()), ser_write(" -> ");
     d1e:	84 ea       	ldi	r24, 0xA4	; 164
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     d26:	0e 94 0f 04 	call	0x81e	; 0x81e <get_grensLight>
     d2a:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     d2e:	82 e5       	ldi	r24, 0x52	; 82
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
				set_substring();
     d36:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
				set_grensLicht(substring);
     d3a:	80 91 a0 07 	lds	r24, 0x07A0
     d3e:	90 91 a1 07 	lds	r25, 0x07A1
     d42:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <set_grensLicht>
				ser_writeln(get_grensLight());
     d46:	0e 94 0f 04 	call	0x81e	; 0x81e <get_grensLight>
     d4a:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     d4e:	ea ce       	rjmp	.-556    	; 0xb24 <protocolCom+0x100>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     d50:	86 eb       	ldi	r24, 0xB6	; 182
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	be 01       	movw	r22, r28
     d56:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     d5a:	28 2f       	mov	r18, r24
     d5c:	39 2f       	mov	r19, r25
     d5e:	21 15       	cp	r18, r1
     d60:	31 05       	cpc	r19, r1
     d62:	49 f4       	brne	.+18     	; 0xd76 <protocolCom+0x352>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     d64:	85 ec       	ldi	r24, 0xC5	; 197
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     d6c:	0e 94 c9 04 	call	0x992	; 0x992 <get_maxUnroll>
     d70:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     d74:	d7 ce       	rjmp	.-594    	; 0xb24 <protocolCom+0x100>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     d76:	86 ed       	ldi	r24, 0xD6	; 214
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	be 01       	movw	r22, r28
     d7c:	4f e0       	ldi	r20, 0x0F	; 15
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     d84:	28 2f       	mov	r18, r24
     d86:	39 2f       	mov	r19, r25
     d88:	21 15       	cp	r18, r1
     d8a:	31 05       	cpc	r19, r1
     d8c:	c9 f4       	brne	.+50     	; 0xdc0 <protocolCom+0x39c>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);
				ser_write("203 MAX_UNROLL: "), ser_write(get_maxUnroll()), ser_write(" -> ");
     d8e:	85 ec       	ldi	r24, 0xC5	; 197
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     d96:	0e 94 c9 04 	call	0x992	; 0x992 <get_maxUnroll>
     d9a:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     d9e:	82 e5       	ldi	r24, 0x52	; 82
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
				set_substring();
     da6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
				set_maxUnroll(substring);
     daa:	80 91 a0 07 	lds	r24, 0x07A0
     dae:	90 91 a1 07 	lds	r25, 0x07A1
     db2:	0e 94 9c 04 	call	0x938	; 0x938 <set_maxUnroll>
				ser_writeln(get_maxUnroll());
     db6:	0e 94 c9 04 	call	0x992	; 0x992 <get_maxUnroll>
     dba:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     dbe:	b2 ce       	rjmp	.-668    	; 0xb24 <protocolCom+0x100>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     dc0:	88 ee       	ldi	r24, 0xE8	; 232
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	be 01       	movw	r22, r28
     dc6:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     dca:	28 2f       	mov	r18, r24
     dcc:	39 2f       	mov	r19, r25
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	49 f4       	brne	.+18     	; 0xde6 <protocolCom+0x3c2>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     dd4:	87 ef       	ldi	r24, 0xF7	; 247
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     ddc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <get_minUnroll>
     de0:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     de4:	9f ce       	rjmp	.-706    	; 0xb24 <protocolCom+0x100>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	be 01       	movw	r22, r28
     dec:	4f e0       	ldi	r20, 0x0F	; 15
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     df4:	28 2f       	mov	r18, r24
     df6:	39 2f       	mov	r19, r25
     df8:	21 15       	cp	r18, r1
     dfa:	31 05       	cpc	r19, r1
     dfc:	c9 f4       	brne	.+50     	; 0xe30 <protocolCom+0x40c>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				ser_write("203 MIN_UNROLL: "), ser_write(get_minUnroll()), ser_write(" -> ");
     dfe:	87 ef       	ldi	r24, 0xF7	; 247
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     e06:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <get_minUnroll>
     e0a:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     e0e:	82 e5       	ldi	r24, 0x52	; 82
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
				set_substring();
     e16:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
				set_minUnroll(substring);
     e1a:	80 91 a0 07 	lds	r24, 0x07A0
     e1e:	90 91 a1 07 	lds	r25, 0x07A1
     e22:	0e 94 3f 04 	call	0x87e	; 0x87e <set_minUnroll>
				ser_writeln(get_maxUnroll());
     e26:	0e 94 c9 04 	call	0x992	; 0x992 <get_maxUnroll>
     e2a:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     e2e:	7a ce       	rjmp	.-780    	; 0xb24 <protocolCom+0x100>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     e30:	8a e1       	ldi	r24, 0x1A	; 26
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	be 01       	movw	r22, r28
     e36:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     e3a:	28 2f       	mov	r18, r24
     e3c:	39 2f       	mov	r19, r25
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	49 f4       	brne	.+18     	; 0xe56 <protocolCom+0x432>
				ser_write("202 "),  ser_writeln(get_Naam());
     e44:	83 e2       	ldi	r24, 0x23	; 35
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     e4c:	0e 94 86 02 	call	0x50c	; 0x50c <get_Naam>
     e50:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     e54:	67 ce       	rjmp	.-818    	; 0xb24 <protocolCom+0x100>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     e56:	88 e2       	ldi	r24, 0x28	; 40
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	be 01       	movw	r22, r28
     e5c:	48 e0       	ldi	r20, 0x08	; 8
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     e64:	28 2f       	mov	r18, r24
     e66:	39 2f       	mov	r19, r25
     e68:	21 15       	cp	r18, r1
     e6a:	31 05       	cpc	r19, r1
     e6c:	69 f4       	brne	.+26     	; 0xe88 <protocolCom+0x464>
				set_substring();
     e6e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
				set_Naam(substring);
     e72:	80 91 a0 07 	lds	r24, 0x07A0
     e76:	90 91 a1 07 	lds	r25, 0x07A1
     e7a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <set_Naam>
				printf("200 OK \n");
     e7e:	84 e3       	ldi	r24, 0x34	; 52
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	0e 94 77 11 	call	0x22ee	; 0x22ee <puts>
     e86:	4e ce       	rjmp	.-868    	; 0xb24 <protocolCom+0x100>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     e88:	8c e3       	ldi	r24, 0x3C	; 60
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	be 01       	movw	r22, r28
     e8e:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     e92:	28 2f       	mov	r18, r24
     e94:	39 2f       	mov	r19, r25
     e96:	21 15       	cp	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	49 f4       	brne	.+18     	; 0xeae <protocolCom+0x48a>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     e9c:	83 e2       	ldi	r24, 0x23	; 35
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     ea4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <get_Locatie>
     ea8:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     eac:	3b ce       	rjmp	.-906    	; 0xb24 <protocolCom+0x100>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     eae:	89 e4       	ldi	r24, 0x49	; 73
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	be 01       	movw	r22, r28
     eb4:	4c e0       	ldi	r20, 0x0C	; 12
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     ebc:	28 2f       	mov	r18, r24
     ebe:	39 2f       	mov	r19, r25
     ec0:	21 15       	cp	r18, r1
     ec2:	31 05       	cpc	r19, r1
     ec4:	69 f4       	brne	.+26     	; 0xee0 <protocolCom+0x4bc>
				set_substring();
     ec6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
				set_Locatie(substring);
     eca:	80 91 a0 07 	lds	r24, 0x07A0
     ece:	90 91 a1 07 	lds	r25, 0x07A1
     ed2:	0e 94 ad 02 	call	0x55a	; 0x55a <set_Locatie>
				
				printf("200 OK \n");
     ed6:	84 e3       	ldi	r24, 0x34	; 52
     ed8:	93 e0       	ldi	r25, 0x03	; 3
     eda:	0e 94 77 11 	call	0x22ee	; 0x22ee <puts>
     ede:	22 ce       	rjmp	.-956    	; 0xb24 <protocolCom+0x100>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     ee0:	89 e5       	ldi	r24, 0x59	; 89
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	be 01       	movw	r22, r28
     ee6:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     eea:	28 2f       	mov	r18, r24
     eec:	39 2f       	mov	r19, r25
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	49 f4       	brne	.+18     	; 0xf06 <protocolCom+0x4e2>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     ef4:	85 e6       	ldi	r24, 0x65	; 101
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
     efc:	0e 94 41 03 	call	0x682	; 0x682 <get_Versie>
     f00:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     f04:	0f ce       	rjmp	.-994    	; 0xb24 <protocolCom+0x100>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     f06:	82 e7       	ldi	r24, 0x72	; 114
     f08:	93 e0       	ldi	r25, 0x03	; 3
     f0a:	be 01       	movw	r22, r28
     f0c:	4c e0       	ldi	r20, 0x0C	; 12
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	0e 94 1d 11 	call	0x223a	; 0x223a <strncmp>
     f14:	28 2f       	mov	r18, r24
     f16:	39 2f       	mov	r19, r25
     f18:	21 15       	cp	r18, r1
     f1a:	31 05       	cpc	r19, r1
     f1c:	69 f4       	brne	.+26     	; 0xf38 <protocolCom+0x514>
					set_substring();
     f1e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <set_substring>
					set_Versie(substring);
     f22:	80 91 a0 07 	lds	r24, 0x07A0
     f26:	90 91 a1 07 	lds	r25, 0x07A1
     f2a:	0e 94 14 03 	call	0x628	; 0x628 <set_Versie>
					
					printf("200 OK \n");
     f2e:	84 e3       	ldi	r24, 0x34	; 52
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 77 11 	call	0x22ee	; 0x22ee <puts>
     f36:	f6 cd       	rjmp	.-1044   	; 0xb24 <protocolCom+0x100>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     f38:	81 e8       	ldi	r24, 0x81	; 129
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	be 01       	movw	r22, r28
     f3e:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     f42:	28 2f       	mov	r18, r24
     f44:	39 2f       	mov	r19, r25
     f46:	21 15       	cp	r18, r1
     f48:	31 05       	cpc	r19, r1
     f4a:	89 f4       	brne	.+34     	; 0xf6e <protocolCom+0x54a>
				if ((get_unrollStatus() % 2) == 1){
     f4c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <get_unrollStatus>
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__divmodhi4>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	11 f4       	brne	.+4      	; 0xf62 <protocolCom+0x53e>
					uitrollen();					
     f5e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     f62:	86 e8       	ldi	r24, 0x86	; 134
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
				abort();
     f6a:	0e 94 01 10 	call	0x2002	; 0x2002 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     f6e:	8f e8       	ldi	r24, 0x8F	; 143
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	be 01       	movw	r22, r28
     f74:	0e 94 14 11 	call	0x2228	; 0x2228 <strcmp>
     f78:	28 2f       	mov	r18, r24
     f7a:	39 2f       	mov	r19, r25
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	29 f4       	brne	.+10     	; 0xf8c <protocolCom+0x568>
				ser_writeln(
     f82:	84 e9       	ldi	r24, 0x94	; 148
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     f8a:	cc cd       	rjmp	.-1128   	; 0xb24 <protocolCom+0x100>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     f8c:	89 ed       	ldi	r24, 0xD9	; 217
     f8e:	95 e0       	ldi	r25, 0x05	; 5
     f90:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
     f94:	c7 cd       	rjmp	.-1138   	; 0xb24 <protocolCom+0x100>
			}		
			}
			}
			}	
			}					
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	7f 90       	pop	r7
     fb0:	6f 90       	pop	r6
     fb2:	5f 90       	pop	r5
     fb4:	4f 90       	pop	r4
     fb6:	3f 90       	pop	r3
     fb8:	2f 90       	pop	r2
     fba:	08 95       	ret

00000fbc <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     fbc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     fc0:	83 e3       	ldi	r24, 0x33	; 51
     fc2:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     fc6:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     fca:	88 e1       	ldi	r24, 0x18	; 24
     fcc:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     fd6:	8f e1       	ldi	r24, 0x1F	; 31
     fd8:	96 e0       	ldi	r25, 0x06	; 6
     fda:	90 93 c7 07 	sts	0x07C7, r25
     fde:	80 93 c6 07 	sts	0x07C6, r24
}
     fe2:	08 95       	ret

00000fe4 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     fe4:	e0 ec       	ldi	r30, 0xC0	; 192
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	90 81       	ld	r25, Z
     fea:	95 ff       	sbrs	r25, 5
     fec:	fd cf       	rjmp	.-6      	; 0xfe8 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     fee:	80 93 c6 00 	sts	0x00C6, r24
}
     ff2:	08 95       	ret

00000ff4 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     ff4:	cf 93       	push	r28
     ff6:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     ff8:	8a 30       	cpi	r24, 0x0A	; 10
     ffa:	19 f4       	brne	.+6      	; 0x1002 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     ffc:	8d e0       	ldi	r24, 0x0D	; 13
     ffe:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>
	}
	ser_transmit(c);
    1002:	8c 2f       	mov	r24, r28
    1004:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>
}
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    100c:	e0 ec       	ldi	r30, 0xC0	; 192
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	ec f7       	brge	.-6      	; 0x1010 <ser_receive+0x4>
	return UDR0;
    1016:	80 91 c6 00 	lds	r24, 0x00C6
}
    101a:	08 95       	ret

0000101c <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    1022:	88 81       	ld	r24, Y
    1024:	88 23       	and	r24, r24
    1026:	31 f0       	breq	.+12     	; 0x1034 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    1028:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    102a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    102e:	89 91       	ld	r24, Y+
    1030:	88 23       	and	r24, r24
    1032:	d9 f7       	brne	.-10     	; 0x102a <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    103a:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
	ser_transmit('\r');
    103e:	8d e0       	ldi	r24, 0x0D	; 13
    1040:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>
	ser_transmit('\n');
    1044:	8a e0       	ldi	r24, 0x0A	; 10
    1046:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>
}
    104a:	08 95       	ret

0000104c <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    104c:	af 92       	push	r10
    104e:	bf 92       	push	r11
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	5c 01       	movw	r10, r24
    1062:	d4 2f       	mov	r29, r20
	int i=0;
    1064:	6c 01       	movw	r12, r24
    1066:	ee 24       	eor	r14, r14
    1068:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    106a:	8b 01       	movw	r16, r22
    106c:	01 50       	subi	r16, 0x01	; 1
    106e:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1070:	0e 94 06 08 	call	0x100c	; 0x100c <ser_receive>
    1074:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    1076:	dd 23       	and	r29, r29
    1078:	11 f0       	breq	.+4      	; 0x107e <ser_readln+0x32>
    107a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>
		if (c=='\r') {
    107e:	cd 30       	cpi	r28, 0x0D	; 13
    1080:	31 f4       	brne	.+12     	; 0x108e <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1082:	dd 23       	and	r29, r29
    1084:	71 f0       	breq	.+28     	; 0x10a2 <ser_readln+0x56>
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ser_transmit>
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    108e:	e0 16       	cp	r14, r16
    1090:	f1 06       	cpc	r15, r17
    1092:	74 f7       	brge	.-36     	; 0x1070 <ser_readln+0x24>
			buf[i++]=c;
    1094:	f6 01       	movw	r30, r12
    1096:	c1 93       	st	Z+, r28
    1098:	6f 01       	movw	r12, r30
    109a:	08 94       	sec
    109c:	e1 1c       	adc	r14, r1
    109e:	f1 1c       	adc	r15, r1
    10a0:	e7 cf       	rjmp	.-50     	; 0x1070 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    10a2:	ea 0c       	add	r14, r10
    10a4:	fb 1c       	adc	r15, r11
    10a6:	f7 01       	movw	r30, r14
    10a8:	10 82       	st	Z, r1
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	df 90       	pop	r13
    10b8:	cf 90       	pop	r12
    10ba:	bf 90       	pop	r11
    10bc:	af 90       	pop	r10
    10be:	08 95       	ret

000010c0 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    10c0:	80 91 a6 06 	lds	r24, 0x06A6
    10c4:	90 91 a7 06 	lds	r25, 0x06A7
    10c8:	08 95       	ret

000010ca <init_scherm_ports>:


init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    10ca:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    10cc:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    10ce:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    10d0:	e9 e6       	ldi	r30, 0x69	; 105
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	81 60       	ori	r24, 0x01	; 1
    10d8:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    10de:	2d 9a       	sbi	0x05, 5	; 5
}
    10e0:	08 95       	ret

000010e2 <uitrollen>:

void uitrollen(){
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
	IN = (IN + 1);
    10ea:	80 91 a6 06 	lds	r24, 0x06A6
    10ee:	90 91 a7 06 	lds	r25, 0x06A7
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 a7 06 	sts	0x06A7, r25
    10f8:	80 93 a6 06 	sts	0x06A6, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    10fc:	8d e2       	ldi	r24, 0x2D	; 45
    10fe:	96 e0       	ldi	r25, 0x06	; 6
    1100:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1104:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1106:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1108:	0e 94 c9 04 	call	0x992	; 0x992 <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <strtod>
    1114:	6b 01       	movw	r12, r22
    1116:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    111a:	2c 9a       	sbi	0x05, 4	; 5
    111c:	8f e3       	ldi	r24, 0x3F	; 63
    111e:	9d e0       	ldi	r25, 0x0D	; 13
    1120:	a3 e0       	ldi	r26, 0x03	; 3
    1122:	81 50       	subi	r24, 0x01	; 1
    1124:	90 40       	sbci	r25, 0x00	; 0
    1126:	a0 40       	sbci	r26, 0x00	; 0
    1128:	e1 f7       	brne	.-8      	; 0x1122 <uitrollen+0x40>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <uitrollen+0x4a>
    112c:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    112e:	2c 98       	cbi	0x05, 4	; 5
    1130:	8f e3       	ldi	r24, 0x3F	; 63
    1132:	9d e0       	ldi	r25, 0x0D	; 13
    1134:	a3 e0       	ldi	r26, 0x03	; 3
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	90 40       	sbci	r25, 0x00	; 0
    113a:	a0 40       	sbci	r26, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <uitrollen+0x54>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <uitrollen+0x5e>
    1140:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1142:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1146:	a7 01       	movw	r20, r14
    1148:	96 01       	movw	r18, r12
    114a:	0e 94 90 09 	call	0x1320	; 0x1320 <__cmpsf2>
    114e:	88 23       	and	r24, r24
    1150:	24 f3       	brlt	.-56     	; 0x111a <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    1152:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	00 d0       	rcall	.+0      	; 0x115c <uitrollen+0x7a>
    115c:	00 d0       	rcall	.+0      	; 0x115e <uitrollen+0x7c>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <uitrollen+0x7e>
    1160:	23 e3       	ldi	r18, 0x33	; 51
    1162:	36 e0       	ldi	r19, 0x06	; 6
    1164:	ed b7       	in	r30, 0x3d	; 61
    1166:	fe b7       	in	r31, 0x3e	; 62
    1168:	32 83       	std	Z+2, r19	; 0x02
    116a:	21 83       	std	Z+1, r18	; 0x01
    116c:	83 83       	std	Z+3, r24	; 0x03
    116e:	94 83       	std	Z+4, r25	; 0x04
    1170:	a5 83       	std	Z+5, r26	; 0x05
    1172:	b6 83       	std	Z+6, r27	; 0x06
    1174:	0e 94 62 11 	call	0x22c4	; 0x22c4 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    1178:	8d b7       	in	r24, 0x3d	; 61
    117a:	9e b7       	in	r25, 0x3e	; 62
    117c:	06 96       	adiw	r24, 0x06	; 6
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	9e bf       	out	0x3e, r25	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	8d bf       	out	0x3d, r24	; 61
    1188:	87 e5       	ldi	r24, 0x57	; 87
    118a:	96 e0       	ldi	r25, 0x06	; 6
    118c:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
}
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret

0000119a <oprollen>:
	
	


void oprollen(){
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
	IN = (IN + 1);
    11a2:	80 91 a6 06 	lds	r24, 0x06A6
    11a6:	90 91 a7 06 	lds	r25, 0x06A7
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	90 93 a7 06 	sts	0x06A7, r25
    11b0:	80 93 a6 06 	sts	0x06A6, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    11b4:	85 e7       	ldi	r24, 0x75	; 117
    11b6:	96 e0       	ldi	r25, 0x06	; 6
    11b8:	0e 94 0e 08 	call	0x101c	; 0x101c <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    11bc:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    11be:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    11c0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <strtod>
    11cc:	6b 01       	movw	r12, r22
    11ce:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    11d2:	2c 9a       	sbi	0x05, 4	; 5
    11d4:	8f e3       	ldi	r24, 0x3F	; 63
    11d6:	9d e0       	ldi	r25, 0x0D	; 13
    11d8:	a3 e0       	ldi	r26, 0x03	; 3
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	90 40       	sbci	r25, 0x00	; 0
    11de:	a0 40       	sbci	r26, 0x00	; 0
    11e0:	e1 f7       	brne	.-8      	; 0x11da <oprollen+0x40>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <oprollen+0x4a>
    11e4:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    11e6:	2c 98       	cbi	0x05, 4	; 5
    11e8:	8f e3       	ldi	r24, 0x3F	; 63
    11ea:	9d e0       	ldi	r25, 0x0D	; 13
    11ec:	a3 e0       	ldi	r26, 0x03	; 3
    11ee:	81 50       	subi	r24, 0x01	; 1
    11f0:	90 40       	sbci	r25, 0x00	; 0
    11f2:	a0 40       	sbci	r26, 0x00	; 0
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <oprollen+0x54>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <oprollen+0x5e>
    11f8:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    11fa:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11fe:	a7 01       	movw	r20, r14
    1200:	96 01       	movw	r18, r12
    1202:	0e 94 46 0a 	call	0x148c	; 0x148c <__gesf2>
    1206:	18 16       	cp	r1, r24
    1208:	24 f3       	brlt	.-56     	; 0x11d2 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    120a:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    120e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	00 d0       	rcall	.+0      	; 0x1218 <oprollen+0x7e>
    1218:	00 d0       	rcall	.+0      	; 0x121a <oprollen+0x80>
    121a:	00 d0       	rcall	.+0      	; 0x121c <oprollen+0x82>
    121c:	23 e3       	ldi	r18, 0x33	; 51
    121e:	36 e0       	ldi	r19, 0x06	; 6
    1220:	ed b7       	in	r30, 0x3d	; 61
    1222:	fe b7       	in	r31, 0x3e	; 62
    1224:	32 83       	std	Z+2, r19	; 0x02
    1226:	21 83       	std	Z+1, r18	; 0x01
    1228:	83 83       	std	Z+3, r24	; 0x03
    122a:	94 83       	std	Z+4, r25	; 0x04
    122c:	a5 83       	std	Z+5, r26	; 0x05
    122e:	b6 83       	std	Z+6, r27	; 0x06
    1230:	0e 94 62 11 	call	0x22c4	; 0x22c4 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    1234:	8d b7       	in	r24, 0x3d	; 61
    1236:	9e b7       	in	r25, 0x3e	; 62
    1238:	06 96       	adiw	r24, 0x06	; 6
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	9e bf       	out	0x3e, r25	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	8d bf       	out	0x3d, r24	; 61
    1244:	8a e7       	ldi	r24, 0x7A	; 122
    1246:	96 e0       	ldi	r25, 0x06	; 6
    1248:	0e 94 1d 08 	call	0x103a	; 0x103a <ser_writeln>
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	08 95       	ret

00001256 <__subsf3>:
    1256:	50 58       	subi	r21, 0x80	; 128

00001258 <__addsf3>:
    1258:	bb 27       	eor	r27, r27
    125a:	aa 27       	eor	r26, r26
    125c:	0e d0       	rcall	.+28     	; 0x127a <__addsf3x>
    125e:	dc c0       	rjmp	.+440    	; 0x1418 <__fp_round>
    1260:	cd d0       	rcall	.+410    	; 0x13fc <__fp_pscA>
    1262:	30 f0       	brcs	.+12     	; 0x1270 <__addsf3+0x18>
    1264:	d2 d0       	rcall	.+420    	; 0x140a <__fp_pscB>
    1266:	20 f0       	brcs	.+8      	; 0x1270 <__addsf3+0x18>
    1268:	31 f4       	brne	.+12     	; 0x1276 <__addsf3+0x1e>
    126a:	9f 3f       	cpi	r25, 0xFF	; 255
    126c:	11 f4       	brne	.+4      	; 0x1272 <__addsf3+0x1a>
    126e:	1e f4       	brtc	.+6      	; 0x1276 <__addsf3+0x1e>
    1270:	c2 c0       	rjmp	.+388    	; 0x13f6 <__fp_nan>
    1272:	0e f4       	brtc	.+2      	; 0x1276 <__addsf3+0x1e>
    1274:	e0 95       	com	r30
    1276:	e7 fb       	bst	r30, 7
    1278:	b8 c0       	rjmp	.+368    	; 0x13ea <__fp_inf>

0000127a <__addsf3x>:
    127a:	e9 2f       	mov	r30, r25
    127c:	de d0       	rcall	.+444    	; 0x143a <__fp_split3>
    127e:	80 f3       	brcs	.-32     	; 0x1260 <__addsf3+0x8>
    1280:	ba 17       	cp	r27, r26
    1282:	62 07       	cpc	r22, r18
    1284:	73 07       	cpc	r23, r19
    1286:	84 07       	cpc	r24, r20
    1288:	95 07       	cpc	r25, r21
    128a:	18 f0       	brcs	.+6      	; 0x1292 <__addsf3x+0x18>
    128c:	71 f4       	brne	.+28     	; 0x12aa <__addsf3x+0x30>
    128e:	9e f5       	brtc	.+102    	; 0x12f6 <__addsf3x+0x7c>
    1290:	f6 c0       	rjmp	.+492    	; 0x147e <__fp_zero>
    1292:	0e f4       	brtc	.+2      	; 0x1296 <__addsf3x+0x1c>
    1294:	e0 95       	com	r30
    1296:	0b 2e       	mov	r0, r27
    1298:	ba 2f       	mov	r27, r26
    129a:	a0 2d       	mov	r26, r0
    129c:	0b 01       	movw	r0, r22
    129e:	b9 01       	movw	r22, r18
    12a0:	90 01       	movw	r18, r0
    12a2:	0c 01       	movw	r0, r24
    12a4:	ca 01       	movw	r24, r20
    12a6:	a0 01       	movw	r20, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	ff 27       	eor	r31, r31
    12ac:	59 1b       	sub	r21, r25
    12ae:	99 f0       	breq	.+38     	; 0x12d6 <__addsf3x+0x5c>
    12b0:	59 3f       	cpi	r21, 0xF9	; 249
    12b2:	50 f4       	brcc	.+20     	; 0x12c8 <__addsf3x+0x4e>
    12b4:	50 3e       	cpi	r21, 0xE0	; 224
    12b6:	68 f1       	brcs	.+90     	; 0x1312 <__addsf3x+0x98>
    12b8:	1a 16       	cp	r1, r26
    12ba:	f0 40       	sbci	r31, 0x00	; 0
    12bc:	a2 2f       	mov	r26, r18
    12be:	23 2f       	mov	r18, r19
    12c0:	34 2f       	mov	r19, r20
    12c2:	44 27       	eor	r20, r20
    12c4:	58 5f       	subi	r21, 0xF8	; 248
    12c6:	f3 cf       	rjmp	.-26     	; 0x12ae <__addsf3x+0x34>
    12c8:	46 95       	lsr	r20
    12ca:	37 95       	ror	r19
    12cc:	27 95       	ror	r18
    12ce:	a7 95       	ror	r26
    12d0:	f0 40       	sbci	r31, 0x00	; 0
    12d2:	53 95       	inc	r21
    12d4:	c9 f7       	brne	.-14     	; 0x12c8 <__addsf3x+0x4e>
    12d6:	7e f4       	brtc	.+30     	; 0x12f6 <__addsf3x+0x7c>
    12d8:	1f 16       	cp	r1, r31
    12da:	ba 0b       	sbc	r27, r26
    12dc:	62 0b       	sbc	r22, r18
    12de:	73 0b       	sbc	r23, r19
    12e0:	84 0b       	sbc	r24, r20
    12e2:	ba f0       	brmi	.+46     	; 0x1312 <__addsf3x+0x98>
    12e4:	91 50       	subi	r25, 0x01	; 1
    12e6:	a1 f0       	breq	.+40     	; 0x1310 <__addsf3x+0x96>
    12e8:	ff 0f       	add	r31, r31
    12ea:	bb 1f       	adc	r27, r27
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	c2 f7       	brpl	.-16     	; 0x12e4 <__addsf3x+0x6a>
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <__addsf3x+0x98>
    12f6:	ba 0f       	add	r27, r26
    12f8:	62 1f       	adc	r22, r18
    12fa:	73 1f       	adc	r23, r19
    12fc:	84 1f       	adc	r24, r20
    12fe:	48 f4       	brcc	.+18     	; 0x1312 <__addsf3x+0x98>
    1300:	87 95       	ror	r24
    1302:	77 95       	ror	r23
    1304:	67 95       	ror	r22
    1306:	b7 95       	ror	r27
    1308:	f7 95       	ror	r31
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	08 f0       	brcs	.+2      	; 0x1310 <__addsf3x+0x96>
    130e:	b3 cf       	rjmp	.-154    	; 0x1276 <__addsf3+0x1e>
    1310:	93 95       	inc	r25
    1312:	88 0f       	add	r24, r24
    1314:	08 f0       	brcs	.+2      	; 0x1318 <__addsf3x+0x9e>
    1316:	99 27       	eor	r25, r25
    1318:	ee 0f       	add	r30, r30
    131a:	97 95       	ror	r25
    131c:	87 95       	ror	r24
    131e:	08 95       	ret

00001320 <__cmpsf2>:
    1320:	40 d0       	rcall	.+128    	; 0x13a2 <__fp_cmp>
    1322:	08 f4       	brcc	.+2      	; 0x1326 <__cmpsf2+0x6>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	08 95       	ret

00001328 <__floatunsisf>:
    1328:	e8 94       	clt
    132a:	09 c0       	rjmp	.+18     	; 0x133e <__floatsisf+0x12>

0000132c <__floatsisf>:
    132c:	97 fb       	bst	r25, 7
    132e:	3e f4       	brtc	.+14     	; 0x133e <__floatsisf+0x12>
    1330:	90 95       	com	r25
    1332:	80 95       	com	r24
    1334:	70 95       	com	r23
    1336:	61 95       	neg	r22
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	8f 4f       	sbci	r24, 0xFF	; 255
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	99 23       	and	r25, r25
    1340:	a9 f0       	breq	.+42     	; 0x136c <__floatsisf+0x40>
    1342:	f9 2f       	mov	r31, r25
    1344:	96 e9       	ldi	r25, 0x96	; 150
    1346:	bb 27       	eor	r27, r27
    1348:	93 95       	inc	r25
    134a:	f6 95       	lsr	r31
    134c:	87 95       	ror	r24
    134e:	77 95       	ror	r23
    1350:	67 95       	ror	r22
    1352:	b7 95       	ror	r27
    1354:	f1 11       	cpse	r31, r1
    1356:	f8 cf       	rjmp	.-16     	; 0x1348 <__floatsisf+0x1c>
    1358:	fa f4       	brpl	.+62     	; 0x1398 <__floatsisf+0x6c>
    135a:	bb 0f       	add	r27, r27
    135c:	11 f4       	brne	.+4      	; 0x1362 <__floatsisf+0x36>
    135e:	60 ff       	sbrs	r22, 0
    1360:	1b c0       	rjmp	.+54     	; 0x1398 <__floatsisf+0x6c>
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	8f 4f       	sbci	r24, 0xFF	; 255
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	16 c0       	rjmp	.+44     	; 0x1398 <__floatsisf+0x6c>
    136c:	88 23       	and	r24, r24
    136e:	11 f0       	breq	.+4      	; 0x1374 <__floatsisf+0x48>
    1370:	96 e9       	ldi	r25, 0x96	; 150
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <__floatsisf+0x6a>
    1374:	77 23       	and	r23, r23
    1376:	21 f0       	breq	.+8      	; 0x1380 <__floatsisf+0x54>
    1378:	9e e8       	ldi	r25, 0x8E	; 142
    137a:	87 2f       	mov	r24, r23
    137c:	76 2f       	mov	r23, r22
    137e:	05 c0       	rjmp	.+10     	; 0x138a <__floatsisf+0x5e>
    1380:	66 23       	and	r22, r22
    1382:	71 f0       	breq	.+28     	; 0x13a0 <__floatsisf+0x74>
    1384:	96 e8       	ldi	r25, 0x86	; 134
    1386:	86 2f       	mov	r24, r22
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	2a f0       	brmi	.+10     	; 0x1398 <__floatsisf+0x6c>
    138e:	9a 95       	dec	r25
    1390:	66 0f       	add	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	da f7       	brpl	.-10     	; 0x138e <__floatsisf+0x62>
    1398:	88 0f       	add	r24, r24
    139a:	96 95       	lsr	r25
    139c:	87 95       	ror	r24
    139e:	97 f9       	bld	r25, 7
    13a0:	08 95       	ret

000013a2 <__fp_cmp>:
    13a2:	99 0f       	add	r25, r25
    13a4:	00 08       	sbc	r0, r0
    13a6:	55 0f       	add	r21, r21
    13a8:	aa 0b       	sbc	r26, r26
    13aa:	e0 e8       	ldi	r30, 0x80	; 128
    13ac:	fe ef       	ldi	r31, 0xFE	; 254
    13ae:	16 16       	cp	r1, r22
    13b0:	17 06       	cpc	r1, r23
    13b2:	e8 07       	cpc	r30, r24
    13b4:	f9 07       	cpc	r31, r25
    13b6:	c0 f0       	brcs	.+48     	; 0x13e8 <__fp_cmp+0x46>
    13b8:	12 16       	cp	r1, r18
    13ba:	13 06       	cpc	r1, r19
    13bc:	e4 07       	cpc	r30, r20
    13be:	f5 07       	cpc	r31, r21
    13c0:	98 f0       	brcs	.+38     	; 0x13e8 <__fp_cmp+0x46>
    13c2:	62 1b       	sub	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	95 0b       	sbc	r25, r21
    13ca:	39 f4       	brne	.+14     	; 0x13da <__fp_cmp+0x38>
    13cc:	0a 26       	eor	r0, r26
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <__fp_cmp+0x46>
    13d0:	23 2b       	or	r18, r19
    13d2:	24 2b       	or	r18, r20
    13d4:	25 2b       	or	r18, r21
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <__fp_cmp+0x3e>
    13d8:	08 95       	ret
    13da:	0a 26       	eor	r0, r26
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__fp_cmp+0x3e>
    13de:	a1 40       	sbci	r26, 0x01	; 1
    13e0:	a6 95       	lsr	r26
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	81 1d       	adc	r24, r1
    13e6:	81 1d       	adc	r24, r1
    13e8:	08 95       	ret

000013ea <__fp_inf>:
    13ea:	97 f9       	bld	r25, 7
    13ec:	9f 67       	ori	r25, 0x7F	; 127
    13ee:	80 e8       	ldi	r24, 0x80	; 128
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	08 95       	ret

000013f6 <__fp_nan>:
    13f6:	9f ef       	ldi	r25, 0xFF	; 255
    13f8:	80 ec       	ldi	r24, 0xC0	; 192
    13fa:	08 95       	ret

000013fc <__fp_pscA>:
    13fc:	00 24       	eor	r0, r0
    13fe:	0a 94       	dec	r0
    1400:	16 16       	cp	r1, r22
    1402:	17 06       	cpc	r1, r23
    1404:	18 06       	cpc	r1, r24
    1406:	09 06       	cpc	r0, r25
    1408:	08 95       	ret

0000140a <__fp_pscB>:
    140a:	00 24       	eor	r0, r0
    140c:	0a 94       	dec	r0
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	05 06       	cpc	r0, r21
    1416:	08 95       	ret

00001418 <__fp_round>:
    1418:	09 2e       	mov	r0, r25
    141a:	03 94       	inc	r0
    141c:	00 0c       	add	r0, r0
    141e:	11 f4       	brne	.+4      	; 0x1424 <__fp_round+0xc>
    1420:	88 23       	and	r24, r24
    1422:	52 f0       	brmi	.+20     	; 0x1438 <__fp_round+0x20>
    1424:	bb 0f       	add	r27, r27
    1426:	40 f4       	brcc	.+16     	; 0x1438 <__fp_round+0x20>
    1428:	bf 2b       	or	r27, r31
    142a:	11 f4       	brne	.+4      	; 0x1430 <__fp_round+0x18>
    142c:	60 ff       	sbrs	r22, 0
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <__fp_round+0x20>
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	08 95       	ret

0000143a <__fp_split3>:
    143a:	57 fd       	sbrc	r21, 7
    143c:	90 58       	subi	r25, 0x80	; 128
    143e:	44 0f       	add	r20, r20
    1440:	55 1f       	adc	r21, r21
    1442:	59 f0       	breq	.+22     	; 0x145a <__fp_splitA+0x10>
    1444:	5f 3f       	cpi	r21, 0xFF	; 255
    1446:	71 f0       	breq	.+28     	; 0x1464 <__fp_splitA+0x1a>
    1448:	47 95       	ror	r20

0000144a <__fp_splitA>:
    144a:	88 0f       	add	r24, r24
    144c:	97 fb       	bst	r25, 7
    144e:	99 1f       	adc	r25, r25
    1450:	61 f0       	breq	.+24     	; 0x146a <__fp_splitA+0x20>
    1452:	9f 3f       	cpi	r25, 0xFF	; 255
    1454:	79 f0       	breq	.+30     	; 0x1474 <__fp_splitA+0x2a>
    1456:	87 95       	ror	r24
    1458:	08 95       	ret
    145a:	12 16       	cp	r1, r18
    145c:	13 06       	cpc	r1, r19
    145e:	14 06       	cpc	r1, r20
    1460:	55 1f       	adc	r21, r21
    1462:	f2 cf       	rjmp	.-28     	; 0x1448 <__fp_split3+0xe>
    1464:	46 95       	lsr	r20
    1466:	f1 df       	rcall	.-30     	; 0x144a <__fp_splitA>
    1468:	08 c0       	rjmp	.+16     	; 0x147a <__fp_splitA+0x30>
    146a:	16 16       	cp	r1, r22
    146c:	17 06       	cpc	r1, r23
    146e:	18 06       	cpc	r1, r24
    1470:	99 1f       	adc	r25, r25
    1472:	f1 cf       	rjmp	.-30     	; 0x1456 <__fp_splitA+0xc>
    1474:	86 95       	lsr	r24
    1476:	71 05       	cpc	r23, r1
    1478:	61 05       	cpc	r22, r1
    147a:	08 94       	sec
    147c:	08 95       	ret

0000147e <__fp_zero>:
    147e:	e8 94       	clt

00001480 <__fp_szero>:
    1480:	bb 27       	eor	r27, r27
    1482:	66 27       	eor	r22, r22
    1484:	77 27       	eor	r23, r23
    1486:	cb 01       	movw	r24, r22
    1488:	97 f9       	bld	r25, 7
    148a:	08 95       	ret

0000148c <__gesf2>:
    148c:	8a df       	rcall	.-236    	; 0x13a2 <__fp_cmp>
    148e:	08 f4       	brcc	.+2      	; 0x1492 <__gesf2+0x6>
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	08 95       	ret

00001494 <__mulsf3>:
    1494:	0b d0       	rcall	.+22     	; 0x14ac <__mulsf3x>
    1496:	c0 cf       	rjmp	.-128    	; 0x1418 <__fp_round>
    1498:	b1 df       	rcall	.-158    	; 0x13fc <__fp_pscA>
    149a:	28 f0       	brcs	.+10     	; 0x14a6 <__mulsf3+0x12>
    149c:	b6 df       	rcall	.-148    	; 0x140a <__fp_pscB>
    149e:	18 f0       	brcs	.+6      	; 0x14a6 <__mulsf3+0x12>
    14a0:	95 23       	and	r25, r21
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <__mulsf3+0x12>
    14a4:	a2 cf       	rjmp	.-188    	; 0x13ea <__fp_inf>
    14a6:	a7 cf       	rjmp	.-178    	; 0x13f6 <__fp_nan>
    14a8:	11 24       	eor	r1, r1
    14aa:	ea cf       	rjmp	.-44     	; 0x1480 <__fp_szero>

000014ac <__mulsf3x>:
    14ac:	c6 df       	rcall	.-116    	; 0x143a <__fp_split3>
    14ae:	a0 f3       	brcs	.-24     	; 0x1498 <__mulsf3+0x4>

000014b0 <__mulsf3_pse>:
    14b0:	95 9f       	mul	r25, r21
    14b2:	d1 f3       	breq	.-12     	; 0x14a8 <__mulsf3+0x14>
    14b4:	95 0f       	add	r25, r21
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	55 1f       	adc	r21, r21
    14ba:	62 9f       	mul	r22, r18
    14bc:	f0 01       	movw	r30, r0
    14be:	72 9f       	mul	r23, r18
    14c0:	bb 27       	eor	r27, r27
    14c2:	f0 0d       	add	r31, r0
    14c4:	b1 1d       	adc	r27, r1
    14c6:	63 9f       	mul	r22, r19
    14c8:	aa 27       	eor	r26, r26
    14ca:	f0 0d       	add	r31, r0
    14cc:	b1 1d       	adc	r27, r1
    14ce:	aa 1f       	adc	r26, r26
    14d0:	64 9f       	mul	r22, r20
    14d2:	66 27       	eor	r22, r22
    14d4:	b0 0d       	add	r27, r0
    14d6:	a1 1d       	adc	r26, r1
    14d8:	66 1f       	adc	r22, r22
    14da:	82 9f       	mul	r24, r18
    14dc:	22 27       	eor	r18, r18
    14de:	b0 0d       	add	r27, r0
    14e0:	a1 1d       	adc	r26, r1
    14e2:	62 1f       	adc	r22, r18
    14e4:	73 9f       	mul	r23, r19
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	62 1f       	adc	r22, r18
    14ec:	83 9f       	mul	r24, r19
    14ee:	a0 0d       	add	r26, r0
    14f0:	61 1d       	adc	r22, r1
    14f2:	22 1f       	adc	r18, r18
    14f4:	74 9f       	mul	r23, r20
    14f6:	33 27       	eor	r19, r19
    14f8:	a0 0d       	add	r26, r0
    14fa:	61 1d       	adc	r22, r1
    14fc:	23 1f       	adc	r18, r19
    14fe:	84 9f       	mul	r24, r20
    1500:	60 0d       	add	r22, r0
    1502:	21 1d       	adc	r18, r1
    1504:	82 2f       	mov	r24, r18
    1506:	76 2f       	mov	r23, r22
    1508:	6a 2f       	mov	r22, r26
    150a:	11 24       	eor	r1, r1
    150c:	9f 57       	subi	r25, 0x7F	; 127
    150e:	50 40       	sbci	r21, 0x00	; 0
    1510:	8a f0       	brmi	.+34     	; 0x1534 <__mulsf3_pse+0x84>
    1512:	e1 f0       	breq	.+56     	; 0x154c <__mulsf3_pse+0x9c>
    1514:	88 23       	and	r24, r24
    1516:	4a f0       	brmi	.+18     	; 0x152a <__mulsf3_pse+0x7a>
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	bb 1f       	adc	r27, r27
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	91 50       	subi	r25, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	a9 f7       	brne	.-22     	; 0x1514 <__mulsf3_pse+0x64>
    152a:	9e 3f       	cpi	r25, 0xFE	; 254
    152c:	51 05       	cpc	r21, r1
    152e:	70 f0       	brcs	.+28     	; 0x154c <__mulsf3_pse+0x9c>
    1530:	5c cf       	rjmp	.-328    	; 0x13ea <__fp_inf>
    1532:	a6 cf       	rjmp	.-180    	; 0x1480 <__fp_szero>
    1534:	5f 3f       	cpi	r21, 0xFF	; 255
    1536:	ec f3       	brlt	.-6      	; 0x1532 <__mulsf3_pse+0x82>
    1538:	98 3e       	cpi	r25, 0xE8	; 232
    153a:	dc f3       	brlt	.-10     	; 0x1532 <__mulsf3_pse+0x82>
    153c:	86 95       	lsr	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b7 95       	ror	r27
    1544:	f7 95       	ror	r31
    1546:	e7 95       	ror	r30
    1548:	9f 5f       	subi	r25, 0xFF	; 255
    154a:	c1 f7       	brne	.-16     	; 0x153c <__mulsf3_pse+0x8c>
    154c:	fe 2b       	or	r31, r30
    154e:	88 0f       	add	r24, r24
    1550:	91 1d       	adc	r25, r1
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret

0000155a <vfprintf>:
    155a:	a5 e1       	ldi	r26, 0x15	; 21
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e3 eb       	ldi	r30, 0xB3	; 179
    1560:	fa e0       	ldi	r31, 0x0A	; 10
    1562:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__prologue_saves__>
    1566:	4c 01       	movw	r8, r24
    1568:	7f 87       	std	Y+15, r23	; 0x0f
    156a:	6e 87       	std	Y+14, r22	; 0x0e
    156c:	fc 01       	movw	r30, r24
    156e:	17 82       	std	Z+7, r1	; 0x07
    1570:	16 82       	std	Z+6, r1	; 0x06
    1572:	83 81       	ldd	r24, Z+3	; 0x03
    1574:	81 fd       	sbrc	r24, 1
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <vfprintf+0x26>
    1578:	76 c3       	rjmp	.+1772   	; 0x1c66 <vfprintf+0x70c>
    157a:	4c 85       	ldd	r20, Y+12	; 0x0c
    157c:	5d 85       	ldd	r21, Y+13	; 0x0d
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <vfprintf+0x2e>
    1580:	1e 01       	movw	r2, r28
    1582:	08 94       	sec
    1584:	21 1c       	adc	r2, r1
    1586:	31 1c       	adc	r3, r1
    1588:	f4 01       	movw	r30, r8
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	ee 85       	ldd	r30, Y+14	; 0x0e
    158e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1590:	93 fd       	sbrc	r25, 3
    1592:	85 91       	lpm	r24, Z+
    1594:	93 ff       	sbrs	r25, 3
    1596:	81 91       	ld	r24, Z+
    1598:	ff 87       	std	Y+15, r31	; 0x0f
    159a:	ee 87       	std	Y+14, r30	; 0x0e
    159c:	88 23       	and	r24, r24
    159e:	09 f4       	brne	.+2      	; 0x15a2 <vfprintf+0x48>
    15a0:	5e c3       	rjmp	.+1724   	; 0x1c5e <vfprintf+0x704>
    15a2:	85 32       	cpi	r24, 0x25	; 37
    15a4:	41 f4       	brne	.+16     	; 0x15b6 <vfprintf+0x5c>
    15a6:	93 fd       	sbrc	r25, 3
    15a8:	85 91       	lpm	r24, Z+
    15aa:	93 ff       	sbrs	r25, 3
    15ac:	81 91       	ld	r24, Z+
    15ae:	ff 87       	std	Y+15, r31	; 0x0f
    15b0:	ee 87       	std	Y+14, r30	; 0x0e
    15b2:	85 32       	cpi	r24, 0x25	; 37
    15b4:	59 f4       	brne	.+22     	; 0x15cc <vfprintf+0x72>
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	b4 01       	movw	r22, r8
    15ba:	4c 8b       	std	Y+20, r20	; 0x14
    15bc:	5d 8b       	std	Y+21, r21	; 0x15
    15be:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    15c2:	4c 89       	ldd	r20, Y+20	; 0x14
    15c4:	5d 89       	ldd	r21, Y+21	; 0x15
    15c6:	5d 87       	std	Y+13, r21	; 0x0d
    15c8:	4c 87       	std	Y+12, r20	; 0x0c
    15ca:	d7 cf       	rjmp	.-82     	; 0x157a <vfprintf+0x20>
    15cc:	ff 24       	eor	r15, r15
    15ce:	dd 24       	eor	r13, r13
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	10 32       	cpi	r17, 0x20	; 32
    15d4:	b0 f4       	brcc	.+44     	; 0x1602 <vfprintf+0xa8>
    15d6:	8b 32       	cpi	r24, 0x2B	; 43
    15d8:	69 f0       	breq	.+26     	; 0x15f4 <vfprintf+0x9a>
    15da:	8c 32       	cpi	r24, 0x2C	; 44
    15dc:	28 f4       	brcc	.+10     	; 0x15e8 <vfprintf+0x8e>
    15de:	80 32       	cpi	r24, 0x20	; 32
    15e0:	51 f0       	breq	.+20     	; 0x15f6 <vfprintf+0x9c>
    15e2:	83 32       	cpi	r24, 0x23	; 35
    15e4:	71 f4       	brne	.+28     	; 0x1602 <vfprintf+0xa8>
    15e6:	0b c0       	rjmp	.+22     	; 0x15fe <vfprintf+0xa4>
    15e8:	8d 32       	cpi	r24, 0x2D	; 45
    15ea:	39 f0       	breq	.+14     	; 0x15fa <vfprintf+0xa0>
    15ec:	80 33       	cpi	r24, 0x30	; 48
    15ee:	49 f4       	brne	.+18     	; 0x1602 <vfprintf+0xa8>
    15f0:	11 60       	ori	r17, 0x01	; 1
    15f2:	2c c0       	rjmp	.+88     	; 0x164c <vfprintf+0xf2>
    15f4:	12 60       	ori	r17, 0x02	; 2
    15f6:	14 60       	ori	r17, 0x04	; 4
    15f8:	29 c0       	rjmp	.+82     	; 0x164c <vfprintf+0xf2>
    15fa:	18 60       	ori	r17, 0x08	; 8
    15fc:	27 c0       	rjmp	.+78     	; 0x164c <vfprintf+0xf2>
    15fe:	10 61       	ori	r17, 0x10	; 16
    1600:	25 c0       	rjmp	.+74     	; 0x164c <vfprintf+0xf2>
    1602:	17 fd       	sbrc	r17, 7
    1604:	2e c0       	rjmp	.+92     	; 0x1662 <vfprintf+0x108>
    1606:	28 2f       	mov	r18, r24
    1608:	20 53       	subi	r18, 0x30	; 48
    160a:	2a 30       	cpi	r18, 0x0A	; 10
    160c:	98 f4       	brcc	.+38     	; 0x1634 <vfprintf+0xda>
    160e:	16 ff       	sbrs	r17, 6
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vfprintf+0xc8>
    1612:	8f 2d       	mov	r24, r15
    1614:	88 0f       	add	r24, r24
    1616:	f8 2e       	mov	r15, r24
    1618:	ff 0c       	add	r15, r15
    161a:	ff 0c       	add	r15, r15
    161c:	f8 0e       	add	r15, r24
    161e:	f2 0e       	add	r15, r18
    1620:	15 c0       	rjmp	.+42     	; 0x164c <vfprintf+0xf2>
    1622:	8d 2d       	mov	r24, r13
    1624:	88 0f       	add	r24, r24
    1626:	d8 2e       	mov	r13, r24
    1628:	dd 0c       	add	r13, r13
    162a:	dd 0c       	add	r13, r13
    162c:	d8 0e       	add	r13, r24
    162e:	d2 0e       	add	r13, r18
    1630:	10 62       	ori	r17, 0x20	; 32
    1632:	0c c0       	rjmp	.+24     	; 0x164c <vfprintf+0xf2>
    1634:	8e 32       	cpi	r24, 0x2E	; 46
    1636:	21 f4       	brne	.+8      	; 0x1640 <vfprintf+0xe6>
    1638:	16 fd       	sbrc	r17, 6
    163a:	11 c3       	rjmp	.+1570   	; 0x1c5e <vfprintf+0x704>
    163c:	10 64       	ori	r17, 0x40	; 64
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0xf2>
    1640:	8c 36       	cpi	r24, 0x6C	; 108
    1642:	11 f4       	brne	.+4      	; 0x1648 <vfprintf+0xee>
    1644:	10 68       	ori	r17, 0x80	; 128
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0xf2>
    1648:	88 36       	cpi	r24, 0x68	; 104
    164a:	59 f4       	brne	.+22     	; 0x1662 <vfprintf+0x108>
    164c:	ee 85       	ldd	r30, Y+14	; 0x0e
    164e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1650:	93 fd       	sbrc	r25, 3
    1652:	85 91       	lpm	r24, Z+
    1654:	93 ff       	sbrs	r25, 3
    1656:	81 91       	ld	r24, Z+
    1658:	ff 87       	std	Y+15, r31	; 0x0f
    165a:	ee 87       	std	Y+14, r30	; 0x0e
    165c:	88 23       	and	r24, r24
    165e:	09 f0       	breq	.+2      	; 0x1662 <vfprintf+0x108>
    1660:	b8 cf       	rjmp	.-144    	; 0x15d2 <vfprintf+0x78>
    1662:	98 2f       	mov	r25, r24
    1664:	95 54       	subi	r25, 0x45	; 69
    1666:	93 30       	cpi	r25, 0x03	; 3
    1668:	18 f4       	brcc	.+6      	; 0x1670 <vfprintf+0x116>
    166a:	10 61       	ori	r17, 0x10	; 16
    166c:	80 5e       	subi	r24, 0xE0	; 224
    166e:	06 c0       	rjmp	.+12     	; 0x167c <vfprintf+0x122>
    1670:	98 2f       	mov	r25, r24
    1672:	95 56       	subi	r25, 0x65	; 101
    1674:	93 30       	cpi	r25, 0x03	; 3
    1676:	08 f0       	brcs	.+2      	; 0x167a <vfprintf+0x120>
    1678:	a2 c1       	rjmp	.+836    	; 0x19be <vfprintf+0x464>
    167a:	1f 7e       	andi	r17, 0xEF	; 239
    167c:	16 fd       	sbrc	r17, 6
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <vfprintf+0x12a>
    1680:	e6 e0       	ldi	r30, 0x06	; 6
    1682:	fe 2e       	mov	r15, r30
    1684:	1f 73       	andi	r17, 0x3F	; 63
    1686:	85 36       	cpi	r24, 0x65	; 101
    1688:	11 f4       	brne	.+4      	; 0x168e <vfprintf+0x134>
    168a:	10 64       	ori	r17, 0x40	; 64
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0x140>
    168e:	86 36       	cpi	r24, 0x66	; 102
    1690:	11 f4       	brne	.+4      	; 0x1696 <vfprintf+0x13c>
    1692:	10 68       	ori	r17, 0x80	; 128
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x140>
    1696:	f1 10       	cpse	r15, r1
    1698:	fa 94       	dec	r15
    169a:	17 ff       	sbrs	r17, 7
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <vfprintf+0x152>
    169e:	fb e3       	ldi	r31, 0x3B	; 59
    16a0:	ff 15       	cp	r31, r15
    16a2:	48 f0       	brcs	.+18     	; 0x16b6 <vfprintf+0x15c>
    16a4:	ef 2c       	mov	r14, r15
    16a6:	e3 94       	inc	r14
    16a8:	27 e0       	ldi	r18, 0x07	; 7
    16aa:	0d c0       	rjmp	.+26     	; 0x16c6 <vfprintf+0x16c>
    16ac:	27 e0       	ldi	r18, 0x07	; 7
    16ae:	2f 15       	cp	r18, r15
    16b0:	30 f0       	brcs	.+12     	; 0x16be <vfprintf+0x164>
    16b2:	2f 2d       	mov	r18, r15
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <vfprintf+0x16a>
    16b6:	27 e0       	ldi	r18, 0x07	; 7
    16b8:	7c e3       	ldi	r23, 0x3C	; 60
    16ba:	e7 2e       	mov	r14, r23
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <vfprintf+0x16c>
    16be:	27 e0       	ldi	r18, 0x07	; 7
    16c0:	67 e0       	ldi	r22, 0x07	; 7
    16c2:	f6 2e       	mov	r15, r22
    16c4:	ee 24       	eor	r14, r14
    16c6:	ca 01       	movw	r24, r20
    16c8:	04 96       	adiw	r24, 0x04	; 4
    16ca:	9d 87       	std	Y+13, r25	; 0x0d
    16cc:	8c 87       	std	Y+12, r24	; 0x0c
    16ce:	fa 01       	movw	r30, r20
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	a1 01       	movw	r20, r2
    16da:	0e 2d       	mov	r16, r14
    16dc:	0e 94 06 10 	call	0x200c	; 0x200c <__ftoa_engine>
    16e0:	5c 01       	movw	r10, r24
    16e2:	c9 80       	ldd	r12, Y+1	; 0x01
    16e4:	2c 2d       	mov	r18, r12
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	39 8b       	std	Y+17, r19	; 0x11
    16ea:	28 8b       	std	Y+16, r18	; 0x10
    16ec:	c0 fe       	sbrs	r12, 0
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <vfprintf+0x19c>
    16f0:	38 89       	ldd	r19, Y+16	; 0x10
    16f2:	33 ff       	sbrs	r19, 3
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x1a8>
    16f6:	11 fd       	sbrc	r17, 1
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <vfprintf+0x1ac>
    16fa:	12 ff       	sbrs	r17, 2
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <vfprintf+0x1b0>
    16fe:	00 e2       	ldi	r16, 0x20	; 32
    1700:	05 c0       	rjmp	.+10     	; 0x170c <vfprintf+0x1b2>
    1702:	0d e2       	ldi	r16, 0x2D	; 45
    1704:	03 c0       	rjmp	.+6      	; 0x170c <vfprintf+0x1b2>
    1706:	0b e2       	ldi	r16, 0x2B	; 43
    1708:	01 c0       	rjmp	.+2      	; 0x170c <vfprintf+0x1b2>
    170a:	00 e0       	ldi	r16, 0x00	; 0
    170c:	88 89       	ldd	r24, Y+16	; 0x10
    170e:	99 89       	ldd	r25, Y+17	; 0x11
    1710:	8c 70       	andi	r24, 0x0C	; 12
    1712:	90 70       	andi	r25, 0x00	; 0
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	09 f4       	brne	.+2      	; 0x171a <vfprintf+0x1c0>
    1718:	3c c0       	rjmp	.+120    	; 0x1792 <vfprintf+0x238>
    171a:	00 23       	and	r16, r16
    171c:	11 f0       	breq	.+4      	; 0x1722 <vfprintf+0x1c8>
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <vfprintf+0x1ca>
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	8d 15       	cp	r24, r13
    1726:	58 f4       	brcc	.+22     	; 0x173e <vfprintf+0x1e4>
    1728:	d8 1a       	sub	r13, r24
    172a:	13 fd       	sbrc	r17, 3
    172c:	09 c0       	rjmp	.+18     	; 0x1740 <vfprintf+0x1e6>
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	b4 01       	movw	r22, r8
    1734:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1738:	da 94       	dec	r13
    173a:	c9 f7       	brne	.-14     	; 0x172e <vfprintf+0x1d4>
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <vfprintf+0x1e6>
    173e:	dd 24       	eor	r13, r13
    1740:	00 23       	and	r16, r16
    1742:	29 f0       	breq	.+10     	; 0x174e <vfprintf+0x1f4>
    1744:	80 2f       	mov	r24, r16
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	b4 01       	movw	r22, r8
    174a:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    174e:	88 89       	ldd	r24, Y+16	; 0x10
    1750:	83 fd       	sbrc	r24, 3
    1752:	05 c0       	rjmp	.+10     	; 0x175e <vfprintf+0x204>
    1754:	3c e6       	ldi	r19, 0x6C	; 108
    1756:	e3 2e       	mov	r14, r19
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	f3 2e       	mov	r15, r19
    175c:	11 c0       	rjmp	.+34     	; 0x1780 <vfprintf+0x226>
    175e:	28 e6       	ldi	r18, 0x68	; 104
    1760:	e2 2e       	mov	r14, r18
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	f2 2e       	mov	r15, r18
    1766:	0c c0       	rjmp	.+24     	; 0x1780 <vfprintf+0x226>
    1768:	01 15       	cp	r16, r1
    176a:	11 05       	cpc	r17, r1
    176c:	09 f0       	breq	.+2      	; 0x1770 <vfprintf+0x216>
    176e:	80 52       	subi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	b4 01       	movw	r22, r8
    1774:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1778:	08 94       	sec
    177a:	e1 1c       	adc	r14, r1
    177c:	f1 1c       	adc	r15, r1
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <vfprintf+0x22e>
    1780:	01 2f       	mov	r16, r17
    1782:	10 e0       	ldi	r17, 0x00	; 0
    1784:	00 71       	andi	r16, 0x10	; 16
    1786:	10 70       	andi	r17, 0x00	; 0
    1788:	f7 01       	movw	r30, r14
    178a:	84 91       	lpm	r24, Z
    178c:	88 23       	and	r24, r24
    178e:	61 f7       	brne	.-40     	; 0x1768 <vfprintf+0x20e>
    1790:	63 c2       	rjmp	.+1222   	; 0x1c58 <vfprintf+0x6fe>
    1792:	17 ff       	sbrs	r17, 7
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <vfprintf+0x258>
    1796:	ea 0c       	add	r14, r10
    1798:	f8 89       	ldd	r31, Y+16	; 0x10
    179a:	f4 ff       	sbrs	r31, 4
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <vfprintf+0x24c>
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	81 33       	cpi	r24, 0x31	; 49
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <vfprintf+0x24c>
    17a4:	ea 94       	dec	r14
    17a6:	1e 14       	cp	r1, r14
    17a8:	4c f5       	brge	.+82     	; 0x17fc <vfprintf+0x2a2>
    17aa:	28 e0       	ldi	r18, 0x08	; 8
    17ac:	2e 15       	cp	r18, r14
    17ae:	48 f1       	brcs	.+82     	; 0x1802 <vfprintf+0x2a8>
    17b0:	2c c0       	rjmp	.+88     	; 0x180a <vfprintf+0x2b0>
    17b2:	16 fd       	sbrc	r17, 6
    17b4:	2a c0       	rjmp	.+84     	; 0x180a <vfprintf+0x2b0>
    17b6:	8f 2d       	mov	r24, r15
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	8a 15       	cp	r24, r10
    17bc:	9b 05       	cpc	r25, r11
    17be:	44 f0       	brlt	.+16     	; 0x17d0 <vfprintf+0x276>
    17c0:	3c ef       	ldi	r19, 0xFC	; 252
    17c2:	a3 16       	cp	r10, r19
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	b3 06       	cpc	r11, r19
    17c8:	1c f0       	brlt	.+6      	; 0x17d0 <vfprintf+0x276>
    17ca:	10 68       	ori	r17, 0x80	; 128
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x276>
    17ce:	fa 94       	dec	r15
    17d0:	ff 20       	and	r15, r15
    17d2:	49 f0       	breq	.+18     	; 0x17e6 <vfprintf+0x28c>
    17d4:	e2 e0       	ldi	r30, 0x02	; 2
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	ec 0f       	add	r30, r28
    17da:	fd 1f       	adc	r31, r29
    17dc:	ef 0d       	add	r30, r15
    17de:	f1 1d       	adc	r31, r1
    17e0:	80 81       	ld	r24, Z
    17e2:	80 33       	cpi	r24, 0x30	; 48
    17e4:	a1 f3       	breq	.-24     	; 0x17ce <vfprintf+0x274>
    17e6:	17 ff       	sbrs	r17, 7
    17e8:	10 c0       	rjmp	.+32     	; 0x180a <vfprintf+0x2b0>
    17ea:	ef 2c       	mov	r14, r15
    17ec:	e3 94       	inc	r14
    17ee:	8f 2d       	mov	r24, r15
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a8 16       	cp	r10, r24
    17f4:	b9 06       	cpc	r11, r25
    17f6:	44 f4       	brge	.+16     	; 0x1808 <vfprintf+0x2ae>
    17f8:	fa 18       	sub	r15, r10
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <vfprintf+0x2b0>
    17fc:	ee 24       	eor	r14, r14
    17fe:	e3 94       	inc	r14
    1800:	04 c0       	rjmp	.+8      	; 0x180a <vfprintf+0x2b0>
    1802:	98 e0       	ldi	r25, 0x08	; 8
    1804:	e9 2e       	mov	r14, r25
    1806:	01 c0       	rjmp	.+2      	; 0x180a <vfprintf+0x2b0>
    1808:	ff 24       	eor	r15, r15
    180a:	17 ff       	sbrs	r17, 7
    180c:	07 c0       	rjmp	.+14     	; 0x181c <vfprintf+0x2c2>
    180e:	1a 14       	cp	r1, r10
    1810:	1b 04       	cpc	r1, r11
    1812:	3c f4       	brge	.+14     	; 0x1822 <vfprintf+0x2c8>
    1814:	95 01       	movw	r18, r10
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x2cc>
    181c:	25 e0       	ldi	r18, 0x05	; 5
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x2cc>
    1822:	21 e0       	ldi	r18, 0x01	; 1
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	00 23       	and	r16, r16
    1828:	11 f0       	breq	.+4      	; 0x182e <vfprintf+0x2d4>
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	ff 20       	and	r15, r15
    1830:	29 f0       	breq	.+10     	; 0x183c <vfprintf+0x2e2>
    1832:	8f 2d       	mov	r24, r15
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	28 0f       	add	r18, r24
    183a:	39 1f       	adc	r19, r25
    183c:	8d 2d       	mov	r24, r13
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	14 f4       	brge	.+4      	; 0x184a <vfprintf+0x2f0>
    1846:	d2 1a       	sub	r13, r18
    1848:	01 c0       	rjmp	.+2      	; 0x184c <vfprintf+0x2f2>
    184a:	dd 24       	eor	r13, r13
    184c:	61 2e       	mov	r6, r17
    184e:	77 24       	eor	r7, r7
    1850:	c3 01       	movw	r24, r6
    1852:	89 70       	andi	r24, 0x09	; 9
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	49 f4       	brne	.+18     	; 0x186c <vfprintf+0x312>
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x30e>
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	b4 01       	movw	r22, r8
    1862:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1866:	da 94       	dec	r13
    1868:	dd 20       	and	r13, r13
    186a:	c1 f7       	brne	.-16     	; 0x185c <vfprintf+0x302>
    186c:	00 23       	and	r16, r16
    186e:	29 f0       	breq	.+10     	; 0x187a <vfprintf+0x320>
    1870:	80 2f       	mov	r24, r16
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	b4 01       	movw	r22, r8
    1876:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    187a:	63 fc       	sbrc	r6, 3
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <vfprintf+0x336>
    187e:	06 c0       	rjmp	.+12     	; 0x188c <vfprintf+0x332>
    1880:	80 e3       	ldi	r24, 0x30	; 48
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	b4 01       	movw	r22, r8
    1886:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    188a:	da 94       	dec	r13
    188c:	dd 20       	and	r13, r13
    188e:	c1 f7       	brne	.-16     	; 0x1880 <vfprintf+0x326>
    1890:	17 ff       	sbrs	r17, 7
    1892:	48 c0       	rjmp	.+144    	; 0x1924 <vfprintf+0x3ca>
    1894:	85 01       	movw	r16, r10
    1896:	b7 fe       	sbrs	r11, 7
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x344>
    189a:	00 e0       	ldi	r16, 0x00	; 0
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	66 24       	eor	r6, r6
    18a0:	77 24       	eor	r7, r7
    18a2:	95 01       	movw	r18, r10
    18a4:	2e 19       	sub	r18, r14
    18a6:	31 09       	sbc	r19, r1
    18a8:	3b 8b       	std	Y+19, r19	; 0x13
    18aa:	2a 8b       	std	Y+18, r18	; 0x12
    18ac:	25 01       	movw	r4, r10
    18ae:	40 1a       	sub	r4, r16
    18b0:	51 0a       	sbc	r5, r17
    18b2:	42 0c       	add	r4, r2
    18b4:	53 1c       	adc	r5, r3
    18b6:	6f 2d       	mov	r22, r15
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	ee 24       	eor	r14, r14
    18bc:	ff 24       	eor	r15, r15
    18be:	e6 1a       	sub	r14, r22
    18c0:	f7 0a       	sbc	r15, r23
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	0f 3f       	cpi	r16, 0xFF	; 255
    18c6:	13 07       	cpc	r17, r19
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <vfprintf+0x37a>
    18ca:	8e e2       	ldi	r24, 0x2E	; 46
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	b4 01       	movw	r22, r8
    18d0:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    18d4:	a0 16       	cp	r10, r16
    18d6:	b1 06       	cpc	r11, r17
    18d8:	54 f0       	brlt	.+20     	; 0x18ee <vfprintf+0x394>
    18da:	2a 89       	ldd	r18, Y+18	; 0x12
    18dc:	3b 89       	ldd	r19, Y+19	; 0x13
    18de:	20 17       	cp	r18, r16
    18e0:	31 07       	cpc	r19, r17
    18e2:	2c f4       	brge	.+10     	; 0x18ee <vfprintf+0x394>
    18e4:	f2 01       	movw	r30, r4
    18e6:	e6 0d       	add	r30, r6
    18e8:	f7 1d       	adc	r31, r7
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <vfprintf+0x396>
    18ee:	80 e3       	ldi	r24, 0x30	; 48
    18f0:	01 50       	subi	r16, 0x01	; 1
    18f2:	10 40       	sbci	r17, 0x00	; 0
    18f4:	08 94       	sec
    18f6:	61 1c       	adc	r6, r1
    18f8:	71 1c       	adc	r7, r1
    18fa:	0e 15       	cp	r16, r14
    18fc:	1f 05       	cpc	r17, r15
    18fe:	2c f0       	brlt	.+10     	; 0x190a <vfprintf+0x3b0>
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	b4 01       	movw	r22, r8
    1904:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1908:	dc cf       	rjmp	.-72     	; 0x18c2 <vfprintf+0x368>
    190a:	0a 15       	cp	r16, r10
    190c:	1b 05       	cpc	r17, r11
    190e:	41 f4       	brne	.+16     	; 0x1920 <vfprintf+0x3c6>
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	96 33       	cpi	r25, 0x36	; 54
    1914:	20 f4       	brcc	.+8      	; 0x191e <vfprintf+0x3c4>
    1916:	95 33       	cpi	r25, 0x35	; 53
    1918:	19 f4       	brne	.+6      	; 0x1920 <vfprintf+0x3c6>
    191a:	38 89       	ldd	r19, Y+16	; 0x10
    191c:	34 ff       	sbrs	r19, 4
    191e:	81 e3       	ldi	r24, 0x31	; 49
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	49 c0       	rjmp	.+146    	; 0x19b6 <vfprintf+0x45c>
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	81 33       	cpi	r24, 0x31	; 49
    1928:	11 f0       	breq	.+4      	; 0x192e <vfprintf+0x3d4>
    192a:	9f ee       	ldi	r25, 0xEF	; 239
    192c:	c9 22       	and	r12, r25
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	b4 01       	movw	r22, r8
    1932:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1936:	ff 20       	and	r15, r15
    1938:	89 f0       	breq	.+34     	; 0x195c <vfprintf+0x402>
    193a:	8e e2       	ldi	r24, 0x2E	; 46
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	b4 01       	movw	r22, r8
    1940:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1944:	12 e0       	ldi	r17, 0x02	; 2
    1946:	f1 01       	movw	r30, r2
    1948:	e1 0f       	add	r30, r17
    194a:	f1 1d       	adc	r31, r1
    194c:	1f 5f       	subi	r17, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	b4 01       	movw	r22, r8
    1954:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1958:	fa 94       	dec	r15
    195a:	a9 f7       	brne	.-22     	; 0x1946 <vfprintf+0x3ec>
    195c:	64 fe       	sbrs	r6, 4
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <vfprintf+0x40c>
    1960:	85 e4       	ldi	r24, 0x45	; 69
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <vfprintf+0x410>
    1966:	85 e6       	ldi	r24, 0x65	; 101
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	b4 01       	movw	r22, r8
    196c:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1970:	b7 fc       	sbrc	r11, 7
    1972:	05 c0       	rjmp	.+10     	; 0x197e <vfprintf+0x424>
    1974:	a1 14       	cp	r10, r1
    1976:	b1 04       	cpc	r11, r1
    1978:	41 f4       	brne	.+16     	; 0x198a <vfprintf+0x430>
    197a:	c4 fe       	sbrs	r12, 4
    197c:	06 c0       	rjmp	.+12     	; 0x198a <vfprintf+0x430>
    197e:	b0 94       	com	r11
    1980:	a1 94       	neg	r10
    1982:	b1 08       	sbc	r11, r1
    1984:	b3 94       	inc	r11
    1986:	8d e2       	ldi	r24, 0x2D	; 45
    1988:	01 c0       	rjmp	.+2      	; 0x198c <vfprintf+0x432>
    198a:	8b e2       	ldi	r24, 0x2B	; 43
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1994:	80 e3       	ldi	r24, 0x30	; 48
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <vfprintf+0x448>
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	e6 ef       	ldi	r30, 0xF6	; 246
    199c:	ff ef       	ldi	r31, 0xFF	; 255
    199e:	ae 0e       	add	r10, r30
    19a0:	bf 1e       	adc	r11, r31
    19a2:	fa e0       	ldi	r31, 0x0A	; 10
    19a4:	af 16       	cp	r10, r31
    19a6:	b1 04       	cpc	r11, r1
    19a8:	bc f7       	brge	.-18     	; 0x1998 <vfprintf+0x43e>
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	b4 01       	movw	r22, r8
    19ae:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    19b2:	c5 01       	movw	r24, r10
    19b4:	c0 96       	adiw	r24, 0x30	; 48
    19b6:	b4 01       	movw	r22, r8
    19b8:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    19bc:	4d c1       	rjmp	.+666    	; 0x1c58 <vfprintf+0x6fe>
    19be:	83 36       	cpi	r24, 0x63	; 99
    19c0:	31 f0       	breq	.+12     	; 0x19ce <vfprintf+0x474>
    19c2:	83 37       	cpi	r24, 0x73	; 115
    19c4:	89 f0       	breq	.+34     	; 0x19e8 <vfprintf+0x48e>
    19c6:	83 35       	cpi	r24, 0x53	; 83
    19c8:	09 f0       	breq	.+2      	; 0x19cc <vfprintf+0x472>
    19ca:	59 c0       	rjmp	.+178    	; 0x1a7e <vfprintf+0x524>
    19cc:	22 c0       	rjmp	.+68     	; 0x1a12 <vfprintf+0x4b8>
    19ce:	9a 01       	movw	r18, r20
    19d0:	2e 5f       	subi	r18, 0xFE	; 254
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	3d 87       	std	Y+13, r19	; 0x0d
    19d6:	2c 87       	std	Y+12, r18	; 0x0c
    19d8:	fa 01       	movw	r30, r20
    19da:	80 81       	ld	r24, Z
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	e8 2e       	mov	r14, r24
    19e2:	f1 2c       	mov	r15, r1
    19e4:	51 01       	movw	r10, r2
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <vfprintf+0x4b4>
    19e8:	9a 01       	movw	r18, r20
    19ea:	2e 5f       	subi	r18, 0xFE	; 254
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	3d 87       	std	Y+13, r19	; 0x0d
    19f0:	2c 87       	std	Y+12, r18	; 0x0c
    19f2:	fa 01       	movw	r30, r20
    19f4:	a0 80       	ld	r10, Z
    19f6:	b1 80       	ldd	r11, Z+1	; 0x01
    19f8:	16 ff       	sbrs	r17, 6
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x4a8>
    19fc:	6f 2d       	mov	r22, r15
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x4ac>
    1a02:	6f ef       	ldi	r22, 0xFF	; 255
    1a04:	7f ef       	ldi	r23, 0xFF	; 255
    1a06:	c5 01       	movw	r24, r10
    1a08:	0e 94 2b 11 	call	0x2256	; 0x2256 <strnlen>
    1a0c:	7c 01       	movw	r14, r24
    1a0e:	1f 77       	andi	r17, 0x7F	; 127
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <vfprintf+0x4e0>
    1a12:	9a 01       	movw	r18, r20
    1a14:	2e 5f       	subi	r18, 0xFE	; 254
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	3d 87       	std	Y+13, r19	; 0x0d
    1a1a:	2c 87       	std	Y+12, r18	; 0x0c
    1a1c:	fa 01       	movw	r30, r20
    1a1e:	a0 80       	ld	r10, Z
    1a20:	b1 80       	ldd	r11, Z+1	; 0x01
    1a22:	16 ff       	sbrs	r17, 6
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <vfprintf+0x4d2>
    1a26:	6f 2d       	mov	r22, r15
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <vfprintf+0x4d6>
    1a2c:	6f ef       	ldi	r22, 0xFF	; 255
    1a2e:	7f ef       	ldi	r23, 0xFF	; 255
    1a30:	c5 01       	movw	r24, r10
    1a32:	0e 94 fe 10 	call	0x21fc	; 0x21fc <strnlen_P>
    1a36:	7c 01       	movw	r14, r24
    1a38:	10 68       	ori	r17, 0x80	; 128
    1a3a:	13 fd       	sbrc	r17, 3
    1a3c:	1c c0       	rjmp	.+56     	; 0x1a76 <vfprintf+0x51c>
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <vfprintf+0x4f2>
    1a40:	80 e2       	ldi	r24, 0x20	; 32
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	b4 01       	movw	r22, r8
    1a46:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1a4a:	da 94       	dec	r13
    1a4c:	8d 2d       	mov	r24, r13
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	e8 16       	cp	r14, r24
    1a52:	f9 06       	cpc	r15, r25
    1a54:	a8 f3       	brcs	.-22     	; 0x1a40 <vfprintf+0x4e6>
    1a56:	0f c0       	rjmp	.+30     	; 0x1a76 <vfprintf+0x51c>
    1a58:	f5 01       	movw	r30, r10
    1a5a:	17 fd       	sbrc	r17, 7
    1a5c:	85 91       	lpm	r24, Z+
    1a5e:	17 ff       	sbrs	r17, 7
    1a60:	81 91       	ld	r24, Z+
    1a62:	5f 01       	movw	r10, r30
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b4 01       	movw	r22, r8
    1a68:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1a6c:	d1 10       	cpse	r13, r1
    1a6e:	da 94       	dec	r13
    1a70:	08 94       	sec
    1a72:	e1 08       	sbc	r14, r1
    1a74:	f1 08       	sbc	r15, r1
    1a76:	e1 14       	cp	r14, r1
    1a78:	f1 04       	cpc	r15, r1
    1a7a:	71 f7       	brne	.-36     	; 0x1a58 <vfprintf+0x4fe>
    1a7c:	ed c0       	rjmp	.+474    	; 0x1c58 <vfprintf+0x6fe>
    1a7e:	84 36       	cpi	r24, 0x64	; 100
    1a80:	11 f0       	breq	.+4      	; 0x1a86 <vfprintf+0x52c>
    1a82:	89 36       	cpi	r24, 0x69	; 105
    1a84:	71 f5       	brne	.+92     	; 0x1ae2 <vfprintf+0x588>
    1a86:	9a 01       	movw	r18, r20
    1a88:	17 ff       	sbrs	r17, 7
    1a8a:	0a c0       	rjmp	.+20     	; 0x1aa0 <vfprintf+0x546>
    1a8c:	2c 5f       	subi	r18, 0xFC	; 252
    1a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a90:	3d 87       	std	Y+13, r19	; 0x0d
    1a92:	2c 87       	std	Y+12, r18	; 0x0c
    1a94:	fa 01       	movw	r30, r20
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a9e:	0b c0       	rjmp	.+22     	; 0x1ab6 <vfprintf+0x55c>
    1aa0:	2e 5f       	subi	r18, 0xFE	; 254
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	3d 87       	std	Y+13, r19	; 0x0d
    1aa6:	2c 87       	std	Y+12, r18	; 0x0c
    1aa8:	fa 01       	movw	r30, r20
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	aa 27       	eor	r26, r26
    1ab0:	97 fd       	sbrc	r25, 7
    1ab2:	a0 95       	com	r26
    1ab4:	ba 2f       	mov	r27, r26
    1ab6:	01 2f       	mov	r16, r17
    1ab8:	0f 76       	andi	r16, 0x6F	; 111
    1aba:	b7 ff       	sbrs	r27, 7
    1abc:	08 c0       	rjmp	.+16     	; 0x1ace <vfprintf+0x574>
    1abe:	b0 95       	com	r27
    1ac0:	a0 95       	com	r26
    1ac2:	90 95       	com	r25
    1ac4:	81 95       	neg	r24
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	af 4f       	sbci	r26, 0xFF	; 255
    1aca:	bf 4f       	sbci	r27, 0xFF	; 255
    1acc:	00 68       	ori	r16, 0x80	; 128
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	a1 01       	movw	r20, r2
    1ad4:	2a e0       	ldi	r18, 0x0A	; 10
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	0e 94 a5 11 	call	0x234a	; 0x234a <__ultoa_invert>
    1adc:	e8 2e       	mov	r14, r24
    1ade:	e2 18       	sub	r14, r2
    1ae0:	41 c0       	rjmp	.+130    	; 0x1b64 <vfprintf+0x60a>
    1ae2:	85 37       	cpi	r24, 0x75	; 117
    1ae4:	21 f4       	brne	.+8      	; 0x1aee <vfprintf+0x594>
    1ae6:	1f 7e       	andi	r17, 0xEF	; 239
    1ae8:	2a e0       	ldi	r18, 0x0A	; 10
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	20 c0       	rjmp	.+64     	; 0x1b2e <vfprintf+0x5d4>
    1aee:	19 7f       	andi	r17, 0xF9	; 249
    1af0:	8f 36       	cpi	r24, 0x6F	; 111
    1af2:	a9 f0       	breq	.+42     	; 0x1b1e <vfprintf+0x5c4>
    1af4:	80 37       	cpi	r24, 0x70	; 112
    1af6:	20 f4       	brcc	.+8      	; 0x1b00 <vfprintf+0x5a6>
    1af8:	88 35       	cpi	r24, 0x58	; 88
    1afa:	09 f0       	breq	.+2      	; 0x1afe <vfprintf+0x5a4>
    1afc:	b0 c0       	rjmp	.+352    	; 0x1c5e <vfprintf+0x704>
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <vfprintf+0x5bc>
    1b00:	80 37       	cpi	r24, 0x70	; 112
    1b02:	21 f0       	breq	.+8      	; 0x1b0c <vfprintf+0x5b2>
    1b04:	88 37       	cpi	r24, 0x78	; 120
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <vfprintf+0x5b0>
    1b08:	aa c0       	rjmp	.+340    	; 0x1c5e <vfprintf+0x704>
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <vfprintf+0x5b4>
    1b0c:	10 61       	ori	r17, 0x10	; 16
    1b0e:	14 ff       	sbrs	r17, 4
    1b10:	09 c0       	rjmp	.+18     	; 0x1b24 <vfprintf+0x5ca>
    1b12:	14 60       	ori	r17, 0x04	; 4
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <vfprintf+0x5ca>
    1b16:	14 ff       	sbrs	r17, 4
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <vfprintf+0x5d0>
    1b1a:	16 60       	ori	r17, 0x06	; 6
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <vfprintf+0x5d0>
    1b1e:	28 e0       	ldi	r18, 0x08	; 8
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <vfprintf+0x5d4>
    1b24:	20 e1       	ldi	r18, 0x10	; 16
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <vfprintf+0x5d4>
    1b2a:	20 e1       	ldi	r18, 0x10	; 16
    1b2c:	32 e0       	ldi	r19, 0x02	; 2
    1b2e:	ca 01       	movw	r24, r20
    1b30:	17 ff       	sbrs	r17, 7
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <vfprintf+0x5ec>
    1b34:	04 96       	adiw	r24, 0x04	; 4
    1b36:	9d 87       	std	Y+13, r25	; 0x0d
    1b38:	8c 87       	std	Y+12, r24	; 0x0c
    1b3a:	fa 01       	movw	r30, r20
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	08 c0       	rjmp	.+16     	; 0x1b56 <vfprintf+0x5fc>
    1b46:	02 96       	adiw	r24, 0x02	; 2
    1b48:	9d 87       	std	Y+13, r25	; 0x0d
    1b4a:	8c 87       	std	Y+12, r24	; 0x0c
    1b4c:	fa 01       	movw	r30, r20
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a1 01       	movw	r20, r2
    1b58:	0e 94 a5 11 	call	0x234a	; 0x234a <__ultoa_invert>
    1b5c:	e8 2e       	mov	r14, r24
    1b5e:	e2 18       	sub	r14, r2
    1b60:	01 2f       	mov	r16, r17
    1b62:	0f 77       	andi	r16, 0x7F	; 127
    1b64:	06 ff       	sbrs	r16, 6
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <vfprintf+0x620>
    1b68:	0e 7f       	andi	r16, 0xFE	; 254
    1b6a:	ef 14       	cp	r14, r15
    1b6c:	30 f4       	brcc	.+12     	; 0x1b7a <vfprintf+0x620>
    1b6e:	04 ff       	sbrs	r16, 4
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <vfprintf+0x624>
    1b72:	02 fd       	sbrc	r16, 2
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <vfprintf+0x624>
    1b76:	0f 7e       	andi	r16, 0xEF	; 239
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <vfprintf+0x624>
    1b7a:	1e 2d       	mov	r17, r14
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <vfprintf+0x626>
    1b7e:	1f 2d       	mov	r17, r15
    1b80:	80 2f       	mov	r24, r16
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	04 ff       	sbrs	r16, 4
    1b86:	0c c0       	rjmp	.+24     	; 0x1ba0 <vfprintf+0x646>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ee 0d       	add	r30, r14
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	20 81       	ld	r18, Z
    1b90:	20 33       	cpi	r18, 0x30	; 48
    1b92:	11 f4       	brne	.+4      	; 0x1b98 <vfprintf+0x63e>
    1b94:	09 7e       	andi	r16, 0xE9	; 233
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <vfprintf+0x650>
    1b98:	02 ff       	sbrs	r16, 2
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <vfprintf+0x64e>
    1b9c:	1e 5f       	subi	r17, 0xFE	; 254
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <vfprintf+0x650>
    1ba0:	86 78       	andi	r24, 0x86	; 134
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <vfprintf+0x650>
    1ba8:	1f 5f       	subi	r17, 0xFF	; 255
    1baa:	a0 2e       	mov	r10, r16
    1bac:	bb 24       	eor	r11, r11
    1bae:	03 fd       	sbrc	r16, 3
    1bb0:	12 c0       	rjmp	.+36     	; 0x1bd6 <vfprintf+0x67c>
    1bb2:	00 ff       	sbrs	r16, 0
    1bb4:	0d c0       	rjmp	.+26     	; 0x1bd0 <vfprintf+0x676>
    1bb6:	fe 2c       	mov	r15, r14
    1bb8:	1d 15       	cp	r17, r13
    1bba:	50 f4       	brcc	.+20     	; 0x1bd0 <vfprintf+0x676>
    1bbc:	fd 0c       	add	r15, r13
    1bbe:	f1 1a       	sub	r15, r17
    1bc0:	1d 2d       	mov	r17, r13
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <vfprintf+0x676>
    1bc4:	80 e2       	ldi	r24, 0x20	; 32
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	b4 01       	movw	r22, r8
    1bca:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1bce:	1f 5f       	subi	r17, 0xFF	; 255
    1bd0:	1d 15       	cp	r17, r13
    1bd2:	c0 f3       	brcs	.-16     	; 0x1bc4 <vfprintf+0x66a>
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <vfprintf+0x684>
    1bd6:	1d 15       	cp	r17, r13
    1bd8:	10 f4       	brcc	.+4      	; 0x1bde <vfprintf+0x684>
    1bda:	d1 1a       	sub	r13, r17
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <vfprintf+0x686>
    1bde:	dd 24       	eor	r13, r13
    1be0:	a4 fe       	sbrs	r10, 4
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <vfprintf+0x6a8>
    1be4:	80 e3       	ldi	r24, 0x30	; 48
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	b4 01       	movw	r22, r8
    1bea:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1bee:	a2 fe       	sbrs	r10, 2
    1bf0:	1f c0       	rjmp	.+62     	; 0x1c30 <vfprintf+0x6d6>
    1bf2:	a1 fe       	sbrs	r10, 1
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <vfprintf+0x6a2>
    1bf6:	88 e5       	ldi	r24, 0x58	; 88
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	10 c0       	rjmp	.+32     	; 0x1c1c <vfprintf+0x6c2>
    1bfc:	88 e7       	ldi	r24, 0x78	; 120
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0d c0       	rjmp	.+26     	; 0x1c1c <vfprintf+0x6c2>
    1c02:	c5 01       	movw	r24, r10
    1c04:	86 78       	andi	r24, 0x86	; 134
    1c06:	90 70       	andi	r25, 0x00	; 0
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	91 f0       	breq	.+36     	; 0x1c30 <vfprintf+0x6d6>
    1c0c:	a1 fc       	sbrc	r10, 1
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x6ba>
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <vfprintf+0x6bc>
    1c14:	8b e2       	ldi	r24, 0x2B	; 43
    1c16:	07 fd       	sbrc	r16, 7
    1c18:	8d e2       	ldi	r24, 0x2D	; 45
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	b4 01       	movw	r22, r8
    1c1e:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0x6d6>
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	b4 01       	movw	r22, r8
    1c2a:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1c2e:	fa 94       	dec	r15
    1c30:	ef 14       	cp	r14, r15
    1c32:	c0 f3       	brcs	.-16     	; 0x1c24 <vfprintf+0x6ca>
    1c34:	ea 94       	dec	r14
    1c36:	f1 01       	movw	r30, r2
    1c38:	ee 0d       	add	r30, r14
    1c3a:	f1 1d       	adc	r31, r1
    1c3c:	80 81       	ld	r24, Z
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	b4 01       	movw	r22, r8
    1c42:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1c46:	ee 20       	and	r14, r14
    1c48:	a9 f7       	brne	.-22     	; 0x1c34 <vfprintf+0x6da>
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <vfprintf+0x6fe>
    1c4c:	80 e2       	ldi	r24, 0x20	; 32
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	b4 01       	movw	r22, r8
    1c52:	0e 94 36 11 	call	0x226c	; 0x226c <fputc>
    1c56:	da 94       	dec	r13
    1c58:	dd 20       	and	r13, r13
    1c5a:	c1 f7       	brne	.-16     	; 0x1c4c <vfprintf+0x6f2>
    1c5c:	8e cc       	rjmp	.-1764   	; 0x157a <vfprintf+0x20>
    1c5e:	f4 01       	movw	r30, r8
    1c60:	86 81       	ldd	r24, Z+6	; 0x06
    1c62:	97 81       	ldd	r25, Z+7	; 0x07
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x710>
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	65 96       	adiw	r28, 0x15	; 21
    1c6c:	e2 e1       	ldi	r30, 0x12	; 18
    1c6e:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__epilogue_restores__>

00001c72 <__divmodhi4>:
    1c72:	97 fb       	bst	r25, 7
    1c74:	09 2e       	mov	r0, r25
    1c76:	07 26       	eor	r0, r23
    1c78:	0a d0       	rcall	.+20     	; 0x1c8e <__divmodhi4_neg1>
    1c7a:	77 fd       	sbrc	r23, 7
    1c7c:	04 d0       	rcall	.+8      	; 0x1c86 <__divmodhi4_neg2>
    1c7e:	43 d0       	rcall	.+134    	; 0x1d06 <__udivmodhi4>
    1c80:	06 d0       	rcall	.+12     	; 0x1c8e <__divmodhi4_neg1>
    1c82:	00 20       	and	r0, r0
    1c84:	1a f4       	brpl	.+6      	; 0x1c8c <__divmodhi4_exit>

00001c86 <__divmodhi4_neg2>:
    1c86:	70 95       	com	r23
    1c88:	61 95       	neg	r22
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c8c <__divmodhi4_exit>:
    1c8c:	08 95       	ret

00001c8e <__divmodhi4_neg1>:
    1c8e:	f6 f7       	brtc	.-4      	; 0x1c8c <__divmodhi4_exit>
    1c90:	90 95       	com	r25
    1c92:	81 95       	neg	r24
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	08 95       	ret

00001c98 <__prologue_saves__>:
    1c98:	2f 92       	push	r2
    1c9a:	3f 92       	push	r3
    1c9c:	4f 92       	push	r4
    1c9e:	5f 92       	push	r5
    1ca0:	6f 92       	push	r6
    1ca2:	7f 92       	push	r7
    1ca4:	8f 92       	push	r8
    1ca6:	9f 92       	push	r9
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	ca 1b       	sub	r28, r26
    1cc2:	db 0b       	sbc	r29, r27
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	09 94       	ijmp

00001cd0 <__epilogue_restores__>:
    1cd0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cd2:	39 88       	ldd	r3, Y+17	; 0x11
    1cd4:	48 88       	ldd	r4, Y+16	; 0x10
    1cd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cda:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cde:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ce2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ce4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ce6:	df 80       	ldd	r13, Y+7	; 0x07
    1ce8:	ee 80       	ldd	r14, Y+6	; 0x06
    1cea:	fd 80       	ldd	r15, Y+5	; 0x05
    1cec:	0c 81       	ldd	r16, Y+4	; 0x04
    1cee:	1b 81       	ldd	r17, Y+3	; 0x03
    1cf0:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf2:	b9 81       	ldd	r27, Y+1	; 0x01
    1cf4:	ce 0f       	add	r28, r30
    1cf6:	d1 1d       	adc	r29, r1
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	ed 01       	movw	r28, r26
    1d04:	08 95       	ret

00001d06 <__udivmodhi4>:
    1d06:	aa 1b       	sub	r26, r26
    1d08:	bb 1b       	sub	r27, r27
    1d0a:	51 e1       	ldi	r21, 0x11	; 17
    1d0c:	07 c0       	rjmp	.+14     	; 0x1d1c <__udivmodhi4_ep>

00001d0e <__udivmodhi4_loop>:
    1d0e:	aa 1f       	adc	r26, r26
    1d10:	bb 1f       	adc	r27, r27
    1d12:	a6 17       	cp	r26, r22
    1d14:	b7 07       	cpc	r27, r23
    1d16:	10 f0       	brcs	.+4      	; 0x1d1c <__udivmodhi4_ep>
    1d18:	a6 1b       	sub	r26, r22
    1d1a:	b7 0b       	sbc	r27, r23

00001d1c <__udivmodhi4_ep>:
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	5a 95       	dec	r21
    1d22:	a9 f7       	brne	.-22     	; 0x1d0e <__udivmodhi4_loop>
    1d24:	80 95       	com	r24
    1d26:	90 95       	com	r25
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	08 95       	ret

00001d2e <strtod>:
    1d2e:	a0 e0       	ldi	r26, 0x00	; 0
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x8>
    1d3a:	5b 01       	movw	r10, r22
    1d3c:	61 15       	cp	r22, r1
    1d3e:	71 05       	cpc	r23, r1
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <strtod+0x1c>
    1d42:	db 01       	movw	r26, r22
    1d44:	8c 93       	st	X, r24
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	9c 93       	st	X, r25
    1d4a:	7c 01       	movw	r14, r24
    1d4c:	e7 01       	movw	r28, r14
    1d4e:	08 94       	sec
    1d50:	e1 1c       	adc	r14, r1
    1d52:	f1 1c       	adc	r15, r1
    1d54:	08 81       	ld	r16, Y
    1d56:	67 01       	movw	r12, r14
    1d58:	80 2f       	mov	r24, r16
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 de 10 	call	0x21bc	; 0x21bc <isspace>
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	a1 f7       	brne	.-24     	; 0x1d4c <strtod+0x1e>
    1d64:	0d 32       	cpi	r16, 0x2D	; 45
    1d66:	41 f4       	brne	.+16     	; 0x1d78 <strtod+0x4a>
    1d68:	09 81       	ldd	r16, Y+1	; 0x01
    1d6a:	42 e0       	ldi	r20, 0x02	; 2
    1d6c:	c4 2e       	mov	r12, r20
    1d6e:	d1 2c       	mov	r13, r1
    1d70:	cc 0e       	add	r12, r28
    1d72:	dd 1e       	adc	r13, r29
    1d74:	11 e0       	ldi	r17, 0x01	; 1
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <strtod+0x5c>
    1d78:	0b 32       	cpi	r16, 0x2B	; 43
    1d7a:	31 f4       	brne	.+12     	; 0x1d88 <strtod+0x5a>
    1d7c:	09 81       	ldd	r16, Y+1	; 0x01
    1d7e:	32 e0       	ldi	r19, 0x02	; 2
    1d80:	c3 2e       	mov	r12, r19
    1d82:	d1 2c       	mov	r13, r1
    1d84:	cc 0e       	add	r12, r28
    1d86:	dd 1e       	adc	r13, r29
    1d88:	10 e0       	ldi	r17, 0x00	; 0
    1d8a:	e6 01       	movw	r28, r12
    1d8c:	21 97       	sbiw	r28, 0x01	; 1
    1d8e:	ce 01       	movw	r24, r28
    1d90:	60 e7       	ldi	r22, 0x70	; 112
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	43 e0       	ldi	r20, 0x03	; 3
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	0e 94 e6 10 	call	0x21cc	; 0x21cc <strncasecmp_P>
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	d1 f4       	brne	.+52     	; 0x1dd4 <strtod+0xa6>
    1da0:	e6 01       	movw	r28, r12
    1da2:	22 96       	adiw	r28, 0x02	; 2
    1da4:	ce 01       	movw	r24, r28
    1da6:	63 e7       	ldi	r22, 0x73	; 115
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	45 e0       	ldi	r20, 0x05	; 5
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	0e 94 e6 10 	call	0x21cc	; 0x21cc <strncasecmp_P>
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	11 f4       	brne	.+4      	; 0x1dba <strtod+0x8c>
    1db6:	e6 01       	movw	r28, r12
    1db8:	27 96       	adiw	r28, 0x07	; 7
    1dba:	a1 14       	cp	r10, r1
    1dbc:	b1 04       	cpc	r11, r1
    1dbe:	19 f0       	breq	.+6      	; 0x1dc6 <strtod+0x98>
    1dc0:	f5 01       	movw	r30, r10
    1dc2:	d1 83       	std	Z+1, r29	; 0x01
    1dc4:	c0 83       	st	Z, r28
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	90 e8       	ldi	r25, 0x80	; 128
    1dcc:	11 23       	and	r17, r17
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <strtod+0xa4>
    1dd0:	0a c1       	rjmp	.+532    	; 0x1fe6 <strtod+0x2b8>
    1dd2:	04 c1       	rjmp	.+520    	; 0x1fdc <strtod+0x2ae>
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	68 e7       	ldi	r22, 0x78	; 120
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	43 e0       	ldi	r20, 0x03	; 3
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	0e 94 e6 10 	call	0x21cc	; 0x21cc <strncasecmp_P>
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	59 f4       	brne	.+22     	; 0x1dfc <strtod+0xce>
    1de6:	a1 14       	cp	r10, r1
    1de8:	b1 04       	cpc	r11, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <strtod+0xc0>
    1dec:	f9 c0       	rjmp	.+498    	; 0x1fe0 <strtod+0x2b2>
    1dee:	c6 01       	movw	r24, r12
    1df0:	02 96       	adiw	r24, 0x02	; 2
    1df2:	d5 01       	movw	r26, r10
    1df4:	11 96       	adiw	r26, 0x01	; 1
    1df6:	9c 93       	st	X, r25
    1df8:	8e 93       	st	-X, r24
    1dfa:	f2 c0       	rjmp	.+484    	; 0x1fe0 <strtod+0x2b2>
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	ba 01       	movw	r22, r20
    1e02:	88 24       	eor	r8, r8
    1e04:	99 24       	eor	r9, r9
    1e06:	00 53       	subi	r16, 0x30	; 48
    1e08:	0a 30       	cpi	r16, 0x0A	; 10
    1e0a:	90 f5       	brcc	.+100    	; 0x1e70 <strtod+0x142>
    1e0c:	12 60       	ori	r17, 0x02	; 2
    1e0e:	21 2f       	mov	r18, r17
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	c9 01       	movw	r24, r18
    1e14:	88 70       	andi	r24, 0x08	; 8
    1e16:	90 70       	andi	r25, 0x00	; 0
    1e18:	12 ff       	sbrs	r17, 2
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <strtod+0xfa>
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f5       	brne	.+90     	; 0x1e7a <strtod+0x14c>
    1e20:	08 94       	sec
    1e22:	81 1c       	adc	r8, r1
    1e24:	91 1c       	adc	r9, r1
    1e26:	29 c0       	rjmp	.+82     	; 0x1e7a <strtod+0x14c>
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	19 f0       	breq	.+6      	; 0x1e32 <strtod+0x104>
    1e2c:	08 94       	sec
    1e2e:	81 08       	sbc	r8, r1
    1e30:	91 08       	sbc	r9, r1
    1e32:	db 01       	movw	r26, r22
    1e34:	ca 01       	movw	r24, r20
    1e36:	d2 e0       	ldi	r29, 0x02	; 2
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	aa 1f       	adc	r26, r26
    1e3e:	bb 1f       	adc	r27, r27
    1e40:	da 95       	dec	r29
    1e42:	d1 f7       	brne	.-12     	; 0x1e38 <strtod+0x10a>
    1e44:	48 0f       	add	r20, r24
    1e46:	59 1f       	adc	r21, r25
    1e48:	6a 1f       	adc	r22, r26
    1e4a:	7b 1f       	adc	r23, r27
    1e4c:	44 0f       	add	r20, r20
    1e4e:	55 1f       	adc	r21, r21
    1e50:	66 1f       	adc	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	40 0f       	add	r20, r16
    1e56:	51 1d       	adc	r21, r1
    1e58:	61 1d       	adc	r22, r1
    1e5a:	71 1d       	adc	r23, r1
    1e5c:	48 39       	cpi	r20, 0x98	; 152
    1e5e:	b9 e9       	ldi	r27, 0x99	; 153
    1e60:	5b 07       	cpc	r21, r27
    1e62:	b9 e9       	ldi	r27, 0x99	; 153
    1e64:	6b 07       	cpc	r22, r27
    1e66:	b9 e1       	ldi	r27, 0x19	; 25
    1e68:	7b 07       	cpc	r23, r27
    1e6a:	38 f0       	brcs	.+14     	; 0x1e7a <strtod+0x14c>
    1e6c:	14 60       	ori	r17, 0x04	; 4
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <strtod+0x14c>
    1e70:	0e 3f       	cpi	r16, 0xFE	; 254
    1e72:	39 f4       	brne	.+14     	; 0x1e82 <strtod+0x154>
    1e74:	13 fd       	sbrc	r17, 3
    1e76:	43 c0       	rjmp	.+134    	; 0x1efe <strtod+0x1d0>
    1e78:	18 60       	ori	r17, 0x08	; 8
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	01 91       	ld	r16, Z+
    1e7e:	6f 01       	movw	r12, r30
    1e80:	c2 cf       	rjmp	.-124    	; 0x1e06 <strtod+0xd8>
    1e82:	05 33       	cpi	r16, 0x35	; 53
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <strtod+0x15c>
    1e86:	05 31       	cpi	r16, 0x15	; 21
    1e88:	d1 f5       	brne	.+116    	; 0x1efe <strtod+0x1d0>
    1e8a:	d6 01       	movw	r26, r12
    1e8c:	ec 91       	ld	r30, X
    1e8e:	ed 32       	cpi	r30, 0x2D	; 45
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <strtod+0x168>
    1e92:	10 61       	ori	r17, 0x10	; 16
    1e94:	08 c0       	rjmp	.+16     	; 0x1ea6 <strtod+0x178>
    1e96:	eb 32       	cpi	r30, 0x2B	; 43
    1e98:	29 f0       	breq	.+10     	; 0x1ea4 <strtod+0x176>
    1e9a:	c6 01       	movw	r24, r12
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	21 e0       	ldi	r18, 0x01	; 1
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	08 c0       	rjmp	.+16     	; 0x1eb4 <strtod+0x186>
    1ea4:	d6 01       	movw	r26, r12
    1ea6:	11 96       	adiw	r26, 0x01	; 1
    1ea8:	ec 91       	ld	r30, X
    1eaa:	11 97       	sbiw	r26, 0x01	; 1
    1eac:	c6 01       	movw	r24, r12
    1eae:	02 96       	adiw	r24, 0x02	; 2
    1eb0:	22 e0       	ldi	r18, 0x02	; 2
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	e0 53       	subi	r30, 0x30	; 48
    1eb6:	ea 30       	cpi	r30, 0x0A	; 10
    1eb8:	20 f0       	brcs	.+8      	; 0x1ec2 <strtod+0x194>
    1eba:	6c 01       	movw	r12, r24
    1ebc:	c2 1a       	sub	r12, r18
    1ebe:	d3 0a       	sbc	r13, r19
    1ec0:	1e c0       	rjmp	.+60     	; 0x1efe <strtod+0x1d0>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	fc e0       	ldi	r31, 0x0C	; 12
    1eca:	20 38       	cpi	r18, 0x80	; 128
    1ecc:	3f 07       	cpc	r19, r31
    1ece:	5c f4       	brge	.+22     	; 0x1ee6 <strtod+0x1b8>
    1ed0:	c9 01       	movw	r24, r18
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	28 0f       	add	r18, r24
    1edc:	39 1f       	adc	r19, r25
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	2e 0f       	add	r18, r30
    1ee4:	31 1d       	adc	r19, r1
    1ee6:	ed 91       	ld	r30, X+
    1ee8:	e0 53       	subi	r30, 0x30	; 48
    1eea:	6d 01       	movw	r12, r26
    1eec:	ea 30       	cpi	r30, 0x0A	; 10
    1eee:	60 f3       	brcs	.-40     	; 0x1ec8 <strtod+0x19a>
    1ef0:	14 ff       	sbrs	r17, 4
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <strtod+0x1cc>
    1ef4:	30 95       	com	r19
    1ef6:	21 95       	neg	r18
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	82 0e       	add	r8, r18
    1efc:	93 1e       	adc	r9, r19
    1efe:	c1 2f       	mov	r28, r17
    1f00:	d0 e0       	ldi	r29, 0x00	; 0
    1f02:	11 ff       	sbrs	r17, 1
    1f04:	08 c0       	rjmp	.+16     	; 0x1f16 <strtod+0x1e8>
    1f06:	a1 14       	cp	r10, r1
    1f08:	b1 04       	cpc	r11, r1
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <strtod+0x1e8>
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	d5 01       	movw	r26, r10
    1f12:	8d 93       	st	X+, r24
    1f14:	9c 93       	st	X, r25
    1f16:	cb 01       	movw	r24, r22
    1f18:	ba 01       	movw	r22, r20
    1f1a:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
    1f1e:	6b 01       	movw	r12, r22
    1f20:	7c 01       	movw	r14, r24
    1f22:	ce 01       	movw	r24, r28
    1f24:	83 70       	andi	r24, 0x03	; 3
    1f26:	90 70       	andi	r25, 0x00	; 0
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <strtod+0x208>
    1f2e:	f7 fa       	bst	r15, 7
    1f30:	f0 94       	com	r15
    1f32:	f7 f8       	bld	r15, 7
    1f34:	f0 94       	com	r15
    1f36:	c7 01       	movw	r24, r14
    1f38:	b6 01       	movw	r22, r12
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	a9 01       	movw	r20, r18
    1f40:	0e 94 90 09 	call	0x1320	; 0x1320 <__cmpsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <strtod+0x21c>
    1f48:	44 c0       	rjmp	.+136    	; 0x1fd2 <strtod+0x2a4>
    1f4a:	97 fe       	sbrs	r9, 7
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <strtod+0x22e>
    1f4e:	90 94       	com	r9
    1f50:	81 94       	neg	r8
    1f52:	91 08       	sbc	r9, r1
    1f54:	93 94       	inc	r9
    1f56:	c7 ea       	ldi	r28, 0xA7	; 167
    1f58:	d0 e0       	ldi	r29, 0x00	; 0
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <strtod+0x232>
    1f5c:	cf e8       	ldi	r28, 0x8F	; 143
    1f5e:	d0 e0       	ldi	r29, 0x00	; 0
    1f60:	98 ee       	ldi	r25, 0xE8	; 232
    1f62:	69 2e       	mov	r6, r25
    1f64:	9f ef       	ldi	r25, 0xFF	; 255
    1f66:	79 2e       	mov	r7, r25
    1f68:	6c 0e       	add	r6, r28
    1f6a:	7d 1e       	adc	r7, r29
    1f6c:	20 e2       	ldi	r18, 0x20	; 32
    1f6e:	a2 2e       	mov	r10, r18
    1f70:	b1 2c       	mov	r11, r1
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <strtod+0x264>
    1f74:	fe 01       	movw	r30, r28
    1f76:	05 91       	lpm	r16, Z+
    1f78:	15 91       	lpm	r17, Z+
    1f7a:	25 91       	lpm	r18, Z+
    1f7c:	34 91       	lpm	r19, Z
    1f7e:	c7 01       	movw	r24, r14
    1f80:	b6 01       	movw	r22, r12
    1f82:	a9 01       	movw	r20, r18
    1f84:	98 01       	movw	r18, r16
    1f86:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
    1f8a:	6b 01       	movw	r12, r22
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	8a 18       	sub	r8, r10
    1f90:	9b 08       	sbc	r9, r11
    1f92:	8a 14       	cp	r8, r10
    1f94:	9b 04       	cpc	r9, r11
    1f96:	74 f7       	brge	.-36     	; 0x1f74 <strtod+0x246>
    1f98:	24 97       	sbiw	r28, 0x04	; 4
    1f9a:	b5 94       	asr	r11
    1f9c:	a7 94       	ror	r10
    1f9e:	c6 15       	cp	r28, r6
    1fa0:	d7 05       	cpc	r29, r7
    1fa2:	b9 f7       	brne	.-18     	; 0x1f92 <strtod+0x264>
    1fa4:	c6 01       	movw	r24, r12
    1fa6:	d7 01       	movw	r26, r14
    1fa8:	2a 2f       	mov	r18, r26
    1faa:	22 0f       	add	r18, r18
    1fac:	2b 2f       	mov	r18, r27
    1fae:	22 1f       	adc	r18, r18
    1fb0:	2f 3f       	cpi	r18, 0xFF	; 255
    1fb2:	49 f0       	breq	.+18     	; 0x1fc6 <strtod+0x298>
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	0e 94 90 09 	call	0x1320	; 0x1320 <__cmpsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	31 f4       	brne	.+12     	; 0x1fd2 <strtod+0x2a4>
    1fc6:	82 e2       	ldi	r24, 0x22	; 34
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	90 93 cb 07 	sts	0x07CB, r25
    1fce:	80 93 ca 07 	sts	0x07CA, r24
    1fd2:	3c 2d       	mov	r19, r12
    1fd4:	2d 2d       	mov	r18, r13
    1fd6:	9e 2d       	mov	r25, r14
    1fd8:	8f 2d       	mov	r24, r15
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <strtod+0x2ba>
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <strtod+0x2ba>
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	90 ec       	ldi	r25, 0xC0	; 192
    1fe6:	8f e7       	ldi	r24, 0x7F	; 127
    1fe8:	b9 01       	movw	r22, r18
    1fea:	ac 01       	movw	r20, r24
    1fec:	87 2f       	mov	r24, r23
    1fee:	92 2f       	mov	r25, r18
    1ff0:	a5 2f       	mov	r26, r21
    1ff2:	b4 2f       	mov	r27, r20
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	ee e0       	ldi	r30, 0x0E	; 14
    1ffe:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x8>

00002002 <abort>:
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	f8 94       	cli
    2008:	0c 94 20 12 	jmp	0x2440	; 0x2440 <_exit>

0000200c <__ftoa_engine>:
    200c:	28 30       	cpi	r18, 0x08	; 8
    200e:	08 f0       	brcs	.+2      	; 0x2012 <__ftoa_engine+0x6>
    2010:	27 e0       	ldi	r18, 0x07	; 7
    2012:	33 27       	eor	r19, r19
    2014:	da 01       	movw	r26, r20
    2016:	99 0f       	add	r25, r25
    2018:	31 1d       	adc	r19, r1
    201a:	87 fd       	sbrc	r24, 7
    201c:	91 60       	ori	r25, 0x01	; 1
    201e:	00 96       	adiw	r24, 0x00	; 0
    2020:	61 05       	cpc	r22, r1
    2022:	71 05       	cpc	r23, r1
    2024:	39 f4       	brne	.+14     	; 0x2034 <__ftoa_engine+0x28>
    2026:	32 60       	ori	r19, 0x02	; 2
    2028:	2e 5f       	subi	r18, 0xFE	; 254
    202a:	3d 93       	st	X+, r19
    202c:	30 e3       	ldi	r19, 0x30	; 48
    202e:	2a 95       	dec	r18
    2030:	e1 f7       	brne	.-8      	; 0x202a <__ftoa_engine+0x1e>
    2032:	08 95       	ret
    2034:	9f 3f       	cpi	r25, 0xFF	; 255
    2036:	30 f0       	brcs	.+12     	; 0x2044 <__ftoa_engine+0x38>
    2038:	80 38       	cpi	r24, 0x80	; 128
    203a:	71 05       	cpc	r23, r1
    203c:	61 05       	cpc	r22, r1
    203e:	09 f0       	breq	.+2      	; 0x2042 <__ftoa_engine+0x36>
    2040:	3c 5f       	subi	r19, 0xFC	; 252
    2042:	3c 5f       	subi	r19, 0xFC	; 252
    2044:	3d 93       	st	X+, r19
    2046:	91 30       	cpi	r25, 0x01	; 1
    2048:	08 f0       	brcs	.+2      	; 0x204c <__ftoa_engine+0x40>
    204a:	80 68       	ori	r24, 0x80	; 128
    204c:	91 1d       	adc	r25, r1
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	1f 93       	push	r17
    2054:	0f 93       	push	r16
    2056:	ff 92       	push	r15
    2058:	ef 92       	push	r14
    205a:	19 2f       	mov	r17, r25
    205c:	98 7f       	andi	r25, 0xF8	; 248
    205e:	96 95       	lsr	r25
    2060:	e9 2f       	mov	r30, r25
    2062:	96 95       	lsr	r25
    2064:	96 95       	lsr	r25
    2066:	e9 0f       	add	r30, r25
    2068:	ff 27       	eor	r31, r31
    206a:	eb 5f       	subi	r30, 0xFB	; 251
    206c:	fe 4f       	sbci	r31, 0xFE	; 254
    206e:	99 27       	eor	r25, r25
    2070:	33 27       	eor	r19, r19
    2072:	ee 24       	eor	r14, r14
    2074:	ff 24       	eor	r15, r15
    2076:	a7 01       	movw	r20, r14
    2078:	e7 01       	movw	r28, r14
    207a:	05 90       	lpm	r0, Z+
    207c:	08 94       	sec
    207e:	07 94       	ror	r0
    2080:	28 f4       	brcc	.+10     	; 0x208c <__ftoa_engine+0x80>
    2082:	36 0f       	add	r19, r22
    2084:	e7 1e       	adc	r14, r23
    2086:	f8 1e       	adc	r15, r24
    2088:	49 1f       	adc	r20, r25
    208a:	51 1d       	adc	r21, r1
    208c:	66 0f       	add	r22, r22
    208e:	77 1f       	adc	r23, r23
    2090:	88 1f       	adc	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	06 94       	lsr	r0
    2096:	a1 f7       	brne	.-24     	; 0x2080 <__ftoa_engine+0x74>
    2098:	05 90       	lpm	r0, Z+
    209a:	07 94       	ror	r0
    209c:	28 f4       	brcc	.+10     	; 0x20a8 <__ftoa_engine+0x9c>
    209e:	e7 0e       	add	r14, r23
    20a0:	f8 1e       	adc	r15, r24
    20a2:	49 1f       	adc	r20, r25
    20a4:	56 1f       	adc	r21, r22
    20a6:	c1 1d       	adc	r28, r1
    20a8:	77 0f       	add	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	66 1f       	adc	r22, r22
    20b0:	06 94       	lsr	r0
    20b2:	a1 f7       	brne	.-24     	; 0x209c <__ftoa_engine+0x90>
    20b4:	05 90       	lpm	r0, Z+
    20b6:	07 94       	ror	r0
    20b8:	28 f4       	brcc	.+10     	; 0x20c4 <__ftoa_engine+0xb8>
    20ba:	f8 0e       	add	r15, r24
    20bc:	49 1f       	adc	r20, r25
    20be:	56 1f       	adc	r21, r22
    20c0:	c7 1f       	adc	r28, r23
    20c2:	d1 1d       	adc	r29, r1
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	66 1f       	adc	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	06 94       	lsr	r0
    20ce:	a1 f7       	brne	.-24     	; 0x20b8 <__ftoa_engine+0xac>
    20d0:	05 90       	lpm	r0, Z+
    20d2:	07 94       	ror	r0
    20d4:	20 f4       	brcc	.+8      	; 0x20de <__ftoa_engine+0xd2>
    20d6:	49 0f       	add	r20, r25
    20d8:	56 1f       	adc	r21, r22
    20da:	c7 1f       	adc	r28, r23
    20dc:	d8 1f       	adc	r29, r24
    20de:	99 0f       	add	r25, r25
    20e0:	66 1f       	adc	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	06 94       	lsr	r0
    20e8:	a9 f7       	brne	.-22     	; 0x20d4 <__ftoa_engine+0xc8>
    20ea:	84 91       	lpm	r24, Z
    20ec:	10 95       	com	r17
    20ee:	17 70       	andi	r17, 0x07	; 7
    20f0:	41 f0       	breq	.+16     	; 0x2102 <__ftoa_engine+0xf6>
    20f2:	d6 95       	lsr	r29
    20f4:	c7 95       	ror	r28
    20f6:	57 95       	ror	r21
    20f8:	47 95       	ror	r20
    20fa:	f7 94       	ror	r15
    20fc:	e7 94       	ror	r14
    20fe:	1a 95       	dec	r17
    2100:	c1 f7       	brne	.-16     	; 0x20f2 <__ftoa_engine+0xe6>
    2102:	eb ea       	ldi	r30, 0xAB	; 171
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	68 94       	set
    2108:	15 90       	lpm	r1, Z+
    210a:	15 91       	lpm	r17, Z+
    210c:	35 91       	lpm	r19, Z+
    210e:	65 91       	lpm	r22, Z+
    2110:	95 91       	lpm	r25, Z+
    2112:	05 90       	lpm	r0, Z+
    2114:	7f e2       	ldi	r23, 0x2F	; 47
    2116:	73 95       	inc	r23
    2118:	e1 18       	sub	r14, r1
    211a:	f1 0a       	sbc	r15, r17
    211c:	43 0b       	sbc	r20, r19
    211e:	56 0b       	sbc	r21, r22
    2120:	c9 0b       	sbc	r28, r25
    2122:	d0 09       	sbc	r29, r0
    2124:	c0 f7       	brcc	.-16     	; 0x2116 <__ftoa_engine+0x10a>
    2126:	e1 0c       	add	r14, r1
    2128:	f1 1e       	adc	r15, r17
    212a:	43 1f       	adc	r20, r19
    212c:	56 1f       	adc	r21, r22
    212e:	c9 1f       	adc	r28, r25
    2130:	d0 1d       	adc	r29, r0
    2132:	7e f4       	brtc	.+30     	; 0x2152 <__ftoa_engine+0x146>
    2134:	70 33       	cpi	r23, 0x30	; 48
    2136:	11 f4       	brne	.+4      	; 0x213c <__ftoa_engine+0x130>
    2138:	8a 95       	dec	r24
    213a:	e6 cf       	rjmp	.-52     	; 0x2108 <__ftoa_engine+0xfc>
    213c:	e8 94       	clt
    213e:	01 50       	subi	r16, 0x01	; 1
    2140:	30 f0       	brcs	.+12     	; 0x214e <__ftoa_engine+0x142>
    2142:	08 0f       	add	r16, r24
    2144:	0a f4       	brpl	.+2      	; 0x2148 <__ftoa_engine+0x13c>
    2146:	00 27       	eor	r16, r16
    2148:	02 17       	cp	r16, r18
    214a:	08 f4       	brcc	.+2      	; 0x214e <__ftoa_engine+0x142>
    214c:	20 2f       	mov	r18, r16
    214e:	23 95       	inc	r18
    2150:	02 2f       	mov	r16, r18
    2152:	7a 33       	cpi	r23, 0x3A	; 58
    2154:	28 f0       	brcs	.+10     	; 0x2160 <__ftoa_engine+0x154>
    2156:	79 e3       	ldi	r23, 0x39	; 57
    2158:	7d 93       	st	X+, r23
    215a:	2a 95       	dec	r18
    215c:	e9 f7       	brne	.-6      	; 0x2158 <__ftoa_engine+0x14c>
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <__ftoa_engine+0x174>
    2160:	7d 93       	st	X+, r23
    2162:	2a 95       	dec	r18
    2164:	89 f6       	brne	.-94     	; 0x2108 <__ftoa_engine+0xfc>
    2166:	06 94       	lsr	r0
    2168:	97 95       	ror	r25
    216a:	67 95       	ror	r22
    216c:	37 95       	ror	r19
    216e:	17 95       	ror	r17
    2170:	17 94       	ror	r1
    2172:	e1 18       	sub	r14, r1
    2174:	f1 0a       	sbc	r15, r17
    2176:	43 0b       	sbc	r20, r19
    2178:	56 0b       	sbc	r21, r22
    217a:	c9 0b       	sbc	r28, r25
    217c:	d0 09       	sbc	r29, r0
    217e:	98 f0       	brcs	.+38     	; 0x21a6 <__ftoa_engine+0x19a>
    2180:	23 95       	inc	r18
    2182:	7e 91       	ld	r23, -X
    2184:	73 95       	inc	r23
    2186:	7a 33       	cpi	r23, 0x3A	; 58
    2188:	08 f0       	brcs	.+2      	; 0x218c <__ftoa_engine+0x180>
    218a:	70 e3       	ldi	r23, 0x30	; 48
    218c:	7c 93       	st	X, r23
    218e:	20 13       	cpse	r18, r16
    2190:	b8 f7       	brcc	.-18     	; 0x2180 <__ftoa_engine+0x174>
    2192:	7e 91       	ld	r23, -X
    2194:	70 61       	ori	r23, 0x10	; 16
    2196:	7d 93       	st	X+, r23
    2198:	30 f0       	brcs	.+12     	; 0x21a6 <__ftoa_engine+0x19a>
    219a:	83 95       	inc	r24
    219c:	71 e3       	ldi	r23, 0x31	; 49
    219e:	7d 93       	st	X+, r23
    21a0:	70 e3       	ldi	r23, 0x30	; 48
    21a2:	2a 95       	dec	r18
    21a4:	e1 f7       	brne	.-8      	; 0x219e <__ftoa_engine+0x192>
    21a6:	11 24       	eor	r1, r1
    21a8:	ef 90       	pop	r14
    21aa:	ff 90       	pop	r15
    21ac:	0f 91       	pop	r16
    21ae:	1f 91       	pop	r17
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	99 27       	eor	r25, r25
    21b6:	87 fd       	sbrc	r24, 7
    21b8:	90 95       	com	r25
    21ba:	08 95       	ret

000021bc <isspace>:
    21bc:	91 11       	cpse	r25, r1
    21be:	3d c1       	rjmp	.+634    	; 0x243a <__ctype_isfalse>
    21c0:	80 32       	cpi	r24, 0x20	; 32
    21c2:	19 f0       	breq	.+6      	; 0x21ca <isspace+0xe>
    21c4:	89 50       	subi	r24, 0x09	; 9
    21c6:	85 50       	subi	r24, 0x05	; 5
    21c8:	d0 f7       	brcc	.-12     	; 0x21be <isspace+0x2>
    21ca:	08 95       	ret

000021cc <strncasecmp_P>:
    21cc:	fb 01       	movw	r30, r22
    21ce:	dc 01       	movw	r26, r24
    21d0:	41 50       	subi	r20, 0x01	; 1
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	88 f0       	brcs	.+34     	; 0x21f8 <strncasecmp_P+0x2c>
    21d6:	8d 91       	ld	r24, X+
    21d8:	81 34       	cpi	r24, 0x41	; 65
    21da:	1c f0       	brlt	.+6      	; 0x21e2 <strncasecmp_P+0x16>
    21dc:	8b 35       	cpi	r24, 0x5B	; 91
    21de:	0c f4       	brge	.+2      	; 0x21e2 <strncasecmp_P+0x16>
    21e0:	80 5e       	subi	r24, 0xE0	; 224
    21e2:	65 91       	lpm	r22, Z+
    21e4:	61 34       	cpi	r22, 0x41	; 65
    21e6:	1c f0       	brlt	.+6      	; 0x21ee <strncasecmp_P+0x22>
    21e8:	6b 35       	cpi	r22, 0x5B	; 91
    21ea:	0c f4       	brge	.+2      	; 0x21ee <strncasecmp_P+0x22>
    21ec:	60 5e       	subi	r22, 0xE0	; 224
    21ee:	86 1b       	sub	r24, r22
    21f0:	61 11       	cpse	r22, r1
    21f2:	71 f3       	breq	.-36     	; 0x21d0 <strncasecmp_P+0x4>
    21f4:	99 0b       	sbc	r25, r25
    21f6:	08 95       	ret
    21f8:	88 1b       	sub	r24, r24
    21fa:	fc cf       	rjmp	.-8      	; 0x21f4 <strncasecmp_P+0x28>

000021fc <strnlen_P>:
    21fc:	fc 01       	movw	r30, r24
    21fe:	05 90       	lpm	r0, Z+
    2200:	61 50       	subi	r22, 0x01	; 1
    2202:	70 40       	sbci	r23, 0x00	; 0
    2204:	01 10       	cpse	r0, r1
    2206:	d8 f7       	brcc	.-10     	; 0x21fe <strnlen_P+0x2>
    2208:	80 95       	com	r24
    220a:	90 95       	com	r25
    220c:	8e 0f       	add	r24, r30
    220e:	9f 1f       	adc	r25, r31
    2210:	08 95       	ret

00002212 <strchr>:
    2212:	fc 01       	movw	r30, r24
    2214:	81 91       	ld	r24, Z+
    2216:	86 17       	cp	r24, r22
    2218:	21 f0       	breq	.+8      	; 0x2222 <strchr+0x10>
    221a:	88 23       	and	r24, r24
    221c:	d9 f7       	brne	.-10     	; 0x2214 <strchr+0x2>
    221e:	99 27       	eor	r25, r25
    2220:	08 95       	ret
    2222:	31 97       	sbiw	r30, 0x01	; 1
    2224:	cf 01       	movw	r24, r30
    2226:	08 95       	ret

00002228 <strcmp>:
    2228:	fb 01       	movw	r30, r22
    222a:	dc 01       	movw	r26, r24
    222c:	8d 91       	ld	r24, X+
    222e:	01 90       	ld	r0, Z+
    2230:	80 19       	sub	r24, r0
    2232:	01 10       	cpse	r0, r1
    2234:	d9 f3       	breq	.-10     	; 0x222c <strcmp+0x4>
    2236:	99 0b       	sbc	r25, r25
    2238:	08 95       	ret

0000223a <strncmp>:
    223a:	fb 01       	movw	r30, r22
    223c:	dc 01       	movw	r26, r24
    223e:	41 50       	subi	r20, 0x01	; 1
    2240:	50 40       	sbci	r21, 0x00	; 0
    2242:	30 f0       	brcs	.+12     	; 0x2250 <strncmp+0x16>
    2244:	8d 91       	ld	r24, X+
    2246:	01 90       	ld	r0, Z+
    2248:	80 19       	sub	r24, r0
    224a:	19 f4       	brne	.+6      	; 0x2252 <strncmp+0x18>
    224c:	00 20       	and	r0, r0
    224e:	b9 f7       	brne	.-18     	; 0x223e <strncmp+0x4>
    2250:	88 1b       	sub	r24, r24
    2252:	99 0b       	sbc	r25, r25
    2254:	08 95       	ret

00002256 <strnlen>:
    2256:	fc 01       	movw	r30, r24
    2258:	61 50       	subi	r22, 0x01	; 1
    225a:	70 40       	sbci	r23, 0x00	; 0
    225c:	01 90       	ld	r0, Z+
    225e:	01 10       	cpse	r0, r1
    2260:	d8 f7       	brcc	.-10     	; 0x2258 <strnlen+0x2>
    2262:	80 95       	com	r24
    2264:	90 95       	com	r25
    2266:	8e 0f       	add	r24, r30
    2268:	9f 1f       	adc	r25, r31
    226a:	08 95       	ret

0000226c <fputc>:
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	8c 01       	movw	r16, r24
    2276:	eb 01       	movw	r28, r22
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	81 ff       	sbrs	r24, 1
    227c:	1b c0       	rjmp	.+54     	; 0x22b4 <fputc+0x48>
    227e:	82 ff       	sbrs	r24, 2
    2280:	0d c0       	rjmp	.+26     	; 0x229c <fputc+0x30>
    2282:	2e 81       	ldd	r18, Y+6	; 0x06
    2284:	3f 81       	ldd	r19, Y+7	; 0x07
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	28 17       	cp	r18, r24
    228c:	39 07       	cpc	r19, r25
    228e:	64 f4       	brge	.+24     	; 0x22a8 <fputc+0x3c>
    2290:	e8 81       	ld	r30, Y
    2292:	f9 81       	ldd	r31, Y+1	; 0x01
    2294:	01 93       	st	Z+, r16
    2296:	f9 83       	std	Y+1, r31	; 0x01
    2298:	e8 83       	st	Y, r30
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <fputc+0x3c>
    229c:	e8 85       	ldd	r30, Y+8	; 0x08
    229e:	f9 85       	ldd	r31, Y+9	; 0x09
    22a0:	80 2f       	mov	r24, r16
    22a2:	09 95       	icall
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	31 f4       	brne	.+12     	; 0x22b4 <fputc+0x48>
    22a8:	8e 81       	ldd	r24, Y+6	; 0x06
    22aa:	9f 81       	ldd	r25, Y+7	; 0x07
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	9f 83       	std	Y+7, r25	; 0x07
    22b0:	8e 83       	std	Y+6, r24	; 0x06
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <fputc+0x4c>
    22b4:	0f ef       	ldi	r16, 0xFF	; 255
    22b6:	1f ef       	ldi	r17, 0xFF	; 255
    22b8:	c8 01       	movw	r24, r16
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

000022c4 <printf>:
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e8 e6       	ldi	r30, 0x68	; 104
    22ca:	f1 e1       	ldi	r31, 0x11	; 17
    22cc:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__prologue_saves__+0x20>
    22d0:	fe 01       	movw	r30, r28
    22d2:	35 96       	adiw	r30, 0x05	; 5
    22d4:	61 91       	ld	r22, Z+
    22d6:	71 91       	ld	r23, Z+
    22d8:	80 91 c6 07 	lds	r24, 0x07C6
    22dc:	90 91 c7 07 	lds	r25, 0x07C7
    22e0:	af 01       	movw	r20, r30
    22e2:	0e 94 ad 0a 	call	0x155a	; 0x155a <vfprintf>
    22e6:	20 96       	adiw	r28, 0x00	; 0
    22e8:	e2 e0       	ldi	r30, 0x02	; 2
    22ea:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__epilogue_restores__+0x20>

000022ee <puts>:
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	8c 01       	movw	r16, r24
    22f8:	e0 91 c6 07 	lds	r30, 0x07C6
    22fc:	f0 91 c7 07 	lds	r31, 0x07C7
    2300:	83 81       	ldd	r24, Z+3	; 0x03
    2302:	81 ff       	sbrs	r24, 1
    2304:	1a c0       	rjmp	.+52     	; 0x233a <puts+0x4c>
    2306:	c0 e0       	ldi	r28, 0x00	; 0
    2308:	d0 e0       	ldi	r29, 0x00	; 0
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <puts+0x28>
    230c:	09 95       	icall
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	11 f0       	breq	.+4      	; 0x2316 <puts+0x28>
    2312:	cf ef       	ldi	r28, 0xFF	; 255
    2314:	df ef       	ldi	r29, 0xFF	; 255
    2316:	f8 01       	movw	r30, r16
    2318:	81 91       	ld	r24, Z+
    231a:	8f 01       	movw	r16, r30
    231c:	60 91 c6 07 	lds	r22, 0x07C6
    2320:	70 91 c7 07 	lds	r23, 0x07C7
    2324:	db 01       	movw	r26, r22
    2326:	18 96       	adiw	r26, 0x08	; 8
    2328:	ed 91       	ld	r30, X+
    232a:	fc 91       	ld	r31, X
    232c:	19 97       	sbiw	r26, 0x09	; 9
    232e:	88 23       	and	r24, r24
    2330:	69 f7       	brne	.-38     	; 0x230c <puts+0x1e>
    2332:	8a e0       	ldi	r24, 0x0A	; 10
    2334:	09 95       	icall
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	11 f0       	breq	.+4      	; 0x233e <puts+0x50>
    233a:	cf ef       	ldi	r28, 0xFF	; 255
    233c:	df ef       	ldi	r29, 0xFF	; 255
    233e:	ce 01       	movw	r24, r28
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	08 95       	ret

0000234a <__ultoa_invert>:
    234a:	fa 01       	movw	r30, r20
    234c:	aa 27       	eor	r26, r26
    234e:	28 30       	cpi	r18, 0x08	; 8
    2350:	51 f1       	breq	.+84     	; 0x23a6 <__ultoa_invert+0x5c>
    2352:	20 31       	cpi	r18, 0x10	; 16
    2354:	81 f1       	breq	.+96     	; 0x23b6 <__ultoa_invert+0x6c>
    2356:	e8 94       	clt
    2358:	6f 93       	push	r22
    235a:	6e 7f       	andi	r22, 0xFE	; 254
    235c:	6e 5f       	subi	r22, 0xFE	; 254
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	8f 4f       	sbci	r24, 0xFF	; 255
    2362:	9f 4f       	sbci	r25, 0xFF	; 255
    2364:	af 4f       	sbci	r26, 0xFF	; 255
    2366:	b1 e0       	ldi	r27, 0x01	; 1
    2368:	3e d0       	rcall	.+124    	; 0x23e6 <__ultoa_invert+0x9c>
    236a:	b4 e0       	ldi	r27, 0x04	; 4
    236c:	3c d0       	rcall	.+120    	; 0x23e6 <__ultoa_invert+0x9c>
    236e:	67 0f       	add	r22, r23
    2370:	78 1f       	adc	r23, r24
    2372:	89 1f       	adc	r24, r25
    2374:	9a 1f       	adc	r25, r26
    2376:	a1 1d       	adc	r26, r1
    2378:	68 0f       	add	r22, r24
    237a:	79 1f       	adc	r23, r25
    237c:	8a 1f       	adc	r24, r26
    237e:	91 1d       	adc	r25, r1
    2380:	a1 1d       	adc	r26, r1
    2382:	6a 0f       	add	r22, r26
    2384:	71 1d       	adc	r23, r1
    2386:	81 1d       	adc	r24, r1
    2388:	91 1d       	adc	r25, r1
    238a:	a1 1d       	adc	r26, r1
    238c:	20 d0       	rcall	.+64     	; 0x23ce <__ultoa_invert+0x84>
    238e:	09 f4       	brne	.+2      	; 0x2392 <__ultoa_invert+0x48>
    2390:	68 94       	set
    2392:	3f 91       	pop	r19
    2394:	2a e0       	ldi	r18, 0x0A	; 10
    2396:	26 9f       	mul	r18, r22
    2398:	11 24       	eor	r1, r1
    239a:	30 19       	sub	r19, r0
    239c:	30 5d       	subi	r19, 0xD0	; 208
    239e:	31 93       	st	Z+, r19
    23a0:	de f6       	brtc	.-74     	; 0x2358 <__ultoa_invert+0xe>
    23a2:	cf 01       	movw	r24, r30
    23a4:	08 95       	ret
    23a6:	46 2f       	mov	r20, r22
    23a8:	47 70       	andi	r20, 0x07	; 7
    23aa:	40 5d       	subi	r20, 0xD0	; 208
    23ac:	41 93       	st	Z+, r20
    23ae:	b3 e0       	ldi	r27, 0x03	; 3
    23b0:	0f d0       	rcall	.+30     	; 0x23d0 <__ultoa_invert+0x86>
    23b2:	c9 f7       	brne	.-14     	; 0x23a6 <__ultoa_invert+0x5c>
    23b4:	f6 cf       	rjmp	.-20     	; 0x23a2 <__ultoa_invert+0x58>
    23b6:	46 2f       	mov	r20, r22
    23b8:	4f 70       	andi	r20, 0x0F	; 15
    23ba:	40 5d       	subi	r20, 0xD0	; 208
    23bc:	4a 33       	cpi	r20, 0x3A	; 58
    23be:	18 f0       	brcs	.+6      	; 0x23c6 <__ultoa_invert+0x7c>
    23c0:	49 5d       	subi	r20, 0xD9	; 217
    23c2:	31 fd       	sbrc	r19, 1
    23c4:	40 52       	subi	r20, 0x20	; 32
    23c6:	41 93       	st	Z+, r20
    23c8:	02 d0       	rcall	.+4      	; 0x23ce <__ultoa_invert+0x84>
    23ca:	a9 f7       	brne	.-22     	; 0x23b6 <__ultoa_invert+0x6c>
    23cc:	ea cf       	rjmp	.-44     	; 0x23a2 <__ultoa_invert+0x58>
    23ce:	b4 e0       	ldi	r27, 0x04	; 4
    23d0:	a6 95       	lsr	r26
    23d2:	97 95       	ror	r25
    23d4:	87 95       	ror	r24
    23d6:	77 95       	ror	r23
    23d8:	67 95       	ror	r22
    23da:	ba 95       	dec	r27
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <__ultoa_invert+0x86>
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	61 05       	cpc	r22, r1
    23e2:	71 05       	cpc	r23, r1
    23e4:	08 95       	ret
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	0a 2e       	mov	r0, r26
    23ec:	06 94       	lsr	r0
    23ee:	57 95       	ror	r21
    23f0:	47 95       	ror	r20
    23f2:	37 95       	ror	r19
    23f4:	27 95       	ror	r18
    23f6:	ba 95       	dec	r27
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__ultoa_invert+0xa2>
    23fa:	62 0f       	add	r22, r18
    23fc:	73 1f       	adc	r23, r19
    23fe:	84 1f       	adc	r24, r20
    2400:	95 1f       	adc	r25, r21
    2402:	a0 1d       	adc	r26, r0
    2404:	08 95       	ret

00002406 <__eerd_byte_m328p>:
    2406:	f9 99       	sbic	0x1f, 1	; 31
    2408:	fe cf       	rjmp	.-4      	; 0x2406 <__eerd_byte_m328p>
    240a:	92 bd       	out	0x22, r25	; 34
    240c:	81 bd       	out	0x21, r24	; 33
    240e:	f8 9a       	sbi	0x1f, 0	; 31
    2410:	99 27       	eor	r25, r25
    2412:	80 b5       	in	r24, 0x20	; 32
    2414:	08 95       	ret

00002416 <__eeupd_byte_m328p>:
    2416:	26 2f       	mov	r18, r22

00002418 <__eeupd_r18_m328p>:
    2418:	f9 99       	sbic	0x1f, 1	; 31
    241a:	fe cf       	rjmp	.-4      	; 0x2418 <__eeupd_r18_m328p>
    241c:	92 bd       	out	0x22, r25	; 34
    241e:	81 bd       	out	0x21, r24	; 33
    2420:	f8 9a       	sbi	0x1f, 0	; 31
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	00 b4       	in	r0, 0x20	; 32
    2426:	02 16       	cp	r0, r18
    2428:	39 f0       	breq	.+14     	; 0x2438 <__eeupd_r18_m328p+0x20>
    242a:	1f ba       	out	0x1f, r1	; 31
    242c:	20 bd       	out	0x20, r18	; 32
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	fa 9a       	sbi	0x1f, 2	; 31
    2434:	f9 9a       	sbi	0x1f, 1	; 31
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	08 95       	ret

0000243a <__ctype_isfalse>:
    243a:	99 27       	eor	r25, r25
    243c:	88 27       	eor	r24, r24

0000243e <__ctype_istrue>:
    243e:	08 95       	ret

00002440 <_exit>:
    2440:	f8 94       	cli

00002442 <__stop_program>:
    2442:	ff cf       	rjmp	.-2      	; 0x2442 <__stop_program>
