
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000590  00800100  00002634  000026c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  00800690  00800690  00002c58  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000069b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002775  00000000  00000000  00006bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd9  00000000  00000000  00009345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001623  00000000  00000000  0000a11e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  0000b744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000864  00000000  00000000  0000bed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3a  00000000  00000000  0000c73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000e576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e4 e3       	ldi	r30, 0x34	; 52
     1ba:	f6 e2       	ldi	r31, 0x26	; 38
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a0 39       	cpi	r26, 0x90	; 144
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	a0 e9       	ldi	r26, 0x90	; 144
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a8 3c       	cpi	r26, 0xC8	; 200
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c4 01 	call	0x388	; 0x388 <main>
     1dc:	0c 94 18 13 	jmp	0x2630	; 0x2630 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 90 06 	lds	r24, 0x0690
     262:	90 91 91 06 	lds	r25, 0x0691
}	
     266:	08 95       	ret

00000268 <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     268:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9c e9       	ldi	r25, 0x9C	; 156
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <getDistance+0x6>
     272:	00 c0       	rjmp	.+0      	; 0x274 <getDistance+0xc>
     274:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     276:	28 98       	cbi	0x05, 0	; 5
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	91 ee       	ldi	r25, 0xE1	; 225
     27c:	a4 e0       	ldi	r26, 0x04	; 4
     27e:	81 50       	subi	r24, 0x01	; 1
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	a0 40       	sbci	r26, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <getDistance+0x16>
     286:	00 c0       	rjmp	.+0      	; 0x288 <getDistance+0x20>
     288:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     28a:	60 91 9c 06 	lds	r22, 0x069C
     28e:	70 91 9d 06 	lds	r23, 0x069D
     292:	80 91 9e 06 	lds	r24, 0x069E
     296:	90 91 9f 06 	lds	r25, 0x069F
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e3       	ldi	r21, 0x3F	; 63
     2a2:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
     2a6:	29 e9       	ldi	r18, 0x99	; 153
     2a8:	3b eb       	ldi	r19, 0xBB	; 187
     2aa:	46 e1       	ldi	r20, 0x16	; 22
     2ac:	5b e3       	ldi	r21, 0x3B	; 59
     2ae:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
     2b2:	26 2f       	mov	r18, r22
     2b4:	37 2f       	mov	r19, r23
     2b6:	f8 2f       	mov	r31, r24
     2b8:	e9 2f       	mov	r30, r25
     2ba:	46 2f       	mov	r20, r22
     2bc:	57 2f       	mov	r21, r23
     2be:	68 2f       	mov	r22, r24
     2c0:	79 2f       	mov	r23, r25
     2c2:	40 93 96 06 	sts	0x0696, r20
     2c6:	50 93 97 06 	sts	0x0697, r21
     2ca:	60 93 98 06 	sts	0x0698, r22
     2ce:	70 93 99 06 	sts	0x0699, r23
	return afstand;
}
     2d2:	82 2f       	mov	r24, r18
     2d4:	93 2f       	mov	r25, r19
     2d6:	af 2f       	mov	r26, r31
     2d8:	be 2f       	mov	r27, r30
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	08 95       	ret

000002e0 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2e0:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e4:	68 2f       	mov	r22, r24
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 ea       	ldi	r20, 0xA0	; 160
     2f6:	5b e3       	ldi	r21, 0x3B	; 59
     2f8:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
     2fc:	26 2f       	mov	r18, r22
     2fe:	37 2f       	mov	r19, r23
     300:	f8 2f       	mov	r31, r24
     302:	e9 2f       	mov	r30, r25
     304:	46 2f       	mov	r20, r22
     306:	57 2f       	mov	r21, r23
     308:	68 2f       	mov	r22, r24
     30a:	79 2f       	mov	r23, r25
     30c:	40 93 a4 06 	sts	0x06A4, r20
     310:	50 93 a5 06 	sts	0x06A5, r21
     314:	60 93 a6 06 	sts	0x06A6, r22
     318:	70 93 a7 06 	sts	0x06A7, r23
	ADCRes = (Volt - 0.5) * 100;
     31c:	82 2f       	mov	r24, r18
     31e:	93 2f       	mov	r25, r19
     320:	af 2f       	mov	r26, r31
     322:	be 2f       	mov	r27, r30
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 23 0a 	call	0x1446	; 0x1446 <__subsf3>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	48 ec       	ldi	r20, 0xC8	; 200
     33a:	52 e4       	ldi	r21, 0x42	; 66
     33c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
     340:	26 2f       	mov	r18, r22
     342:	37 2f       	mov	r19, r23
     344:	f8 2f       	mov	r31, r24
     346:	e9 2f       	mov	r30, r25
     348:	46 2f       	mov	r20, r22
     34a:	57 2f       	mov	r21, r23
     34c:	68 2f       	mov	r22, r24
     34e:	79 2f       	mov	r23, r25
     350:	40 93 c8 06 	sts	0x06C8, r20
     354:	50 93 c9 06 	sts	0x06C9, r21
     358:	60 93 ca 06 	sts	0x06CA, r22
     35c:	70 93 cb 06 	sts	0x06CB, r23
	return ADCRes;
}
     360:	82 2f       	mov	r24, r18
     362:	93 2f       	mov	r25, r19
     364:	af 2f       	mov	r26, r31
     366:	be 2f       	mov	r27, r30
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	08 95       	ret

0000036e <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36e:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     372:	08 95       	ret

00000374 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     378:	9c e9       	ldi	r25, 0x9C	; 156
     37a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     37c:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     380:	85 b5       	in	r24, 0x25	; 37
     382:	85 60       	ori	r24, 0x05	; 5
     384:	85 bd       	out	0x25, r24	; 37
}
     386:	08 95       	ret

00000388 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     388:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <init_scherm_ports>
	init_timer();
     38c:	0e 94 ba 01 	call	0x374	; 0x374 <init_timer>
	ser_init();
     390:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <ser_init>
	ADC_init();
     394:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     398:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     39c:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     3a0:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     3a2:	0e 94 dd 05 	call	0xbba	; 0xbba <protocolCom>
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <main+0x1a>

000003a8 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	8f 92       	push	r8
     3b4:	9f 92       	push	r9
     3b6:	af 92       	push	r10
     3b8:	bf 92       	push	r11
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
	extraTime1++;
     3de:	80 91 92 06 	lds	r24, 0x0692
     3e2:	90 91 93 06 	lds	r25, 0x0693
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	90 93 93 06 	sts	0x0693, r25
     3ec:	80 93 92 06 	sts	0x0692, r24
	if(extraTime1>100){
     3f0:	80 91 92 06 	lds	r24, 0x0692
     3f4:	90 91 93 06 	lds	r25, 0x0693
     3f8:	85 36       	cpi	r24, 0x65	; 101
     3fa:	91 05       	cpc	r25, r1
     3fc:	6c f0       	brlt	.+26     	; 0x418 <__vector_14+0x70>
		timerVariable++;
     3fe:	80 91 90 06 	lds	r24, 0x0690
     402:	90 91 91 06 	lds	r25, 0x0691
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	90 93 91 06 	sts	0x0691, r25
     40c:	80 93 90 06 	sts	0x0690, r24
		extraTime1 = 0;
     410:	10 92 93 06 	sts	0x0693, r1
     414:	10 92 92 06 	sts	0x0692, r1
	}
	extraTime++;
     418:	80 91 94 06 	lds	r24, 0x0694
     41c:	90 91 95 06 	lds	r25, 0x0695
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 95 06 	sts	0x0695, r25
     426:	80 93 94 06 	sts	0x0694, r24
	if(extraTime>6000){
     42a:	80 91 94 06 	lds	r24, 0x0694
     42e:	90 91 95 06 	lds	r25, 0x0695
     432:	27 e1       	ldi	r18, 0x17	; 23
     434:	81 37       	cpi	r24, 0x71	; 113
     436:	92 07       	cpc	r25, r18
     438:	0c f4       	brge	.+2      	; 0x43c <__vector_14+0x94>
     43a:	9b c0       	rjmp	.+310    	; 0x572 <__vector_14+0x1ca>
		
		char* l = get_grensLight();
     43c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <get_grensLight>
		double grenslight;
		grenslight = strtod(l, NULL);
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strtod>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24
		
		char* t = get_grensTemp();
     44c:	0e 94 13 05 	call	0xa26	; 0xa26 <get_grensTemp>
		double grenstemp;
		grenstemp = strtod(t, NULL);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strtod>
     458:	4b 01       	movw	r8, r22
     45a:	5c 01       	movw	r10, r24
		printf("% 6.2f, % 6.2f", grenstemp, getTemp());
     45c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2a 97       	sbiw	r28, 0x0a	; 10
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	ed b7       	in	r30, 0x3d	; 61
     476:	fe b7       	in	r31, 0x3e	; 62
     478:	31 96       	adiw	r30, 0x01	; 1
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	31 e0       	ldi	r19, 0x01	; 1
     47e:	3a 83       	std	Y+2, r19	; 0x02
     480:	29 83       	std	Y+1, r18	; 0x01
     482:	82 82       	std	Z+2, r8	; 0x02
     484:	93 82       	std	Z+3, r9	; 0x03
     486:	a4 82       	std	Z+4, r10	; 0x04
     488:	b5 82       	std	Z+5, r11	; 0x05
     48a:	86 83       	std	Z+6, r24	; 0x06
     48c:	97 83       	std	Z+7, r25	; 0x07
     48e:	a0 87       	std	Z+8, r26	; 0x08
     490:	b1 87       	std	Z+9, r27	; 0x09
     492:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>
		printf("% 6.2f, %i", grenslight, getLight());
     496:	2d b7       	in	r18, 0x3d	; 61
     498:	3e b7       	in	r19, 0x3e	; 62
     49a:	26 5f       	subi	r18, 0xF6	; 246
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	3e bf       	out	0x3e, r19	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	2d bf       	out	0x3d, r18	; 61
     4a8:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     4ac:	ad b7       	in	r26, 0x3d	; 61
     4ae:	be b7       	in	r27, 0x3e	; 62
     4b0:	18 97       	sbiw	r26, 0x08	; 8
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	be bf       	out	0x3e, r27	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	ad bf       	out	0x3d, r26	; 61
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	2f e0       	ldi	r18, 0x0F	; 15
     4c4:	31 e0       	ldi	r19, 0x01	; 1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	3a 83       	std	Y+2, r19	; 0x02
     4cc:	29 83       	std	Y+1, r18	; 0x01
     4ce:	c2 82       	std	Z+2, r12	; 0x02
     4d0:	d3 82       	std	Z+3, r13	; 0x03
     4d2:	e4 82       	std	Z+4, r14	; 0x04
     4d4:	f5 82       	std	Z+5, r15	; 0x05
     4d6:	86 83       	std	Z+6, r24	; 0x06
     4d8:	17 82       	std	Z+7, r1	; 0x07
     4da:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>

		
		if(getLight()> grenslight && getTemp() > grenstemp && (getIn() % 2) == 0)
     4de:	2d b7       	in	r18, 0x3d	; 61
     4e0:	3e b7       	in	r19, 0x3e	; 62
     4e2:	28 5f       	subi	r18, 0xF8	; 248
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	3e bf       	out	0x3e, r19	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	2d bf       	out	0x3d, r18	; 61
     4f0:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     4f4:	68 2f       	mov	r22, r24
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
     500:	a7 01       	movw	r20, r14
     502:	96 01       	movw	r18, r12
     504:	0e 94 3e 0b 	call	0x167c	; 0x167c <__gesf2>
     508:	18 16       	cp	r1, r24
     50a:	74 f4       	brge	.+28     	; 0x528 <__vector_14+0x180>
     50c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     510:	a5 01       	movw	r20, r10
     512:	94 01       	movw	r18, r8
     514:	0e 94 3e 0b 	call	0x167c	; 0x167c <__gesf2>
     518:	18 16       	cp	r1, r24
     51a:	34 f4       	brge	.+12     	; 0x528 <__vector_14+0x180>
     51c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
     520:	80 fd       	sbrc	r24, 0
     522:	02 c0       	rjmp	.+4      	; 0x528 <__vector_14+0x180>
		{
			uitrollen();
     524:	0e 94 ed 08 	call	0x11da	; 0x11da <uitrollen>
		}
		if(getLight()< grenslight && getTemp() < grenstemp && (getIn() % 2) == 1)
     528:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     52c:	68 2f       	mov	r22, r24
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__cmpsf2>
     540:	88 23       	and	r24, r24
     542:	9c f4       	brge	.+38     	; 0x56a <__vector_14+0x1c2>
     544:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     548:	a5 01       	movw	r20, r10
     54a:	94 01       	movw	r18, r8
     54c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__cmpsf2>
     550:	88 23       	and	r24, r24
     552:	5c f4       	brge	.+22     	; 0x56a <__vector_14+0x1c2>
     554:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
     558:	62 e0       	ldi	r22, 0x02	; 2
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__divmodhi4>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	11 f4       	brne	.+4      	; 0x56a <__vector_14+0x1c2>
		{
			oprollen();
     566:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <oprollen>
		}	
		
		// Resets de timer en de Totale timer ticks*/
		extraTime = 0;
     56a:	10 92 95 06 	sts	0x0695, r1
     56e:	10 92 94 06 	sts	0x0694, r1
	}
}
     572:	ff 91       	pop	r31
     574:	ef 91       	pop	r30
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <__vector_2>:

ISR(INT1_vect)
{
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
	if(i == 1)
     5ce:	80 91 9a 06 	lds	r24, 0x069A
     5d2:	90 91 9b 06 	lds	r25, 0x069B
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	91 05       	cpc	r25, r1
     5da:	d1 f4       	brne	.+52     	; 0x610 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     5dc:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     5e0:	c4 e8       	ldi	r28, 0x84	; 132
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	68 81       	ld	r22, Y
     5e6:	79 81       	ldd	r23, Y+1	; 0x01
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatunsisf>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	80 93 9c 06 	sts	0x069C, r24
     5f8:	90 93 9d 06 	sts	0x069D, r25
     5fc:	a0 93 9e 06 	sts	0x069E, r26
     600:	b0 93 9f 06 	sts	0x069F, r27
		TCNT1 = 0; //Reset duration
     604:	19 82       	std	Y+1, r1	; 0x01
     606:	18 82       	st	Y, r1
		i = 0; //Reset counter
     608:	10 92 9b 06 	sts	0x069B, r1
     60c:	10 92 9a 06 	sts	0x069A, r1
	}

	if(i==0)
     610:	80 91 9a 06 	lds	r24, 0x069A
     614:	90 91 9b 06 	lds	r25, 0x069B
     618:	00 97       	sbiw	r24, 0x00	; 0
     61a:	59 f4       	brne	.+22     	; 0x632 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     61c:	e1 e8       	ldi	r30, 0x81	; 129
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	81 60       	ori	r24, 0x01	; 1
     624:	80 83       	st	Z, r24
		i = 1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	90 93 9b 06 	sts	0x069B, r25
     62e:	80 93 9a 06 	sts	0x069A, r24
	}
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	7f 91       	pop	r23
     644:	6f 91       	pop	r22
     646:	5f 91       	pop	r21
     648:	4f 91       	pop	r20
     64a:	3f 91       	pop	r19
     64c:	2f 91       	pop	r18
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <set_maxUnroll>:
		}
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     662:	c0 91 fa 05 	lds	r28, 0x05FA
     666:	d0 91 fb 05 	lds	r29, 0x05FB
     66a:	80 91 06 06 	lds	r24, 0x0606
     66e:	90 91 07 06 	lds	r25, 0x0607
     672:	99 23       	and	r25, r25
     674:	cc f0       	brlt	.+50     	; 0x6a8 <set_maxUnroll+0x50>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     67a:	f8 01       	movw	r30, r16
     67c:	e8 0f       	add	r30, r24
     67e:	f9 1f       	adc	r31, r25
     680:	ce 01       	movw	r24, r28
     682:	60 81       	ld	r22, Z
     684:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	80 91 fa 05 	lds	r24, 0x05FA
     68e:	90 91 fb 05 	lds	r25, 0x05FB
     692:	9e 01       	movw	r18, r28
     694:	28 1b       	sub	r18, r24
     696:	39 0b       	sbc	r19, r25
     698:	c9 01       	movw	r24, r18
     69a:	20 91 06 06 	lds	r18, 0x0606
     69e:	30 91 07 06 	lds	r19, 0x0607
     6a2:	28 17       	cp	r18, r24
     6a4:	39 07       	cpc	r19, r25
     6a6:	4c f7       	brge	.-46     	; 0x67a <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <set_minUnroll>:
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     6bc:	c0 91 fc 05 	lds	r28, 0x05FC
     6c0:	d0 91 fd 05 	lds	r29, 0x05FD
     6c4:	80 91 08 06 	lds	r24, 0x0608
     6c8:	90 91 09 06 	lds	r25, 0x0609
     6cc:	99 23       	and	r25, r25
     6ce:	cc f0       	brlt	.+50     	; 0x702 <set_minUnroll+0x50>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     6d4:	f8 01       	movw	r30, r16
     6d6:	e8 0f       	add	r30, r24
     6d8:	f9 1f       	adc	r31, r25
     6da:	ce 01       	movw	r24, r28
     6dc:	60 81       	ld	r22, Z
     6de:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     6e2:	21 96       	adiw	r28, 0x01	; 1
     6e4:	80 91 fc 05 	lds	r24, 0x05FC
     6e8:	90 91 fd 05 	lds	r25, 0x05FD
     6ec:	9e 01       	movw	r18, r28
     6ee:	28 1b       	sub	r18, r24
     6f0:	39 0b       	sbc	r19, r25
     6f2:	c9 01       	movw	r24, r18
     6f4:	20 91 08 06 	lds	r18, 0x0608
     6f8:	30 91 09 06 	lds	r19, 0x0609
     6fc:	28 17       	cp	r18, r24
     6fe:	39 07       	cpc	r19, r25
     700:	4c f7       	brge	.-46     	; 0x6d4 <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <set_grensLicht>:
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     716:	c0 91 fe 05 	lds	r28, 0x05FE
     71a:	d0 91 ff 05 	lds	r29, 0x05FF
     71e:	80 91 0a 06 	lds	r24, 0x060A
     722:	90 91 0b 06 	lds	r25, 0x060B
     726:	99 23       	and	r25, r25
     728:	cc f0       	brlt	.+50     	; 0x75c <set_grensLicht+0x50>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     72e:	f8 01       	movw	r30, r16
     730:	e8 0f       	add	r30, r24
     732:	f9 1f       	adc	r31, r25
     734:	ce 01       	movw	r24, r28
     736:	60 81       	ld	r22, Z
     738:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     73c:	21 96       	adiw	r28, 0x01	; 1
     73e:	80 91 fe 05 	lds	r24, 0x05FE
     742:	90 91 ff 05 	lds	r25, 0x05FF
     746:	9e 01       	movw	r18, r28
     748:	28 1b       	sub	r18, r24
     74a:	39 0b       	sbc	r19, r25
     74c:	c9 01       	movw	r24, r18
     74e:	20 91 0a 06 	lds	r18, 0x060A
     752:	30 91 0b 06 	lds	r19, 0x060B
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	4c f7       	brge	.-46     	; 0x72e <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	08 95       	ret

00000766 <set_grensTemp>:
		}
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     770:	c0 91 00 06 	lds	r28, 0x0600
     774:	d0 91 01 06 	lds	r29, 0x0601
     778:	80 91 0c 06 	lds	r24, 0x060C
     77c:	90 91 0d 06 	lds	r25, 0x060D
     780:	99 23       	and	r25, r25
     782:	cc f0       	brlt	.+50     	; 0x7b6 <set_grensTemp+0x50>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     788:	f8 01       	movw	r30, r16
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	ce 01       	movw	r24, r28
     790:	60 81       	ld	r22, Z
     792:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     796:	21 96       	adiw	r28, 0x01	; 1
     798:	80 91 00 06 	lds	r24, 0x0600
     79c:	90 91 01 06 	lds	r25, 0x0601
     7a0:	9e 01       	movw	r18, r28
     7a2:	28 1b       	sub	r18, r24
     7a4:	39 0b       	sbc	r19, r25
     7a6:	c9 01       	movw	r24, r18
     7a8:	20 91 0c 06 	lds	r18, 0x060C
     7ac:	30 91 0d 06 	lds	r19, 0x060D
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	4c f7       	brge	.-46     	; 0x788 <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <set_Versie>:
		}
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7ca:	c0 91 02 06 	lds	r28, 0x0602
     7ce:	d0 91 03 06 	lds	r29, 0x0603
     7d2:	80 91 0e 06 	lds	r24, 0x060E
     7d6:	90 91 0f 06 	lds	r25, 0x060F
     7da:	99 23       	and	r25, r25
     7dc:	cc f0       	brlt	.+50     	; 0x810 <set_Versie+0x50>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     7e2:	f8 01       	movw	r30, r16
     7e4:	e8 0f       	add	r30, r24
     7e6:	f9 1f       	adc	r31, r25
     7e8:	ce 01       	movw	r24, r28
     7ea:	60 81       	ld	r22, Z
     7ec:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7f0:	21 96       	adiw	r28, 0x01	; 1
     7f2:	80 91 02 06 	lds	r24, 0x0602
     7f6:	90 91 03 06 	lds	r25, 0x0603
     7fa:	9e 01       	movw	r18, r28
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	c9 01       	movw	r24, r18
     802:	20 91 0e 06 	lds	r18, 0x060E
     806:	30 91 0f 06 	lds	r19, 0x060F
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	4c f7       	brge	.-46     	; 0x7e2 <set_Versie+0x22>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <set_Locatie>:
		}
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     824:	c0 91 04 06 	lds	r28, 0x0604
     828:	d0 91 05 06 	lds	r29, 0x0605
     82c:	80 91 10 06 	lds	r24, 0x0610
     830:	90 91 11 06 	lds	r25, 0x0611
     834:	99 23       	and	r25, r25
     836:	cc f0       	brlt	.+50     	; 0x86a <set_Locatie+0x50>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     83c:	f8 01       	movw	r30, r16
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	ce 01       	movw	r24, r28
     844:	60 81       	ld	r22, Z
     846:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     84a:	21 96       	adiw	r28, 0x01	; 1
     84c:	80 91 04 06 	lds	r24, 0x0604
     850:	90 91 05 06 	lds	r25, 0x0605
     854:	9e 01       	movw	r18, r28
     856:	28 1b       	sub	r18, r24
     858:	39 0b       	sbc	r19, r25
     85a:	c9 01       	movw	r24, r18
     85c:	20 91 10 06 	lds	r18, 0x0610
     860:	30 91 11 06 	lds	r19, 0x0611
     864:	28 17       	cp	r18, r24
     866:	39 07       	cpc	r19, r25
     868:	4c f7       	brge	.-46     	; 0x83c <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	08 95       	ret

00000874 <set_Naam>:
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     87c:	c0 91 a0 06 	lds	r28, 0x06A0
     880:	d0 91 a1 06 	lds	r29, 0x06A1
     884:	20 91 12 06 	lds	r18, 0x0612
     888:	30 91 13 06 	lds	r19, 0x0613
     88c:	2c 17       	cp	r18, r28
     88e:	3d 07       	cpc	r19, r29
     890:	8c f0       	brlt	.+34     	; 0x8b4 <set_Naam+0x40>
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     892:	8c 01       	movw	r16, r24
     894:	0c 0f       	add	r16, r28
     896:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     898:	f8 01       	movw	r30, r16
     89a:	61 91       	ld	r22, Z+
     89c:	8f 01       	movw	r16, r30
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 03 13 	call	0x2606	; 0x2606 <__eeupd_byte_m328p>
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     8a4:	21 96       	adiw	r28, 0x01	; 1
     8a6:	80 91 12 06 	lds	r24, 0x0612
     8aa:	90 91 13 06 	lds	r25, 0x0613
     8ae:	8c 17       	cp	r24, r28
     8b0:	9d 07       	cpc	r25, r29
     8b2:	94 f7       	brge	.-28     	; 0x898 <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <set_substring>:
			

//_______________________________________________________________________________________________//
	
	 void set_substring(){
			char * p1 = strstr (in_buf, "(");
     8be:	8a e3       	ldi	r24, 0x3A	; 58
     8c0:	97 e0       	ldi	r25, 0x07	; 7
     8c2:	68 e2       	ldi	r22, 0x28	; 40
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 01 12 	call	0x2402	; 0x2402 <strchr>
			p1[strlen(p1) -1] = '\0';
     8ca:	e8 2f       	mov	r30, r24
     8cc:	f9 2f       	mov	r31, r25
     8ce:	df 01       	movw	r26, r30
     8d0:	0d 90       	ld	r0, X+
     8d2:	00 20       	and	r0, r0
     8d4:	e9 f7       	brne	.-6      	; 0x8d0 <set_substring+0x12>
     8d6:	11 97       	sbiw	r26, 0x01	; 1
     8d8:	ae 1b       	sub	r26, r30
     8da:	bf 0b       	sbc	r27, r31
     8dc:	a8 0f       	add	r26, r24
     8de:	b9 1f       	adc	r27, r25
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	1c 92       	st	X, r1
			substring = p1 +1;
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	90 93 37 07 	sts	0x0737, r25
     8ea:	80 93 36 07 	sts	0x0736, r24
		}
     8ee:	08 95       	ret

000008f0 <get_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     8f8:	c0 91 a0 06 	lds	r28, 0x06A0
     8fc:	d0 91 a1 06 	lds	r29, 0x06A1
     900:	80 91 12 06 	lds	r24, 0x0612
     904:	90 91 13 06 	lds	r25, 0x0613
     908:	8c 17       	cp	r24, r28
     90a:	9d 07       	cpc	r25, r29
     90c:	8c f0       	brlt	.+34     	; 0x930 <__stack+0x31>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     90e:	8e 01       	movw	r16, r28
     910:	06 5f       	subi	r16, 0xF6	; 246
     912:	18 4f       	sbci	r17, 0xF8	; 248
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     914:	ce 01       	movw	r24, r28
     916:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     91a:	f8 01       	movw	r30, r16
     91c:	81 93       	st	Z+, r24
     91e:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	char* get_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     920:	21 96       	adiw	r28, 0x01	; 1
     922:	80 91 12 06 	lds	r24, 0x0612
     926:	90 91 13 06 	lds	r25, 0x0613
     92a:	8c 17       	cp	r24, r28
     92c:	9d 07       	cpc	r25, r29
     92e:	94 f7       	brge	.-28     	; 0x914 <__stack+0x15>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		return naamRes;
	}
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	97 e0       	ldi	r25, 0x07	; 7
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <get_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     94e:	e0 90 04 06 	lds	r14, 0x0604
     952:	f0 90 05 06 	lds	r15, 0x0605
     956:	80 91 10 06 	lds	r24, 0x0610
     95a:	90 91 11 06 	lds	r25, 0x0611
     95e:	99 23       	and	r25, r25
     960:	ec f0       	brlt	.+58     	; 0x99c <get_Locatie+0x5e>
     962:	01 e0       	ldi	r16, 0x01	; 1
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     96a:	0f 2e       	mov	r0, r31
     96c:	fb ed       	ldi	r31, 0xDB	; 219
     96e:	cf 2e       	mov	r12, r31
     970:	f6 e0       	ldi	r31, 0x06	; 6
     972:	df 2e       	mov	r13, r31
     974:	f0 2d       	mov	r31, r0
     976:	c7 01       	movw	r24, r14
     978:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     97c:	cc 0d       	add	r28, r12
     97e:	dd 1d       	adc	r29, r13
     980:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     982:	08 94       	sec
     984:	e1 1c       	adc	r14, r1
     986:	f1 1c       	adc	r15, r1
     988:	e8 01       	movw	r28, r16
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	80 91 10 06 	lds	r24, 0x0610
     992:	90 91 11 06 	lds	r25, 0x0611
     996:	8c 17       	cp	r24, r28
     998:	9d 07       	cpc	r25, r29
     99a:	6c f7       	brge	.-38     	; 0x976 <get_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		return locatieRes;
	}
     99c:	8b ed       	ldi	r24, 0xDB	; 219
     99e:	96 e0       	ldi	r25, 0x06	; 6
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret

000009b2 <get_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     9c2:	e0 90 02 06 	lds	r14, 0x0602
     9c6:	f0 90 03 06 	lds	r15, 0x0603
     9ca:	80 91 0e 06 	lds	r24, 0x060E
     9ce:	90 91 0f 06 	lds	r25, 0x060F
     9d2:	99 23       	and	r25, r25
     9d4:	ec f0       	brlt	.+58     	; 0xa10 <get_Versie+0x5e>
     9d6:	01 e0       	ldi	r16, 0x01	; 1
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	c0 e0       	ldi	r28, 0x00	; 0
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     9de:	0f 2e       	mov	r0, r31
     9e0:	f8 e5       	ldi	r31, 0x58	; 88
     9e2:	cf 2e       	mov	r12, r31
     9e4:	f7 e0       	ldi	r31, 0x07	; 7
     9e6:	df 2e       	mov	r13, r31
     9e8:	f0 2d       	mov	r31, r0
     9ea:	c7 01       	movw	r24, r14
     9ec:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     9f0:	cc 0d       	add	r28, r12
     9f2:	dd 1d       	adc	r29, r13
     9f4:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     9f6:	08 94       	sec
     9f8:	e1 1c       	adc	r14, r1
     9fa:	f1 1c       	adc	r15, r1
     9fc:	e8 01       	movw	r28, r16
     9fe:	0f 5f       	subi	r16, 0xFF	; 255
     a00:	1f 4f       	sbci	r17, 0xFF	; 255
     a02:	80 91 0e 06 	lds	r24, 0x060E
     a06:	90 91 0f 06 	lds	r25, 0x060F
     a0a:	8c 17       	cp	r24, r28
     a0c:	9d 07       	cpc	r25, r29
     a0e:	6c f7       	brge	.-38     	; 0x9ea <get_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		return versieRes;
	}
     a10:	88 e5       	ldi	r24, 0x58	; 88
     a12:	97 e0       	ldi	r25, 0x07	; 7
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	08 95       	ret

00000a26 <get_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     a36:	e0 90 00 06 	lds	r14, 0x0600
     a3a:	f0 90 01 06 	lds	r15, 0x0601
     a3e:	80 91 0c 06 	lds	r24, 0x060C
     a42:	90 91 0d 06 	lds	r25, 0x060D
     a46:	99 23       	and	r25, r25
     a48:	ec f0       	brlt	.+58     	; 0xa84 <get_grensTemp+0x5e>
     a4a:	01 e0       	ldi	r16, 0x01	; 1
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     a52:	0f 2e       	mov	r0, r31
     a54:	f7 e0       	ldi	r31, 0x07	; 7
     a56:	cf 2e       	mov	r12, r31
     a58:	f7 e0       	ldi	r31, 0x07	; 7
     a5a:	df 2e       	mov	r13, r31
     a5c:	f0 2d       	mov	r31, r0
     a5e:	c7 01       	movw	r24, r14
     a60:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     a64:	cc 0d       	add	r28, r12
     a66:	dd 1d       	adc	r29, r13
     a68:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     a6a:	08 94       	sec
     a6c:	e1 1c       	adc	r14, r1
     a6e:	f1 1c       	adc	r15, r1
     a70:	e8 01       	movw	r28, r16
     a72:	0f 5f       	subi	r16, 0xFF	; 255
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	80 91 0c 06 	lds	r24, 0x060C
     a7a:	90 91 0d 06 	lds	r25, 0x060D
     a7e:	8c 17       	cp	r24, r28
     a80:	9d 07       	cpc	r25, r29
     a82:	6c f7       	brge	.-38     	; 0xa5e <get_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	97 e0       	ldi	r25, 0x07	; 7
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	08 95       	ret

00000a9a <get_grensLight>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     aa6:	e0 90 fe 05 	lds	r14, 0x05FE
     aaa:	f0 90 ff 05 	lds	r15, 0x05FF
     aae:	80 91 0a 06 	lds	r24, 0x060A
     ab2:	90 91 0b 06 	lds	r25, 0x060B
     ab6:	99 23       	and	r25, r25
     ab8:	bc f0       	brlt	.+46     	; 0xae8 <get_grensLight+0x4e>
     aba:	01 e0       	ldi	r16, 0x01	; 1
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	c0 e0       	ldi	r28, 0x00	; 0
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     ac2:	c7 01       	movw	r24, r14
     ac4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     ac8:	c0 5a       	subi	r28, 0xA0	; 160
     aca:	d8 4f       	sbci	r29, 0xF8	; 248
     acc:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     ace:	08 94       	sec
     ad0:	e1 1c       	adc	r14, r1
     ad2:	f1 1c       	adc	r15, r1
     ad4:	e8 01       	movw	r28, r16
     ad6:	0f 5f       	subi	r16, 0xFF	; 255
     ad8:	1f 4f       	sbci	r17, 0xFF	; 255
     ada:	80 91 0a 06 	lds	r24, 0x060A
     ade:	90 91 0b 06 	lds	r25, 0x060B
     ae2:	8c 17       	cp	r24, r28
     ae4:	9d 07       	cpc	r25, r29
     ae6:	6c f7       	brge	.-38     	; 0xac2 <get_grensLight+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}
     ae8:	80 e6       	ldi	r24, 0x60	; 96
     aea:	97 e0       	ldi	r25, 0x07	; 7
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	08 95       	ret

00000afa <get_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     b06:	e0 90 fc 05 	lds	r14, 0x05FC
     b0a:	f0 90 fd 05 	lds	r15, 0x05FD
     b0e:	80 91 08 06 	lds	r24, 0x0608
     b12:	90 91 09 06 	lds	r25, 0x0609
     b16:	99 23       	and	r25, r25
     b18:	bc f0       	brlt	.+46     	; 0xb48 <get_minUnroll+0x4e>
     b1a:	01 e0       	ldi	r16, 0x01	; 1
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	c0 e0       	ldi	r28, 0x00	; 0
     b20:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     b22:	c7 01       	movw	r24, r14
     b24:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     b28:	c4 53       	subi	r28, 0x34	; 52
     b2a:	d9 4f       	sbci	r29, 0xF9	; 249
     b2c:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     b2e:	08 94       	sec
     b30:	e1 1c       	adc	r14, r1
     b32:	f1 1c       	adc	r15, r1
     b34:	e8 01       	movw	r28, r16
     b36:	0f 5f       	subi	r16, 0xFF	; 255
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	80 91 08 06 	lds	r24, 0x0608
     b3e:	90 91 09 06 	lds	r25, 0x0609
     b42:	8c 17       	cp	r24, r28
     b44:	9d 07       	cpc	r25, r29
     b46:	6c f7       	brge	.-38     	; 0xb22 <get_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return minUnrollRes;
	}
     b48:	8c ec       	ldi	r24, 0xCC	; 204
     b4a:	96 e0       	ldi	r25, 0x06	; 6
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	08 95       	ret

00000b5a <get_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b66:	e0 90 fa 05 	lds	r14, 0x05FA
     b6a:	f0 90 fb 05 	lds	r15, 0x05FB
     b6e:	80 91 06 06 	lds	r24, 0x0606
     b72:	90 91 07 06 	lds	r25, 0x0607
     b76:	99 23       	and	r25, r25
     b78:	bc f0       	brlt	.+46     	; 0xba8 <get_maxUnroll+0x4e>
     b7a:	01 e0       	ldi	r16, 0x01	; 1
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     b82:	c7 01       	movw	r24, r14
     b84:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__eerd_byte_m328p>
     b88:	c2 57       	subi	r28, 0x72	; 114
     b8a:	d8 4f       	sbci	r29, 0xF8	; 248
     b8c:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b8e:	08 94       	sec
     b90:	e1 1c       	adc	r14, r1
     b92:	f1 1c       	adc	r15, r1
     b94:	e8 01       	movw	r28, r16
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	80 91 06 06 	lds	r24, 0x0606
     b9e:	90 91 07 06 	lds	r25, 0x0607
     ba2:	8c 17       	cp	r24, r28
     ba4:	9d 07       	cpc	r25, r29
     ba6:	6c f7       	brge	.-38     	; 0xb82 <get_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return maxUnrollRes;
     ba8:	8e e8       	ldi	r24, 0x8E	; 142
     baa:	97 e0       	ldi	r25, 0x07	; 7
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     bba:	2f 92       	push	r2
     bbc:	3f 92       	push	r3
     bbe:	4f 92       	push	r4
     bc0:	5f 92       	push	r5
     bc2:	6f 92       	push	r6
     bc4:	7f 92       	push	r7
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
	ser_write("Please enter ID");
     bde:	8a e1       	ldi	r24, 0x1A	; 26
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     be6:	ca e3       	ldi	r28, 0x3A	; 58
     be8:	d7 e0       	ldi	r29, 0x07	; 7
     bea:	ce 01       	movw	r24, r28
     bec:	6e e1       	ldi	r22, 0x1E	; 30
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	0e 94 a2 08 	call	0x1144	; 0x1144 <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     bf6:	80 ef       	ldi	r24, 0xF0	; 240
     bf8:	95 e0       	ldi	r25, 0x05	; 5
     bfa:	be 01       	movw	r22, r28
     bfc:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     c00:	28 2f       	mov	r18, r24
     c02:	39 2f       	mov	r19, r25
	if(ret |= 0){
     c04:	21 15       	cp	r18, r1
     c06:	31 05       	cpc	r19, r1
     c08:	29 f0       	breq	.+10     	; 0xc14 <protocolCom+0x5a>
		ser_writeln("504: Verkeerde ID");
     c0a:	8a e2       	ldi	r24, 0x2A	; 42
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     c12:	3d c2       	rjmp	.+1146   	; 0x108e <protocolCom+0x4d4>
	}
	else{
		printf("200 kersthaan \n");
     c14:	8c e3       	ldi	r24, 0x3C	; 60
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 6f 12 	call	0x24de	; 0x24de <puts>
		ser_writeln("Please enter version");
     c1c:	8b e4       	ldi	r24, 0x4B	; 75
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
		ser_readln(in_buf, sizeof(in_buf), 1);
     c24:	8a e3       	ldi	r24, 0x3A	; 58
     c26:	97 e0       	ldi	r25, 0x07	; 7
     c28:	6e e1       	ldi	r22, 0x1E	; 30
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	0e 94 a2 08 	call	0x1144	; 0x1144 <ser_readln>
		if(strncmp("get_Versie()", in_buf, 1)){
     c32:	80 91 3a 07 	lds	r24, 0x073A
     c36:	87 36       	cpi	r24, 0x67	; 103
     c38:	09 f4       	brne	.+2      	; 0xc3c <protocolCom+0x82>
     c3a:	29 c2       	rjmp	.+1106   	; 0x108e <protocolCom+0x4d4>
			ser_writeln("504 Wrong version");
     c3c:	80 e6       	ldi	r24, 0x60	; 96
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
			ser_writeln(get_Versie());
     c44:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <get_Versie>
     c48:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
		//}
		//else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     c4c:	02 e7       	ldi	r16, 0x72	; 114
     c4e:	11 e0       	ldi	r17, 0x01	; 1
				ser_readln(in_buf, sizeof(in_buf), 1);
     c50:	ca e3       	ldi	r28, 0x3A	; 58
     c52:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c54:	0f 2e       	mov	r0, r31
     c56:	fb e8       	ldi	r31, 0x8B	; 139
     c58:	ef 2e       	mov	r14, r31
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	ff 2e       	mov	r15, r31
     c5e:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     c60:	0f 2e       	mov	r0, r31
     c62:	f3 eb       	ldi	r31, 0xB3	; 179
     c64:	af 2e       	mov	r10, r31
     c66:	f1 e0       	ldi	r31, 0x01	; 1
     c68:	bf 2e       	mov	r11, r31
     c6a:	f0 2d       	mov	r31, r0
				if ((getIn() % 2) == 0){
					ser_writeln("999 Zonnescherm is al opgerold!");
     c6c:	0f 2e       	mov	r0, r31
     c6e:	fa eb       	ldi	r31, 0xBA	; 186
     c70:	2f 2e       	mov	r2, r31
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c78:	0f 2e       	mov	r0, r31
     c7a:	fa ed       	ldi	r31, 0xDA	; 218
     c7c:	cf 2e       	mov	r12, r31
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	df 2e       	mov	r13, r31
     c82:	f0 2d       	mov	r31, r0
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     c84:	0f 2e       	mov	r0, r31
     c86:	f1 ee       	ldi	r31, 0xE1	; 225
     c88:	8f 2e       	mov	r8, r31
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	9f 2e       	mov	r9, r31
     c8e:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c90:	0f 2e       	mov	r0, r31
     c92:	fd ef       	ldi	r31, 0xFD	; 253
     c94:	6f 2e       	mov	r6, r31
     c96:	f1 e0       	ldi	r31, 0x01	; 1
     c98:	7f 2e       	mov	r7, r31
     c9a:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c9c:	0f 2e       	mov	r0, r31
     c9e:	fc e1       	ldi	r31, 0x1C	; 28
     ca0:	4f 2e       	mov	r4, r31
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	5f 2e       	mov	r5, r31
     ca6:	f0 2d       	mov	r31, r0
			ser_writeln("504 Wrong version");
			ser_writeln(get_Versie());
		//}
		//else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
				ser_readln(in_buf, sizeof(in_buf), 1);
     cae:	ce 01       	movw	r24, r28
     cb0:	6e e1       	ldi	r22, 0x1E	; 30
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 a2 08 	call	0x1144	; 0x1144 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     cba:	c7 01       	movw	r24, r14
     cbc:	be 01       	movw	r22, r28
     cbe:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     cc2:	28 2f       	mov	r18, r24
     cc4:	39 2f       	mov	r19, r25
     cc6:	21 15       	cp	r18, r1
     cc8:	31 05       	cpc	r19, r1
     cca:	a1 f4       	brne	.+40     	; 0xcf4 <protocolCom+0x13a>
				if ((getIn() % 2) == 1){
     ccc:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__divmodhi4>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	21 f4       	brne	.+8      	; 0xce6 <protocolCom+0x12c>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     cde:	82 e9       	ldi	r24, 0x92	; 146
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
				} if((getIn() % 2) == 0){
     ce6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
     cea:	80 fd       	sbrc	r24, 0
     cec:	1e c0       	rjmp	.+60     	; 0xd2a <protocolCom+0x170>
					uitrollen();
     cee:	0e 94 ed 08 	call	0x11da	; 0x11da <uitrollen>
     cf2:	1b c0       	rjmp	.+54     	; 0xd2a <protocolCom+0x170>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     cf4:	c5 01       	movw	r24, r10
     cf6:	be 01       	movw	r22, r28
     cf8:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     cfc:	28 2f       	mov	r18, r24
     cfe:	39 2f       	mov	r19, r25
     d00:	21 15       	cp	r18, r1
     d02:	31 05       	cpc	r19, r1
     d04:	91 f4       	brne	.+36     	; 0xd2a <protocolCom+0x170>
				if ((getIn() % 2) == 0){
     d06:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
     d0a:	80 fd       	sbrc	r24, 0
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <protocolCom+0x15a>
					ser_writeln("999 Zonnescherm is al opgerold!");
     d0e:	c1 01       	movw	r24, r2
     d10:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
				} if((getIn() % 2) == 1){
     d14:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
     d18:	62 e0       	ldi	r22, 0x02	; 2
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__divmodhi4>
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <protocolCom+0x170>
					oprollen();
     d26:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     d2a:	c6 01       	movw	r24, r12
     d2c:	be 01       	movw	r22, r28
     d2e:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     d32:	28 2f       	mov	r18, r24
     d34:	39 2f       	mov	r19, r25
     d36:	21 15       	cp	r18, r1
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <protocolCom+0x184>
     d3c:	b5 cf       	rjmp	.-150    	; 0xca8 <protocolCom+0xee>
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     d3e:	c4 01       	movw	r24, r8
     d40:	be 01       	movw	r22, r28
     d42:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     d46:	28 2f       	mov	r18, r24
     d48:	39 2f       	mov	r19, r25
     d4a:	21 15       	cp	r18, r1
     d4c:	31 05       	cpc	r19, r1
     d4e:	e1 f4       	brne	.+56     	; 0xd88 <protocolCom+0x1ce>
				printf("202 TEMP= % 6.2f \n", getTemp());
     d50:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	00 d0       	rcall	.+0      	; 0xd5a <protocolCom+0x1a0>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <protocolCom+0x1a2>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <protocolCom+0x1a4>
     d5e:	2a ee       	ldi	r18, 0xEA	; 234
     d60:	31 e0       	ldi	r19, 0x01	; 1
     d62:	ed b7       	in	r30, 0x3d	; 61
     d64:	fe b7       	in	r31, 0x3e	; 62
     d66:	32 83       	std	Z+2, r19	; 0x02
     d68:	21 83       	std	Z+1, r18	; 0x01
     d6a:	83 83       	std	Z+3, r24	; 0x03
     d6c:	94 83       	std	Z+4, r25	; 0x04
     d6e:	a5 83       	std	Z+5, r26	; 0x05
     d70:	b6 83       	std	Z+6, r27	; 0x06
     d72:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>
     d76:	8d b7       	in	r24, 0x3d	; 61
     d78:	9e b7       	in	r25, 0x3e	; 62
     d7a:	06 96       	adiw	r24, 0x06	; 6
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	9e bf       	out	0x3e, r25	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	8d bf       	out	0x3d, r24	; 61
     d86:	90 cf       	rjmp	.-224    	; 0xca8 <protocolCom+0xee>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     d88:	c3 01       	movw	r24, r6
     d8a:	be 01       	movw	r22, r28
     d8c:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     d90:	28 2f       	mov	r18, r24
     d92:	39 2f       	mov	r19, r25
     d94:	21 15       	cp	r18, r1
     d96:	31 05       	cpc	r19, r1
     d98:	49 f4       	brne	.+18     	; 0xdac <protocolCom+0x1f2>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     d9a:	8c e0       	ldi	r24, 0x0C	; 12
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     da2:	0e 94 13 05 	call	0xa26	; 0xa26 <get_grensTemp>
     da6:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     daa:	7e cf       	rjmp	.-260    	; 0xca8 <protocolCom+0xee>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     dac:	c2 01       	movw	r24, r4
     dae:	be 01       	movw	r22, r28
     db0:	4e e0       	ldi	r20, 0x0E	; 14
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
     db8:	28 2f       	mov	r18, r24
     dba:	39 2f       	mov	r19, r25
     dbc:	21 15       	cp	r18, r1
     dbe:	31 05       	cpc	r19, r1
     dc0:	c9 f4       	brne	.+50     	; 0xdf4 <protocolCom+0x23a>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     dc2:	8e e2       	ldi	r24, 0x2E	; 46
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     dca:	0e 94 13 05 	call	0xa26	; 0xa26 <get_grensTemp>
     dce:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     dd2:	8f e3       	ldi	r24, 0x3F	; 63
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
				set_substring();
     dda:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_grensTemp(substring);
     dde:	80 91 36 07 	lds	r24, 0x0736
     de2:	90 91 37 07 	lds	r25, 0x0737
     de6:	0e 94 b3 03 	call	0x766	; 0x766 <set_grensTemp>
				ser_writeln(get_grensTemp());
     dea:	0e 94 13 05 	call	0xa26	; 0xa26 <get_grensTemp>
     dee:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     df2:	5a cf       	rjmp	.-332    	; 0xca8 <protocolCom+0xee>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     df4:	84 e4       	ldi	r24, 0x44	; 68
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	be 01       	movw	r22, r28
     dfa:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     dfe:	28 2f       	mov	r18, r24
     e00:	39 2f       	mov	r19, r25
     e02:	21 15       	cp	r18, r1
     e04:	31 05       	cpc	r19, r1
     e06:	c1 f4       	brne	.+48     	; 0xe38 <protocolCom+0x27e>
				printf("202 LIGHT %i \n", getLight());
     e08:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <protocolCom+0x254>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <protocolCom+0x256>
     e10:	ed b7       	in	r30, 0x3d	; 61
     e12:	fe b7       	in	r31, 0x3e	; 62
     e14:	31 96       	adiw	r30, 0x01	; 1
     e16:	2e e4       	ldi	r18, 0x4E	; 78
     e18:	32 e0       	ldi	r19, 0x02	; 2
     e1a:	ad b7       	in	r26, 0x3d	; 61
     e1c:	be b7       	in	r27, 0x3e	; 62
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	3c 93       	st	X, r19
     e22:	2e 93       	st	-X, r18
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	82 83       	std	Z+2, r24	; 0x02
     e28:	13 82       	std	Z+3, r1	; 0x03
     e2a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	38 cf       	rjmp	.-400    	; 0xca8 <protocolCom+0xee>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     e38:	8d e5       	ldi	r24, 0x5D	; 93
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	be 01       	movw	r22, r28
     e3e:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     e42:	28 2f       	mov	r18, r24
     e44:	39 2f       	mov	r19, r25
     e46:	21 15       	cp	r18, r1
     e48:	31 05       	cpc	r19, r1
     e4a:	49 f4       	brne	.+18     	; 0xe5e <protocolCom+0x2a4>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     e4c:	8d e6       	ldi	r24, 0x6D	; 109
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     e54:	0e 94 4d 05 	call	0xa9a	; 0xa9a <get_grensLight>
     e58:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     e5c:	25 cf       	rjmp	.-438    	; 0xca8 <protocolCom+0xee>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     e5e:	8e e7       	ldi	r24, 0x7E	; 126
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	be 01       	movw	r22, r28
     e64:	4f e0       	ldi	r20, 0x0F	; 15
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
     e6c:	28 2f       	mov	r18, r24
     e6e:	39 2f       	mov	r19, r25
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	49 f4       	brne	.+18     	; 0xe88 <protocolCom+0x2ce>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				set_substring();
     e76:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_grensLicht(substring);
     e7a:	80 91 36 07 	lds	r24, 0x0736
     e7e:	90 91 37 07 	lds	r25, 0x0737
     e82:	0e 94 86 03 	call	0x70c	; 0x70c <set_grensLicht>
     e86:	10 cf       	rjmp	.-480    	; 0xca8 <protocolCom+0xee>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     e88:	81 e9       	ldi	r24, 0x91	; 145
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	be 01       	movw	r22, r28
     e8e:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     e92:	28 2f       	mov	r18, r24
     e94:	39 2f       	mov	r19, r25
     e96:	21 15       	cp	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	49 f4       	brne	.+18     	; 0xeae <protocolCom+0x2f4>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     e9c:	80 ea       	ldi	r24, 0xA0	; 160
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     ea4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <get_maxUnroll>
     ea8:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     eac:	fd ce       	rjmp	.-518    	; 0xca8 <protocolCom+0xee>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     eae:	81 eb       	ldi	r24, 0xB1	; 177
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	be 01       	movw	r22, r28
     eb4:	4f e0       	ldi	r20, 0x0F	; 15
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
     ebc:	28 2f       	mov	r18, r24
     ebe:	39 2f       	mov	r19, r25
     ec0:	21 15       	cp	r18, r1
     ec2:	31 05       	cpc	r19, r1
     ec4:	49 f4       	brne	.+18     	; 0xed8 <protocolCom+0x31e>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				set_substring();
     ec6:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_maxUnroll(substring);
     eca:	80 91 36 07 	lds	r24, 0x0736
     ece:	90 91 37 07 	lds	r25, 0x0737
     ed2:	0e 94 2c 03 	call	0x658	; 0x658 <set_maxUnroll>
     ed6:	e8 ce       	rjmp	.-560    	; 0xca8 <protocolCom+0xee>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     ed8:	83 ec       	ldi	r24, 0xC3	; 195
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	be 01       	movw	r22, r28
     ede:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     ee2:	28 2f       	mov	r18, r24
     ee4:	39 2f       	mov	r19, r25
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	49 f4       	brne	.+18     	; 0xefe <protocolCom+0x344>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     eec:	82 ed       	ldi	r24, 0xD2	; 210
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     ef4:	0e 94 7d 05 	call	0xafa	; 0xafa <get_minUnroll>
     ef8:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     efc:	d5 ce       	rjmp	.-598    	; 0xca8 <protocolCom+0xee>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     efe:	83 ee       	ldi	r24, 0xE3	; 227
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	be 01       	movw	r22, r28
     f04:	4f e0       	ldi	r20, 0x0F	; 15
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
     f0c:	28 2f       	mov	r18, r24
     f0e:	39 2f       	mov	r19, r25
     f10:	21 15       	cp	r18, r1
     f12:	31 05       	cpc	r19, r1
     f14:	49 f4       	brne	.+18     	; 0xf28 <protocolCom+0x36e>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				set_substring();
     f16:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_minUnroll(substring);
     f1a:	80 91 36 07 	lds	r24, 0x0736
     f1e:	90 91 37 07 	lds	r25, 0x0737
     f22:	0e 94 59 03 	call	0x6b2	; 0x6b2 <set_minUnroll>
     f26:	c0 ce       	rjmp	.-640    	; 0xca8 <protocolCom+0xee>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     f28:	85 ef       	ldi	r24, 0xF5	; 245
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	be 01       	movw	r22, r28
     f2e:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     f32:	28 2f       	mov	r18, r24
     f34:	39 2f       	mov	r19, r25
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	49 f4       	brne	.+18     	; 0xf4e <protocolCom+0x394>
				ser_write("202 "),  ser_writeln(get_Naam());
     f3c:	8e ef       	ldi	r24, 0xFE	; 254
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     f44:	0e 94 78 04 	call	0x8f0	; 0x8f0 <get_Naam>
     f48:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     f4c:	ad ce       	rjmp	.-678    	; 0xca8 <protocolCom+0xee>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	93 e0       	ldi	r25, 0x03	; 3
     f52:	be 01       	movw	r22, r28
     f54:	48 e0       	ldi	r20, 0x08	; 8
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
     f5c:	28 2f       	mov	r18, r24
     f5e:	39 2f       	mov	r19, r25
     f60:	21 15       	cp	r18, r1
     f62:	31 05       	cpc	r19, r1
     f64:	69 f4       	brne	.+26     	; 0xf80 <protocolCom+0x3c6>
				set_substring();
     f66:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_Naam(substring);
     f6a:	80 91 36 07 	lds	r24, 0x0736
     f6e:	90 91 37 07 	lds	r25, 0x0737
     f72:	0e 94 3a 04 	call	0x874	; 0x874 <set_Naam>
				printf("200 OK \n");
     f76:	8f e0       	ldi	r24, 0x0F	; 15
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 6f 12 	call	0x24de	; 0x24de <puts>
     f7e:	94 ce       	rjmp	.-728    	; 0xca8 <protocolCom+0xee>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     f80:	87 e1       	ldi	r24, 0x17	; 23
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	be 01       	movw	r22, r28
     f86:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     f8a:	28 2f       	mov	r18, r24
     f8c:	39 2f       	mov	r19, r25
     f8e:	21 15       	cp	r18, r1
     f90:	31 05       	cpc	r19, r1
     f92:	49 f4       	brne	.+18     	; 0xfa6 <protocolCom+0x3ec>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     f94:	8e ef       	ldi	r24, 0xFE	; 254
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     f9c:	0e 94 9f 04 	call	0x93e	; 0x93e <get_Locatie>
     fa0:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     fa4:	81 ce       	rjmp	.-766    	; 0xca8 <protocolCom+0xee>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     fa6:	84 e2       	ldi	r24, 0x24	; 36
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	be 01       	movw	r22, r28
     fac:	4c e0       	ldi	r20, 0x0C	; 12
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
     fb4:	28 2f       	mov	r18, r24
     fb6:	39 2f       	mov	r19, r25
     fb8:	21 15       	cp	r18, r1
     fba:	31 05       	cpc	r19, r1
     fbc:	69 f4       	brne	.+26     	; 0xfd8 <protocolCom+0x41e>
				set_substring();
     fbe:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
				set_Locatie(substring);
     fc2:	80 91 36 07 	lds	r24, 0x0736
     fc6:	90 91 37 07 	lds	r25, 0x0737
     fca:	0e 94 0d 04 	call	0x81a	; 0x81a <set_Locatie>
				
				printf("200 OK \n");
     fce:	8f e0       	ldi	r24, 0x0F	; 15
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	0e 94 6f 12 	call	0x24de	; 0x24de <puts>
     fd6:	68 ce       	rjmp	.-816    	; 0xca8 <protocolCom+0xee>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     fd8:	84 e3       	ldi	r24, 0x34	; 52
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	be 01       	movw	r22, r28
     fde:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
     fe2:	28 2f       	mov	r18, r24
     fe4:	39 2f       	mov	r19, r25
     fe6:	21 15       	cp	r18, r1
     fe8:	31 05       	cpc	r19, r1
     fea:	49 f4       	brne	.+18     	; 0xffe <protocolCom+0x444>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
     ff4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <get_Versie>
     ff8:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
     ffc:	55 ce       	rjmp	.-854    	; 0xca8 <protocolCom+0xee>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     ffe:	8d e4       	ldi	r24, 0x4D	; 77
    1000:	93 e0       	ldi	r25, 0x03	; 3
    1002:	be 01       	movw	r22, r28
    1004:	4c e0       	ldi	r20, 0x0C	; 12
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	0e 94 15 12 	call	0x242a	; 0x242a <strncmp>
    100c:	28 2f       	mov	r18, r24
    100e:	39 2f       	mov	r19, r25
    1010:	21 15       	cp	r18, r1
    1012:	31 05       	cpc	r19, r1
    1014:	69 f4       	brne	.+26     	; 0x1030 <protocolCom+0x476>
					set_substring();
    1016:	0e 94 5f 04 	call	0x8be	; 0x8be <set_substring>
					set_Versie(substring);
    101a:	80 91 36 07 	lds	r24, 0x0736
    101e:	90 91 37 07 	lds	r25, 0x0737
    1022:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <set_Versie>
					
					printf("200 OK \n");
    1026:	8f e0       	ldi	r24, 0x0F	; 15
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	0e 94 6f 12 	call	0x24de	; 0x24de <puts>
    102e:	3c ce       	rjmp	.-904    	; 0xca8 <protocolCom+0xee>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
    1030:	8c e5       	ldi	r24, 0x5C	; 92
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	be 01       	movw	r22, r28
    1036:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
    103a:	28 2f       	mov	r18, r24
    103c:	39 2f       	mov	r19, r25
    103e:	21 15       	cp	r18, r1
    1040:	31 05       	cpc	r19, r1
    1042:	89 f4       	brne	.+34     	; 0x1066 <protocolCom+0x4ac>
				if ((getIn() % 2) == 1){
    1044:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <getIn>
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__divmodhi4>
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	11 f4       	brne	.+4      	; 0x105a <protocolCom+0x4a0>
					uitrollen();					
    1056:	0e 94 ed 08 	call	0x11da	; 0x11da <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
    105a:	81 e6       	ldi	r24, 0x61	; 97
    105c:	93 e0       	ldi	r25, 0x03	; 3
    105e:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
				abort();
    1062:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
    1066:	8a e6       	ldi	r24, 0x6A	; 106
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	be 01       	movw	r22, r28
    106c:	0e 94 0c 12 	call	0x2418	; 0x2418 <strcmp>
    1070:	28 2f       	mov	r18, r24
    1072:	39 2f       	mov	r19, r25
    1074:	21 15       	cp	r18, r1
    1076:	31 05       	cpc	r19, r1
    1078:	29 f4       	brne	.+10     	; 0x1084 <protocolCom+0x4ca>
				ser_writeln(
    107a:	8f e6       	ldi	r24, 0x6F	; 111
    107c:	93 e0       	ldi	r25, 0x03	; 3
    107e:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
    1082:	12 ce       	rjmp	.-988    	; 0xca8 <protocolCom+0xee>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
    1084:	84 eb       	ldi	r24, 0xB4	; 180
    1086:	95 e0       	ldi	r25, 0x05	; 5
    1088:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
    108c:	0d ce       	rjmp	.-998    	; 0xca8 <protocolCom+0xee>
			}		
			}
			}
			}	
			}					
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	9f 90       	pop	r9
    10a4:	8f 90       	pop	r8
    10a6:	7f 90       	pop	r7
    10a8:	6f 90       	pop	r6
    10aa:	5f 90       	pop	r5
    10ac:	4f 90       	pop	r4
    10ae:	3f 90       	pop	r3
    10b0:	2f 90       	pop	r2
    10b2:	08 95       	ret

000010b4 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
    10b4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
    10b8:	83 e3       	ldi	r24, 0x33	; 51
    10ba:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
    10be:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    10c2:	88 e1       	ldi	r24, 0x18	; 24
    10c4:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    10c8:	86 e0       	ldi	r24, 0x06	; 6
    10ca:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
    10ce:	84 e1       	ldi	r24, 0x14	; 20
    10d0:	96 e0       	ldi	r25, 0x06	; 6
    10d2:	90 93 c3 07 	sts	0x07C3, r25
    10d6:	80 93 c2 07 	sts	0x07C2, r24
}
    10da:	08 95       	ret

000010dc <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    10dc:	e0 ec       	ldi	r30, 0xC0	; 192
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	90 81       	ld	r25, Z
    10e2:	95 ff       	sbrs	r25, 5
    10e4:	fd cf       	rjmp	.-6      	; 0x10e0 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
    10e6:	80 93 c6 00 	sts	0x00C6, r24
}
    10ea:	08 95       	ret

000010ec <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
    10ec:	cf 93       	push	r28
    10ee:	c8 2f       	mov	r28, r24
	if (c=='\n') {
    10f0:	8a 30       	cpi	r24, 0x0A	; 10
    10f2:	19 f4       	brne	.+6      	; 0x10fa <ser_stdio_putchar+0xe>
		ser_transmit('\r');
    10f4:	8d e0       	ldi	r24, 0x0D	; 13
    10f6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>
	}
	ser_transmit(c);
    10fa:	8c 2f       	mov	r24, r28
    10fc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>
}
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    1104:	e0 ec       	ldi	r30, 0xC0	; 192
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 23       	and	r24, r24
    110c:	ec f7       	brge	.-6      	; 0x1108 <ser_receive+0x4>
	return UDR0;
    110e:	80 91 c6 00 	lds	r24, 0x00C6
}
    1112:	08 95       	ret

00001114 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    111a:	88 81       	ld	r24, Y
    111c:	88 23       	and	r24, r24
    111e:	31 f0       	breq	.+12     	; 0x112c <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    1120:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    1122:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    1126:	89 91       	ld	r24, Y+
    1128:	88 23       	and	r24, r24
    112a:	d9 f7       	brne	.-10     	; 0x1122 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    1132:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
	ser_transmit('\r');
    1136:	8d e0       	ldi	r24, 0x0D	; 13
    1138:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>
	ser_transmit('\n');
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>
}
    1142:	08 95       	ret

00001144 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	5c 01       	movw	r10, r24
    115a:	d4 2f       	mov	r29, r20
	int i=0;
    115c:	6c 01       	movw	r12, r24
    115e:	ee 24       	eor	r14, r14
    1160:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1162:	8b 01       	movw	r16, r22
    1164:	01 50       	subi	r16, 0x01	; 1
    1166:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1168:	0e 94 82 08 	call	0x1104	; 0x1104 <ser_receive>
    116c:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    116e:	dd 23       	and	r29, r29
    1170:	11 f0       	breq	.+4      	; 0x1176 <ser_readln+0x32>
    1172:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>
		if (c=='\r') {
    1176:	cd 30       	cpi	r28, 0x0D	; 13
    1178:	31 f4       	brne	.+12     	; 0x1186 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    117a:	dd 23       	and	r29, r29
    117c:	71 f0       	breq	.+28     	; 0x119a <ser_readln+0x56>
    117e:	8a e0       	ldi	r24, 0x0A	; 10
    1180:	0e 94 6e 08 	call	0x10dc	; 0x10dc <ser_transmit>
    1184:	0a c0       	rjmp	.+20     	; 0x119a <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1186:	e0 16       	cp	r14, r16
    1188:	f1 06       	cpc	r15, r17
    118a:	74 f7       	brge	.-36     	; 0x1168 <ser_readln+0x24>
			buf[i++]=c;
    118c:	f6 01       	movw	r30, r12
    118e:	c1 93       	st	Z+, r28
    1190:	6f 01       	movw	r12, r30
    1192:	08 94       	sec
    1194:	e1 1c       	adc	r14, r1
    1196:	f1 1c       	adc	r15, r1
    1198:	e7 cf       	rjmp	.-50     	; 0x1168 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    119a:	ea 0c       	add	r14, r10
    119c:	fb 1c       	adc	r15, r11
    119e:	f7 01       	movw	r30, r14
    11a0:	10 82       	st	Z, r1
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	08 95       	ret

000011b8 <getIn>:



int getIn(){
	return IN;
}
    11b8:	80 91 a2 06 	lds	r24, 0x06A2
    11bc:	90 91 a3 06 	lds	r25, 0x06A3
    11c0:	08 95       	ret

000011c2 <init_scherm_ports>:


init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    11c2:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    11c4:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    11c6:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    11c8:	e9 e6       	ldi	r30, 0x69	; 105
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    11d6:	2d 9a       	sbi	0x05, 5	; 5
}
    11d8:	08 95       	ret

000011da <uitrollen>:

void uitrollen(){
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
	IN = (IN + 1);
    11e6:	80 91 a2 06 	lds	r24, 0x06A2
    11ea:	90 91 a3 06 	lds	r25, 0x06A3
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	90 93 a3 06 	sts	0x06A3, r25
    11f4:	80 93 a2 06 	sts	0x06A2, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    11f8:	82 e2       	ldi	r24, 0x22	; 34
    11fa:	96 e0       	ldi	r25, 0x06	; 6
    11fc:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1200:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1202:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1204:	0e 94 ad 05 	call	0xb5a	; 0xb5a <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strtod>
    1210:	6b 01       	movw	r12, r22
    1212:	7c 01       	movw	r14, r24
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
    1214:	c7 e2       	ldi	r28, 0x27	; 39
    1216:	d6 e0       	ldi	r29, 0x06	; 6
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1218:	22 c0       	rjmp	.+68     	; 0x125e <uitrollen+0x84>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    121a:	2c 9a       	sbi	0x05, 4	; 5
    121c:	8f e3       	ldi	r24, 0x3F	; 63
    121e:	9d e0       	ldi	r25, 0x0D	; 13
    1220:	a3 e0       	ldi	r26, 0x03	; 3
    1222:	81 50       	subi	r24, 0x01	; 1
    1224:	90 40       	sbci	r25, 0x00	; 0
    1226:	a0 40       	sbci	r26, 0x00	; 0
    1228:	e1 f7       	brne	.-8      	; 0x1222 <uitrollen+0x48>
    122a:	00 c0       	rjmp	.+0      	; 0x122c <uitrollen+0x52>
    122c:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    122e:	2c 98       	cbi	0x05, 4	; 5
    1230:	8f e3       	ldi	r24, 0x3F	; 63
    1232:	9d e0       	ldi	r25, 0x0D	; 13
    1234:	a3 e0       	ldi	r26, 0x03	; 3
    1236:	81 50       	subi	r24, 0x01	; 1
    1238:	90 40       	sbci	r25, 0x00	; 0
    123a:	a0 40       	sbci	r26, 0x00	; 0
    123c:	e1 f7       	brne	.-8      	; 0x1236 <uitrollen+0x5c>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <uitrollen+0x66>
    1240:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
    1242:	80 91 be 07 	lds	r24, 0x07BE
    1246:	90 91 bf 07 	lds	r25, 0x07BF
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	90 93 bf 07 	sts	0x07BF, r25
    1250:	80 93 be 07 	sts	0x07BE, r24
		if (j % 2 == 0){ser_write(".");}
    1254:	80 fd       	sbrc	r24, 0
    1256:	03 c0       	rjmp	.+6      	; 0x125e <uitrollen+0x84>
    1258:	ce 01       	movw	r24, r28
    125a:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    125e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1262:	a7 01       	movw	r20, r14
    1264:	96 01       	movw	r18, r12
    1266:	0e 94 88 0a 	call	0x1510	; 0x1510 <__cmpsf2>
    126a:	88 23       	and	r24, r24
    126c:	b4 f2       	brlt	.-84     	; 0x121a <uitrollen+0x40>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    126e:	10 92 bf 07 	sts	0x07BF, r1
    1272:	10 92 be 07 	sts	0x07BE, r1
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    1276:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	00 d0       	rcall	.+0      	; 0x1280 <uitrollen+0xa6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <uitrollen+0xa8>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <uitrollen+0xaa>
    1284:	29 e2       	ldi	r18, 0x29	; 41
    1286:	36 e0       	ldi	r19, 0x06	; 6
    1288:	ed b7       	in	r30, 0x3d	; 61
    128a:	fe b7       	in	r31, 0x3e	; 62
    128c:	32 83       	std	Z+2, r19	; 0x02
    128e:	21 83       	std	Z+1, r18	; 0x01
    1290:	83 83       	std	Z+3, r24	; 0x03
    1292:	94 83       	std	Z+4, r25	; 0x04
    1294:	a5 83       	std	Z+5, r26	; 0x05
    1296:	b6 83       	std	Z+6, r27	; 0x06
    1298:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    129c:	8d b7       	in	r24, 0x3d	; 61
    129e:	9e b7       	in	r25, 0x3e	; 62
    12a0:	06 96       	adiw	r24, 0x06	; 6
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	9e bf       	out	0x3e, r25	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	8d bf       	out	0x3d, r24	; 61
    12ac:	8d e4       	ldi	r24, 0x4D	; 77
    12ae:	96 e0       	ldi	r25, 0x06	; 6
    12b0:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
    12b4:	8f e3       	ldi	r24, 0x3F	; 63
    12b6:	9d e0       	ldi	r25, 0x0D	; 13
    12b8:	a3 e0       	ldi	r26, 0x03	; 3
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	90 40       	sbci	r25, 0x00	; 0
    12be:	a0 40       	sbci	r26, 0x00	; 0
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <uitrollen+0xe0>
    12c2:	00 c0       	rjmp	.+0      	; 0x12c4 <uitrollen+0xea>
    12c4:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	08 95       	ret

000012d4 <oprollen>:
	
	


void oprollen(){
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
	IN = (IN + 1);
    12e4:	80 91 a2 06 	lds	r24, 0x06A2
    12e8:	90 91 a3 06 	lds	r25, 0x06A3
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	90 93 a3 06 	sts	0x06A3, r25
    12f2:	80 93 a2 06 	sts	0x06A2, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    12f6:	82 e2       	ldi	r24, 0x22	; 34
    12f8:	96 e0       	ldi	r25, 0x06	; 6
    12fa:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    12fe:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1300:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1302:	0e 94 7d 05 	call	0xafa	; 0xafa <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strtod>
    130e:	6b 01       	movw	r12, r22
    1310:	7c 01       	movw	r14, r24
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		printf("% 6.2f", x);
    1312:	cb e6       	ldi	r28, 0x6B	; 107
    1314:	d6 e0       	ldi	r29, 0x06	; 6
		printf("% 6.2f", getDistance());

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    1316:	07 e2       	ldi	r16, 0x27	; 39
    1318:	16 e0       	ldi	r17, 0x06	; 6

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	
	while (getDistance()> x){
    131a:	56 c0       	rjmp	.+172    	; 0x13c8 <oprollen+0xf4>

		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    131c:	2c 9a       	sbi	0x05, 4	; 5
    131e:	8f e3       	ldi	r24, 0x3F	; 63
    1320:	9d e0       	ldi	r25, 0x0D	; 13
    1322:	a3 e0       	ldi	r26, 0x03	; 3
    1324:	81 50       	subi	r24, 0x01	; 1
    1326:	90 40       	sbci	r25, 0x00	; 0
    1328:	a0 40       	sbci	r26, 0x00	; 0
    132a:	e1 f7       	brne	.-8      	; 0x1324 <oprollen+0x50>
    132c:	00 c0       	rjmp	.+0      	; 0x132e <oprollen+0x5a>
    132e:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1330:	2c 98       	cbi	0x05, 4	; 5
    1332:	8f e3       	ldi	r24, 0x3F	; 63
    1334:	9d e0       	ldi	r25, 0x0D	; 13
    1336:	a3 e0       	ldi	r26, 0x03	; 3
    1338:	81 50       	subi	r24, 0x01	; 1
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	a0 40       	sbci	r26, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <oprollen+0x64>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <oprollen+0x6e>
    1342:	00 00       	nop
		_delay_ms(DELAY_MS);
		printf("% 6.2f", x);
    1344:	00 d0       	rcall	.+0      	; 0x1346 <oprollen+0x72>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <oprollen+0x74>
    1348:	00 d0       	rcall	.+0      	; 0x134a <oprollen+0x76>
    134a:	ad b7       	in	r26, 0x3d	; 61
    134c:	be b7       	in	r27, 0x3e	; 62
    134e:	12 96       	adiw	r26, 0x02	; 2
    1350:	dc 93       	st	X, r29
    1352:	ce 93       	st	-X, r28
    1354:	11 97       	sbiw	r26, 0x01	; 1
    1356:	ed b7       	in	r30, 0x3d	; 61
    1358:	fe b7       	in	r31, 0x3e	; 62
    135a:	c3 82       	std	Z+3, r12	; 0x03
    135c:	d4 82       	std	Z+4, r13	; 0x04
    135e:	e5 82       	std	Z+5, r14	; 0x05
    1360:	f6 82       	std	Z+6, r15	; 0x06
    1362:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>
		printf("% 6.2f", getDistance());
    1366:	2d b7       	in	r18, 0x3d	; 61
    1368:	3e b7       	in	r19, 0x3e	; 62
    136a:	2a 5f       	subi	r18, 0xFA	; 250
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	3e bf       	out	0x3e, r19	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	2d bf       	out	0x3d, r18	; 61
    1378:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	00 d0       	rcall	.+0      	; 0x1382 <oprollen+0xae>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <oprollen+0xb0>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <oprollen+0xb2>
    1386:	ed b7       	in	r30, 0x3d	; 61
    1388:	fe b7       	in	r31, 0x3e	; 62
    138a:	d2 83       	std	Z+2, r29	; 0x02
    138c:	c1 83       	std	Z+1, r28	; 0x01
    138e:	83 83       	std	Z+3, r24	; 0x03
    1390:	94 83       	std	Z+4, r25	; 0x04
    1392:	a5 83       	std	Z+5, r26	; 0x05
    1394:	b6 83       	std	Z+6, r27	; 0x06
    1396:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>

		j += 1;
    139a:	80 91 be 07 	lds	r24, 0x07BE
    139e:	90 91 bf 07 	lds	r25, 0x07BF
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	90 93 bf 07 	sts	0x07BF, r25
    13a8:	80 93 be 07 	sts	0x07BE, r24
		if (j % 2 == 0){ser_write(".");}
    13ac:	2d b7       	in	r18, 0x3d	; 61
    13ae:	3e b7       	in	r19, 0x3e	; 62
    13b0:	2a 5f       	subi	r18, 0xFA	; 250
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	3e bf       	out	0x3e, r19	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	2d bf       	out	0x3d, r18	; 61
    13be:	80 fd       	sbrc	r24, 0
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <oprollen+0xf4>
    13c2:	c8 01       	movw	r24, r16
    13c4:	0e 94 8a 08 	call	0x1114	; 0x1114 <ser_write>

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	
	while (getDistance()> x){
    13c8:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13cc:	a7 01       	movw	r20, r14
    13ce:	96 01       	movw	r18, r12
    13d0:	0e 94 3e 0b 	call	0x167c	; 0x167c <__gesf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	0c f4       	brge	.+2      	; 0x13da <oprollen+0x106>
    13d8:	a1 cf       	rjmp	.-190    	; 0x131c <oprollen+0x48>
		printf("% 6.2f", getDistance());

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}			
	j = 0;
    13da:	10 92 bf 07 	sts	0x07BF, r1
    13de:	10 92 be 07 	sts	0x07BE, r1
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    13e2:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <oprollen+0x118>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <oprollen+0x11a>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <oprollen+0x11c>
    13f0:	29 e2       	ldi	r18, 0x29	; 41
    13f2:	36 e0       	ldi	r19, 0x06	; 6
    13f4:	ed b7       	in	r30, 0x3d	; 61
    13f6:	fe b7       	in	r31, 0x3e	; 62
    13f8:	32 83       	std	Z+2, r19	; 0x02
    13fa:	21 83       	std	Z+1, r18	; 0x01
    13fc:	83 83       	std	Z+3, r24	; 0x03
    13fe:	94 83       	std	Z+4, r25	; 0x04
    1400:	a5 83       	std	Z+5, r26	; 0x05
    1402:	b6 83       	std	Z+6, r27	; 0x06
    1404:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    1408:	2d b7       	in	r18, 0x3d	; 61
    140a:	3e b7       	in	r19, 0x3e	; 62
    140c:	2a 5f       	subi	r18, 0xFA	; 250
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	3e bf       	out	0x3e, r19	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	2d bf       	out	0x3d, r18	; 61
    141a:	82 e7       	ldi	r24, 0x72	; 114
    141c:	96 e0       	ldi	r25, 0x06	; 6
    141e:	0e 94 99 08 	call	0x1132	; 0x1132 <ser_writeln>
    1422:	8f e3       	ldi	r24, 0x3F	; 63
    1424:	9d e0       	ldi	r25, 0x0D	; 13
    1426:	a3 e0       	ldi	r26, 0x03	; 3
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	a0 40       	sbci	r26, 0x00	; 0
    142e:	e1 f7       	brne	.-8      	; 0x1428 <oprollen+0x154>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <oprollen+0x15e>
    1432:	00 00       	nop
	_delay_ms(DELAY_MS);
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	08 95       	ret

00001446 <__subsf3>:
    1446:	50 58       	subi	r21, 0x80	; 128

00001448 <__addsf3>:
    1448:	bb 27       	eor	r27, r27
    144a:	aa 27       	eor	r26, r26
    144c:	0e d0       	rcall	.+28     	; 0x146a <__addsf3x>
    144e:	dc c0       	rjmp	.+440    	; 0x1608 <__fp_round>
    1450:	cd d0       	rcall	.+410    	; 0x15ec <__fp_pscA>
    1452:	30 f0       	brcs	.+12     	; 0x1460 <__addsf3+0x18>
    1454:	d2 d0       	rcall	.+420    	; 0x15fa <__fp_pscB>
    1456:	20 f0       	brcs	.+8      	; 0x1460 <__addsf3+0x18>
    1458:	31 f4       	brne	.+12     	; 0x1466 <__addsf3+0x1e>
    145a:	9f 3f       	cpi	r25, 0xFF	; 255
    145c:	11 f4       	brne	.+4      	; 0x1462 <__addsf3+0x1a>
    145e:	1e f4       	brtc	.+6      	; 0x1466 <__addsf3+0x1e>
    1460:	c2 c0       	rjmp	.+388    	; 0x15e6 <__fp_nan>
    1462:	0e f4       	brtc	.+2      	; 0x1466 <__addsf3+0x1e>
    1464:	e0 95       	com	r30
    1466:	e7 fb       	bst	r30, 7
    1468:	b8 c0       	rjmp	.+368    	; 0x15da <__fp_inf>

0000146a <__addsf3x>:
    146a:	e9 2f       	mov	r30, r25
    146c:	de d0       	rcall	.+444    	; 0x162a <__fp_split3>
    146e:	80 f3       	brcs	.-32     	; 0x1450 <__addsf3+0x8>
    1470:	ba 17       	cp	r27, r26
    1472:	62 07       	cpc	r22, r18
    1474:	73 07       	cpc	r23, r19
    1476:	84 07       	cpc	r24, r20
    1478:	95 07       	cpc	r25, r21
    147a:	18 f0       	brcs	.+6      	; 0x1482 <__addsf3x+0x18>
    147c:	71 f4       	brne	.+28     	; 0x149a <__addsf3x+0x30>
    147e:	9e f5       	brtc	.+102    	; 0x14e6 <__addsf3x+0x7c>
    1480:	f6 c0       	rjmp	.+492    	; 0x166e <__fp_zero>
    1482:	0e f4       	brtc	.+2      	; 0x1486 <__addsf3x+0x1c>
    1484:	e0 95       	com	r30
    1486:	0b 2e       	mov	r0, r27
    1488:	ba 2f       	mov	r27, r26
    148a:	a0 2d       	mov	r26, r0
    148c:	0b 01       	movw	r0, r22
    148e:	b9 01       	movw	r22, r18
    1490:	90 01       	movw	r18, r0
    1492:	0c 01       	movw	r0, r24
    1494:	ca 01       	movw	r24, r20
    1496:	a0 01       	movw	r20, r0
    1498:	11 24       	eor	r1, r1
    149a:	ff 27       	eor	r31, r31
    149c:	59 1b       	sub	r21, r25
    149e:	99 f0       	breq	.+38     	; 0x14c6 <__addsf3x+0x5c>
    14a0:	59 3f       	cpi	r21, 0xF9	; 249
    14a2:	50 f4       	brcc	.+20     	; 0x14b8 <__addsf3x+0x4e>
    14a4:	50 3e       	cpi	r21, 0xE0	; 224
    14a6:	68 f1       	brcs	.+90     	; 0x1502 <__addsf3x+0x98>
    14a8:	1a 16       	cp	r1, r26
    14aa:	f0 40       	sbci	r31, 0x00	; 0
    14ac:	a2 2f       	mov	r26, r18
    14ae:	23 2f       	mov	r18, r19
    14b0:	34 2f       	mov	r19, r20
    14b2:	44 27       	eor	r20, r20
    14b4:	58 5f       	subi	r21, 0xF8	; 248
    14b6:	f3 cf       	rjmp	.-26     	; 0x149e <__addsf3x+0x34>
    14b8:	46 95       	lsr	r20
    14ba:	37 95       	ror	r19
    14bc:	27 95       	ror	r18
    14be:	a7 95       	ror	r26
    14c0:	f0 40       	sbci	r31, 0x00	; 0
    14c2:	53 95       	inc	r21
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__addsf3x+0x4e>
    14c6:	7e f4       	brtc	.+30     	; 0x14e6 <__addsf3x+0x7c>
    14c8:	1f 16       	cp	r1, r31
    14ca:	ba 0b       	sbc	r27, r26
    14cc:	62 0b       	sbc	r22, r18
    14ce:	73 0b       	sbc	r23, r19
    14d0:	84 0b       	sbc	r24, r20
    14d2:	ba f0       	brmi	.+46     	; 0x1502 <__addsf3x+0x98>
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	a1 f0       	breq	.+40     	; 0x1500 <__addsf3x+0x96>
    14d8:	ff 0f       	add	r31, r31
    14da:	bb 1f       	adc	r27, r27
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	c2 f7       	brpl	.-16     	; 0x14d4 <__addsf3x+0x6a>
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <__addsf3x+0x98>
    14e6:	ba 0f       	add	r27, r26
    14e8:	62 1f       	adc	r22, r18
    14ea:	73 1f       	adc	r23, r19
    14ec:	84 1f       	adc	r24, r20
    14ee:	48 f4       	brcc	.+18     	; 0x1502 <__addsf3x+0x98>
    14f0:	87 95       	ror	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <__addsf3x+0x96>
    14fe:	b3 cf       	rjmp	.-154    	; 0x1466 <__addsf3+0x1e>
    1500:	93 95       	inc	r25
    1502:	88 0f       	add	r24, r24
    1504:	08 f0       	brcs	.+2      	; 0x1508 <__addsf3x+0x9e>
    1506:	99 27       	eor	r25, r25
    1508:	ee 0f       	add	r30, r30
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	08 95       	ret

00001510 <__cmpsf2>:
    1510:	40 d0       	rcall	.+128    	; 0x1592 <__fp_cmp>
    1512:	08 f4       	brcc	.+2      	; 0x1516 <__cmpsf2+0x6>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	08 95       	ret

00001518 <__floatunsisf>:
    1518:	e8 94       	clt
    151a:	09 c0       	rjmp	.+18     	; 0x152e <__floatsisf+0x12>

0000151c <__floatsisf>:
    151c:	97 fb       	bst	r25, 7
    151e:	3e f4       	brtc	.+14     	; 0x152e <__floatsisf+0x12>
    1520:	90 95       	com	r25
    1522:	80 95       	com	r24
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	99 23       	and	r25, r25
    1530:	a9 f0       	breq	.+42     	; 0x155c <__floatsisf+0x40>
    1532:	f9 2f       	mov	r31, r25
    1534:	96 e9       	ldi	r25, 0x96	; 150
    1536:	bb 27       	eor	r27, r27
    1538:	93 95       	inc	r25
    153a:	f6 95       	lsr	r31
    153c:	87 95       	ror	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b7 95       	ror	r27
    1544:	f1 11       	cpse	r31, r1
    1546:	f8 cf       	rjmp	.-16     	; 0x1538 <__floatsisf+0x1c>
    1548:	fa f4       	brpl	.+62     	; 0x1588 <__floatsisf+0x6c>
    154a:	bb 0f       	add	r27, r27
    154c:	11 f4       	brne	.+4      	; 0x1552 <__floatsisf+0x36>
    154e:	60 ff       	sbrs	r22, 0
    1550:	1b c0       	rjmp	.+54     	; 0x1588 <__floatsisf+0x6c>
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <__floatsisf+0x6c>
    155c:	88 23       	and	r24, r24
    155e:	11 f0       	breq	.+4      	; 0x1564 <__floatsisf+0x48>
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	11 c0       	rjmp	.+34     	; 0x1586 <__floatsisf+0x6a>
    1564:	77 23       	and	r23, r23
    1566:	21 f0       	breq	.+8      	; 0x1570 <__floatsisf+0x54>
    1568:	9e e8       	ldi	r25, 0x8E	; 142
    156a:	87 2f       	mov	r24, r23
    156c:	76 2f       	mov	r23, r22
    156e:	05 c0       	rjmp	.+10     	; 0x157a <__floatsisf+0x5e>
    1570:	66 23       	and	r22, r22
    1572:	71 f0       	breq	.+28     	; 0x1590 <__floatsisf+0x74>
    1574:	96 e8       	ldi	r25, 0x86	; 134
    1576:	86 2f       	mov	r24, r22
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	2a f0       	brmi	.+10     	; 0x1588 <__floatsisf+0x6c>
    157e:	9a 95       	dec	r25
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	da f7       	brpl	.-10     	; 0x157e <__floatsisf+0x62>
    1588:	88 0f       	add	r24, r24
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
    158e:	97 f9       	bld	r25, 7
    1590:	08 95       	ret

00001592 <__fp_cmp>:
    1592:	99 0f       	add	r25, r25
    1594:	00 08       	sbc	r0, r0
    1596:	55 0f       	add	r21, r21
    1598:	aa 0b       	sbc	r26, r26
    159a:	e0 e8       	ldi	r30, 0x80	; 128
    159c:	fe ef       	ldi	r31, 0xFE	; 254
    159e:	16 16       	cp	r1, r22
    15a0:	17 06       	cpc	r1, r23
    15a2:	e8 07       	cpc	r30, r24
    15a4:	f9 07       	cpc	r31, r25
    15a6:	c0 f0       	brcs	.+48     	; 0x15d8 <__fp_cmp+0x46>
    15a8:	12 16       	cp	r1, r18
    15aa:	13 06       	cpc	r1, r19
    15ac:	e4 07       	cpc	r30, r20
    15ae:	f5 07       	cpc	r31, r21
    15b0:	98 f0       	brcs	.+38     	; 0x15d8 <__fp_cmp+0x46>
    15b2:	62 1b       	sub	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	95 0b       	sbc	r25, r21
    15ba:	39 f4       	brne	.+14     	; 0x15ca <__fp_cmp+0x38>
    15bc:	0a 26       	eor	r0, r26
    15be:	61 f0       	breq	.+24     	; 0x15d8 <__fp_cmp+0x46>
    15c0:	23 2b       	or	r18, r19
    15c2:	24 2b       	or	r18, r20
    15c4:	25 2b       	or	r18, r21
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <__fp_cmp+0x3e>
    15c8:	08 95       	ret
    15ca:	0a 26       	eor	r0, r26
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__fp_cmp+0x3e>
    15ce:	a1 40       	sbci	r26, 0x01	; 1
    15d0:	a6 95       	lsr	r26
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	81 1d       	adc	r24, r1
    15d6:	81 1d       	adc	r24, r1
    15d8:	08 95       	ret

000015da <__fp_inf>:
    15da:	97 f9       	bld	r25, 7
    15dc:	9f 67       	ori	r25, 0x7F	; 127
    15de:	80 e8       	ldi	r24, 0x80	; 128
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	08 95       	ret

000015e6 <__fp_nan>:
    15e6:	9f ef       	ldi	r25, 0xFF	; 255
    15e8:	80 ec       	ldi	r24, 0xC0	; 192
    15ea:	08 95       	ret

000015ec <__fp_pscA>:
    15ec:	00 24       	eor	r0, r0
    15ee:	0a 94       	dec	r0
    15f0:	16 16       	cp	r1, r22
    15f2:	17 06       	cpc	r1, r23
    15f4:	18 06       	cpc	r1, r24
    15f6:	09 06       	cpc	r0, r25
    15f8:	08 95       	ret

000015fa <__fp_pscB>:
    15fa:	00 24       	eor	r0, r0
    15fc:	0a 94       	dec	r0
    15fe:	12 16       	cp	r1, r18
    1600:	13 06       	cpc	r1, r19
    1602:	14 06       	cpc	r1, r20
    1604:	05 06       	cpc	r0, r21
    1606:	08 95       	ret

00001608 <__fp_round>:
    1608:	09 2e       	mov	r0, r25
    160a:	03 94       	inc	r0
    160c:	00 0c       	add	r0, r0
    160e:	11 f4       	brne	.+4      	; 0x1614 <__fp_round+0xc>
    1610:	88 23       	and	r24, r24
    1612:	52 f0       	brmi	.+20     	; 0x1628 <__fp_round+0x20>
    1614:	bb 0f       	add	r27, r27
    1616:	40 f4       	brcc	.+16     	; 0x1628 <__fp_round+0x20>
    1618:	bf 2b       	or	r27, r31
    161a:	11 f4       	brne	.+4      	; 0x1620 <__fp_round+0x18>
    161c:	60 ff       	sbrs	r22, 0
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <__fp_round+0x20>
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <__fp_split3>:
    162a:	57 fd       	sbrc	r21, 7
    162c:	90 58       	subi	r25, 0x80	; 128
    162e:	44 0f       	add	r20, r20
    1630:	55 1f       	adc	r21, r21
    1632:	59 f0       	breq	.+22     	; 0x164a <__fp_splitA+0x10>
    1634:	5f 3f       	cpi	r21, 0xFF	; 255
    1636:	71 f0       	breq	.+28     	; 0x1654 <__fp_splitA+0x1a>
    1638:	47 95       	ror	r20

0000163a <__fp_splitA>:
    163a:	88 0f       	add	r24, r24
    163c:	97 fb       	bst	r25, 7
    163e:	99 1f       	adc	r25, r25
    1640:	61 f0       	breq	.+24     	; 0x165a <__fp_splitA+0x20>
    1642:	9f 3f       	cpi	r25, 0xFF	; 255
    1644:	79 f0       	breq	.+30     	; 0x1664 <__fp_splitA+0x2a>
    1646:	87 95       	ror	r24
    1648:	08 95       	ret
    164a:	12 16       	cp	r1, r18
    164c:	13 06       	cpc	r1, r19
    164e:	14 06       	cpc	r1, r20
    1650:	55 1f       	adc	r21, r21
    1652:	f2 cf       	rjmp	.-28     	; 0x1638 <__fp_split3+0xe>
    1654:	46 95       	lsr	r20
    1656:	f1 df       	rcall	.-30     	; 0x163a <__fp_splitA>
    1658:	08 c0       	rjmp	.+16     	; 0x166a <__fp_splitA+0x30>
    165a:	16 16       	cp	r1, r22
    165c:	17 06       	cpc	r1, r23
    165e:	18 06       	cpc	r1, r24
    1660:	99 1f       	adc	r25, r25
    1662:	f1 cf       	rjmp	.-30     	; 0x1646 <__fp_splitA+0xc>
    1664:	86 95       	lsr	r24
    1666:	71 05       	cpc	r23, r1
    1668:	61 05       	cpc	r22, r1
    166a:	08 94       	sec
    166c:	08 95       	ret

0000166e <__fp_zero>:
    166e:	e8 94       	clt

00001670 <__fp_szero>:
    1670:	bb 27       	eor	r27, r27
    1672:	66 27       	eor	r22, r22
    1674:	77 27       	eor	r23, r23
    1676:	cb 01       	movw	r24, r22
    1678:	97 f9       	bld	r25, 7
    167a:	08 95       	ret

0000167c <__gesf2>:
    167c:	8a df       	rcall	.-236    	; 0x1592 <__fp_cmp>
    167e:	08 f4       	brcc	.+2      	; 0x1682 <__gesf2+0x6>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	08 95       	ret

00001684 <__mulsf3>:
    1684:	0b d0       	rcall	.+22     	; 0x169c <__mulsf3x>
    1686:	c0 cf       	rjmp	.-128    	; 0x1608 <__fp_round>
    1688:	b1 df       	rcall	.-158    	; 0x15ec <__fp_pscA>
    168a:	28 f0       	brcs	.+10     	; 0x1696 <__mulsf3+0x12>
    168c:	b6 df       	rcall	.-148    	; 0x15fa <__fp_pscB>
    168e:	18 f0       	brcs	.+6      	; 0x1696 <__mulsf3+0x12>
    1690:	95 23       	and	r25, r21
    1692:	09 f0       	breq	.+2      	; 0x1696 <__mulsf3+0x12>
    1694:	a2 cf       	rjmp	.-188    	; 0x15da <__fp_inf>
    1696:	a7 cf       	rjmp	.-178    	; 0x15e6 <__fp_nan>
    1698:	11 24       	eor	r1, r1
    169a:	ea cf       	rjmp	.-44     	; 0x1670 <__fp_szero>

0000169c <__mulsf3x>:
    169c:	c6 df       	rcall	.-116    	; 0x162a <__fp_split3>
    169e:	a0 f3       	brcs	.-24     	; 0x1688 <__mulsf3+0x4>

000016a0 <__mulsf3_pse>:
    16a0:	95 9f       	mul	r25, r21
    16a2:	d1 f3       	breq	.-12     	; 0x1698 <__mulsf3+0x14>
    16a4:	95 0f       	add	r25, r21
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	55 1f       	adc	r21, r21
    16aa:	62 9f       	mul	r22, r18
    16ac:	f0 01       	movw	r30, r0
    16ae:	72 9f       	mul	r23, r18
    16b0:	bb 27       	eor	r27, r27
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	63 9f       	mul	r22, r19
    16b8:	aa 27       	eor	r26, r26
    16ba:	f0 0d       	add	r31, r0
    16bc:	b1 1d       	adc	r27, r1
    16be:	aa 1f       	adc	r26, r26
    16c0:	64 9f       	mul	r22, r20
    16c2:	66 27       	eor	r22, r22
    16c4:	b0 0d       	add	r27, r0
    16c6:	a1 1d       	adc	r26, r1
    16c8:	66 1f       	adc	r22, r22
    16ca:	82 9f       	mul	r24, r18
    16cc:	22 27       	eor	r18, r18
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	73 9f       	mul	r23, r19
    16d6:	b0 0d       	add	r27, r0
    16d8:	a1 1d       	adc	r26, r1
    16da:	62 1f       	adc	r22, r18
    16dc:	83 9f       	mul	r24, r19
    16de:	a0 0d       	add	r26, r0
    16e0:	61 1d       	adc	r22, r1
    16e2:	22 1f       	adc	r18, r18
    16e4:	74 9f       	mul	r23, r20
    16e6:	33 27       	eor	r19, r19
    16e8:	a0 0d       	add	r26, r0
    16ea:	61 1d       	adc	r22, r1
    16ec:	23 1f       	adc	r18, r19
    16ee:	84 9f       	mul	r24, r20
    16f0:	60 0d       	add	r22, r0
    16f2:	21 1d       	adc	r18, r1
    16f4:	82 2f       	mov	r24, r18
    16f6:	76 2f       	mov	r23, r22
    16f8:	6a 2f       	mov	r22, r26
    16fa:	11 24       	eor	r1, r1
    16fc:	9f 57       	subi	r25, 0x7F	; 127
    16fe:	50 40       	sbci	r21, 0x00	; 0
    1700:	8a f0       	brmi	.+34     	; 0x1724 <__mulsf3_pse+0x84>
    1702:	e1 f0       	breq	.+56     	; 0x173c <__mulsf3_pse+0x9c>
    1704:	88 23       	and	r24, r24
    1706:	4a f0       	brmi	.+18     	; 0x171a <__mulsf3_pse+0x7a>
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	bb 1f       	adc	r27, r27
    170e:	66 1f       	adc	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	a9 f7       	brne	.-22     	; 0x1704 <__mulsf3_pse+0x64>
    171a:	9e 3f       	cpi	r25, 0xFE	; 254
    171c:	51 05       	cpc	r21, r1
    171e:	70 f0       	brcs	.+28     	; 0x173c <__mulsf3_pse+0x9c>
    1720:	5c cf       	rjmp	.-328    	; 0x15da <__fp_inf>
    1722:	a6 cf       	rjmp	.-180    	; 0x1670 <__fp_szero>
    1724:	5f 3f       	cpi	r21, 0xFF	; 255
    1726:	ec f3       	brlt	.-6      	; 0x1722 <__mulsf3_pse+0x82>
    1728:	98 3e       	cpi	r25, 0xE8	; 232
    172a:	dc f3       	brlt	.-10     	; 0x1722 <__mulsf3_pse+0x82>
    172c:	86 95       	lsr	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	b7 95       	ror	r27
    1734:	f7 95       	ror	r31
    1736:	e7 95       	ror	r30
    1738:	9f 5f       	subi	r25, 0xFF	; 255
    173a:	c1 f7       	brne	.-16     	; 0x172c <__mulsf3_pse+0x8c>
    173c:	fe 2b       	or	r31, r30
    173e:	88 0f       	add	r24, r24
    1740:	91 1d       	adc	r25, r1
    1742:	96 95       	lsr	r25
    1744:	87 95       	ror	r24
    1746:	97 f9       	bld	r25, 7
    1748:	08 95       	ret

0000174a <vfprintf>:
    174a:	a5 e1       	ldi	r26, 0x15	; 21
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb ea       	ldi	r30, 0xAB	; 171
    1750:	fb e0       	ldi	r31, 0x0B	; 11
    1752:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__prologue_saves__>
    1756:	4c 01       	movw	r8, r24
    1758:	7f 87       	std	Y+15, r23	; 0x0f
    175a:	6e 87       	std	Y+14, r22	; 0x0e
    175c:	fc 01       	movw	r30, r24
    175e:	17 82       	std	Z+7, r1	; 0x07
    1760:	16 82       	std	Z+6, r1	; 0x06
    1762:	83 81       	ldd	r24, Z+3	; 0x03
    1764:	81 fd       	sbrc	r24, 1
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <vfprintf+0x26>
    1768:	76 c3       	rjmp	.+1772   	; 0x1e56 <vfprintf+0x70c>
    176a:	4c 85       	ldd	r20, Y+12	; 0x0c
    176c:	5d 85       	ldd	r21, Y+13	; 0x0d
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <vfprintf+0x2e>
    1770:	1e 01       	movw	r2, r28
    1772:	08 94       	sec
    1774:	21 1c       	adc	r2, r1
    1776:	31 1c       	adc	r3, r1
    1778:	f4 01       	movw	r30, r8
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	ee 85       	ldd	r30, Y+14	; 0x0e
    177e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1780:	93 fd       	sbrc	r25, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	93 ff       	sbrs	r25, 3
    1786:	81 91       	ld	r24, Z+
    1788:	ff 87       	std	Y+15, r31	; 0x0f
    178a:	ee 87       	std	Y+14, r30	; 0x0e
    178c:	88 23       	and	r24, r24
    178e:	09 f4       	brne	.+2      	; 0x1792 <vfprintf+0x48>
    1790:	5e c3       	rjmp	.+1724   	; 0x1e4e <vfprintf+0x704>
    1792:	85 32       	cpi	r24, 0x25	; 37
    1794:	41 f4       	brne	.+16     	; 0x17a6 <vfprintf+0x5c>
    1796:	93 fd       	sbrc	r25, 3
    1798:	85 91       	lpm	r24, Z+
    179a:	93 ff       	sbrs	r25, 3
    179c:	81 91       	ld	r24, Z+
    179e:	ff 87       	std	Y+15, r31	; 0x0f
    17a0:	ee 87       	std	Y+14, r30	; 0x0e
    17a2:	85 32       	cpi	r24, 0x25	; 37
    17a4:	59 f4       	brne	.+22     	; 0x17bc <vfprintf+0x72>
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	b4 01       	movw	r22, r8
    17aa:	4c 8b       	std	Y+20, r20	; 0x14
    17ac:	5d 8b       	std	Y+21, r21	; 0x15
    17ae:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    17b2:	4c 89       	ldd	r20, Y+20	; 0x14
    17b4:	5d 89       	ldd	r21, Y+21	; 0x15
    17b6:	5d 87       	std	Y+13, r21	; 0x0d
    17b8:	4c 87       	std	Y+12, r20	; 0x0c
    17ba:	d7 cf       	rjmp	.-82     	; 0x176a <vfprintf+0x20>
    17bc:	ff 24       	eor	r15, r15
    17be:	dd 24       	eor	r13, r13
    17c0:	10 e0       	ldi	r17, 0x00	; 0
    17c2:	10 32       	cpi	r17, 0x20	; 32
    17c4:	b0 f4       	brcc	.+44     	; 0x17f2 <vfprintf+0xa8>
    17c6:	8b 32       	cpi	r24, 0x2B	; 43
    17c8:	69 f0       	breq	.+26     	; 0x17e4 <vfprintf+0x9a>
    17ca:	8c 32       	cpi	r24, 0x2C	; 44
    17cc:	28 f4       	brcc	.+10     	; 0x17d8 <vfprintf+0x8e>
    17ce:	80 32       	cpi	r24, 0x20	; 32
    17d0:	51 f0       	breq	.+20     	; 0x17e6 <vfprintf+0x9c>
    17d2:	83 32       	cpi	r24, 0x23	; 35
    17d4:	71 f4       	brne	.+28     	; 0x17f2 <vfprintf+0xa8>
    17d6:	0b c0       	rjmp	.+22     	; 0x17ee <vfprintf+0xa4>
    17d8:	8d 32       	cpi	r24, 0x2D	; 45
    17da:	39 f0       	breq	.+14     	; 0x17ea <vfprintf+0xa0>
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	49 f4       	brne	.+18     	; 0x17f2 <vfprintf+0xa8>
    17e0:	11 60       	ori	r17, 0x01	; 1
    17e2:	2c c0       	rjmp	.+88     	; 0x183c <vfprintf+0xf2>
    17e4:	12 60       	ori	r17, 0x02	; 2
    17e6:	14 60       	ori	r17, 0x04	; 4
    17e8:	29 c0       	rjmp	.+82     	; 0x183c <vfprintf+0xf2>
    17ea:	18 60       	ori	r17, 0x08	; 8
    17ec:	27 c0       	rjmp	.+78     	; 0x183c <vfprintf+0xf2>
    17ee:	10 61       	ori	r17, 0x10	; 16
    17f0:	25 c0       	rjmp	.+74     	; 0x183c <vfprintf+0xf2>
    17f2:	17 fd       	sbrc	r17, 7
    17f4:	2e c0       	rjmp	.+92     	; 0x1852 <vfprintf+0x108>
    17f6:	28 2f       	mov	r18, r24
    17f8:	20 53       	subi	r18, 0x30	; 48
    17fa:	2a 30       	cpi	r18, 0x0A	; 10
    17fc:	98 f4       	brcc	.+38     	; 0x1824 <vfprintf+0xda>
    17fe:	16 ff       	sbrs	r17, 6
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <vfprintf+0xc8>
    1802:	8f 2d       	mov	r24, r15
    1804:	88 0f       	add	r24, r24
    1806:	f8 2e       	mov	r15, r24
    1808:	ff 0c       	add	r15, r15
    180a:	ff 0c       	add	r15, r15
    180c:	f8 0e       	add	r15, r24
    180e:	f2 0e       	add	r15, r18
    1810:	15 c0       	rjmp	.+42     	; 0x183c <vfprintf+0xf2>
    1812:	8d 2d       	mov	r24, r13
    1814:	88 0f       	add	r24, r24
    1816:	d8 2e       	mov	r13, r24
    1818:	dd 0c       	add	r13, r13
    181a:	dd 0c       	add	r13, r13
    181c:	d8 0e       	add	r13, r24
    181e:	d2 0e       	add	r13, r18
    1820:	10 62       	ori	r17, 0x20	; 32
    1822:	0c c0       	rjmp	.+24     	; 0x183c <vfprintf+0xf2>
    1824:	8e 32       	cpi	r24, 0x2E	; 46
    1826:	21 f4       	brne	.+8      	; 0x1830 <vfprintf+0xe6>
    1828:	16 fd       	sbrc	r17, 6
    182a:	11 c3       	rjmp	.+1570   	; 0x1e4e <vfprintf+0x704>
    182c:	10 64       	ori	r17, 0x40	; 64
    182e:	06 c0       	rjmp	.+12     	; 0x183c <vfprintf+0xf2>
    1830:	8c 36       	cpi	r24, 0x6C	; 108
    1832:	11 f4       	brne	.+4      	; 0x1838 <vfprintf+0xee>
    1834:	10 68       	ori	r17, 0x80	; 128
    1836:	02 c0       	rjmp	.+4      	; 0x183c <vfprintf+0xf2>
    1838:	88 36       	cpi	r24, 0x68	; 104
    183a:	59 f4       	brne	.+22     	; 0x1852 <vfprintf+0x108>
    183c:	ee 85       	ldd	r30, Y+14	; 0x0e
    183e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1840:	93 fd       	sbrc	r25, 3
    1842:	85 91       	lpm	r24, Z+
    1844:	93 ff       	sbrs	r25, 3
    1846:	81 91       	ld	r24, Z+
    1848:	ff 87       	std	Y+15, r31	; 0x0f
    184a:	ee 87       	std	Y+14, r30	; 0x0e
    184c:	88 23       	and	r24, r24
    184e:	09 f0       	breq	.+2      	; 0x1852 <vfprintf+0x108>
    1850:	b8 cf       	rjmp	.-144    	; 0x17c2 <vfprintf+0x78>
    1852:	98 2f       	mov	r25, r24
    1854:	95 54       	subi	r25, 0x45	; 69
    1856:	93 30       	cpi	r25, 0x03	; 3
    1858:	18 f4       	brcc	.+6      	; 0x1860 <vfprintf+0x116>
    185a:	10 61       	ori	r17, 0x10	; 16
    185c:	80 5e       	subi	r24, 0xE0	; 224
    185e:	06 c0       	rjmp	.+12     	; 0x186c <vfprintf+0x122>
    1860:	98 2f       	mov	r25, r24
    1862:	95 56       	subi	r25, 0x65	; 101
    1864:	93 30       	cpi	r25, 0x03	; 3
    1866:	08 f0       	brcs	.+2      	; 0x186a <vfprintf+0x120>
    1868:	a2 c1       	rjmp	.+836    	; 0x1bae <vfprintf+0x464>
    186a:	1f 7e       	andi	r17, 0xEF	; 239
    186c:	16 fd       	sbrc	r17, 6
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <vfprintf+0x12a>
    1870:	e6 e0       	ldi	r30, 0x06	; 6
    1872:	fe 2e       	mov	r15, r30
    1874:	1f 73       	andi	r17, 0x3F	; 63
    1876:	85 36       	cpi	r24, 0x65	; 101
    1878:	11 f4       	brne	.+4      	; 0x187e <vfprintf+0x134>
    187a:	10 64       	ori	r17, 0x40	; 64
    187c:	06 c0       	rjmp	.+12     	; 0x188a <vfprintf+0x140>
    187e:	86 36       	cpi	r24, 0x66	; 102
    1880:	11 f4       	brne	.+4      	; 0x1886 <vfprintf+0x13c>
    1882:	10 68       	ori	r17, 0x80	; 128
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x140>
    1886:	f1 10       	cpse	r15, r1
    1888:	fa 94       	dec	r15
    188a:	17 ff       	sbrs	r17, 7
    188c:	07 c0       	rjmp	.+14     	; 0x189c <vfprintf+0x152>
    188e:	fb e3       	ldi	r31, 0x3B	; 59
    1890:	ff 15       	cp	r31, r15
    1892:	48 f0       	brcs	.+18     	; 0x18a6 <vfprintf+0x15c>
    1894:	ef 2c       	mov	r14, r15
    1896:	e3 94       	inc	r14
    1898:	27 e0       	ldi	r18, 0x07	; 7
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <vfprintf+0x16c>
    189c:	27 e0       	ldi	r18, 0x07	; 7
    189e:	2f 15       	cp	r18, r15
    18a0:	30 f0       	brcs	.+12     	; 0x18ae <vfprintf+0x164>
    18a2:	2f 2d       	mov	r18, r15
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <vfprintf+0x16a>
    18a6:	27 e0       	ldi	r18, 0x07	; 7
    18a8:	7c e3       	ldi	r23, 0x3C	; 60
    18aa:	e7 2e       	mov	r14, r23
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <vfprintf+0x16c>
    18ae:	27 e0       	ldi	r18, 0x07	; 7
    18b0:	67 e0       	ldi	r22, 0x07	; 7
    18b2:	f6 2e       	mov	r15, r22
    18b4:	ee 24       	eor	r14, r14
    18b6:	ca 01       	movw	r24, r20
    18b8:	04 96       	adiw	r24, 0x04	; 4
    18ba:	9d 87       	std	Y+13, r25	; 0x0d
    18bc:	8c 87       	std	Y+12, r24	; 0x0c
    18be:	fa 01       	movw	r30, r20
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	a1 01       	movw	r20, r2
    18ca:	0e 2d       	mov	r16, r14
    18cc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__ftoa_engine>
    18d0:	5c 01       	movw	r10, r24
    18d2:	c9 80       	ldd	r12, Y+1	; 0x01
    18d4:	2c 2d       	mov	r18, r12
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	39 8b       	std	Y+17, r19	; 0x11
    18da:	28 8b       	std	Y+16, r18	; 0x10
    18dc:	c0 fe       	sbrs	r12, 0
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <vfprintf+0x19c>
    18e0:	38 89       	ldd	r19, Y+16	; 0x10
    18e2:	33 ff       	sbrs	r19, 3
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <vfprintf+0x1a8>
    18e6:	11 fd       	sbrc	r17, 1
    18e8:	06 c0       	rjmp	.+12     	; 0x18f6 <vfprintf+0x1ac>
    18ea:	12 ff       	sbrs	r17, 2
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <vfprintf+0x1b0>
    18ee:	00 e2       	ldi	r16, 0x20	; 32
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <vfprintf+0x1b2>
    18f2:	0d e2       	ldi	r16, 0x2D	; 45
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <vfprintf+0x1b2>
    18f6:	0b e2       	ldi	r16, 0x2B	; 43
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <vfprintf+0x1b2>
    18fa:	00 e0       	ldi	r16, 0x00	; 0
    18fc:	88 89       	ldd	r24, Y+16	; 0x10
    18fe:	99 89       	ldd	r25, Y+17	; 0x11
    1900:	8c 70       	andi	r24, 0x0C	; 12
    1902:	90 70       	andi	r25, 0x00	; 0
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	09 f4       	brne	.+2      	; 0x190a <vfprintf+0x1c0>
    1908:	3c c0       	rjmp	.+120    	; 0x1982 <vfprintf+0x238>
    190a:	00 23       	and	r16, r16
    190c:	11 f0       	breq	.+4      	; 0x1912 <vfprintf+0x1c8>
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <vfprintf+0x1ca>
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	8d 15       	cp	r24, r13
    1916:	58 f4       	brcc	.+22     	; 0x192e <vfprintf+0x1e4>
    1918:	d8 1a       	sub	r13, r24
    191a:	13 fd       	sbrc	r17, 3
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <vfprintf+0x1e6>
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	b4 01       	movw	r22, r8
    1924:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1928:	da 94       	dec	r13
    192a:	c9 f7       	brne	.-14     	; 0x191e <vfprintf+0x1d4>
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x1e6>
    192e:	dd 24       	eor	r13, r13
    1930:	00 23       	and	r16, r16
    1932:	29 f0       	breq	.+10     	; 0x193e <vfprintf+0x1f4>
    1934:	80 2f       	mov	r24, r16
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	b4 01       	movw	r22, r8
    193a:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    193e:	88 89       	ldd	r24, Y+16	; 0x10
    1940:	83 fd       	sbrc	r24, 3
    1942:	05 c0       	rjmp	.+10     	; 0x194e <vfprintf+0x204>
    1944:	3c e6       	ldi	r19, 0x6C	; 108
    1946:	e3 2e       	mov	r14, r19
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	f3 2e       	mov	r15, r19
    194c:	11 c0       	rjmp	.+34     	; 0x1970 <vfprintf+0x226>
    194e:	28 e6       	ldi	r18, 0x68	; 104
    1950:	e2 2e       	mov	r14, r18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	f2 2e       	mov	r15, r18
    1956:	0c c0       	rjmp	.+24     	; 0x1970 <vfprintf+0x226>
    1958:	01 15       	cp	r16, r1
    195a:	11 05       	cpc	r17, r1
    195c:	09 f0       	breq	.+2      	; 0x1960 <vfprintf+0x216>
    195e:	80 52       	subi	r24, 0x20	; 32
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	b4 01       	movw	r22, r8
    1964:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1968:	08 94       	sec
    196a:	e1 1c       	adc	r14, r1
    196c:	f1 1c       	adc	r15, r1
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <vfprintf+0x22e>
    1970:	01 2f       	mov	r16, r17
    1972:	10 e0       	ldi	r17, 0x00	; 0
    1974:	00 71       	andi	r16, 0x10	; 16
    1976:	10 70       	andi	r17, 0x00	; 0
    1978:	f7 01       	movw	r30, r14
    197a:	84 91       	lpm	r24, Z
    197c:	88 23       	and	r24, r24
    197e:	61 f7       	brne	.-40     	; 0x1958 <vfprintf+0x20e>
    1980:	63 c2       	rjmp	.+1222   	; 0x1e48 <vfprintf+0x6fe>
    1982:	17 ff       	sbrs	r17, 7
    1984:	0e c0       	rjmp	.+28     	; 0x19a2 <vfprintf+0x258>
    1986:	ea 0c       	add	r14, r10
    1988:	f8 89       	ldd	r31, Y+16	; 0x10
    198a:	f4 ff       	sbrs	r31, 4
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <vfprintf+0x24c>
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	81 33       	cpi	r24, 0x31	; 49
    1992:	09 f4       	brne	.+2      	; 0x1996 <vfprintf+0x24c>
    1994:	ea 94       	dec	r14
    1996:	1e 14       	cp	r1, r14
    1998:	4c f5       	brge	.+82     	; 0x19ec <vfprintf+0x2a2>
    199a:	28 e0       	ldi	r18, 0x08	; 8
    199c:	2e 15       	cp	r18, r14
    199e:	48 f1       	brcs	.+82     	; 0x19f2 <vfprintf+0x2a8>
    19a0:	2c c0       	rjmp	.+88     	; 0x19fa <vfprintf+0x2b0>
    19a2:	16 fd       	sbrc	r17, 6
    19a4:	2a c0       	rjmp	.+84     	; 0x19fa <vfprintf+0x2b0>
    19a6:	8f 2d       	mov	r24, r15
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	8a 15       	cp	r24, r10
    19ac:	9b 05       	cpc	r25, r11
    19ae:	44 f0       	brlt	.+16     	; 0x19c0 <vfprintf+0x276>
    19b0:	3c ef       	ldi	r19, 0xFC	; 252
    19b2:	a3 16       	cp	r10, r19
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	b3 06       	cpc	r11, r19
    19b8:	1c f0       	brlt	.+6      	; 0x19c0 <vfprintf+0x276>
    19ba:	10 68       	ori	r17, 0x80	; 128
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <vfprintf+0x276>
    19be:	fa 94       	dec	r15
    19c0:	ff 20       	and	r15, r15
    19c2:	49 f0       	breq	.+18     	; 0x19d6 <vfprintf+0x28c>
    19c4:	e2 e0       	ldi	r30, 0x02	; 2
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	ec 0f       	add	r30, r28
    19ca:	fd 1f       	adc	r31, r29
    19cc:	ef 0d       	add	r30, r15
    19ce:	f1 1d       	adc	r31, r1
    19d0:	80 81       	ld	r24, Z
    19d2:	80 33       	cpi	r24, 0x30	; 48
    19d4:	a1 f3       	breq	.-24     	; 0x19be <vfprintf+0x274>
    19d6:	17 ff       	sbrs	r17, 7
    19d8:	10 c0       	rjmp	.+32     	; 0x19fa <vfprintf+0x2b0>
    19da:	ef 2c       	mov	r14, r15
    19dc:	e3 94       	inc	r14
    19de:	8f 2d       	mov	r24, r15
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a8 16       	cp	r10, r24
    19e4:	b9 06       	cpc	r11, r25
    19e6:	44 f4       	brge	.+16     	; 0x19f8 <vfprintf+0x2ae>
    19e8:	fa 18       	sub	r15, r10
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <vfprintf+0x2b0>
    19ec:	ee 24       	eor	r14, r14
    19ee:	e3 94       	inc	r14
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <vfprintf+0x2b0>
    19f2:	98 e0       	ldi	r25, 0x08	; 8
    19f4:	e9 2e       	mov	r14, r25
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <vfprintf+0x2b0>
    19f8:	ff 24       	eor	r15, r15
    19fa:	17 ff       	sbrs	r17, 7
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <vfprintf+0x2c2>
    19fe:	1a 14       	cp	r1, r10
    1a00:	1b 04       	cpc	r1, r11
    1a02:	3c f4       	brge	.+14     	; 0x1a12 <vfprintf+0x2c8>
    1a04:	95 01       	movw	r18, r10
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <vfprintf+0x2cc>
    1a0c:	25 e0       	ldi	r18, 0x05	; 5
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0x2cc>
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	00 23       	and	r16, r16
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <vfprintf+0x2d4>
    1a1a:	2f 5f       	subi	r18, 0xFF	; 255
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	ff 20       	and	r15, r15
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <vfprintf+0x2e2>
    1a22:	8f 2d       	mov	r24, r15
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	28 0f       	add	r18, r24
    1a2a:	39 1f       	adc	r19, r25
    1a2c:	8d 2d       	mov	r24, r13
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	28 17       	cp	r18, r24
    1a32:	39 07       	cpc	r19, r25
    1a34:	14 f4       	brge	.+4      	; 0x1a3a <vfprintf+0x2f0>
    1a36:	d2 1a       	sub	r13, r18
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <vfprintf+0x2f2>
    1a3a:	dd 24       	eor	r13, r13
    1a3c:	61 2e       	mov	r6, r17
    1a3e:	77 24       	eor	r7, r7
    1a40:	c3 01       	movw	r24, r6
    1a42:	89 70       	andi	r24, 0x09	; 9
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	49 f4       	brne	.+18     	; 0x1a5c <vfprintf+0x312>
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <vfprintf+0x30e>
    1a4c:	80 e2       	ldi	r24, 0x20	; 32
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	b4 01       	movw	r22, r8
    1a52:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1a56:	da 94       	dec	r13
    1a58:	dd 20       	and	r13, r13
    1a5a:	c1 f7       	brne	.-16     	; 0x1a4c <vfprintf+0x302>
    1a5c:	00 23       	and	r16, r16
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <vfprintf+0x320>
    1a60:	80 2f       	mov	r24, r16
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	b4 01       	movw	r22, r8
    1a66:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1a6a:	63 fc       	sbrc	r6, 3
    1a6c:	09 c0       	rjmp	.+18     	; 0x1a80 <vfprintf+0x336>
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <vfprintf+0x332>
    1a70:	80 e3       	ldi	r24, 0x30	; 48
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	b4 01       	movw	r22, r8
    1a76:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1a7a:	da 94       	dec	r13
    1a7c:	dd 20       	and	r13, r13
    1a7e:	c1 f7       	brne	.-16     	; 0x1a70 <vfprintf+0x326>
    1a80:	17 ff       	sbrs	r17, 7
    1a82:	48 c0       	rjmp	.+144    	; 0x1b14 <vfprintf+0x3ca>
    1a84:	85 01       	movw	r16, r10
    1a86:	b7 fe       	sbrs	r11, 7
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x344>
    1a8a:	00 e0       	ldi	r16, 0x00	; 0
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	66 24       	eor	r6, r6
    1a90:	77 24       	eor	r7, r7
    1a92:	95 01       	movw	r18, r10
    1a94:	2e 19       	sub	r18, r14
    1a96:	31 09       	sbc	r19, r1
    1a98:	3b 8b       	std	Y+19, r19	; 0x13
    1a9a:	2a 8b       	std	Y+18, r18	; 0x12
    1a9c:	25 01       	movw	r4, r10
    1a9e:	40 1a       	sub	r4, r16
    1aa0:	51 0a       	sbc	r5, r17
    1aa2:	42 0c       	add	r4, r2
    1aa4:	53 1c       	adc	r5, r3
    1aa6:	6f 2d       	mov	r22, r15
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	ee 24       	eor	r14, r14
    1aac:	ff 24       	eor	r15, r15
    1aae:	e6 1a       	sub	r14, r22
    1ab0:	f7 0a       	sbc	r15, r23
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	0f 3f       	cpi	r16, 0xFF	; 255
    1ab6:	13 07       	cpc	r17, r19
    1ab8:	29 f4       	brne	.+10     	; 0x1ac4 <vfprintf+0x37a>
    1aba:	8e e2       	ldi	r24, 0x2E	; 46
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	b4 01       	movw	r22, r8
    1ac0:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1ac4:	a0 16       	cp	r10, r16
    1ac6:	b1 06       	cpc	r11, r17
    1ac8:	54 f0       	brlt	.+20     	; 0x1ade <vfprintf+0x394>
    1aca:	2a 89       	ldd	r18, Y+18	; 0x12
    1acc:	3b 89       	ldd	r19, Y+19	; 0x13
    1ace:	20 17       	cp	r18, r16
    1ad0:	31 07       	cpc	r19, r17
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <vfprintf+0x394>
    1ad4:	f2 01       	movw	r30, r4
    1ad6:	e6 0d       	add	r30, r6
    1ad8:	f7 1d       	adc	r31, r7
    1ada:	81 81       	ldd	r24, Z+1	; 0x01
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <vfprintf+0x396>
    1ade:	80 e3       	ldi	r24, 0x30	; 48
    1ae0:	01 50       	subi	r16, 0x01	; 1
    1ae2:	10 40       	sbci	r17, 0x00	; 0
    1ae4:	08 94       	sec
    1ae6:	61 1c       	adc	r6, r1
    1ae8:	71 1c       	adc	r7, r1
    1aea:	0e 15       	cp	r16, r14
    1aec:	1f 05       	cpc	r17, r15
    1aee:	2c f0       	brlt	.+10     	; 0x1afa <vfprintf+0x3b0>
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	b4 01       	movw	r22, r8
    1af4:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1af8:	dc cf       	rjmp	.-72     	; 0x1ab2 <vfprintf+0x368>
    1afa:	0a 15       	cp	r16, r10
    1afc:	1b 05       	cpc	r17, r11
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <vfprintf+0x3c6>
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	96 33       	cpi	r25, 0x36	; 54
    1b04:	20 f4       	brcc	.+8      	; 0x1b0e <vfprintf+0x3c4>
    1b06:	95 33       	cpi	r25, 0x35	; 53
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <vfprintf+0x3c6>
    1b0a:	38 89       	ldd	r19, Y+16	; 0x10
    1b0c:	34 ff       	sbrs	r19, 4
    1b0e:	81 e3       	ldi	r24, 0x31	; 49
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	49 c0       	rjmp	.+146    	; 0x1ba6 <vfprintf+0x45c>
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	81 33       	cpi	r24, 0x31	; 49
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <vfprintf+0x3d4>
    1b1a:	9f ee       	ldi	r25, 0xEF	; 239
    1b1c:	c9 22       	and	r12, r25
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b4 01       	movw	r22, r8
    1b22:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1b26:	ff 20       	and	r15, r15
    1b28:	89 f0       	breq	.+34     	; 0x1b4c <vfprintf+0x402>
    1b2a:	8e e2       	ldi	r24, 0x2E	; 46
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	b4 01       	movw	r22, r8
    1b30:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1b34:	12 e0       	ldi	r17, 0x02	; 2
    1b36:	f1 01       	movw	r30, r2
    1b38:	e1 0f       	add	r30, r17
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	1f 5f       	subi	r17, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	b4 01       	movw	r22, r8
    1b44:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1b48:	fa 94       	dec	r15
    1b4a:	a9 f7       	brne	.-22     	; 0x1b36 <vfprintf+0x3ec>
    1b4c:	64 fe       	sbrs	r6, 4
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <vfprintf+0x40c>
    1b50:	85 e4       	ldi	r24, 0x45	; 69
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <vfprintf+0x410>
    1b56:	85 e6       	ldi	r24, 0x65	; 101
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	b4 01       	movw	r22, r8
    1b5c:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1b60:	b7 fc       	sbrc	r11, 7
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <vfprintf+0x424>
    1b64:	a1 14       	cp	r10, r1
    1b66:	b1 04       	cpc	r11, r1
    1b68:	41 f4       	brne	.+16     	; 0x1b7a <vfprintf+0x430>
    1b6a:	c4 fe       	sbrs	r12, 4
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <vfprintf+0x430>
    1b6e:	b0 94       	com	r11
    1b70:	a1 94       	neg	r10
    1b72:	b1 08       	sbc	r11, r1
    1b74:	b3 94       	inc	r11
    1b76:	8d e2       	ldi	r24, 0x2D	; 45
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <vfprintf+0x432>
    1b7a:	8b e2       	ldi	r24, 0x2B	; 43
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	b4 01       	movw	r22, r8
    1b80:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1b84:	80 e3       	ldi	r24, 0x30	; 48
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <vfprintf+0x448>
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	e6 ef       	ldi	r30, 0xF6	; 246
    1b8c:	ff ef       	ldi	r31, 0xFF	; 255
    1b8e:	ae 0e       	add	r10, r30
    1b90:	bf 1e       	adc	r11, r31
    1b92:	fa e0       	ldi	r31, 0x0A	; 10
    1b94:	af 16       	cp	r10, r31
    1b96:	b1 04       	cpc	r11, r1
    1b98:	bc f7       	brge	.-18     	; 0x1b88 <vfprintf+0x43e>
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	b4 01       	movw	r22, r8
    1b9e:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1ba2:	c5 01       	movw	r24, r10
    1ba4:	c0 96       	adiw	r24, 0x30	; 48
    1ba6:	b4 01       	movw	r22, r8
    1ba8:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1bac:	4d c1       	rjmp	.+666    	; 0x1e48 <vfprintf+0x6fe>
    1bae:	83 36       	cpi	r24, 0x63	; 99
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <vfprintf+0x474>
    1bb2:	83 37       	cpi	r24, 0x73	; 115
    1bb4:	89 f0       	breq	.+34     	; 0x1bd8 <vfprintf+0x48e>
    1bb6:	83 35       	cpi	r24, 0x53	; 83
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <vfprintf+0x472>
    1bba:	59 c0       	rjmp	.+178    	; 0x1c6e <vfprintf+0x524>
    1bbc:	22 c0       	rjmp	.+68     	; 0x1c02 <vfprintf+0x4b8>
    1bbe:	9a 01       	movw	r18, r20
    1bc0:	2e 5f       	subi	r18, 0xFE	; 254
    1bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc4:	3d 87       	std	Y+13, r19	; 0x0d
    1bc6:	2c 87       	std	Y+12, r18	; 0x0c
    1bc8:	fa 01       	movw	r30, r20
    1bca:	80 81       	ld	r24, Z
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	e8 2e       	mov	r14, r24
    1bd2:	f1 2c       	mov	r15, r1
    1bd4:	51 01       	movw	r10, r2
    1bd6:	13 c0       	rjmp	.+38     	; 0x1bfe <vfprintf+0x4b4>
    1bd8:	9a 01       	movw	r18, r20
    1bda:	2e 5f       	subi	r18, 0xFE	; 254
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	3d 87       	std	Y+13, r19	; 0x0d
    1be0:	2c 87       	std	Y+12, r18	; 0x0c
    1be2:	fa 01       	movw	r30, r20
    1be4:	a0 80       	ld	r10, Z
    1be6:	b1 80       	ldd	r11, Z+1	; 0x01
    1be8:	16 ff       	sbrs	r17, 6
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <vfprintf+0x4a8>
    1bec:	6f 2d       	mov	r22, r15
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vfprintf+0x4ac>
    1bf2:	6f ef       	ldi	r22, 0xFF	; 255
    1bf4:	7f ef       	ldi	r23, 0xFF	; 255
    1bf6:	c5 01       	movw	r24, r10
    1bf8:	0e 94 23 12 	call	0x2446	; 0x2446 <strnlen>
    1bfc:	7c 01       	movw	r14, r24
    1bfe:	1f 77       	andi	r17, 0x7F	; 127
    1c00:	14 c0       	rjmp	.+40     	; 0x1c2a <vfprintf+0x4e0>
    1c02:	9a 01       	movw	r18, r20
    1c04:	2e 5f       	subi	r18, 0xFE	; 254
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	3d 87       	std	Y+13, r19	; 0x0d
    1c0a:	2c 87       	std	Y+12, r18	; 0x0c
    1c0c:	fa 01       	movw	r30, r20
    1c0e:	a0 80       	ld	r10, Z
    1c10:	b1 80       	ldd	r11, Z+1	; 0x01
    1c12:	16 ff       	sbrs	r17, 6
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfprintf+0x4d2>
    1c16:	6f 2d       	mov	r22, r15
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <vfprintf+0x4d6>
    1c1c:	6f ef       	ldi	r22, 0xFF	; 255
    1c1e:	7f ef       	ldi	r23, 0xFF	; 255
    1c20:	c5 01       	movw	r24, r10
    1c22:	0e 94 f6 11 	call	0x23ec	; 0x23ec <strnlen_P>
    1c26:	7c 01       	movw	r14, r24
    1c28:	10 68       	ori	r17, 0x80	; 128
    1c2a:	13 fd       	sbrc	r17, 3
    1c2c:	1c c0       	rjmp	.+56     	; 0x1c66 <vfprintf+0x51c>
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <vfprintf+0x4f2>
    1c30:	80 e2       	ldi	r24, 0x20	; 32
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	b4 01       	movw	r22, r8
    1c36:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1c3a:	da 94       	dec	r13
    1c3c:	8d 2d       	mov	r24, r13
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	e8 16       	cp	r14, r24
    1c42:	f9 06       	cpc	r15, r25
    1c44:	a8 f3       	brcs	.-22     	; 0x1c30 <vfprintf+0x4e6>
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <vfprintf+0x51c>
    1c48:	f5 01       	movw	r30, r10
    1c4a:	17 fd       	sbrc	r17, 7
    1c4c:	85 91       	lpm	r24, Z+
    1c4e:	17 ff       	sbrs	r17, 7
    1c50:	81 91       	ld	r24, Z+
    1c52:	5f 01       	movw	r10, r30
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	b4 01       	movw	r22, r8
    1c58:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1c5c:	d1 10       	cpse	r13, r1
    1c5e:	da 94       	dec	r13
    1c60:	08 94       	sec
    1c62:	e1 08       	sbc	r14, r1
    1c64:	f1 08       	sbc	r15, r1
    1c66:	e1 14       	cp	r14, r1
    1c68:	f1 04       	cpc	r15, r1
    1c6a:	71 f7       	brne	.-36     	; 0x1c48 <vfprintf+0x4fe>
    1c6c:	ed c0       	rjmp	.+474    	; 0x1e48 <vfprintf+0x6fe>
    1c6e:	84 36       	cpi	r24, 0x64	; 100
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <vfprintf+0x52c>
    1c72:	89 36       	cpi	r24, 0x69	; 105
    1c74:	71 f5       	brne	.+92     	; 0x1cd2 <vfprintf+0x588>
    1c76:	9a 01       	movw	r18, r20
    1c78:	17 ff       	sbrs	r17, 7
    1c7a:	0a c0       	rjmp	.+20     	; 0x1c90 <vfprintf+0x546>
    1c7c:	2c 5f       	subi	r18, 0xFC	; 252
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	3d 87       	std	Y+13, r19	; 0x0d
    1c82:	2c 87       	std	Y+12, r18	; 0x0c
    1c84:	fa 01       	movw	r30, r20
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	a2 81       	ldd	r26, Z+2	; 0x02
    1c8c:	b3 81       	ldd	r27, Z+3	; 0x03
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <vfprintf+0x55c>
    1c90:	2e 5f       	subi	r18, 0xFE	; 254
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	3d 87       	std	Y+13, r19	; 0x0d
    1c96:	2c 87       	std	Y+12, r18	; 0x0c
    1c98:	fa 01       	movw	r30, r20
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	aa 27       	eor	r26, r26
    1ca0:	97 fd       	sbrc	r25, 7
    1ca2:	a0 95       	com	r26
    1ca4:	ba 2f       	mov	r27, r26
    1ca6:	01 2f       	mov	r16, r17
    1ca8:	0f 76       	andi	r16, 0x6F	; 111
    1caa:	b7 ff       	sbrs	r27, 7
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <vfprintf+0x574>
    1cae:	b0 95       	com	r27
    1cb0:	a0 95       	com	r26
    1cb2:	90 95       	com	r25
    1cb4:	81 95       	neg	r24
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	af 4f       	sbci	r26, 0xFF	; 255
    1cba:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbc:	00 68       	ori	r16, 0x80	; 128
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	a1 01       	movw	r20, r2
    1cc4:	2a e0       	ldi	r18, 0x0A	; 10
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	0e 94 9d 12 	call	0x253a	; 0x253a <__ultoa_invert>
    1ccc:	e8 2e       	mov	r14, r24
    1cce:	e2 18       	sub	r14, r2
    1cd0:	41 c0       	rjmp	.+130    	; 0x1d54 <vfprintf+0x60a>
    1cd2:	85 37       	cpi	r24, 0x75	; 117
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <vfprintf+0x594>
    1cd6:	1f 7e       	andi	r17, 0xEF	; 239
    1cd8:	2a e0       	ldi	r18, 0x0A	; 10
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	20 c0       	rjmp	.+64     	; 0x1d1e <vfprintf+0x5d4>
    1cde:	19 7f       	andi	r17, 0xF9	; 249
    1ce0:	8f 36       	cpi	r24, 0x6F	; 111
    1ce2:	a9 f0       	breq	.+42     	; 0x1d0e <vfprintf+0x5c4>
    1ce4:	80 37       	cpi	r24, 0x70	; 112
    1ce6:	20 f4       	brcc	.+8      	; 0x1cf0 <vfprintf+0x5a6>
    1ce8:	88 35       	cpi	r24, 0x58	; 88
    1cea:	09 f0       	breq	.+2      	; 0x1cee <vfprintf+0x5a4>
    1cec:	b0 c0       	rjmp	.+352    	; 0x1e4e <vfprintf+0x704>
    1cee:	0b c0       	rjmp	.+22     	; 0x1d06 <vfprintf+0x5bc>
    1cf0:	80 37       	cpi	r24, 0x70	; 112
    1cf2:	21 f0       	breq	.+8      	; 0x1cfc <vfprintf+0x5b2>
    1cf4:	88 37       	cpi	r24, 0x78	; 120
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <vfprintf+0x5b0>
    1cf8:	aa c0       	rjmp	.+340    	; 0x1e4e <vfprintf+0x704>
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <vfprintf+0x5b4>
    1cfc:	10 61       	ori	r17, 0x10	; 16
    1cfe:	14 ff       	sbrs	r17, 4
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <vfprintf+0x5ca>
    1d02:	14 60       	ori	r17, 0x04	; 4
    1d04:	07 c0       	rjmp	.+14     	; 0x1d14 <vfprintf+0x5ca>
    1d06:	14 ff       	sbrs	r17, 4
    1d08:	08 c0       	rjmp	.+16     	; 0x1d1a <vfprintf+0x5d0>
    1d0a:	16 60       	ori	r17, 0x06	; 6
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <vfprintf+0x5d0>
    1d0e:	28 e0       	ldi	r18, 0x08	; 8
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	05 c0       	rjmp	.+10     	; 0x1d1e <vfprintf+0x5d4>
    1d14:	20 e1       	ldi	r18, 0x10	; 16
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfprintf+0x5d4>
    1d1a:	20 e1       	ldi	r18, 0x10	; 16
    1d1c:	32 e0       	ldi	r19, 0x02	; 2
    1d1e:	ca 01       	movw	r24, r20
    1d20:	17 ff       	sbrs	r17, 7
    1d22:	09 c0       	rjmp	.+18     	; 0x1d36 <vfprintf+0x5ec>
    1d24:	04 96       	adiw	r24, 0x04	; 4
    1d26:	9d 87       	std	Y+13, r25	; 0x0d
    1d28:	8c 87       	std	Y+12, r24	; 0x0c
    1d2a:	fa 01       	movw	r30, r20
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	08 c0       	rjmp	.+16     	; 0x1d46 <vfprintf+0x5fc>
    1d36:	02 96       	adiw	r24, 0x02	; 2
    1d38:	9d 87       	std	Y+13, r25	; 0x0d
    1d3a:	8c 87       	std	Y+12, r24	; 0x0c
    1d3c:	fa 01       	movw	r30, r20
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a1 01       	movw	r20, r2
    1d48:	0e 94 9d 12 	call	0x253a	; 0x253a <__ultoa_invert>
    1d4c:	e8 2e       	mov	r14, r24
    1d4e:	e2 18       	sub	r14, r2
    1d50:	01 2f       	mov	r16, r17
    1d52:	0f 77       	andi	r16, 0x7F	; 127
    1d54:	06 ff       	sbrs	r16, 6
    1d56:	09 c0       	rjmp	.+18     	; 0x1d6a <vfprintf+0x620>
    1d58:	0e 7f       	andi	r16, 0xFE	; 254
    1d5a:	ef 14       	cp	r14, r15
    1d5c:	30 f4       	brcc	.+12     	; 0x1d6a <vfprintf+0x620>
    1d5e:	04 ff       	sbrs	r16, 4
    1d60:	06 c0       	rjmp	.+12     	; 0x1d6e <vfprintf+0x624>
    1d62:	02 fd       	sbrc	r16, 2
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <vfprintf+0x624>
    1d66:	0f 7e       	andi	r16, 0xEF	; 239
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x624>
    1d6a:	1e 2d       	mov	r17, r14
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <vfprintf+0x626>
    1d6e:	1f 2d       	mov	r17, r15
    1d70:	80 2f       	mov	r24, r16
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	04 ff       	sbrs	r16, 4
    1d76:	0c c0       	rjmp	.+24     	; 0x1d90 <vfprintf+0x646>
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ee 0d       	add	r30, r14
    1d7c:	f1 1d       	adc	r31, r1
    1d7e:	20 81       	ld	r18, Z
    1d80:	20 33       	cpi	r18, 0x30	; 48
    1d82:	11 f4       	brne	.+4      	; 0x1d88 <vfprintf+0x63e>
    1d84:	09 7e       	andi	r16, 0xE9	; 233
    1d86:	09 c0       	rjmp	.+18     	; 0x1d9a <vfprintf+0x650>
    1d88:	02 ff       	sbrs	r16, 2
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <vfprintf+0x64e>
    1d8c:	1e 5f       	subi	r17, 0xFE	; 254
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <vfprintf+0x650>
    1d90:	86 78       	andi	r24, 0x86	; 134
    1d92:	90 70       	andi	r25, 0x00	; 0
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <vfprintf+0x650>
    1d98:	1f 5f       	subi	r17, 0xFF	; 255
    1d9a:	a0 2e       	mov	r10, r16
    1d9c:	bb 24       	eor	r11, r11
    1d9e:	03 fd       	sbrc	r16, 3
    1da0:	12 c0       	rjmp	.+36     	; 0x1dc6 <vfprintf+0x67c>
    1da2:	00 ff       	sbrs	r16, 0
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <vfprintf+0x676>
    1da6:	fe 2c       	mov	r15, r14
    1da8:	1d 15       	cp	r17, r13
    1daa:	50 f4       	brcc	.+20     	; 0x1dc0 <vfprintf+0x676>
    1dac:	fd 0c       	add	r15, r13
    1dae:	f1 1a       	sub	r15, r17
    1db0:	1d 2d       	mov	r17, r13
    1db2:	06 c0       	rjmp	.+12     	; 0x1dc0 <vfprintf+0x676>
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	b4 01       	movw	r22, r8
    1dba:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1dbe:	1f 5f       	subi	r17, 0xFF	; 255
    1dc0:	1d 15       	cp	r17, r13
    1dc2:	c0 f3       	brcs	.-16     	; 0x1db4 <vfprintf+0x66a>
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <vfprintf+0x684>
    1dc6:	1d 15       	cp	r17, r13
    1dc8:	10 f4       	brcc	.+4      	; 0x1dce <vfprintf+0x684>
    1dca:	d1 1a       	sub	r13, r17
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <vfprintf+0x686>
    1dce:	dd 24       	eor	r13, r13
    1dd0:	a4 fe       	sbrs	r10, 4
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <vfprintf+0x6a8>
    1dd4:	80 e3       	ldi	r24, 0x30	; 48
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	b4 01       	movw	r22, r8
    1dda:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1dde:	a2 fe       	sbrs	r10, 2
    1de0:	1f c0       	rjmp	.+62     	; 0x1e20 <vfprintf+0x6d6>
    1de2:	a1 fe       	sbrs	r10, 1
    1de4:	03 c0       	rjmp	.+6      	; 0x1dec <vfprintf+0x6a2>
    1de6:	88 e5       	ldi	r24, 0x58	; 88
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	10 c0       	rjmp	.+32     	; 0x1e0c <vfprintf+0x6c2>
    1dec:	88 e7       	ldi	r24, 0x78	; 120
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <vfprintf+0x6c2>
    1df2:	c5 01       	movw	r24, r10
    1df4:	86 78       	andi	r24, 0x86	; 134
    1df6:	90 70       	andi	r25, 0x00	; 0
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	91 f0       	breq	.+36     	; 0x1e20 <vfprintf+0x6d6>
    1dfc:	a1 fc       	sbrc	r10, 1
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <vfprintf+0x6ba>
    1e00:	80 e2       	ldi	r24, 0x20	; 32
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <vfprintf+0x6bc>
    1e04:	8b e2       	ldi	r24, 0x2B	; 43
    1e06:	07 fd       	sbrc	r16, 7
    1e08:	8d e2       	ldi	r24, 0x2D	; 45
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	b4 01       	movw	r22, r8
    1e0e:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <vfprintf+0x6d6>
    1e14:	80 e3       	ldi	r24, 0x30	; 48
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	b4 01       	movw	r22, r8
    1e1a:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1e1e:	fa 94       	dec	r15
    1e20:	ef 14       	cp	r14, r15
    1e22:	c0 f3       	brcs	.-16     	; 0x1e14 <vfprintf+0x6ca>
    1e24:	ea 94       	dec	r14
    1e26:	f1 01       	movw	r30, r2
    1e28:	ee 0d       	add	r30, r14
    1e2a:	f1 1d       	adc	r31, r1
    1e2c:	80 81       	ld	r24, Z
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	b4 01       	movw	r22, r8
    1e32:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1e36:	ee 20       	and	r14, r14
    1e38:	a9 f7       	brne	.-22     	; 0x1e24 <vfprintf+0x6da>
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <vfprintf+0x6fe>
    1e3c:	80 e2       	ldi	r24, 0x20	; 32
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	b4 01       	movw	r22, r8
    1e42:	0e 94 2e 12 	call	0x245c	; 0x245c <fputc>
    1e46:	da 94       	dec	r13
    1e48:	dd 20       	and	r13, r13
    1e4a:	c1 f7       	brne	.-16     	; 0x1e3c <vfprintf+0x6f2>
    1e4c:	8e cc       	rjmp	.-1764   	; 0x176a <vfprintf+0x20>
    1e4e:	f4 01       	movw	r30, r8
    1e50:	86 81       	ldd	r24, Z+6	; 0x06
    1e52:	97 81       	ldd	r25, Z+7	; 0x07
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0x710>
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	9f ef       	ldi	r25, 0xFF	; 255
    1e5a:	65 96       	adiw	r28, 0x15	; 21
    1e5c:	e2 e1       	ldi	r30, 0x12	; 18
    1e5e:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__epilogue_restores__>

00001e62 <__divmodhi4>:
    1e62:	97 fb       	bst	r25, 7
    1e64:	09 2e       	mov	r0, r25
    1e66:	07 26       	eor	r0, r23
    1e68:	0a d0       	rcall	.+20     	; 0x1e7e <__divmodhi4_neg1>
    1e6a:	77 fd       	sbrc	r23, 7
    1e6c:	04 d0       	rcall	.+8      	; 0x1e76 <__divmodhi4_neg2>
    1e6e:	43 d0       	rcall	.+134    	; 0x1ef6 <__udivmodhi4>
    1e70:	06 d0       	rcall	.+12     	; 0x1e7e <__divmodhi4_neg1>
    1e72:	00 20       	and	r0, r0
    1e74:	1a f4       	brpl	.+6      	; 0x1e7c <__divmodhi4_exit>

00001e76 <__divmodhi4_neg2>:
    1e76:	70 95       	com	r23
    1e78:	61 95       	neg	r22
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255

00001e7c <__divmodhi4_exit>:
    1e7c:	08 95       	ret

00001e7e <__divmodhi4_neg1>:
    1e7e:	f6 f7       	brtc	.-4      	; 0x1e7c <__divmodhi4_exit>
    1e80:	90 95       	com	r25
    1e82:	81 95       	neg	r24
    1e84:	9f 4f       	sbci	r25, 0xFF	; 255
    1e86:	08 95       	ret

00001e88 <__prologue_saves__>:
    1e88:	2f 92       	push	r2
    1e8a:	3f 92       	push	r3
    1e8c:	4f 92       	push	r4
    1e8e:	5f 92       	push	r5
    1e90:	6f 92       	push	r6
    1e92:	7f 92       	push	r7
    1e94:	8f 92       	push	r8
    1e96:	9f 92       	push	r9
    1e98:	af 92       	push	r10
    1e9a:	bf 92       	push	r11
    1e9c:	cf 92       	push	r12
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	ca 1b       	sub	r28, r26
    1eb2:	db 0b       	sbc	r29, r27
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	09 94       	ijmp

00001ec0 <__epilogue_restores__>:
    1ec0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec2:	39 88       	ldd	r3, Y+17	; 0x11
    1ec4:	48 88       	ldd	r4, Y+16	; 0x10
    1ec6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ec8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eca:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ecc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ece:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ed4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ed6:	df 80       	ldd	r13, Y+7	; 0x07
    1ed8:	ee 80       	ldd	r14, Y+6	; 0x06
    1eda:	fd 80       	ldd	r15, Y+5	; 0x05
    1edc:	0c 81       	ldd	r16, Y+4	; 0x04
    1ede:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee4:	ce 0f       	add	r28, r30
    1ee6:	d1 1d       	adc	r29, r1
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	ed 01       	movw	r28, r26
    1ef4:	08 95       	ret

00001ef6 <__udivmodhi4>:
    1ef6:	aa 1b       	sub	r26, r26
    1ef8:	bb 1b       	sub	r27, r27
    1efa:	51 e1       	ldi	r21, 0x11	; 17
    1efc:	07 c0       	rjmp	.+14     	; 0x1f0c <__udivmodhi4_ep>

00001efe <__udivmodhi4_loop>:
    1efe:	aa 1f       	adc	r26, r26
    1f00:	bb 1f       	adc	r27, r27
    1f02:	a6 17       	cp	r26, r22
    1f04:	b7 07       	cpc	r27, r23
    1f06:	10 f0       	brcs	.+4      	; 0x1f0c <__udivmodhi4_ep>
    1f08:	a6 1b       	sub	r26, r22
    1f0a:	b7 0b       	sbc	r27, r23

00001f0c <__udivmodhi4_ep>:
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	5a 95       	dec	r21
    1f12:	a9 f7       	brne	.-22     	; 0x1efe <__udivmodhi4_loop>
    1f14:	80 95       	com	r24
    1f16:	90 95       	com	r25
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	08 95       	ret

00001f1e <strtod>:
    1f1e:	a0 e0       	ldi	r26, 0x00	; 0
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e5 e9       	ldi	r30, 0x95	; 149
    1f24:	ff e0       	ldi	r31, 0x0F	; 15
    1f26:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__prologue_saves__+0x8>
    1f2a:	5b 01       	movw	r10, r22
    1f2c:	61 15       	cp	r22, r1
    1f2e:	71 05       	cpc	r23, r1
    1f30:	21 f0       	breq	.+8      	; 0x1f3a <strtod+0x1c>
    1f32:	db 01       	movw	r26, r22
    1f34:	8c 93       	st	X, r24
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	9c 93       	st	X, r25
    1f3a:	7c 01       	movw	r14, r24
    1f3c:	e7 01       	movw	r28, r14
    1f3e:	08 94       	sec
    1f40:	e1 1c       	adc	r14, r1
    1f42:	f1 1c       	adc	r15, r1
    1f44:	08 81       	ld	r16, Y
    1f46:	67 01       	movw	r12, r14
    1f48:	80 2f       	mov	r24, r16
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <isspace>
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	a1 f7       	brne	.-24     	; 0x1f3c <strtod+0x1e>
    1f54:	0d 32       	cpi	r16, 0x2D	; 45
    1f56:	41 f4       	brne	.+16     	; 0x1f68 <strtod+0x4a>
    1f58:	09 81       	ldd	r16, Y+1	; 0x01
    1f5a:	42 e0       	ldi	r20, 0x02	; 2
    1f5c:	c4 2e       	mov	r12, r20
    1f5e:	d1 2c       	mov	r13, r1
    1f60:	cc 0e       	add	r12, r28
    1f62:	dd 1e       	adc	r13, r29
    1f64:	11 e0       	ldi	r17, 0x01	; 1
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <strtod+0x5c>
    1f68:	0b 32       	cpi	r16, 0x2B	; 43
    1f6a:	31 f4       	brne	.+12     	; 0x1f78 <strtod+0x5a>
    1f6c:	09 81       	ldd	r16, Y+1	; 0x01
    1f6e:	32 e0       	ldi	r19, 0x02	; 2
    1f70:	c3 2e       	mov	r12, r19
    1f72:	d1 2c       	mov	r13, r1
    1f74:	cc 0e       	add	r12, r28
    1f76:	dd 1e       	adc	r13, r29
    1f78:	10 e0       	ldi	r17, 0x00	; 0
    1f7a:	e6 01       	movw	r28, r12
    1f7c:	21 97       	sbiw	r28, 0x01	; 1
    1f7e:	ce 01       	movw	r24, r28
    1f80:	60 e7       	ldi	r22, 0x70	; 112
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	43 e0       	ldi	r20, 0x03	; 3
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	0e 94 de 11 	call	0x23bc	; 0x23bc <strncasecmp_P>
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	d1 f4       	brne	.+52     	; 0x1fc4 <strtod+0xa6>
    1f90:	e6 01       	movw	r28, r12
    1f92:	22 96       	adiw	r28, 0x02	; 2
    1f94:	ce 01       	movw	r24, r28
    1f96:	63 e7       	ldi	r22, 0x73	; 115
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	45 e0       	ldi	r20, 0x05	; 5
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	0e 94 de 11 	call	0x23bc	; 0x23bc <strncasecmp_P>
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	11 f4       	brne	.+4      	; 0x1faa <strtod+0x8c>
    1fa6:	e6 01       	movw	r28, r12
    1fa8:	27 96       	adiw	r28, 0x07	; 7
    1faa:	a1 14       	cp	r10, r1
    1fac:	b1 04       	cpc	r11, r1
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <strtod+0x98>
    1fb0:	f5 01       	movw	r30, r10
    1fb2:	d1 83       	std	Z+1, r29	; 0x01
    1fb4:	c0 83       	st	Z, r28
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	90 e8       	ldi	r25, 0x80	; 128
    1fbc:	11 23       	and	r17, r17
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <strtod+0xa4>
    1fc0:	0a c1       	rjmp	.+532    	; 0x21d6 <strtod+0x2b8>
    1fc2:	04 c1       	rjmp	.+520    	; 0x21cc <strtod+0x2ae>
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	68 e7       	ldi	r22, 0x78	; 120
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	43 e0       	ldi	r20, 0x03	; 3
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	0e 94 de 11 	call	0x23bc	; 0x23bc <strncasecmp_P>
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	59 f4       	brne	.+22     	; 0x1fec <strtod+0xce>
    1fd6:	a1 14       	cp	r10, r1
    1fd8:	b1 04       	cpc	r11, r1
    1fda:	09 f4       	brne	.+2      	; 0x1fde <strtod+0xc0>
    1fdc:	f9 c0       	rjmp	.+498    	; 0x21d0 <strtod+0x2b2>
    1fde:	c6 01       	movw	r24, r12
    1fe0:	02 96       	adiw	r24, 0x02	; 2
    1fe2:	d5 01       	movw	r26, r10
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	9c 93       	st	X, r25
    1fe8:	8e 93       	st	-X, r24
    1fea:	f2 c0       	rjmp	.+484    	; 0x21d0 <strtod+0x2b2>
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	ba 01       	movw	r22, r20
    1ff2:	88 24       	eor	r8, r8
    1ff4:	99 24       	eor	r9, r9
    1ff6:	00 53       	subi	r16, 0x30	; 48
    1ff8:	0a 30       	cpi	r16, 0x0A	; 10
    1ffa:	90 f5       	brcc	.+100    	; 0x2060 <strtod+0x142>
    1ffc:	12 60       	ori	r17, 0x02	; 2
    1ffe:	21 2f       	mov	r18, r17
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	c9 01       	movw	r24, r18
    2004:	88 70       	andi	r24, 0x08	; 8
    2006:	90 70       	andi	r25, 0x00	; 0
    2008:	12 ff       	sbrs	r17, 2
    200a:	06 c0       	rjmp	.+12     	; 0x2018 <strtod+0xfa>
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f5       	brne	.+90     	; 0x206a <strtod+0x14c>
    2010:	08 94       	sec
    2012:	81 1c       	adc	r8, r1
    2014:	91 1c       	adc	r9, r1
    2016:	29 c0       	rjmp	.+82     	; 0x206a <strtod+0x14c>
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	19 f0       	breq	.+6      	; 0x2022 <strtod+0x104>
    201c:	08 94       	sec
    201e:	81 08       	sbc	r8, r1
    2020:	91 08       	sbc	r9, r1
    2022:	db 01       	movw	r26, r22
    2024:	ca 01       	movw	r24, r20
    2026:	d2 e0       	ldi	r29, 0x02	; 2
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	aa 1f       	adc	r26, r26
    202e:	bb 1f       	adc	r27, r27
    2030:	da 95       	dec	r29
    2032:	d1 f7       	brne	.-12     	; 0x2028 <strtod+0x10a>
    2034:	48 0f       	add	r20, r24
    2036:	59 1f       	adc	r21, r25
    2038:	6a 1f       	adc	r22, r26
    203a:	7b 1f       	adc	r23, r27
    203c:	44 0f       	add	r20, r20
    203e:	55 1f       	adc	r21, r21
    2040:	66 1f       	adc	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	40 0f       	add	r20, r16
    2046:	51 1d       	adc	r21, r1
    2048:	61 1d       	adc	r22, r1
    204a:	71 1d       	adc	r23, r1
    204c:	48 39       	cpi	r20, 0x98	; 152
    204e:	b9 e9       	ldi	r27, 0x99	; 153
    2050:	5b 07       	cpc	r21, r27
    2052:	b9 e9       	ldi	r27, 0x99	; 153
    2054:	6b 07       	cpc	r22, r27
    2056:	b9 e1       	ldi	r27, 0x19	; 25
    2058:	7b 07       	cpc	r23, r27
    205a:	38 f0       	brcs	.+14     	; 0x206a <strtod+0x14c>
    205c:	14 60       	ori	r17, 0x04	; 4
    205e:	05 c0       	rjmp	.+10     	; 0x206a <strtod+0x14c>
    2060:	0e 3f       	cpi	r16, 0xFE	; 254
    2062:	39 f4       	brne	.+14     	; 0x2072 <strtod+0x154>
    2064:	13 fd       	sbrc	r17, 3
    2066:	43 c0       	rjmp	.+134    	; 0x20ee <strtod+0x1d0>
    2068:	18 60       	ori	r17, 0x08	; 8
    206a:	f6 01       	movw	r30, r12
    206c:	01 91       	ld	r16, Z+
    206e:	6f 01       	movw	r12, r30
    2070:	c2 cf       	rjmp	.-124    	; 0x1ff6 <strtod+0xd8>
    2072:	05 33       	cpi	r16, 0x35	; 53
    2074:	11 f0       	breq	.+4      	; 0x207a <strtod+0x15c>
    2076:	05 31       	cpi	r16, 0x15	; 21
    2078:	d1 f5       	brne	.+116    	; 0x20ee <strtod+0x1d0>
    207a:	d6 01       	movw	r26, r12
    207c:	ec 91       	ld	r30, X
    207e:	ed 32       	cpi	r30, 0x2D	; 45
    2080:	11 f4       	brne	.+4      	; 0x2086 <strtod+0x168>
    2082:	10 61       	ori	r17, 0x10	; 16
    2084:	08 c0       	rjmp	.+16     	; 0x2096 <strtod+0x178>
    2086:	eb 32       	cpi	r30, 0x2B	; 43
    2088:	29 f0       	breq	.+10     	; 0x2094 <strtod+0x176>
    208a:	c6 01       	movw	r24, r12
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	21 e0       	ldi	r18, 0x01	; 1
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	08 c0       	rjmp	.+16     	; 0x20a4 <strtod+0x186>
    2094:	d6 01       	movw	r26, r12
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	ec 91       	ld	r30, X
    209a:	11 97       	sbiw	r26, 0x01	; 1
    209c:	c6 01       	movw	r24, r12
    209e:	02 96       	adiw	r24, 0x02	; 2
    20a0:	22 e0       	ldi	r18, 0x02	; 2
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	e0 53       	subi	r30, 0x30	; 48
    20a6:	ea 30       	cpi	r30, 0x0A	; 10
    20a8:	20 f0       	brcs	.+8      	; 0x20b2 <strtod+0x194>
    20aa:	6c 01       	movw	r12, r24
    20ac:	c2 1a       	sub	r12, r18
    20ae:	d3 0a       	sbc	r13, r19
    20b0:	1e c0       	rjmp	.+60     	; 0x20ee <strtod+0x1d0>
    20b2:	dc 01       	movw	r26, r24
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	fc e0       	ldi	r31, 0x0C	; 12
    20ba:	20 38       	cpi	r18, 0x80	; 128
    20bc:	3f 07       	cpc	r19, r31
    20be:	5c f4       	brge	.+22     	; 0x20d6 <strtod+0x1b8>
    20c0:	c9 01       	movw	r24, r18
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	28 0f       	add	r18, r24
    20cc:	39 1f       	adc	r19, r25
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	2e 0f       	add	r18, r30
    20d4:	31 1d       	adc	r19, r1
    20d6:	ed 91       	ld	r30, X+
    20d8:	e0 53       	subi	r30, 0x30	; 48
    20da:	6d 01       	movw	r12, r26
    20dc:	ea 30       	cpi	r30, 0x0A	; 10
    20de:	60 f3       	brcs	.-40     	; 0x20b8 <strtod+0x19a>
    20e0:	14 ff       	sbrs	r17, 4
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <strtod+0x1cc>
    20e4:	30 95       	com	r19
    20e6:	21 95       	neg	r18
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	82 0e       	add	r8, r18
    20ec:	93 1e       	adc	r9, r19
    20ee:	c1 2f       	mov	r28, r17
    20f0:	d0 e0       	ldi	r29, 0x00	; 0
    20f2:	11 ff       	sbrs	r17, 1
    20f4:	08 c0       	rjmp	.+16     	; 0x2106 <strtod+0x1e8>
    20f6:	a1 14       	cp	r10, r1
    20f8:	b1 04       	cpc	r11, r1
    20fa:	29 f0       	breq	.+10     	; 0x2106 <strtod+0x1e8>
    20fc:	c6 01       	movw	r24, r12
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	d5 01       	movw	r26, r10
    2102:	8d 93       	st	X+, r24
    2104:	9c 93       	st	X, r25
    2106:	cb 01       	movw	r24, r22
    2108:	ba 01       	movw	r22, r20
    210a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatunsisf>
    210e:	6b 01       	movw	r12, r22
    2110:	7c 01       	movw	r14, r24
    2112:	ce 01       	movw	r24, r28
    2114:	83 70       	andi	r24, 0x03	; 3
    2116:	90 70       	andi	r25, 0x00	; 0
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	91 05       	cpc	r25, r1
    211c:	21 f4       	brne	.+8      	; 0x2126 <strtod+0x208>
    211e:	f7 fa       	bst	r15, 7
    2120:	f0 94       	com	r15
    2122:	f7 f8       	bld	r15, 7
    2124:	f0 94       	com	r15
    2126:	c7 01       	movw	r24, r14
    2128:	b6 01       	movw	r22, r12
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	0e 94 88 0a 	call	0x1510	; 0x1510 <__cmpsf2>
    2134:	88 23       	and	r24, r24
    2136:	09 f4       	brne	.+2      	; 0x213a <strtod+0x21c>
    2138:	44 c0       	rjmp	.+136    	; 0x21c2 <strtod+0x2a4>
    213a:	97 fe       	sbrs	r9, 7
    213c:	07 c0       	rjmp	.+14     	; 0x214c <strtod+0x22e>
    213e:	90 94       	com	r9
    2140:	81 94       	neg	r8
    2142:	91 08       	sbc	r9, r1
    2144:	93 94       	inc	r9
    2146:	c7 ea       	ldi	r28, 0xA7	; 167
    2148:	d0 e0       	ldi	r29, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <strtod+0x232>
    214c:	cf e8       	ldi	r28, 0x8F	; 143
    214e:	d0 e0       	ldi	r29, 0x00	; 0
    2150:	98 ee       	ldi	r25, 0xE8	; 232
    2152:	69 2e       	mov	r6, r25
    2154:	9f ef       	ldi	r25, 0xFF	; 255
    2156:	79 2e       	mov	r7, r25
    2158:	6c 0e       	add	r6, r28
    215a:	7d 1e       	adc	r7, r29
    215c:	20 e2       	ldi	r18, 0x20	; 32
    215e:	a2 2e       	mov	r10, r18
    2160:	b1 2c       	mov	r11, r1
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <strtod+0x264>
    2164:	fe 01       	movw	r30, r28
    2166:	05 91       	lpm	r16, Z+
    2168:	15 91       	lpm	r17, Z+
    216a:	25 91       	lpm	r18, Z+
    216c:	34 91       	lpm	r19, Z
    216e:	c7 01       	movw	r24, r14
    2170:	b6 01       	movw	r22, r12
    2172:	a9 01       	movw	r20, r18
    2174:	98 01       	movw	r18, r16
    2176:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    217a:	6b 01       	movw	r12, r22
    217c:	7c 01       	movw	r14, r24
    217e:	8a 18       	sub	r8, r10
    2180:	9b 08       	sbc	r9, r11
    2182:	8a 14       	cp	r8, r10
    2184:	9b 04       	cpc	r9, r11
    2186:	74 f7       	brge	.-36     	; 0x2164 <strtod+0x246>
    2188:	24 97       	sbiw	r28, 0x04	; 4
    218a:	b5 94       	asr	r11
    218c:	a7 94       	ror	r10
    218e:	c6 15       	cp	r28, r6
    2190:	d7 05       	cpc	r29, r7
    2192:	b9 f7       	brne	.-18     	; 0x2182 <strtod+0x264>
    2194:	c6 01       	movw	r24, r12
    2196:	d7 01       	movw	r26, r14
    2198:	2a 2f       	mov	r18, r26
    219a:	22 0f       	add	r18, r18
    219c:	2b 2f       	mov	r18, r27
    219e:	22 1f       	adc	r18, r18
    21a0:	2f 3f       	cpi	r18, 0xFF	; 255
    21a2:	49 f0       	breq	.+18     	; 0x21b6 <strtod+0x298>
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	a9 01       	movw	r20, r18
    21ae:	0e 94 88 0a 	call	0x1510	; 0x1510 <__cmpsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	31 f4       	brne	.+12     	; 0x21c2 <strtod+0x2a4>
    21b6:	82 e2       	ldi	r24, 0x22	; 34
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	90 93 c7 07 	sts	0x07C7, r25
    21be:	80 93 c6 07 	sts	0x07C6, r24
    21c2:	3c 2d       	mov	r19, r12
    21c4:	2d 2d       	mov	r18, r13
    21c6:	9e 2d       	mov	r25, r14
    21c8:	8f 2d       	mov	r24, r15
    21ca:	06 c0       	rjmp	.+12     	; 0x21d8 <strtod+0x2ba>
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <strtod+0x2ba>
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	90 ec       	ldi	r25, 0xC0	; 192
    21d6:	8f e7       	ldi	r24, 0x7F	; 127
    21d8:	b9 01       	movw	r22, r18
    21da:	ac 01       	movw	r20, r24
    21dc:	87 2f       	mov	r24, r23
    21de:	92 2f       	mov	r25, r18
    21e0:	a5 2f       	mov	r26, r21
    21e2:	b4 2f       	mov	r27, r20
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	ee e0       	ldi	r30, 0x0E	; 14
    21ee:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__epilogue_restores__+0x8>

000021f2 <abort>:
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	f8 94       	cli
    21f8:	0c 94 18 13 	jmp	0x2630	; 0x2630 <_exit>

000021fc <__ftoa_engine>:
    21fc:	28 30       	cpi	r18, 0x08	; 8
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__ftoa_engine+0x6>
    2200:	27 e0       	ldi	r18, 0x07	; 7
    2202:	33 27       	eor	r19, r19
    2204:	da 01       	movw	r26, r20
    2206:	99 0f       	add	r25, r25
    2208:	31 1d       	adc	r19, r1
    220a:	87 fd       	sbrc	r24, 7
    220c:	91 60       	ori	r25, 0x01	; 1
    220e:	00 96       	adiw	r24, 0x00	; 0
    2210:	61 05       	cpc	r22, r1
    2212:	71 05       	cpc	r23, r1
    2214:	39 f4       	brne	.+14     	; 0x2224 <__ftoa_engine+0x28>
    2216:	32 60       	ori	r19, 0x02	; 2
    2218:	2e 5f       	subi	r18, 0xFE	; 254
    221a:	3d 93       	st	X+, r19
    221c:	30 e3       	ldi	r19, 0x30	; 48
    221e:	2a 95       	dec	r18
    2220:	e1 f7       	brne	.-8      	; 0x221a <__ftoa_engine+0x1e>
    2222:	08 95       	ret
    2224:	9f 3f       	cpi	r25, 0xFF	; 255
    2226:	30 f0       	brcs	.+12     	; 0x2234 <__ftoa_engine+0x38>
    2228:	80 38       	cpi	r24, 0x80	; 128
    222a:	71 05       	cpc	r23, r1
    222c:	61 05       	cpc	r22, r1
    222e:	09 f0       	breq	.+2      	; 0x2232 <__ftoa_engine+0x36>
    2230:	3c 5f       	subi	r19, 0xFC	; 252
    2232:	3c 5f       	subi	r19, 0xFC	; 252
    2234:	3d 93       	st	X+, r19
    2236:	91 30       	cpi	r25, 0x01	; 1
    2238:	08 f0       	brcs	.+2      	; 0x223c <__ftoa_engine+0x40>
    223a:	80 68       	ori	r24, 0x80	; 128
    223c:	91 1d       	adc	r25, r1
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	1f 93       	push	r17
    2244:	0f 93       	push	r16
    2246:	ff 92       	push	r15
    2248:	ef 92       	push	r14
    224a:	19 2f       	mov	r17, r25
    224c:	98 7f       	andi	r25, 0xF8	; 248
    224e:	96 95       	lsr	r25
    2250:	e9 2f       	mov	r30, r25
    2252:	96 95       	lsr	r25
    2254:	96 95       	lsr	r25
    2256:	e9 0f       	add	r30, r25
    2258:	ff 27       	eor	r31, r31
    225a:	eb 5f       	subi	r30, 0xFB	; 251
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	99 27       	eor	r25, r25
    2260:	33 27       	eor	r19, r19
    2262:	ee 24       	eor	r14, r14
    2264:	ff 24       	eor	r15, r15
    2266:	a7 01       	movw	r20, r14
    2268:	e7 01       	movw	r28, r14
    226a:	05 90       	lpm	r0, Z+
    226c:	08 94       	sec
    226e:	07 94       	ror	r0
    2270:	28 f4       	brcc	.+10     	; 0x227c <__ftoa_engine+0x80>
    2272:	36 0f       	add	r19, r22
    2274:	e7 1e       	adc	r14, r23
    2276:	f8 1e       	adc	r15, r24
    2278:	49 1f       	adc	r20, r25
    227a:	51 1d       	adc	r21, r1
    227c:	66 0f       	add	r22, r22
    227e:	77 1f       	adc	r23, r23
    2280:	88 1f       	adc	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	06 94       	lsr	r0
    2286:	a1 f7       	brne	.-24     	; 0x2270 <__ftoa_engine+0x74>
    2288:	05 90       	lpm	r0, Z+
    228a:	07 94       	ror	r0
    228c:	28 f4       	brcc	.+10     	; 0x2298 <__ftoa_engine+0x9c>
    228e:	e7 0e       	add	r14, r23
    2290:	f8 1e       	adc	r15, r24
    2292:	49 1f       	adc	r20, r25
    2294:	56 1f       	adc	r21, r22
    2296:	c1 1d       	adc	r28, r1
    2298:	77 0f       	add	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	66 1f       	adc	r22, r22
    22a0:	06 94       	lsr	r0
    22a2:	a1 f7       	brne	.-24     	; 0x228c <__ftoa_engine+0x90>
    22a4:	05 90       	lpm	r0, Z+
    22a6:	07 94       	ror	r0
    22a8:	28 f4       	brcc	.+10     	; 0x22b4 <__ftoa_engine+0xb8>
    22aa:	f8 0e       	add	r15, r24
    22ac:	49 1f       	adc	r20, r25
    22ae:	56 1f       	adc	r21, r22
    22b0:	c7 1f       	adc	r28, r23
    22b2:	d1 1d       	adc	r29, r1
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	66 1f       	adc	r22, r22
    22ba:	77 1f       	adc	r23, r23
    22bc:	06 94       	lsr	r0
    22be:	a1 f7       	brne	.-24     	; 0x22a8 <__ftoa_engine+0xac>
    22c0:	05 90       	lpm	r0, Z+
    22c2:	07 94       	ror	r0
    22c4:	20 f4       	brcc	.+8      	; 0x22ce <__ftoa_engine+0xd2>
    22c6:	49 0f       	add	r20, r25
    22c8:	56 1f       	adc	r21, r22
    22ca:	c7 1f       	adc	r28, r23
    22cc:	d8 1f       	adc	r29, r24
    22ce:	99 0f       	add	r25, r25
    22d0:	66 1f       	adc	r22, r22
    22d2:	77 1f       	adc	r23, r23
    22d4:	88 1f       	adc	r24, r24
    22d6:	06 94       	lsr	r0
    22d8:	a9 f7       	brne	.-22     	; 0x22c4 <__ftoa_engine+0xc8>
    22da:	84 91       	lpm	r24, Z
    22dc:	10 95       	com	r17
    22de:	17 70       	andi	r17, 0x07	; 7
    22e0:	41 f0       	breq	.+16     	; 0x22f2 <__ftoa_engine+0xf6>
    22e2:	d6 95       	lsr	r29
    22e4:	c7 95       	ror	r28
    22e6:	57 95       	ror	r21
    22e8:	47 95       	ror	r20
    22ea:	f7 94       	ror	r15
    22ec:	e7 94       	ror	r14
    22ee:	1a 95       	dec	r17
    22f0:	c1 f7       	brne	.-16     	; 0x22e2 <__ftoa_engine+0xe6>
    22f2:	eb ea       	ldi	r30, 0xAB	; 171
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	68 94       	set
    22f8:	15 90       	lpm	r1, Z+
    22fa:	15 91       	lpm	r17, Z+
    22fc:	35 91       	lpm	r19, Z+
    22fe:	65 91       	lpm	r22, Z+
    2300:	95 91       	lpm	r25, Z+
    2302:	05 90       	lpm	r0, Z+
    2304:	7f e2       	ldi	r23, 0x2F	; 47
    2306:	73 95       	inc	r23
    2308:	e1 18       	sub	r14, r1
    230a:	f1 0a       	sbc	r15, r17
    230c:	43 0b       	sbc	r20, r19
    230e:	56 0b       	sbc	r21, r22
    2310:	c9 0b       	sbc	r28, r25
    2312:	d0 09       	sbc	r29, r0
    2314:	c0 f7       	brcc	.-16     	; 0x2306 <__ftoa_engine+0x10a>
    2316:	e1 0c       	add	r14, r1
    2318:	f1 1e       	adc	r15, r17
    231a:	43 1f       	adc	r20, r19
    231c:	56 1f       	adc	r21, r22
    231e:	c9 1f       	adc	r28, r25
    2320:	d0 1d       	adc	r29, r0
    2322:	7e f4       	brtc	.+30     	; 0x2342 <__ftoa_engine+0x146>
    2324:	70 33       	cpi	r23, 0x30	; 48
    2326:	11 f4       	brne	.+4      	; 0x232c <__ftoa_engine+0x130>
    2328:	8a 95       	dec	r24
    232a:	e6 cf       	rjmp	.-52     	; 0x22f8 <__ftoa_engine+0xfc>
    232c:	e8 94       	clt
    232e:	01 50       	subi	r16, 0x01	; 1
    2330:	30 f0       	brcs	.+12     	; 0x233e <__ftoa_engine+0x142>
    2332:	08 0f       	add	r16, r24
    2334:	0a f4       	brpl	.+2      	; 0x2338 <__ftoa_engine+0x13c>
    2336:	00 27       	eor	r16, r16
    2338:	02 17       	cp	r16, r18
    233a:	08 f4       	brcc	.+2      	; 0x233e <__ftoa_engine+0x142>
    233c:	20 2f       	mov	r18, r16
    233e:	23 95       	inc	r18
    2340:	02 2f       	mov	r16, r18
    2342:	7a 33       	cpi	r23, 0x3A	; 58
    2344:	28 f0       	brcs	.+10     	; 0x2350 <__ftoa_engine+0x154>
    2346:	79 e3       	ldi	r23, 0x39	; 57
    2348:	7d 93       	st	X+, r23
    234a:	2a 95       	dec	r18
    234c:	e9 f7       	brne	.-6      	; 0x2348 <__ftoa_engine+0x14c>
    234e:	10 c0       	rjmp	.+32     	; 0x2370 <__ftoa_engine+0x174>
    2350:	7d 93       	st	X+, r23
    2352:	2a 95       	dec	r18
    2354:	89 f6       	brne	.-94     	; 0x22f8 <__ftoa_engine+0xfc>
    2356:	06 94       	lsr	r0
    2358:	97 95       	ror	r25
    235a:	67 95       	ror	r22
    235c:	37 95       	ror	r19
    235e:	17 95       	ror	r17
    2360:	17 94       	ror	r1
    2362:	e1 18       	sub	r14, r1
    2364:	f1 0a       	sbc	r15, r17
    2366:	43 0b       	sbc	r20, r19
    2368:	56 0b       	sbc	r21, r22
    236a:	c9 0b       	sbc	r28, r25
    236c:	d0 09       	sbc	r29, r0
    236e:	98 f0       	brcs	.+38     	; 0x2396 <__ftoa_engine+0x19a>
    2370:	23 95       	inc	r18
    2372:	7e 91       	ld	r23, -X
    2374:	73 95       	inc	r23
    2376:	7a 33       	cpi	r23, 0x3A	; 58
    2378:	08 f0       	brcs	.+2      	; 0x237c <__ftoa_engine+0x180>
    237a:	70 e3       	ldi	r23, 0x30	; 48
    237c:	7c 93       	st	X, r23
    237e:	20 13       	cpse	r18, r16
    2380:	b8 f7       	brcc	.-18     	; 0x2370 <__ftoa_engine+0x174>
    2382:	7e 91       	ld	r23, -X
    2384:	70 61       	ori	r23, 0x10	; 16
    2386:	7d 93       	st	X+, r23
    2388:	30 f0       	brcs	.+12     	; 0x2396 <__ftoa_engine+0x19a>
    238a:	83 95       	inc	r24
    238c:	71 e3       	ldi	r23, 0x31	; 49
    238e:	7d 93       	st	X+, r23
    2390:	70 e3       	ldi	r23, 0x30	; 48
    2392:	2a 95       	dec	r18
    2394:	e1 f7       	brne	.-8      	; 0x238e <__ftoa_engine+0x192>
    2396:	11 24       	eor	r1, r1
    2398:	ef 90       	pop	r14
    239a:	ff 90       	pop	r15
    239c:	0f 91       	pop	r16
    239e:	1f 91       	pop	r17
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	99 27       	eor	r25, r25
    23a6:	87 fd       	sbrc	r24, 7
    23a8:	90 95       	com	r25
    23aa:	08 95       	ret

000023ac <isspace>:
    23ac:	91 11       	cpse	r25, r1
    23ae:	3d c1       	rjmp	.+634    	; 0x262a <__ctype_isfalse>
    23b0:	80 32       	cpi	r24, 0x20	; 32
    23b2:	19 f0       	breq	.+6      	; 0x23ba <isspace+0xe>
    23b4:	89 50       	subi	r24, 0x09	; 9
    23b6:	85 50       	subi	r24, 0x05	; 5
    23b8:	d0 f7       	brcc	.-12     	; 0x23ae <isspace+0x2>
    23ba:	08 95       	ret

000023bc <strncasecmp_P>:
    23bc:	fb 01       	movw	r30, r22
    23be:	dc 01       	movw	r26, r24
    23c0:	41 50       	subi	r20, 0x01	; 1
    23c2:	50 40       	sbci	r21, 0x00	; 0
    23c4:	88 f0       	brcs	.+34     	; 0x23e8 <strncasecmp_P+0x2c>
    23c6:	8d 91       	ld	r24, X+
    23c8:	81 34       	cpi	r24, 0x41	; 65
    23ca:	1c f0       	brlt	.+6      	; 0x23d2 <strncasecmp_P+0x16>
    23cc:	8b 35       	cpi	r24, 0x5B	; 91
    23ce:	0c f4       	brge	.+2      	; 0x23d2 <strncasecmp_P+0x16>
    23d0:	80 5e       	subi	r24, 0xE0	; 224
    23d2:	65 91       	lpm	r22, Z+
    23d4:	61 34       	cpi	r22, 0x41	; 65
    23d6:	1c f0       	brlt	.+6      	; 0x23de <strncasecmp_P+0x22>
    23d8:	6b 35       	cpi	r22, 0x5B	; 91
    23da:	0c f4       	brge	.+2      	; 0x23de <strncasecmp_P+0x22>
    23dc:	60 5e       	subi	r22, 0xE0	; 224
    23de:	86 1b       	sub	r24, r22
    23e0:	61 11       	cpse	r22, r1
    23e2:	71 f3       	breq	.-36     	; 0x23c0 <strncasecmp_P+0x4>
    23e4:	99 0b       	sbc	r25, r25
    23e6:	08 95       	ret
    23e8:	88 1b       	sub	r24, r24
    23ea:	fc cf       	rjmp	.-8      	; 0x23e4 <strncasecmp_P+0x28>

000023ec <strnlen_P>:
    23ec:	fc 01       	movw	r30, r24
    23ee:	05 90       	lpm	r0, Z+
    23f0:	61 50       	subi	r22, 0x01	; 1
    23f2:	70 40       	sbci	r23, 0x00	; 0
    23f4:	01 10       	cpse	r0, r1
    23f6:	d8 f7       	brcc	.-10     	; 0x23ee <strnlen_P+0x2>
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	8e 0f       	add	r24, r30
    23fe:	9f 1f       	adc	r25, r31
    2400:	08 95       	ret

00002402 <strchr>:
    2402:	fc 01       	movw	r30, r24
    2404:	81 91       	ld	r24, Z+
    2406:	86 17       	cp	r24, r22
    2408:	21 f0       	breq	.+8      	; 0x2412 <strchr+0x10>
    240a:	88 23       	and	r24, r24
    240c:	d9 f7       	brne	.-10     	; 0x2404 <strchr+0x2>
    240e:	99 27       	eor	r25, r25
    2410:	08 95       	ret
    2412:	31 97       	sbiw	r30, 0x01	; 1
    2414:	cf 01       	movw	r24, r30
    2416:	08 95       	ret

00002418 <strcmp>:
    2418:	fb 01       	movw	r30, r22
    241a:	dc 01       	movw	r26, r24
    241c:	8d 91       	ld	r24, X+
    241e:	01 90       	ld	r0, Z+
    2420:	80 19       	sub	r24, r0
    2422:	01 10       	cpse	r0, r1
    2424:	d9 f3       	breq	.-10     	; 0x241c <strcmp+0x4>
    2426:	99 0b       	sbc	r25, r25
    2428:	08 95       	ret

0000242a <strncmp>:
    242a:	fb 01       	movw	r30, r22
    242c:	dc 01       	movw	r26, r24
    242e:	41 50       	subi	r20, 0x01	; 1
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	30 f0       	brcs	.+12     	; 0x2440 <strncmp+0x16>
    2434:	8d 91       	ld	r24, X+
    2436:	01 90       	ld	r0, Z+
    2438:	80 19       	sub	r24, r0
    243a:	19 f4       	brne	.+6      	; 0x2442 <strncmp+0x18>
    243c:	00 20       	and	r0, r0
    243e:	b9 f7       	brne	.-18     	; 0x242e <strncmp+0x4>
    2440:	88 1b       	sub	r24, r24
    2442:	99 0b       	sbc	r25, r25
    2444:	08 95       	ret

00002446 <strnlen>:
    2446:	fc 01       	movw	r30, r24
    2448:	61 50       	subi	r22, 0x01	; 1
    244a:	70 40       	sbci	r23, 0x00	; 0
    244c:	01 90       	ld	r0, Z+
    244e:	01 10       	cpse	r0, r1
    2450:	d8 f7       	brcc	.-10     	; 0x2448 <strnlen+0x2>
    2452:	80 95       	com	r24
    2454:	90 95       	com	r25
    2456:	8e 0f       	add	r24, r30
    2458:	9f 1f       	adc	r25, r31
    245a:	08 95       	ret

0000245c <fputc>:
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	8c 01       	movw	r16, r24
    2466:	eb 01       	movw	r28, r22
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	81 ff       	sbrs	r24, 1
    246c:	1b c0       	rjmp	.+54     	; 0x24a4 <fputc+0x48>
    246e:	82 ff       	sbrs	r24, 2
    2470:	0d c0       	rjmp	.+26     	; 0x248c <fputc+0x30>
    2472:	2e 81       	ldd	r18, Y+6	; 0x06
    2474:	3f 81       	ldd	r19, Y+7	; 0x07
    2476:	8c 81       	ldd	r24, Y+4	; 0x04
    2478:	9d 81       	ldd	r25, Y+5	; 0x05
    247a:	28 17       	cp	r18, r24
    247c:	39 07       	cpc	r19, r25
    247e:	64 f4       	brge	.+24     	; 0x2498 <fputc+0x3c>
    2480:	e8 81       	ld	r30, Y
    2482:	f9 81       	ldd	r31, Y+1	; 0x01
    2484:	01 93       	st	Z+, r16
    2486:	f9 83       	std	Y+1, r31	; 0x01
    2488:	e8 83       	st	Y, r30
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <fputc+0x3c>
    248c:	e8 85       	ldd	r30, Y+8	; 0x08
    248e:	f9 85       	ldd	r31, Y+9	; 0x09
    2490:	80 2f       	mov	r24, r16
    2492:	09 95       	icall
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	31 f4       	brne	.+12     	; 0x24a4 <fputc+0x48>
    2498:	8e 81       	ldd	r24, Y+6	; 0x06
    249a:	9f 81       	ldd	r25, Y+7	; 0x07
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	9f 83       	std	Y+7, r25	; 0x07
    24a0:	8e 83       	std	Y+6, r24	; 0x06
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <fputc+0x4c>
    24a4:	0f ef       	ldi	r16, 0xFF	; 255
    24a6:	1f ef       	ldi	r17, 0xFF	; 255
    24a8:	c8 01       	movw	r24, r16
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	08 95       	ret

000024b4 <printf>:
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e0 e6       	ldi	r30, 0x60	; 96
    24ba:	f2 e1       	ldi	r31, 0x12	; 18
    24bc:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__prologue_saves__+0x20>
    24c0:	fe 01       	movw	r30, r28
    24c2:	35 96       	adiw	r30, 0x05	; 5
    24c4:	61 91       	ld	r22, Z+
    24c6:	71 91       	ld	r23, Z+
    24c8:	80 91 c2 07 	lds	r24, 0x07C2
    24cc:	90 91 c3 07 	lds	r25, 0x07C3
    24d0:	af 01       	movw	r20, r30
    24d2:	0e 94 a5 0b 	call	0x174a	; 0x174a <vfprintf>
    24d6:	20 96       	adiw	r28, 0x00	; 0
    24d8:	e2 e0       	ldi	r30, 0x02	; 2
    24da:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__epilogue_restores__+0x20>

000024de <puts>:
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	8c 01       	movw	r16, r24
    24e8:	e0 91 c2 07 	lds	r30, 0x07C2
    24ec:	f0 91 c3 07 	lds	r31, 0x07C3
    24f0:	83 81       	ldd	r24, Z+3	; 0x03
    24f2:	81 ff       	sbrs	r24, 1
    24f4:	1a c0       	rjmp	.+52     	; 0x252a <puts+0x4c>
    24f6:	c0 e0       	ldi	r28, 0x00	; 0
    24f8:	d0 e0       	ldi	r29, 0x00	; 0
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <puts+0x28>
    24fc:	09 95       	icall
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	11 f0       	breq	.+4      	; 0x2506 <puts+0x28>
    2502:	cf ef       	ldi	r28, 0xFF	; 255
    2504:	df ef       	ldi	r29, 0xFF	; 255
    2506:	f8 01       	movw	r30, r16
    2508:	81 91       	ld	r24, Z+
    250a:	8f 01       	movw	r16, r30
    250c:	60 91 c2 07 	lds	r22, 0x07C2
    2510:	70 91 c3 07 	lds	r23, 0x07C3
    2514:	db 01       	movw	r26, r22
    2516:	18 96       	adiw	r26, 0x08	; 8
    2518:	ed 91       	ld	r30, X+
    251a:	fc 91       	ld	r31, X
    251c:	19 97       	sbiw	r26, 0x09	; 9
    251e:	88 23       	and	r24, r24
    2520:	69 f7       	brne	.-38     	; 0x24fc <puts+0x1e>
    2522:	8a e0       	ldi	r24, 0x0A	; 10
    2524:	09 95       	icall
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	11 f0       	breq	.+4      	; 0x252e <puts+0x50>
    252a:	cf ef       	ldi	r28, 0xFF	; 255
    252c:	df ef       	ldi	r29, 0xFF	; 255
    252e:	ce 01       	movw	r24, r28
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	08 95       	ret

0000253a <__ultoa_invert>:
    253a:	fa 01       	movw	r30, r20
    253c:	aa 27       	eor	r26, r26
    253e:	28 30       	cpi	r18, 0x08	; 8
    2540:	51 f1       	breq	.+84     	; 0x2596 <__ultoa_invert+0x5c>
    2542:	20 31       	cpi	r18, 0x10	; 16
    2544:	81 f1       	breq	.+96     	; 0x25a6 <__ultoa_invert+0x6c>
    2546:	e8 94       	clt
    2548:	6f 93       	push	r22
    254a:	6e 7f       	andi	r22, 0xFE	; 254
    254c:	6e 5f       	subi	r22, 0xFE	; 254
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	af 4f       	sbci	r26, 0xFF	; 255
    2556:	b1 e0       	ldi	r27, 0x01	; 1
    2558:	3e d0       	rcall	.+124    	; 0x25d6 <__ultoa_invert+0x9c>
    255a:	b4 e0       	ldi	r27, 0x04	; 4
    255c:	3c d0       	rcall	.+120    	; 0x25d6 <__ultoa_invert+0x9c>
    255e:	67 0f       	add	r22, r23
    2560:	78 1f       	adc	r23, r24
    2562:	89 1f       	adc	r24, r25
    2564:	9a 1f       	adc	r25, r26
    2566:	a1 1d       	adc	r26, r1
    2568:	68 0f       	add	r22, r24
    256a:	79 1f       	adc	r23, r25
    256c:	8a 1f       	adc	r24, r26
    256e:	91 1d       	adc	r25, r1
    2570:	a1 1d       	adc	r26, r1
    2572:	6a 0f       	add	r22, r26
    2574:	71 1d       	adc	r23, r1
    2576:	81 1d       	adc	r24, r1
    2578:	91 1d       	adc	r25, r1
    257a:	a1 1d       	adc	r26, r1
    257c:	20 d0       	rcall	.+64     	; 0x25be <__ultoa_invert+0x84>
    257e:	09 f4       	brne	.+2      	; 0x2582 <__ultoa_invert+0x48>
    2580:	68 94       	set
    2582:	3f 91       	pop	r19
    2584:	2a e0       	ldi	r18, 0x0A	; 10
    2586:	26 9f       	mul	r18, r22
    2588:	11 24       	eor	r1, r1
    258a:	30 19       	sub	r19, r0
    258c:	30 5d       	subi	r19, 0xD0	; 208
    258e:	31 93       	st	Z+, r19
    2590:	de f6       	brtc	.-74     	; 0x2548 <__ultoa_invert+0xe>
    2592:	cf 01       	movw	r24, r30
    2594:	08 95       	ret
    2596:	46 2f       	mov	r20, r22
    2598:	47 70       	andi	r20, 0x07	; 7
    259a:	40 5d       	subi	r20, 0xD0	; 208
    259c:	41 93       	st	Z+, r20
    259e:	b3 e0       	ldi	r27, 0x03	; 3
    25a0:	0f d0       	rcall	.+30     	; 0x25c0 <__ultoa_invert+0x86>
    25a2:	c9 f7       	brne	.-14     	; 0x2596 <__ultoa_invert+0x5c>
    25a4:	f6 cf       	rjmp	.-20     	; 0x2592 <__ultoa_invert+0x58>
    25a6:	46 2f       	mov	r20, r22
    25a8:	4f 70       	andi	r20, 0x0F	; 15
    25aa:	40 5d       	subi	r20, 0xD0	; 208
    25ac:	4a 33       	cpi	r20, 0x3A	; 58
    25ae:	18 f0       	brcs	.+6      	; 0x25b6 <__ultoa_invert+0x7c>
    25b0:	49 5d       	subi	r20, 0xD9	; 217
    25b2:	31 fd       	sbrc	r19, 1
    25b4:	40 52       	subi	r20, 0x20	; 32
    25b6:	41 93       	st	Z+, r20
    25b8:	02 d0       	rcall	.+4      	; 0x25be <__ultoa_invert+0x84>
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <__ultoa_invert+0x6c>
    25bc:	ea cf       	rjmp	.-44     	; 0x2592 <__ultoa_invert+0x58>
    25be:	b4 e0       	ldi	r27, 0x04	; 4
    25c0:	a6 95       	lsr	r26
    25c2:	97 95       	ror	r25
    25c4:	87 95       	ror	r24
    25c6:	77 95       	ror	r23
    25c8:	67 95       	ror	r22
    25ca:	ba 95       	dec	r27
    25cc:	c9 f7       	brne	.-14     	; 0x25c0 <__ultoa_invert+0x86>
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	61 05       	cpc	r22, r1
    25d2:	71 05       	cpc	r23, r1
    25d4:	08 95       	ret
    25d6:	9b 01       	movw	r18, r22
    25d8:	ac 01       	movw	r20, r24
    25da:	0a 2e       	mov	r0, r26
    25dc:	06 94       	lsr	r0
    25de:	57 95       	ror	r21
    25e0:	47 95       	ror	r20
    25e2:	37 95       	ror	r19
    25e4:	27 95       	ror	r18
    25e6:	ba 95       	dec	r27
    25e8:	c9 f7       	brne	.-14     	; 0x25dc <__ultoa_invert+0xa2>
    25ea:	62 0f       	add	r22, r18
    25ec:	73 1f       	adc	r23, r19
    25ee:	84 1f       	adc	r24, r20
    25f0:	95 1f       	adc	r25, r21
    25f2:	a0 1d       	adc	r26, r0
    25f4:	08 95       	ret

000025f6 <__eerd_byte_m328p>:
    25f6:	f9 99       	sbic	0x1f, 1	; 31
    25f8:	fe cf       	rjmp	.-4      	; 0x25f6 <__eerd_byte_m328p>
    25fa:	92 bd       	out	0x22, r25	; 34
    25fc:	81 bd       	out	0x21, r24	; 33
    25fe:	f8 9a       	sbi	0x1f, 0	; 31
    2600:	99 27       	eor	r25, r25
    2602:	80 b5       	in	r24, 0x20	; 32
    2604:	08 95       	ret

00002606 <__eeupd_byte_m328p>:
    2606:	26 2f       	mov	r18, r22

00002608 <__eeupd_r18_m328p>:
    2608:	f9 99       	sbic	0x1f, 1	; 31
    260a:	fe cf       	rjmp	.-4      	; 0x2608 <__eeupd_r18_m328p>
    260c:	92 bd       	out	0x22, r25	; 34
    260e:	81 bd       	out	0x21, r24	; 33
    2610:	f8 9a       	sbi	0x1f, 0	; 31
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	00 b4       	in	r0, 0x20	; 32
    2616:	02 16       	cp	r0, r18
    2618:	39 f0       	breq	.+14     	; 0x2628 <__eeupd_r18_m328p+0x20>
    261a:	1f ba       	out	0x1f, r1	; 31
    261c:	20 bd       	out	0x20, r18	; 32
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	fa 9a       	sbi	0x1f, 2	; 31
    2624:	f9 9a       	sbi	0x1f, 1	; 31
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	08 95       	ret

0000262a <__ctype_isfalse>:
    262a:	99 27       	eor	r25, r25
    262c:	88 27       	eor	r24, r24

0000262e <__ctype_istrue>:
    262e:	08 95       	ret

00002630 <_exit>:
    2630:	f8 94       	cli

00002632 <__stop_program>:
    2632:	ff cf       	rjmp	.-2      	; 0x2632 <__stop_program>
