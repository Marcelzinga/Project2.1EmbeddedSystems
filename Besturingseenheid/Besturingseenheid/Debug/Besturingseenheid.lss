
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000614  00800100  00002034  000020c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002034  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800714  00800714  000026dc  2**0
                  ALLOC
  3 .stab         00002ea4  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000962  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00005ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002345  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ade  00000000  00000000  0000840d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001305  00000000  00000000  00008eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000068c  00000000  00000000  0000a1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000738  00000000  00000000  0000a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000170c  00000000  00000000  0000afb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	17 e0       	ldi	r17, 0x07	; 7
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e4 e3       	ldi	r30, 0x34	; 52
     17e:	f0 e2       	ldi	r31, 0x20	; 32
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a4 31       	cpi	r26, 0x14	; 20
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	18 e0       	ldi	r17, 0x08	; 8
     18e:	a4 e1       	ldi	r26, 0x14	; 20
     190:	b7 e0       	ldi	r27, 0x07	; 7
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	aa 34       	cpi	r26, 0x4A	; 74
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
     1a0:	0c 94 18 10 	jmp	0x2030	; 0x2030 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	80 93 7e 00 	sts	0x007E, r24
	
}
     1b4:	08 95       	ret

000001b6 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1b6:	ea e7       	ldi	r30, 0x7A	; 122
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 64       	ori	r24, 0x40	; 64
     1be:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1c0:	80 81       	ld	r24, Z
     1c2:	86 fd       	sbrc	r24, 6
     1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     1c6:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     1ca:	08 95       	ret

000001cc <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     1cc:	85 e4       	ldi	r24, 0x45	; 69
     1ce:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1dc:	80 81       	ld	r24, Z
     1de:	86 fd       	sbrc	r24, 6
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <get_temp_adc+0x10>
	return ADC;
     1e2:	80 91 78 00 	lds	r24, 0x0078
     1e6:	90 91 79 00 	lds	r25, 0x0079
}
     1ea:	08 95       	ret

000001ec <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     1ec:	82 e6       	ldi	r24, 0x62	; 98
     1ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
     206:	08 95       	ret

00000208 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     208:	87 ef       	ldi	r24, 0xF7	; 247
     20a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	84 b9       	out	0x04, r24	; 4
}
     210:	08 95       	ret

00000212 <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     21c:	10 92 80 00 	sts	0x0080, r1
}
     220:	08 95       	ret

00000222 <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     222:	80 91 14 07 	lds	r24, 0x0714
     226:	90 91 15 07 	lds	r25, 0x0715
}	
     22a:	08 95       	ret

0000022c <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     22c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	8f e3       	ldi	r24, 0x3F	; 63
     230:	9c e9       	ldi	r25, 0x9C	; 156
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <getDistance+0x6>
     236:	00 c0       	rjmp	.+0      	; 0x238 <getDistance+0xc>
     238:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     23a:	28 98       	cbi	0x05, 0	; 5
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	91 ee       	ldi	r25, 0xE1	; 225
     240:	a4 e0       	ldi	r26, 0x04	; 4
     242:	81 50       	subi	r24, 0x01	; 1
     244:	90 40       	sbci	r25, 0x00	; 0
     246:	a0 40       	sbci	r26, 0x00	; 0
     248:	e1 f7       	brne	.-8      	; 0x242 <getDistance+0x16>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <getDistance+0x20>
     24c:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     24e:	60 91 22 07 	lds	r22, 0x0722
     252:	70 91 23 07 	lds	r23, 0x0723
     256:	80 91 24 07 	lds	r24, 0x0724
     25a:	90 91 25 07 	lds	r25, 0x0725
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	5f e3       	ldi	r21, 0x3F	; 63
     266:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3>
     26a:	29 e9       	ldi	r18, 0x99	; 153
     26c:	3b eb       	ldi	r19, 0xBB	; 187
     26e:	46 e1       	ldi	r20, 0x16	; 22
     270:	5b e3       	ldi	r21, 0x3B	; 59
     272:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3>
     276:	26 2f       	mov	r18, r22
     278:	37 2f       	mov	r19, r23
     27a:	f8 2f       	mov	r31, r24
     27c:	e9 2f       	mov	r30, r25
     27e:	46 2f       	mov	r20, r22
     280:	57 2f       	mov	r21, r23
     282:	68 2f       	mov	r22, r24
     284:	79 2f       	mov	r23, r25
     286:	40 93 1c 07 	sts	0x071C, r20
     28a:	50 93 1d 07 	sts	0x071D, r21
     28e:	60 93 1e 07 	sts	0x071E, r22
     292:	70 93 1f 07 	sts	0x071F, r23
	return afstand;
}
     296:	82 2f       	mov	r24, r18
     298:	93 2f       	mov	r25, r19
     29a:	af 2f       	mov	r26, r31
     29c:	be 2f       	mov	r27, r30
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	08 95       	ret

000002a4 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <get_temp_adc>
     2a8:	68 2f       	mov	r22, r24
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__floatsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 ea       	ldi	r20, 0xA0	; 160
     2ba:	5b e3       	ldi	r21, 0x3B	; 59
     2bc:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3>
     2c0:	26 2f       	mov	r18, r22
     2c2:	37 2f       	mov	r19, r23
     2c4:	f8 2f       	mov	r31, r24
     2c6:	e9 2f       	mov	r30, r25
     2c8:	46 2f       	mov	r20, r22
     2ca:	57 2f       	mov	r21, r23
     2cc:	68 2f       	mov	r22, r24
     2ce:	79 2f       	mov	r23, r25
     2d0:	40 93 2a 07 	sts	0x072A, r20
     2d4:	50 93 2b 07 	sts	0x072B, r21
     2d8:	60 93 2c 07 	sts	0x072C, r22
     2dc:	70 93 2d 07 	sts	0x072D, r23
	ADCRes = (Volt - 0.5) * 100;
     2e0:	82 2f       	mov	r24, r18
     2e2:	93 2f       	mov	r25, r19
     2e4:	af 2f       	mov	r26, r31
     2e6:	be 2f       	mov	r27, r30
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	5f e3       	ldi	r21, 0x3F	; 63
     2f4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__subsf3>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	48 ec       	ldi	r20, 0xC8	; 200
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3>
     304:	26 2f       	mov	r18, r22
     306:	37 2f       	mov	r19, r23
     308:	f8 2f       	mov	r31, r24
     30a:	e9 2f       	mov	r30, r25
     30c:	46 2f       	mov	r20, r22
     30e:	57 2f       	mov	r21, r23
     310:	68 2f       	mov	r22, r24
     312:	79 2f       	mov	r23, r25
     314:	40 93 4e 07 	sts	0x074E, r20
     318:	50 93 4f 07 	sts	0x074F, r21
     31c:	60 93 50 07 	sts	0x0750, r22
     320:	70 93 51 07 	sts	0x0751, r23
	return ADCRes;
}
     324:	82 2f       	mov	r24, r18
     326:	93 2f       	mov	r25, r19
     328:	af 2f       	mov	r26, r31
     32a:	be 2f       	mov	r27, r30
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	08 95       	ret

00000332 <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <get_light_adc>
	return temp;
}
     336:	08 95       	ret

00000338 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     33c:	9c e9       	ldi	r25, 0x9C	; 156
     33e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     340:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     344:	85 b5       	in	r24, 0x25	; 37
     346:	85 60       	ori	r24, 0x05	; 5
     348:	85 bd       	out	0x25, r24	; 37
}
     34a:	08 95       	ret

0000034c <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     34c:	0e 94 ef 07 	call	0xfde	; 0xfde <init_scherm_ports>
	init_timer();
     350:	0e 94 9c 01 	call	0x338	; 0x338 <init_timer>
	ser_init();
     354:	0e 94 63 07 	call	0xec6	; 0xec6 <ser_init>
	ADC_init();
     358:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	
	init_ports();
     35c:	0e 94 04 01 	call	0x208	; 0x208 <init_ports>
	init_ext_int();
     360:	0e 94 09 01 	call	0x212	; 0x212 <init_ext_int>
	sei(); // set external interrupt
     364:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     366:	0e 94 2b 05 	call	0xa56	; 0xa56 <protocolCom>
     36a:	fd cf       	rjmp	.-6      	; 0x366 <main+0x1a>

0000036c <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	8f 93       	push	r24
     378:	9f 93       	push	r25
	extraTime1++;
     37a:	80 91 16 07 	lds	r24, 0x0716
     37e:	90 91 17 07 	lds	r25, 0x0717
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 17 07 	sts	0x0717, r25
     388:	80 93 16 07 	sts	0x0716, r24
	if(extraTime1>100){
     38c:	80 91 16 07 	lds	r24, 0x0716
     390:	90 91 17 07 	lds	r25, 0x0717
     394:	85 36       	cpi	r24, 0x65	; 101
     396:	91 05       	cpc	r25, r1
     398:	6c f0       	brlt	.+26     	; 0x3b4 <__vector_14+0x48>
		timerVariable++;
     39a:	80 91 14 07 	lds	r24, 0x0714
     39e:	90 91 15 07 	lds	r25, 0x0715
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 15 07 	sts	0x0715, r25
     3a8:	80 93 14 07 	sts	0x0714, r24
		extraTime1 = 0;
     3ac:	10 92 17 07 	sts	0x0717, r1
     3b0:	10 92 16 07 	sts	0x0716, r1
		index++;
		
		// Resets de timer en de Totale timer ticks
		extraTime = 0;
	}*/
}
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <__vector_2>:

ISR(INT1_vect)
{
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	2f 93       	push	r18
     3ce:	3f 93       	push	r19
     3d0:	4f 93       	push	r20
     3d2:	5f 93       	push	r21
     3d4:	6f 93       	push	r22
     3d6:	7f 93       	push	r23
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
	if(i == 1)
     3e8:	80 91 20 07 	lds	r24, 0x0720
     3ec:	90 91 21 07 	lds	r25, 0x0721
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	91 05       	cpc	r25, r1
     3f4:	d1 f4       	brne	.+52     	; 0x42a <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     3f6:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     3fa:	c4 e8       	ldi	r28, 0x84	; 132
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
     3fe:	68 81       	ld	r22, Y
     400:	79 81       	ldd	r23, Y+1	; 0x01
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__floatunsisf>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	80 93 22 07 	sts	0x0722, r24
     412:	90 93 23 07 	sts	0x0723, r25
     416:	a0 93 24 07 	sts	0x0724, r26
     41a:	b0 93 25 07 	sts	0x0725, r27
		TCNT1 = 0; //Reset duration
     41e:	19 82       	std	Y+1, r1	; 0x01
     420:	18 82       	st	Y, r1
		i = 0; //Reset counter
     422:	10 92 21 07 	sts	0x0721, r1
     426:	10 92 20 07 	sts	0x0720, r1
	}

	if(i==0)
     42a:	80 91 20 07 	lds	r24, 0x0720
     42e:	90 91 21 07 	lds	r25, 0x0721
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	59 f4       	brne	.+22     	; 0x44c <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     436:	e1 e8       	ldi	r30, 0x81	; 129
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
		i = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 21 07 	sts	0x0721, r25
     448:	80 93 20 07 	sts	0x0720, r24
	}
     44c:	ff 91       	pop	r31
     44e:	ef 91       	pop	r30
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	bf 91       	pop	r27
     456:	af 91       	pop	r26
     458:	9f 91       	pop	r25
     45a:	8f 91       	pop	r24
     45c:	7f 91       	pop	r23
     45e:	6f 91       	pop	r22
     460:	5f 91       	pop	r21
     462:	4f 91       	pop	r20
     464:	3f 91       	pop	r19
     466:	2f 91       	pop	r18
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	0f 90       	pop	r0
     46e:	1f 90       	pop	r1
     470:	18 95       	reti

00000472 <return_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	void return_maxUnroll(void){
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     47e:	e0 90 86 06 	lds	r14, 0x0686
     482:	f0 90 87 06 	lds	r15, 0x0687
     486:	80 91 92 06 	lds	r24, 0x0692
     48a:	90 91 93 06 	lds	r25, 0x0693
     48e:	99 23       	and	r25, r25
     490:	bc f0       	brlt	.+46     	; 0x4c0 <return_maxUnroll+0x4e>
     492:	01 e0       	ldi	r16, 0x01	; 1
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     49a:	c7 01       	movw	r24, r14
     49c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     4a0:	c0 5f       	subi	r28, 0xF0	; 240
     4a2:	d7 4f       	sbci	r29, 0xF7	; 247
     4a4:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	void return_maxUnroll(void){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     4a6:	08 94       	sec
     4a8:	e1 1c       	adc	r14, r1
     4aa:	f1 1c       	adc	r15, r1
     4ac:	e8 01       	movw	r28, r16
     4ae:	0f 5f       	subi	r16, 0xFF	; 255
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	80 91 92 06 	lds	r24, 0x0692
     4b6:	90 91 93 06 	lds	r25, 0x0693
     4ba:	8c 17       	cp	r24, r28
     4bc:	9d 07       	cpc	r25, r29
     4be:	6c f7       	brge	.-38     	; 0x49a <return_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("203 MAX_UNROLL: "), ser_writeln(maxUnrollRes);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     4c8:	80 e1       	ldi	r24, 0x10	; 16
     4ca:	98 e0       	ldi	r25, 0x08	; 8
     4cc:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <return_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	void return_minUnroll(void){
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     4ea:	e0 90 88 06 	lds	r14, 0x0688
     4ee:	f0 90 89 06 	lds	r15, 0x0689
     4f2:	80 91 94 06 	lds	r24, 0x0694
     4f6:	90 91 95 06 	lds	r25, 0x0695
     4fa:	99 23       	and	r25, r25
     4fc:	bc f0       	brlt	.+46     	; 0x52c <return_minUnroll+0x4e>
     4fe:	01 e0       	ldi	r16, 0x01	; 1
     500:	10 e0       	ldi	r17, 0x00	; 0
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     506:	c7 01       	movw	r24, r14
     508:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     50c:	ce 5a       	subi	r28, 0xAE	; 174
     50e:	d8 4f       	sbci	r29, 0xF8	; 248
     510:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	void return_minUnroll(void){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     512:	08 94       	sec
     514:	e1 1c       	adc	r14, r1
     516:	f1 1c       	adc	r15, r1
     518:	e8 01       	movw	r28, r16
     51a:	0f 5f       	subi	r16, 0xFF	; 255
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	80 91 94 06 	lds	r24, 0x0694
     522:	90 91 95 06 	lds	r25, 0x0695
     526:	8c 17       	cp	r24, r28
     528:	9d 07       	cpc	r25, r29
     52a:	6c f7       	brge	.-38     	; 0x506 <return_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("203, MIN_UNROLL: "), ser_writeln(minUnrollRes);
     52c:	81 e1       	ldi	r24, 0x11	; 17
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     534:	82 e5       	ldi	r24, 0x52	; 82
     536:	97 e0       	ldi	r25, 0x07	; 7
     538:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
	}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <return_grensLicht>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	void return_grensLicht(void){
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     556:	e0 90 8a 06 	lds	r14, 0x068A
     55a:	f0 90 8b 06 	lds	r15, 0x068B
     55e:	80 91 96 06 	lds	r24, 0x0696
     562:	90 91 97 06 	lds	r25, 0x0697
     566:	99 23       	and	r25, r25
     568:	bc f0       	brlt	.+46     	; 0x598 <return_grensLicht+0x4e>
     56a:	01 e0       	ldi	r16, 0x01	; 1
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	c0 e0       	ldi	r28, 0x00	; 0
     570:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     572:	c7 01       	movw	r24, r14
     574:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     578:	ce 51       	subi	r28, 0x1E	; 30
     57a:	d8 4f       	sbci	r29, 0xF8	; 248
     57c:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	void return_grensLicht(void){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     57e:	08 94       	sec
     580:	e1 1c       	adc	r14, r1
     582:	f1 1c       	adc	r15, r1
     584:	e8 01       	movw	r28, r16
     586:	0f 5f       	subi	r16, 0xFF	; 255
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	80 91 96 06 	lds	r24, 0x0696
     58e:	90 91 97 06 	lds	r25, 0x0697
     592:	8c 17       	cp	r24, r28
     594:	9d 07       	cpc	r25, r29
     596:	6c f7       	brge	.-38     	; 0x572 <return_grensLicht+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 licht_TEMP:" ), ser_writeln(grens_lichtintRes);
     598:	83 e2       	ldi	r24, 0x23	; 35
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     5a0:	82 ee       	ldi	r24, 0xE2	; 226
     5a2:	97 e0       	ldi	r25, 0x07	; 7
     5a4:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
	}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	08 95       	ret

000005b6 <return_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	void return_grensTemp(void){
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5c6:	e0 90 8c 06 	lds	r14, 0x068C
     5ca:	f0 90 8d 06 	lds	r15, 0x068D
     5ce:	80 91 98 06 	lds	r24, 0x0698
     5d2:	90 91 99 06 	lds	r25, 0x0699
     5d6:	99 23       	and	r25, r25
     5d8:	ec f0       	brlt	.+58     	; 0x614 <return_grensTemp+0x5e>
     5da:	01 e0       	ldi	r16, 0x01	; 1
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	c0 e0       	ldi	r28, 0x00	; 0
     5e0:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     5e2:	0f 2e       	mov	r0, r31
     5e4:	fd e8       	ldi	r31, 0x8D	; 141
     5e6:	cf 2e       	mov	r12, r31
     5e8:	f7 e0       	ldi	r31, 0x07	; 7
     5ea:	df 2e       	mov	r13, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	c7 01       	movw	r24, r14
     5f0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     5f4:	cc 0d       	add	r28, r12
     5f6:	dd 1d       	adc	r29, r13
     5f8:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	void return_grensTemp(void){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5fa:	08 94       	sec
     5fc:	e1 1c       	adc	r14, r1
     5fe:	f1 1c       	adc	r15, r1
     600:	e8 01       	movw	r28, r16
     602:	0f 5f       	subi	r16, 0xFF	; 255
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	80 91 98 06 	lds	r24, 0x0698
     60a:	90 91 99 06 	lds	r25, 0x0699
     60e:	8c 17       	cp	r24, r28
     610:	9d 07       	cpc	r25, r29
     612:	6c f7       	brge	.-38     	; 0x5ee <return_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
     614:	83 e3       	ldi	r24, 0x33	; 51
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     61c:	8d e8       	ldi	r24, 0x8D	; 141
     61e:	97 e0       	ldi	r25, 0x07	; 7
     620:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
	}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <return_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	void return_Versie(void){
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     646:	e0 90 8e 06 	lds	r14, 0x068E
     64a:	f0 90 8f 06 	lds	r15, 0x068F
     64e:	80 91 9a 06 	lds	r24, 0x069A
     652:	90 91 9b 06 	lds	r25, 0x069B
     656:	99 23       	and	r25, r25
     658:	ec f0       	brlt	.+58     	; 0x694 <return_Versie+0x5e>
     65a:	01 e0       	ldi	r16, 0x01	; 1
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     662:	0f 2e       	mov	r0, r31
     664:	fa ed       	ldi	r31, 0xDA	; 218
     666:	cf 2e       	mov	r12, r31
     668:	f7 e0       	ldi	r31, 0x07	; 7
     66a:	df 2e       	mov	r13, r31
     66c:	f0 2d       	mov	r31, r0
     66e:	c7 01       	movw	r24, r14
     670:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     674:	cc 0d       	add	r28, r12
     676:	dd 1d       	adc	r29, r13
     678:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	void return_Versie(void){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     67a:	08 94       	sec
     67c:	e1 1c       	adc	r14, r1
     67e:	f1 1c       	adc	r15, r1
     680:	e8 01       	movw	r28, r16
     682:	0f 5f       	subi	r16, 0xFF	; 255
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	80 91 9a 06 	lds	r24, 0x069A
     68a:	90 91 9b 06 	lds	r25, 0x069B
     68e:	8c 17       	cp	r24, r28
     690:	9d 07       	cpc	r25, r29
     692:	6c f7       	brge	.-38     	; 0x66e <return_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 versie: "), ser_writeln(versieRes);
     694:	83 e4       	ldi	r24, 0x43	; 67
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     69c:	8a ed       	ldi	r24, 0xDA	; 218
     69e:	97 e0       	ldi	r25, 0x07	; 7
     6a0:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
	}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	08 95       	ret

000006b6 <return_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	void return_Locatie(){
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6c6:	e0 90 90 06 	lds	r14, 0x0690
     6ca:	f0 90 91 06 	lds	r15, 0x0691
     6ce:	80 91 9c 06 	lds	r24, 0x069C
     6d2:	90 91 9d 06 	lds	r25, 0x069D
     6d6:	99 23       	and	r25, r25
     6d8:	ec f0       	brlt	.+58     	; 0x714 <return_Locatie+0x5e>
     6da:	01 e0       	ldi	r16, 0x01	; 1
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	c0 e0       	ldi	r28, 0x00	; 0
     6e0:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     6e2:	0f 2e       	mov	r0, r31
     6e4:	f1 e6       	ldi	r31, 0x61	; 97
     6e6:	cf 2e       	mov	r12, r31
     6e8:	f7 e0       	ldi	r31, 0x07	; 7
     6ea:	df 2e       	mov	r13, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	c7 01       	movw	r24, r14
     6f0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     6f4:	cc 0d       	add	r28, r12
     6f6:	dd 1d       	adc	r29, r13
     6f8:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	void return_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6fa:	08 94       	sec
     6fc:	e1 1c       	adc	r14, r1
     6fe:	f1 1c       	adc	r15, r1
     700:	e8 01       	movw	r28, r16
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
     706:	80 91 9c 06 	lds	r24, 0x069C
     70a:	90 91 9d 06 	lds	r25, 0x069D
     70e:	8c 17       	cp	r24, r28
     710:	9d 07       	cpc	r25, r29
     712:	6c f7       	brge	.-38     	; 0x6ee <return_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 "), ser_writeln(locatieRes);
     714:	80 e5       	ldi	r24, 0x50	; 80
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     71c:	81 e6       	ldi	r24, 0x61	; 97
     71e:	97 e0       	ldi	r25, 0x07	; 7
     720:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
	}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	08 95       	ret

00000736 <return_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	void return_Naam(){
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     73e:	c0 91 26 07 	lds	r28, 0x0726
     742:	d0 91 27 07 	lds	r29, 0x0727
     746:	80 91 9e 06 	lds	r24, 0x069E
     74a:	90 91 9f 06 	lds	r25, 0x069F
     74e:	8c 17       	cp	r24, r28
     750:	9d 07       	cpc	r25, r29
     752:	8c f0       	brlt	.+34     	; 0x776 <return_Naam+0x40>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	void return_Naam(){
     754:	8e 01       	movw	r16, r28
     756:	00 57       	subi	r16, 0x70	; 112
     758:	18 4f       	sbci	r17, 0xF8	; 248
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__eerd_byte_m328p>
     760:	f8 01       	movw	r30, r16
     762:	81 93       	st	Z+, r24
     764:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	void return_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     766:	21 96       	adiw	r28, 0x01	; 1
     768:	80 91 9e 06 	lds	r24, 0x069E
     76c:	90 91 9f 06 	lds	r25, 0x069F
     770:	8c 17       	cp	r24, r28
     772:	9d 07       	cpc	r25, r29
     774:	94 f7       	brge	.-28     	; 0x75a <return_Naam+0x24>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		ser_write("202 "),  ser_writeln(naamRes);
     776:	80 e5       	ldi	r24, 0x50	; 80
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
     77e:	80 e9       	ldi	r24, 0x90	; 144
     780:	97 e0       	ldi	r25, 0x07	; 7
     782:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
	}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <set_maxUnroll>:
		}
		ser_write("203, MIN_UNROLL: "), ser_writeln(minUnrollRes);
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     79a:	c0 91 86 06 	lds	r28, 0x0686
     79e:	d0 91 87 06 	lds	r29, 0x0687
     7a2:	80 91 92 06 	lds	r24, 0x0692
     7a6:	90 91 93 06 	lds	r25, 0x0693
     7aa:	99 23       	and	r25, r25
     7ac:	cc f0       	brlt	.+50     	; 0x7e0 <set_maxUnroll+0x50>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     7b2:	f8 01       	movw	r30, r16
     7b4:	e8 0f       	add	r30, r24
     7b6:	f9 1f       	adc	r31, r25
     7b8:	ce 01       	movw	r24, r28
     7ba:	60 81       	ld	r22, Z
     7bc:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
		ser_write("203, MIN_UNROLL: "), ser_writeln(minUnrollRes);
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     7c0:	21 96       	adiw	r28, 0x01	; 1
     7c2:	80 91 86 06 	lds	r24, 0x0686
     7c6:	90 91 87 06 	lds	r25, 0x0687
     7ca:	9e 01       	movw	r18, r28
     7cc:	28 1b       	sub	r18, r24
     7ce:	39 0b       	sbc	r19, r25
     7d0:	c9 01       	movw	r24, r18
     7d2:	20 91 92 06 	lds	r18, 0x0692
     7d6:	30 91 93 06 	lds	r19, 0x0693
     7da:	28 17       	cp	r18, r24
     7dc:	39 07       	cpc	r19, r25
     7de:	4c f7       	brge	.-46     	; 0x7b2 <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <set_minUnroll>:
		}
		ser_write("202 licht_TEMP:" ), ser_writeln(grens_lichtintRes);
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     7f4:	c0 91 88 06 	lds	r28, 0x0688
     7f8:	d0 91 89 06 	lds	r29, 0x0689
     7fc:	80 91 94 06 	lds	r24, 0x0694
     800:	90 91 95 06 	lds	r25, 0x0695
     804:	99 23       	and	r25, r25
     806:	cc f0       	brlt	.+50     	; 0x83a <set_minUnroll+0x50>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     80c:	f8 01       	movw	r30, r16
     80e:	e8 0f       	add	r30, r24
     810:	f9 1f       	adc	r31, r25
     812:	ce 01       	movw	r24, r28
     814:	60 81       	ld	r22, Z
     816:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
		ser_write("202 licht_TEMP:" ), ser_writeln(grens_lichtintRes);
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	80 91 88 06 	lds	r24, 0x0688
     820:	90 91 89 06 	lds	r25, 0x0689
     824:	9e 01       	movw	r18, r28
     826:	28 1b       	sub	r18, r24
     828:	39 0b       	sbc	r19, r25
     82a:	c9 01       	movw	r24, r18
     82c:	20 91 94 06 	lds	r18, 0x0694
     830:	30 91 95 06 	lds	r19, 0x0695
     834:	28 17       	cp	r18, r24
     836:	39 07       	cpc	r19, r25
     838:	4c f7       	brge	.-46     	; 0x80c <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <set_grensLicht>:
		}
		ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84e:	c0 91 8a 06 	lds	r28, 0x068A
     852:	d0 91 8b 06 	lds	r29, 0x068B
     856:	80 91 96 06 	lds	r24, 0x0696
     85a:	90 91 97 06 	lds	r25, 0x0697
     85e:	99 23       	and	r25, r25
     860:	cc f0       	brlt	.+50     	; 0x894 <set_grensLicht+0x50>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     866:	f8 01       	movw	r30, r16
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	ce 01       	movw	r24, r28
     86e:	60 81       	ld	r22, Z
     870:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
		ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     874:	21 96       	adiw	r28, 0x01	; 1
     876:	80 91 8a 06 	lds	r24, 0x068A
     87a:	90 91 8b 06 	lds	r25, 0x068B
     87e:	9e 01       	movw	r18, r28
     880:	28 1b       	sub	r18, r24
     882:	39 0b       	sbc	r19, r25
     884:	c9 01       	movw	r24, r18
     886:	20 91 96 06 	lds	r18, 0x0696
     88a:	30 91 97 06 	lds	r19, 0x0697
     88e:	28 17       	cp	r18, r24
     890:	39 07       	cpc	r19, r25
     892:	4c f7       	brge	.-46     	; 0x866 <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <set_grensTemp>:
		}
		ser_write("202 versie: "), ser_writeln(versieRes);
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8a8:	c0 91 8c 06 	lds	r28, 0x068C
     8ac:	d0 91 8d 06 	lds	r29, 0x068D
     8b0:	80 91 98 06 	lds	r24, 0x0698
     8b4:	90 91 99 06 	lds	r25, 0x0699
     8b8:	99 23       	and	r25, r25
     8ba:	cc f0       	brlt	.+50     	; 0x8ee <set_grensTemp+0x50>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     8c0:	f8 01       	movw	r30, r16
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	ce 01       	movw	r24, r28
     8c8:	60 81       	ld	r22, Z
     8ca:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
		ser_write("202 versie: "), ser_writeln(versieRes);
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8ce:	21 96       	adiw	r28, 0x01	; 1
     8d0:	80 91 8c 06 	lds	r24, 0x068C
     8d4:	90 91 8d 06 	lds	r25, 0x068D
     8d8:	9e 01       	movw	r18, r28
     8da:	28 1b       	sub	r18, r24
     8dc:	39 0b       	sbc	r19, r25
     8de:	c9 01       	movw	r24, r18
     8e0:	20 91 98 06 	lds	r18, 0x0698
     8e4:	30 91 99 06 	lds	r19, 0x0699
     8e8:	28 17       	cp	r18, r24
     8ea:	39 07       	cpc	r19, r25
     8ec:	4c f7       	brge	.-46     	; 0x8c0 <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <set_Versie>:
		}
		ser_write("202 "), ser_writeln(locatieRes);
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     902:	c0 91 8e 06 	lds	r28, 0x068E
     906:	d0 91 8f 06 	lds	r29, 0x068F
     90a:	80 91 9a 06 	lds	r24, 0x069A
     90e:	90 91 9b 06 	lds	r25, 0x069B
     912:	99 23       	and	r25, r25
     914:	cc f0       	brlt	.+50     	; 0x948 <__stack+0x49>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     91a:	f8 01       	movw	r30, r16
     91c:	e8 0f       	add	r30, r24
     91e:	f9 1f       	adc	r31, r25
     920:	ce 01       	movw	r24, r28
     922:	60 81       	ld	r22, Z
     924:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
		ser_write("202 "), ser_writeln(locatieRes);
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	80 91 8e 06 	lds	r24, 0x068E
     92e:	90 91 8f 06 	lds	r25, 0x068F
     932:	9e 01       	movw	r18, r28
     934:	28 1b       	sub	r18, r24
     936:	39 0b       	sbc	r19, r25
     938:	c9 01       	movw	r24, r18
     93a:	20 91 9a 06 	lds	r18, 0x069A
     93e:	30 91 9b 06 	lds	r19, 0x069B
     942:	28 17       	cp	r18, r24
     944:	39 07       	cpc	r19, r25
     946:	4c f7       	brge	.-46     	; 0x91a <__stack+0x1b>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <set_Locatie>:
		}
		ser_write("202 "),  ser_writeln(naamRes);
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     95c:	c0 91 90 06 	lds	r28, 0x0690
     960:	d0 91 91 06 	lds	r29, 0x0691
     964:	80 91 9c 06 	lds	r24, 0x069C
     968:	90 91 9d 06 	lds	r25, 0x069D
     96c:	99 23       	and	r25, r25
     96e:	cc f0       	brlt	.+50     	; 0x9a2 <set_Locatie+0x50>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     974:	f8 01       	movw	r30, r16
     976:	e8 0f       	add	r30, r24
     978:	f9 1f       	adc	r31, r25
     97a:	ce 01       	movw	r24, r28
     97c:	60 81       	ld	r22, Z
     97e:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
		ser_write("202 "),  ser_writeln(naamRes);
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     982:	21 96       	adiw	r28, 0x01	; 1
     984:	80 91 90 06 	lds	r24, 0x0690
     988:	90 91 91 06 	lds	r25, 0x0691
     98c:	9e 01       	movw	r18, r28
     98e:	28 1b       	sub	r18, r24
     990:	39 0b       	sbc	r19, r25
     992:	c9 01       	movw	r24, r18
     994:	20 91 9c 06 	lds	r18, 0x069C
     998:	30 91 9d 06 	lds	r19, 0x069D
     99c:	28 17       	cp	r18, r24
     99e:	39 07       	cpc	r19, r25
     9a0:	4c f7       	brge	.-46     	; 0x974 <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <set_Naam>:
			}
			
			
	//________________________________________________________________________________________//
	//Zetten van naam.
	void set_Naam(char* n){
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     9b4:	c0 91 26 07 	lds	r28, 0x0726
     9b8:	d0 91 27 07 	lds	r29, 0x0727
     9bc:	20 91 9e 06 	lds	r18, 0x069E
     9c0:	30 91 9f 06 	lds	r19, 0x069F
     9c4:	2c 17       	cp	r18, r28
     9c6:	3d 07       	cpc	r19, r29
     9c8:	8c f0       	brlt	.+34     	; 0x9ec <set_Naam+0x40>
			}
			
			
	//________________________________________________________________________________________//
	//Zetten van naam.
	void set_Naam(char* n){
     9ca:	8c 01       	movw	r16, r24
     9cc:	0c 0f       	add	r16, r28
     9ce:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     9d0:	f8 01       	movw	r30, r16
     9d2:	61 91       	ld	r22, Z+
     9d4:	8f 01       	movw	r16, r30
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 06 10 	call	0x200c	; 0x200c <__eeupd_byte_m328p>
			
			
	//________________________________________________________________________________________//
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     9dc:	21 96       	adiw	r28, 0x01	; 1
     9de:	80 91 9e 06 	lds	r24, 0x069E
     9e2:	90 91 9f 06 	lds	r25, 0x069F
     9e6:	8c 17       	cp	r24, r28
     9e8:	9d 07       	cpc	r25, r29
     9ea:	94 f7       	brge	.-28     	; 0x9d0 <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <get_grens_light>:
double max_unroll= 20;
double min_unroll= 4;

uint8_t get_grens_light(){
	return grens_light;
}	
     9f6:	80 91 81 06 	lds	r24, 0x0681
     9fa:	08 95       	ret

000009fc <get_grens_temp>:

double get_grens_temp(){
	return grens_temp;
}
     9fc:	50 91 82 06 	lds	r21, 0x0682
     a00:	40 91 83 06 	lds	r20, 0x0683
     a04:	30 91 84 06 	lds	r19, 0x0684
     a08:	20 91 85 06 	lds	r18, 0x0685
     a0c:	85 2f       	mov	r24, r21
     a0e:	94 2f       	mov	r25, r20
     a10:	a3 2f       	mov	r26, r19
     a12:	b2 2f       	mov	r27, r18
     a14:	bc 01       	movw	r22, r24
     a16:	cd 01       	movw	r24, r26
     a18:	08 95       	ret

00000a1a <get_max_unroll>:

double get_max_unroll(){
	return max_unroll;
}
     a1a:	50 91 7d 06 	lds	r21, 0x067D
     a1e:	40 91 7e 06 	lds	r20, 0x067E
     a22:	30 91 7f 06 	lds	r19, 0x067F
     a26:	20 91 80 06 	lds	r18, 0x0680
     a2a:	85 2f       	mov	r24, r21
     a2c:	94 2f       	mov	r25, r20
     a2e:	a3 2f       	mov	r26, r19
     a30:	b2 2f       	mov	r27, r18
     a32:	bc 01       	movw	r22, r24
     a34:	cd 01       	movw	r24, r26
     a36:	08 95       	ret

00000a38 <get_min_unroll>:
double get_min_unroll(){
	return min_unroll;
}
     a38:	50 91 79 06 	lds	r21, 0x0679
     a3c:	40 91 7a 06 	lds	r20, 0x067A
     a40:	30 91 7b 06 	lds	r19, 0x067B
     a44:	20 91 7c 06 	lds	r18, 0x067C
     a48:	85 2f       	mov	r24, r21
     a4a:	94 2f       	mov	r25, r20
     a4c:	a3 2f       	mov	r26, r19
     a4e:	b2 2f       	mov	r27, r18
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	08 95       	ret

00000a56 <protocolCom>:
//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     a56:	05 e5       	ldi	r16, 0x55	; 85
     a58:	11 e0       	ldi	r17, 0x01	; 1
		ser_readln(in_buf, sizeof(in_buf), 1);
     a5a:	cc eb       	ldi	r28, 0xBC	; 188
     a5c:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     a5e:	0f 2e       	mov	r0, r31
     a60:	fe e6       	ldi	r31, 0x6E	; 110
     a62:	ef 2e       	mov	r14, r31
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	ff 2e       	mov	r15, r31
     a68:	f0 2d       	mov	r31, r0
				} if((getOut() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f6 e9       	ldi	r31, 0x96	; 150
     a6e:	af 2e       	mov	r10, r31
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	bf 2e       	mov	r11, r31
     a74:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     a76:	0f 2e       	mov	r0, r31
     a78:	fd eb       	ldi	r31, 0xBD	; 189
     a7a:	cf 2e       	mov	r12, r31
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	df 2e       	mov	r13, r31
     a80:	f0 2d       	mov	r31, r0

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     a82:	0f 2e       	mov	r0, r31
     a84:	f4 ec       	ldi	r31, 0xC4	; 196
     a86:	8f 2e       	mov	r8, r31
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	9f 2e       	mov	r9, r31
     a8c:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     a8e:	0f 2e       	mov	r0, r31
     a90:	f0 ee       	ldi	r31, 0xE0	; 224
     a92:	4f 2e       	mov	r4, r31
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	5f 2e       	mov	r5, r31
     a98:	f0 2d       	mov	r31, r0
				return_grensTemp();
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
			}
			else if(strcmp("SET_GRENS_TEMP(Z)", in_buf) == 0){
     a9a:	0f 2e       	mov	r0, r31
     a9c:	ff ee       	ldi	r31, 0xEF	; 239
     a9e:	2f 2e       	mov	r2, r31
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	3f 2e       	mov	r3, r31
     aa4:	f0 2d       	mov	r31, r0
	return min_unroll;
}
//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
		ser_readln(in_buf, sizeof(in_buf), 1);
     aac:	ce 01       	movw	r24, r28
     aae:	6e e1       	ldi	r22, 0x1E	; 30
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	41 e0       	ldi	r20, 0x01	; 1
     ab4:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ab8:	c7 01       	movw	r24, r14
     aba:	be 01       	movw	r22, r28
     abc:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     ac0:	28 2f       	mov	r18, r24
     ac2:	39 2f       	mov	r19, r25
     ac4:	21 15       	cp	r18, r1
     ac6:	31 05       	cpc	r19, r1
     ac8:	a1 f4       	brne	.+40     	; 0xaf2 <protocolCom+0x9c>
				if ((getOut() % 2) == 1){
     aca:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <getOut>
     ace:	62 e0       	ldi	r22, 0x02	; 2
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__divmodhi4>
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	91 05       	cpc	r25, r1
     ada:	21 f4       	brne	.+8      	; 0xae4 <protocolCom+0x8e>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     adc:	85 e7       	ldi	r24, 0x75	; 117
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				} if((getOut() % 2) == 0){
     ae4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <getOut>
     ae8:	80 fd       	sbrc	r24, 0
     aea:	1f c0       	rjmp	.+62     	; 0xb2a <protocolCom+0xd4>
					uitrollen();
     aec:	0e 94 fb 07 	call	0xff6	; 0xff6 <uitrollen>
     af0:	1c c0       	rjmp	.+56     	; 0xb2a <protocolCom+0xd4>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     af2:	c5 01       	movw	r24, r10
     af4:	be 01       	movw	r22, r28
     af6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     afa:	28 2f       	mov	r18, r24
     afc:	39 2f       	mov	r19, r25
     afe:	21 15       	cp	r18, r1
     b00:	31 05       	cpc	r19, r1
     b02:	99 f4       	brne	.+38     	; 0xb2a <protocolCom+0xd4>
				if ((getIn() % 2) == 0){
     b04:	0e 94 e5 07 	call	0xfca	; 0xfca <getIn>
     b08:	80 fd       	sbrc	r24, 0
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <protocolCom+0xbe>
					ser_writeln("999 Zonnescherm is al opgerold!");
     b0c:	8d e9       	ldi	r24, 0x9D	; 157
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				} if((getIn() % 2) == 1){
     b14:	0e 94 e5 07 	call	0xfca	; 0xfca <getIn>
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__divmodhi4>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	91 05       	cpc	r25, r1
     b24:	11 f4       	brne	.+4      	; 0xb2a <protocolCom+0xd4>
					oprollen();
     b26:	0e 94 73 08 	call	0x10e6	; 0x10e6 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b2a:	c6 01       	movw	r24, r12
     b2c:	be 01       	movw	r22, r28
     b2e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     b32:	28 2f       	mov	r18, r24
     b34:	39 2f       	mov	r19, r25
     b36:	21 15       	cp	r18, r1
     b38:	31 05       	cpc	r19, r1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <protocolCom+0xe8>
     b3c:	b4 cf       	rjmp	.-152    	; 0xaa6 <protocolCom+0x50>

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     b3e:	c4 01       	movw	r24, r8
     b40:	be 01       	movw	r22, r28
     b42:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     b46:	28 2f       	mov	r18, r24
     b48:	39 2f       	mov	r19, r25
     b4a:	21 15       	cp	r18, r1
     b4c:	31 05       	cpc	r19, r1
     b4e:	e1 f4       	brne	.+56     	; 0xb88 <protocolCom+0x132>
				printf("202 TEMP= % 6.2f \n", getTemp());
     b50:	0e 94 52 01 	call	0x2a4	; 0x2a4 <getTemp>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	00 d0       	rcall	.+0      	; 0xb5a <protocolCom+0x104>
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <protocolCom+0x106>
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <protocolCom+0x108>
     b5e:	2d ec       	ldi	r18, 0xCD	; 205
     b60:	31 e0       	ldi	r19, 0x01	; 1
     b62:	ed b7       	in	r30, 0x3d	; 61
     b64:	fe b7       	in	r31, 0x3e	; 62
     b66:	32 83       	std	Z+2, r19	; 0x02
     b68:	21 83       	std	Z+1, r18	; 0x01
     b6a:	83 83       	std	Z+3, r24	; 0x03
     b6c:	94 83       	std	Z+4, r25	; 0x04
     b6e:	a5 83       	std	Z+5, r26	; 0x05
     b70:	b6 83       	std	Z+6, r27	; 0x06
     b72:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
     b76:	8d b7       	in	r24, 0x3d	; 61
     b78:	9e b7       	in	r25, 0x3e	; 62
     b7a:	06 96       	adiw	r24, 0x06	; 6
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	9e bf       	out	0x3e, r25	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	8d bf       	out	0x3d, r24	; 61
     b86:	8f cf       	rjmp	.-226    	; 0xaa6 <protocolCom+0x50>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     b88:	c2 01       	movw	r24, r4
     b8a:	be 01       	movw	r22, r28
     b8c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     b90:	28 2f       	mov	r18, r24
     b92:	39 2f       	mov	r19, r25
     b94:	21 15       	cp	r18, r1
     b96:	31 05       	cpc	r19, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <protocolCom+0x14a>
				return_grensTemp();
     b9a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <return_grensTemp>
     b9e:	83 cf       	rjmp	.-250    	; 0xaa6 <protocolCom+0x50>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
			}
			else if(strcmp("SET_GRENS_TEMP(Z)", in_buf) == 0){
     ba0:	c1 01       	movw	r24, r2
     ba2:	be 01       	movw	r22, r28
     ba4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     ba8:	28 2f       	mov	r18, r24
     baa:	39 2f       	mov	r19, r25
     bac:	21 15       	cp	r18, r1
     bae:	31 05       	cpc	r19, r1
     bb0:	a1 f4       	brne	.+40     	; 0xbda <protocolCom+0x184>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				ser_writeln("600 Zet de temperatuur grenswaarde van uw zonnepaneel");
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				ser_readln(grens_temperatuur, sizeof(grens_temperatuur), 1);
     bba:	0f 2e       	mov	r0, r31
     bbc:	fe e5       	ldi	r31, 0x5E	; 94
     bbe:	6f 2e       	mov	r6, r31
     bc0:	f7 e0       	ldi	r31, 0x07	; 7
     bc2:	7f 2e       	mov	r7, r31
     bc4:	f0 2d       	mov	r31, r0
     bc6:	c3 01       	movw	r24, r6
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
				set_grensTemp(grens_temperatuur);
     bd2:	c3 01       	movw	r24, r6
     bd4:	0e 94 4f 04 	call	0x89e	; 0x89e <set_grensTemp>
     bd8:	66 cf       	rjmp	.-308    	; 0xaa6 <protocolCom+0x50>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     bda:	87 e3       	ldi	r24, 0x37	; 55
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	be 01       	movw	r22, r28
     be0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     be4:	28 2f       	mov	r18, r24
     be6:	39 2f       	mov	r19, r25
     be8:	21 15       	cp	r18, r1
     bea:	31 05       	cpc	r19, r1
     bec:	c1 f4       	brne	.+48     	; 0xc1e <protocolCom+0x1c8>
				printf("202 LIGHT %i \n", getLight());
     bee:	0e 94 99 01 	call	0x332	; 0x332 <getLight>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <protocolCom+0x19e>
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <protocolCom+0x1a0>
     bf6:	ed b7       	in	r30, 0x3d	; 61
     bf8:	fe b7       	in	r31, 0x3e	; 62
     bfa:	31 96       	adiw	r30, 0x01	; 1
     bfc:	21 e4       	ldi	r18, 0x41	; 65
     bfe:	32 e0       	ldi	r19, 0x02	; 2
     c00:	ad b7       	in	r26, 0x3d	; 61
     c02:	be b7       	in	r27, 0x3e	; 62
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	3c 93       	st	X, r19
     c08:	2e 93       	st	-X, r18
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	82 83       	std	Z+2, r24	; 0x02
     c0e:	13 82       	std	Z+3, r1	; 0x03
     c10:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	44 cf       	rjmp	.-376    	; 0xaa6 <protocolCom+0x50>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     c1e:	80 e5       	ldi	r24, 0x50	; 80
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	be 01       	movw	r22, r28
     c24:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     c28:	28 2f       	mov	r18, r24
     c2a:	39 2f       	mov	r19, r25
     c2c:	21 15       	cp	r18, r1
     c2e:	31 05       	cpc	r19, r1
     c30:	19 f4       	brne	.+6      	; 0xc38 <protocolCom+0x1e2>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				return_grensLicht();
     c32:	0e 94 a5 02 	call	0x54a	; 0x54a <return_grensLicht>
     c36:	37 cf       	rjmp	.-402    	; 0xaa6 <protocolCom+0x50>
			}
			else if(strcmp("SET_GRENS_LIGHT(Z)", in_buf) == 0){
     c38:	80 e6       	ldi	r24, 0x60	; 96
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	be 01       	movw	r22, r28
     c3e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     c42:	28 2f       	mov	r18, r24
     c44:	39 2f       	mov	r19, r25
     c46:	21 15       	cp	r18, r1
     c48:	31 05       	cpc	r19, r1
     c4a:	a1 f4       	brne	.+40     	; 0xc74 <protocolCom+0x21e>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				ser_writeln("600 Zet de lichtintensiteit grenswaarde van uw zonnepaneel");
     c4c:	83 e7       	ldi	r24, 0x73	; 115
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				ser_readln(grens_lichtint, sizeof(grens_lichtint), 1);
     c54:	0f 2e       	mov	r0, r31
     c56:	f4 e1       	ldi	r31, 0x14	; 20
     c58:	6f 2e       	mov	r6, r31
     c5a:	f8 e0       	ldi	r31, 0x08	; 8
     c5c:	7f 2e       	mov	r7, r31
     c5e:	f0 2d       	mov	r31, r0
     c60:	c3 01       	movw	r24, r6
     c62:	64 e0       	ldi	r22, 0x04	; 4
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
				set_grensLicht(grens_lichtint);
     c6c:	c3 01       	movw	r24, r6
     c6e:	0e 94 22 04 	call	0x844	; 0x844 <set_grensLicht>
     c72:	19 cf       	rjmp	.-462    	; 0xaa6 <protocolCom+0x50>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     c74:	8e ea       	ldi	r24, 0xAE	; 174
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	be 01       	movw	r22, r28
     c7a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     c7e:	28 2f       	mov	r18, r24
     c80:	39 2f       	mov	r19, r25
     c82:	21 15       	cp	r18, r1
     c84:	31 05       	cpc	r19, r1
     c86:	19 f4       	brne	.+6      	; 0xc8e <protocolCom+0x238>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				return_maxUnroll();
     c88:	0e 94 39 02 	call	0x472	; 0x472 <return_maxUnroll>
     c8c:	0c cf       	rjmp	.-488    	; 0xaa6 <protocolCom+0x50>
			}
			else if(strcmp("SET_MAX_UNROLL(Z)", in_buf) == 0){
     c8e:	8d eb       	ldi	r24, 0xBD	; 189
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	be 01       	movw	r22, r28
     c94:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     c98:	28 2f       	mov	r18, r24
     c9a:	39 2f       	mov	r19, r25
     c9c:	21 15       	cp	r18, r1
     c9e:	31 05       	cpc	r19, r1
     ca0:	a1 f4       	brne	.+40     	; 0xcca <protocolCom+0x274>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				ser_writeln("600 Zet tot hoever de scherm kan inrollen in (cm)");
     ca2:	8f ec       	ldi	r24, 0xCF	; 207
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				ser_readln(maxUnroll, sizeof(maxUnroll), 1);
     caa:	0f 2e       	mov	r0, r31
     cac:	f9 e8       	ldi	r31, 0x89	; 137
     cae:	6f 2e       	mov	r6, r31
     cb0:	f7 e0       	ldi	r31, 0x07	; 7
     cb2:	7f 2e       	mov	r7, r31
     cb4:	f0 2d       	mov	r31, r0
     cb6:	c3 01       	movw	r24, r6
     cb8:	64 e0       	ldi	r22, 0x04	; 4
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
				set_maxUnroll(maxUnroll);
     cc2:	c3 01       	movw	r24, r6
     cc4:	0e 94 c8 03 	call	0x790	; 0x790 <set_maxUnroll>
     cc8:	ee ce       	rjmp	.-548    	; 0xaa6 <protocolCom+0x50>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	be 01       	movw	r22, r28
     cd0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     cd4:	28 2f       	mov	r18, r24
     cd6:	39 2f       	mov	r19, r25
     cd8:	21 15       	cp	r18, r1
     cda:	31 05       	cpc	r19, r1
     cdc:	19 f4       	brne	.+6      	; 0xce4 <protocolCom+0x28e>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				return_minUnroll();
     cde:	0e 94 6f 02 	call	0x4de	; 0x4de <return_minUnroll>
     ce2:	e1 ce       	rjmp	.-574    	; 0xaa6 <protocolCom+0x50>
				
			}
			else if(strcmp("SET_MIN_UNROLL(Z)", in_buf) == 0){
     ce4:	80 e1       	ldi	r24, 0x10	; 16
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	be 01       	movw	r22, r28
     cea:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     cee:	28 2f       	mov	r18, r24
     cf0:	39 2f       	mov	r19, r25
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	a1 f4       	brne	.+40     	; 0xd20 <protocolCom+0x2ca>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				ser_writeln("600 Zet tot hoever de scherm kan inrollen in (cm)");
     cf8:	8f ec       	ldi	r24, 0xCF	; 207
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				ser_readln(minUnroll, sizeof(minUnroll), 1);
     d00:	0f 2e       	mov	r0, r31
     d02:	f8 eb       	ldi	r31, 0xB8	; 184
     d04:	6f 2e       	mov	r6, r31
     d06:	f7 e0       	ldi	r31, 0x07	; 7
     d08:	7f 2e       	mov	r7, r31
     d0a:	f0 2d       	mov	r31, r0
     d0c:	c3 01       	movw	r24, r6
     d0e:	64 e0       	ldi	r22, 0x04	; 4
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
				set_minUnroll(minUnroll);
     d18:	c3 01       	movw	r24, r6
     d1a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_minUnroll>
     d1e:	c3 ce       	rjmp	.-634    	; 0xaa6 <protocolCom+0x50>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     d20:	82 e2       	ldi	r24, 0x22	; 34
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	be 01       	movw	r22, r28
     d26:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     d2a:	28 2f       	mov	r18, r24
     d2c:	39 2f       	mov	r19, r25
     d2e:	21 15       	cp	r18, r1
     d30:	31 05       	cpc	r19, r1
     d32:	19 f4       	brne	.+6      	; 0xd3a <protocolCom+0x2e4>
				return_Naam();
     d34:	0e 94 9b 03 	call	0x736	; 0x736 <return_Naam>
     d38:	b6 ce       	rjmp	.-660    	; 0xaa6 <protocolCom+0x50>
			}
			else if(strcmp("SET_NAME(Z)", in_buf) == 0){
     d3a:	8b e2       	ldi	r24, 0x2B	; 43
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	be 01       	movw	r22, r28
     d40:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     d44:	28 2f       	mov	r18, r24
     d46:	39 2f       	mov	r19, r25
     d48:	21 15       	cp	r18, r1
     d4a:	31 05       	cpc	r19, r1
     d4c:	f9 f4       	brne	.+62     	; 0xd8c <protocolCom+0x336>
				
				ser_writeln("600 Zet de naam van uw zonnescherm");
     d4e:	87 e3       	ldi	r24, 0x37	; 55
     d50:	93 e0       	ldi	r25, 0x03	; 3
     d52:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				ser_readln(naam, sizeof(naam), 1);
     d56:	0f 2e       	mov	r0, r31
     d58:	f6 ee       	ldi	r31, 0xE6	; 230
     d5a:	6f 2e       	mov	r6, r31
     d5c:	f7 e0       	ldi	r31, 0x07	; 7
     d5e:	7f 2e       	mov	r7, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	c3 01       	movw	r24, r6
     d64:	68 e2       	ldi	r22, 0x28	; 40
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
				set_Naam(naam);
     d6e:	c3 01       	movw	r24, r6
     d70:	0e 94 d6 04 	call	0x9ac	; 0x9ac <set_Naam>
				
				printf("200 OK ");
     d74:	00 d0       	rcall	.+0      	; 0xd76 <protocolCom+0x320>
     d76:	8a e5       	ldi	r24, 0x5A	; 90
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	ed b7       	in	r30, 0x3d	; 61
     d7c:	fe b7       	in	r31, 0x3e	; 62
     d7e:	92 83       	std	Z+2, r25	; 0x02
     d80:	81 83       	std	Z+1, r24	; 0x01
     d82:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	8d ce       	rjmp	.-742    	; 0xaa6 <protocolCom+0x50>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     d8c:	82 e6       	ldi	r24, 0x62	; 98
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	be 01       	movw	r22, r28
     d92:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     d96:	28 2f       	mov	r18, r24
     d98:	39 2f       	mov	r19, r25
     d9a:	21 15       	cp	r18, r1
     d9c:	31 05       	cpc	r19, r1
     d9e:	19 f4       	brne	.+6      	; 0xda6 <protocolCom+0x350>
				//printf("202 NAME %s", locatieRes);
				return_Locatie();
     da0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <return_Locatie>
     da4:	80 ce       	rjmp	.-768    	; 0xaa6 <protocolCom+0x50>
			}
			else if(strcmp("SET_LOCATION(Z)", in_buf) == 0){
     da6:	8f e6       	ldi	r24, 0x6F	; 111
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	be 01       	movw	r22, r28
     dac:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     db0:	28 2f       	mov	r18, r24
     db2:	39 2f       	mov	r19, r25
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	09 f5       	brne	.+66     	; 0xdfc <protocolCom+0x3a6>
				
				ser_writeln("600 Zet de locatie van uw zonnescherm");
     dba:	8f e7       	ldi	r24, 0x7F	; 127
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				ser_readln(locatie, sizeof(locatie), 1);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f8 e1       	ldi	r31, 0x18	; 24
     dc6:	6f 2e       	mov	r6, r31
     dc8:	f8 e0       	ldi	r31, 0x08	; 8
     dca:	7f 2e       	mov	r7, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	c3 01       	movw	r24, r6
     dd0:	68 e2       	ldi	r22, 0x28	; 40
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
				set_Locatie(locatie);
     dda:	c3 01       	movw	r24, r6
     ddc:	0e 94 a9 04 	call	0x952	; 0x952 <set_Locatie>
				
				printf("200 OK ");
     de0:	00 d0       	rcall	.+0      	; 0xde2 <protocolCom+0x38c>
     de2:	8a e5       	ldi	r24, 0x5A	; 90
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	ad b7       	in	r26, 0x3d	; 61
     de8:	be b7       	in	r27, 0x3e	; 62
     dea:	12 96       	adiw	r26, 0x02	; 2
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
     df0:	11 97       	sbiw	r26, 0x01	; 1
     df2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	55 ce       	rjmp	.-854    	; 0xaa6 <protocolCom+0x50>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     dfc:	85 ea       	ldi	r24, 0xA5	; 165
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	be 01       	movw	r22, r28
     e02:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     e06:	28 2f       	mov	r18, r24
     e08:	39 2f       	mov	r19, r25
     e0a:	21 15       	cp	r18, r1
     e0c:	31 05       	cpc	r19, r1
     e0e:	19 f4       	brne	.+6      	; 0xe16 <protocolCom+0x3c0>
					//printf("202 NAME %s", versieRes);
					return_Versie();
     e10:	0e 94 1b 03 	call	0x636	; 0x636 <return_Versie>
     e14:	48 ce       	rjmp	.-880    	; 0xaa6 <protocolCom+0x50>
				}
				else if(strcmp("SET_VERSION(Z)", in_buf) == 0){
     e16:	81 eb       	ldi	r24, 0xB1	; 177
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	be 01       	movw	r22, r28
     e1c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     e20:	28 2f       	mov	r18, r24
     e22:	39 2f       	mov	r19, r25
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	f9 f4       	brne	.+62     	; 0xe68 <protocolCom+0x412>
					
					ser_writeln("600 Zet de versie van uw zonnepaneel");
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	93 e0       	ldi	r25, 0x03	; 3
     e2e:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
					ser_readln(versie, sizeof(versie), 1);
     e32:	0f 2e       	mov	r0, r31
     e34:	f6 e5       	ldi	r31, 0x56	; 86
     e36:	6f 2e       	mov	r6, r31
     e38:	f7 e0       	ldi	r31, 0x07	; 7
     e3a:	7f 2e       	mov	r7, r31
     e3c:	f0 2d       	mov	r31, r0
     e3e:	c3 01       	movw	r24, r6
     e40:	68 e0       	ldi	r22, 0x08	; 8
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 ab 07 	call	0xf56	; 0xf56 <ser_readln>
					set_Versie(versie);
     e4a:	c3 01       	movw	r24, r6
     e4c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_Versie>
					
					printf("200 OK ");
     e50:	00 d0       	rcall	.+0      	; 0xe52 <protocolCom+0x3fc>
     e52:	8a e5       	ldi	r24, 0x5A	; 90
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	ed b7       	in	r30, 0x3d	; 61
     e58:	fe b7       	in	r31, 0x3e	; 62
     e5a:	92 83       	std	Z+2, r25	; 0x02
     e5c:	81 83       	std	Z+1, r24	; 0x01
     e5e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	1f ce       	rjmp	.-962    	; 0xaa6 <protocolCom+0x50>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     e68:	85 ee       	ldi	r24, 0xE5	; 229
     e6a:	93 e0       	ldi	r25, 0x03	; 3
     e6c:	be 01       	movw	r22, r28
     e6e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     e72:	28 2f       	mov	r18, r24
     e74:	39 2f       	mov	r19, r25
     e76:	21 15       	cp	r18, r1
     e78:	31 05       	cpc	r19, r1
     e7a:	89 f4       	brne	.+34     	; 0xe9e <protocolCom+0x448>
				if ((getOut() % 2) == 1){
     e7c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <getOut>
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__divmodhi4>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	11 f4       	brne	.+4      	; 0xe92 <protocolCom+0x43c>
					uitrollen();					
     e8e:	0e 94 fb 07 	call	0xff6	; 0xff6 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     e92:	8a ee       	ldi	r24, 0xEA	; 234
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
				abort();
     e9a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     e9e:	83 ef       	ldi	r24, 0xF3	; 243
     ea0:	93 e0       	ldi	r25, 0x03	; 3
     ea2:	be 01       	movw	r22, r28
     ea4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <strcmp>
     ea8:	28 2f       	mov	r18, r24
     eaa:	39 2f       	mov	r19, r25
     eac:	21 15       	cp	r18, r1
     eae:	31 05       	cpc	r19, r1
     eb0:	29 f4       	brne	.+10     	; 0xebc <protocolCom+0x466>
				ser_writeln(
     eb2:	88 ef       	ldi	r24, 0xF8	; 248
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
     eba:	f5 cd       	rjmp	.-1046   	; 0xaa6 <protocolCom+0x50>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     ebc:	8d e3       	ldi	r24, 0x3D	; 61
     ebe:	96 e0       	ldi	r25, 0x06	; 6
     ec0:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
     ec4:	f0 cd       	rjmp	.-1056   	; 0xaa6 <protocolCom+0x50>

00000ec6 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     ec6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     eca:	83 e3       	ldi	r24, 0x33	; 51
     ecc:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     ed0:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     ed4:	88 e1       	ldi	r24, 0x18	; 24
     ed6:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     ee0:	80 ea       	ldi	r24, 0xA0	; 160
     ee2:	96 e0       	ldi	r25, 0x06	; 6
     ee4:	90 93 47 08 	sts	0x0847, r25
     ee8:	80 93 46 08 	sts	0x0846, r24
}
     eec:	08 95       	ret

00000eee <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     eee:	e0 ec       	ldi	r30, 0xC0	; 192
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	90 81       	ld	r25, Z
     ef4:	95 ff       	sbrs	r25, 5
     ef6:	fd cf       	rjmp	.-6      	; 0xef2 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     ef8:	80 93 c6 00 	sts	0x00C6, r24
}
     efc:	08 95       	ret

00000efe <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     efe:	cf 93       	push	r28
     f00:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     f02:	8a 30       	cpi	r24, 0x0A	; 10
     f04:	19 f4       	brne	.+6      	; 0xf0c <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     f06:	8d e0       	ldi	r24, 0x0D	; 13
     f08:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>
	}
	ser_transmit(c);
     f0c:	8c 2f       	mov	r24, r28
     f0e:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>
}
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     f16:	e0 ec       	ldi	r30, 0xC0	; 192
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	ec f7       	brge	.-6      	; 0xf1a <ser_receive+0x4>
	return UDR0;
     f20:	80 91 c6 00 	lds	r24, 0x00C6
}
     f24:	08 95       	ret

00000f26 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     f2c:	88 81       	ld	r24, Y
     f2e:	88 23       	and	r24, r24
     f30:	31 f0       	breq	.+12     	; 0xf3e <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     f32:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     f34:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     f38:	89 91       	ld	r24, Y+
     f3a:	88 23       	and	r24, r24
     f3c:	d9 f7       	brne	.-10     	; 0xf34 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     f44:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
	ser_transmit('\r');
     f48:	8d e0       	ldi	r24, 0x0D	; 13
     f4a:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>
	ser_transmit('\n');
     f4e:	8a e0       	ldi	r24, 0x0A	; 10
     f50:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>
}
     f54:	08 95       	ret

00000f56 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     f56:	af 92       	push	r10
     f58:	bf 92       	push	r11
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	5c 01       	movw	r10, r24
     f6c:	d4 2f       	mov	r29, r20
	int i=0;
     f6e:	6c 01       	movw	r12, r24
     f70:	ee 24       	eor	r14, r14
     f72:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f74:	8b 01       	movw	r16, r22
     f76:	01 50       	subi	r16, 0x01	; 1
     f78:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     f7a:	0e 94 8b 07 	call	0xf16	; 0xf16 <ser_receive>
     f7e:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     f80:	dd 23       	and	r29, r29
     f82:	11 f0       	breq	.+4      	; 0xf88 <ser_readln+0x32>
     f84:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>
		if (c=='\r') {
     f88:	cd 30       	cpi	r28, 0x0D	; 13
     f8a:	31 f4       	brne	.+12     	; 0xf98 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     f8c:	dd 23       	and	r29, r29
     f8e:	71 f0       	breq	.+28     	; 0xfac <ser_readln+0x56>
     f90:	8a e0       	ldi	r24, 0x0A	; 10
     f92:	0e 94 77 07 	call	0xeee	; 0xeee <ser_transmit>
     f96:	0a c0       	rjmp	.+20     	; 0xfac <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f98:	e0 16       	cp	r14, r16
     f9a:	f1 06       	cpc	r15, r17
     f9c:	74 f7       	brge	.-36     	; 0xf7a <ser_readln+0x24>
			buf[i++]=c;
     f9e:	f6 01       	movw	r30, r12
     fa0:	c1 93       	st	Z+, r28
     fa2:	6f 01       	movw	r12, r30
     fa4:	08 94       	sec
     fa6:	e1 1c       	adc	r14, r1
     fa8:	f1 1c       	adc	r15, r1
     faa:	e7 cf       	rjmp	.-50     	; 0xf7a <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     fac:	ea 0c       	add	r14, r10
     fae:	fb 1c       	adc	r15, r11
     fb0:	f7 01       	movw	r30, r14
     fb2:	10 82       	st	Z, r1
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	af 90       	pop	r10
     fc8:	08 95       	ret

00000fca <getIn>:

int j, IN, OUT = 0; //Voor knipperen van zonnescherm | Voor het kijken of hij uitgerold/opgerold is

int getIn(){
	return IN;
}
     fca:	80 91 42 08 	lds	r24, 0x0842
     fce:	90 91 43 08 	lds	r25, 0x0843
     fd2:	08 95       	ret

00000fd4 <getOut>:

int getOut(){
	return OUT;
}
     fd4:	80 91 28 07 	lds	r24, 0x0728
     fd8:	90 91 29 07 	lds	r25, 0x0729
     fdc:	08 95       	ret

00000fde <init_scherm_ports>:

init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
     fde:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
     fe0:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
     fe2:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
     fe4:	e9 e6       	ldi	r30, 0x69	; 105
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
     ff2:	2d 9a       	sbi	0x05, 5	; 5
}
     ff4:	08 95       	ret

00000ff6 <uitrollen>:

void uitrollen(){
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
	OUT = (OUT + 1);
     ffa:	80 91 28 07 	lds	r24, 0x0728
     ffe:	90 91 29 07 	lds	r25, 0x0729
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 29 07 	sts	0x0729, r25
    1008:	80 93 28 07 	sts	0x0728, r24
	IN = (IN + 1);
    100c:	80 91 42 08 	lds	r24, 0x0842
    1010:	90 91 43 08 	lds	r25, 0x0843
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	90 93 43 08 	sts	0x0843, r25
    101a:	80 93 42 08 	sts	0x0842, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    101e:	8e ea       	ldi	r24, 0xAE	; 174
    1020:	96 e0       	ldi	r25, 0x06	; 6
    1022:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1026:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1028:	2b 9a       	sbi	0x05, 3	; 5
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
    102a:	c3 eb       	ldi	r28, 0xB3	; 179
    102c:	d6 e0       	ldi	r29, 0x06	; 6
	
	PORTB |= _BV(PORTB3);
	
	//printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	
	while (getDistance()<20){
    102e:	22 c0       	rjmp	.+68     	; 0x1074 <uitrollen+0x7e>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1030:	2c 9a       	sbi	0x05, 4	; 5
    1032:	8f e3       	ldi	r24, 0x3F	; 63
    1034:	9d e0       	ldi	r25, 0x0D	; 13
    1036:	a3 e0       	ldi	r26, 0x03	; 3
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	90 40       	sbci	r25, 0x00	; 0
    103c:	a0 40       	sbci	r26, 0x00	; 0
    103e:	e1 f7       	brne	.-8      	; 0x1038 <uitrollen+0x42>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <uitrollen+0x4c>
    1042:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1044:	2c 98       	cbi	0x05, 4	; 5
    1046:	8f e3       	ldi	r24, 0x3F	; 63
    1048:	9d e0       	ldi	r25, 0x0D	; 13
    104a:	a3 e0       	ldi	r26, 0x03	; 3
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	a0 40       	sbci	r26, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <uitrollen+0x56>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <uitrollen+0x60>
    1056:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
    1058:	80 91 40 08 	lds	r24, 0x0840
    105c:	90 91 41 08 	lds	r25, 0x0841
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	90 93 41 08 	sts	0x0841, r25
    1066:	80 93 40 08 	sts	0x0840, r24
		if (j % 2 == 0){ser_write(".");}
    106a:	80 fd       	sbrc	r24, 0
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <uitrollen+0x7e>
    106e:	ce 01       	movw	r24, r28
    1070:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
	
	PORTB |= _BV(PORTB3);
	
	//printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	
	while (getDistance()<20){
    1074:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 ea       	ldi	r20, 0xA0	; 160
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__cmpsf2>
    1084:	88 23       	and	r24, r24
    1086:	a4 f2       	brlt	.-88     	; 0x1030 <uitrollen+0x3a>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    1088:	10 92 41 08 	sts	0x0841, r1
    108c:	10 92 40 08 	sts	0x0840, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    1090:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	00 d0       	rcall	.+0      	; 0x109a <uitrollen+0xa4>
    109a:	00 d0       	rcall	.+0      	; 0x109c <uitrollen+0xa6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <uitrollen+0xa8>
    109e:	25 eb       	ldi	r18, 0xB5	; 181
    10a0:	36 e0       	ldi	r19, 0x06	; 6
    10a2:	ed b7       	in	r30, 0x3d	; 61
    10a4:	fe b7       	in	r31, 0x3e	; 62
    10a6:	32 83       	std	Z+2, r19	; 0x02
    10a8:	21 83       	std	Z+1, r18	; 0x01
    10aa:	83 83       	std	Z+3, r24	; 0x03
    10ac:	94 83       	std	Z+4, r25	; 0x04
    10ae:	a5 83       	std	Z+5, r26	; 0x05
    10b0:	b6 83       	std	Z+6, r27	; 0x06
    10b2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
	ser_writeln("\n\r201 Zonnescherm is uitgerold\n");
    10b6:	8d b7       	in	r24, 0x3d	; 61
    10b8:	9e b7       	in	r25, 0x3e	; 62
    10ba:	06 96       	adiw	r24, 0x06	; 6
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	9e bf       	out	0x3e, r25	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	8d bf       	out	0x3d, r24	; 61
    10c6:	85 ed       	ldi	r24, 0xD5	; 213
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
    10ce:	8f e3       	ldi	r24, 0x3F	; 63
    10d0:	9d e0       	ldi	r25, 0x0D	; 13
    10d2:	a3 e0       	ldi	r26, 0x03	; 3
    10d4:	81 50       	subi	r24, 0x01	; 1
    10d6:	90 40       	sbci	r25, 0x00	; 0
    10d8:	a0 40       	sbci	r26, 0x00	; 0
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <uitrollen+0xde>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <uitrollen+0xe8>
    10de:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <oprollen>:
	
	


void oprollen(){
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
	IN = (IN + 1);
    10f2:	80 91 42 08 	lds	r24, 0x0842
    10f6:	90 91 43 08 	lds	r25, 0x0843
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	90 93 43 08 	sts	0x0843, r25
    1100:	80 93 42 08 	sts	0x0842, r24
	OUT = (OUT + 1);
    1104:	80 91 28 07 	lds	r24, 0x0728
    1108:	90 91 29 07 	lds	r25, 0x0729
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	90 93 29 07 	sts	0x0729, r25
    1112:	80 93 28 07 	sts	0x0728, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
    1116:	8e ea       	ldi	r24, 0xAE	; 174
    1118:	96 e0       	ldi	r25, 0x06	; 6
    111a:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    111e:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1120:	2d 9a       	sbi	0x05, 5	; 5
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    1122:	c3 eb       	ldi	r28, 0xB3	; 179
    1124:	d6 e0       	ldi	r29, 0x06	; 6
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	//printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	
	while (getDistance()>get_min_unroll()){
    1126:	22 c0       	rjmp	.+68     	; 0x116c <oprollen+0x86>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1128:	2c 9a       	sbi	0x05, 4	; 5
    112a:	8f e3       	ldi	r24, 0x3F	; 63
    112c:	9d e0       	ldi	r25, 0x0D	; 13
    112e:	a3 e0       	ldi	r26, 0x03	; 3
    1130:	81 50       	subi	r24, 0x01	; 1
    1132:	90 40       	sbci	r25, 0x00	; 0
    1134:	a0 40       	sbci	r26, 0x00	; 0
    1136:	e1 f7       	brne	.-8      	; 0x1130 <oprollen+0x4a>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <oprollen+0x54>
    113a:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    113c:	2c 98       	cbi	0x05, 4	; 5
    113e:	8f e3       	ldi	r24, 0x3F	; 63
    1140:	9d e0       	ldi	r25, 0x0D	; 13
    1142:	a3 e0       	ldi	r26, 0x03	; 3
    1144:	81 50       	subi	r24, 0x01	; 1
    1146:	90 40       	sbci	r25, 0x00	; 0
    1148:	a0 40       	sbci	r26, 0x00	; 0
    114a:	e1 f7       	brne	.-8      	; 0x1144 <oprollen+0x5e>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <oprollen+0x68>
    114e:	00 00       	nop
		_delay_ms(DELAY_MS);

		j += 1;
    1150:	80 91 40 08 	lds	r24, 0x0840
    1154:	90 91 41 08 	lds	r25, 0x0841
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	90 93 41 08 	sts	0x0841, r25
    115e:	80 93 40 08 	sts	0x0840, r24
		if (j % 2 == 0){ser_write(".");}
    1162:	80 fd       	sbrc	r24, 0
    1164:	03 c0       	rjmp	.+6      	; 0x116c <oprollen+0x86>
    1166:	ce 01       	movw	r24, r28
    1168:	0e 94 93 07 	call	0xf26	; 0xf26 <ser_write>
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	//printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	
	while (getDistance()>get_min_unroll()){
    116c:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1170:	6b 01       	movw	r12, r22
    1172:	7c 01       	movw	r14, r24
    1174:	0e 94 1c 05 	call	0xa38	; 0xa38 <get_min_unroll>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	c7 01       	movw	r24, r14
    117e:	b6 01       	movw	r22, r12
    1180:	0e 94 12 0a 	call	0x1424	; 0x1424 <__gesf2>
    1184:	18 16       	cp	r1, r24
    1186:	84 f2       	brlt	.-96     	; 0x1128 <oprollen+0x42>
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}			
	j = 0;
    1188:	10 92 41 08 	sts	0x0841, r1
    118c:	10 92 40 08 	sts	0x0840, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    1190:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	00 d0       	rcall	.+0      	; 0x119a <oprollen+0xb4>
    119a:	00 d0       	rcall	.+0      	; 0x119c <oprollen+0xb6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <oprollen+0xb8>
    119e:	25 eb       	ldi	r18, 0xB5	; 181
    11a0:	36 e0       	ldi	r19, 0x06	; 6
    11a2:	ed b7       	in	r30, 0x3d	; 61
    11a4:	fe b7       	in	r31, 0x3e	; 62
    11a6:	32 83       	std	Z+2, r19	; 0x02
    11a8:	21 83       	std	Z+1, r18	; 0x01
    11aa:	83 83       	std	Z+3, r24	; 0x03
    11ac:	94 83       	std	Z+4, r25	; 0x04
    11ae:	a5 83       	std	Z+5, r26	; 0x05
    11b0:	b6 83       	std	Z+6, r27	; 0x06
    11b2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <printf>
	ser_writeln("\n\r201 Zonnescherm is opgerold\n");
    11b6:	8d b7       	in	r24, 0x3d	; 61
    11b8:	9e b7       	in	r25, 0x3e	; 62
    11ba:	06 96       	adiw	r24, 0x06	; 6
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	9e bf       	out	0x3e, r25	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	8d bf       	out	0x3d, r24	; 61
    11c6:	85 ef       	ldi	r24, 0xF5	; 245
    11c8:	96 e0       	ldi	r25, 0x06	; 6
    11ca:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_writeln>
    11ce:	8f e3       	ldi	r24, 0x3F	; 63
    11d0:	9d e0       	ldi	r25, 0x0D	; 13
    11d2:	a3 e0       	ldi	r26, 0x03	; 3
    11d4:	81 50       	subi	r24, 0x01	; 1
    11d6:	90 40       	sbci	r25, 0x00	; 0
    11d8:	a0 40       	sbci	r26, 0x00	; 0
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <oprollen+0xee>
    11dc:	00 c0       	rjmp	.+0      	; 0x11de <oprollen+0xf8>
    11de:	00 00       	nop
	_delay_ms(DELAY_MS);
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	08 95       	ret

000011ee <__subsf3>:
    11ee:	50 58       	subi	r21, 0x80	; 128

000011f0 <__addsf3>:
    11f0:	bb 27       	eor	r27, r27
    11f2:	aa 27       	eor	r26, r26
    11f4:	0e d0       	rcall	.+28     	; 0x1212 <__addsf3x>
    11f6:	dc c0       	rjmp	.+440    	; 0x13b0 <__fp_round>
    11f8:	cd d0       	rcall	.+410    	; 0x1394 <__fp_pscA>
    11fa:	30 f0       	brcs	.+12     	; 0x1208 <__addsf3+0x18>
    11fc:	d2 d0       	rcall	.+420    	; 0x13a2 <__fp_pscB>
    11fe:	20 f0       	brcs	.+8      	; 0x1208 <__addsf3+0x18>
    1200:	31 f4       	brne	.+12     	; 0x120e <__addsf3+0x1e>
    1202:	9f 3f       	cpi	r25, 0xFF	; 255
    1204:	11 f4       	brne	.+4      	; 0x120a <__addsf3+0x1a>
    1206:	1e f4       	brtc	.+6      	; 0x120e <__addsf3+0x1e>
    1208:	c2 c0       	rjmp	.+388    	; 0x138e <__fp_nan>
    120a:	0e f4       	brtc	.+2      	; 0x120e <__addsf3+0x1e>
    120c:	e0 95       	com	r30
    120e:	e7 fb       	bst	r30, 7
    1210:	b8 c0       	rjmp	.+368    	; 0x1382 <__fp_inf>

00001212 <__addsf3x>:
    1212:	e9 2f       	mov	r30, r25
    1214:	de d0       	rcall	.+444    	; 0x13d2 <__fp_split3>
    1216:	80 f3       	brcs	.-32     	; 0x11f8 <__addsf3+0x8>
    1218:	ba 17       	cp	r27, r26
    121a:	62 07       	cpc	r22, r18
    121c:	73 07       	cpc	r23, r19
    121e:	84 07       	cpc	r24, r20
    1220:	95 07       	cpc	r25, r21
    1222:	18 f0       	brcs	.+6      	; 0x122a <__addsf3x+0x18>
    1224:	71 f4       	brne	.+28     	; 0x1242 <__addsf3x+0x30>
    1226:	9e f5       	brtc	.+102    	; 0x128e <__addsf3x+0x7c>
    1228:	f6 c0       	rjmp	.+492    	; 0x1416 <__fp_zero>
    122a:	0e f4       	brtc	.+2      	; 0x122e <__addsf3x+0x1c>
    122c:	e0 95       	com	r30
    122e:	0b 2e       	mov	r0, r27
    1230:	ba 2f       	mov	r27, r26
    1232:	a0 2d       	mov	r26, r0
    1234:	0b 01       	movw	r0, r22
    1236:	b9 01       	movw	r22, r18
    1238:	90 01       	movw	r18, r0
    123a:	0c 01       	movw	r0, r24
    123c:	ca 01       	movw	r24, r20
    123e:	a0 01       	movw	r20, r0
    1240:	11 24       	eor	r1, r1
    1242:	ff 27       	eor	r31, r31
    1244:	59 1b       	sub	r21, r25
    1246:	99 f0       	breq	.+38     	; 0x126e <__addsf3x+0x5c>
    1248:	59 3f       	cpi	r21, 0xF9	; 249
    124a:	50 f4       	brcc	.+20     	; 0x1260 <__addsf3x+0x4e>
    124c:	50 3e       	cpi	r21, 0xE0	; 224
    124e:	68 f1       	brcs	.+90     	; 0x12aa <__addsf3x+0x98>
    1250:	1a 16       	cp	r1, r26
    1252:	f0 40       	sbci	r31, 0x00	; 0
    1254:	a2 2f       	mov	r26, r18
    1256:	23 2f       	mov	r18, r19
    1258:	34 2f       	mov	r19, r20
    125a:	44 27       	eor	r20, r20
    125c:	58 5f       	subi	r21, 0xF8	; 248
    125e:	f3 cf       	rjmp	.-26     	; 0x1246 <__addsf3x+0x34>
    1260:	46 95       	lsr	r20
    1262:	37 95       	ror	r19
    1264:	27 95       	ror	r18
    1266:	a7 95       	ror	r26
    1268:	f0 40       	sbci	r31, 0x00	; 0
    126a:	53 95       	inc	r21
    126c:	c9 f7       	brne	.-14     	; 0x1260 <__addsf3x+0x4e>
    126e:	7e f4       	brtc	.+30     	; 0x128e <__addsf3x+0x7c>
    1270:	1f 16       	cp	r1, r31
    1272:	ba 0b       	sbc	r27, r26
    1274:	62 0b       	sbc	r22, r18
    1276:	73 0b       	sbc	r23, r19
    1278:	84 0b       	sbc	r24, r20
    127a:	ba f0       	brmi	.+46     	; 0x12aa <__addsf3x+0x98>
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	a1 f0       	breq	.+40     	; 0x12a8 <__addsf3x+0x96>
    1280:	ff 0f       	add	r31, r31
    1282:	bb 1f       	adc	r27, r27
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	c2 f7       	brpl	.-16     	; 0x127c <__addsf3x+0x6a>
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <__addsf3x+0x98>
    128e:	ba 0f       	add	r27, r26
    1290:	62 1f       	adc	r22, r18
    1292:	73 1f       	adc	r23, r19
    1294:	84 1f       	adc	r24, r20
    1296:	48 f4       	brcc	.+18     	; 0x12aa <__addsf3x+0x98>
    1298:	87 95       	ror	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	9e 3f       	cpi	r25, 0xFE	; 254
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <__addsf3x+0x96>
    12a6:	b3 cf       	rjmp	.-154    	; 0x120e <__addsf3+0x1e>
    12a8:	93 95       	inc	r25
    12aa:	88 0f       	add	r24, r24
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__addsf3x+0x9e>
    12ae:	99 27       	eor	r25, r25
    12b0:	ee 0f       	add	r30, r30
    12b2:	97 95       	ror	r25
    12b4:	87 95       	ror	r24
    12b6:	08 95       	ret

000012b8 <__cmpsf2>:
    12b8:	40 d0       	rcall	.+128    	; 0x133a <__fp_cmp>
    12ba:	08 f4       	brcc	.+2      	; 0x12be <__cmpsf2+0x6>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	08 95       	ret

000012c0 <__floatunsisf>:
    12c0:	e8 94       	clt
    12c2:	09 c0       	rjmp	.+18     	; 0x12d6 <__floatsisf+0x12>

000012c4 <__floatsisf>:
    12c4:	97 fb       	bst	r25, 7
    12c6:	3e f4       	brtc	.+14     	; 0x12d6 <__floatsisf+0x12>
    12c8:	90 95       	com	r25
    12ca:	80 95       	com	r24
    12cc:	70 95       	com	r23
    12ce:	61 95       	neg	r22
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	8f 4f       	sbci	r24, 0xFF	; 255
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	99 23       	and	r25, r25
    12d8:	a9 f0       	breq	.+42     	; 0x1304 <__floatsisf+0x40>
    12da:	f9 2f       	mov	r31, r25
    12dc:	96 e9       	ldi	r25, 0x96	; 150
    12de:	bb 27       	eor	r27, r27
    12e0:	93 95       	inc	r25
    12e2:	f6 95       	lsr	r31
    12e4:	87 95       	ror	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b7 95       	ror	r27
    12ec:	f1 11       	cpse	r31, r1
    12ee:	f8 cf       	rjmp	.-16     	; 0x12e0 <__floatsisf+0x1c>
    12f0:	fa f4       	brpl	.+62     	; 0x1330 <__floatsisf+0x6c>
    12f2:	bb 0f       	add	r27, r27
    12f4:	11 f4       	brne	.+4      	; 0x12fa <__floatsisf+0x36>
    12f6:	60 ff       	sbrs	r22, 0
    12f8:	1b c0       	rjmp	.+54     	; 0x1330 <__floatsisf+0x6c>
    12fa:	6f 5f       	subi	r22, 0xFF	; 255
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	16 c0       	rjmp	.+44     	; 0x1330 <__floatsisf+0x6c>
    1304:	88 23       	and	r24, r24
    1306:	11 f0       	breq	.+4      	; 0x130c <__floatsisf+0x48>
    1308:	96 e9       	ldi	r25, 0x96	; 150
    130a:	11 c0       	rjmp	.+34     	; 0x132e <__floatsisf+0x6a>
    130c:	77 23       	and	r23, r23
    130e:	21 f0       	breq	.+8      	; 0x1318 <__floatsisf+0x54>
    1310:	9e e8       	ldi	r25, 0x8E	; 142
    1312:	87 2f       	mov	r24, r23
    1314:	76 2f       	mov	r23, r22
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <__floatsisf+0x5e>
    1318:	66 23       	and	r22, r22
    131a:	71 f0       	breq	.+28     	; 0x1338 <__floatsisf+0x74>
    131c:	96 e8       	ldi	r25, 0x86	; 134
    131e:	86 2f       	mov	r24, r22
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	2a f0       	brmi	.+10     	; 0x1330 <__floatsisf+0x6c>
    1326:	9a 95       	dec	r25
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	da f7       	brpl	.-10     	; 0x1326 <__floatsisf+0x62>
    1330:	88 0f       	add	r24, r24
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	97 f9       	bld	r25, 7
    1338:	08 95       	ret

0000133a <__fp_cmp>:
    133a:	99 0f       	add	r25, r25
    133c:	00 08       	sbc	r0, r0
    133e:	55 0f       	add	r21, r21
    1340:	aa 0b       	sbc	r26, r26
    1342:	e0 e8       	ldi	r30, 0x80	; 128
    1344:	fe ef       	ldi	r31, 0xFE	; 254
    1346:	16 16       	cp	r1, r22
    1348:	17 06       	cpc	r1, r23
    134a:	e8 07       	cpc	r30, r24
    134c:	f9 07       	cpc	r31, r25
    134e:	c0 f0       	brcs	.+48     	; 0x1380 <__fp_cmp+0x46>
    1350:	12 16       	cp	r1, r18
    1352:	13 06       	cpc	r1, r19
    1354:	e4 07       	cpc	r30, r20
    1356:	f5 07       	cpc	r31, r21
    1358:	98 f0       	brcs	.+38     	; 0x1380 <__fp_cmp+0x46>
    135a:	62 1b       	sub	r22, r18
    135c:	73 0b       	sbc	r23, r19
    135e:	84 0b       	sbc	r24, r20
    1360:	95 0b       	sbc	r25, r21
    1362:	39 f4       	brne	.+14     	; 0x1372 <__fp_cmp+0x38>
    1364:	0a 26       	eor	r0, r26
    1366:	61 f0       	breq	.+24     	; 0x1380 <__fp_cmp+0x46>
    1368:	23 2b       	or	r18, r19
    136a:	24 2b       	or	r18, r20
    136c:	25 2b       	or	r18, r21
    136e:	21 f4       	brne	.+8      	; 0x1378 <__fp_cmp+0x3e>
    1370:	08 95       	ret
    1372:	0a 26       	eor	r0, r26
    1374:	09 f4       	brne	.+2      	; 0x1378 <__fp_cmp+0x3e>
    1376:	a1 40       	sbci	r26, 0x01	; 1
    1378:	a6 95       	lsr	r26
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	81 1d       	adc	r24, r1
    137e:	81 1d       	adc	r24, r1
    1380:	08 95       	ret

00001382 <__fp_inf>:
    1382:	97 f9       	bld	r25, 7
    1384:	9f 67       	ori	r25, 0x7F	; 127
    1386:	80 e8       	ldi	r24, 0x80	; 128
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	08 95       	ret

0000138e <__fp_nan>:
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    1390:	80 ec       	ldi	r24, 0xC0	; 192
    1392:	08 95       	ret

00001394 <__fp_pscA>:
    1394:	00 24       	eor	r0, r0
    1396:	0a 94       	dec	r0
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	18 06       	cpc	r1, r24
    139e:	09 06       	cpc	r0, r25
    13a0:	08 95       	ret

000013a2 <__fp_pscB>:
    13a2:	00 24       	eor	r0, r0
    13a4:	0a 94       	dec	r0
    13a6:	12 16       	cp	r1, r18
    13a8:	13 06       	cpc	r1, r19
    13aa:	14 06       	cpc	r1, r20
    13ac:	05 06       	cpc	r0, r21
    13ae:	08 95       	ret

000013b0 <__fp_round>:
    13b0:	09 2e       	mov	r0, r25
    13b2:	03 94       	inc	r0
    13b4:	00 0c       	add	r0, r0
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__fp_round+0xc>
    13b8:	88 23       	and	r24, r24
    13ba:	52 f0       	brmi	.+20     	; 0x13d0 <__fp_round+0x20>
    13bc:	bb 0f       	add	r27, r27
    13be:	40 f4       	brcc	.+16     	; 0x13d0 <__fp_round+0x20>
    13c0:	bf 2b       	or	r27, r31
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__fp_round+0x18>
    13c4:	60 ff       	sbrs	r22, 0
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__fp_round+0x20>
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__fp_split3>:
    13d2:	57 fd       	sbrc	r21, 7
    13d4:	90 58       	subi	r25, 0x80	; 128
    13d6:	44 0f       	add	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	59 f0       	breq	.+22     	; 0x13f2 <__fp_splitA+0x10>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	71 f0       	breq	.+28     	; 0x13fc <__fp_splitA+0x1a>
    13e0:	47 95       	ror	r20

000013e2 <__fp_splitA>:
    13e2:	88 0f       	add	r24, r24
    13e4:	97 fb       	bst	r25, 7
    13e6:	99 1f       	adc	r25, r25
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_splitA+0x20>
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	79 f0       	breq	.+30     	; 0x140c <__fp_splitA+0x2a>
    13ee:	87 95       	ror	r24
    13f0:	08 95       	ret
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	14 06       	cpc	r1, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	f2 cf       	rjmp	.-28     	; 0x13e0 <__fp_split3+0xe>
    13fc:	46 95       	lsr	r20
    13fe:	f1 df       	rcall	.-30     	; 0x13e2 <__fp_splitA>
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <__fp_splitA+0x30>
    1402:	16 16       	cp	r1, r22
    1404:	17 06       	cpc	r1, r23
    1406:	18 06       	cpc	r1, r24
    1408:	99 1f       	adc	r25, r25
    140a:	f1 cf       	rjmp	.-30     	; 0x13ee <__fp_splitA+0xc>
    140c:	86 95       	lsr	r24
    140e:	71 05       	cpc	r23, r1
    1410:	61 05       	cpc	r22, r1
    1412:	08 94       	sec
    1414:	08 95       	ret

00001416 <__fp_zero>:
    1416:	e8 94       	clt

00001418 <__fp_szero>:
    1418:	bb 27       	eor	r27, r27
    141a:	66 27       	eor	r22, r22
    141c:	77 27       	eor	r23, r23
    141e:	cb 01       	movw	r24, r22
    1420:	97 f9       	bld	r25, 7
    1422:	08 95       	ret

00001424 <__gesf2>:
    1424:	8a df       	rcall	.-236    	; 0x133a <__fp_cmp>
    1426:	08 f4       	brcc	.+2      	; 0x142a <__gesf2+0x6>
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	08 95       	ret

0000142c <__mulsf3>:
    142c:	0b d0       	rcall	.+22     	; 0x1444 <__mulsf3x>
    142e:	c0 cf       	rjmp	.-128    	; 0x13b0 <__fp_round>
    1430:	b1 df       	rcall	.-158    	; 0x1394 <__fp_pscA>
    1432:	28 f0       	brcs	.+10     	; 0x143e <__mulsf3+0x12>
    1434:	b6 df       	rcall	.-148    	; 0x13a2 <__fp_pscB>
    1436:	18 f0       	brcs	.+6      	; 0x143e <__mulsf3+0x12>
    1438:	95 23       	and	r25, r21
    143a:	09 f0       	breq	.+2      	; 0x143e <__mulsf3+0x12>
    143c:	a2 cf       	rjmp	.-188    	; 0x1382 <__fp_inf>
    143e:	a7 cf       	rjmp	.-178    	; 0x138e <__fp_nan>
    1440:	11 24       	eor	r1, r1
    1442:	ea cf       	rjmp	.-44     	; 0x1418 <__fp_szero>

00001444 <__mulsf3x>:
    1444:	c6 df       	rcall	.-116    	; 0x13d2 <__fp_split3>
    1446:	a0 f3       	brcs	.-24     	; 0x1430 <__mulsf3+0x4>

00001448 <__mulsf3_pse>:
    1448:	95 9f       	mul	r25, r21
    144a:	d1 f3       	breq	.-12     	; 0x1440 <__mulsf3+0x14>
    144c:	95 0f       	add	r25, r21
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	55 1f       	adc	r21, r21
    1452:	62 9f       	mul	r22, r18
    1454:	f0 01       	movw	r30, r0
    1456:	72 9f       	mul	r23, r18
    1458:	bb 27       	eor	r27, r27
    145a:	f0 0d       	add	r31, r0
    145c:	b1 1d       	adc	r27, r1
    145e:	63 9f       	mul	r22, r19
    1460:	aa 27       	eor	r26, r26
    1462:	f0 0d       	add	r31, r0
    1464:	b1 1d       	adc	r27, r1
    1466:	aa 1f       	adc	r26, r26
    1468:	64 9f       	mul	r22, r20
    146a:	66 27       	eor	r22, r22
    146c:	b0 0d       	add	r27, r0
    146e:	a1 1d       	adc	r26, r1
    1470:	66 1f       	adc	r22, r22
    1472:	82 9f       	mul	r24, r18
    1474:	22 27       	eor	r18, r18
    1476:	b0 0d       	add	r27, r0
    1478:	a1 1d       	adc	r26, r1
    147a:	62 1f       	adc	r22, r18
    147c:	73 9f       	mul	r23, r19
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	62 1f       	adc	r22, r18
    1484:	83 9f       	mul	r24, r19
    1486:	a0 0d       	add	r26, r0
    1488:	61 1d       	adc	r22, r1
    148a:	22 1f       	adc	r18, r18
    148c:	74 9f       	mul	r23, r20
    148e:	33 27       	eor	r19, r19
    1490:	a0 0d       	add	r26, r0
    1492:	61 1d       	adc	r22, r1
    1494:	23 1f       	adc	r18, r19
    1496:	84 9f       	mul	r24, r20
    1498:	60 0d       	add	r22, r0
    149a:	21 1d       	adc	r18, r1
    149c:	82 2f       	mov	r24, r18
    149e:	76 2f       	mov	r23, r22
    14a0:	6a 2f       	mov	r22, r26
    14a2:	11 24       	eor	r1, r1
    14a4:	9f 57       	subi	r25, 0x7F	; 127
    14a6:	50 40       	sbci	r21, 0x00	; 0
    14a8:	8a f0       	brmi	.+34     	; 0x14cc <__mulsf3_pse+0x84>
    14aa:	e1 f0       	breq	.+56     	; 0x14e4 <__mulsf3_pse+0x9c>
    14ac:	88 23       	and	r24, r24
    14ae:	4a f0       	brmi	.+18     	; 0x14c2 <__mulsf3_pse+0x7a>
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	bb 1f       	adc	r27, r27
    14b6:	66 1f       	adc	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	91 50       	subi	r25, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	a9 f7       	brne	.-22     	; 0x14ac <__mulsf3_pse+0x64>
    14c2:	9e 3f       	cpi	r25, 0xFE	; 254
    14c4:	51 05       	cpc	r21, r1
    14c6:	70 f0       	brcs	.+28     	; 0x14e4 <__mulsf3_pse+0x9c>
    14c8:	5c cf       	rjmp	.-328    	; 0x1382 <__fp_inf>
    14ca:	a6 cf       	rjmp	.-180    	; 0x1418 <__fp_szero>
    14cc:	5f 3f       	cpi	r21, 0xFF	; 255
    14ce:	ec f3       	brlt	.-6      	; 0x14ca <__mulsf3_pse+0x82>
    14d0:	98 3e       	cpi	r25, 0xE8	; 232
    14d2:	dc f3       	brlt	.-10     	; 0x14ca <__mulsf3_pse+0x82>
    14d4:	86 95       	lsr	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b7 95       	ror	r27
    14dc:	f7 95       	ror	r31
    14de:	e7 95       	ror	r30
    14e0:	9f 5f       	subi	r25, 0xFF	; 255
    14e2:	c1 f7       	brne	.-16     	; 0x14d4 <__mulsf3_pse+0x8c>
    14e4:	fe 2b       	or	r31, r30
    14e6:	88 0f       	add	r24, r24
    14e8:	91 1d       	adc	r25, r1
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	97 f9       	bld	r25, 7
    14f0:	08 95       	ret

000014f2 <vfprintf>:
    14f2:	a5 e1       	ldi	r26, 0x15	; 21
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ef e7       	ldi	r30, 0x7F	; 127
    14f8:	fa e0       	ldi	r31, 0x0A	; 10
    14fa:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__prologue_saves__>
    14fe:	4c 01       	movw	r8, r24
    1500:	7f 87       	std	Y+15, r23	; 0x0f
    1502:	6e 87       	std	Y+14, r22	; 0x0e
    1504:	fc 01       	movw	r30, r24
    1506:	17 82       	std	Z+7, r1	; 0x07
    1508:	16 82       	std	Z+6, r1	; 0x06
    150a:	83 81       	ldd	r24, Z+3	; 0x03
    150c:	81 fd       	sbrc	r24, 1
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <vfprintf+0x26>
    1510:	76 c3       	rjmp	.+1772   	; 0x1bfe <vfprintf+0x70c>
    1512:	4c 85       	ldd	r20, Y+12	; 0x0c
    1514:	5d 85       	ldd	r21, Y+13	; 0x0d
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <vfprintf+0x2e>
    1518:	1e 01       	movw	r2, r28
    151a:	08 94       	sec
    151c:	21 1c       	adc	r2, r1
    151e:	31 1c       	adc	r3, r1
    1520:	f4 01       	movw	r30, r8
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	ee 85       	ldd	r30, Y+14	; 0x0e
    1526:	ff 85       	ldd	r31, Y+15	; 0x0f
    1528:	93 fd       	sbrc	r25, 3
    152a:	85 91       	lpm	r24, Z+
    152c:	93 ff       	sbrs	r25, 3
    152e:	81 91       	ld	r24, Z+
    1530:	ff 87       	std	Y+15, r31	; 0x0f
    1532:	ee 87       	std	Y+14, r30	; 0x0e
    1534:	88 23       	and	r24, r24
    1536:	09 f4       	brne	.+2      	; 0x153a <vfprintf+0x48>
    1538:	5e c3       	rjmp	.+1724   	; 0x1bf6 <vfprintf+0x704>
    153a:	85 32       	cpi	r24, 0x25	; 37
    153c:	41 f4       	brne	.+16     	; 0x154e <vfprintf+0x5c>
    153e:	93 fd       	sbrc	r25, 3
    1540:	85 91       	lpm	r24, Z+
    1542:	93 ff       	sbrs	r25, 3
    1544:	81 91       	ld	r24, Z+
    1546:	ff 87       	std	Y+15, r31	; 0x0f
    1548:	ee 87       	std	Y+14, r30	; 0x0e
    154a:	85 32       	cpi	r24, 0x25	; 37
    154c:	59 f4       	brne	.+22     	; 0x1564 <vfprintf+0x72>
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	b4 01       	movw	r22, r8
    1552:	4c 8b       	std	Y+20, r20	; 0x14
    1554:	5d 8b       	std	Y+21, r21	; 0x15
    1556:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    155a:	4c 89       	ldd	r20, Y+20	; 0x14
    155c:	5d 89       	ldd	r21, Y+21	; 0x15
    155e:	5d 87       	std	Y+13, r21	; 0x0d
    1560:	4c 87       	std	Y+12, r20	; 0x0c
    1562:	d7 cf       	rjmp	.-82     	; 0x1512 <vfprintf+0x20>
    1564:	ff 24       	eor	r15, r15
    1566:	dd 24       	eor	r13, r13
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	10 32       	cpi	r17, 0x20	; 32
    156c:	b0 f4       	brcc	.+44     	; 0x159a <vfprintf+0xa8>
    156e:	8b 32       	cpi	r24, 0x2B	; 43
    1570:	69 f0       	breq	.+26     	; 0x158c <vfprintf+0x9a>
    1572:	8c 32       	cpi	r24, 0x2C	; 44
    1574:	28 f4       	brcc	.+10     	; 0x1580 <vfprintf+0x8e>
    1576:	80 32       	cpi	r24, 0x20	; 32
    1578:	51 f0       	breq	.+20     	; 0x158e <vfprintf+0x9c>
    157a:	83 32       	cpi	r24, 0x23	; 35
    157c:	71 f4       	brne	.+28     	; 0x159a <vfprintf+0xa8>
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <vfprintf+0xa4>
    1580:	8d 32       	cpi	r24, 0x2D	; 45
    1582:	39 f0       	breq	.+14     	; 0x1592 <vfprintf+0xa0>
    1584:	80 33       	cpi	r24, 0x30	; 48
    1586:	49 f4       	brne	.+18     	; 0x159a <vfprintf+0xa8>
    1588:	11 60       	ori	r17, 0x01	; 1
    158a:	2c c0       	rjmp	.+88     	; 0x15e4 <vfprintf+0xf2>
    158c:	12 60       	ori	r17, 0x02	; 2
    158e:	14 60       	ori	r17, 0x04	; 4
    1590:	29 c0       	rjmp	.+82     	; 0x15e4 <vfprintf+0xf2>
    1592:	18 60       	ori	r17, 0x08	; 8
    1594:	27 c0       	rjmp	.+78     	; 0x15e4 <vfprintf+0xf2>
    1596:	10 61       	ori	r17, 0x10	; 16
    1598:	25 c0       	rjmp	.+74     	; 0x15e4 <vfprintf+0xf2>
    159a:	17 fd       	sbrc	r17, 7
    159c:	2e c0       	rjmp	.+92     	; 0x15fa <vfprintf+0x108>
    159e:	28 2f       	mov	r18, r24
    15a0:	20 53       	subi	r18, 0x30	; 48
    15a2:	2a 30       	cpi	r18, 0x0A	; 10
    15a4:	98 f4       	brcc	.+38     	; 0x15cc <vfprintf+0xda>
    15a6:	16 ff       	sbrs	r17, 6
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <vfprintf+0xc8>
    15aa:	8f 2d       	mov	r24, r15
    15ac:	88 0f       	add	r24, r24
    15ae:	f8 2e       	mov	r15, r24
    15b0:	ff 0c       	add	r15, r15
    15b2:	ff 0c       	add	r15, r15
    15b4:	f8 0e       	add	r15, r24
    15b6:	f2 0e       	add	r15, r18
    15b8:	15 c0       	rjmp	.+42     	; 0x15e4 <vfprintf+0xf2>
    15ba:	8d 2d       	mov	r24, r13
    15bc:	88 0f       	add	r24, r24
    15be:	d8 2e       	mov	r13, r24
    15c0:	dd 0c       	add	r13, r13
    15c2:	dd 0c       	add	r13, r13
    15c4:	d8 0e       	add	r13, r24
    15c6:	d2 0e       	add	r13, r18
    15c8:	10 62       	ori	r17, 0x20	; 32
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <vfprintf+0xf2>
    15cc:	8e 32       	cpi	r24, 0x2E	; 46
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <vfprintf+0xe6>
    15d0:	16 fd       	sbrc	r17, 6
    15d2:	11 c3       	rjmp	.+1570   	; 0x1bf6 <vfprintf+0x704>
    15d4:	10 64       	ori	r17, 0x40	; 64
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0xf2>
    15d8:	8c 36       	cpi	r24, 0x6C	; 108
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0xee>
    15dc:	10 68       	ori	r17, 0x80	; 128
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0xf2>
    15e0:	88 36       	cpi	r24, 0x68	; 104
    15e2:	59 f4       	brne	.+22     	; 0x15fa <vfprintf+0x108>
    15e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    15e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    15e8:	93 fd       	sbrc	r25, 3
    15ea:	85 91       	lpm	r24, Z+
    15ec:	93 ff       	sbrs	r25, 3
    15ee:	81 91       	ld	r24, Z+
    15f0:	ff 87       	std	Y+15, r31	; 0x0f
    15f2:	ee 87       	std	Y+14, r30	; 0x0e
    15f4:	88 23       	and	r24, r24
    15f6:	09 f0       	breq	.+2      	; 0x15fa <vfprintf+0x108>
    15f8:	b8 cf       	rjmp	.-144    	; 0x156a <vfprintf+0x78>
    15fa:	98 2f       	mov	r25, r24
    15fc:	95 54       	subi	r25, 0x45	; 69
    15fe:	93 30       	cpi	r25, 0x03	; 3
    1600:	18 f4       	brcc	.+6      	; 0x1608 <vfprintf+0x116>
    1602:	10 61       	ori	r17, 0x10	; 16
    1604:	80 5e       	subi	r24, 0xE0	; 224
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <vfprintf+0x122>
    1608:	98 2f       	mov	r25, r24
    160a:	95 56       	subi	r25, 0x65	; 101
    160c:	93 30       	cpi	r25, 0x03	; 3
    160e:	08 f0       	brcs	.+2      	; 0x1612 <vfprintf+0x120>
    1610:	a2 c1       	rjmp	.+836    	; 0x1956 <vfprintf+0x464>
    1612:	1f 7e       	andi	r17, 0xEF	; 239
    1614:	16 fd       	sbrc	r17, 6
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x12a>
    1618:	e6 e0       	ldi	r30, 0x06	; 6
    161a:	fe 2e       	mov	r15, r30
    161c:	1f 73       	andi	r17, 0x3F	; 63
    161e:	85 36       	cpi	r24, 0x65	; 101
    1620:	11 f4       	brne	.+4      	; 0x1626 <vfprintf+0x134>
    1622:	10 64       	ori	r17, 0x40	; 64
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x140>
    1626:	86 36       	cpi	r24, 0x66	; 102
    1628:	11 f4       	brne	.+4      	; 0x162e <vfprintf+0x13c>
    162a:	10 68       	ori	r17, 0x80	; 128
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x140>
    162e:	f1 10       	cpse	r15, r1
    1630:	fa 94       	dec	r15
    1632:	17 ff       	sbrs	r17, 7
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <vfprintf+0x152>
    1636:	fb e3       	ldi	r31, 0x3B	; 59
    1638:	ff 15       	cp	r31, r15
    163a:	48 f0       	brcs	.+18     	; 0x164e <vfprintf+0x15c>
    163c:	ef 2c       	mov	r14, r15
    163e:	e3 94       	inc	r14
    1640:	27 e0       	ldi	r18, 0x07	; 7
    1642:	0d c0       	rjmp	.+26     	; 0x165e <vfprintf+0x16c>
    1644:	27 e0       	ldi	r18, 0x07	; 7
    1646:	2f 15       	cp	r18, r15
    1648:	30 f0       	brcs	.+12     	; 0x1656 <vfprintf+0x164>
    164a:	2f 2d       	mov	r18, r15
    164c:	07 c0       	rjmp	.+14     	; 0x165c <vfprintf+0x16a>
    164e:	27 e0       	ldi	r18, 0x07	; 7
    1650:	7c e3       	ldi	r23, 0x3C	; 60
    1652:	e7 2e       	mov	r14, r23
    1654:	04 c0       	rjmp	.+8      	; 0x165e <vfprintf+0x16c>
    1656:	27 e0       	ldi	r18, 0x07	; 7
    1658:	67 e0       	ldi	r22, 0x07	; 7
    165a:	f6 2e       	mov	r15, r22
    165c:	ee 24       	eor	r14, r14
    165e:	ca 01       	movw	r24, r20
    1660:	04 96       	adiw	r24, 0x04	; 4
    1662:	9d 87       	std	Y+13, r25	; 0x0d
    1664:	8c 87       	std	Y+12, r24	; 0x0c
    1666:	fa 01       	movw	r30, r20
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	a1 01       	movw	r20, r2
    1672:	0e 2d       	mov	r16, r14
    1674:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__ftoa_engine>
    1678:	5c 01       	movw	r10, r24
    167a:	c9 80       	ldd	r12, Y+1	; 0x01
    167c:	2c 2d       	mov	r18, r12
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	39 8b       	std	Y+17, r19	; 0x11
    1682:	28 8b       	std	Y+16, r18	; 0x10
    1684:	c0 fe       	sbrs	r12, 0
    1686:	03 c0       	rjmp	.+6      	; 0x168e <vfprintf+0x19c>
    1688:	38 89       	ldd	r19, Y+16	; 0x10
    168a:	33 ff       	sbrs	r19, 3
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0x1a8>
    168e:	11 fd       	sbrc	r17, 1
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0x1ac>
    1692:	12 ff       	sbrs	r17, 2
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x1b0>
    1696:	00 e2       	ldi	r16, 0x20	; 32
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <vfprintf+0x1b2>
    169a:	0d e2       	ldi	r16, 0x2D	; 45
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <vfprintf+0x1b2>
    169e:	0b e2       	ldi	r16, 0x2B	; 43
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <vfprintf+0x1b2>
    16a2:	00 e0       	ldi	r16, 0x00	; 0
    16a4:	88 89       	ldd	r24, Y+16	; 0x10
    16a6:	99 89       	ldd	r25, Y+17	; 0x11
    16a8:	8c 70       	andi	r24, 0x0C	; 12
    16aa:	90 70       	andi	r25, 0x00	; 0
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <vfprintf+0x1c0>
    16b0:	3c c0       	rjmp	.+120    	; 0x172a <vfprintf+0x238>
    16b2:	00 23       	and	r16, r16
    16b4:	11 f0       	breq	.+4      	; 0x16ba <vfprintf+0x1c8>
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <vfprintf+0x1ca>
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	8d 15       	cp	r24, r13
    16be:	58 f4       	brcc	.+22     	; 0x16d6 <vfprintf+0x1e4>
    16c0:	d8 1a       	sub	r13, r24
    16c2:	13 fd       	sbrc	r17, 3
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <vfprintf+0x1e6>
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	b4 01       	movw	r22, r8
    16cc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    16d0:	da 94       	dec	r13
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <vfprintf+0x1d4>
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <vfprintf+0x1e6>
    16d6:	dd 24       	eor	r13, r13
    16d8:	00 23       	and	r16, r16
    16da:	29 f0       	breq	.+10     	; 0x16e6 <vfprintf+0x1f4>
    16dc:	80 2f       	mov	r24, r16
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	b4 01       	movw	r22, r8
    16e2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    16e6:	88 89       	ldd	r24, Y+16	; 0x10
    16e8:	83 fd       	sbrc	r24, 3
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <vfprintf+0x204>
    16ec:	3c e6       	ldi	r19, 0x6C	; 108
    16ee:	e3 2e       	mov	r14, r19
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	f3 2e       	mov	r15, r19
    16f4:	11 c0       	rjmp	.+34     	; 0x1718 <vfprintf+0x226>
    16f6:	28 e6       	ldi	r18, 0x68	; 104
    16f8:	e2 2e       	mov	r14, r18
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	f2 2e       	mov	r15, r18
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <vfprintf+0x226>
    1700:	01 15       	cp	r16, r1
    1702:	11 05       	cpc	r17, r1
    1704:	09 f0       	breq	.+2      	; 0x1708 <vfprintf+0x216>
    1706:	80 52       	subi	r24, 0x20	; 32
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	b4 01       	movw	r22, r8
    170c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1710:	08 94       	sec
    1712:	e1 1c       	adc	r14, r1
    1714:	f1 1c       	adc	r15, r1
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <vfprintf+0x22e>
    1718:	01 2f       	mov	r16, r17
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	00 71       	andi	r16, 0x10	; 16
    171e:	10 70       	andi	r17, 0x00	; 0
    1720:	f7 01       	movw	r30, r14
    1722:	84 91       	lpm	r24, Z
    1724:	88 23       	and	r24, r24
    1726:	61 f7       	brne	.-40     	; 0x1700 <vfprintf+0x20e>
    1728:	63 c2       	rjmp	.+1222   	; 0x1bf0 <vfprintf+0x6fe>
    172a:	17 ff       	sbrs	r17, 7
    172c:	0e c0       	rjmp	.+28     	; 0x174a <vfprintf+0x258>
    172e:	ea 0c       	add	r14, r10
    1730:	f8 89       	ldd	r31, Y+16	; 0x10
    1732:	f4 ff       	sbrs	r31, 4
    1734:	04 c0       	rjmp	.+8      	; 0x173e <vfprintf+0x24c>
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	81 33       	cpi	r24, 0x31	; 49
    173a:	09 f4       	brne	.+2      	; 0x173e <vfprintf+0x24c>
    173c:	ea 94       	dec	r14
    173e:	1e 14       	cp	r1, r14
    1740:	4c f5       	brge	.+82     	; 0x1794 <vfprintf+0x2a2>
    1742:	28 e0       	ldi	r18, 0x08	; 8
    1744:	2e 15       	cp	r18, r14
    1746:	48 f1       	brcs	.+82     	; 0x179a <vfprintf+0x2a8>
    1748:	2c c0       	rjmp	.+88     	; 0x17a2 <vfprintf+0x2b0>
    174a:	16 fd       	sbrc	r17, 6
    174c:	2a c0       	rjmp	.+84     	; 0x17a2 <vfprintf+0x2b0>
    174e:	8f 2d       	mov	r24, r15
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	8a 15       	cp	r24, r10
    1754:	9b 05       	cpc	r25, r11
    1756:	44 f0       	brlt	.+16     	; 0x1768 <vfprintf+0x276>
    1758:	3c ef       	ldi	r19, 0xFC	; 252
    175a:	a3 16       	cp	r10, r19
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	b3 06       	cpc	r11, r19
    1760:	1c f0       	brlt	.+6      	; 0x1768 <vfprintf+0x276>
    1762:	10 68       	ori	r17, 0x80	; 128
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vfprintf+0x276>
    1766:	fa 94       	dec	r15
    1768:	ff 20       	and	r15, r15
    176a:	49 f0       	breq	.+18     	; 0x177e <vfprintf+0x28c>
    176c:	e2 e0       	ldi	r30, 0x02	; 2
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	ec 0f       	add	r30, r28
    1772:	fd 1f       	adc	r31, r29
    1774:	ef 0d       	add	r30, r15
    1776:	f1 1d       	adc	r31, r1
    1778:	80 81       	ld	r24, Z
    177a:	80 33       	cpi	r24, 0x30	; 48
    177c:	a1 f3       	breq	.-24     	; 0x1766 <vfprintf+0x274>
    177e:	17 ff       	sbrs	r17, 7
    1780:	10 c0       	rjmp	.+32     	; 0x17a2 <vfprintf+0x2b0>
    1782:	ef 2c       	mov	r14, r15
    1784:	e3 94       	inc	r14
    1786:	8f 2d       	mov	r24, r15
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a8 16       	cp	r10, r24
    178c:	b9 06       	cpc	r11, r25
    178e:	44 f4       	brge	.+16     	; 0x17a0 <vfprintf+0x2ae>
    1790:	fa 18       	sub	r15, r10
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <vfprintf+0x2b0>
    1794:	ee 24       	eor	r14, r14
    1796:	e3 94       	inc	r14
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <vfprintf+0x2b0>
    179a:	98 e0       	ldi	r25, 0x08	; 8
    179c:	e9 2e       	mov	r14, r25
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <vfprintf+0x2b0>
    17a0:	ff 24       	eor	r15, r15
    17a2:	17 ff       	sbrs	r17, 7
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <vfprintf+0x2c2>
    17a6:	1a 14       	cp	r1, r10
    17a8:	1b 04       	cpc	r1, r11
    17aa:	3c f4       	brge	.+14     	; 0x17ba <vfprintf+0x2c8>
    17ac:	95 01       	movw	r18, r10
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <vfprintf+0x2cc>
    17b4:	25 e0       	ldi	r18, 0x05	; 5
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x2cc>
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	00 23       	and	r16, r16
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <vfprintf+0x2d4>
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	ff 20       	and	r15, r15
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <vfprintf+0x2e2>
    17ca:	8f 2d       	mov	r24, r15
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	28 0f       	add	r18, r24
    17d2:	39 1f       	adc	r19, r25
    17d4:	8d 2d       	mov	r24, r13
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	28 17       	cp	r18, r24
    17da:	39 07       	cpc	r19, r25
    17dc:	14 f4       	brge	.+4      	; 0x17e2 <vfprintf+0x2f0>
    17de:	d2 1a       	sub	r13, r18
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <vfprintf+0x2f2>
    17e2:	dd 24       	eor	r13, r13
    17e4:	61 2e       	mov	r6, r17
    17e6:	77 24       	eor	r7, r7
    17e8:	c3 01       	movw	r24, r6
    17ea:	89 70       	andi	r24, 0x09	; 9
    17ec:	90 70       	andi	r25, 0x00	; 0
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	49 f4       	brne	.+18     	; 0x1804 <vfprintf+0x312>
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x30e>
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	b4 01       	movw	r22, r8
    17fa:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    17fe:	da 94       	dec	r13
    1800:	dd 20       	and	r13, r13
    1802:	c1 f7       	brne	.-16     	; 0x17f4 <vfprintf+0x302>
    1804:	00 23       	and	r16, r16
    1806:	29 f0       	breq	.+10     	; 0x1812 <vfprintf+0x320>
    1808:	80 2f       	mov	r24, r16
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	b4 01       	movw	r22, r8
    180e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1812:	63 fc       	sbrc	r6, 3
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x336>
    1816:	06 c0       	rjmp	.+12     	; 0x1824 <vfprintf+0x332>
    1818:	80 e3       	ldi	r24, 0x30	; 48
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	b4 01       	movw	r22, r8
    181e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1822:	da 94       	dec	r13
    1824:	dd 20       	and	r13, r13
    1826:	c1 f7       	brne	.-16     	; 0x1818 <vfprintf+0x326>
    1828:	17 ff       	sbrs	r17, 7
    182a:	48 c0       	rjmp	.+144    	; 0x18bc <vfprintf+0x3ca>
    182c:	85 01       	movw	r16, r10
    182e:	b7 fe       	sbrs	r11, 7
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <vfprintf+0x344>
    1832:	00 e0       	ldi	r16, 0x00	; 0
    1834:	10 e0       	ldi	r17, 0x00	; 0
    1836:	66 24       	eor	r6, r6
    1838:	77 24       	eor	r7, r7
    183a:	95 01       	movw	r18, r10
    183c:	2e 19       	sub	r18, r14
    183e:	31 09       	sbc	r19, r1
    1840:	3b 8b       	std	Y+19, r19	; 0x13
    1842:	2a 8b       	std	Y+18, r18	; 0x12
    1844:	25 01       	movw	r4, r10
    1846:	40 1a       	sub	r4, r16
    1848:	51 0a       	sbc	r5, r17
    184a:	42 0c       	add	r4, r2
    184c:	53 1c       	adc	r5, r3
    184e:	6f 2d       	mov	r22, r15
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	ee 24       	eor	r14, r14
    1854:	ff 24       	eor	r15, r15
    1856:	e6 1a       	sub	r14, r22
    1858:	f7 0a       	sbc	r15, r23
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	0f 3f       	cpi	r16, 0xFF	; 255
    185e:	13 07       	cpc	r17, r19
    1860:	29 f4       	brne	.+10     	; 0x186c <vfprintf+0x37a>
    1862:	8e e2       	ldi	r24, 0x2E	; 46
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	b4 01       	movw	r22, r8
    1868:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    186c:	a0 16       	cp	r10, r16
    186e:	b1 06       	cpc	r11, r17
    1870:	54 f0       	brlt	.+20     	; 0x1886 <vfprintf+0x394>
    1872:	2a 89       	ldd	r18, Y+18	; 0x12
    1874:	3b 89       	ldd	r19, Y+19	; 0x13
    1876:	20 17       	cp	r18, r16
    1878:	31 07       	cpc	r19, r17
    187a:	2c f4       	brge	.+10     	; 0x1886 <vfprintf+0x394>
    187c:	f2 01       	movw	r30, r4
    187e:	e6 0d       	add	r30, r6
    1880:	f7 1d       	adc	r31, r7
    1882:	81 81       	ldd	r24, Z+1	; 0x01
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <vfprintf+0x396>
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	01 50       	subi	r16, 0x01	; 1
    188a:	10 40       	sbci	r17, 0x00	; 0
    188c:	08 94       	sec
    188e:	61 1c       	adc	r6, r1
    1890:	71 1c       	adc	r7, r1
    1892:	0e 15       	cp	r16, r14
    1894:	1f 05       	cpc	r17, r15
    1896:	2c f0       	brlt	.+10     	; 0x18a2 <vfprintf+0x3b0>
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	b4 01       	movw	r22, r8
    189c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    18a0:	dc cf       	rjmp	.-72     	; 0x185a <vfprintf+0x368>
    18a2:	0a 15       	cp	r16, r10
    18a4:	1b 05       	cpc	r17, r11
    18a6:	41 f4       	brne	.+16     	; 0x18b8 <vfprintf+0x3c6>
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	96 33       	cpi	r25, 0x36	; 54
    18ac:	20 f4       	brcc	.+8      	; 0x18b6 <vfprintf+0x3c4>
    18ae:	95 33       	cpi	r25, 0x35	; 53
    18b0:	19 f4       	brne	.+6      	; 0x18b8 <vfprintf+0x3c6>
    18b2:	38 89       	ldd	r19, Y+16	; 0x10
    18b4:	34 ff       	sbrs	r19, 4
    18b6:	81 e3       	ldi	r24, 0x31	; 49
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	49 c0       	rjmp	.+146    	; 0x194e <vfprintf+0x45c>
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	81 33       	cpi	r24, 0x31	; 49
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <vfprintf+0x3d4>
    18c2:	9f ee       	ldi	r25, 0xEF	; 239
    18c4:	c9 22       	and	r12, r25
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	b4 01       	movw	r22, r8
    18ca:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    18ce:	ff 20       	and	r15, r15
    18d0:	89 f0       	breq	.+34     	; 0x18f4 <vfprintf+0x402>
    18d2:	8e e2       	ldi	r24, 0x2E	; 46
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	b4 01       	movw	r22, r8
    18d8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    18dc:	12 e0       	ldi	r17, 0x02	; 2
    18de:	f1 01       	movw	r30, r2
    18e0:	e1 0f       	add	r30, r17
    18e2:	f1 1d       	adc	r31, r1
    18e4:	1f 5f       	subi	r17, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	b4 01       	movw	r22, r8
    18ec:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    18f0:	fa 94       	dec	r15
    18f2:	a9 f7       	brne	.-22     	; 0x18de <vfprintf+0x3ec>
    18f4:	64 fe       	sbrs	r6, 4
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <vfprintf+0x40c>
    18f8:	85 e4       	ldi	r24, 0x45	; 69
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <vfprintf+0x410>
    18fe:	85 e6       	ldi	r24, 0x65	; 101
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	b4 01       	movw	r22, r8
    1904:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1908:	b7 fc       	sbrc	r11, 7
    190a:	05 c0       	rjmp	.+10     	; 0x1916 <vfprintf+0x424>
    190c:	a1 14       	cp	r10, r1
    190e:	b1 04       	cpc	r11, r1
    1910:	41 f4       	brne	.+16     	; 0x1922 <vfprintf+0x430>
    1912:	c4 fe       	sbrs	r12, 4
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <vfprintf+0x430>
    1916:	b0 94       	com	r11
    1918:	a1 94       	neg	r10
    191a:	b1 08       	sbc	r11, r1
    191c:	b3 94       	inc	r11
    191e:	8d e2       	ldi	r24, 0x2D	; 45
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x432>
    1922:	8b e2       	ldi	r24, 0x2B	; 43
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	b4 01       	movw	r22, r8
    1928:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    192c:	80 e3       	ldi	r24, 0x30	; 48
    192e:	05 c0       	rjmp	.+10     	; 0x193a <vfprintf+0x448>
    1930:	8f 5f       	subi	r24, 0xFF	; 255
    1932:	e6 ef       	ldi	r30, 0xF6	; 246
    1934:	ff ef       	ldi	r31, 0xFF	; 255
    1936:	ae 0e       	add	r10, r30
    1938:	bf 1e       	adc	r11, r31
    193a:	fa e0       	ldi	r31, 0x0A	; 10
    193c:	af 16       	cp	r10, r31
    193e:	b1 04       	cpc	r11, r1
    1940:	bc f7       	brge	.-18     	; 0x1930 <vfprintf+0x43e>
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	b4 01       	movw	r22, r8
    1946:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    194a:	c5 01       	movw	r24, r10
    194c:	c0 96       	adiw	r24, 0x30	; 48
    194e:	b4 01       	movw	r22, r8
    1950:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1954:	4d c1       	rjmp	.+666    	; 0x1bf0 <vfprintf+0x6fe>
    1956:	83 36       	cpi	r24, 0x63	; 99
    1958:	31 f0       	breq	.+12     	; 0x1966 <vfprintf+0x474>
    195a:	83 37       	cpi	r24, 0x73	; 115
    195c:	89 f0       	breq	.+34     	; 0x1980 <vfprintf+0x48e>
    195e:	83 35       	cpi	r24, 0x53	; 83
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x472>
    1962:	59 c0       	rjmp	.+178    	; 0x1a16 <vfprintf+0x524>
    1964:	22 c0       	rjmp	.+68     	; 0x19aa <vfprintf+0x4b8>
    1966:	9a 01       	movw	r18, r20
    1968:	2e 5f       	subi	r18, 0xFE	; 254
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	3d 87       	std	Y+13, r19	; 0x0d
    196e:	2c 87       	std	Y+12, r18	; 0x0c
    1970:	fa 01       	movw	r30, r20
    1972:	80 81       	ld	r24, Z
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	e8 2e       	mov	r14, r24
    197a:	f1 2c       	mov	r15, r1
    197c:	51 01       	movw	r10, r2
    197e:	13 c0       	rjmp	.+38     	; 0x19a6 <vfprintf+0x4b4>
    1980:	9a 01       	movw	r18, r20
    1982:	2e 5f       	subi	r18, 0xFE	; 254
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	3d 87       	std	Y+13, r19	; 0x0d
    1988:	2c 87       	std	Y+12, r18	; 0x0c
    198a:	fa 01       	movw	r30, r20
    198c:	a0 80       	ld	r10, Z
    198e:	b1 80       	ldd	r11, Z+1	; 0x01
    1990:	16 ff       	sbrs	r17, 6
    1992:	03 c0       	rjmp	.+6      	; 0x199a <vfprintf+0x4a8>
    1994:	6f 2d       	mov	r22, r15
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <vfprintf+0x4ac>
    199a:	6f ef       	ldi	r22, 0xFF	; 255
    199c:	7f ef       	ldi	r23, 0xFF	; 255
    199e:	c5 01       	movw	r24, r10
    19a0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strnlen>
    19a4:	7c 01       	movw	r14, r24
    19a6:	1f 77       	andi	r17, 0x7F	; 127
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <vfprintf+0x4e0>
    19aa:	9a 01       	movw	r18, r20
    19ac:	2e 5f       	subi	r18, 0xFE	; 254
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	3d 87       	std	Y+13, r19	; 0x0d
    19b2:	2c 87       	std	Y+12, r18	; 0x0c
    19b4:	fa 01       	movw	r30, r20
    19b6:	a0 80       	ld	r10, Z
    19b8:	b1 80       	ldd	r11, Z+1	; 0x01
    19ba:	16 ff       	sbrs	r17, 6
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <vfprintf+0x4d2>
    19be:	6f 2d       	mov	r22, r15
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <vfprintf+0x4d6>
    19c4:	6f ef       	ldi	r22, 0xFF	; 255
    19c6:	7f ef       	ldi	r23, 0xFF	; 255
    19c8:	c5 01       	movw	r24, r10
    19ca:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <strnlen_P>
    19ce:	7c 01       	movw	r14, r24
    19d0:	10 68       	ori	r17, 0x80	; 128
    19d2:	13 fd       	sbrc	r17, 3
    19d4:	1c c0       	rjmp	.+56     	; 0x1a0e <vfprintf+0x51c>
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <vfprintf+0x4f2>
    19d8:	80 e2       	ldi	r24, 0x20	; 32
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	b4 01       	movw	r22, r8
    19de:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    19e2:	da 94       	dec	r13
    19e4:	8d 2d       	mov	r24, r13
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	e8 16       	cp	r14, r24
    19ea:	f9 06       	cpc	r15, r25
    19ec:	a8 f3       	brcs	.-22     	; 0x19d8 <vfprintf+0x4e6>
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <vfprintf+0x51c>
    19f0:	f5 01       	movw	r30, r10
    19f2:	17 fd       	sbrc	r17, 7
    19f4:	85 91       	lpm	r24, Z+
    19f6:	17 ff       	sbrs	r17, 7
    19f8:	81 91       	ld	r24, Z+
    19fa:	5f 01       	movw	r10, r30
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	b4 01       	movw	r22, r8
    1a00:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1a04:	d1 10       	cpse	r13, r1
    1a06:	da 94       	dec	r13
    1a08:	08 94       	sec
    1a0a:	e1 08       	sbc	r14, r1
    1a0c:	f1 08       	sbc	r15, r1
    1a0e:	e1 14       	cp	r14, r1
    1a10:	f1 04       	cpc	r15, r1
    1a12:	71 f7       	brne	.-36     	; 0x19f0 <vfprintf+0x4fe>
    1a14:	ed c0       	rjmp	.+474    	; 0x1bf0 <vfprintf+0x6fe>
    1a16:	84 36       	cpi	r24, 0x64	; 100
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <vfprintf+0x52c>
    1a1a:	89 36       	cpi	r24, 0x69	; 105
    1a1c:	71 f5       	brne	.+92     	; 0x1a7a <vfprintf+0x588>
    1a1e:	9a 01       	movw	r18, r20
    1a20:	17 ff       	sbrs	r17, 7
    1a22:	0a c0       	rjmp	.+20     	; 0x1a38 <vfprintf+0x546>
    1a24:	2c 5f       	subi	r18, 0xFC	; 252
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	3d 87       	std	Y+13, r19	; 0x0d
    1a2a:	2c 87       	std	Y+12, r18	; 0x0c
    1a2c:	fa 01       	movw	r30, r20
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	a2 81       	ldd	r26, Z+2	; 0x02
    1a34:	b3 81       	ldd	r27, Z+3	; 0x03
    1a36:	0b c0       	rjmp	.+22     	; 0x1a4e <vfprintf+0x55c>
    1a38:	2e 5f       	subi	r18, 0xFE	; 254
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	3d 87       	std	Y+13, r19	; 0x0d
    1a3e:	2c 87       	std	Y+12, r18	; 0x0c
    1a40:	fa 01       	movw	r30, r20
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	aa 27       	eor	r26, r26
    1a48:	97 fd       	sbrc	r25, 7
    1a4a:	a0 95       	com	r26
    1a4c:	ba 2f       	mov	r27, r26
    1a4e:	01 2f       	mov	r16, r17
    1a50:	0f 76       	andi	r16, 0x6F	; 111
    1a52:	b7 ff       	sbrs	r27, 7
    1a54:	08 c0       	rjmp	.+16     	; 0x1a66 <vfprintf+0x574>
    1a56:	b0 95       	com	r27
    1a58:	a0 95       	com	r26
    1a5a:	90 95       	com	r25
    1a5c:	81 95       	neg	r24
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	af 4f       	sbci	r26, 0xFF	; 255
    1a62:	bf 4f       	sbci	r27, 0xFF	; 255
    1a64:	00 68       	ori	r16, 0x80	; 128
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	a1 01       	movw	r20, r2
    1a6c:	2a e0       	ldi	r18, 0x0A	; 10
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__ultoa_invert>
    1a74:	e8 2e       	mov	r14, r24
    1a76:	e2 18       	sub	r14, r2
    1a78:	41 c0       	rjmp	.+130    	; 0x1afc <vfprintf+0x60a>
    1a7a:	85 37       	cpi	r24, 0x75	; 117
    1a7c:	21 f4       	brne	.+8      	; 0x1a86 <vfprintf+0x594>
    1a7e:	1f 7e       	andi	r17, 0xEF	; 239
    1a80:	2a e0       	ldi	r18, 0x0A	; 10
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	20 c0       	rjmp	.+64     	; 0x1ac6 <vfprintf+0x5d4>
    1a86:	19 7f       	andi	r17, 0xF9	; 249
    1a88:	8f 36       	cpi	r24, 0x6F	; 111
    1a8a:	a9 f0       	breq	.+42     	; 0x1ab6 <vfprintf+0x5c4>
    1a8c:	80 37       	cpi	r24, 0x70	; 112
    1a8e:	20 f4       	brcc	.+8      	; 0x1a98 <vfprintf+0x5a6>
    1a90:	88 35       	cpi	r24, 0x58	; 88
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <vfprintf+0x5a4>
    1a94:	b0 c0       	rjmp	.+352    	; 0x1bf6 <vfprintf+0x704>
    1a96:	0b c0       	rjmp	.+22     	; 0x1aae <vfprintf+0x5bc>
    1a98:	80 37       	cpi	r24, 0x70	; 112
    1a9a:	21 f0       	breq	.+8      	; 0x1aa4 <vfprintf+0x5b2>
    1a9c:	88 37       	cpi	r24, 0x78	; 120
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <vfprintf+0x5b0>
    1aa0:	aa c0       	rjmp	.+340    	; 0x1bf6 <vfprintf+0x704>
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <vfprintf+0x5b4>
    1aa4:	10 61       	ori	r17, 0x10	; 16
    1aa6:	14 ff       	sbrs	r17, 4
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <vfprintf+0x5ca>
    1aaa:	14 60       	ori	r17, 0x04	; 4
    1aac:	07 c0       	rjmp	.+14     	; 0x1abc <vfprintf+0x5ca>
    1aae:	14 ff       	sbrs	r17, 4
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <vfprintf+0x5d0>
    1ab2:	16 60       	ori	r17, 0x06	; 6
    1ab4:	06 c0       	rjmp	.+12     	; 0x1ac2 <vfprintf+0x5d0>
    1ab6:	28 e0       	ldi	r18, 0x08	; 8
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <vfprintf+0x5d4>
    1abc:	20 e1       	ldi	r18, 0x10	; 16
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0x5d4>
    1ac2:	20 e1       	ldi	r18, 0x10	; 16
    1ac4:	32 e0       	ldi	r19, 0x02	; 2
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	17 ff       	sbrs	r17, 7
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <vfprintf+0x5ec>
    1acc:	04 96       	adiw	r24, 0x04	; 4
    1ace:	9d 87       	std	Y+13, r25	; 0x0d
    1ad0:	8c 87       	std	Y+12, r24	; 0x0c
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <vfprintf+0x5fc>
    1ade:	02 96       	adiw	r24, 0x02	; 2
    1ae0:	9d 87       	std	Y+13, r25	; 0x0d
    1ae2:	8c 87       	std	Y+12, r24	; 0x0c
    1ae4:	fa 01       	movw	r30, r20
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a1 01       	movw	r20, r2
    1af0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__ultoa_invert>
    1af4:	e8 2e       	mov	r14, r24
    1af6:	e2 18       	sub	r14, r2
    1af8:	01 2f       	mov	r16, r17
    1afa:	0f 77       	andi	r16, 0x7F	; 127
    1afc:	06 ff       	sbrs	r16, 6
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <vfprintf+0x620>
    1b00:	0e 7f       	andi	r16, 0xFE	; 254
    1b02:	ef 14       	cp	r14, r15
    1b04:	30 f4       	brcc	.+12     	; 0x1b12 <vfprintf+0x620>
    1b06:	04 ff       	sbrs	r16, 4
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <vfprintf+0x624>
    1b0a:	02 fd       	sbrc	r16, 2
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <vfprintf+0x624>
    1b0e:	0f 7e       	andi	r16, 0xEF	; 239
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <vfprintf+0x624>
    1b12:	1e 2d       	mov	r17, r14
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <vfprintf+0x626>
    1b16:	1f 2d       	mov	r17, r15
    1b18:	80 2f       	mov	r24, r16
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	04 ff       	sbrs	r16, 4
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <vfprintf+0x646>
    1b20:	fe 01       	movw	r30, r28
    1b22:	ee 0d       	add	r30, r14
    1b24:	f1 1d       	adc	r31, r1
    1b26:	20 81       	ld	r18, Z
    1b28:	20 33       	cpi	r18, 0x30	; 48
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <vfprintf+0x63e>
    1b2c:	09 7e       	andi	r16, 0xE9	; 233
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <vfprintf+0x650>
    1b30:	02 ff       	sbrs	r16, 2
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <vfprintf+0x64e>
    1b34:	1e 5f       	subi	r17, 0xFE	; 254
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <vfprintf+0x650>
    1b38:	86 78       	andi	r24, 0x86	; 134
    1b3a:	90 70       	andi	r25, 0x00	; 0
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfprintf+0x650>
    1b40:	1f 5f       	subi	r17, 0xFF	; 255
    1b42:	a0 2e       	mov	r10, r16
    1b44:	bb 24       	eor	r11, r11
    1b46:	03 fd       	sbrc	r16, 3
    1b48:	12 c0       	rjmp	.+36     	; 0x1b6e <vfprintf+0x67c>
    1b4a:	00 ff       	sbrs	r16, 0
    1b4c:	0d c0       	rjmp	.+26     	; 0x1b68 <vfprintf+0x676>
    1b4e:	fe 2c       	mov	r15, r14
    1b50:	1d 15       	cp	r17, r13
    1b52:	50 f4       	brcc	.+20     	; 0x1b68 <vfprintf+0x676>
    1b54:	fd 0c       	add	r15, r13
    1b56:	f1 1a       	sub	r15, r17
    1b58:	1d 2d       	mov	r17, r13
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <vfprintf+0x676>
    1b5c:	80 e2       	ldi	r24, 0x20	; 32
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	b4 01       	movw	r22, r8
    1b62:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1b66:	1f 5f       	subi	r17, 0xFF	; 255
    1b68:	1d 15       	cp	r17, r13
    1b6a:	c0 f3       	brcs	.-16     	; 0x1b5c <vfprintf+0x66a>
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <vfprintf+0x684>
    1b6e:	1d 15       	cp	r17, r13
    1b70:	10 f4       	brcc	.+4      	; 0x1b76 <vfprintf+0x684>
    1b72:	d1 1a       	sub	r13, r17
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <vfprintf+0x686>
    1b76:	dd 24       	eor	r13, r13
    1b78:	a4 fe       	sbrs	r10, 4
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <vfprintf+0x6a8>
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	b4 01       	movw	r22, r8
    1b82:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1b86:	a2 fe       	sbrs	r10, 2
    1b88:	1f c0       	rjmp	.+62     	; 0x1bc8 <vfprintf+0x6d6>
    1b8a:	a1 fe       	sbrs	r10, 1
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <vfprintf+0x6a2>
    1b8e:	88 e5       	ldi	r24, 0x58	; 88
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	10 c0       	rjmp	.+32     	; 0x1bb4 <vfprintf+0x6c2>
    1b94:	88 e7       	ldi	r24, 0x78	; 120
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0d c0       	rjmp	.+26     	; 0x1bb4 <vfprintf+0x6c2>
    1b9a:	c5 01       	movw	r24, r10
    1b9c:	86 78       	andi	r24, 0x86	; 134
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	91 f0       	breq	.+36     	; 0x1bc8 <vfprintf+0x6d6>
    1ba4:	a1 fc       	sbrc	r10, 1
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <vfprintf+0x6ba>
    1ba8:	80 e2       	ldi	r24, 0x20	; 32
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <vfprintf+0x6bc>
    1bac:	8b e2       	ldi	r24, 0x2B	; 43
    1bae:	07 fd       	sbrc	r16, 7
    1bb0:	8d e2       	ldi	r24, 0x2D	; 45
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	b4 01       	movw	r22, r8
    1bb6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <vfprintf+0x6d6>
    1bbc:	80 e3       	ldi	r24, 0x30	; 48
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	b4 01       	movw	r22, r8
    1bc2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1bc6:	fa 94       	dec	r15
    1bc8:	ef 14       	cp	r14, r15
    1bca:	c0 f3       	brcs	.-16     	; 0x1bbc <vfprintf+0x6ca>
    1bcc:	ea 94       	dec	r14
    1bce:	f1 01       	movw	r30, r2
    1bd0:	ee 0d       	add	r30, r14
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	80 81       	ld	r24, Z
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	b4 01       	movw	r22, r8
    1bda:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1bde:	ee 20       	and	r14, r14
    1be0:	a9 f7       	brne	.-22     	; 0x1bcc <vfprintf+0x6da>
    1be2:	06 c0       	rjmp	.+12     	; 0x1bf0 <vfprintf+0x6fe>
    1be4:	80 e2       	ldi	r24, 0x20	; 32
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	b4 01       	movw	r22, r8
    1bea:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fputc>
    1bee:	da 94       	dec	r13
    1bf0:	dd 20       	and	r13, r13
    1bf2:	c1 f7       	brne	.-16     	; 0x1be4 <vfprintf+0x6f2>
    1bf4:	8e cc       	rjmp	.-1764   	; 0x1512 <vfprintf+0x20>
    1bf6:	f4 01       	movw	r30, r8
    1bf8:	86 81       	ldd	r24, Z+6	; 0x06
    1bfa:	97 81       	ldd	r25, Z+7	; 0x07
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <vfprintf+0x710>
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	65 96       	adiw	r28, 0x15	; 21
    1c04:	e2 e1       	ldi	r30, 0x12	; 18
    1c06:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__epilogue_restores__>

00001c0a <__divmodhi4>:
    1c0a:	97 fb       	bst	r25, 7
    1c0c:	09 2e       	mov	r0, r25
    1c0e:	07 26       	eor	r0, r23
    1c10:	0a d0       	rcall	.+20     	; 0x1c26 <__divmodhi4_neg1>
    1c12:	77 fd       	sbrc	r23, 7
    1c14:	04 d0       	rcall	.+8      	; 0x1c1e <__divmodhi4_neg2>
    1c16:	43 d0       	rcall	.+134    	; 0x1c9e <__udivmodhi4>
    1c18:	06 d0       	rcall	.+12     	; 0x1c26 <__divmodhi4_neg1>
    1c1a:	00 20       	and	r0, r0
    1c1c:	1a f4       	brpl	.+6      	; 0x1c24 <__divmodhi4_exit>

00001c1e <__divmodhi4_neg2>:
    1c1e:	70 95       	com	r23
    1c20:	61 95       	neg	r22
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255

00001c24 <__divmodhi4_exit>:
    1c24:	08 95       	ret

00001c26 <__divmodhi4_neg1>:
    1c26:	f6 f7       	brtc	.-4      	; 0x1c24 <__divmodhi4_exit>
    1c28:	90 95       	com	r25
    1c2a:	81 95       	neg	r24
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	08 95       	ret

00001c30 <__prologue_saves__>:
    1c30:	2f 92       	push	r2
    1c32:	3f 92       	push	r3
    1c34:	4f 92       	push	r4
    1c36:	5f 92       	push	r5
    1c38:	6f 92       	push	r6
    1c3a:	7f 92       	push	r7
    1c3c:	8f 92       	push	r8
    1c3e:	9f 92       	push	r9
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	ca 1b       	sub	r28, r26
    1c5a:	db 0b       	sbc	r29, r27
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	09 94       	ijmp

00001c68 <__epilogue_restores__>:
    1c68:	2a 88       	ldd	r2, Y+18	; 0x12
    1c6a:	39 88       	ldd	r3, Y+17	; 0x11
    1c6c:	48 88       	ldd	r4, Y+16	; 0x10
    1c6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c70:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c72:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c74:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c76:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c78:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c7a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c7c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c7e:	df 80       	ldd	r13, Y+7	; 0x07
    1c80:	ee 80       	ldd	r14, Y+6	; 0x06
    1c82:	fd 80       	ldd	r15, Y+5	; 0x05
    1c84:	0c 81       	ldd	r16, Y+4	; 0x04
    1c86:	1b 81       	ldd	r17, Y+3	; 0x03
    1c88:	aa 81       	ldd	r26, Y+2	; 0x02
    1c8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c8c:	ce 0f       	add	r28, r30
    1c8e:	d1 1d       	adc	r29, r1
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	ed 01       	movw	r28, r26
    1c9c:	08 95       	ret

00001c9e <__udivmodhi4>:
    1c9e:	aa 1b       	sub	r26, r26
    1ca0:	bb 1b       	sub	r27, r27
    1ca2:	51 e1       	ldi	r21, 0x11	; 17
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <__udivmodhi4_ep>

00001ca6 <__udivmodhi4_loop>:
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	a6 17       	cp	r26, r22
    1cac:	b7 07       	cpc	r27, r23
    1cae:	10 f0       	brcs	.+4      	; 0x1cb4 <__udivmodhi4_ep>
    1cb0:	a6 1b       	sub	r26, r22
    1cb2:	b7 0b       	sbc	r27, r23

00001cb4 <__udivmodhi4_ep>:
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	5a 95       	dec	r21
    1cba:	a9 f7       	brne	.-22     	; 0x1ca6 <__udivmodhi4_loop>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	08 95       	ret

00001cc6 <abort>:
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	f8 94       	cli
    1ccc:	0c 94 18 10 	jmp	0x2030	; 0x2030 <_exit>

00001cd0 <__ftoa_engine>:
    1cd0:	28 30       	cpi	r18, 0x08	; 8
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <__ftoa_engine+0x6>
    1cd4:	27 e0       	ldi	r18, 0x07	; 7
    1cd6:	33 27       	eor	r19, r19
    1cd8:	da 01       	movw	r26, r20
    1cda:	99 0f       	add	r25, r25
    1cdc:	31 1d       	adc	r19, r1
    1cde:	87 fd       	sbrc	r24, 7
    1ce0:	91 60       	ori	r25, 0x01	; 1
    1ce2:	00 96       	adiw	r24, 0x00	; 0
    1ce4:	61 05       	cpc	r22, r1
    1ce6:	71 05       	cpc	r23, r1
    1ce8:	39 f4       	brne	.+14     	; 0x1cf8 <__ftoa_engine+0x28>
    1cea:	32 60       	ori	r19, 0x02	; 2
    1cec:	2e 5f       	subi	r18, 0xFE	; 254
    1cee:	3d 93       	st	X+, r19
    1cf0:	30 e3       	ldi	r19, 0x30	; 48
    1cf2:	2a 95       	dec	r18
    1cf4:	e1 f7       	brne	.-8      	; 0x1cee <__ftoa_engine+0x1e>
    1cf6:	08 95       	ret
    1cf8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfa:	30 f0       	brcs	.+12     	; 0x1d08 <__ftoa_engine+0x38>
    1cfc:	80 38       	cpi	r24, 0x80	; 128
    1cfe:	71 05       	cpc	r23, r1
    1d00:	61 05       	cpc	r22, r1
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <__ftoa_engine+0x36>
    1d04:	3c 5f       	subi	r19, 0xFC	; 252
    1d06:	3c 5f       	subi	r19, 0xFC	; 252
    1d08:	3d 93       	st	X+, r19
    1d0a:	91 30       	cpi	r25, 0x01	; 1
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <__ftoa_engine+0x40>
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	91 1d       	adc	r25, r1
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	1f 93       	push	r17
    1d18:	0f 93       	push	r16
    1d1a:	ff 92       	push	r15
    1d1c:	ef 92       	push	r14
    1d1e:	19 2f       	mov	r17, r25
    1d20:	98 7f       	andi	r25, 0xF8	; 248
    1d22:	96 95       	lsr	r25
    1d24:	e9 2f       	mov	r30, r25
    1d26:	96 95       	lsr	r25
    1d28:	96 95       	lsr	r25
    1d2a:	e9 0f       	add	r30, r25
    1d2c:	ff 27       	eor	r31, r31
    1d2e:	e6 53       	subi	r30, 0x36	; 54
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	99 27       	eor	r25, r25
    1d34:	33 27       	eor	r19, r19
    1d36:	ee 24       	eor	r14, r14
    1d38:	ff 24       	eor	r15, r15
    1d3a:	a7 01       	movw	r20, r14
    1d3c:	e7 01       	movw	r28, r14
    1d3e:	05 90       	lpm	r0, Z+
    1d40:	08 94       	sec
    1d42:	07 94       	ror	r0
    1d44:	28 f4       	brcc	.+10     	; 0x1d50 <__ftoa_engine+0x80>
    1d46:	36 0f       	add	r19, r22
    1d48:	e7 1e       	adc	r14, r23
    1d4a:	f8 1e       	adc	r15, r24
    1d4c:	49 1f       	adc	r20, r25
    1d4e:	51 1d       	adc	r21, r1
    1d50:	66 0f       	add	r22, r22
    1d52:	77 1f       	adc	r23, r23
    1d54:	88 1f       	adc	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	06 94       	lsr	r0
    1d5a:	a1 f7       	brne	.-24     	; 0x1d44 <__ftoa_engine+0x74>
    1d5c:	05 90       	lpm	r0, Z+
    1d5e:	07 94       	ror	r0
    1d60:	28 f4       	brcc	.+10     	; 0x1d6c <__ftoa_engine+0x9c>
    1d62:	e7 0e       	add	r14, r23
    1d64:	f8 1e       	adc	r15, r24
    1d66:	49 1f       	adc	r20, r25
    1d68:	56 1f       	adc	r21, r22
    1d6a:	c1 1d       	adc	r28, r1
    1d6c:	77 0f       	add	r23, r23
    1d6e:	88 1f       	adc	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	66 1f       	adc	r22, r22
    1d74:	06 94       	lsr	r0
    1d76:	a1 f7       	brne	.-24     	; 0x1d60 <__ftoa_engine+0x90>
    1d78:	05 90       	lpm	r0, Z+
    1d7a:	07 94       	ror	r0
    1d7c:	28 f4       	brcc	.+10     	; 0x1d88 <__ftoa_engine+0xb8>
    1d7e:	f8 0e       	add	r15, r24
    1d80:	49 1f       	adc	r20, r25
    1d82:	56 1f       	adc	r21, r22
    1d84:	c7 1f       	adc	r28, r23
    1d86:	d1 1d       	adc	r29, r1
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	66 1f       	adc	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	06 94       	lsr	r0
    1d92:	a1 f7       	brne	.-24     	; 0x1d7c <__ftoa_engine+0xac>
    1d94:	05 90       	lpm	r0, Z+
    1d96:	07 94       	ror	r0
    1d98:	20 f4       	brcc	.+8      	; 0x1da2 <__ftoa_engine+0xd2>
    1d9a:	49 0f       	add	r20, r25
    1d9c:	56 1f       	adc	r21, r22
    1d9e:	c7 1f       	adc	r28, r23
    1da0:	d8 1f       	adc	r29, r24
    1da2:	99 0f       	add	r25, r25
    1da4:	66 1f       	adc	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	88 1f       	adc	r24, r24
    1daa:	06 94       	lsr	r0
    1dac:	a9 f7       	brne	.-22     	; 0x1d98 <__ftoa_engine+0xc8>
    1dae:	84 91       	lpm	r24, Z
    1db0:	10 95       	com	r17
    1db2:	17 70       	andi	r17, 0x07	; 7
    1db4:	41 f0       	breq	.+16     	; 0x1dc6 <__ftoa_engine+0xf6>
    1db6:	d6 95       	lsr	r29
    1db8:	c7 95       	ror	r28
    1dba:	57 95       	ror	r21
    1dbc:	47 95       	ror	r20
    1dbe:	f7 94       	ror	r15
    1dc0:	e7 94       	ror	r14
    1dc2:	1a 95       	dec	r17
    1dc4:	c1 f7       	brne	.-16     	; 0x1db6 <__ftoa_engine+0xe6>
    1dc6:	e0 e7       	ldi	r30, 0x70	; 112
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	68 94       	set
    1dcc:	15 90       	lpm	r1, Z+
    1dce:	15 91       	lpm	r17, Z+
    1dd0:	35 91       	lpm	r19, Z+
    1dd2:	65 91       	lpm	r22, Z+
    1dd4:	95 91       	lpm	r25, Z+
    1dd6:	05 90       	lpm	r0, Z+
    1dd8:	7f e2       	ldi	r23, 0x2F	; 47
    1dda:	73 95       	inc	r23
    1ddc:	e1 18       	sub	r14, r1
    1dde:	f1 0a       	sbc	r15, r17
    1de0:	43 0b       	sbc	r20, r19
    1de2:	56 0b       	sbc	r21, r22
    1de4:	c9 0b       	sbc	r28, r25
    1de6:	d0 09       	sbc	r29, r0
    1de8:	c0 f7       	brcc	.-16     	; 0x1dda <__ftoa_engine+0x10a>
    1dea:	e1 0c       	add	r14, r1
    1dec:	f1 1e       	adc	r15, r17
    1dee:	43 1f       	adc	r20, r19
    1df0:	56 1f       	adc	r21, r22
    1df2:	c9 1f       	adc	r28, r25
    1df4:	d0 1d       	adc	r29, r0
    1df6:	7e f4       	brtc	.+30     	; 0x1e16 <__ftoa_engine+0x146>
    1df8:	70 33       	cpi	r23, 0x30	; 48
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__ftoa_engine+0x130>
    1dfc:	8a 95       	dec	r24
    1dfe:	e6 cf       	rjmp	.-52     	; 0x1dcc <__ftoa_engine+0xfc>
    1e00:	e8 94       	clt
    1e02:	01 50       	subi	r16, 0x01	; 1
    1e04:	30 f0       	brcs	.+12     	; 0x1e12 <__ftoa_engine+0x142>
    1e06:	08 0f       	add	r16, r24
    1e08:	0a f4       	brpl	.+2      	; 0x1e0c <__ftoa_engine+0x13c>
    1e0a:	00 27       	eor	r16, r16
    1e0c:	02 17       	cp	r16, r18
    1e0e:	08 f4       	brcc	.+2      	; 0x1e12 <__ftoa_engine+0x142>
    1e10:	20 2f       	mov	r18, r16
    1e12:	23 95       	inc	r18
    1e14:	02 2f       	mov	r16, r18
    1e16:	7a 33       	cpi	r23, 0x3A	; 58
    1e18:	28 f0       	brcs	.+10     	; 0x1e24 <__ftoa_engine+0x154>
    1e1a:	79 e3       	ldi	r23, 0x39	; 57
    1e1c:	7d 93       	st	X+, r23
    1e1e:	2a 95       	dec	r18
    1e20:	e9 f7       	brne	.-6      	; 0x1e1c <__ftoa_engine+0x14c>
    1e22:	10 c0       	rjmp	.+32     	; 0x1e44 <__ftoa_engine+0x174>
    1e24:	7d 93       	st	X+, r23
    1e26:	2a 95       	dec	r18
    1e28:	89 f6       	brne	.-94     	; 0x1dcc <__ftoa_engine+0xfc>
    1e2a:	06 94       	lsr	r0
    1e2c:	97 95       	ror	r25
    1e2e:	67 95       	ror	r22
    1e30:	37 95       	ror	r19
    1e32:	17 95       	ror	r17
    1e34:	17 94       	ror	r1
    1e36:	e1 18       	sub	r14, r1
    1e38:	f1 0a       	sbc	r15, r17
    1e3a:	43 0b       	sbc	r20, r19
    1e3c:	56 0b       	sbc	r21, r22
    1e3e:	c9 0b       	sbc	r28, r25
    1e40:	d0 09       	sbc	r29, r0
    1e42:	98 f0       	brcs	.+38     	; 0x1e6a <__ftoa_engine+0x19a>
    1e44:	23 95       	inc	r18
    1e46:	7e 91       	ld	r23, -X
    1e48:	73 95       	inc	r23
    1e4a:	7a 33       	cpi	r23, 0x3A	; 58
    1e4c:	08 f0       	brcs	.+2      	; 0x1e50 <__ftoa_engine+0x180>
    1e4e:	70 e3       	ldi	r23, 0x30	; 48
    1e50:	7c 93       	st	X, r23
    1e52:	20 13       	cpse	r18, r16
    1e54:	b8 f7       	brcc	.-18     	; 0x1e44 <__ftoa_engine+0x174>
    1e56:	7e 91       	ld	r23, -X
    1e58:	70 61       	ori	r23, 0x10	; 16
    1e5a:	7d 93       	st	X+, r23
    1e5c:	30 f0       	brcs	.+12     	; 0x1e6a <__ftoa_engine+0x19a>
    1e5e:	83 95       	inc	r24
    1e60:	71 e3       	ldi	r23, 0x31	; 49
    1e62:	7d 93       	st	X+, r23
    1e64:	70 e3       	ldi	r23, 0x30	; 48
    1e66:	2a 95       	dec	r18
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <__ftoa_engine+0x192>
    1e6a:	11 24       	eor	r1, r1
    1e6c:	ef 90       	pop	r14
    1e6e:	ff 90       	pop	r15
    1e70:	0f 91       	pop	r16
    1e72:	1f 91       	pop	r17
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	99 27       	eor	r25, r25
    1e7a:	87 fd       	sbrc	r24, 7
    1e7c:	90 95       	com	r25
    1e7e:	08 95       	ret

00001e80 <strnlen_P>:
    1e80:	fc 01       	movw	r30, r24
    1e82:	05 90       	lpm	r0, Z+
    1e84:	61 50       	subi	r22, 0x01	; 1
    1e86:	70 40       	sbci	r23, 0x00	; 0
    1e88:	01 10       	cpse	r0, r1
    1e8a:	d8 f7       	brcc	.-10     	; 0x1e82 <strnlen_P+0x2>
    1e8c:	80 95       	com	r24
    1e8e:	90 95       	com	r25
    1e90:	8e 0f       	add	r24, r30
    1e92:	9f 1f       	adc	r25, r31
    1e94:	08 95       	ret

00001e96 <strcmp>:
    1e96:	fb 01       	movw	r30, r22
    1e98:	dc 01       	movw	r26, r24
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	80 19       	sub	r24, r0
    1ea0:	01 10       	cpse	r0, r1
    1ea2:	d9 f3       	breq	.-10     	; 0x1e9a <strcmp+0x4>
    1ea4:	99 0b       	sbc	r25, r25
    1ea6:	08 95       	ret

00001ea8 <strnlen>:
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	61 50       	subi	r22, 0x01	; 1
    1eac:	70 40       	sbci	r23, 0x00	; 0
    1eae:	01 90       	ld	r0, Z+
    1eb0:	01 10       	cpse	r0, r1
    1eb2:	d8 f7       	brcc	.-10     	; 0x1eaa <strnlen+0x2>
    1eb4:	80 95       	com	r24
    1eb6:	90 95       	com	r25
    1eb8:	8e 0f       	add	r24, r30
    1eba:	9f 1f       	adc	r25, r31
    1ebc:	08 95       	ret

00001ebe <fputc>:
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	8c 01       	movw	r16, r24
    1ec8:	eb 01       	movw	r28, r22
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	81 ff       	sbrs	r24, 1
    1ece:	1b c0       	rjmp	.+54     	; 0x1f06 <fputc+0x48>
    1ed0:	82 ff       	sbrs	r24, 2
    1ed2:	0d c0       	rjmp	.+26     	; 0x1eee <fputc+0x30>
    1ed4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	64 f4       	brge	.+24     	; 0x1efa <fputc+0x3c>
    1ee2:	e8 81       	ld	r30, Y
    1ee4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee6:	01 93       	st	Z+, r16
    1ee8:	f9 83       	std	Y+1, r31	; 0x01
    1eea:	e8 83       	st	Y, r30
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <fputc+0x3c>
    1eee:	e8 85       	ldd	r30, Y+8	; 0x08
    1ef0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ef2:	80 2f       	mov	r24, r16
    1ef4:	09 95       	icall
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	31 f4       	brne	.+12     	; 0x1f06 <fputc+0x48>
    1efa:	8e 81       	ldd	r24, Y+6	; 0x06
    1efc:	9f 81       	ldd	r25, Y+7	; 0x07
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	9f 83       	std	Y+7, r25	; 0x07
    1f02:	8e 83       	std	Y+6, r24	; 0x06
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <fputc+0x4c>
    1f06:	0f ef       	ldi	r16, 0xFF	; 255
    1f08:	1f ef       	ldi	r17, 0xFF	; 255
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	08 95       	ret

00001f16 <printf>:
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e1 e9       	ldi	r30, 0x91	; 145
    1f1c:	ff e0       	ldi	r31, 0x0F	; 15
    1f1e:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__+0x20>
    1f22:	fe 01       	movw	r30, r28
    1f24:	35 96       	adiw	r30, 0x05	; 5
    1f26:	61 91       	ld	r22, Z+
    1f28:	71 91       	ld	r23, Z+
    1f2a:	80 91 46 08 	lds	r24, 0x0846
    1f2e:	90 91 47 08 	lds	r25, 0x0847
    1f32:	af 01       	movw	r20, r30
    1f34:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <vfprintf>
    1f38:	20 96       	adiw	r28, 0x00	; 0
    1f3a:	e2 e0       	ldi	r30, 0x02	; 2
    1f3c:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__+0x20>

00001f40 <__ultoa_invert>:
    1f40:	fa 01       	movw	r30, r20
    1f42:	aa 27       	eor	r26, r26
    1f44:	28 30       	cpi	r18, 0x08	; 8
    1f46:	51 f1       	breq	.+84     	; 0x1f9c <__ultoa_invert+0x5c>
    1f48:	20 31       	cpi	r18, 0x10	; 16
    1f4a:	81 f1       	breq	.+96     	; 0x1fac <__ultoa_invert+0x6c>
    1f4c:	e8 94       	clt
    1f4e:	6f 93       	push	r22
    1f50:	6e 7f       	andi	r22, 0xFE	; 254
    1f52:	6e 5f       	subi	r22, 0xFE	; 254
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	8f 4f       	sbci	r24, 0xFF	; 255
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	af 4f       	sbci	r26, 0xFF	; 255
    1f5c:	b1 e0       	ldi	r27, 0x01	; 1
    1f5e:	3e d0       	rcall	.+124    	; 0x1fdc <__ultoa_invert+0x9c>
    1f60:	b4 e0       	ldi	r27, 0x04	; 4
    1f62:	3c d0       	rcall	.+120    	; 0x1fdc <__ultoa_invert+0x9c>
    1f64:	67 0f       	add	r22, r23
    1f66:	78 1f       	adc	r23, r24
    1f68:	89 1f       	adc	r24, r25
    1f6a:	9a 1f       	adc	r25, r26
    1f6c:	a1 1d       	adc	r26, r1
    1f6e:	68 0f       	add	r22, r24
    1f70:	79 1f       	adc	r23, r25
    1f72:	8a 1f       	adc	r24, r26
    1f74:	91 1d       	adc	r25, r1
    1f76:	a1 1d       	adc	r26, r1
    1f78:	6a 0f       	add	r22, r26
    1f7a:	71 1d       	adc	r23, r1
    1f7c:	81 1d       	adc	r24, r1
    1f7e:	91 1d       	adc	r25, r1
    1f80:	a1 1d       	adc	r26, r1
    1f82:	20 d0       	rcall	.+64     	; 0x1fc4 <__ultoa_invert+0x84>
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <__ultoa_invert+0x48>
    1f86:	68 94       	set
    1f88:	3f 91       	pop	r19
    1f8a:	2a e0       	ldi	r18, 0x0A	; 10
    1f8c:	26 9f       	mul	r18, r22
    1f8e:	11 24       	eor	r1, r1
    1f90:	30 19       	sub	r19, r0
    1f92:	30 5d       	subi	r19, 0xD0	; 208
    1f94:	31 93       	st	Z+, r19
    1f96:	de f6       	brtc	.-74     	; 0x1f4e <__ultoa_invert+0xe>
    1f98:	cf 01       	movw	r24, r30
    1f9a:	08 95       	ret
    1f9c:	46 2f       	mov	r20, r22
    1f9e:	47 70       	andi	r20, 0x07	; 7
    1fa0:	40 5d       	subi	r20, 0xD0	; 208
    1fa2:	41 93       	st	Z+, r20
    1fa4:	b3 e0       	ldi	r27, 0x03	; 3
    1fa6:	0f d0       	rcall	.+30     	; 0x1fc6 <__ultoa_invert+0x86>
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <__ultoa_invert+0x5c>
    1faa:	f6 cf       	rjmp	.-20     	; 0x1f98 <__ultoa_invert+0x58>
    1fac:	46 2f       	mov	r20, r22
    1fae:	4f 70       	andi	r20, 0x0F	; 15
    1fb0:	40 5d       	subi	r20, 0xD0	; 208
    1fb2:	4a 33       	cpi	r20, 0x3A	; 58
    1fb4:	18 f0       	brcs	.+6      	; 0x1fbc <__ultoa_invert+0x7c>
    1fb6:	49 5d       	subi	r20, 0xD9	; 217
    1fb8:	31 fd       	sbrc	r19, 1
    1fba:	40 52       	subi	r20, 0x20	; 32
    1fbc:	41 93       	st	Z+, r20
    1fbe:	02 d0       	rcall	.+4      	; 0x1fc4 <__ultoa_invert+0x84>
    1fc0:	a9 f7       	brne	.-22     	; 0x1fac <__ultoa_invert+0x6c>
    1fc2:	ea cf       	rjmp	.-44     	; 0x1f98 <__ultoa_invert+0x58>
    1fc4:	b4 e0       	ldi	r27, 0x04	; 4
    1fc6:	a6 95       	lsr	r26
    1fc8:	97 95       	ror	r25
    1fca:	87 95       	ror	r24
    1fcc:	77 95       	ror	r23
    1fce:	67 95       	ror	r22
    1fd0:	ba 95       	dec	r27
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <__ultoa_invert+0x86>
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	61 05       	cpc	r22, r1
    1fd8:	71 05       	cpc	r23, r1
    1fda:	08 95       	ret
    1fdc:	9b 01       	movw	r18, r22
    1fde:	ac 01       	movw	r20, r24
    1fe0:	0a 2e       	mov	r0, r26
    1fe2:	06 94       	lsr	r0
    1fe4:	57 95       	ror	r21
    1fe6:	47 95       	ror	r20
    1fe8:	37 95       	ror	r19
    1fea:	27 95       	ror	r18
    1fec:	ba 95       	dec	r27
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__ultoa_invert+0xa2>
    1ff0:	62 0f       	add	r22, r18
    1ff2:	73 1f       	adc	r23, r19
    1ff4:	84 1f       	adc	r24, r20
    1ff6:	95 1f       	adc	r25, r21
    1ff8:	a0 1d       	adc	r26, r0
    1ffa:	08 95       	ret

00001ffc <__eerd_byte_m328p>:
    1ffc:	f9 99       	sbic	0x1f, 1	; 31
    1ffe:	fe cf       	rjmp	.-4      	; 0x1ffc <__eerd_byte_m328p>
    2000:	92 bd       	out	0x22, r25	; 34
    2002:	81 bd       	out	0x21, r24	; 33
    2004:	f8 9a       	sbi	0x1f, 0	; 31
    2006:	99 27       	eor	r25, r25
    2008:	80 b5       	in	r24, 0x20	; 32
    200a:	08 95       	ret

0000200c <__eeupd_byte_m328p>:
    200c:	26 2f       	mov	r18, r22

0000200e <__eeupd_r18_m328p>:
    200e:	f9 99       	sbic	0x1f, 1	; 31
    2010:	fe cf       	rjmp	.-4      	; 0x200e <__eeupd_r18_m328p>
    2012:	92 bd       	out	0x22, r25	; 34
    2014:	81 bd       	out	0x21, r24	; 33
    2016:	f8 9a       	sbi	0x1f, 0	; 31
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	00 b4       	in	r0, 0x20	; 32
    201c:	02 16       	cp	r0, r18
    201e:	39 f0       	breq	.+14     	; 0x202e <__eeupd_r18_m328p+0x20>
    2020:	1f ba       	out	0x1f, r1	; 31
    2022:	20 bd       	out	0x20, r18	; 32
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	fa 9a       	sbi	0x1f, 2	; 31
    202a:	f9 9a       	sbi	0x1f, 1	; 31
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	08 95       	ret

00002030 <_exit>:
    2030:	f8 94       	cli

00002032 <__stop_program>:
    2032:	ff cf       	rjmp	.-2      	; 0x2032 <__stop_program>
