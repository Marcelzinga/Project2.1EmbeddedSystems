
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000592  00800100  00002402  00002496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  00800692  00800692  00002a28  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00006780  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026e3  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  000090a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ff  00000000  00000000  00009e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000b47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000873  00000000  00000000  0000bb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d12  00000000  00000000  0000c407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e2 e0       	ldi	r30, 0x02	; 2
     1ba:	f4 e2       	ldi	r31, 0x24	; 36
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a2 39       	cpi	r26, 0x92	; 146
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	a2 e9       	ldi	r26, 0x92	; 146
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a6 3c       	cpi	r26, 0xC6	; 198
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 92 06 	lds	r24, 0x0692
     262:	90 91 93 06 	lds	r25, 0x0693
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 9a 06 	lds	r22, 0x069A
     28a:	70 91 9b 06 	lds	r23, 0x069B
     28e:	80 91 9c 06 	lds	r24, 0x069C
     292:	90 91 9d 06 	lds	r25, 0x069D
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 00 01 	sts	0x0100, r20
     2c2:	50 93 01 01 	sts	0x0101, r21
     2c6:	60 93 02 01 	sts	0x0102, r22
     2ca:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 75 09 	call	0x12ea	; 0x12ea <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 a2 06 	sts	0x06A2, r20
     30c:	50 93 a3 06 	sts	0x06A3, r21
     310:	60 93 a4 06 	sts	0x06A4, r22
     314:	70 93 a5 06 	sts	0x06A5, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 c6 06 	sts	0x06C6, r20
     350:	50 93 c7 06 	sts	0x06C7, r21
     354:	60 93 c8 06 	sts	0x06C8, r22
     358:	70 93 c9 06 	sts	0x06C9, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 44 08 	call	0x1088	; 0x1088 <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
	//sei();
	
	extraTime1++;
     3b2:	80 91 94 06 	lds	r24, 0x0694
     3b6:	90 91 95 06 	lds	r25, 0x0695
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 95 06 	sts	0x0695, r25
     3c0:	80 93 94 06 	sts	0x0694, r24
	if(extraTime1>100){
     3c4:	80 91 94 06 	lds	r24, 0x0694
     3c8:	90 91 95 06 	lds	r25, 0x0695
     3cc:	85 36       	cpi	r24, 0x65	; 101
     3ce:	91 05       	cpc	r25, r1
     3d0:	6c f0       	brlt	.+26     	; 0x3ec <__vector_14+0x48>
		timerVariable++;
     3d2:	80 91 92 06 	lds	r24, 0x0692
     3d6:	90 91 93 06 	lds	r25, 0x0693
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 93 06 	sts	0x0693, r25
     3e0:	80 93 92 06 	sts	0x0692, r24
		extraTime1 = 0;
     3e4:	10 92 95 06 	sts	0x0695, r1
     3e8:	10 92 94 06 	sts	0x0694, r1
	}
	extraTime++;
     3ec:	80 91 96 06 	lds	r24, 0x0696
     3f0:	90 91 97 06 	lds	r25, 0x0697
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	90 93 97 06 	sts	0x0697, r25
     3fa:	80 93 96 06 	sts	0x0696, r24
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
	}*/
}
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	if(i == 1)
     432:	80 91 98 06 	lds	r24, 0x0698
     436:	90 91 99 06 	lds	r25, 0x0699
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	91 05       	cpc	r25, r1
     43e:	d1 f4       	brne	.+52     	; 0x474 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     440:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     444:	c4 e8       	ldi	r28, 0x84	; 132
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	68 81       	ld	r22, Y
     44a:	79 81       	ldd	r23, Y+1	; 0x01
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatunsisf>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	80 93 9a 06 	sts	0x069A, r24
     45c:	90 93 9b 06 	sts	0x069B, r25
     460:	a0 93 9c 06 	sts	0x069C, r26
     464:	b0 93 9d 06 	sts	0x069D, r27
		TCNT1 = 0; //Reset duration
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     46c:	10 92 99 06 	sts	0x0699, r1
     470:	10 92 98 06 	sts	0x0698, r1
	}

	if(i==0)
     474:	80 91 98 06 	lds	r24, 0x0698
     478:	90 91 99 06 	lds	r25, 0x0699
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	59 f4       	brne	.+22     	; 0x496 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     480:	e1 e8       	ldi	r30, 0x81	; 129
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 83       	st	Z, r24
		i = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 99 06 	sts	0x0699, r25
     492:	80 93 98 06 	sts	0x0698, r24
	}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4c4:	c0 91 9e 06 	lds	r28, 0x069E
     4c8:	d0 91 9f 06 	lds	r29, 0x069F
     4cc:	20 91 1c 01 	lds	r18, 0x011C
     4d0:	30 91 1d 01 	lds	r19, 0x011D
     4d4:	2c 17       	cp	r18, r28
     4d6:	3d 07       	cpc	r19, r29
     4d8:	8c f0       	brlt	.+34     	; 0x4fc <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4da:	8c 01       	movw	r16, r24
     4dc:	0c 0f       	add	r16, r28
     4de:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     4e0:	f8 01       	movw	r30, r16
     4e2:	61 91       	ld	r22, Z+
     4e4:	8f 01       	movw	r16, r30
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	80 91 1c 01 	lds	r24, 0x011C
     4f2:	90 91 1d 01 	lds	r25, 0x011D
     4f6:	8c 17       	cp	r24, r28
     4f8:	9d 07       	cpc	r25, r29
     4fa:	94 f7       	brge	.-28     	; 0x4e0 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     50e:	c0 91 9e 06 	lds	r28, 0x069E
     512:	d0 91 9f 06 	lds	r29, 0x069F
     516:	80 91 1c 01 	lds	r24, 0x011C
     51a:	90 91 1d 01 	lds	r25, 0x011D
     51e:	8c 17       	cp	r24, r28
     520:	9d 07       	cpc	r25, r29
     522:	8c f0       	brlt	.+34     	; 0x546 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     524:	8e 01       	movw	r16, r28
     526:	08 5f       	subi	r16, 0xF8	; 248
     528:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     530:	f8 01       	movw	r30, r16
     532:	81 93       	st	Z+, r24
     534:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	80 91 1c 01 	lds	r24, 0x011C
     53c:	90 91 1d 01 	lds	r25, 0x011D
     540:	8c 17       	cp	r24, r28
     542:	9d 07       	cpc	r25, r29
     544:	94 f7       	brge	.-28     	; 0x52a <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     546:	88 e0       	ldi	r24, 0x08	; 8
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     55e:	c0 91 0e 01 	lds	r28, 0x010E
     562:	d0 91 0f 01 	lds	r29, 0x010F
     566:	80 91 1a 01 	lds	r24, 0x011A
     56a:	90 91 1b 01 	lds	r25, 0x011B
     56e:	99 23       	and	r25, r25
     570:	cc f0       	brlt	.+50     	; 0x5a4 <set_Locatie+0x50>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     576:	f8 01       	movw	r30, r16
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	ce 01       	movw	r24, r28
     57e:	60 81       	ld	r22, Z
     580:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	80 91 0e 01 	lds	r24, 0x010E
     58a:	90 91 0f 01 	lds	r25, 0x010F
     58e:	9e 01       	movw	r18, r28
     590:	28 1b       	sub	r18, r24
     592:	39 0b       	sbc	r19, r25
     594:	c9 01       	movw	r24, r18
     596:	20 91 1a 01 	lds	r18, 0x011A
     59a:	30 91 1b 01 	lds	r19, 0x011B
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	4c f7       	brge	.-46     	; 0x576 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5be:	e0 90 0e 01 	lds	r14, 0x010E
     5c2:	f0 90 0f 01 	lds	r15, 0x010F
     5c6:	80 91 1a 01 	lds	r24, 0x011A
     5ca:	90 91 1b 01 	lds	r25, 0x011B
     5ce:	99 23       	and	r25, r25
     5d0:	ec f0       	brlt	.+58     	; 0x60c <get_Locatie+0x5e>
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     5da:	0f 2e       	mov	r0, r31
     5dc:	f9 ed       	ldi	r31, 0xD9	; 217
     5de:	cf 2e       	mov	r12, r31
     5e0:	f6 e0       	ldi	r31, 0x06	; 6
     5e2:	df 2e       	mov	r13, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	c7 01       	movw	r24, r14
     5e8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     5ec:	cc 0d       	add	r28, r12
     5ee:	dd 1d       	adc	r29, r13
     5f0:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5f2:	08 94       	sec
     5f4:	e1 1c       	adc	r14, r1
     5f6:	f1 1c       	adc	r15, r1
     5f8:	e8 01       	movw	r28, r16
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	80 91 1a 01 	lds	r24, 0x011A
     602:	90 91 1b 01 	lds	r25, 0x011B
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	6c f7       	brge	.-38     	; 0x5e6 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     60c:	89 ed       	ldi	r24, 0xD9	; 217
     60e:	96 e0       	ldi	r25, 0x06	; 6
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     62c:	c0 91 0c 01 	lds	r28, 0x010C
     630:	d0 91 0d 01 	lds	r29, 0x010D
     634:	80 91 18 01 	lds	r24, 0x0118
     638:	90 91 19 01 	lds	r25, 0x0119
     63c:	99 23       	and	r25, r25
     63e:	cc f0       	brlt	.+50     	; 0x672 <set_Versie+0x50>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     644:	f8 01       	movw	r30, r16
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	ce 01       	movw	r24, r28
     64c:	60 81       	ld	r22, Z
     64e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	80 91 0c 01 	lds	r24, 0x010C
     658:	90 91 0d 01 	lds	r25, 0x010D
     65c:	9e 01       	movw	r18, r28
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	c9 01       	movw	r24, r18
     664:	20 91 18 01 	lds	r18, 0x0118
     668:	30 91 19 01 	lds	r19, 0x0119
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	4c f7       	brge	.-46     	; 0x644 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     68c:	e0 90 0c 01 	lds	r14, 0x010C
     690:	f0 90 0d 01 	lds	r15, 0x010D
     694:	80 91 18 01 	lds	r24, 0x0118
     698:	90 91 19 01 	lds	r25, 0x0119
     69c:	99 23       	and	r25, r25
     69e:	ec f0       	brlt	.+58     	; 0x6da <get_Versie+0x5e>
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f4 e3       	ldi	r31, 0x34	; 52
     6ac:	cf 2e       	mov	r12, r31
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	c7 01       	movw	r24, r14
     6b6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     6ba:	cc 0d       	add	r28, r12
     6bc:	dd 1d       	adc	r29, r13
     6be:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     6c0:	08 94       	sec
     6c2:	e1 1c       	adc	r14, r1
     6c4:	f1 1c       	adc	r15, r1
     6c6:	e8 01       	movw	r28, r16
     6c8:	0f 5f       	subi	r16, 0xFF	; 255
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	80 91 18 01 	lds	r24, 0x0118
     6d0:	90 91 19 01 	lds	r25, 0x0119
     6d4:	8c 17       	cp	r24, r28
     6d6:	9d 07       	cpc	r25, r29
     6d8:	6c f7       	brge	.-38     	; 0x6b4 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     6da:	84 e3       	ldi	r24, 0x34	; 52
     6dc:	97 e0       	ldi	r25, 0x07	; 7
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	08 95       	ret

000006f0 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     6fa:	c0 91 0a 01 	lds	r28, 0x010A
     6fe:	d0 91 0b 01 	lds	r29, 0x010B
     702:	80 91 16 01 	lds	r24, 0x0116
     706:	90 91 17 01 	lds	r25, 0x0117
     70a:	99 23       	and	r25, r25
     70c:	cc f0       	brlt	.+50     	; 0x740 <set_grensTemp+0x50>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     712:	f8 01       	movw	r30, r16
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	ce 01       	movw	r24, r28
     71a:	60 81       	ld	r22, Z
     71c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     720:	21 96       	adiw	r28, 0x01	; 1
     722:	80 91 0a 01 	lds	r24, 0x010A
     726:	90 91 0b 01 	lds	r25, 0x010B
     72a:	9e 01       	movw	r18, r28
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	c9 01       	movw	r24, r18
     732:	20 91 16 01 	lds	r18, 0x0116
     736:	30 91 17 01 	lds	r19, 0x0117
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4c f7       	brge	.-46     	; 0x712 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     75a:	e0 90 0a 01 	lds	r14, 0x010A
     75e:	f0 90 0b 01 	lds	r15, 0x010B
     762:	80 91 16 01 	lds	r24, 0x0116
     766:	90 91 17 01 	lds	r25, 0x0117
     76a:	99 23       	and	r25, r25
     76c:	ec f0       	brlt	.+58     	; 0x7a8 <get_grensTemp+0x5e>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     776:	0f 2e       	mov	r0, r31
     778:	f5 e0       	ldi	r31, 0x05	; 5
     77a:	cf 2e       	mov	r12, r31
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	c7 01       	movw	r24, r14
     784:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     788:	cc 0d       	add	r28, r12
     78a:	dd 1d       	adc	r29, r13
     78c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     78e:	08 94       	sec
     790:	e1 1c       	adc	r14, r1
     792:	f1 1c       	adc	r15, r1
     794:	e8 01       	movw	r28, r16
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	80 91 16 01 	lds	r24, 0x0116
     79e:	90 91 17 01 	lds	r25, 0x0117
     7a2:	8c 17       	cp	r24, r28
     7a4:	9d 07       	cpc	r25, r29
     7a6:	6c f7       	brge	.-38     	; 0x782 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     7a8:	85 e0       	ldi	r24, 0x05	; 5
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7c8:	c0 91 08 01 	lds	r28, 0x0108
     7cc:	d0 91 09 01 	lds	r29, 0x0109
     7d0:	80 91 14 01 	lds	r24, 0x0114
     7d4:	90 91 15 01 	lds	r25, 0x0115
     7d8:	99 23       	and	r25, r25
     7da:	cc f0       	brlt	.+50     	; 0x80e <set_grensLicht+0x50>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	e8 0f       	add	r30, r24
     7e4:	f9 1f       	adc	r31, r25
     7e6:	ce 01       	movw	r24, r28
     7e8:	60 81       	ld	r22, Z
     7ea:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	80 91 08 01 	lds	r24, 0x0108
     7f4:	90 91 09 01 	lds	r25, 0x0109
     7f8:	9e 01       	movw	r18, r28
     7fa:	28 1b       	sub	r18, r24
     7fc:	39 0b       	sbc	r19, r25
     7fe:	c9 01       	movw	r24, r18
     800:	20 91 14 01 	lds	r18, 0x0114
     804:	30 91 15 01 	lds	r19, 0x0115
     808:	28 17       	cp	r18, r24
     80a:	39 07       	cpc	r19, r25
     80c:	4c f7       	brge	.-46     	; 0x7e0 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     824:	e0 90 08 01 	lds	r14, 0x0108
     828:	f0 90 09 01 	lds	r15, 0x0109
     82c:	80 91 14 01 	lds	r24, 0x0114
     830:	90 91 15 01 	lds	r25, 0x0115
     834:	99 23       	and	r25, r25
     836:	bc f0       	brlt	.+46     	; 0x866 <get_grensLight+0x4e>
     838:	01 e0       	ldi	r16, 0x01	; 1
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     840:	c7 01       	movw	r24, r14
     842:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     846:	c4 5c       	subi	r28, 0xC4	; 196
     848:	d8 4f       	sbci	r29, 0xF8	; 248
     84a:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84c:	08 94       	sec
     84e:	e1 1c       	adc	r14, r1
     850:	f1 1c       	adc	r15, r1
     852:	e8 01       	movw	r28, r16
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	80 91 14 01 	lds	r24, 0x0114
     85c:	90 91 15 01 	lds	r25, 0x0115
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	6c f7       	brge	.-38     	; 0x840 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     866:	8c e3       	ldi	r24, 0x3C	; 60
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     882:	c0 91 06 01 	lds	r28, 0x0106
     886:	d0 91 07 01 	lds	r29, 0x0107
     88a:	80 91 12 01 	lds	r24, 0x0112
     88e:	90 91 13 01 	lds	r25, 0x0113
     892:	99 23       	and	r25, r25
     894:	cc f0       	brlt	.+50     	; 0x8c8 <set_minUnroll+0x50>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     89a:	f8 01       	movw	r30, r16
     89c:	e8 0f       	add	r30, r24
     89e:	f9 1f       	adc	r31, r25
     8a0:	ce 01       	movw	r24, r28
     8a2:	60 81       	ld	r22, Z
     8a4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8a8:	21 96       	adiw	r28, 0x01	; 1
     8aa:	80 91 06 01 	lds	r24, 0x0106
     8ae:	90 91 07 01 	lds	r25, 0x0107
     8b2:	9e 01       	movw	r18, r28
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	c9 01       	movw	r24, r18
     8ba:	20 91 12 01 	lds	r18, 0x0112
     8be:	30 91 13 01 	lds	r19, 0x0113
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	4c f7       	brge	.-46     	; 0x89a <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8de:	e0 90 06 01 	lds	r14, 0x0106
     8e2:	f0 90 07 01 	lds	r15, 0x0107
     8e6:	80 91 12 01 	lds	r24, 0x0112
     8ea:	90 91 13 01 	lds	r25, 0x0113
     8ee:	99 23       	and	r25, r25
     8f0:	bc f0       	brlt	.+46     	; 0x920 <__stack+0x21>
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     8fa:	c7 01       	movw	r24, r14
     8fc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     900:	c6 53       	subi	r28, 0x36	; 54
     902:	d9 4f       	sbci	r29, 0xF9	; 249
     904:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     906:	08 94       	sec
     908:	e1 1c       	adc	r14, r1
     90a:	f1 1c       	adc	r15, r1
     90c:	e8 01       	movw	r28, r16
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	80 91 12 01 	lds	r24, 0x0112
     916:	90 91 13 01 	lds	r25, 0x0113
     91a:	8c 17       	cp	r24, r28
     91c:	9d 07       	cpc	r25, r29
     91e:	6c f7       	brge	.-38     	; 0x8fa <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     920:	8a ec       	ldi	r24, 0xCA	; 202
     922:	96 e0       	ldi	r25, 0x06	; 6
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     93c:	c0 91 04 01 	lds	r28, 0x0104
     940:	d0 91 05 01 	lds	r29, 0x0105
     944:	80 91 10 01 	lds	r24, 0x0110
     948:	90 91 11 01 	lds	r25, 0x0111
     94c:	99 23       	and	r25, r25
     94e:	cc f0       	brlt	.+50     	; 0x982 <set_maxUnroll+0x50>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     954:	f8 01       	movw	r30, r16
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ce 01       	movw	r24, r28
     95c:	60 81       	ld	r22, Z
     95e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     962:	21 96       	adiw	r28, 0x01	; 1
     964:	80 91 04 01 	lds	r24, 0x0104
     968:	90 91 05 01 	lds	r25, 0x0105
     96c:	9e 01       	movw	r18, r28
     96e:	28 1b       	sub	r18, r24
     970:	39 0b       	sbc	r19, r25
     972:	c9 01       	movw	r24, r18
     974:	20 91 10 01 	lds	r18, 0x0110
     978:	30 91 11 01 	lds	r19, 0x0111
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	4c f7       	brge	.-46     	; 0x954 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     998:	e0 90 04 01 	lds	r14, 0x0104
     99c:	f0 90 05 01 	lds	r15, 0x0105
     9a0:	80 91 10 01 	lds	r24, 0x0110
     9a4:	90 91 11 01 	lds	r25, 0x0111
     9a8:	99 23       	and	r25, r25
     9aa:	bc f0       	brlt	.+46     	; 0x9da <get_maxUnroll+0x4e>
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     9b4:	c7 01       	movw	r24, r14
     9b6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__eerd_byte_m328p>
     9ba:	c6 59       	subi	r28, 0x96	; 150
     9bc:	d8 4f       	sbci	r29, 0xF8	; 248
     9be:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9c0:	08 94       	sec
     9c2:	e1 1c       	adc	r14, r1
     9c4:	f1 1c       	adc	r15, r1
     9c6:	e8 01       	movw	r28, r16
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	80 91 10 01 	lds	r24, 0x0110
     9d0:	90 91 11 01 	lds	r25, 0x0111
     9d4:	8c 17       	cp	r24, r28
     9d6:	9d 07       	cpc	r25, r29
     9d8:	6c f7       	brge	.-38     	; 0x9b4 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     9da:	8a e6       	ldi	r24, 0x6A	; 106
     9dc:	97 e0       	ldi	r25, 0x07	; 7
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     9ec:	8e e9       	ldi	r24, 0x9E	; 158
     9ee:	97 e0       	ldi	r25, 0x07	; 7
     9f0:	68 e2       	ldi	r22, 0x28	; 40
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <strchr>
	p1[strlen(p1) -1] = '\0';
     9f8:	e8 2f       	mov	r30, r24
     9fa:	f9 2f       	mov	r31, r25
     9fc:	df 01       	movw	r26, r30
     9fe:	0d 90       	ld	r0, X+
     a00:	00 20       	and	r0, r0
     a02:	e9 f7       	brne	.-6      	; 0x9fe <set_substring+0x12>
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	ae 1b       	sub	r26, r30
     a08:	bf 0b       	sbc	r27, r31
     a0a:	a8 0f       	add	r26, r24
     a0c:	b9 1f       	adc	r27, r25
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	1c 92       	st	X, r1
	substring = p1 +1;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 9b 07 	sts	0x079B, r25
     a18:	80 93 9a 07 	sts	0x079A, r24
     a1c:	08 95       	ret

00000a1e <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     a1e:	2f 92       	push	r2
     a20:	3f 92       	push	r3
     a22:	4f 92       	push	r4
     a24:	5f 92       	push	r5
     a26:	6f 92       	push	r6
     a28:	7f 92       	push	r7
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	ser_write("201 Please enter ID");
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     a4a:	ce e9       	ldi	r28, 0x9E	; 158
     a4c:	d7 e0       	ldi	r29, 0x07	; 7
     a4e:	ce 01       	movw	r24, r28
     a50:	6e e1       	ldi	r22, 0x1E	; 30
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 05 08 	call	0x100a	; 0x100a <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	96 e0       	ldi	r25, 0x06	; 6
     a5e:	be 01       	movw	r22, r28
     a60:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     a64:	28 2f       	mov	r18, r24
     a66:	39 2f       	mov	r19, r25
	if(ret |= 0){
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	b9 f0       	breq	.+46     	; 0xa9c <protocolCom+0x7e>
		ser_writeln("504: Verkeerde ID");
     a6e:	82 e3       	ldi	r24, 0x32	; 50
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
			}		
			}
			}
			}					
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret
	if(ret |= 0){
		ser_writeln("504: Verkeerde ID");
	}
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
     a9c:	84 e4       	ldi	r24, 0x44	; 68
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 56 11 	call	0x22ac	; 0x22ac <puts>
		ser_writeln("200 Handshake bevestigt");
     aa4:	85 e5       	ldi	r24, 0x55	; 85
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
		while (1) {
			ser_write("204 Wat kan ik voor u doen? ");
     aac:	0d e6       	ldi	r16, 0x6D	; 109
     aae:	11 e0       	ldi	r17, 0x01	; 1
			ser_readln(in_buf, sizeof(in_buf), 1);
     ab0:	ce e9       	ldi	r28, 0x9E	; 158
     ab2:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fa e8       	ldi	r31, 0x8A	; 138
     ab8:	ef 2e       	mov	r14, r31
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	ff 2e       	mov	r15, r31
     abe:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f2 eb       	ldi	r31, 0xB2	; 178
     ac4:	af 2e       	mov	r10, r31
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	bf 2e       	mov	r11, r31
     aca:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     acc:	0f 2e       	mov	r0, r31
     ace:	f9 ed       	ldi	r31, 0xD9	; 217
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff ee       	ldi	r31, 0xEF	; 239
     adc:	8f 2e       	mov	r8, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	9f 2e       	mov	r9, r31
     ae2:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fb e0       	ldi	r31, 0x0B	; 11
     ae8:	6f 2e       	mov	r6, r31
     aea:	f2 e0       	ldi	r31, 0x02	; 2
     aec:	7f 2e       	mov	r7, r31
     aee:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     af0:	0f 2e       	mov	r0, r31
     af2:	fa e2       	ldi	r31, 0x2A	; 42
     af4:	4f 2e       	mov	r4, r31
     af6:	f2 e0       	ldi	r31, 0x02	; 2
     af8:	5f 2e       	mov	r5, r31
     afa:	f0 2d       	mov	r31, r0
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				//}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     afc:	0f 2e       	mov	r0, r31
     afe:	f2 e5       	ldi	r31, 0x52	; 82
     b00:	2f 2e       	mov	r2, r31
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	3f 2e       	mov	r3, r31
     b06:	f0 2d       	mov	r31, r0
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");
		while (1) {
			ser_write("204 Wat kan ik voor u doen? ");
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
			ser_readln(in_buf, sizeof(in_buf), 1);
     b0e:	ce 01       	movw	r24, r28
     b10:	6e e1       	ldi	r22, 0x1E	; 30
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 05 08 	call	0x100a	; 0x100a <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b1a:	c7 01       	movw	r24, r14
     b1c:	be 01       	movw	r22, r28
     b1e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     b22:	28 2f       	mov	r18, r24
     b24:	39 2f       	mov	r19, r25
     b26:	21 15       	cp	r18, r1
     b28:	31 05       	cpc	r19, r1
     b2a:	a1 f4       	brne	.+40     	; 0xb54 <protocolCom+0x136>
				if ((get_unrollStatus() % 2) == 1){
     b2c:	0e 94 3f 08 	call	0x107e	; 0x107e <get_unrollStatus>
     b30:	62 e0       	ldi	r22, 0x02	; 2
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divmodhi4>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	91 05       	cpc	r25, r1
     b3c:	21 f4       	brne	.+8      	; 0xb46 <protocolCom+0x128>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     b3e:	81 e9       	ldi	r24, 0x91	; 145
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     b46:	0e 94 3f 08 	call	0x107e	; 0x107e <get_unrollStatus>
     b4a:	80 fd       	sbrc	r24, 0
     b4c:	1f c0       	rjmp	.+62     	; 0xb8c <protocolCom+0x16e>
					uitrollen();
     b4e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <uitrollen>
     b52:	1c c0       	rjmp	.+56     	; 0xb8c <protocolCom+0x16e>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b54:	c5 01       	movw	r24, r10
     b56:	be 01       	movw	r22, r28
     b58:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     b5c:	28 2f       	mov	r18, r24
     b5e:	39 2f       	mov	r19, r25
     b60:	21 15       	cp	r18, r1
     b62:	31 05       	cpc	r19, r1
     b64:	99 f4       	brne	.+38     	; 0xb8c <protocolCom+0x16e>
				if ((get_unrollStatus() % 2) == 0){
     b66:	0e 94 3f 08 	call	0x107e	; 0x107e <get_unrollStatus>
     b6a:	80 fd       	sbrc	r24, 0
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <protocolCom+0x158>
					ser_writeln("501 Zonnescherm is al opgerold!");
     b6e:	89 eb       	ldi	r24, 0xB9	; 185
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     b76:	0e 94 3f 08 	call	0x107e	; 0x107e <get_unrollStatus>
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divmodhi4>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	11 f4       	brne	.+4      	; 0xb8c <protocolCom+0x16e>
					oprollen();
     b88:	0e 94 ac 08 	call	0x1158	; 0x1158 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b8c:	c6 01       	movw	r24, r12
     b8e:	be 01       	movw	r22, r28
     b90:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     b94:	28 2f       	mov	r18, r24
     b96:	39 2f       	mov	r19, r25
     b98:	21 15       	cp	r18, r1
     b9a:	31 05       	cpc	r19, r1
     b9c:	b9 f4       	brne	.+46     	; 0xbcc <protocolCom+0x1ae>
				printf("202 Status: %i", get_unrollStatus());
     b9e:	0e 94 3f 08 	call	0x107e	; 0x107e <get_unrollStatus>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <protocolCom+0x186>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <protocolCom+0x188>
     ba6:	20 ee       	ldi	r18, 0xE0	; 224
     ba8:	31 e0       	ldi	r19, 0x01	; 1
     baa:	ad b7       	in	r26, 0x3d	; 61
     bac:	be b7       	in	r27, 0x3e	; 62
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	3c 93       	st	X, r19
     bb2:	2e 93       	st	-X, r18
     bb4:	11 97       	sbiw	r26, 0x01	; 1
     bb6:	14 96       	adiw	r26, 0x04	; 4
     bb8:	9c 93       	st	X, r25
     bba:	8e 93       	st	-X, r24
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	0e 94 41 11 	call	0x2282	; 0x2282 <printf>
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	9e cf       	rjmp	.-196    	; 0xb08 <protocolCom+0xea>
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     bcc:	c4 01       	movw	r24, r8
     bce:	be 01       	movw	r22, r28
     bd0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     bd4:	28 2f       	mov	r18, r24
     bd6:	39 2f       	mov	r19, r25
     bd8:	21 15       	cp	r18, r1
     bda:	31 05       	cpc	r19, r1
     bdc:	e1 f4       	brne	.+56     	; 0xc16 <protocolCom+0x1f8>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bde:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <protocolCom+0x1ca>
     be8:	00 d0       	rcall	.+0      	; 0xbea <protocolCom+0x1cc>
     bea:	00 d0       	rcall	.+0      	; 0xbec <protocolCom+0x1ce>
     bec:	28 ef       	ldi	r18, 0xF8	; 248
     bee:	31 e0       	ldi	r19, 0x01	; 1
     bf0:	ed b7       	in	r30, 0x3d	; 61
     bf2:	fe b7       	in	r31, 0x3e	; 62
     bf4:	32 83       	std	Z+2, r19	; 0x02
     bf6:	21 83       	std	Z+1, r18	; 0x01
     bf8:	83 83       	std	Z+3, r24	; 0x03
     bfa:	94 83       	std	Z+4, r25	; 0x04
     bfc:	a5 83       	std	Z+5, r26	; 0x05
     bfe:	b6 83       	std	Z+6, r27	; 0x06
     c00:	0e 94 41 11 	call	0x2282	; 0x2282 <printf>
     c04:	8d b7       	in	r24, 0x3d	; 61
     c06:	9e b7       	in	r25, 0x3e	; 62
     c08:	06 96       	adiw	r24, 0x06	; 6
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	9e bf       	out	0x3e, r25	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	8d bf       	out	0x3d, r24	; 61
     c14:	79 cf       	rjmp	.-270    	; 0xb08 <protocolCom+0xea>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c16:	c3 01       	movw	r24, r6
     c18:	be 01       	movw	r22, r28
     c1a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     c1e:	28 2f       	mov	r18, r24
     c20:	39 2f       	mov	r19, r25
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	49 f4       	brne	.+18     	; 0xc3a <protocolCom+0x21c>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c28:	8a e1       	ldi	r24, 0x1A	; 26
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     c30:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c34:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     c38:	67 cf       	rjmp	.-306    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c3a:	c2 01       	movw	r24, r4
     c3c:	be 01       	movw	r22, r28
     c3e:	4e e0       	ldi	r20, 0x0E	; 14
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     c46:	28 2f       	mov	r18, r24
     c48:	39 2f       	mov	r19, r25
     c4a:	21 15       	cp	r18, r1
     c4c:	31 05       	cpc	r19, r1
     c4e:	c9 f4       	brne	.+50     	; 0xc82 <protocolCom+0x264>
					int temp = sizeof in_buf;
					printf("504 Ongeldige temperatuur");
				}*				
				
				else{*/
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     c50:	8c e3       	ldi	r24, 0x3C	; 60
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     c58:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c5c:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     c60:	8d e4       	ldi	r24, 0x4D	; 77
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
				set_substring();
     c68:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_grensTemp(substring);
     c6c:	80 91 9a 07 	lds	r24, 0x079A
     c70:	90 91 9b 07 	lds	r25, 0x079B
     c74:	0e 94 78 03 	call	0x6f0	; 0x6f0 <set_grensTemp>
				ser_writeln(get_grensTemp());
     c78:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c7c:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     c80:	43 cf       	rjmp	.-378    	; 0xb08 <protocolCom+0xea>
				//}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c82:	c1 01       	movw	r24, r2
     c84:	be 01       	movw	r22, r28
     c86:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     c8a:	28 2f       	mov	r18, r24
     c8c:	39 2f       	mov	r19, r25
     c8e:	21 15       	cp	r18, r1
     c90:	31 05       	cpc	r19, r1
     c92:	c1 f4       	brne	.+48     	; 0xcc4 <protocolCom+0x2a6>
				printf("202 LIGHT %i \n", getLight());
     c94:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <protocolCom+0x27c>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <protocolCom+0x27e>
     c9c:	ed b7       	in	r30, 0x3d	; 61
     c9e:	fe b7       	in	r31, 0x3e	; 62
     ca0:	31 96       	adiw	r30, 0x01	; 1
     ca2:	2c e5       	ldi	r18, 0x5C	; 92
     ca4:	32 e0       	ldi	r19, 0x02	; 2
     ca6:	ad b7       	in	r26, 0x3d	; 61
     ca8:	be b7       	in	r27, 0x3e	; 62
     caa:	12 96       	adiw	r26, 0x02	; 2
     cac:	3c 93       	st	X, r19
     cae:	2e 93       	st	-X, r18
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	82 83       	std	Z+2, r24	; 0x02
     cb4:	13 82       	std	Z+3, r1	; 0x03
     cb6:	0e 94 41 11 	call	0x2282	; 0x2282 <printf>
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	22 cf       	rjmp	.-444    	; 0xb08 <protocolCom+0xea>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     cc4:	8b e6       	ldi	r24, 0x6B	; 107
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	be 01       	movw	r22, r28
     cca:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     cce:	28 2f       	mov	r18, r24
     cd0:	39 2f       	mov	r19, r25
     cd2:	21 15       	cp	r18, r1
     cd4:	31 05       	cpc	r19, r1
     cd6:	49 f4       	brne	.+18     	; 0xcea <protocolCom+0x2cc>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     cd8:	8b e7       	ldi	r24, 0x7B	; 123
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     ce0:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     ce4:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     ce8:	0f cf       	rjmp	.-482    	; 0xb08 <protocolCom+0xea>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     cea:	8c e8       	ldi	r24, 0x8C	; 140
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	be 01       	movw	r22, r28
     cf0:	4f e0       	ldi	r20, 0x0F	; 15
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     cf8:	28 2f       	mov	r18, r24
     cfa:	39 2f       	mov	r19, r25
     cfc:	21 15       	cp	r18, r1
     cfe:	31 05       	cpc	r19, r1
     d00:	c9 f4       	brne	.+50     	; 0xd34 <protocolCom+0x316>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				/*if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
				}
				else{*/
				ser_write("203 GRENS_LIGHT: "), ser_write(get_grensLight()), ser_write(" -> ");
     d02:	8f e9       	ldi	r24, 0x9F	; 159
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     d0a:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     d0e:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     d12:	8d e4       	ldi	r24, 0x4D	; 77
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
				set_substring();
     d1a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_grensLicht(substring);
     d1e:	80 91 9a 07 	lds	r24, 0x079A
     d22:	90 91 9b 07 	lds	r25, 0x079B
     d26:	0e 94 df 03 	call	0x7be	; 0x7be <set_grensLicht>
				ser_writeln(get_grensLight());
     d2a:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     d2e:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     d32:	ea ce       	rjmp	.-556    	; 0xb08 <protocolCom+0xea>
				//}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     d34:	81 eb       	ldi	r24, 0xB1	; 177
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	be 01       	movw	r22, r28
     d3a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     d3e:	28 2f       	mov	r18, r24
     d40:	39 2f       	mov	r19, r25
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	49 f4       	brne	.+18     	; 0xd5a <protocolCom+0x33c>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     d48:	80 ec       	ldi	r24, 0xC0	; 192
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     d50:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     d54:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     d58:	d7 ce       	rjmp	.-594    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     d5a:	81 ed       	ldi	r24, 0xD1	; 209
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	be 01       	movw	r22, r28
     d60:	4f e0       	ldi	r20, 0x0F	; 15
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     d68:	28 2f       	mov	r18, r24
     d6a:	39 2f       	mov	r19, r25
     d6c:	21 15       	cp	r18, r1
     d6e:	31 05       	cpc	r19, r1
     d70:	c9 f4       	brne	.+50     	; 0xda4 <protocolCom+0x386>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
				}
				else{*/
				ser_write("203 MAX_UNROLL: "), ser_write(get_maxUnroll()), ser_write(" -> ");
     d72:	80 ec       	ldi	r24, 0xC0	; 192
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     d7a:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     d7e:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     d82:	8d e4       	ldi	r24, 0x4D	; 77
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
				set_substring();
     d8a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_maxUnroll(substring);
     d8e:	80 91 9a 07 	lds	r24, 0x079A
     d92:	90 91 9b 07 	lds	r25, 0x079B
     d96:	0e 94 99 04 	call	0x932	; 0x932 <set_maxUnroll>
				ser_writeln(get_maxUnroll());
     d9a:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     d9e:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     da2:	b2 ce       	rjmp	.-668    	; 0xb08 <protocolCom+0xea>
				//}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     da4:	83 ee       	ldi	r24, 0xE3	; 227
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	be 01       	movw	r22, r28
     daa:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     dae:	28 2f       	mov	r18, r24
     db0:	39 2f       	mov	r19, r25
     db2:	21 15       	cp	r18, r1
     db4:	31 05       	cpc	r19, r1
     db6:	49 f4       	brne	.+18     	; 0xdca <protocolCom+0x3ac>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     db8:	82 ef       	ldi	r24, 0xF2	; 242
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     dc0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     dc4:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     dc8:	9f ce       	rjmp	.-706    	; 0xb08 <protocolCom+0xea>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	be 01       	movw	r22, r28
     dd0:	4f e0       	ldi	r20, 0x0F	; 15
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     dd8:	28 2f       	mov	r18, r24
     dda:	39 2f       	mov	r19, r25
     ddc:	21 15       	cp	r18, r1
     dde:	31 05       	cpc	r19, r1
     de0:	c9 f4       	brne	.+50     	; 0xe14 <protocolCom+0x3f6>
				
				/*if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
				}
				else{*/
				ser_write("203 MIN_UNROLL: "), ser_write(get_minUnroll()), ser_write(" -> ");
     de2:	82 ef       	ldi	r24, 0xF2	; 242
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     dea:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     dee:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     df2:	8d e4       	ldi	r24, 0x4D	; 77
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
				set_substring();
     dfa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_minUnroll(substring);
     dfe:	80 91 9a 07 	lds	r24, 0x079A
     e02:	90 91 9b 07 	lds	r25, 0x079B
     e06:	0e 94 3c 04 	call	0x878	; 0x878 <set_minUnroll>
				ser_writeln(get_minUnroll());
     e0a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     e0e:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     e12:	7a ce       	rjmp	.-780    	; 0xb08 <protocolCom+0xea>
				//}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     e14:	85 e1       	ldi	r24, 0x15	; 21
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	be 01       	movw	r22, r28
     e1a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     e1e:	28 2f       	mov	r18, r24
     e20:	39 2f       	mov	r19, r25
     e22:	21 15       	cp	r18, r1
     e24:	31 05       	cpc	r19, r1
     e26:	49 f4       	brne	.+18     	; 0xe3a <protocolCom+0x41c>
				ser_write("202 "),  ser_writeln(get_Naam());
     e28:	8e e1       	ldi	r24, 0x1E	; 30
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     e30:	0e 94 83 02 	call	0x506	; 0x506 <get_Naam>
     e34:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     e38:	67 ce       	rjmp	.-818    	; 0xb08 <protocolCom+0xea>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     e3a:	83 e2       	ldi	r24, 0x23	; 35
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	be 01       	movw	r22, r28
     e40:	48 e0       	ldi	r20, 0x08	; 8
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     e48:	28 2f       	mov	r18, r24
     e4a:	39 2f       	mov	r19, r25
     e4c:	21 15       	cp	r18, r1
     e4e:	31 05       	cpc	r19, r1
     e50:	69 f4       	brne	.+26     	; 0xe6c <protocolCom+0x44e>
				/*if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{*/
				set_substring();
     e52:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Naam(substring);
     e56:	80 91 9a 07 	lds	r24, 0x079A
     e5a:	90 91 9b 07 	lds	r25, 0x079B
     e5e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_Naam>
				printf("200 OK \n");
     e62:	8f e2       	ldi	r24, 0x2F	; 47
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 56 11 	call	0x22ac	; 0x22ac <puts>
     e6a:	4e ce       	rjmp	.-868    	; 0xb08 <protocolCom+0xea>
				//}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     e6c:	87 e3       	ldi	r24, 0x37	; 55
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	be 01       	movw	r22, r28
     e72:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     e76:	28 2f       	mov	r18, r24
     e78:	39 2f       	mov	r19, r25
     e7a:	21 15       	cp	r18, r1
     e7c:	31 05       	cpc	r19, r1
     e7e:	49 f4       	brne	.+18     	; 0xe92 <protocolCom+0x474>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     e80:	8e e1       	ldi	r24, 0x1E	; 30
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     e88:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_Locatie>
     e8c:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     e90:	3b ce       	rjmp	.-906    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     e92:	84 e4       	ldi	r24, 0x44	; 68
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	be 01       	movw	r22, r28
     e98:	4c e0       	ldi	r20, 0x0C	; 12
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     ea0:	28 2f       	mov	r18, r24
     ea2:	39 2f       	mov	r19, r25
     ea4:	21 15       	cp	r18, r1
     ea6:	31 05       	cpc	r19, r1
     ea8:	69 f4       	brne	.+26     	; 0xec4 <protocolCom+0x4a6>
				/*if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{*/
				set_substring();
     eaa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Locatie(substring);
     eae:	80 91 9a 07 	lds	r24, 0x079A
     eb2:	90 91 9b 07 	lds	r25, 0x079B
     eb6:	0e 94 aa 02 	call	0x554	; 0x554 <set_Locatie>
				
				printf("200 OK \n");
     eba:	8f e2       	ldi	r24, 0x2F	; 47
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	0e 94 56 11 	call	0x22ac	; 0x22ac <puts>
     ec2:	22 ce       	rjmp	.-956    	; 0xb08 <protocolCom+0xea>
				//}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     ec4:	84 e5       	ldi	r24, 0x54	; 84
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	be 01       	movw	r22, r28
     eca:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     ece:	28 2f       	mov	r18, r24
     ed0:	39 2f       	mov	r19, r25
     ed2:	21 15       	cp	r18, r1
     ed4:	31 05       	cpc	r19, r1
     ed6:	49 f4       	brne	.+18     	; 0xeea <protocolCom+0x4cc>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     ed8:	80 e6       	ldi	r24, 0x60	; 96
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
     ee0:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
     ee4:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     ee8:	0f ce       	rjmp	.-994    	; 0xb08 <protocolCom+0xea>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     eea:	8d e6       	ldi	r24, 0x6D	; 109
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	be 01       	movw	r22, r28
     ef0:	4c e0       	ldi	r20, 0x0C	; 12
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strncmp>
     ef8:	28 2f       	mov	r18, r24
     efa:	39 2f       	mov	r19, r25
     efc:	21 15       	cp	r18, r1
     efe:	31 05       	cpc	r19, r1
     f00:	69 f4       	brne	.+26     	; 0xf1c <protocolCom+0x4fe>
					/*if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
					}
					else{*/
					set_substring();
     f02:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
					set_Versie(substring);
     f06:	80 91 9a 07 	lds	r24, 0x079A
     f0a:	90 91 9b 07 	lds	r25, 0x079B
     f0e:	0e 94 11 03 	call	0x622	; 0x622 <set_Versie>
					
					printf("200 OK \n");
     f12:	8f e2       	ldi	r24, 0x2F	; 47
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 56 11 	call	0x22ac	; 0x22ac <puts>
     f1a:	f6 cd       	rjmp	.-1044   	; 0xb08 <protocolCom+0xea>
					//}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     f1c:	8c e7       	ldi	r24, 0x7C	; 124
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	be 01       	movw	r22, r28
     f22:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     f26:	28 2f       	mov	r18, r24
     f28:	39 2f       	mov	r19, r25
     f2a:	21 15       	cp	r18, r1
     f2c:	31 05       	cpc	r19, r1
     f2e:	89 f4       	brne	.+34     	; 0xf52 <protocolCom+0x534>
				if ((get_unrollStatus() % 2) == 1){
     f30:	0e 94 3f 08 	call	0x107e	; 0x107e <get_unrollStatus>
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divmodhi4>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	91 05       	cpc	r25, r1
     f40:	11 f4       	brne	.+4      	; 0xf46 <protocolCom+0x528>
					uitrollen();					
     f42:	0e 94 50 08 	call	0x10a0	; 0x10a0 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     f46:	81 e8       	ldi	r24, 0x81	; 129
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
				abort();
     f4e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     f52:	8a e8       	ldi	r24, 0x8A	; 138
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	be 01       	movw	r22, r28
     f58:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     f5c:	28 2f       	mov	r18, r24
     f5e:	39 2f       	mov	r19, r25
     f60:	21 15       	cp	r18, r1
     f62:	31 05       	cpc	r19, r1
     f64:	29 f4       	brne	.+10     	; 0xf70 <protocolCom+0x552>
				ser_writeln(
     f66:	8f e8       	ldi	r24, 0x8F	; 143
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     f6e:	cc cd       	rjmp	.-1128   	; 0xb08 <protocolCom+0xea>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     f70:	84 ed       	ldi	r24, 0xD4	; 212
     f72:	95 e0       	ldi	r25, 0x05	; 5
     f74:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
     f78:	c7 cd       	rjmp	.-1138   	; 0xb08 <protocolCom+0xea>

00000f7a <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     f7a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     f7e:	83 e3       	ldi	r24, 0x33	; 51
     f80:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     f84:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     f88:	88 e1       	ldi	r24, 0x18	; 24
     f8a:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     f8e:	86 e0       	ldi	r24, 0x06	; 6
     f90:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     f94:	8a e1       	ldi	r24, 0x1A	; 26
     f96:	96 e0       	ldi	r25, 0x06	; 6
     f98:	90 93 c1 07 	sts	0x07C1, r25
     f9c:	80 93 c0 07 	sts	0x07C0, r24
}
     fa0:	08 95       	ret

00000fa2 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     fa2:	e0 ec       	ldi	r30, 0xC0	; 192
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	90 81       	ld	r25, Z
     fa8:	95 ff       	sbrs	r25, 5
     faa:	fd cf       	rjmp	.-6      	; 0xfa6 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     fac:	80 93 c6 00 	sts	0x00C6, r24
}
     fb0:	08 95       	ret

00000fb2 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     fb2:	cf 93       	push	r28
     fb4:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     fb6:	8a 30       	cpi	r24, 0x0A	; 10
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     fba:	8d e0       	ldi	r24, 0x0D	; 13
     fbc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>
	}
	ser_transmit(c);
     fc0:	8c 2f       	mov	r24, r28
     fc2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>
}
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     fca:	e0 ec       	ldi	r30, 0xC0	; 192
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	88 23       	and	r24, r24
     fd2:	ec f7       	brge	.-6      	; 0xfce <ser_receive+0x4>
	return UDR0;
     fd4:	80 91 c6 00 	lds	r24, 0x00C6
}
     fd8:	08 95       	ret

00000fda <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     fe0:	88 81       	ld	r24, Y
     fe2:	88 23       	and	r24, r24
     fe4:	31 f0       	breq	.+12     	; 0xff2 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     fe6:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     fe8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     fec:	89 91       	ld	r24, Y+
     fee:	88 23       	and	r24, r24
     ff0:	d9 f7       	brne	.-10     	; 0xfe8 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     ff8:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
	ser_transmit('\r');
     ffc:	8d e0       	ldi	r24, 0x0D	; 13
     ffe:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>
	ser_transmit('\n');
    1002:	8a e0       	ldi	r24, 0x0A	; 10
    1004:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>
}
    1008:	08 95       	ret

0000100a <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	5c 01       	movw	r10, r24
    1020:	d4 2f       	mov	r29, r20
	int i=0;
    1022:	6c 01       	movw	r12, r24
    1024:	ee 24       	eor	r14, r14
    1026:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1028:	8b 01       	movw	r16, r22
    102a:	01 50       	subi	r16, 0x01	; 1
    102c:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    102e:	0e 94 e5 07 	call	0xfca	; 0xfca <ser_receive>
    1032:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    1034:	dd 23       	and	r29, r29
    1036:	11 f0       	breq	.+4      	; 0x103c <ser_readln+0x32>
    1038:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>
		if (c=='\r') {
    103c:	cd 30       	cpi	r28, 0x0D	; 13
    103e:	31 f4       	brne	.+12     	; 0x104c <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1040:	dd 23       	and	r29, r29
    1042:	71 f0       	breq	.+28     	; 0x1060 <ser_readln+0x56>
    1044:	8a e0       	ldi	r24, 0x0A	; 10
    1046:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ser_transmit>
    104a:	0a c0       	rjmp	.+20     	; 0x1060 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    104c:	e0 16       	cp	r14, r16
    104e:	f1 06       	cpc	r15, r17
    1050:	74 f7       	brge	.-36     	; 0x102e <ser_readln+0x24>
			buf[i++]=c;
    1052:	f6 01       	movw	r30, r12
    1054:	c1 93       	st	Z+, r28
    1056:	6f 01       	movw	r12, r30
    1058:	08 94       	sec
    105a:	e1 1c       	adc	r14, r1
    105c:	f1 1c       	adc	r15, r1
    105e:	e7 cf       	rjmp	.-50     	; 0x102e <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    1060:	ea 0c       	add	r14, r10
    1062:	fb 1c       	adc	r15, r11
    1064:	f7 01       	movw	r30, r14
    1066:	10 82       	st	Z, r1
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	bf 90       	pop	r11
    107a:	af 90       	pop	r10
    107c:	08 95       	ret

0000107e <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    107e:	80 91 a0 06 	lds	r24, 0x06A0
    1082:	90 91 a1 06 	lds	r25, 0x06A1
    1086:	08 95       	ret

00001088 <init_scherm_ports>:


void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    1088:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    108a:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    108c:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    108e:	e9 e6       	ldi	r30, 0x69	; 105
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    109c:	2d 9a       	sbi	0x05, 5	; 5
}
    109e:	08 95       	ret

000010a0 <uitrollen>:

void uitrollen(){
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
	IN = (IN + 1);
    10a8:	80 91 a0 06 	lds	r24, 0x06A0
    10ac:	90 91 a1 06 	lds	r25, 0x06A1
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	90 93 a1 06 	sts	0x06A1, r25
    10b6:	80 93 a0 06 	sts	0x06A0, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    10ba:	88 e2       	ldi	r24, 0x28	; 40
    10bc:	96 e0       	ldi	r25, 0x06	; 6
    10be:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    10c2:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    10c4:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    10c6:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	0e 94 76 0e 	call	0x1cec	; 0x1cec <strtod>
    10d2:	6b 01       	movw	r12, r22
    10d4:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    10d8:	2c 9a       	sbi	0x05, 4	; 5
    10da:	8f e3       	ldi	r24, 0x3F	; 63
    10dc:	9d e0       	ldi	r25, 0x0D	; 13
    10de:	a3 e0       	ldi	r26, 0x03	; 3
    10e0:	81 50       	subi	r24, 0x01	; 1
    10e2:	90 40       	sbci	r25, 0x00	; 0
    10e4:	a0 40       	sbci	r26, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <uitrollen+0x40>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <uitrollen+0x4a>
    10ea:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    10ec:	2c 98       	cbi	0x05, 4	; 5
    10ee:	8f e3       	ldi	r24, 0x3F	; 63
    10f0:	9d e0       	ldi	r25, 0x0D	; 13
    10f2:	a3 e0       	ldi	r26, 0x03	; 3
    10f4:	81 50       	subi	r24, 0x01	; 1
    10f6:	90 40       	sbci	r25, 0x00	; 0
    10f8:	a0 40       	sbci	r26, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <uitrollen+0x54>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <uitrollen+0x5e>
    10fe:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1100:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1104:	a7 01       	movw	r20, r14
    1106:	96 01       	movw	r18, r12
    1108:	0e 94 6f 09 	call	0x12de	; 0x12de <__cmpsf2>
    110c:	88 23       	and	r24, r24
    110e:	24 f3       	brlt	.-56     	; 0x10d8 <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    1110:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	00 d0       	rcall	.+0      	; 0x111a <uitrollen+0x7a>
    111a:	00 d0       	rcall	.+0      	; 0x111c <uitrollen+0x7c>
    111c:	00 d0       	rcall	.+0      	; 0x111e <uitrollen+0x7e>
    111e:	2e e2       	ldi	r18, 0x2E	; 46
    1120:	36 e0       	ldi	r19, 0x06	; 6
    1122:	ed b7       	in	r30, 0x3d	; 61
    1124:	fe b7       	in	r31, 0x3e	; 62
    1126:	32 83       	std	Z+2, r19	; 0x02
    1128:	21 83       	std	Z+1, r18	; 0x01
    112a:	83 83       	std	Z+3, r24	; 0x03
    112c:	94 83       	std	Z+4, r25	; 0x04
    112e:	a5 83       	std	Z+5, r26	; 0x05
    1130:	b6 83       	std	Z+6, r27	; 0x06
    1132:	0e 94 41 11 	call	0x2282	; 0x2282 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    1136:	8d b7       	in	r24, 0x3d	; 61
    1138:	9e b7       	in	r25, 0x3e	; 62
    113a:	06 96       	adiw	r24, 0x06	; 6
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	9e bf       	out	0x3e, r25	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	8d bf       	out	0x3d, r24	; 61
    1146:	82 e5       	ldi	r24, 0x52	; 82
    1148:	96 e0       	ldi	r25, 0x06	; 6
    114a:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
}
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	08 95       	ret

00001158 <oprollen>:
	
	


void oprollen(){
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
	IN = (IN + 1);
    1160:	80 91 a0 06 	lds	r24, 0x06A0
    1164:	90 91 a1 06 	lds	r25, 0x06A1
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	90 93 a1 06 	sts	0x06A1, r25
    116e:	80 93 a0 06 	sts	0x06A0, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    1172:	80 e7       	ldi	r24, 0x70	; 112
    1174:	96 e0       	ldi	r25, 0x06	; 6
    1176:	0e 94 ed 07 	call	0xfda	; 0xfda <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    117a:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    117c:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    117e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	0e 94 76 0e 	call	0x1cec	; 0x1cec <strtod>
    118a:	6b 01       	movw	r12, r22
    118c:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1190:	2c 9a       	sbi	0x05, 4	; 5
    1192:	8f e3       	ldi	r24, 0x3F	; 63
    1194:	9d e0       	ldi	r25, 0x0D	; 13
    1196:	a3 e0       	ldi	r26, 0x03	; 3
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	90 40       	sbci	r25, 0x00	; 0
    119c:	a0 40       	sbci	r26, 0x00	; 0
    119e:	e1 f7       	brne	.-8      	; 0x1198 <oprollen+0x40>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <oprollen+0x4a>
    11a2:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    11a4:	2c 98       	cbi	0x05, 4	; 5
    11a6:	8f e3       	ldi	r24, 0x3F	; 63
    11a8:	9d e0       	ldi	r25, 0x0D	; 13
    11aa:	a3 e0       	ldi	r26, 0x03	; 3
    11ac:	81 50       	subi	r24, 0x01	; 1
    11ae:	90 40       	sbci	r25, 0x00	; 0
    11b0:	a0 40       	sbci	r26, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <oprollen+0x54>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <oprollen+0x5e>
    11b6:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    11b8:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11bc:	a7 01       	movw	r20, r14
    11be:	96 01       	movw	r18, r12
    11c0:	0e 94 25 0a 	call	0x144a	; 0x144a <__gesf2>
    11c4:	18 16       	cp	r1, r24
    11c6:	24 f3       	brlt	.-56     	; 0x1190 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    11c8:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    11cc:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <oprollen+0x7e>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <oprollen+0x80>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <oprollen+0x82>
    11da:	2e e2       	ldi	r18, 0x2E	; 46
    11dc:	36 e0       	ldi	r19, 0x06	; 6
    11de:	ed b7       	in	r30, 0x3d	; 61
    11e0:	fe b7       	in	r31, 0x3e	; 62
    11e2:	32 83       	std	Z+2, r19	; 0x02
    11e4:	21 83       	std	Z+1, r18	; 0x01
    11e6:	83 83       	std	Z+3, r24	; 0x03
    11e8:	94 83       	std	Z+4, r25	; 0x04
    11ea:	a5 83       	std	Z+5, r26	; 0x05
    11ec:	b6 83       	std	Z+6, r27	; 0x06
    11ee:	0e 94 41 11 	call	0x2282	; 0x2282 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    11f2:	8d b7       	in	r24, 0x3d	; 61
    11f4:	9e b7       	in	r25, 0x3e	; 62
    11f6:	06 96       	adiw	r24, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	9e bf       	out	0x3e, r25	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	8d bf       	out	0x3d, r24	; 61
    1202:	85 e7       	ldi	r24, 0x75	; 117
    1204:	96 e0       	ldi	r25, 0x06	; 6
    1206:	0e 94 fc 07 	call	0xff8	; 0xff8 <ser_writeln>
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret

00001214 <__subsf3>:
    1214:	50 58       	subi	r21, 0x80	; 128

00001216 <__addsf3>:
    1216:	bb 27       	eor	r27, r27
    1218:	aa 27       	eor	r26, r26
    121a:	0e d0       	rcall	.+28     	; 0x1238 <__addsf3x>
    121c:	dc c0       	rjmp	.+440    	; 0x13d6 <__fp_round>
    121e:	cd d0       	rcall	.+410    	; 0x13ba <__fp_pscA>
    1220:	30 f0       	brcs	.+12     	; 0x122e <__addsf3+0x18>
    1222:	d2 d0       	rcall	.+420    	; 0x13c8 <__fp_pscB>
    1224:	20 f0       	brcs	.+8      	; 0x122e <__addsf3+0x18>
    1226:	31 f4       	brne	.+12     	; 0x1234 <__addsf3+0x1e>
    1228:	9f 3f       	cpi	r25, 0xFF	; 255
    122a:	11 f4       	brne	.+4      	; 0x1230 <__addsf3+0x1a>
    122c:	1e f4       	brtc	.+6      	; 0x1234 <__addsf3+0x1e>
    122e:	c2 c0       	rjmp	.+388    	; 0x13b4 <__fp_nan>
    1230:	0e f4       	brtc	.+2      	; 0x1234 <__addsf3+0x1e>
    1232:	e0 95       	com	r30
    1234:	e7 fb       	bst	r30, 7
    1236:	b8 c0       	rjmp	.+368    	; 0x13a8 <__fp_inf>

00001238 <__addsf3x>:
    1238:	e9 2f       	mov	r30, r25
    123a:	de d0       	rcall	.+444    	; 0x13f8 <__fp_split3>
    123c:	80 f3       	brcs	.-32     	; 0x121e <__addsf3+0x8>
    123e:	ba 17       	cp	r27, r26
    1240:	62 07       	cpc	r22, r18
    1242:	73 07       	cpc	r23, r19
    1244:	84 07       	cpc	r24, r20
    1246:	95 07       	cpc	r25, r21
    1248:	18 f0       	brcs	.+6      	; 0x1250 <__addsf3x+0x18>
    124a:	71 f4       	brne	.+28     	; 0x1268 <__addsf3x+0x30>
    124c:	9e f5       	brtc	.+102    	; 0x12b4 <__addsf3x+0x7c>
    124e:	f6 c0       	rjmp	.+492    	; 0x143c <__fp_zero>
    1250:	0e f4       	brtc	.+2      	; 0x1254 <__addsf3x+0x1c>
    1252:	e0 95       	com	r30
    1254:	0b 2e       	mov	r0, r27
    1256:	ba 2f       	mov	r27, r26
    1258:	a0 2d       	mov	r26, r0
    125a:	0b 01       	movw	r0, r22
    125c:	b9 01       	movw	r22, r18
    125e:	90 01       	movw	r18, r0
    1260:	0c 01       	movw	r0, r24
    1262:	ca 01       	movw	r24, r20
    1264:	a0 01       	movw	r20, r0
    1266:	11 24       	eor	r1, r1
    1268:	ff 27       	eor	r31, r31
    126a:	59 1b       	sub	r21, r25
    126c:	99 f0       	breq	.+38     	; 0x1294 <__addsf3x+0x5c>
    126e:	59 3f       	cpi	r21, 0xF9	; 249
    1270:	50 f4       	brcc	.+20     	; 0x1286 <__addsf3x+0x4e>
    1272:	50 3e       	cpi	r21, 0xE0	; 224
    1274:	68 f1       	brcs	.+90     	; 0x12d0 <__addsf3x+0x98>
    1276:	1a 16       	cp	r1, r26
    1278:	f0 40       	sbci	r31, 0x00	; 0
    127a:	a2 2f       	mov	r26, r18
    127c:	23 2f       	mov	r18, r19
    127e:	34 2f       	mov	r19, r20
    1280:	44 27       	eor	r20, r20
    1282:	58 5f       	subi	r21, 0xF8	; 248
    1284:	f3 cf       	rjmp	.-26     	; 0x126c <__addsf3x+0x34>
    1286:	46 95       	lsr	r20
    1288:	37 95       	ror	r19
    128a:	27 95       	ror	r18
    128c:	a7 95       	ror	r26
    128e:	f0 40       	sbci	r31, 0x00	; 0
    1290:	53 95       	inc	r21
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__addsf3x+0x4e>
    1294:	7e f4       	brtc	.+30     	; 0x12b4 <__addsf3x+0x7c>
    1296:	1f 16       	cp	r1, r31
    1298:	ba 0b       	sbc	r27, r26
    129a:	62 0b       	sbc	r22, r18
    129c:	73 0b       	sbc	r23, r19
    129e:	84 0b       	sbc	r24, r20
    12a0:	ba f0       	brmi	.+46     	; 0x12d0 <__addsf3x+0x98>
    12a2:	91 50       	subi	r25, 0x01	; 1
    12a4:	a1 f0       	breq	.+40     	; 0x12ce <__addsf3x+0x96>
    12a6:	ff 0f       	add	r31, r31
    12a8:	bb 1f       	adc	r27, r27
    12aa:	66 1f       	adc	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	c2 f7       	brpl	.-16     	; 0x12a2 <__addsf3x+0x6a>
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <__addsf3x+0x98>
    12b4:	ba 0f       	add	r27, r26
    12b6:	62 1f       	adc	r22, r18
    12b8:	73 1f       	adc	r23, r19
    12ba:	84 1f       	adc	r24, r20
    12bc:	48 f4       	brcc	.+18     	; 0x12d0 <__addsf3x+0x98>
    12be:	87 95       	ror	r24
    12c0:	77 95       	ror	r23
    12c2:	67 95       	ror	r22
    12c4:	b7 95       	ror	r27
    12c6:	f7 95       	ror	r31
    12c8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <__addsf3x+0x96>
    12cc:	b3 cf       	rjmp	.-154    	; 0x1234 <__addsf3+0x1e>
    12ce:	93 95       	inc	r25
    12d0:	88 0f       	add	r24, r24
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__addsf3x+0x9e>
    12d4:	99 27       	eor	r25, r25
    12d6:	ee 0f       	add	r30, r30
    12d8:	97 95       	ror	r25
    12da:	87 95       	ror	r24
    12dc:	08 95       	ret

000012de <__cmpsf2>:
    12de:	40 d0       	rcall	.+128    	; 0x1360 <__fp_cmp>
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <__cmpsf2+0x6>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	08 95       	ret

000012e6 <__floatunsisf>:
    12e6:	e8 94       	clt
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <__floatsisf+0x12>

000012ea <__floatsisf>:
    12ea:	97 fb       	bst	r25, 7
    12ec:	3e f4       	brtc	.+14     	; 0x12fc <__floatsisf+0x12>
    12ee:	90 95       	com	r25
    12f0:	80 95       	com	r24
    12f2:	70 95       	com	r23
    12f4:	61 95       	neg	r22
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	99 23       	and	r25, r25
    12fe:	a9 f0       	breq	.+42     	; 0x132a <__floatsisf+0x40>
    1300:	f9 2f       	mov	r31, r25
    1302:	96 e9       	ldi	r25, 0x96	; 150
    1304:	bb 27       	eor	r27, r27
    1306:	93 95       	inc	r25
    1308:	f6 95       	lsr	r31
    130a:	87 95       	ror	r24
    130c:	77 95       	ror	r23
    130e:	67 95       	ror	r22
    1310:	b7 95       	ror	r27
    1312:	f1 11       	cpse	r31, r1
    1314:	f8 cf       	rjmp	.-16     	; 0x1306 <__floatsisf+0x1c>
    1316:	fa f4       	brpl	.+62     	; 0x1356 <__floatsisf+0x6c>
    1318:	bb 0f       	add	r27, r27
    131a:	11 f4       	brne	.+4      	; 0x1320 <__floatsisf+0x36>
    131c:	60 ff       	sbrs	r22, 0
    131e:	1b c0       	rjmp	.+54     	; 0x1356 <__floatsisf+0x6c>
    1320:	6f 5f       	subi	r22, 0xFF	; 255
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	16 c0       	rjmp	.+44     	; 0x1356 <__floatsisf+0x6c>
    132a:	88 23       	and	r24, r24
    132c:	11 f0       	breq	.+4      	; 0x1332 <__floatsisf+0x48>
    132e:	96 e9       	ldi	r25, 0x96	; 150
    1330:	11 c0       	rjmp	.+34     	; 0x1354 <__floatsisf+0x6a>
    1332:	77 23       	and	r23, r23
    1334:	21 f0       	breq	.+8      	; 0x133e <__floatsisf+0x54>
    1336:	9e e8       	ldi	r25, 0x8E	; 142
    1338:	87 2f       	mov	r24, r23
    133a:	76 2f       	mov	r23, r22
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <__floatsisf+0x5e>
    133e:	66 23       	and	r22, r22
    1340:	71 f0       	breq	.+28     	; 0x135e <__floatsisf+0x74>
    1342:	96 e8       	ldi	r25, 0x86	; 134
    1344:	86 2f       	mov	r24, r22
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	2a f0       	brmi	.+10     	; 0x1356 <__floatsisf+0x6c>
    134c:	9a 95       	dec	r25
    134e:	66 0f       	add	r22, r22
    1350:	77 1f       	adc	r23, r23
    1352:	88 1f       	adc	r24, r24
    1354:	da f7       	brpl	.-10     	; 0x134c <__floatsisf+0x62>
    1356:	88 0f       	add	r24, r24
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	97 f9       	bld	r25, 7
    135e:	08 95       	ret

00001360 <__fp_cmp>:
    1360:	99 0f       	add	r25, r25
    1362:	00 08       	sbc	r0, r0
    1364:	55 0f       	add	r21, r21
    1366:	aa 0b       	sbc	r26, r26
    1368:	e0 e8       	ldi	r30, 0x80	; 128
    136a:	fe ef       	ldi	r31, 0xFE	; 254
    136c:	16 16       	cp	r1, r22
    136e:	17 06       	cpc	r1, r23
    1370:	e8 07       	cpc	r30, r24
    1372:	f9 07       	cpc	r31, r25
    1374:	c0 f0       	brcs	.+48     	; 0x13a6 <__fp_cmp+0x46>
    1376:	12 16       	cp	r1, r18
    1378:	13 06       	cpc	r1, r19
    137a:	e4 07       	cpc	r30, r20
    137c:	f5 07       	cpc	r31, r21
    137e:	98 f0       	brcs	.+38     	; 0x13a6 <__fp_cmp+0x46>
    1380:	62 1b       	sub	r22, r18
    1382:	73 0b       	sbc	r23, r19
    1384:	84 0b       	sbc	r24, r20
    1386:	95 0b       	sbc	r25, r21
    1388:	39 f4       	brne	.+14     	; 0x1398 <__fp_cmp+0x38>
    138a:	0a 26       	eor	r0, r26
    138c:	61 f0       	breq	.+24     	; 0x13a6 <__fp_cmp+0x46>
    138e:	23 2b       	or	r18, r19
    1390:	24 2b       	or	r18, r20
    1392:	25 2b       	or	r18, r21
    1394:	21 f4       	brne	.+8      	; 0x139e <__fp_cmp+0x3e>
    1396:	08 95       	ret
    1398:	0a 26       	eor	r0, r26
    139a:	09 f4       	brne	.+2      	; 0x139e <__fp_cmp+0x3e>
    139c:	a1 40       	sbci	r26, 0x01	; 1
    139e:	a6 95       	lsr	r26
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	81 1d       	adc	r24, r1
    13a4:	81 1d       	adc	r24, r1
    13a6:	08 95       	ret

000013a8 <__fp_inf>:
    13a8:	97 f9       	bld	r25, 7
    13aa:	9f 67       	ori	r25, 0x7F	; 127
    13ac:	80 e8       	ldi	r24, 0x80	; 128
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	08 95       	ret

000013b4 <__fp_nan>:
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    13b6:	80 ec       	ldi	r24, 0xC0	; 192
    13b8:	08 95       	ret

000013ba <__fp_pscA>:
    13ba:	00 24       	eor	r0, r0
    13bc:	0a 94       	dec	r0
    13be:	16 16       	cp	r1, r22
    13c0:	17 06       	cpc	r1, r23
    13c2:	18 06       	cpc	r1, r24
    13c4:	09 06       	cpc	r0, r25
    13c6:	08 95       	ret

000013c8 <__fp_pscB>:
    13c8:	00 24       	eor	r0, r0
    13ca:	0a 94       	dec	r0
    13cc:	12 16       	cp	r1, r18
    13ce:	13 06       	cpc	r1, r19
    13d0:	14 06       	cpc	r1, r20
    13d2:	05 06       	cpc	r0, r21
    13d4:	08 95       	ret

000013d6 <__fp_round>:
    13d6:	09 2e       	mov	r0, r25
    13d8:	03 94       	inc	r0
    13da:	00 0c       	add	r0, r0
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <__fp_round+0xc>
    13de:	88 23       	and	r24, r24
    13e0:	52 f0       	brmi	.+20     	; 0x13f6 <__fp_round+0x20>
    13e2:	bb 0f       	add	r27, r27
    13e4:	40 f4       	brcc	.+16     	; 0x13f6 <__fp_round+0x20>
    13e6:	bf 2b       	or	r27, r31
    13e8:	11 f4       	brne	.+4      	; 0x13ee <__fp_round+0x18>
    13ea:	60 ff       	sbrs	r22, 0
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <__fp_round+0x20>
    13ee:	6f 5f       	subi	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	8f 4f       	sbci	r24, 0xFF	; 255
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	08 95       	ret

000013f8 <__fp_split3>:
    13f8:	57 fd       	sbrc	r21, 7
    13fa:	90 58       	subi	r25, 0x80	; 128
    13fc:	44 0f       	add	r20, r20
    13fe:	55 1f       	adc	r21, r21
    1400:	59 f0       	breq	.+22     	; 0x1418 <__fp_splitA+0x10>
    1402:	5f 3f       	cpi	r21, 0xFF	; 255
    1404:	71 f0       	breq	.+28     	; 0x1422 <__fp_splitA+0x1a>
    1406:	47 95       	ror	r20

00001408 <__fp_splitA>:
    1408:	88 0f       	add	r24, r24
    140a:	97 fb       	bst	r25, 7
    140c:	99 1f       	adc	r25, r25
    140e:	61 f0       	breq	.+24     	; 0x1428 <__fp_splitA+0x20>
    1410:	9f 3f       	cpi	r25, 0xFF	; 255
    1412:	79 f0       	breq	.+30     	; 0x1432 <__fp_splitA+0x2a>
    1414:	87 95       	ror	r24
    1416:	08 95       	ret
    1418:	12 16       	cp	r1, r18
    141a:	13 06       	cpc	r1, r19
    141c:	14 06       	cpc	r1, r20
    141e:	55 1f       	adc	r21, r21
    1420:	f2 cf       	rjmp	.-28     	; 0x1406 <__fp_split3+0xe>
    1422:	46 95       	lsr	r20
    1424:	f1 df       	rcall	.-30     	; 0x1408 <__fp_splitA>
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <__fp_splitA+0x30>
    1428:	16 16       	cp	r1, r22
    142a:	17 06       	cpc	r1, r23
    142c:	18 06       	cpc	r1, r24
    142e:	99 1f       	adc	r25, r25
    1430:	f1 cf       	rjmp	.-30     	; 0x1414 <__fp_splitA+0xc>
    1432:	86 95       	lsr	r24
    1434:	71 05       	cpc	r23, r1
    1436:	61 05       	cpc	r22, r1
    1438:	08 94       	sec
    143a:	08 95       	ret

0000143c <__fp_zero>:
    143c:	e8 94       	clt

0000143e <__fp_szero>:
    143e:	bb 27       	eor	r27, r27
    1440:	66 27       	eor	r22, r22
    1442:	77 27       	eor	r23, r23
    1444:	cb 01       	movw	r24, r22
    1446:	97 f9       	bld	r25, 7
    1448:	08 95       	ret

0000144a <__gesf2>:
    144a:	8a df       	rcall	.-236    	; 0x1360 <__fp_cmp>
    144c:	08 f4       	brcc	.+2      	; 0x1450 <__gesf2+0x6>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	08 95       	ret

00001452 <__mulsf3>:
    1452:	0b d0       	rcall	.+22     	; 0x146a <__mulsf3x>
    1454:	c0 cf       	rjmp	.-128    	; 0x13d6 <__fp_round>
    1456:	b1 df       	rcall	.-158    	; 0x13ba <__fp_pscA>
    1458:	28 f0       	brcs	.+10     	; 0x1464 <__mulsf3+0x12>
    145a:	b6 df       	rcall	.-148    	; 0x13c8 <__fp_pscB>
    145c:	18 f0       	brcs	.+6      	; 0x1464 <__mulsf3+0x12>
    145e:	95 23       	and	r25, r21
    1460:	09 f0       	breq	.+2      	; 0x1464 <__mulsf3+0x12>
    1462:	a2 cf       	rjmp	.-188    	; 0x13a8 <__fp_inf>
    1464:	a7 cf       	rjmp	.-178    	; 0x13b4 <__fp_nan>
    1466:	11 24       	eor	r1, r1
    1468:	ea cf       	rjmp	.-44     	; 0x143e <__fp_szero>

0000146a <__mulsf3x>:
    146a:	c6 df       	rcall	.-116    	; 0x13f8 <__fp_split3>
    146c:	a0 f3       	brcs	.-24     	; 0x1456 <__mulsf3+0x4>

0000146e <__mulsf3_pse>:
    146e:	95 9f       	mul	r25, r21
    1470:	d1 f3       	breq	.-12     	; 0x1466 <__mulsf3+0x14>
    1472:	95 0f       	add	r25, r21
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	55 1f       	adc	r21, r21
    1478:	62 9f       	mul	r22, r18
    147a:	f0 01       	movw	r30, r0
    147c:	72 9f       	mul	r23, r18
    147e:	bb 27       	eor	r27, r27
    1480:	f0 0d       	add	r31, r0
    1482:	b1 1d       	adc	r27, r1
    1484:	63 9f       	mul	r22, r19
    1486:	aa 27       	eor	r26, r26
    1488:	f0 0d       	add	r31, r0
    148a:	b1 1d       	adc	r27, r1
    148c:	aa 1f       	adc	r26, r26
    148e:	64 9f       	mul	r22, r20
    1490:	66 27       	eor	r22, r22
    1492:	b0 0d       	add	r27, r0
    1494:	a1 1d       	adc	r26, r1
    1496:	66 1f       	adc	r22, r22
    1498:	82 9f       	mul	r24, r18
    149a:	22 27       	eor	r18, r18
    149c:	b0 0d       	add	r27, r0
    149e:	a1 1d       	adc	r26, r1
    14a0:	62 1f       	adc	r22, r18
    14a2:	73 9f       	mul	r23, r19
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	62 1f       	adc	r22, r18
    14aa:	83 9f       	mul	r24, r19
    14ac:	a0 0d       	add	r26, r0
    14ae:	61 1d       	adc	r22, r1
    14b0:	22 1f       	adc	r18, r18
    14b2:	74 9f       	mul	r23, r20
    14b4:	33 27       	eor	r19, r19
    14b6:	a0 0d       	add	r26, r0
    14b8:	61 1d       	adc	r22, r1
    14ba:	23 1f       	adc	r18, r19
    14bc:	84 9f       	mul	r24, r20
    14be:	60 0d       	add	r22, r0
    14c0:	21 1d       	adc	r18, r1
    14c2:	82 2f       	mov	r24, r18
    14c4:	76 2f       	mov	r23, r22
    14c6:	6a 2f       	mov	r22, r26
    14c8:	11 24       	eor	r1, r1
    14ca:	9f 57       	subi	r25, 0x7F	; 127
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	8a f0       	brmi	.+34     	; 0x14f2 <__mulsf3_pse+0x84>
    14d0:	e1 f0       	breq	.+56     	; 0x150a <__mulsf3_pse+0x9c>
    14d2:	88 23       	and	r24, r24
    14d4:	4a f0       	brmi	.+18     	; 0x14e8 <__mulsf3_pse+0x7a>
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	bb 1f       	adc	r27, r27
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	91 50       	subi	r25, 0x01	; 1
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	a9 f7       	brne	.-22     	; 0x14d2 <__mulsf3_pse+0x64>
    14e8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ea:	51 05       	cpc	r21, r1
    14ec:	70 f0       	brcs	.+28     	; 0x150a <__mulsf3_pse+0x9c>
    14ee:	5c cf       	rjmp	.-328    	; 0x13a8 <__fp_inf>
    14f0:	a6 cf       	rjmp	.-180    	; 0x143e <__fp_szero>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	ec f3       	brlt	.-6      	; 0x14f0 <__mulsf3_pse+0x82>
    14f6:	98 3e       	cpi	r25, 0xE8	; 232
    14f8:	dc f3       	brlt	.-10     	; 0x14f0 <__mulsf3_pse+0x82>
    14fa:	86 95       	lsr	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f7 95       	ror	r31
    1504:	e7 95       	ror	r30
    1506:	9f 5f       	subi	r25, 0xFF	; 255
    1508:	c1 f7       	brne	.-16     	; 0x14fa <__mulsf3_pse+0x8c>
    150a:	fe 2b       	or	r31, r30
    150c:	88 0f       	add	r24, r24
    150e:	91 1d       	adc	r25, r1
    1510:	96 95       	lsr	r25
    1512:	87 95       	ror	r24
    1514:	97 f9       	bld	r25, 7
    1516:	08 95       	ret

00001518 <vfprintf>:
    1518:	a5 e1       	ldi	r26, 0x15	; 21
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e2 e9       	ldi	r30, 0x92	; 146
    151e:	fa e0       	ldi	r31, 0x0A	; 10
    1520:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__prologue_saves__>
    1524:	4c 01       	movw	r8, r24
    1526:	7f 87       	std	Y+15, r23	; 0x0f
    1528:	6e 87       	std	Y+14, r22	; 0x0e
    152a:	fc 01       	movw	r30, r24
    152c:	17 82       	std	Z+7, r1	; 0x07
    152e:	16 82       	std	Z+6, r1	; 0x06
    1530:	83 81       	ldd	r24, Z+3	; 0x03
    1532:	81 fd       	sbrc	r24, 1
    1534:	04 c0       	rjmp	.+8      	; 0x153e <vfprintf+0x26>
    1536:	76 c3       	rjmp	.+1772   	; 0x1c24 <vfprintf+0x70c>
    1538:	4c 85       	ldd	r20, Y+12	; 0x0c
    153a:	5d 85       	ldd	r21, Y+13	; 0x0d
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <vfprintf+0x2e>
    153e:	1e 01       	movw	r2, r28
    1540:	08 94       	sec
    1542:	21 1c       	adc	r2, r1
    1544:	31 1c       	adc	r3, r1
    1546:	f4 01       	movw	r30, r8
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	ee 85       	ldd	r30, Y+14	; 0x0e
    154c:	ff 85       	ldd	r31, Y+15	; 0x0f
    154e:	93 fd       	sbrc	r25, 3
    1550:	85 91       	lpm	r24, Z+
    1552:	93 ff       	sbrs	r25, 3
    1554:	81 91       	ld	r24, Z+
    1556:	ff 87       	std	Y+15, r31	; 0x0f
    1558:	ee 87       	std	Y+14, r30	; 0x0e
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <vfprintf+0x48>
    155e:	5e c3       	rjmp	.+1724   	; 0x1c1c <vfprintf+0x704>
    1560:	85 32       	cpi	r24, 0x25	; 37
    1562:	41 f4       	brne	.+16     	; 0x1574 <vfprintf+0x5c>
    1564:	93 fd       	sbrc	r25, 3
    1566:	85 91       	lpm	r24, Z+
    1568:	93 ff       	sbrs	r25, 3
    156a:	81 91       	ld	r24, Z+
    156c:	ff 87       	std	Y+15, r31	; 0x0f
    156e:	ee 87       	std	Y+14, r30	; 0x0e
    1570:	85 32       	cpi	r24, 0x25	; 37
    1572:	59 f4       	brne	.+22     	; 0x158a <vfprintf+0x72>
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	b4 01       	movw	r22, r8
    1578:	4c 8b       	std	Y+20, r20	; 0x14
    157a:	5d 8b       	std	Y+21, r21	; 0x15
    157c:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1580:	4c 89       	ldd	r20, Y+20	; 0x14
    1582:	5d 89       	ldd	r21, Y+21	; 0x15
    1584:	5d 87       	std	Y+13, r21	; 0x0d
    1586:	4c 87       	std	Y+12, r20	; 0x0c
    1588:	d7 cf       	rjmp	.-82     	; 0x1538 <vfprintf+0x20>
    158a:	ff 24       	eor	r15, r15
    158c:	dd 24       	eor	r13, r13
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	10 32       	cpi	r17, 0x20	; 32
    1592:	b0 f4       	brcc	.+44     	; 0x15c0 <vfprintf+0xa8>
    1594:	8b 32       	cpi	r24, 0x2B	; 43
    1596:	69 f0       	breq	.+26     	; 0x15b2 <vfprintf+0x9a>
    1598:	8c 32       	cpi	r24, 0x2C	; 44
    159a:	28 f4       	brcc	.+10     	; 0x15a6 <vfprintf+0x8e>
    159c:	80 32       	cpi	r24, 0x20	; 32
    159e:	51 f0       	breq	.+20     	; 0x15b4 <vfprintf+0x9c>
    15a0:	83 32       	cpi	r24, 0x23	; 35
    15a2:	71 f4       	brne	.+28     	; 0x15c0 <vfprintf+0xa8>
    15a4:	0b c0       	rjmp	.+22     	; 0x15bc <vfprintf+0xa4>
    15a6:	8d 32       	cpi	r24, 0x2D	; 45
    15a8:	39 f0       	breq	.+14     	; 0x15b8 <vfprintf+0xa0>
    15aa:	80 33       	cpi	r24, 0x30	; 48
    15ac:	49 f4       	brne	.+18     	; 0x15c0 <vfprintf+0xa8>
    15ae:	11 60       	ori	r17, 0x01	; 1
    15b0:	2c c0       	rjmp	.+88     	; 0x160a <vfprintf+0xf2>
    15b2:	12 60       	ori	r17, 0x02	; 2
    15b4:	14 60       	ori	r17, 0x04	; 4
    15b6:	29 c0       	rjmp	.+82     	; 0x160a <vfprintf+0xf2>
    15b8:	18 60       	ori	r17, 0x08	; 8
    15ba:	27 c0       	rjmp	.+78     	; 0x160a <vfprintf+0xf2>
    15bc:	10 61       	ori	r17, 0x10	; 16
    15be:	25 c0       	rjmp	.+74     	; 0x160a <vfprintf+0xf2>
    15c0:	17 fd       	sbrc	r17, 7
    15c2:	2e c0       	rjmp	.+92     	; 0x1620 <vfprintf+0x108>
    15c4:	28 2f       	mov	r18, r24
    15c6:	20 53       	subi	r18, 0x30	; 48
    15c8:	2a 30       	cpi	r18, 0x0A	; 10
    15ca:	98 f4       	brcc	.+38     	; 0x15f2 <vfprintf+0xda>
    15cc:	16 ff       	sbrs	r17, 6
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <vfprintf+0xc8>
    15d0:	8f 2d       	mov	r24, r15
    15d2:	88 0f       	add	r24, r24
    15d4:	f8 2e       	mov	r15, r24
    15d6:	ff 0c       	add	r15, r15
    15d8:	ff 0c       	add	r15, r15
    15da:	f8 0e       	add	r15, r24
    15dc:	f2 0e       	add	r15, r18
    15de:	15 c0       	rjmp	.+42     	; 0x160a <vfprintf+0xf2>
    15e0:	8d 2d       	mov	r24, r13
    15e2:	88 0f       	add	r24, r24
    15e4:	d8 2e       	mov	r13, r24
    15e6:	dd 0c       	add	r13, r13
    15e8:	dd 0c       	add	r13, r13
    15ea:	d8 0e       	add	r13, r24
    15ec:	d2 0e       	add	r13, r18
    15ee:	10 62       	ori	r17, 0x20	; 32
    15f0:	0c c0       	rjmp	.+24     	; 0x160a <vfprintf+0xf2>
    15f2:	8e 32       	cpi	r24, 0x2E	; 46
    15f4:	21 f4       	brne	.+8      	; 0x15fe <vfprintf+0xe6>
    15f6:	16 fd       	sbrc	r17, 6
    15f8:	11 c3       	rjmp	.+1570   	; 0x1c1c <vfprintf+0x704>
    15fa:	10 64       	ori	r17, 0x40	; 64
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <vfprintf+0xf2>
    15fe:	8c 36       	cpi	r24, 0x6C	; 108
    1600:	11 f4       	brne	.+4      	; 0x1606 <vfprintf+0xee>
    1602:	10 68       	ori	r17, 0x80	; 128
    1604:	02 c0       	rjmp	.+4      	; 0x160a <vfprintf+0xf2>
    1606:	88 36       	cpi	r24, 0x68	; 104
    1608:	59 f4       	brne	.+22     	; 0x1620 <vfprintf+0x108>
    160a:	ee 85       	ldd	r30, Y+14	; 0x0e
    160c:	ff 85       	ldd	r31, Y+15	; 0x0f
    160e:	93 fd       	sbrc	r25, 3
    1610:	85 91       	lpm	r24, Z+
    1612:	93 ff       	sbrs	r25, 3
    1614:	81 91       	ld	r24, Z+
    1616:	ff 87       	std	Y+15, r31	; 0x0f
    1618:	ee 87       	std	Y+14, r30	; 0x0e
    161a:	88 23       	and	r24, r24
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0x108>
    161e:	b8 cf       	rjmp	.-144    	; 0x1590 <vfprintf+0x78>
    1620:	98 2f       	mov	r25, r24
    1622:	95 54       	subi	r25, 0x45	; 69
    1624:	93 30       	cpi	r25, 0x03	; 3
    1626:	18 f4       	brcc	.+6      	; 0x162e <vfprintf+0x116>
    1628:	10 61       	ori	r17, 0x10	; 16
    162a:	80 5e       	subi	r24, 0xE0	; 224
    162c:	06 c0       	rjmp	.+12     	; 0x163a <vfprintf+0x122>
    162e:	98 2f       	mov	r25, r24
    1630:	95 56       	subi	r25, 0x65	; 101
    1632:	93 30       	cpi	r25, 0x03	; 3
    1634:	08 f0       	brcs	.+2      	; 0x1638 <vfprintf+0x120>
    1636:	a2 c1       	rjmp	.+836    	; 0x197c <vfprintf+0x464>
    1638:	1f 7e       	andi	r17, 0xEF	; 239
    163a:	16 fd       	sbrc	r17, 6
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x12a>
    163e:	e6 e0       	ldi	r30, 0x06	; 6
    1640:	fe 2e       	mov	r15, r30
    1642:	1f 73       	andi	r17, 0x3F	; 63
    1644:	85 36       	cpi	r24, 0x65	; 101
    1646:	11 f4       	brne	.+4      	; 0x164c <vfprintf+0x134>
    1648:	10 64       	ori	r17, 0x40	; 64
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <vfprintf+0x140>
    164c:	86 36       	cpi	r24, 0x66	; 102
    164e:	11 f4       	brne	.+4      	; 0x1654 <vfprintf+0x13c>
    1650:	10 68       	ori	r17, 0x80	; 128
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <vfprintf+0x140>
    1654:	f1 10       	cpse	r15, r1
    1656:	fa 94       	dec	r15
    1658:	17 ff       	sbrs	r17, 7
    165a:	07 c0       	rjmp	.+14     	; 0x166a <vfprintf+0x152>
    165c:	fb e3       	ldi	r31, 0x3B	; 59
    165e:	ff 15       	cp	r31, r15
    1660:	48 f0       	brcs	.+18     	; 0x1674 <vfprintf+0x15c>
    1662:	ef 2c       	mov	r14, r15
    1664:	e3 94       	inc	r14
    1666:	27 e0       	ldi	r18, 0x07	; 7
    1668:	0d c0       	rjmp	.+26     	; 0x1684 <vfprintf+0x16c>
    166a:	27 e0       	ldi	r18, 0x07	; 7
    166c:	2f 15       	cp	r18, r15
    166e:	30 f0       	brcs	.+12     	; 0x167c <vfprintf+0x164>
    1670:	2f 2d       	mov	r18, r15
    1672:	07 c0       	rjmp	.+14     	; 0x1682 <vfprintf+0x16a>
    1674:	27 e0       	ldi	r18, 0x07	; 7
    1676:	7c e3       	ldi	r23, 0x3C	; 60
    1678:	e7 2e       	mov	r14, r23
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <vfprintf+0x16c>
    167c:	27 e0       	ldi	r18, 0x07	; 7
    167e:	67 e0       	ldi	r22, 0x07	; 7
    1680:	f6 2e       	mov	r15, r22
    1682:	ee 24       	eor	r14, r14
    1684:	ca 01       	movw	r24, r20
    1686:	04 96       	adiw	r24, 0x04	; 4
    1688:	9d 87       	std	Y+13, r25	; 0x0d
    168a:	8c 87       	std	Y+12, r24	; 0x0c
    168c:	fa 01       	movw	r30, r20
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	a1 01       	movw	r20, r2
    1698:	0e 2d       	mov	r16, r14
    169a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__ftoa_engine>
    169e:	5c 01       	movw	r10, r24
    16a0:	c9 80       	ldd	r12, Y+1	; 0x01
    16a2:	2c 2d       	mov	r18, r12
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	39 8b       	std	Y+17, r19	; 0x11
    16a8:	28 8b       	std	Y+16, r18	; 0x10
    16aa:	c0 fe       	sbrs	r12, 0
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <vfprintf+0x19c>
    16ae:	38 89       	ldd	r19, Y+16	; 0x10
    16b0:	33 ff       	sbrs	r19, 3
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <vfprintf+0x1a8>
    16b4:	11 fd       	sbrc	r17, 1
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0x1ac>
    16b8:	12 ff       	sbrs	r17, 2
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <vfprintf+0x1b0>
    16bc:	00 e2       	ldi	r16, 0x20	; 32
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <vfprintf+0x1b2>
    16c0:	0d e2       	ldi	r16, 0x2D	; 45
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <vfprintf+0x1b2>
    16c4:	0b e2       	ldi	r16, 0x2B	; 43
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <vfprintf+0x1b2>
    16c8:	00 e0       	ldi	r16, 0x00	; 0
    16ca:	88 89       	ldd	r24, Y+16	; 0x10
    16cc:	99 89       	ldd	r25, Y+17	; 0x11
    16ce:	8c 70       	andi	r24, 0x0C	; 12
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <vfprintf+0x1c0>
    16d6:	3c c0       	rjmp	.+120    	; 0x1750 <vfprintf+0x238>
    16d8:	00 23       	and	r16, r16
    16da:	11 f0       	breq	.+4      	; 0x16e0 <vfprintf+0x1c8>
    16dc:	84 e0       	ldi	r24, 0x04	; 4
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <vfprintf+0x1ca>
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	8d 15       	cp	r24, r13
    16e4:	58 f4       	brcc	.+22     	; 0x16fc <vfprintf+0x1e4>
    16e6:	d8 1a       	sub	r13, r24
    16e8:	13 fd       	sbrc	r17, 3
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <vfprintf+0x1e6>
    16ec:	80 e2       	ldi	r24, 0x20	; 32
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	b4 01       	movw	r22, r8
    16f2:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    16f6:	da 94       	dec	r13
    16f8:	c9 f7       	brne	.-14     	; 0x16ec <vfprintf+0x1d4>
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <vfprintf+0x1e6>
    16fc:	dd 24       	eor	r13, r13
    16fe:	00 23       	and	r16, r16
    1700:	29 f0       	breq	.+10     	; 0x170c <vfprintf+0x1f4>
    1702:	80 2f       	mov	r24, r16
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b4 01       	movw	r22, r8
    1708:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    170c:	88 89       	ldd	r24, Y+16	; 0x10
    170e:	83 fd       	sbrc	r24, 3
    1710:	05 c0       	rjmp	.+10     	; 0x171c <vfprintf+0x204>
    1712:	3c e6       	ldi	r19, 0x6C	; 108
    1714:	e3 2e       	mov	r14, r19
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f3 2e       	mov	r15, r19
    171a:	11 c0       	rjmp	.+34     	; 0x173e <vfprintf+0x226>
    171c:	28 e6       	ldi	r18, 0x68	; 104
    171e:	e2 2e       	mov	r14, r18
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	f2 2e       	mov	r15, r18
    1724:	0c c0       	rjmp	.+24     	; 0x173e <vfprintf+0x226>
    1726:	01 15       	cp	r16, r1
    1728:	11 05       	cpc	r17, r1
    172a:	09 f0       	breq	.+2      	; 0x172e <vfprintf+0x216>
    172c:	80 52       	subi	r24, 0x20	; 32
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	b4 01       	movw	r22, r8
    1732:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1736:	08 94       	sec
    1738:	e1 1c       	adc	r14, r1
    173a:	f1 1c       	adc	r15, r1
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <vfprintf+0x22e>
    173e:	01 2f       	mov	r16, r17
    1740:	10 e0       	ldi	r17, 0x00	; 0
    1742:	00 71       	andi	r16, 0x10	; 16
    1744:	10 70       	andi	r17, 0x00	; 0
    1746:	f7 01       	movw	r30, r14
    1748:	84 91       	lpm	r24, Z
    174a:	88 23       	and	r24, r24
    174c:	61 f7       	brne	.-40     	; 0x1726 <vfprintf+0x20e>
    174e:	63 c2       	rjmp	.+1222   	; 0x1c16 <vfprintf+0x6fe>
    1750:	17 ff       	sbrs	r17, 7
    1752:	0e c0       	rjmp	.+28     	; 0x1770 <vfprintf+0x258>
    1754:	ea 0c       	add	r14, r10
    1756:	f8 89       	ldd	r31, Y+16	; 0x10
    1758:	f4 ff       	sbrs	r31, 4
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <vfprintf+0x24c>
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	81 33       	cpi	r24, 0x31	; 49
    1760:	09 f4       	brne	.+2      	; 0x1764 <vfprintf+0x24c>
    1762:	ea 94       	dec	r14
    1764:	1e 14       	cp	r1, r14
    1766:	4c f5       	brge	.+82     	; 0x17ba <vfprintf+0x2a2>
    1768:	28 e0       	ldi	r18, 0x08	; 8
    176a:	2e 15       	cp	r18, r14
    176c:	48 f1       	brcs	.+82     	; 0x17c0 <vfprintf+0x2a8>
    176e:	2c c0       	rjmp	.+88     	; 0x17c8 <vfprintf+0x2b0>
    1770:	16 fd       	sbrc	r17, 6
    1772:	2a c0       	rjmp	.+84     	; 0x17c8 <vfprintf+0x2b0>
    1774:	8f 2d       	mov	r24, r15
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	8a 15       	cp	r24, r10
    177a:	9b 05       	cpc	r25, r11
    177c:	44 f0       	brlt	.+16     	; 0x178e <vfprintf+0x276>
    177e:	3c ef       	ldi	r19, 0xFC	; 252
    1780:	a3 16       	cp	r10, r19
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	b3 06       	cpc	r11, r19
    1786:	1c f0       	brlt	.+6      	; 0x178e <vfprintf+0x276>
    1788:	10 68       	ori	r17, 0x80	; 128
    178a:	01 c0       	rjmp	.+2      	; 0x178e <vfprintf+0x276>
    178c:	fa 94       	dec	r15
    178e:	ff 20       	and	r15, r15
    1790:	49 f0       	breq	.+18     	; 0x17a4 <vfprintf+0x28c>
    1792:	e2 e0       	ldi	r30, 0x02	; 2
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	ec 0f       	add	r30, r28
    1798:	fd 1f       	adc	r31, r29
    179a:	ef 0d       	add	r30, r15
    179c:	f1 1d       	adc	r31, r1
    179e:	80 81       	ld	r24, Z
    17a0:	80 33       	cpi	r24, 0x30	; 48
    17a2:	a1 f3       	breq	.-24     	; 0x178c <vfprintf+0x274>
    17a4:	17 ff       	sbrs	r17, 7
    17a6:	10 c0       	rjmp	.+32     	; 0x17c8 <vfprintf+0x2b0>
    17a8:	ef 2c       	mov	r14, r15
    17aa:	e3 94       	inc	r14
    17ac:	8f 2d       	mov	r24, r15
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a8 16       	cp	r10, r24
    17b2:	b9 06       	cpc	r11, r25
    17b4:	44 f4       	brge	.+16     	; 0x17c6 <vfprintf+0x2ae>
    17b6:	fa 18       	sub	r15, r10
    17b8:	07 c0       	rjmp	.+14     	; 0x17c8 <vfprintf+0x2b0>
    17ba:	ee 24       	eor	r14, r14
    17bc:	e3 94       	inc	r14
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <vfprintf+0x2b0>
    17c0:	98 e0       	ldi	r25, 0x08	; 8
    17c2:	e9 2e       	mov	r14, r25
    17c4:	01 c0       	rjmp	.+2      	; 0x17c8 <vfprintf+0x2b0>
    17c6:	ff 24       	eor	r15, r15
    17c8:	17 ff       	sbrs	r17, 7
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <vfprintf+0x2c2>
    17cc:	1a 14       	cp	r1, r10
    17ce:	1b 04       	cpc	r1, r11
    17d0:	3c f4       	brge	.+14     	; 0x17e0 <vfprintf+0x2c8>
    17d2:	95 01       	movw	r18, r10
    17d4:	2f 5f       	subi	r18, 0xFF	; 255
    17d6:	3f 4f       	sbci	r19, 0xFF	; 255
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <vfprintf+0x2cc>
    17da:	25 e0       	ldi	r18, 0x05	; 5
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0x2cc>
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	00 23       	and	r16, r16
    17e6:	11 f0       	breq	.+4      	; 0x17ec <vfprintf+0x2d4>
    17e8:	2f 5f       	subi	r18, 0xFF	; 255
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	ff 20       	and	r15, r15
    17ee:	29 f0       	breq	.+10     	; 0x17fa <vfprintf+0x2e2>
    17f0:	8f 2d       	mov	r24, r15
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	28 0f       	add	r18, r24
    17f8:	39 1f       	adc	r19, r25
    17fa:	8d 2d       	mov	r24, r13
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	28 17       	cp	r18, r24
    1800:	39 07       	cpc	r19, r25
    1802:	14 f4       	brge	.+4      	; 0x1808 <vfprintf+0x2f0>
    1804:	d2 1a       	sub	r13, r18
    1806:	01 c0       	rjmp	.+2      	; 0x180a <vfprintf+0x2f2>
    1808:	dd 24       	eor	r13, r13
    180a:	61 2e       	mov	r6, r17
    180c:	77 24       	eor	r7, r7
    180e:	c3 01       	movw	r24, r6
    1810:	89 70       	andi	r24, 0x09	; 9
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	49 f4       	brne	.+18     	; 0x182a <vfprintf+0x312>
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0x30e>
    181a:	80 e2       	ldi	r24, 0x20	; 32
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	b4 01       	movw	r22, r8
    1820:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1824:	da 94       	dec	r13
    1826:	dd 20       	and	r13, r13
    1828:	c1 f7       	brne	.-16     	; 0x181a <vfprintf+0x302>
    182a:	00 23       	and	r16, r16
    182c:	29 f0       	breq	.+10     	; 0x1838 <vfprintf+0x320>
    182e:	80 2f       	mov	r24, r16
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	b4 01       	movw	r22, r8
    1834:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1838:	63 fc       	sbrc	r6, 3
    183a:	09 c0       	rjmp	.+18     	; 0x184e <vfprintf+0x336>
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x332>
    183e:	80 e3       	ldi	r24, 0x30	; 48
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	b4 01       	movw	r22, r8
    1844:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1848:	da 94       	dec	r13
    184a:	dd 20       	and	r13, r13
    184c:	c1 f7       	brne	.-16     	; 0x183e <vfprintf+0x326>
    184e:	17 ff       	sbrs	r17, 7
    1850:	48 c0       	rjmp	.+144    	; 0x18e2 <vfprintf+0x3ca>
    1852:	85 01       	movw	r16, r10
    1854:	b7 fe       	sbrs	r11, 7
    1856:	02 c0       	rjmp	.+4      	; 0x185c <vfprintf+0x344>
    1858:	00 e0       	ldi	r16, 0x00	; 0
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	66 24       	eor	r6, r6
    185e:	77 24       	eor	r7, r7
    1860:	95 01       	movw	r18, r10
    1862:	2e 19       	sub	r18, r14
    1864:	31 09       	sbc	r19, r1
    1866:	3b 8b       	std	Y+19, r19	; 0x13
    1868:	2a 8b       	std	Y+18, r18	; 0x12
    186a:	25 01       	movw	r4, r10
    186c:	40 1a       	sub	r4, r16
    186e:	51 0a       	sbc	r5, r17
    1870:	42 0c       	add	r4, r2
    1872:	53 1c       	adc	r5, r3
    1874:	6f 2d       	mov	r22, r15
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	ee 24       	eor	r14, r14
    187a:	ff 24       	eor	r15, r15
    187c:	e6 1a       	sub	r14, r22
    187e:	f7 0a       	sbc	r15, r23
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	0f 3f       	cpi	r16, 0xFF	; 255
    1884:	13 07       	cpc	r17, r19
    1886:	29 f4       	brne	.+10     	; 0x1892 <vfprintf+0x37a>
    1888:	8e e2       	ldi	r24, 0x2E	; 46
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b4 01       	movw	r22, r8
    188e:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1892:	a0 16       	cp	r10, r16
    1894:	b1 06       	cpc	r11, r17
    1896:	54 f0       	brlt	.+20     	; 0x18ac <vfprintf+0x394>
    1898:	2a 89       	ldd	r18, Y+18	; 0x12
    189a:	3b 89       	ldd	r19, Y+19	; 0x13
    189c:	20 17       	cp	r18, r16
    189e:	31 07       	cpc	r19, r17
    18a0:	2c f4       	brge	.+10     	; 0x18ac <vfprintf+0x394>
    18a2:	f2 01       	movw	r30, r4
    18a4:	e6 0d       	add	r30, r6
    18a6:	f7 1d       	adc	r31, r7
    18a8:	81 81       	ldd	r24, Z+1	; 0x01
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <vfprintf+0x396>
    18ac:	80 e3       	ldi	r24, 0x30	; 48
    18ae:	01 50       	subi	r16, 0x01	; 1
    18b0:	10 40       	sbci	r17, 0x00	; 0
    18b2:	08 94       	sec
    18b4:	61 1c       	adc	r6, r1
    18b6:	71 1c       	adc	r7, r1
    18b8:	0e 15       	cp	r16, r14
    18ba:	1f 05       	cpc	r17, r15
    18bc:	2c f0       	brlt	.+10     	; 0x18c8 <vfprintf+0x3b0>
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	b4 01       	movw	r22, r8
    18c2:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    18c6:	dc cf       	rjmp	.-72     	; 0x1880 <vfprintf+0x368>
    18c8:	0a 15       	cp	r16, r10
    18ca:	1b 05       	cpc	r17, r11
    18cc:	41 f4       	brne	.+16     	; 0x18de <vfprintf+0x3c6>
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	96 33       	cpi	r25, 0x36	; 54
    18d2:	20 f4       	brcc	.+8      	; 0x18dc <vfprintf+0x3c4>
    18d4:	95 33       	cpi	r25, 0x35	; 53
    18d6:	19 f4       	brne	.+6      	; 0x18de <vfprintf+0x3c6>
    18d8:	38 89       	ldd	r19, Y+16	; 0x10
    18da:	34 ff       	sbrs	r19, 4
    18dc:	81 e3       	ldi	r24, 0x31	; 49
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	49 c0       	rjmp	.+146    	; 0x1974 <vfprintf+0x45c>
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	81 33       	cpi	r24, 0x31	; 49
    18e6:	11 f0       	breq	.+4      	; 0x18ec <vfprintf+0x3d4>
    18e8:	9f ee       	ldi	r25, 0xEF	; 239
    18ea:	c9 22       	and	r12, r25
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	b4 01       	movw	r22, r8
    18f0:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    18f4:	ff 20       	and	r15, r15
    18f6:	89 f0       	breq	.+34     	; 0x191a <vfprintf+0x402>
    18f8:	8e e2       	ldi	r24, 0x2E	; 46
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	b4 01       	movw	r22, r8
    18fe:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1902:	12 e0       	ldi	r17, 0x02	; 2
    1904:	f1 01       	movw	r30, r2
    1906:	e1 0f       	add	r30, r17
    1908:	f1 1d       	adc	r31, r1
    190a:	1f 5f       	subi	r17, 0xFF	; 255
    190c:	80 81       	ld	r24, Z
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	b4 01       	movw	r22, r8
    1912:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1916:	fa 94       	dec	r15
    1918:	a9 f7       	brne	.-22     	; 0x1904 <vfprintf+0x3ec>
    191a:	64 fe       	sbrs	r6, 4
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x40c>
    191e:	85 e4       	ldi	r24, 0x45	; 69
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x410>
    1924:	85 e6       	ldi	r24, 0x65	; 101
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	b4 01       	movw	r22, r8
    192a:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    192e:	b7 fc       	sbrc	r11, 7
    1930:	05 c0       	rjmp	.+10     	; 0x193c <vfprintf+0x424>
    1932:	a1 14       	cp	r10, r1
    1934:	b1 04       	cpc	r11, r1
    1936:	41 f4       	brne	.+16     	; 0x1948 <vfprintf+0x430>
    1938:	c4 fe       	sbrs	r12, 4
    193a:	06 c0       	rjmp	.+12     	; 0x1948 <vfprintf+0x430>
    193c:	b0 94       	com	r11
    193e:	a1 94       	neg	r10
    1940:	b1 08       	sbc	r11, r1
    1942:	b3 94       	inc	r11
    1944:	8d e2       	ldi	r24, 0x2D	; 45
    1946:	01 c0       	rjmp	.+2      	; 0x194a <vfprintf+0x432>
    1948:	8b e2       	ldi	r24, 0x2B	; 43
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	b4 01       	movw	r22, r8
    194e:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1952:	80 e3       	ldi	r24, 0x30	; 48
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <vfprintf+0x448>
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	e6 ef       	ldi	r30, 0xF6	; 246
    195a:	ff ef       	ldi	r31, 0xFF	; 255
    195c:	ae 0e       	add	r10, r30
    195e:	bf 1e       	adc	r11, r31
    1960:	fa e0       	ldi	r31, 0x0A	; 10
    1962:	af 16       	cp	r10, r31
    1964:	b1 04       	cpc	r11, r1
    1966:	bc f7       	brge	.-18     	; 0x1956 <vfprintf+0x43e>
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	b4 01       	movw	r22, r8
    196c:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1970:	c5 01       	movw	r24, r10
    1972:	c0 96       	adiw	r24, 0x30	; 48
    1974:	b4 01       	movw	r22, r8
    1976:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    197a:	4d c1       	rjmp	.+666    	; 0x1c16 <vfprintf+0x6fe>
    197c:	83 36       	cpi	r24, 0x63	; 99
    197e:	31 f0       	breq	.+12     	; 0x198c <vfprintf+0x474>
    1980:	83 37       	cpi	r24, 0x73	; 115
    1982:	89 f0       	breq	.+34     	; 0x19a6 <vfprintf+0x48e>
    1984:	83 35       	cpi	r24, 0x53	; 83
    1986:	09 f0       	breq	.+2      	; 0x198a <vfprintf+0x472>
    1988:	59 c0       	rjmp	.+178    	; 0x1a3c <vfprintf+0x524>
    198a:	22 c0       	rjmp	.+68     	; 0x19d0 <vfprintf+0x4b8>
    198c:	9a 01       	movw	r18, r20
    198e:	2e 5f       	subi	r18, 0xFE	; 254
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	3d 87       	std	Y+13, r19	; 0x0d
    1994:	2c 87       	std	Y+12, r18	; 0x0c
    1996:	fa 01       	movw	r30, r20
    1998:	80 81       	ld	r24, Z
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	e8 2e       	mov	r14, r24
    19a0:	f1 2c       	mov	r15, r1
    19a2:	51 01       	movw	r10, r2
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <vfprintf+0x4b4>
    19a6:	9a 01       	movw	r18, r20
    19a8:	2e 5f       	subi	r18, 0xFE	; 254
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	3d 87       	std	Y+13, r19	; 0x0d
    19ae:	2c 87       	std	Y+12, r18	; 0x0c
    19b0:	fa 01       	movw	r30, r20
    19b2:	a0 80       	ld	r10, Z
    19b4:	b1 80       	ldd	r11, Z+1	; 0x01
    19b6:	16 ff       	sbrs	r17, 6
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <vfprintf+0x4a8>
    19ba:	6f 2d       	mov	r22, r15
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <vfprintf+0x4ac>
    19c0:	6f ef       	ldi	r22, 0xFF	; 255
    19c2:	7f ef       	ldi	r23, 0xFF	; 255
    19c4:	c5 01       	movw	r24, r10
    19c6:	0e 94 0a 11 	call	0x2214	; 0x2214 <strnlen>
    19ca:	7c 01       	movw	r14, r24
    19cc:	1f 77       	andi	r17, 0x7F	; 127
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <vfprintf+0x4e0>
    19d0:	9a 01       	movw	r18, r20
    19d2:	2e 5f       	subi	r18, 0xFE	; 254
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	3d 87       	std	Y+13, r19	; 0x0d
    19d8:	2c 87       	std	Y+12, r18	; 0x0c
    19da:	fa 01       	movw	r30, r20
    19dc:	a0 80       	ld	r10, Z
    19de:	b1 80       	ldd	r11, Z+1	; 0x01
    19e0:	16 ff       	sbrs	r17, 6
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <vfprintf+0x4d2>
    19e4:	6f 2d       	mov	r22, r15
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <vfprintf+0x4d6>
    19ea:	6f ef       	ldi	r22, 0xFF	; 255
    19ec:	7f ef       	ldi	r23, 0xFF	; 255
    19ee:	c5 01       	movw	r24, r10
    19f0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <strnlen_P>
    19f4:	7c 01       	movw	r14, r24
    19f6:	10 68       	ori	r17, 0x80	; 128
    19f8:	13 fd       	sbrc	r17, 3
    19fa:	1c c0       	rjmp	.+56     	; 0x1a34 <vfprintf+0x51c>
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0x4f2>
    19fe:	80 e2       	ldi	r24, 0x20	; 32
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	b4 01       	movw	r22, r8
    1a04:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1a08:	da 94       	dec	r13
    1a0a:	8d 2d       	mov	r24, r13
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	e8 16       	cp	r14, r24
    1a10:	f9 06       	cpc	r15, r25
    1a12:	a8 f3       	brcs	.-22     	; 0x19fe <vfprintf+0x4e6>
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <vfprintf+0x51c>
    1a16:	f5 01       	movw	r30, r10
    1a18:	17 fd       	sbrc	r17, 7
    1a1a:	85 91       	lpm	r24, Z+
    1a1c:	17 ff       	sbrs	r17, 7
    1a1e:	81 91       	ld	r24, Z+
    1a20:	5f 01       	movw	r10, r30
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	b4 01       	movw	r22, r8
    1a26:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1a2a:	d1 10       	cpse	r13, r1
    1a2c:	da 94       	dec	r13
    1a2e:	08 94       	sec
    1a30:	e1 08       	sbc	r14, r1
    1a32:	f1 08       	sbc	r15, r1
    1a34:	e1 14       	cp	r14, r1
    1a36:	f1 04       	cpc	r15, r1
    1a38:	71 f7       	brne	.-36     	; 0x1a16 <vfprintf+0x4fe>
    1a3a:	ed c0       	rjmp	.+474    	; 0x1c16 <vfprintf+0x6fe>
    1a3c:	84 36       	cpi	r24, 0x64	; 100
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <vfprintf+0x52c>
    1a40:	89 36       	cpi	r24, 0x69	; 105
    1a42:	71 f5       	brne	.+92     	; 0x1aa0 <vfprintf+0x588>
    1a44:	9a 01       	movw	r18, r20
    1a46:	17 ff       	sbrs	r17, 7
    1a48:	0a c0       	rjmp	.+20     	; 0x1a5e <vfprintf+0x546>
    1a4a:	2c 5f       	subi	r18, 0xFC	; 252
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	3d 87       	std	Y+13, r19	; 0x0d
    1a50:	2c 87       	std	Y+12, r18	; 0x0c
    1a52:	fa 01       	movw	r30, r20
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	a2 81       	ldd	r26, Z+2	; 0x02
    1a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <vfprintf+0x55c>
    1a5e:	2e 5f       	subi	r18, 0xFE	; 254
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	3d 87       	std	Y+13, r19	; 0x0d
    1a64:	2c 87       	std	Y+12, r18	; 0x0c
    1a66:	fa 01       	movw	r30, r20
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	97 fd       	sbrc	r25, 7
    1a70:	a0 95       	com	r26
    1a72:	ba 2f       	mov	r27, r26
    1a74:	01 2f       	mov	r16, r17
    1a76:	0f 76       	andi	r16, 0x6F	; 111
    1a78:	b7 ff       	sbrs	r27, 7
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <vfprintf+0x574>
    1a7c:	b0 95       	com	r27
    1a7e:	a0 95       	com	r26
    1a80:	90 95       	com	r25
    1a82:	81 95       	neg	r24
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	af 4f       	sbci	r26, 0xFF	; 255
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	00 68       	ori	r16, 0x80	; 128
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	a1 01       	movw	r20, r2
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	0e 94 84 11 	call	0x2308	; 0x2308 <__ultoa_invert>
    1a9a:	e8 2e       	mov	r14, r24
    1a9c:	e2 18       	sub	r14, r2
    1a9e:	41 c0       	rjmp	.+130    	; 0x1b22 <vfprintf+0x60a>
    1aa0:	85 37       	cpi	r24, 0x75	; 117
    1aa2:	21 f4       	brne	.+8      	; 0x1aac <vfprintf+0x594>
    1aa4:	1f 7e       	andi	r17, 0xEF	; 239
    1aa6:	2a e0       	ldi	r18, 0x0A	; 10
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	20 c0       	rjmp	.+64     	; 0x1aec <vfprintf+0x5d4>
    1aac:	19 7f       	andi	r17, 0xF9	; 249
    1aae:	8f 36       	cpi	r24, 0x6F	; 111
    1ab0:	a9 f0       	breq	.+42     	; 0x1adc <vfprintf+0x5c4>
    1ab2:	80 37       	cpi	r24, 0x70	; 112
    1ab4:	20 f4       	brcc	.+8      	; 0x1abe <vfprintf+0x5a6>
    1ab6:	88 35       	cpi	r24, 0x58	; 88
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <vfprintf+0x5a4>
    1aba:	b0 c0       	rjmp	.+352    	; 0x1c1c <vfprintf+0x704>
    1abc:	0b c0       	rjmp	.+22     	; 0x1ad4 <vfprintf+0x5bc>
    1abe:	80 37       	cpi	r24, 0x70	; 112
    1ac0:	21 f0       	breq	.+8      	; 0x1aca <vfprintf+0x5b2>
    1ac2:	88 37       	cpi	r24, 0x78	; 120
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <vfprintf+0x5b0>
    1ac6:	aa c0       	rjmp	.+340    	; 0x1c1c <vfprintf+0x704>
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <vfprintf+0x5b4>
    1aca:	10 61       	ori	r17, 0x10	; 16
    1acc:	14 ff       	sbrs	r17, 4
    1ace:	09 c0       	rjmp	.+18     	; 0x1ae2 <vfprintf+0x5ca>
    1ad0:	14 60       	ori	r17, 0x04	; 4
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <vfprintf+0x5ca>
    1ad4:	14 ff       	sbrs	r17, 4
    1ad6:	08 c0       	rjmp	.+16     	; 0x1ae8 <vfprintf+0x5d0>
    1ad8:	16 60       	ori	r17, 0x06	; 6
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <vfprintf+0x5d0>
    1adc:	28 e0       	ldi	r18, 0x08	; 8
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <vfprintf+0x5d4>
    1ae2:	20 e1       	ldi	r18, 0x10	; 16
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <vfprintf+0x5d4>
    1ae8:	20 e1       	ldi	r18, 0x10	; 16
    1aea:	32 e0       	ldi	r19, 0x02	; 2
    1aec:	ca 01       	movw	r24, r20
    1aee:	17 ff       	sbrs	r17, 7
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <vfprintf+0x5ec>
    1af2:	04 96       	adiw	r24, 0x04	; 4
    1af4:	9d 87       	std	Y+13, r25	; 0x0d
    1af6:	8c 87       	std	Y+12, r24	; 0x0c
    1af8:	fa 01       	movw	r30, r20
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	08 c0       	rjmp	.+16     	; 0x1b14 <vfprintf+0x5fc>
    1b04:	02 96       	adiw	r24, 0x02	; 2
    1b06:	9d 87       	std	Y+13, r25	; 0x0d
    1b08:	8c 87       	std	Y+12, r24	; 0x0c
    1b0a:	fa 01       	movw	r30, r20
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a1 01       	movw	r20, r2
    1b16:	0e 94 84 11 	call	0x2308	; 0x2308 <__ultoa_invert>
    1b1a:	e8 2e       	mov	r14, r24
    1b1c:	e2 18       	sub	r14, r2
    1b1e:	01 2f       	mov	r16, r17
    1b20:	0f 77       	andi	r16, 0x7F	; 127
    1b22:	06 ff       	sbrs	r16, 6
    1b24:	09 c0       	rjmp	.+18     	; 0x1b38 <vfprintf+0x620>
    1b26:	0e 7f       	andi	r16, 0xFE	; 254
    1b28:	ef 14       	cp	r14, r15
    1b2a:	30 f4       	brcc	.+12     	; 0x1b38 <vfprintf+0x620>
    1b2c:	04 ff       	sbrs	r16, 4
    1b2e:	06 c0       	rjmp	.+12     	; 0x1b3c <vfprintf+0x624>
    1b30:	02 fd       	sbrc	r16, 2
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <vfprintf+0x624>
    1b34:	0f 7e       	andi	r16, 0xEF	; 239
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <vfprintf+0x624>
    1b38:	1e 2d       	mov	r17, r14
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <vfprintf+0x626>
    1b3c:	1f 2d       	mov	r17, r15
    1b3e:	80 2f       	mov	r24, r16
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	04 ff       	sbrs	r16, 4
    1b44:	0c c0       	rjmp	.+24     	; 0x1b5e <vfprintf+0x646>
    1b46:	fe 01       	movw	r30, r28
    1b48:	ee 0d       	add	r30, r14
    1b4a:	f1 1d       	adc	r31, r1
    1b4c:	20 81       	ld	r18, Z
    1b4e:	20 33       	cpi	r18, 0x30	; 48
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <vfprintf+0x63e>
    1b52:	09 7e       	andi	r16, 0xE9	; 233
    1b54:	09 c0       	rjmp	.+18     	; 0x1b68 <vfprintf+0x650>
    1b56:	02 ff       	sbrs	r16, 2
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <vfprintf+0x64e>
    1b5a:	1e 5f       	subi	r17, 0xFE	; 254
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <vfprintf+0x650>
    1b5e:	86 78       	andi	r24, 0x86	; 134
    1b60:	90 70       	andi	r25, 0x00	; 0
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <vfprintf+0x650>
    1b66:	1f 5f       	subi	r17, 0xFF	; 255
    1b68:	a0 2e       	mov	r10, r16
    1b6a:	bb 24       	eor	r11, r11
    1b6c:	03 fd       	sbrc	r16, 3
    1b6e:	12 c0       	rjmp	.+36     	; 0x1b94 <vfprintf+0x67c>
    1b70:	00 ff       	sbrs	r16, 0
    1b72:	0d c0       	rjmp	.+26     	; 0x1b8e <vfprintf+0x676>
    1b74:	fe 2c       	mov	r15, r14
    1b76:	1d 15       	cp	r17, r13
    1b78:	50 f4       	brcc	.+20     	; 0x1b8e <vfprintf+0x676>
    1b7a:	fd 0c       	add	r15, r13
    1b7c:	f1 1a       	sub	r15, r17
    1b7e:	1d 2d       	mov	r17, r13
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <vfprintf+0x676>
    1b82:	80 e2       	ldi	r24, 0x20	; 32
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	b4 01       	movw	r22, r8
    1b88:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1b8c:	1f 5f       	subi	r17, 0xFF	; 255
    1b8e:	1d 15       	cp	r17, r13
    1b90:	c0 f3       	brcs	.-16     	; 0x1b82 <vfprintf+0x66a>
    1b92:	04 c0       	rjmp	.+8      	; 0x1b9c <vfprintf+0x684>
    1b94:	1d 15       	cp	r17, r13
    1b96:	10 f4       	brcc	.+4      	; 0x1b9c <vfprintf+0x684>
    1b98:	d1 1a       	sub	r13, r17
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfprintf+0x686>
    1b9c:	dd 24       	eor	r13, r13
    1b9e:	a4 fe       	sbrs	r10, 4
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <vfprintf+0x6a8>
    1ba2:	80 e3       	ldi	r24, 0x30	; 48
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	b4 01       	movw	r22, r8
    1ba8:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1bac:	a2 fe       	sbrs	r10, 2
    1bae:	1f c0       	rjmp	.+62     	; 0x1bee <vfprintf+0x6d6>
    1bb0:	a1 fe       	sbrs	r10, 1
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <vfprintf+0x6a2>
    1bb4:	88 e5       	ldi	r24, 0x58	; 88
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	10 c0       	rjmp	.+32     	; 0x1bda <vfprintf+0x6c2>
    1bba:	88 e7       	ldi	r24, 0x78	; 120
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <vfprintf+0x6c2>
    1bc0:	c5 01       	movw	r24, r10
    1bc2:	86 78       	andi	r24, 0x86	; 134
    1bc4:	90 70       	andi	r25, 0x00	; 0
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	91 f0       	breq	.+36     	; 0x1bee <vfprintf+0x6d6>
    1bca:	a1 fc       	sbrc	r10, 1
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <vfprintf+0x6ba>
    1bce:	80 e2       	ldi	r24, 0x20	; 32
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <vfprintf+0x6bc>
    1bd2:	8b e2       	ldi	r24, 0x2B	; 43
    1bd4:	07 fd       	sbrc	r16, 7
    1bd6:	8d e2       	ldi	r24, 0x2D	; 45
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	b4 01       	movw	r22, r8
    1bdc:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1be0:	06 c0       	rjmp	.+12     	; 0x1bee <vfprintf+0x6d6>
    1be2:	80 e3       	ldi	r24, 0x30	; 48
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	b4 01       	movw	r22, r8
    1be8:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1bec:	fa 94       	dec	r15
    1bee:	ef 14       	cp	r14, r15
    1bf0:	c0 f3       	brcs	.-16     	; 0x1be2 <vfprintf+0x6ca>
    1bf2:	ea 94       	dec	r14
    1bf4:	f1 01       	movw	r30, r2
    1bf6:	ee 0d       	add	r30, r14
    1bf8:	f1 1d       	adc	r31, r1
    1bfa:	80 81       	ld	r24, Z
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	b4 01       	movw	r22, r8
    1c00:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1c04:	ee 20       	and	r14, r14
    1c06:	a9 f7       	brne	.-22     	; 0x1bf2 <vfprintf+0x6da>
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <vfprintf+0x6fe>
    1c0a:	80 e2       	ldi	r24, 0x20	; 32
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	b4 01       	movw	r22, r8
    1c10:	0e 94 15 11 	call	0x222a	; 0x222a <fputc>
    1c14:	da 94       	dec	r13
    1c16:	dd 20       	and	r13, r13
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <vfprintf+0x6f2>
    1c1a:	8e cc       	rjmp	.-1764   	; 0x1538 <vfprintf+0x20>
    1c1c:	f4 01       	movw	r30, r8
    1c1e:	86 81       	ldd	r24, Z+6	; 0x06
    1c20:	97 81       	ldd	r25, Z+7	; 0x07
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x710>
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	9f ef       	ldi	r25, 0xFF	; 255
    1c28:	65 96       	adiw	r28, 0x15	; 21
    1c2a:	e2 e1       	ldi	r30, 0x12	; 18
    1c2c:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__epilogue_restores__>

00001c30 <__divmodhi4>:
    1c30:	97 fb       	bst	r25, 7
    1c32:	09 2e       	mov	r0, r25
    1c34:	07 26       	eor	r0, r23
    1c36:	0a d0       	rcall	.+20     	; 0x1c4c <__divmodhi4_neg1>
    1c38:	77 fd       	sbrc	r23, 7
    1c3a:	04 d0       	rcall	.+8      	; 0x1c44 <__divmodhi4_neg2>
    1c3c:	43 d0       	rcall	.+134    	; 0x1cc4 <__udivmodhi4>
    1c3e:	06 d0       	rcall	.+12     	; 0x1c4c <__divmodhi4_neg1>
    1c40:	00 20       	and	r0, r0
    1c42:	1a f4       	brpl	.+6      	; 0x1c4a <__divmodhi4_exit>

00001c44 <__divmodhi4_neg2>:
    1c44:	70 95       	com	r23
    1c46:	61 95       	neg	r22
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255

00001c4a <__divmodhi4_exit>:
    1c4a:	08 95       	ret

00001c4c <__divmodhi4_neg1>:
    1c4c:	f6 f7       	brtc	.-4      	; 0x1c4a <__divmodhi4_exit>
    1c4e:	90 95       	com	r25
    1c50:	81 95       	neg	r24
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	08 95       	ret

00001c56 <__prologue_saves__>:
    1c56:	2f 92       	push	r2
    1c58:	3f 92       	push	r3
    1c5a:	4f 92       	push	r4
    1c5c:	5f 92       	push	r5
    1c5e:	6f 92       	push	r6
    1c60:	7f 92       	push	r7
    1c62:	8f 92       	push	r8
    1c64:	9f 92       	push	r9
    1c66:	af 92       	push	r10
    1c68:	bf 92       	push	r11
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	ca 1b       	sub	r28, r26
    1c80:	db 0b       	sbc	r29, r27
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	09 94       	ijmp

00001c8e <__epilogue_restores__>:
    1c8e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c90:	39 88       	ldd	r3, Y+17	; 0x11
    1c92:	48 88       	ldd	r4, Y+16	; 0x10
    1c94:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c96:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c98:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ca2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ca4:	df 80       	ldd	r13, Y+7	; 0x07
    1ca6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca8:	fd 80       	ldd	r15, Y+5	; 0x05
    1caa:	0c 81       	ldd	r16, Y+4	; 0x04
    1cac:	1b 81       	ldd	r17, Y+3	; 0x03
    1cae:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb2:	ce 0f       	add	r28, r30
    1cb4:	d1 1d       	adc	r29, r1
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	ed 01       	movw	r28, r26
    1cc2:	08 95       	ret

00001cc4 <__udivmodhi4>:
    1cc4:	aa 1b       	sub	r26, r26
    1cc6:	bb 1b       	sub	r27, r27
    1cc8:	51 e1       	ldi	r21, 0x11	; 17
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <__udivmodhi4_ep>

00001ccc <__udivmodhi4_loop>:
    1ccc:	aa 1f       	adc	r26, r26
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	a6 17       	cp	r26, r22
    1cd2:	b7 07       	cpc	r27, r23
    1cd4:	10 f0       	brcs	.+4      	; 0x1cda <__udivmodhi4_ep>
    1cd6:	a6 1b       	sub	r26, r22
    1cd8:	b7 0b       	sbc	r27, r23

00001cda <__udivmodhi4_ep>:
    1cda:	88 1f       	adc	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	5a 95       	dec	r21
    1ce0:	a9 f7       	brne	.-22     	; 0x1ccc <__udivmodhi4_loop>
    1ce2:	80 95       	com	r24
    1ce4:	90 95       	com	r25
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	08 95       	ret

00001cec <strtod>:
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ec e7       	ldi	r30, 0x7C	; 124
    1cf2:	fe e0       	ldi	r31, 0x0E	; 14
    1cf4:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__prologue_saves__+0x8>
    1cf8:	5b 01       	movw	r10, r22
    1cfa:	61 15       	cp	r22, r1
    1cfc:	71 05       	cpc	r23, r1
    1cfe:	21 f0       	breq	.+8      	; 0x1d08 <strtod+0x1c>
    1d00:	db 01       	movw	r26, r22
    1d02:	8c 93       	st	X, r24
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	9c 93       	st	X, r25
    1d08:	7c 01       	movw	r14, r24
    1d0a:	e7 01       	movw	r28, r14
    1d0c:	08 94       	sec
    1d0e:	e1 1c       	adc	r14, r1
    1d10:	f1 1c       	adc	r15, r1
    1d12:	08 81       	ld	r16, Y
    1d14:	67 01       	movw	r12, r14
    1d16:	80 2f       	mov	r24, r16
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 bd 10 	call	0x217a	; 0x217a <isspace>
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	a1 f7       	brne	.-24     	; 0x1d0a <strtod+0x1e>
    1d22:	0d 32       	cpi	r16, 0x2D	; 45
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <strtod+0x4a>
    1d26:	09 81       	ldd	r16, Y+1	; 0x01
    1d28:	42 e0       	ldi	r20, 0x02	; 2
    1d2a:	c4 2e       	mov	r12, r20
    1d2c:	d1 2c       	mov	r13, r1
    1d2e:	cc 0e       	add	r12, r28
    1d30:	dd 1e       	adc	r13, r29
    1d32:	11 e0       	ldi	r17, 0x01	; 1
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <strtod+0x5c>
    1d36:	0b 32       	cpi	r16, 0x2B	; 43
    1d38:	31 f4       	brne	.+12     	; 0x1d46 <strtod+0x5a>
    1d3a:	09 81       	ldd	r16, Y+1	; 0x01
    1d3c:	32 e0       	ldi	r19, 0x02	; 2
    1d3e:	c3 2e       	mov	r12, r19
    1d40:	d1 2c       	mov	r13, r1
    1d42:	cc 0e       	add	r12, r28
    1d44:	dd 1e       	adc	r13, r29
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	e6 01       	movw	r28, r12
    1d4a:	21 97       	sbiw	r28, 0x01	; 1
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	60 e7       	ldi	r22, 0x70	; 112
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	43 e0       	ldi	r20, 0x03	; 3
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	0e 94 c5 10 	call	0x218a	; 0x218a <strncasecmp_P>
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	d1 f4       	brne	.+52     	; 0x1d92 <strtod+0xa6>
    1d5e:	e6 01       	movw	r28, r12
    1d60:	22 96       	adiw	r28, 0x02	; 2
    1d62:	ce 01       	movw	r24, r28
    1d64:	63 e7       	ldi	r22, 0x73	; 115
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	45 e0       	ldi	r20, 0x05	; 5
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	0e 94 c5 10 	call	0x218a	; 0x218a <strncasecmp_P>
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	11 f4       	brne	.+4      	; 0x1d78 <strtod+0x8c>
    1d74:	e6 01       	movw	r28, r12
    1d76:	27 96       	adiw	r28, 0x07	; 7
    1d78:	a1 14       	cp	r10, r1
    1d7a:	b1 04       	cpc	r11, r1
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <strtod+0x98>
    1d7e:	f5 01       	movw	r30, r10
    1d80:	d1 83       	std	Z+1, r29	; 0x01
    1d82:	c0 83       	st	Z, r28
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	90 e8       	ldi	r25, 0x80	; 128
    1d8a:	11 23       	and	r17, r17
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <strtod+0xa4>
    1d8e:	0a c1       	rjmp	.+532    	; 0x1fa4 <strtod+0x2b8>
    1d90:	04 c1       	rjmp	.+520    	; 0x1f9a <strtod+0x2ae>
    1d92:	ce 01       	movw	r24, r28
    1d94:	68 e7       	ldi	r22, 0x78	; 120
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	43 e0       	ldi	r20, 0x03	; 3
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	0e 94 c5 10 	call	0x218a	; 0x218a <strncasecmp_P>
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	59 f4       	brne	.+22     	; 0x1dba <strtod+0xce>
    1da4:	a1 14       	cp	r10, r1
    1da6:	b1 04       	cpc	r11, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <strtod+0xc0>
    1daa:	f9 c0       	rjmp	.+498    	; 0x1f9e <strtod+0x2b2>
    1dac:	c6 01       	movw	r24, r12
    1dae:	02 96       	adiw	r24, 0x02	; 2
    1db0:	d5 01       	movw	r26, r10
    1db2:	11 96       	adiw	r26, 0x01	; 1
    1db4:	9c 93       	st	X, r25
    1db6:	8e 93       	st	-X, r24
    1db8:	f2 c0       	rjmp	.+484    	; 0x1f9e <strtod+0x2b2>
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	ba 01       	movw	r22, r20
    1dc0:	88 24       	eor	r8, r8
    1dc2:	99 24       	eor	r9, r9
    1dc4:	00 53       	subi	r16, 0x30	; 48
    1dc6:	0a 30       	cpi	r16, 0x0A	; 10
    1dc8:	90 f5       	brcc	.+100    	; 0x1e2e <strtod+0x142>
    1dca:	12 60       	ori	r17, 0x02	; 2
    1dcc:	21 2f       	mov	r18, r17
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	c9 01       	movw	r24, r18
    1dd2:	88 70       	andi	r24, 0x08	; 8
    1dd4:	90 70       	andi	r25, 0x00	; 0
    1dd6:	12 ff       	sbrs	r17, 2
    1dd8:	06 c0       	rjmp	.+12     	; 0x1de6 <strtod+0xfa>
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f5       	brne	.+90     	; 0x1e38 <strtod+0x14c>
    1dde:	08 94       	sec
    1de0:	81 1c       	adc	r8, r1
    1de2:	91 1c       	adc	r9, r1
    1de4:	29 c0       	rjmp	.+82     	; 0x1e38 <strtod+0x14c>
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <strtod+0x104>
    1dea:	08 94       	sec
    1dec:	81 08       	sbc	r8, r1
    1dee:	91 08       	sbc	r9, r1
    1df0:	db 01       	movw	r26, r22
    1df2:	ca 01       	movw	r24, r20
    1df4:	d2 e0       	ldi	r29, 0x02	; 2
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	aa 1f       	adc	r26, r26
    1dfc:	bb 1f       	adc	r27, r27
    1dfe:	da 95       	dec	r29
    1e00:	d1 f7       	brne	.-12     	; 0x1df6 <strtod+0x10a>
    1e02:	48 0f       	add	r20, r24
    1e04:	59 1f       	adc	r21, r25
    1e06:	6a 1f       	adc	r22, r26
    1e08:	7b 1f       	adc	r23, r27
    1e0a:	44 0f       	add	r20, r20
    1e0c:	55 1f       	adc	r21, r21
    1e0e:	66 1f       	adc	r22, r22
    1e10:	77 1f       	adc	r23, r23
    1e12:	40 0f       	add	r20, r16
    1e14:	51 1d       	adc	r21, r1
    1e16:	61 1d       	adc	r22, r1
    1e18:	71 1d       	adc	r23, r1
    1e1a:	48 39       	cpi	r20, 0x98	; 152
    1e1c:	b9 e9       	ldi	r27, 0x99	; 153
    1e1e:	5b 07       	cpc	r21, r27
    1e20:	b9 e9       	ldi	r27, 0x99	; 153
    1e22:	6b 07       	cpc	r22, r27
    1e24:	b9 e1       	ldi	r27, 0x19	; 25
    1e26:	7b 07       	cpc	r23, r27
    1e28:	38 f0       	brcs	.+14     	; 0x1e38 <strtod+0x14c>
    1e2a:	14 60       	ori	r17, 0x04	; 4
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <strtod+0x14c>
    1e2e:	0e 3f       	cpi	r16, 0xFE	; 254
    1e30:	39 f4       	brne	.+14     	; 0x1e40 <strtod+0x154>
    1e32:	13 fd       	sbrc	r17, 3
    1e34:	43 c0       	rjmp	.+134    	; 0x1ebc <strtod+0x1d0>
    1e36:	18 60       	ori	r17, 0x08	; 8
    1e38:	f6 01       	movw	r30, r12
    1e3a:	01 91       	ld	r16, Z+
    1e3c:	6f 01       	movw	r12, r30
    1e3e:	c2 cf       	rjmp	.-124    	; 0x1dc4 <strtod+0xd8>
    1e40:	05 33       	cpi	r16, 0x35	; 53
    1e42:	11 f0       	breq	.+4      	; 0x1e48 <strtod+0x15c>
    1e44:	05 31       	cpi	r16, 0x15	; 21
    1e46:	d1 f5       	brne	.+116    	; 0x1ebc <strtod+0x1d0>
    1e48:	d6 01       	movw	r26, r12
    1e4a:	ec 91       	ld	r30, X
    1e4c:	ed 32       	cpi	r30, 0x2D	; 45
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <strtod+0x168>
    1e50:	10 61       	ori	r17, 0x10	; 16
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <strtod+0x178>
    1e54:	eb 32       	cpi	r30, 0x2B	; 43
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <strtod+0x176>
    1e58:	c6 01       	movw	r24, r12
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	21 e0       	ldi	r18, 0x01	; 1
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	08 c0       	rjmp	.+16     	; 0x1e72 <strtod+0x186>
    1e62:	d6 01       	movw	r26, r12
    1e64:	11 96       	adiw	r26, 0x01	; 1
    1e66:	ec 91       	ld	r30, X
    1e68:	11 97       	sbiw	r26, 0x01	; 1
    1e6a:	c6 01       	movw	r24, r12
    1e6c:	02 96       	adiw	r24, 0x02	; 2
    1e6e:	22 e0       	ldi	r18, 0x02	; 2
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	e0 53       	subi	r30, 0x30	; 48
    1e74:	ea 30       	cpi	r30, 0x0A	; 10
    1e76:	20 f0       	brcs	.+8      	; 0x1e80 <strtod+0x194>
    1e78:	6c 01       	movw	r12, r24
    1e7a:	c2 1a       	sub	r12, r18
    1e7c:	d3 0a       	sbc	r13, r19
    1e7e:	1e c0       	rjmp	.+60     	; 0x1ebc <strtod+0x1d0>
    1e80:	dc 01       	movw	r26, r24
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	fc e0       	ldi	r31, 0x0C	; 12
    1e88:	20 38       	cpi	r18, 0x80	; 128
    1e8a:	3f 07       	cpc	r19, r31
    1e8c:	5c f4       	brge	.+22     	; 0x1ea4 <strtod+0x1b8>
    1e8e:	c9 01       	movw	r24, r18
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	28 0f       	add	r18, r24
    1e9a:	39 1f       	adc	r19, r25
    1e9c:	22 0f       	add	r18, r18
    1e9e:	33 1f       	adc	r19, r19
    1ea0:	2e 0f       	add	r18, r30
    1ea2:	31 1d       	adc	r19, r1
    1ea4:	ed 91       	ld	r30, X+
    1ea6:	e0 53       	subi	r30, 0x30	; 48
    1ea8:	6d 01       	movw	r12, r26
    1eaa:	ea 30       	cpi	r30, 0x0A	; 10
    1eac:	60 f3       	brcs	.-40     	; 0x1e86 <strtod+0x19a>
    1eae:	14 ff       	sbrs	r17, 4
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <strtod+0x1cc>
    1eb2:	30 95       	com	r19
    1eb4:	21 95       	neg	r18
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	82 0e       	add	r8, r18
    1eba:	93 1e       	adc	r9, r19
    1ebc:	c1 2f       	mov	r28, r17
    1ebe:	d0 e0       	ldi	r29, 0x00	; 0
    1ec0:	11 ff       	sbrs	r17, 1
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <strtod+0x1e8>
    1ec4:	a1 14       	cp	r10, r1
    1ec6:	b1 04       	cpc	r11, r1
    1ec8:	29 f0       	breq	.+10     	; 0x1ed4 <strtod+0x1e8>
    1eca:	c6 01       	movw	r24, r12
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	d5 01       	movw	r26, r10
    1ed0:	8d 93       	st	X+, r24
    1ed2:	9c 93       	st	X, r25
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	ba 01       	movw	r22, r20
    1ed8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatunsisf>
    1edc:	6b 01       	movw	r12, r22
    1ede:	7c 01       	movw	r14, r24
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	83 70       	andi	r24, 0x03	; 3
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	83 30       	cpi	r24, 0x03	; 3
    1ee8:	91 05       	cpc	r25, r1
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <strtod+0x208>
    1eec:	f7 fa       	bst	r15, 7
    1eee:	f0 94       	com	r15
    1ef0:	f7 f8       	bld	r15, 7
    1ef2:	f0 94       	com	r15
    1ef4:	c7 01       	movw	r24, r14
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	0e 94 6f 09 	call	0x12de	; 0x12de <__cmpsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <strtod+0x21c>
    1f06:	44 c0       	rjmp	.+136    	; 0x1f90 <strtod+0x2a4>
    1f08:	97 fe       	sbrs	r9, 7
    1f0a:	07 c0       	rjmp	.+14     	; 0x1f1a <strtod+0x22e>
    1f0c:	90 94       	com	r9
    1f0e:	81 94       	neg	r8
    1f10:	91 08       	sbc	r9, r1
    1f12:	93 94       	inc	r9
    1f14:	c7 ea       	ldi	r28, 0xA7	; 167
    1f16:	d0 e0       	ldi	r29, 0x00	; 0
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <strtod+0x232>
    1f1a:	cf e8       	ldi	r28, 0x8F	; 143
    1f1c:	d0 e0       	ldi	r29, 0x00	; 0
    1f1e:	98 ee       	ldi	r25, 0xE8	; 232
    1f20:	69 2e       	mov	r6, r25
    1f22:	9f ef       	ldi	r25, 0xFF	; 255
    1f24:	79 2e       	mov	r7, r25
    1f26:	6c 0e       	add	r6, r28
    1f28:	7d 1e       	adc	r7, r29
    1f2a:	20 e2       	ldi	r18, 0x20	; 32
    1f2c:	a2 2e       	mov	r10, r18
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <strtod+0x264>
    1f32:	fe 01       	movw	r30, r28
    1f34:	05 91       	lpm	r16, Z+
    1f36:	15 91       	lpm	r17, Z+
    1f38:	25 91       	lpm	r18, Z+
    1f3a:	34 91       	lpm	r19, Z
    1f3c:	c7 01       	movw	r24, r14
    1f3e:	b6 01       	movw	r22, r12
    1f40:	a9 01       	movw	r20, r18
    1f42:	98 01       	movw	r18, r16
    1f44:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
    1f48:	6b 01       	movw	r12, r22
    1f4a:	7c 01       	movw	r14, r24
    1f4c:	8a 18       	sub	r8, r10
    1f4e:	9b 08       	sbc	r9, r11
    1f50:	8a 14       	cp	r8, r10
    1f52:	9b 04       	cpc	r9, r11
    1f54:	74 f7       	brge	.-36     	; 0x1f32 <strtod+0x246>
    1f56:	24 97       	sbiw	r28, 0x04	; 4
    1f58:	b5 94       	asr	r11
    1f5a:	a7 94       	ror	r10
    1f5c:	c6 15       	cp	r28, r6
    1f5e:	d7 05       	cpc	r29, r7
    1f60:	b9 f7       	brne	.-18     	; 0x1f50 <strtod+0x264>
    1f62:	c6 01       	movw	r24, r12
    1f64:	d7 01       	movw	r26, r14
    1f66:	2a 2f       	mov	r18, r26
    1f68:	22 0f       	add	r18, r18
    1f6a:	2b 2f       	mov	r18, r27
    1f6c:	22 1f       	adc	r18, r18
    1f6e:	2f 3f       	cpi	r18, 0xFF	; 255
    1f70:	49 f0       	breq	.+18     	; 0x1f84 <strtod+0x298>
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	a9 01       	movw	r20, r18
    1f7c:	0e 94 6f 09 	call	0x12de	; 0x12de <__cmpsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	31 f4       	brne	.+12     	; 0x1f90 <strtod+0x2a4>
    1f84:	82 e2       	ldi	r24, 0x22	; 34
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	90 93 c5 07 	sts	0x07C5, r25
    1f8c:	80 93 c4 07 	sts	0x07C4, r24
    1f90:	3c 2d       	mov	r19, r12
    1f92:	2d 2d       	mov	r18, r13
    1f94:	9e 2d       	mov	r25, r14
    1f96:	8f 2d       	mov	r24, r15
    1f98:	06 c0       	rjmp	.+12     	; 0x1fa6 <strtod+0x2ba>
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <strtod+0x2ba>
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	90 ec       	ldi	r25, 0xC0	; 192
    1fa4:	8f e7       	ldi	r24, 0x7F	; 127
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	ac 01       	movw	r20, r24
    1faa:	87 2f       	mov	r24, r23
    1fac:	92 2f       	mov	r25, r18
    1fae:	a5 2f       	mov	r26, r21
    1fb0:	b4 2f       	mov	r27, r20
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	ee e0       	ldi	r30, 0x0E	; 14
    1fbc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__epilogue_restores__+0x8>

00001fc0 <abort>:
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	f8 94       	cli
    1fc6:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <_exit>

00001fca <__ftoa_engine>:
    1fca:	28 30       	cpi	r18, 0x08	; 8
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <__ftoa_engine+0x6>
    1fce:	27 e0       	ldi	r18, 0x07	; 7
    1fd0:	33 27       	eor	r19, r19
    1fd2:	da 01       	movw	r26, r20
    1fd4:	99 0f       	add	r25, r25
    1fd6:	31 1d       	adc	r19, r1
    1fd8:	87 fd       	sbrc	r24, 7
    1fda:	91 60       	ori	r25, 0x01	; 1
    1fdc:	00 96       	adiw	r24, 0x00	; 0
    1fde:	61 05       	cpc	r22, r1
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	39 f4       	brne	.+14     	; 0x1ff2 <__ftoa_engine+0x28>
    1fe4:	32 60       	ori	r19, 0x02	; 2
    1fe6:	2e 5f       	subi	r18, 0xFE	; 254
    1fe8:	3d 93       	st	X+, r19
    1fea:	30 e3       	ldi	r19, 0x30	; 48
    1fec:	2a 95       	dec	r18
    1fee:	e1 f7       	brne	.-8      	; 0x1fe8 <__ftoa_engine+0x1e>
    1ff0:	08 95       	ret
    1ff2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ff4:	30 f0       	brcs	.+12     	; 0x2002 <__ftoa_engine+0x38>
    1ff6:	80 38       	cpi	r24, 0x80	; 128
    1ff8:	71 05       	cpc	r23, r1
    1ffa:	61 05       	cpc	r22, r1
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <__ftoa_engine+0x36>
    1ffe:	3c 5f       	subi	r19, 0xFC	; 252
    2000:	3c 5f       	subi	r19, 0xFC	; 252
    2002:	3d 93       	st	X+, r19
    2004:	91 30       	cpi	r25, 0x01	; 1
    2006:	08 f0       	brcs	.+2      	; 0x200a <__ftoa_engine+0x40>
    2008:	80 68       	ori	r24, 0x80	; 128
    200a:	91 1d       	adc	r25, r1
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	1f 93       	push	r17
    2012:	0f 93       	push	r16
    2014:	ff 92       	push	r15
    2016:	ef 92       	push	r14
    2018:	19 2f       	mov	r17, r25
    201a:	98 7f       	andi	r25, 0xF8	; 248
    201c:	96 95       	lsr	r25
    201e:	e9 2f       	mov	r30, r25
    2020:	96 95       	lsr	r25
    2022:	96 95       	lsr	r25
    2024:	e9 0f       	add	r30, r25
    2026:	ff 27       	eor	r31, r31
    2028:	eb 5f       	subi	r30, 0xFB	; 251
    202a:	fe 4f       	sbci	r31, 0xFE	; 254
    202c:	99 27       	eor	r25, r25
    202e:	33 27       	eor	r19, r19
    2030:	ee 24       	eor	r14, r14
    2032:	ff 24       	eor	r15, r15
    2034:	a7 01       	movw	r20, r14
    2036:	e7 01       	movw	r28, r14
    2038:	05 90       	lpm	r0, Z+
    203a:	08 94       	sec
    203c:	07 94       	ror	r0
    203e:	28 f4       	brcc	.+10     	; 0x204a <__ftoa_engine+0x80>
    2040:	36 0f       	add	r19, r22
    2042:	e7 1e       	adc	r14, r23
    2044:	f8 1e       	adc	r15, r24
    2046:	49 1f       	adc	r20, r25
    2048:	51 1d       	adc	r21, r1
    204a:	66 0f       	add	r22, r22
    204c:	77 1f       	adc	r23, r23
    204e:	88 1f       	adc	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	06 94       	lsr	r0
    2054:	a1 f7       	brne	.-24     	; 0x203e <__ftoa_engine+0x74>
    2056:	05 90       	lpm	r0, Z+
    2058:	07 94       	ror	r0
    205a:	28 f4       	brcc	.+10     	; 0x2066 <__ftoa_engine+0x9c>
    205c:	e7 0e       	add	r14, r23
    205e:	f8 1e       	adc	r15, r24
    2060:	49 1f       	adc	r20, r25
    2062:	56 1f       	adc	r21, r22
    2064:	c1 1d       	adc	r28, r1
    2066:	77 0f       	add	r23, r23
    2068:	88 1f       	adc	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	66 1f       	adc	r22, r22
    206e:	06 94       	lsr	r0
    2070:	a1 f7       	brne	.-24     	; 0x205a <__ftoa_engine+0x90>
    2072:	05 90       	lpm	r0, Z+
    2074:	07 94       	ror	r0
    2076:	28 f4       	brcc	.+10     	; 0x2082 <__ftoa_engine+0xb8>
    2078:	f8 0e       	add	r15, r24
    207a:	49 1f       	adc	r20, r25
    207c:	56 1f       	adc	r21, r22
    207e:	c7 1f       	adc	r28, r23
    2080:	d1 1d       	adc	r29, r1
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	66 1f       	adc	r22, r22
    2088:	77 1f       	adc	r23, r23
    208a:	06 94       	lsr	r0
    208c:	a1 f7       	brne	.-24     	; 0x2076 <__ftoa_engine+0xac>
    208e:	05 90       	lpm	r0, Z+
    2090:	07 94       	ror	r0
    2092:	20 f4       	brcc	.+8      	; 0x209c <__ftoa_engine+0xd2>
    2094:	49 0f       	add	r20, r25
    2096:	56 1f       	adc	r21, r22
    2098:	c7 1f       	adc	r28, r23
    209a:	d8 1f       	adc	r29, r24
    209c:	99 0f       	add	r25, r25
    209e:	66 1f       	adc	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	06 94       	lsr	r0
    20a6:	a9 f7       	brne	.-22     	; 0x2092 <__ftoa_engine+0xc8>
    20a8:	84 91       	lpm	r24, Z
    20aa:	10 95       	com	r17
    20ac:	17 70       	andi	r17, 0x07	; 7
    20ae:	41 f0       	breq	.+16     	; 0x20c0 <__ftoa_engine+0xf6>
    20b0:	d6 95       	lsr	r29
    20b2:	c7 95       	ror	r28
    20b4:	57 95       	ror	r21
    20b6:	47 95       	ror	r20
    20b8:	f7 94       	ror	r15
    20ba:	e7 94       	ror	r14
    20bc:	1a 95       	dec	r17
    20be:	c1 f7       	brne	.-16     	; 0x20b0 <__ftoa_engine+0xe6>
    20c0:	eb ea       	ldi	r30, 0xAB	; 171
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	68 94       	set
    20c6:	15 90       	lpm	r1, Z+
    20c8:	15 91       	lpm	r17, Z+
    20ca:	35 91       	lpm	r19, Z+
    20cc:	65 91       	lpm	r22, Z+
    20ce:	95 91       	lpm	r25, Z+
    20d0:	05 90       	lpm	r0, Z+
    20d2:	7f e2       	ldi	r23, 0x2F	; 47
    20d4:	73 95       	inc	r23
    20d6:	e1 18       	sub	r14, r1
    20d8:	f1 0a       	sbc	r15, r17
    20da:	43 0b       	sbc	r20, r19
    20dc:	56 0b       	sbc	r21, r22
    20de:	c9 0b       	sbc	r28, r25
    20e0:	d0 09       	sbc	r29, r0
    20e2:	c0 f7       	brcc	.-16     	; 0x20d4 <__ftoa_engine+0x10a>
    20e4:	e1 0c       	add	r14, r1
    20e6:	f1 1e       	adc	r15, r17
    20e8:	43 1f       	adc	r20, r19
    20ea:	56 1f       	adc	r21, r22
    20ec:	c9 1f       	adc	r28, r25
    20ee:	d0 1d       	adc	r29, r0
    20f0:	7e f4       	brtc	.+30     	; 0x2110 <__ftoa_engine+0x146>
    20f2:	70 33       	cpi	r23, 0x30	; 48
    20f4:	11 f4       	brne	.+4      	; 0x20fa <__ftoa_engine+0x130>
    20f6:	8a 95       	dec	r24
    20f8:	e6 cf       	rjmp	.-52     	; 0x20c6 <__ftoa_engine+0xfc>
    20fa:	e8 94       	clt
    20fc:	01 50       	subi	r16, 0x01	; 1
    20fe:	30 f0       	brcs	.+12     	; 0x210c <__ftoa_engine+0x142>
    2100:	08 0f       	add	r16, r24
    2102:	0a f4       	brpl	.+2      	; 0x2106 <__ftoa_engine+0x13c>
    2104:	00 27       	eor	r16, r16
    2106:	02 17       	cp	r16, r18
    2108:	08 f4       	brcc	.+2      	; 0x210c <__ftoa_engine+0x142>
    210a:	20 2f       	mov	r18, r16
    210c:	23 95       	inc	r18
    210e:	02 2f       	mov	r16, r18
    2110:	7a 33       	cpi	r23, 0x3A	; 58
    2112:	28 f0       	brcs	.+10     	; 0x211e <__ftoa_engine+0x154>
    2114:	79 e3       	ldi	r23, 0x39	; 57
    2116:	7d 93       	st	X+, r23
    2118:	2a 95       	dec	r18
    211a:	e9 f7       	brne	.-6      	; 0x2116 <__ftoa_engine+0x14c>
    211c:	10 c0       	rjmp	.+32     	; 0x213e <__ftoa_engine+0x174>
    211e:	7d 93       	st	X+, r23
    2120:	2a 95       	dec	r18
    2122:	89 f6       	brne	.-94     	; 0x20c6 <__ftoa_engine+0xfc>
    2124:	06 94       	lsr	r0
    2126:	97 95       	ror	r25
    2128:	67 95       	ror	r22
    212a:	37 95       	ror	r19
    212c:	17 95       	ror	r17
    212e:	17 94       	ror	r1
    2130:	e1 18       	sub	r14, r1
    2132:	f1 0a       	sbc	r15, r17
    2134:	43 0b       	sbc	r20, r19
    2136:	56 0b       	sbc	r21, r22
    2138:	c9 0b       	sbc	r28, r25
    213a:	d0 09       	sbc	r29, r0
    213c:	98 f0       	brcs	.+38     	; 0x2164 <__ftoa_engine+0x19a>
    213e:	23 95       	inc	r18
    2140:	7e 91       	ld	r23, -X
    2142:	73 95       	inc	r23
    2144:	7a 33       	cpi	r23, 0x3A	; 58
    2146:	08 f0       	brcs	.+2      	; 0x214a <__ftoa_engine+0x180>
    2148:	70 e3       	ldi	r23, 0x30	; 48
    214a:	7c 93       	st	X, r23
    214c:	20 13       	cpse	r18, r16
    214e:	b8 f7       	brcc	.-18     	; 0x213e <__ftoa_engine+0x174>
    2150:	7e 91       	ld	r23, -X
    2152:	70 61       	ori	r23, 0x10	; 16
    2154:	7d 93       	st	X+, r23
    2156:	30 f0       	brcs	.+12     	; 0x2164 <__ftoa_engine+0x19a>
    2158:	83 95       	inc	r24
    215a:	71 e3       	ldi	r23, 0x31	; 49
    215c:	7d 93       	st	X+, r23
    215e:	70 e3       	ldi	r23, 0x30	; 48
    2160:	2a 95       	dec	r18
    2162:	e1 f7       	brne	.-8      	; 0x215c <__ftoa_engine+0x192>
    2164:	11 24       	eor	r1, r1
    2166:	ef 90       	pop	r14
    2168:	ff 90       	pop	r15
    216a:	0f 91       	pop	r16
    216c:	1f 91       	pop	r17
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	99 27       	eor	r25, r25
    2174:	87 fd       	sbrc	r24, 7
    2176:	90 95       	com	r25
    2178:	08 95       	ret

0000217a <isspace>:
    217a:	91 11       	cpse	r25, r1
    217c:	3d c1       	rjmp	.+634    	; 0x23f8 <__ctype_isfalse>
    217e:	80 32       	cpi	r24, 0x20	; 32
    2180:	19 f0       	breq	.+6      	; 0x2188 <isspace+0xe>
    2182:	89 50       	subi	r24, 0x09	; 9
    2184:	85 50       	subi	r24, 0x05	; 5
    2186:	d0 f7       	brcc	.-12     	; 0x217c <isspace+0x2>
    2188:	08 95       	ret

0000218a <strncasecmp_P>:
    218a:	fb 01       	movw	r30, r22
    218c:	dc 01       	movw	r26, r24
    218e:	41 50       	subi	r20, 0x01	; 1
    2190:	50 40       	sbci	r21, 0x00	; 0
    2192:	88 f0       	brcs	.+34     	; 0x21b6 <strncasecmp_P+0x2c>
    2194:	8d 91       	ld	r24, X+
    2196:	81 34       	cpi	r24, 0x41	; 65
    2198:	1c f0       	brlt	.+6      	; 0x21a0 <strncasecmp_P+0x16>
    219a:	8b 35       	cpi	r24, 0x5B	; 91
    219c:	0c f4       	brge	.+2      	; 0x21a0 <strncasecmp_P+0x16>
    219e:	80 5e       	subi	r24, 0xE0	; 224
    21a0:	65 91       	lpm	r22, Z+
    21a2:	61 34       	cpi	r22, 0x41	; 65
    21a4:	1c f0       	brlt	.+6      	; 0x21ac <strncasecmp_P+0x22>
    21a6:	6b 35       	cpi	r22, 0x5B	; 91
    21a8:	0c f4       	brge	.+2      	; 0x21ac <strncasecmp_P+0x22>
    21aa:	60 5e       	subi	r22, 0xE0	; 224
    21ac:	86 1b       	sub	r24, r22
    21ae:	61 11       	cpse	r22, r1
    21b0:	71 f3       	breq	.-36     	; 0x218e <strncasecmp_P+0x4>
    21b2:	99 0b       	sbc	r25, r25
    21b4:	08 95       	ret
    21b6:	88 1b       	sub	r24, r24
    21b8:	fc cf       	rjmp	.-8      	; 0x21b2 <strncasecmp_P+0x28>

000021ba <strnlen_P>:
    21ba:	fc 01       	movw	r30, r24
    21bc:	05 90       	lpm	r0, Z+
    21be:	61 50       	subi	r22, 0x01	; 1
    21c0:	70 40       	sbci	r23, 0x00	; 0
    21c2:	01 10       	cpse	r0, r1
    21c4:	d8 f7       	brcc	.-10     	; 0x21bc <strnlen_P+0x2>
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	8e 0f       	add	r24, r30
    21cc:	9f 1f       	adc	r25, r31
    21ce:	08 95       	ret

000021d0 <strchr>:
    21d0:	fc 01       	movw	r30, r24
    21d2:	81 91       	ld	r24, Z+
    21d4:	86 17       	cp	r24, r22
    21d6:	21 f0       	breq	.+8      	; 0x21e0 <strchr+0x10>
    21d8:	88 23       	and	r24, r24
    21da:	d9 f7       	brne	.-10     	; 0x21d2 <strchr+0x2>
    21dc:	99 27       	eor	r25, r25
    21de:	08 95       	ret
    21e0:	31 97       	sbiw	r30, 0x01	; 1
    21e2:	cf 01       	movw	r24, r30
    21e4:	08 95       	ret

000021e6 <strcmp>:
    21e6:	fb 01       	movw	r30, r22
    21e8:	dc 01       	movw	r26, r24
    21ea:	8d 91       	ld	r24, X+
    21ec:	01 90       	ld	r0, Z+
    21ee:	80 19       	sub	r24, r0
    21f0:	01 10       	cpse	r0, r1
    21f2:	d9 f3       	breq	.-10     	; 0x21ea <strcmp+0x4>
    21f4:	99 0b       	sbc	r25, r25
    21f6:	08 95       	ret

000021f8 <strncmp>:
    21f8:	fb 01       	movw	r30, r22
    21fa:	dc 01       	movw	r26, r24
    21fc:	41 50       	subi	r20, 0x01	; 1
    21fe:	50 40       	sbci	r21, 0x00	; 0
    2200:	30 f0       	brcs	.+12     	; 0x220e <strncmp+0x16>
    2202:	8d 91       	ld	r24, X+
    2204:	01 90       	ld	r0, Z+
    2206:	80 19       	sub	r24, r0
    2208:	19 f4       	brne	.+6      	; 0x2210 <strncmp+0x18>
    220a:	00 20       	and	r0, r0
    220c:	b9 f7       	brne	.-18     	; 0x21fc <strncmp+0x4>
    220e:	88 1b       	sub	r24, r24
    2210:	99 0b       	sbc	r25, r25
    2212:	08 95       	ret

00002214 <strnlen>:
    2214:	fc 01       	movw	r30, r24
    2216:	61 50       	subi	r22, 0x01	; 1
    2218:	70 40       	sbci	r23, 0x00	; 0
    221a:	01 90       	ld	r0, Z+
    221c:	01 10       	cpse	r0, r1
    221e:	d8 f7       	brcc	.-10     	; 0x2216 <strnlen+0x2>
    2220:	80 95       	com	r24
    2222:	90 95       	com	r25
    2224:	8e 0f       	add	r24, r30
    2226:	9f 1f       	adc	r25, r31
    2228:	08 95       	ret

0000222a <fputc>:
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	8c 01       	movw	r16, r24
    2234:	eb 01       	movw	r28, r22
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	81 ff       	sbrs	r24, 1
    223a:	1b c0       	rjmp	.+54     	; 0x2272 <fputc+0x48>
    223c:	82 ff       	sbrs	r24, 2
    223e:	0d c0       	rjmp	.+26     	; 0x225a <fputc+0x30>
    2240:	2e 81       	ldd	r18, Y+6	; 0x06
    2242:	3f 81       	ldd	r19, Y+7	; 0x07
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	28 17       	cp	r18, r24
    224a:	39 07       	cpc	r19, r25
    224c:	64 f4       	brge	.+24     	; 0x2266 <fputc+0x3c>
    224e:	e8 81       	ld	r30, Y
    2250:	f9 81       	ldd	r31, Y+1	; 0x01
    2252:	01 93       	st	Z+, r16
    2254:	f9 83       	std	Y+1, r31	; 0x01
    2256:	e8 83       	st	Y, r30
    2258:	06 c0       	rjmp	.+12     	; 0x2266 <fputc+0x3c>
    225a:	e8 85       	ldd	r30, Y+8	; 0x08
    225c:	f9 85       	ldd	r31, Y+9	; 0x09
    225e:	80 2f       	mov	r24, r16
    2260:	09 95       	icall
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	31 f4       	brne	.+12     	; 0x2272 <fputc+0x48>
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	01 96       	adiw	r24, 0x01	; 1
    226c:	9f 83       	std	Y+7, r25	; 0x07
    226e:	8e 83       	std	Y+6, r24	; 0x06
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <fputc+0x4c>
    2272:	0f ef       	ldi	r16, 0xFF	; 255
    2274:	1f ef       	ldi	r17, 0xFF	; 255
    2276:	c8 01       	movw	r24, r16
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	08 95       	ret

00002282 <printf>:
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e7 e4       	ldi	r30, 0x47	; 71
    2288:	f1 e1       	ldi	r31, 0x11	; 17
    228a:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__prologue_saves__+0x20>
    228e:	fe 01       	movw	r30, r28
    2290:	35 96       	adiw	r30, 0x05	; 5
    2292:	61 91       	ld	r22, Z+
    2294:	71 91       	ld	r23, Z+
    2296:	80 91 c0 07 	lds	r24, 0x07C0
    229a:	90 91 c1 07 	lds	r25, 0x07C1
    229e:	af 01       	movw	r20, r30
    22a0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <vfprintf>
    22a4:	20 96       	adiw	r28, 0x00	; 0
    22a6:	e2 e0       	ldi	r30, 0x02	; 2
    22a8:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__epilogue_restores__+0x20>

000022ac <puts>:
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	8c 01       	movw	r16, r24
    22b6:	e0 91 c0 07 	lds	r30, 0x07C0
    22ba:	f0 91 c1 07 	lds	r31, 0x07C1
    22be:	83 81       	ldd	r24, Z+3	; 0x03
    22c0:	81 ff       	sbrs	r24, 1
    22c2:	1a c0       	rjmp	.+52     	; 0x22f8 <puts+0x4c>
    22c4:	c0 e0       	ldi	r28, 0x00	; 0
    22c6:	d0 e0       	ldi	r29, 0x00	; 0
    22c8:	05 c0       	rjmp	.+10     	; 0x22d4 <puts+0x28>
    22ca:	09 95       	icall
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	11 f0       	breq	.+4      	; 0x22d4 <puts+0x28>
    22d0:	cf ef       	ldi	r28, 0xFF	; 255
    22d2:	df ef       	ldi	r29, 0xFF	; 255
    22d4:	f8 01       	movw	r30, r16
    22d6:	81 91       	ld	r24, Z+
    22d8:	8f 01       	movw	r16, r30
    22da:	60 91 c0 07 	lds	r22, 0x07C0
    22de:	70 91 c1 07 	lds	r23, 0x07C1
    22e2:	db 01       	movw	r26, r22
    22e4:	18 96       	adiw	r26, 0x08	; 8
    22e6:	ed 91       	ld	r30, X+
    22e8:	fc 91       	ld	r31, X
    22ea:	19 97       	sbiw	r26, 0x09	; 9
    22ec:	88 23       	and	r24, r24
    22ee:	69 f7       	brne	.-38     	; 0x22ca <puts+0x1e>
    22f0:	8a e0       	ldi	r24, 0x0A	; 10
    22f2:	09 95       	icall
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	11 f0       	breq	.+4      	; 0x22fc <puts+0x50>
    22f8:	cf ef       	ldi	r28, 0xFF	; 255
    22fa:	df ef       	ldi	r29, 0xFF	; 255
    22fc:	ce 01       	movw	r24, r28
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	08 95       	ret

00002308 <__ultoa_invert>:
    2308:	fa 01       	movw	r30, r20
    230a:	aa 27       	eor	r26, r26
    230c:	28 30       	cpi	r18, 0x08	; 8
    230e:	51 f1       	breq	.+84     	; 0x2364 <__ultoa_invert+0x5c>
    2310:	20 31       	cpi	r18, 0x10	; 16
    2312:	81 f1       	breq	.+96     	; 0x2374 <__ultoa_invert+0x6c>
    2314:	e8 94       	clt
    2316:	6f 93       	push	r22
    2318:	6e 7f       	andi	r22, 0xFE	; 254
    231a:	6e 5f       	subi	r22, 0xFE	; 254
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	8f 4f       	sbci	r24, 0xFF	; 255
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	af 4f       	sbci	r26, 0xFF	; 255
    2324:	b1 e0       	ldi	r27, 0x01	; 1
    2326:	3e d0       	rcall	.+124    	; 0x23a4 <__ultoa_invert+0x9c>
    2328:	b4 e0       	ldi	r27, 0x04	; 4
    232a:	3c d0       	rcall	.+120    	; 0x23a4 <__ultoa_invert+0x9c>
    232c:	67 0f       	add	r22, r23
    232e:	78 1f       	adc	r23, r24
    2330:	89 1f       	adc	r24, r25
    2332:	9a 1f       	adc	r25, r26
    2334:	a1 1d       	adc	r26, r1
    2336:	68 0f       	add	r22, r24
    2338:	79 1f       	adc	r23, r25
    233a:	8a 1f       	adc	r24, r26
    233c:	91 1d       	adc	r25, r1
    233e:	a1 1d       	adc	r26, r1
    2340:	6a 0f       	add	r22, r26
    2342:	71 1d       	adc	r23, r1
    2344:	81 1d       	adc	r24, r1
    2346:	91 1d       	adc	r25, r1
    2348:	a1 1d       	adc	r26, r1
    234a:	20 d0       	rcall	.+64     	; 0x238c <__ultoa_invert+0x84>
    234c:	09 f4       	brne	.+2      	; 0x2350 <__ultoa_invert+0x48>
    234e:	68 94       	set
    2350:	3f 91       	pop	r19
    2352:	2a e0       	ldi	r18, 0x0A	; 10
    2354:	26 9f       	mul	r18, r22
    2356:	11 24       	eor	r1, r1
    2358:	30 19       	sub	r19, r0
    235a:	30 5d       	subi	r19, 0xD0	; 208
    235c:	31 93       	st	Z+, r19
    235e:	de f6       	brtc	.-74     	; 0x2316 <__ultoa_invert+0xe>
    2360:	cf 01       	movw	r24, r30
    2362:	08 95       	ret
    2364:	46 2f       	mov	r20, r22
    2366:	47 70       	andi	r20, 0x07	; 7
    2368:	40 5d       	subi	r20, 0xD0	; 208
    236a:	41 93       	st	Z+, r20
    236c:	b3 e0       	ldi	r27, 0x03	; 3
    236e:	0f d0       	rcall	.+30     	; 0x238e <__ultoa_invert+0x86>
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__ultoa_invert+0x5c>
    2372:	f6 cf       	rjmp	.-20     	; 0x2360 <__ultoa_invert+0x58>
    2374:	46 2f       	mov	r20, r22
    2376:	4f 70       	andi	r20, 0x0F	; 15
    2378:	40 5d       	subi	r20, 0xD0	; 208
    237a:	4a 33       	cpi	r20, 0x3A	; 58
    237c:	18 f0       	brcs	.+6      	; 0x2384 <__ultoa_invert+0x7c>
    237e:	49 5d       	subi	r20, 0xD9	; 217
    2380:	31 fd       	sbrc	r19, 1
    2382:	40 52       	subi	r20, 0x20	; 32
    2384:	41 93       	st	Z+, r20
    2386:	02 d0       	rcall	.+4      	; 0x238c <__ultoa_invert+0x84>
    2388:	a9 f7       	brne	.-22     	; 0x2374 <__ultoa_invert+0x6c>
    238a:	ea cf       	rjmp	.-44     	; 0x2360 <__ultoa_invert+0x58>
    238c:	b4 e0       	ldi	r27, 0x04	; 4
    238e:	a6 95       	lsr	r26
    2390:	97 95       	ror	r25
    2392:	87 95       	ror	r24
    2394:	77 95       	ror	r23
    2396:	67 95       	ror	r22
    2398:	ba 95       	dec	r27
    239a:	c9 f7       	brne	.-14     	; 0x238e <__ultoa_invert+0x86>
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	61 05       	cpc	r22, r1
    23a0:	71 05       	cpc	r23, r1
    23a2:	08 95       	ret
    23a4:	9b 01       	movw	r18, r22
    23a6:	ac 01       	movw	r20, r24
    23a8:	0a 2e       	mov	r0, r26
    23aa:	06 94       	lsr	r0
    23ac:	57 95       	ror	r21
    23ae:	47 95       	ror	r20
    23b0:	37 95       	ror	r19
    23b2:	27 95       	ror	r18
    23b4:	ba 95       	dec	r27
    23b6:	c9 f7       	brne	.-14     	; 0x23aa <__ultoa_invert+0xa2>
    23b8:	62 0f       	add	r22, r18
    23ba:	73 1f       	adc	r23, r19
    23bc:	84 1f       	adc	r24, r20
    23be:	95 1f       	adc	r25, r21
    23c0:	a0 1d       	adc	r26, r0
    23c2:	08 95       	ret

000023c4 <__eerd_byte_m328p>:
    23c4:	f9 99       	sbic	0x1f, 1	; 31
    23c6:	fe cf       	rjmp	.-4      	; 0x23c4 <__eerd_byte_m328p>
    23c8:	92 bd       	out	0x22, r25	; 34
    23ca:	81 bd       	out	0x21, r24	; 33
    23cc:	f8 9a       	sbi	0x1f, 0	; 31
    23ce:	99 27       	eor	r25, r25
    23d0:	80 b5       	in	r24, 0x20	; 32
    23d2:	08 95       	ret

000023d4 <__eeupd_byte_m328p>:
    23d4:	26 2f       	mov	r18, r22

000023d6 <__eeupd_r18_m328p>:
    23d6:	f9 99       	sbic	0x1f, 1	; 31
    23d8:	fe cf       	rjmp	.-4      	; 0x23d6 <__eeupd_r18_m328p>
    23da:	92 bd       	out	0x22, r25	; 34
    23dc:	81 bd       	out	0x21, r24	; 33
    23de:	f8 9a       	sbi	0x1f, 0	; 31
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	00 b4       	in	r0, 0x20	; 32
    23e4:	02 16       	cp	r0, r18
    23e6:	39 f0       	breq	.+14     	; 0x23f6 <__eeupd_r18_m328p+0x20>
    23e8:	1f ba       	out	0x1f, r1	; 31
    23ea:	20 bd       	out	0x20, r18	; 32
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	fa 9a       	sbi	0x1f, 2	; 31
    23f2:	f9 9a       	sbi	0x1f, 1	; 31
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	08 95       	ret

000023f8 <__ctype_isfalse>:
    23f8:	99 27       	eor	r25, r25
    23fa:	88 27       	eor	r24, r24

000023fc <__ctype_istrue>:
    23fc:	08 95       	ret

000023fe <_exit>:
    23fe:	f8 94       	cli

00002400 <__stop_program>:
    2400:	ff cf       	rjmp	.-2      	; 0x2400 <__stop_program>
