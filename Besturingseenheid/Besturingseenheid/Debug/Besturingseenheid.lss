
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000059a  00800100  0000263a  000026ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000263a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  0080069a  0080069a  00002c68  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000069c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002775  00000000  00000000  00006be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd9  00000000  00000000  00009355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001624  00000000  00000000  0000a12e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  0000b754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000864  00000000  00000000  0000bee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3a  00000000  00000000  0000c74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000e586  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	ea e3       	ldi	r30, 0x3A	; 58
     1ba:	f6 e2       	ldi	r31, 0x26	; 38
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	aa 39       	cpi	r26, 0x9A	; 154
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	aa e9       	ldi	r26, 0x9A	; 154
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ae 3c       	cpi	r26, 0xCE	; 206
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
     1dc:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 9a 06 	lds	r24, 0x069A
     262:	90 91 9b 06 	lds	r25, 0x069B
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	91 ee       	ldi	r25, 0xE1	; 225
     27e:	a4 e0       	ldi	r26, 0x04	; 4
     280:	81 50       	subi	r24, 0x01	; 1
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	a0 40       	sbci	r26, 0x00	; 0
     286:	e1 f7       	brne	.-8      	; 0x280 <getDistance+0x18>
     288:	00 c0       	rjmp	.+0      	; 0x28a <getDistance+0x22>
     28a:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     28c:	60 91 a2 06 	lds	r22, 0x06A2
     290:	70 91 a3 06 	lds	r23, 0x06A3
     294:	80 91 a4 06 	lds	r24, 0x06A4
     298:	90 91 a5 06 	lds	r25, 0x06A5
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	5f e3       	ldi	r21, 0x3F	; 63
     2a4:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3>
     2a8:	29 e9       	ldi	r18, 0x99	; 153
     2aa:	3b eb       	ldi	r19, 0xBB	; 187
     2ac:	46 e1       	ldi	r20, 0x16	; 22
     2ae:	5b e3       	ldi	r21, 0x3B	; 59
     2b0:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3>
     2b4:	26 2f       	mov	r18, r22
     2b6:	37 2f       	mov	r19, r23
     2b8:	f8 2f       	mov	r31, r24
     2ba:	e9 2f       	mov	r30, r25
     2bc:	46 2f       	mov	r20, r22
     2be:	57 2f       	mov	r21, r23
     2c0:	68 2f       	mov	r22, r24
     2c2:	79 2f       	mov	r23, r25
     2c4:	40 93 1a 01 	sts	0x011A, r20
     2c8:	50 93 1b 01 	sts	0x011B, r21
     2cc:	60 93 1c 01 	sts	0x011C, r22
     2d0:	70 93 1d 01 	sts	0x011D, r23
	return afstand;
}
     2d4:	82 2f       	mov	r24, r18
     2d6:	93 2f       	mov	r25, r19
     2d8:	af 2f       	mov	r26, r31
     2da:	be 2f       	mov	r27, r30
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	08 95       	ret

000002e2 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2e2:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e6:	68 2f       	mov	r22, r24
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 91 0a 	call	0x1522	; 0x1522 <__floatsisf>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 ea       	ldi	r20, 0xA0	; 160
     2f8:	5b e3       	ldi	r21, 0x3B	; 59
     2fa:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3>
     2fe:	26 2f       	mov	r18, r22
     300:	37 2f       	mov	r19, r23
     302:	f8 2f       	mov	r31, r24
     304:	e9 2f       	mov	r30, r25
     306:	46 2f       	mov	r20, r22
     308:	57 2f       	mov	r21, r23
     30a:	68 2f       	mov	r22, r24
     30c:	79 2f       	mov	r23, r25
     30e:	40 93 aa 06 	sts	0x06AA, r20
     312:	50 93 ab 06 	sts	0x06AB, r21
     316:	60 93 ac 06 	sts	0x06AC, r22
     31a:	70 93 ad 06 	sts	0x06AD, r23
	ADCRes = (Volt - 0.5) * 100;
     31e:	82 2f       	mov	r24, r18
     320:	93 2f       	mov	r25, r19
     322:	af 2f       	mov	r26, r31
     324:	be 2f       	mov	r27, r30
     326:	bc 01       	movw	r22, r24
     328:	cd 01       	movw	r24, r26
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 26 0a 	call	0x144c	; 0x144c <__subsf3>
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	48 ec       	ldi	r20, 0xC8	; 200
     33c:	52 e4       	ldi	r21, 0x42	; 66
     33e:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3>
     342:	26 2f       	mov	r18, r22
     344:	37 2f       	mov	r19, r23
     346:	f8 2f       	mov	r31, r24
     348:	e9 2f       	mov	r30, r25
     34a:	46 2f       	mov	r20, r22
     34c:	57 2f       	mov	r21, r23
     34e:	68 2f       	mov	r22, r24
     350:	79 2f       	mov	r23, r25
     352:	40 93 ce 06 	sts	0x06CE, r20
     356:	50 93 cf 06 	sts	0x06CF, r21
     35a:	60 93 d0 06 	sts	0x06D0, r22
     35e:	70 93 d1 06 	sts	0x06D1, r23
	return ADCRes;
}
     362:	82 2f       	mov	r24, r18
     364:	93 2f       	mov	r25, r19
     366:	af 2f       	mov	r26, r31
     368:	be 2f       	mov	r27, r30
     36a:	bc 01       	movw	r22, r24
     36c:	cd 01       	movw	r24, r26
     36e:	08 95       	ret

00000370 <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     370:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     374:	08 95       	ret

00000376 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     37a:	9c e9       	ldi	r25, 0x9C	; 156
     37c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     37e:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     382:	85 b5       	in	r24, 0x25	; 37
     384:	85 60       	ori	r24, 0x05	; 5
     386:	85 bd       	out	0x25, r24	; 37
}
     388:	08 95       	ret

0000038a <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     38a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <init_scherm_ports>
	init_timer();
     38e:	0e 94 bb 01 	call	0x376	; 0x376 <init_timer>
	ser_init();
     392:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ser_init>
	ADC_init();
     396:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     39a:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     39e:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     3a2:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     3a4:	0e 94 de 05 	call	0xbbc	; 0xbbc <protocolCom>
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <main+0x1a>

000003aa <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	ef 93       	push	r30
     3de:	ff 93       	push	r31
	//sei();
	
	extraTime1++;
     3e0:	80 91 9c 06 	lds	r24, 0x069C
     3e4:	90 91 9d 06 	lds	r25, 0x069D
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	90 93 9d 06 	sts	0x069D, r25
     3ee:	80 93 9c 06 	sts	0x069C, r24
	if(extraTime1>100){
     3f2:	80 91 9c 06 	lds	r24, 0x069C
     3f6:	90 91 9d 06 	lds	r25, 0x069D
     3fa:	85 36       	cpi	r24, 0x65	; 101
     3fc:	91 05       	cpc	r25, r1
     3fe:	6c f0       	brlt	.+26     	; 0x41a <__vector_14+0x70>
		timerVariable++;
     400:	80 91 9a 06 	lds	r24, 0x069A
     404:	90 91 9b 06 	lds	r25, 0x069B
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 9b 06 	sts	0x069B, r25
     40e:	80 93 9a 06 	sts	0x069A, r24
		extraTime1 = 0;
     412:	10 92 9d 06 	sts	0x069D, r1
     416:	10 92 9c 06 	sts	0x069C, r1
	}
	extraTime++;
     41a:	80 91 9e 06 	lds	r24, 0x069E
     41e:	90 91 9f 06 	lds	r25, 0x069F
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	90 93 9f 06 	sts	0x069F, r25
     428:	80 93 9e 06 	sts	0x069E, r24
	if(extraTime>1000){
     42c:	80 91 9e 06 	lds	r24, 0x069E
     430:	90 91 9f 06 	lds	r25, 0x069F
     434:	23 e0       	ldi	r18, 0x03	; 3
     436:	89 3e       	cpi	r24, 0xE9	; 233
     438:	92 07       	cpc	r25, r18
     43a:	0c f4       	brge	.+2      	; 0x43e <__vector_14+0x94>
     43c:	9b c0       	rjmp	.+310    	; 0x574 <__vector_14+0x1ca>
		char* l = get_grensLight();
     43e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_grensLight>
		double grenslight;
		grenslight = strtod(l, NULL);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strtod>
     44a:	6b 01       	movw	r12, r22
     44c:	7c 01       	movw	r14, r24
		
		char* t = get_grensTemp();
     44e:	0e 94 14 05 	call	0xa28	; 0xa28 <get_grensTemp>
		double grenstemp;
		grenstemp = strtod(t, NULL);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strtod>
     45a:	4b 01       	movw	r8, r22
     45c:	5c 01       	movw	r10, r24
		printf("% 6.2f, % 6.2f", grenstemp, getTemp());
     45e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getTemp>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	2a 97       	sbiw	r28, 0x0a	; 10
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	ed b7       	in	r30, 0x3d	; 61
     478:	fe b7       	in	r31, 0x3e	; 62
     47a:	31 96       	adiw	r30, 0x01	; 1
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	31 e0       	ldi	r19, 0x01	; 1
     480:	3a 83       	std	Y+2, r19	; 0x02
     482:	29 83       	std	Y+1, r18	; 0x01
     484:	82 82       	std	Z+2, r8	; 0x02
     486:	93 82       	std	Z+3, r9	; 0x03
     488:	a4 82       	std	Z+4, r10	; 0x04
     48a:	b5 82       	std	Z+5, r11	; 0x05
     48c:	86 83       	std	Z+6, r24	; 0x06
     48e:	97 83       	std	Z+7, r25	; 0x07
     490:	a0 87       	std	Z+8, r26	; 0x08
     492:	b1 87       	std	Z+9, r27	; 0x09
     494:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>
		printf("% 6.2f, %i", grenslight, getLight());
     498:	2d b7       	in	r18, 0x3d	; 61
     49a:	3e b7       	in	r19, 0x3e	; 62
     49c:	26 5f       	subi	r18, 0xF6	; 246
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	3e bf       	out	0x3e, r19	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	2d bf       	out	0x3d, r18	; 61
     4aa:	0e 94 b8 01 	call	0x370	; 0x370 <getLight>
     4ae:	ad b7       	in	r26, 0x3d	; 61
     4b0:	be b7       	in	r27, 0x3e	; 62
     4b2:	18 97       	sbiw	r26, 0x08	; 8
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	be bf       	out	0x3e, r27	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	ad bf       	out	0x3d, r26	; 61
     4be:	ed b7       	in	r30, 0x3d	; 61
     4c0:	fe b7       	in	r31, 0x3e	; 62
     4c2:	31 96       	adiw	r30, 0x01	; 1
     4c4:	2f e0       	ldi	r18, 0x0F	; 15
     4c6:	31 e0       	ldi	r19, 0x01	; 1
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	3a 83       	std	Y+2, r19	; 0x02
     4ce:	29 83       	std	Y+1, r18	; 0x01
     4d0:	c2 82       	std	Z+2, r12	; 0x02
     4d2:	d3 82       	std	Z+3, r13	; 0x03
     4d4:	e4 82       	std	Z+4, r14	; 0x04
     4d6:	f5 82       	std	Z+5, r15	; 0x05
     4d8:	86 83       	std	Z+6, r24	; 0x06
     4da:	17 82       	std	Z+7, r1	; 0x07
     4dc:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>

		// Als het boven de grenslight is, en boven de grenstemperatuur is,
		// en ingerold dan moet het uitrollen
		
		if(getLight()> grenslight && getTemp() > grenstemp && (getIn() % 2) == 0)
     4e0:	2d b7       	in	r18, 0x3d	; 61
     4e2:	3e b7       	in	r19, 0x3e	; 62
     4e4:	28 5f       	subi	r18, 0xF8	; 248
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	3e bf       	out	0x3e, r19	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	0e 94 b8 01 	call	0x370	; 0x370 <getLight>
     4f6:	68 2f       	mov	r22, r24
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 91 0a 	call	0x1522	; 0x1522 <__floatsisf>
     502:	a7 01       	movw	r20, r14
     504:	96 01       	movw	r18, r12
     506:	0e 94 41 0b 	call	0x1682	; 0x1682 <__gesf2>
     50a:	18 16       	cp	r1, r24
     50c:	74 f4       	brge	.+28     	; 0x52a <__vector_14+0x180>
     50e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getTemp>
     512:	a5 01       	movw	r20, r10
     514:	94 01       	movw	r18, r8
     516:	0e 94 41 0b 	call	0x1682	; 0x1682 <__gesf2>
     51a:	18 16       	cp	r1, r24
     51c:	34 f4       	brge	.+12     	; 0x52a <__vector_14+0x180>
     51e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
     522:	80 fd       	sbrc	r24, 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <__vector_14+0x180>
		{
			//sei();
			uitrollen();
     526:	0e 94 ee 08 	call	0x11dc	; 0x11dc <uitrollen>
		}
		
		// Als het onder de grenslight is, en boven de grenstemperatuur is,
		// en uitgerold is. Dan moet het inrollen.
		if(getLight()< grenslight && getTemp() < grenstemp && (getIn() % 2) == 1)
     52a:	0e 94 b8 01 	call	0x370	; 0x370 <getLight>
     52e:	68 2f       	mov	r22, r24
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 91 0a 	call	0x1522	; 0x1522 <__floatsisf>
     53a:	a7 01       	movw	r20, r14
     53c:	96 01       	movw	r18, r12
     53e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__cmpsf2>
     542:	88 23       	and	r24, r24
     544:	9c f4       	brge	.+38     	; 0x56c <__vector_14+0x1c2>
     546:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getTemp>
     54a:	a5 01       	movw	r20, r10
     54c:	94 01       	movw	r18, r8
     54e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__cmpsf2>
     552:	88 23       	and	r24, r24
     554:	5c f4       	brge	.+22     	; 0x56c <__vector_14+0x1c2>
     556:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
     55a:	62 e0       	ldi	r22, 0x02	; 2
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	91 05       	cpc	r25, r1
     566:	11 f4       	brne	.+4      	; 0x56c <__vector_14+0x1c2>
		{
			//sei();
			oprollen();
     568:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <oprollen>
		}	
		
		// Resets de timer en de Totale timer ticks*/
		extraTime = 0;
     56c:	10 92 9f 06 	sts	0x069F, r1
     570:	10 92 9e 06 	sts	0x069E, r1
	}
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	bf 90       	pop	r11
     59a:	af 90       	pop	r10
     59c:	9f 90       	pop	r9
     59e:	8f 90       	pop	r8
     5a0:	0f 90       	pop	r0
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	0f 90       	pop	r0
     5a6:	1f 90       	pop	r1
     5a8:	18 95       	reti

000005aa <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	11 24       	eor	r1, r1
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
	if(i == 1)
     5d0:	80 91 a0 06 	lds	r24, 0x06A0
     5d4:	90 91 a1 06 	lds	r25, 0x06A1
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	91 05       	cpc	r25, r1
     5dc:	d1 f4       	brne	.+52     	; 0x612 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     5de:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     5e2:	c4 e8       	ldi	r28, 0x84	; 132
     5e4:	d0 e0       	ldi	r29, 0x00	; 0
     5e6:	68 81       	ld	r22, Y
     5e8:	79 81       	ldd	r23, Y+1	; 0x01
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 8f 0a 	call	0x151e	; 0x151e <__floatunsisf>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	80 93 a2 06 	sts	0x06A2, r24
     5fa:	90 93 a3 06 	sts	0x06A3, r25
     5fe:	a0 93 a4 06 	sts	0x06A4, r26
     602:	b0 93 a5 06 	sts	0x06A5, r27
		TCNT1 = 0; //Reset duration
     606:	19 82       	std	Y+1, r1	; 0x01
     608:	18 82       	st	Y, r1
		i = 0; //Reset counter
     60a:	10 92 a1 06 	sts	0x06A1, r1
     60e:	10 92 a0 06 	sts	0x06A0, r1
	}

	if(i==0)
     612:	80 91 a0 06 	lds	r24, 0x06A0
     616:	90 91 a1 06 	lds	r25, 0x06A1
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	59 f4       	brne	.+22     	; 0x634 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     61e:	e1 e8       	ldi	r30, 0x81	; 129
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	81 60       	ori	r24, 0x01	; 1
     626:	80 83       	st	Z, r24
		i = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	90 93 a1 06 	sts	0x06A1, r25
     630:	80 93 a0 06 	sts	0x06A0, r24
	}
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <set_maxUnroll>:
		}
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     664:	c0 91 fe 05 	lds	r28, 0x05FE
     668:	d0 91 ff 05 	lds	r29, 0x05FF
     66c:	80 91 0a 06 	lds	r24, 0x060A
     670:	90 91 0b 06 	lds	r25, 0x060B
     674:	99 23       	and	r25, r25
     676:	cc f0       	brlt	.+50     	; 0x6aa <set_maxUnroll+0x50>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     67c:	f8 01       	movw	r30, r16
     67e:	e8 0f       	add	r30, r24
     680:	f9 1f       	adc	r31, r25
     682:	ce 01       	movw	r24, r28
     684:	60 81       	ld	r22, Z
     686:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     68a:	21 96       	adiw	r28, 0x01	; 1
     68c:	80 91 fe 05 	lds	r24, 0x05FE
     690:	90 91 ff 05 	lds	r25, 0x05FF
     694:	9e 01       	movw	r18, r28
     696:	28 1b       	sub	r18, r24
     698:	39 0b       	sbc	r19, r25
     69a:	c9 01       	movw	r24, r18
     69c:	20 91 0a 06 	lds	r18, 0x060A
     6a0:	30 91 0b 06 	lds	r19, 0x060B
     6a4:	28 17       	cp	r18, r24
     6a6:	39 07       	cpc	r19, r25
     6a8:	4c f7       	brge	.-46     	; 0x67c <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	08 95       	ret

000006b4 <set_minUnroll>:
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     6be:	c0 91 00 06 	lds	r28, 0x0600
     6c2:	d0 91 01 06 	lds	r29, 0x0601
     6c6:	80 91 0c 06 	lds	r24, 0x060C
     6ca:	90 91 0d 06 	lds	r25, 0x060D
     6ce:	99 23       	and	r25, r25
     6d0:	cc f0       	brlt	.+50     	; 0x704 <set_minUnroll+0x50>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     6d6:	f8 01       	movw	r30, r16
     6d8:	e8 0f       	add	r30, r24
     6da:	f9 1f       	adc	r31, r25
     6dc:	ce 01       	movw	r24, r28
     6de:	60 81       	ld	r22, Z
     6e0:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     6e4:	21 96       	adiw	r28, 0x01	; 1
     6e6:	80 91 00 06 	lds	r24, 0x0600
     6ea:	90 91 01 06 	lds	r25, 0x0601
     6ee:	9e 01       	movw	r18, r28
     6f0:	28 1b       	sub	r18, r24
     6f2:	39 0b       	sbc	r19, r25
     6f4:	c9 01       	movw	r24, r18
     6f6:	20 91 0c 06 	lds	r18, 0x060C
     6fa:	30 91 0d 06 	lds	r19, 0x060D
     6fe:	28 17       	cp	r18, r24
     700:	39 07       	cpc	r19, r25
     702:	4c f7       	brge	.-46     	; 0x6d6 <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <set_grensLicht>:
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     718:	c0 91 02 06 	lds	r28, 0x0602
     71c:	d0 91 03 06 	lds	r29, 0x0603
     720:	80 91 0e 06 	lds	r24, 0x060E
     724:	90 91 0f 06 	lds	r25, 0x060F
     728:	99 23       	and	r25, r25
     72a:	cc f0       	brlt	.+50     	; 0x75e <set_grensLicht+0x50>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     730:	f8 01       	movw	r30, r16
     732:	e8 0f       	add	r30, r24
     734:	f9 1f       	adc	r31, r25
     736:	ce 01       	movw	r24, r28
     738:	60 81       	ld	r22, Z
     73a:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     73e:	21 96       	adiw	r28, 0x01	; 1
     740:	80 91 02 06 	lds	r24, 0x0602
     744:	90 91 03 06 	lds	r25, 0x0603
     748:	9e 01       	movw	r18, r28
     74a:	28 1b       	sub	r18, r24
     74c:	39 0b       	sbc	r19, r25
     74e:	c9 01       	movw	r24, r18
     750:	20 91 0e 06 	lds	r18, 0x060E
     754:	30 91 0f 06 	lds	r19, 0x060F
     758:	28 17       	cp	r18, r24
     75a:	39 07       	cpc	r19, r25
     75c:	4c f7       	brge	.-46     	; 0x730 <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <set_grensTemp>:
		}
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     772:	c0 91 04 06 	lds	r28, 0x0604
     776:	d0 91 05 06 	lds	r29, 0x0605
     77a:	80 91 10 06 	lds	r24, 0x0610
     77e:	90 91 11 06 	lds	r25, 0x0611
     782:	99 23       	and	r25, r25
     784:	cc f0       	brlt	.+50     	; 0x7b8 <set_grensTemp+0x50>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     78a:	f8 01       	movw	r30, r16
     78c:	e8 0f       	add	r30, r24
     78e:	f9 1f       	adc	r31, r25
     790:	ce 01       	movw	r24, r28
     792:	60 81       	ld	r22, Z
     794:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     798:	21 96       	adiw	r28, 0x01	; 1
     79a:	80 91 04 06 	lds	r24, 0x0604
     79e:	90 91 05 06 	lds	r25, 0x0605
     7a2:	9e 01       	movw	r18, r28
     7a4:	28 1b       	sub	r18, r24
     7a6:	39 0b       	sbc	r19, r25
     7a8:	c9 01       	movw	r24, r18
     7aa:	20 91 10 06 	lds	r18, 0x0610
     7ae:	30 91 11 06 	lds	r19, 0x0611
     7b2:	28 17       	cp	r18, r24
     7b4:	39 07       	cpc	r19, r25
     7b6:	4c f7       	brge	.-46     	; 0x78a <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <set_Versie>:
		}
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7cc:	c0 91 06 06 	lds	r28, 0x0606
     7d0:	d0 91 07 06 	lds	r29, 0x0607
     7d4:	80 91 12 06 	lds	r24, 0x0612
     7d8:	90 91 13 06 	lds	r25, 0x0613
     7dc:	99 23       	and	r25, r25
     7de:	cc f0       	brlt	.+50     	; 0x812 <set_Versie+0x50>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     7e4:	f8 01       	movw	r30, r16
     7e6:	e8 0f       	add	r30, r24
     7e8:	f9 1f       	adc	r31, r25
     7ea:	ce 01       	movw	r24, r28
     7ec:	60 81       	ld	r22, Z
     7ee:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     7f2:	21 96       	adiw	r28, 0x01	; 1
     7f4:	80 91 06 06 	lds	r24, 0x0606
     7f8:	90 91 07 06 	lds	r25, 0x0607
     7fc:	9e 01       	movw	r18, r28
     7fe:	28 1b       	sub	r18, r24
     800:	39 0b       	sbc	r19, r25
     802:	c9 01       	movw	r24, r18
     804:	20 91 12 06 	lds	r18, 0x0612
     808:	30 91 13 06 	lds	r19, 0x0613
     80c:	28 17       	cp	r18, r24
     80e:	39 07       	cpc	r19, r25
     810:	4c f7       	brge	.-46     	; 0x7e4 <set_Versie+0x22>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	08 95       	ret

0000081c <set_Locatie>:
		}
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     826:	c0 91 08 06 	lds	r28, 0x0608
     82a:	d0 91 09 06 	lds	r29, 0x0609
     82e:	80 91 14 06 	lds	r24, 0x0614
     832:	90 91 15 06 	lds	r25, 0x0615
     836:	99 23       	and	r25, r25
     838:	cc f0       	brlt	.+50     	; 0x86c <set_Locatie+0x50>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     83e:	f8 01       	movw	r30, r16
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	ce 01       	movw	r24, r28
     846:	60 81       	ld	r22, Z
     848:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     84c:	21 96       	adiw	r28, 0x01	; 1
     84e:	80 91 08 06 	lds	r24, 0x0608
     852:	90 91 09 06 	lds	r25, 0x0609
     856:	9e 01       	movw	r18, r28
     858:	28 1b       	sub	r18, r24
     85a:	39 0b       	sbc	r19, r25
     85c:	c9 01       	movw	r24, r18
     85e:	20 91 14 06 	lds	r18, 0x0614
     862:	30 91 15 06 	lds	r19, 0x0615
     866:	28 17       	cp	r18, r24
     868:	39 07       	cpc	r19, r25
     86a:	4c f7       	brge	.-46     	; 0x83e <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <set_Naam>:
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     87e:	c0 91 a6 06 	lds	r28, 0x06A6
     882:	d0 91 a7 06 	lds	r29, 0x06A7
     886:	20 91 16 06 	lds	r18, 0x0616
     88a:	30 91 17 06 	lds	r19, 0x0617
     88e:	2c 17       	cp	r18, r28
     890:	3d 07       	cpc	r19, r29
     892:	8c f0       	brlt	.+34     	; 0x8b6 <set_Naam+0x40>
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     894:	8c 01       	movw	r16, r24
     896:	0c 0f       	add	r16, r28
     898:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     89a:	f8 01       	movw	r30, r16
     89c:	61 91       	ld	r22, Z+
     89e:	8f 01       	movw	r16, r30
     8a0:	ce 01       	movw	r24, r28
     8a2:	0e 94 06 13 	call	0x260c	; 0x260c <__eeupd_byte_m328p>
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     8a6:	21 96       	adiw	r28, 0x01	; 1
     8a8:	80 91 16 06 	lds	r24, 0x0616
     8ac:	90 91 17 06 	lds	r25, 0x0617
     8b0:	8c 17       	cp	r24, r28
     8b2:	9d 07       	cpc	r25, r29
     8b4:	94 f7       	brge	.-28     	; 0x89a <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	08 95       	ret

000008c0 <set_substring>:
			

//_______________________________________________________________________________________________//
	
	 void set_substring(){
			char * p1 = strstr (in_buf, "(");
     8c0:	80 e4       	ldi	r24, 0x40	; 64
     8c2:	97 e0       	ldi	r25, 0x07	; 7
     8c4:	68 e2       	ldi	r22, 0x28	; 40
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	0e 94 04 12 	call	0x2408	; 0x2408 <strchr>
			p1[strlen(p1) -1] = '\0';
     8cc:	e8 2f       	mov	r30, r24
     8ce:	f9 2f       	mov	r31, r25
     8d0:	df 01       	movw	r26, r30
     8d2:	0d 90       	ld	r0, X+
     8d4:	00 20       	and	r0, r0
     8d6:	e9 f7       	brne	.-6      	; 0x8d2 <set_substring+0x12>
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	ae 1b       	sub	r26, r30
     8dc:	bf 0b       	sbc	r27, r31
     8de:	a8 0f       	add	r26, r24
     8e0:	b9 1f       	adc	r27, r25
     8e2:	11 97       	sbiw	r26, 0x01	; 1
     8e4:	1c 92       	st	X, r1
			substring = p1 +1;
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	90 93 3d 07 	sts	0x073D, r25
     8ec:	80 93 3c 07 	sts	0x073C, r24
		}
     8f0:	08 95       	ret

000008f2 <get_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     8fa:	c0 91 a6 06 	lds	r28, 0x06A6
     8fe:	d0 91 a7 06 	lds	r29, 0x06A7
     902:	80 91 16 06 	lds	r24, 0x0616
     906:	90 91 17 06 	lds	r25, 0x0617
     90a:	8c 17       	cp	r24, r28
     90c:	9d 07       	cpc	r25, r29
     90e:	8c f0       	brlt	.+34     	; 0x932 <__stack+0x33>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     910:	8e 01       	movw	r16, r28
     912:	00 5f       	subi	r16, 0xF0	; 240
     914:	18 4f       	sbci	r17, 0xF8	; 248
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     916:	ce 01       	movw	r24, r28
     918:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     91c:	f8 01       	movw	r30, r16
     91e:	81 93       	st	Z+, r24
     920:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	char* get_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	80 91 16 06 	lds	r24, 0x0616
     928:	90 91 17 06 	lds	r25, 0x0617
     92c:	8c 17       	cp	r24, r28
     92e:	9d 07       	cpc	r25, r29
     930:	94 f7       	brge	.-28     	; 0x916 <__stack+0x17>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		return naamRes;
	}
     932:	80 e1       	ldi	r24, 0x10	; 16
     934:	97 e0       	ldi	r25, 0x07	; 7
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <get_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
     940:	cf 92       	push	r12
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     950:	e0 90 08 06 	lds	r14, 0x0608
     954:	f0 90 09 06 	lds	r15, 0x0609
     958:	80 91 14 06 	lds	r24, 0x0614
     95c:	90 91 15 06 	lds	r25, 0x0615
     960:	99 23       	and	r25, r25
     962:	ec f0       	brlt	.+58     	; 0x99e <get_Locatie+0x5e>
     964:	01 e0       	ldi	r16, 0x01	; 1
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	c0 e0       	ldi	r28, 0x00	; 0
     96a:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     96c:	0f 2e       	mov	r0, r31
     96e:	f1 ee       	ldi	r31, 0xE1	; 225
     970:	cf 2e       	mov	r12, r31
     972:	f6 e0       	ldi	r31, 0x06	; 6
     974:	df 2e       	mov	r13, r31
     976:	f0 2d       	mov	r31, r0
     978:	c7 01       	movw	r24, r14
     97a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     97e:	cc 0d       	add	r28, r12
     980:	dd 1d       	adc	r29, r13
     982:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     984:	08 94       	sec
     986:	e1 1c       	adc	r14, r1
     988:	f1 1c       	adc	r15, r1
     98a:	e8 01       	movw	r28, r16
     98c:	0f 5f       	subi	r16, 0xFF	; 255
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	80 91 14 06 	lds	r24, 0x0614
     994:	90 91 15 06 	lds	r25, 0x0615
     998:	8c 17       	cp	r24, r28
     99a:	9d 07       	cpc	r25, r29
     99c:	6c f7       	brge	.-38     	; 0x978 <get_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		return locatieRes;
	}
     99e:	81 ee       	ldi	r24, 0xE1	; 225
     9a0:	96 e0       	ldi	r25, 0x06	; 6
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	08 95       	ret

000009b4 <get_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     9c4:	e0 90 06 06 	lds	r14, 0x0606
     9c8:	f0 90 07 06 	lds	r15, 0x0607
     9cc:	80 91 12 06 	lds	r24, 0x0612
     9d0:	90 91 13 06 	lds	r25, 0x0613
     9d4:	99 23       	and	r25, r25
     9d6:	ec f0       	brlt	.+58     	; 0xa12 <get_Versie+0x5e>
     9d8:	01 e0       	ldi	r16, 0x01	; 1
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	c0 e0       	ldi	r28, 0x00	; 0
     9de:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     9e0:	0f 2e       	mov	r0, r31
     9e2:	fe e5       	ldi	r31, 0x5E	; 94
     9e4:	cf 2e       	mov	r12, r31
     9e6:	f7 e0       	ldi	r31, 0x07	; 7
     9e8:	df 2e       	mov	r13, r31
     9ea:	f0 2d       	mov	r31, r0
     9ec:	c7 01       	movw	r24, r14
     9ee:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     9f2:	cc 0d       	add	r28, r12
     9f4:	dd 1d       	adc	r29, r13
     9f6:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     9f8:	08 94       	sec
     9fa:	e1 1c       	adc	r14, r1
     9fc:	f1 1c       	adc	r15, r1
     9fe:	e8 01       	movw	r28, r16
     a00:	0f 5f       	subi	r16, 0xFF	; 255
     a02:	1f 4f       	sbci	r17, 0xFF	; 255
     a04:	80 91 12 06 	lds	r24, 0x0612
     a08:	90 91 13 06 	lds	r25, 0x0613
     a0c:	8c 17       	cp	r24, r28
     a0e:	9d 07       	cpc	r25, r29
     a10:	6c f7       	brge	.-38     	; 0x9ec <get_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		return versieRes;
	}
     a12:	8e e5       	ldi	r24, 0x5E	; 94
     a14:	97 e0       	ldi	r25, 0x07	; 7
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret

00000a28 <get_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     a38:	e0 90 04 06 	lds	r14, 0x0604
     a3c:	f0 90 05 06 	lds	r15, 0x0605
     a40:	80 91 10 06 	lds	r24, 0x0610
     a44:	90 91 11 06 	lds	r25, 0x0611
     a48:	99 23       	and	r25, r25
     a4a:	ec f0       	brlt	.+58     	; 0xa86 <get_grensTemp+0x5e>
     a4c:	01 e0       	ldi	r16, 0x01	; 1
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	c0 e0       	ldi	r28, 0x00	; 0
     a52:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     a54:	0f 2e       	mov	r0, r31
     a56:	fd e0       	ldi	r31, 0x0D	; 13
     a58:	cf 2e       	mov	r12, r31
     a5a:	f7 e0       	ldi	r31, 0x07	; 7
     a5c:	df 2e       	mov	r13, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	c7 01       	movw	r24, r14
     a62:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     a66:	cc 0d       	add	r28, r12
     a68:	dd 1d       	adc	r29, r13
     a6a:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     a6c:	08 94       	sec
     a6e:	e1 1c       	adc	r14, r1
     a70:	f1 1c       	adc	r15, r1
     a72:	e8 01       	movw	r28, r16
     a74:	0f 5f       	subi	r16, 0xFF	; 255
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	80 91 10 06 	lds	r24, 0x0610
     a7c:	90 91 11 06 	lds	r25, 0x0611
     a80:	8c 17       	cp	r24, r28
     a82:	9d 07       	cpc	r25, r29
     a84:	6c f7       	brge	.-38     	; 0xa60 <get_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	97 e0       	ldi	r25, 0x07	; 7
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	08 95       	ret

00000a9c <get_grensLight>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     aa8:	e0 90 02 06 	lds	r14, 0x0602
     aac:	f0 90 03 06 	lds	r15, 0x0603
     ab0:	80 91 0e 06 	lds	r24, 0x060E
     ab4:	90 91 0f 06 	lds	r25, 0x060F
     ab8:	99 23       	and	r25, r25
     aba:	bc f0       	brlt	.+46     	; 0xaea <get_grensLight+0x4e>
     abc:	01 e0       	ldi	r16, 0x01	; 1
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     ac4:	c7 01       	movw	r24, r14
     ac6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     aca:	ca 59       	subi	r28, 0x9A	; 154
     acc:	d8 4f       	sbci	r29, 0xF8	; 248
     ace:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     ad0:	08 94       	sec
     ad2:	e1 1c       	adc	r14, r1
     ad4:	f1 1c       	adc	r15, r1
     ad6:	e8 01       	movw	r28, r16
     ad8:	0f 5f       	subi	r16, 0xFF	; 255
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	80 91 0e 06 	lds	r24, 0x060E
     ae0:	90 91 0f 06 	lds	r25, 0x060F
     ae4:	8c 17       	cp	r24, r28
     ae6:	9d 07       	cpc	r25, r29
     ae8:	6c f7       	brge	.-38     	; 0xac4 <get_grensLight+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}
     aea:	86 e6       	ldi	r24, 0x66	; 102
     aec:	97 e0       	ldi	r25, 0x07	; 7
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <get_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     b08:	e0 90 00 06 	lds	r14, 0x0600
     b0c:	f0 90 01 06 	lds	r15, 0x0601
     b10:	80 91 0c 06 	lds	r24, 0x060C
     b14:	90 91 0d 06 	lds	r25, 0x060D
     b18:	99 23       	and	r25, r25
     b1a:	bc f0       	brlt	.+46     	; 0xb4a <get_minUnroll+0x4e>
     b1c:	01 e0       	ldi	r16, 0x01	; 1
     b1e:	10 e0       	ldi	r17, 0x00	; 0
     b20:	c0 e0       	ldi	r28, 0x00	; 0
     b22:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     b24:	c7 01       	movw	r24, r14
     b26:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     b2a:	ce 52       	subi	r28, 0x2E	; 46
     b2c:	d9 4f       	sbci	r29, 0xF9	; 249
     b2e:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     b30:	08 94       	sec
     b32:	e1 1c       	adc	r14, r1
     b34:	f1 1c       	adc	r15, r1
     b36:	e8 01       	movw	r28, r16
     b38:	0f 5f       	subi	r16, 0xFF	; 255
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	80 91 0c 06 	lds	r24, 0x060C
     b40:	90 91 0d 06 	lds	r25, 0x060D
     b44:	8c 17       	cp	r24, r28
     b46:	9d 07       	cpc	r25, r29
     b48:	6c f7       	brge	.-38     	; 0xb24 <get_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return minUnrollRes;
	}
     b4a:	82 ed       	ldi	r24, 0xD2	; 210
     b4c:	96 e0       	ldi	r25, 0x06	; 6
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	08 95       	ret

00000b5c <get_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b68:	e0 90 fe 05 	lds	r14, 0x05FE
     b6c:	f0 90 ff 05 	lds	r15, 0x05FF
     b70:	80 91 0a 06 	lds	r24, 0x060A
     b74:	90 91 0b 06 	lds	r25, 0x060B
     b78:	99 23       	and	r25, r25
     b7a:	bc f0       	brlt	.+46     	; 0xbaa <get_maxUnroll+0x4e>
     b7c:	01 e0       	ldi	r16, 0x01	; 1
     b7e:	10 e0       	ldi	r17, 0x00	; 0
     b80:	c0 e0       	ldi	r28, 0x00	; 0
     b82:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     b84:	c7 01       	movw	r24, r14
     b86:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__eerd_byte_m328p>
     b8a:	cc 56       	subi	r28, 0x6C	; 108
     b8c:	d8 4f       	sbci	r29, 0xF8	; 248
     b8e:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     b90:	08 94       	sec
     b92:	e1 1c       	adc	r14, r1
     b94:	f1 1c       	adc	r15, r1
     b96:	e8 01       	movw	r28, r16
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	80 91 0a 06 	lds	r24, 0x060A
     ba0:	90 91 0b 06 	lds	r25, 0x060B
     ba4:	8c 17       	cp	r24, r28
     ba6:	9d 07       	cpc	r25, r29
     ba8:	6c f7       	brge	.-38     	; 0xb84 <get_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return maxUnrollRes;
     baa:	84 e9       	ldi	r24, 0x94	; 148
     bac:	97 e0       	ldi	r25, 0x07	; 7
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	08 95       	ret

00000bbc <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
	ser_write("Please enter ID");
     be0:	8e e1       	ldi	r24, 0x1E	; 30
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     be8:	c0 e4       	ldi	r28, 0x40	; 64
     bea:	d7 e0       	ldi	r29, 0x07	; 7
     bec:	ce 01       	movw	r24, r28
     bee:	6e e1       	ldi	r22, 0x1E	; 30
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	0e 94 a3 08 	call	0x1146	; 0x1146 <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     bf8:	84 ef       	ldi	r24, 0xF4	; 244
     bfa:	95 e0       	ldi	r25, 0x05	; 5
     bfc:	be 01       	movw	r22, r28
     bfe:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     c02:	28 2f       	mov	r18, r24
     c04:	39 2f       	mov	r19, r25
	if(ret |= 0){
     c06:	21 15       	cp	r18, r1
     c08:	31 05       	cpc	r19, r1
     c0a:	29 f0       	breq	.+10     	; 0xc16 <protocolCom+0x5a>
		ser_writeln("504: Verkeerde ID");
     c0c:	8e e2       	ldi	r24, 0x2E	; 46
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     c14:	3d c2       	rjmp	.+1146   	; 0x1090 <protocolCom+0x4d4>
	}
	else{
		printf("200 kersthaan \n");
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <puts>
		ser_writeln("Please enter version");
     c1e:	8f e4       	ldi	r24, 0x4F	; 79
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
		ser_readln(in_buf, sizeof(in_buf), 1);
     c26:	80 e4       	ldi	r24, 0x40	; 64
     c28:	97 e0       	ldi	r25, 0x07	; 7
     c2a:	6e e1       	ldi	r22, 0x1E	; 30
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	0e 94 a3 08 	call	0x1146	; 0x1146 <ser_readln>
		if(strncmp("get_Versie()", in_buf, 1)){
     c34:	80 91 40 07 	lds	r24, 0x0740
     c38:	87 36       	cpi	r24, 0x67	; 103
     c3a:	09 f4       	brne	.+2      	; 0xc3e <protocolCom+0x82>
     c3c:	29 c2       	rjmp	.+1106   	; 0x1090 <protocolCom+0x4d4>
			ser_writeln("504 Wrong version");
     c3e:	84 e6       	ldi	r24, 0x64	; 100
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
			ser_writeln(get_Versie());
     c46:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_Versie>
     c4a:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
		//}
		//else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     c4e:	06 e7       	ldi	r16, 0x76	; 118
     c50:	11 e0       	ldi	r17, 0x01	; 1
				ser_readln(in_buf, sizeof(in_buf), 1);
     c52:	c0 e4       	ldi	r28, 0x40	; 64
     c54:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c56:	0f 2e       	mov	r0, r31
     c58:	ff e8       	ldi	r31, 0x8F	; 143
     c5a:	ef 2e       	mov	r14, r31
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	ff 2e       	mov	r15, r31
     c60:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     c62:	0f 2e       	mov	r0, r31
     c64:	f7 eb       	ldi	r31, 0xB7	; 183
     c66:	af 2e       	mov	r10, r31
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	bf 2e       	mov	r11, r31
     c6c:	f0 2d       	mov	r31, r0
				if ((getIn() % 2) == 0){
					ser_writeln("999 Zonnescherm is al opgerold!");
     c6e:	0f 2e       	mov	r0, r31
     c70:	fe eb       	ldi	r31, 0xBE	; 190
     c72:	2f 2e       	mov	r2, r31
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	3f 2e       	mov	r3, r31
     c78:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     c7a:	0f 2e       	mov	r0, r31
     c7c:	fe ed       	ldi	r31, 0xDE	; 222
     c7e:	cf 2e       	mov	r12, r31
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	df 2e       	mov	r13, r31
     c84:	f0 2d       	mov	r31, r0
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     c86:	0f 2e       	mov	r0, r31
     c88:	f5 ee       	ldi	r31, 0xE5	; 229
     c8a:	8f 2e       	mov	r8, r31
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
     c8e:	9f 2e       	mov	r9, r31
     c90:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c92:	0f 2e       	mov	r0, r31
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	6f 2e       	mov	r6, r31
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	7f 2e       	mov	r7, r31
     c9c:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c9e:	0f 2e       	mov	r0, r31
     ca0:	f0 e2       	ldi	r31, 0x20	; 32
     ca2:	4f 2e       	mov	r4, r31
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	5f 2e       	mov	r5, r31
     ca8:	f0 2d       	mov	r31, r0
			ser_writeln("504 Wrong version");
			ser_writeln(get_Versie());
		//}
		//else{
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
				ser_readln(in_buf, sizeof(in_buf), 1);
     cb0:	ce 01       	movw	r24, r28
     cb2:	6e e1       	ldi	r22, 0x1E	; 30
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 a3 08 	call	0x1146	; 0x1146 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     cbc:	c7 01       	movw	r24, r14
     cbe:	be 01       	movw	r22, r28
     cc0:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     cc4:	28 2f       	mov	r18, r24
     cc6:	39 2f       	mov	r19, r25
     cc8:	21 15       	cp	r18, r1
     cca:	31 05       	cpc	r19, r1
     ccc:	a1 f4       	brne	.+40     	; 0xcf6 <protocolCom+0x13a>
				if ((getIn() % 2) == 1){
     cce:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	91 05       	cpc	r25, r1
     cde:	21 f4       	brne	.+8      	; 0xce8 <protocolCom+0x12c>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     ce0:	86 e9       	ldi	r24, 0x96	; 150
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
				} if((getIn() % 2) == 0){
     ce8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
     cec:	80 fd       	sbrc	r24, 0
     cee:	1e c0       	rjmp	.+60     	; 0xd2c <protocolCom+0x170>
					uitrollen();
     cf0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <uitrollen>
     cf4:	1b c0       	rjmp	.+54     	; 0xd2c <protocolCom+0x170>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     cf6:	c5 01       	movw	r24, r10
     cf8:	be 01       	movw	r22, r28
     cfa:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     cfe:	28 2f       	mov	r18, r24
     d00:	39 2f       	mov	r19, r25
     d02:	21 15       	cp	r18, r1
     d04:	31 05       	cpc	r19, r1
     d06:	91 f4       	brne	.+36     	; 0xd2c <protocolCom+0x170>
				if ((getIn() % 2) == 0){
     d08:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
     d0c:	80 fd       	sbrc	r24, 0
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <protocolCom+0x15a>
					ser_writeln("999 Zonnescherm is al opgerold!");
     d10:	c1 01       	movw	r24, r2
     d12:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
				} if((getIn() % 2) == 1){
     d16:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
     d1a:	62 e0       	ldi	r22, 0x02	; 2
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	11 f4       	brne	.+4      	; 0xd2c <protocolCom+0x170>
					oprollen();
     d28:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     d2c:	c6 01       	movw	r24, r12
     d2e:	be 01       	movw	r22, r28
     d30:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     d34:	28 2f       	mov	r18, r24
     d36:	39 2f       	mov	r19, r25
     d38:	21 15       	cp	r18, r1
     d3a:	31 05       	cpc	r19, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <protocolCom+0x184>
     d3e:	b5 cf       	rjmp	.-150    	; 0xcaa <protocolCom+0xee>
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     d40:	c4 01       	movw	r24, r8
     d42:	be 01       	movw	r22, r28
     d44:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     d48:	28 2f       	mov	r18, r24
     d4a:	39 2f       	mov	r19, r25
     d4c:	21 15       	cp	r18, r1
     d4e:	31 05       	cpc	r19, r1
     d50:	e1 f4       	brne	.+56     	; 0xd8a <protocolCom+0x1ce>
				printf("202 TEMP= % 6.2f \n", getTemp());
     d52:	0e 94 71 01 	call	0x2e2	; 0x2e2 <getTemp>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <protocolCom+0x1a0>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <protocolCom+0x1a2>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <protocolCom+0x1a4>
     d60:	2e ee       	ldi	r18, 0xEE	; 238
     d62:	31 e0       	ldi	r19, 0x01	; 1
     d64:	ed b7       	in	r30, 0x3d	; 61
     d66:	fe b7       	in	r31, 0x3e	; 62
     d68:	32 83       	std	Z+2, r19	; 0x02
     d6a:	21 83       	std	Z+1, r18	; 0x01
     d6c:	83 83       	std	Z+3, r24	; 0x03
     d6e:	94 83       	std	Z+4, r25	; 0x04
     d70:	a5 83       	std	Z+5, r26	; 0x05
     d72:	b6 83       	std	Z+6, r27	; 0x06
     d74:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>
     d78:	8d b7       	in	r24, 0x3d	; 61
     d7a:	9e b7       	in	r25, 0x3e	; 62
     d7c:	06 96       	adiw	r24, 0x06	; 6
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	9e bf       	out	0x3e, r25	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	8d bf       	out	0x3d, r24	; 61
     d88:	90 cf       	rjmp	.-224    	; 0xcaa <protocolCom+0xee>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     d8a:	c3 01       	movw	r24, r6
     d8c:	be 01       	movw	r22, r28
     d8e:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     d92:	28 2f       	mov	r18, r24
     d94:	39 2f       	mov	r19, r25
     d96:	21 15       	cp	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	49 f4       	brne	.+18     	; 0xdae <protocolCom+0x1f2>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     d9c:	80 e1       	ldi	r24, 0x10	; 16
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     da4:	0e 94 14 05 	call	0xa28	; 0xa28 <get_grensTemp>
     da8:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     dac:	7e cf       	rjmp	.-260    	; 0xcaa <protocolCom+0xee>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     dae:	c2 01       	movw	r24, r4
     db0:	be 01       	movw	r22, r28
     db2:	4e e0       	ldi	r20, 0x0E	; 14
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
     dba:	28 2f       	mov	r18, r24
     dbc:	39 2f       	mov	r19, r25
     dbe:	21 15       	cp	r18, r1
     dc0:	31 05       	cpc	r19, r1
     dc2:	c9 f4       	brne	.+50     	; 0xdf6 <protocolCom+0x23a>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				ser_write("203 GRENS_TEMP: "), ser_write(get_grensTemp()), ser_write(" -> ");
     dc4:	82 e3       	ldi	r24, 0x32	; 50
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     dcc:	0e 94 14 05 	call	0xa28	; 0xa28 <get_grensTemp>
     dd0:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     dd4:	83 e4       	ldi	r24, 0x43	; 67
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
				set_substring();
     ddc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
				set_grensTemp(substring);
     de0:	80 91 3c 07 	lds	r24, 0x073C
     de4:	90 91 3d 07 	lds	r25, 0x073D
     de8:	0e 94 b4 03 	call	0x768	; 0x768 <set_grensTemp>
				ser_writeln(get_grensTemp());
     dec:	0e 94 14 05 	call	0xa28	; 0xa28 <get_grensTemp>
     df0:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     df4:	5a cf       	rjmp	.-332    	; 0xcaa <protocolCom+0xee>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     df6:	88 e4       	ldi	r24, 0x48	; 72
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	be 01       	movw	r22, r28
     dfc:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     e00:	28 2f       	mov	r18, r24
     e02:	39 2f       	mov	r19, r25
     e04:	21 15       	cp	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	c1 f4       	brne	.+48     	; 0xe3a <protocolCom+0x27e>
				printf("202 LIGHT %i \n", getLight());
     e0a:	0e 94 b8 01 	call	0x370	; 0x370 <getLight>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <protocolCom+0x254>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <protocolCom+0x256>
     e12:	ed b7       	in	r30, 0x3d	; 61
     e14:	fe b7       	in	r31, 0x3e	; 62
     e16:	31 96       	adiw	r30, 0x01	; 1
     e18:	22 e5       	ldi	r18, 0x52	; 82
     e1a:	32 e0       	ldi	r19, 0x02	; 2
     e1c:	ad b7       	in	r26, 0x3d	; 61
     e1e:	be b7       	in	r27, 0x3e	; 62
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	3c 93       	st	X, r19
     e24:	2e 93       	st	-X, r18
     e26:	11 97       	sbiw	r26, 0x01	; 1
     e28:	82 83       	std	Z+2, r24	; 0x02
     e2a:	13 82       	std	Z+3, r1	; 0x03
     e2c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	38 cf       	rjmp	.-400    	; 0xcaa <protocolCom+0xee>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     e3a:	81 e6       	ldi	r24, 0x61	; 97
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	be 01       	movw	r22, r28
     e40:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     e44:	28 2f       	mov	r18, r24
     e46:	39 2f       	mov	r19, r25
     e48:	21 15       	cp	r18, r1
     e4a:	31 05       	cpc	r19, r1
     e4c:	49 f4       	brne	.+18     	; 0xe60 <protocolCom+0x2a4>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     e4e:	81 e7       	ldi	r24, 0x71	; 113
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     e56:	0e 94 4e 05 	call	0xa9c	; 0xa9c <get_grensLight>
     e5a:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     e5e:	25 cf       	rjmp	.-438    	; 0xcaa <protocolCom+0xee>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     e60:	82 e8       	ldi	r24, 0x82	; 130
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	be 01       	movw	r22, r28
     e66:	4f e0       	ldi	r20, 0x0F	; 15
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
     e6e:	28 2f       	mov	r18, r24
     e70:	39 2f       	mov	r19, r25
     e72:	21 15       	cp	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	49 f4       	brne	.+18     	; 0xe8a <protocolCom+0x2ce>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				set_substring();
     e78:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
				set_grensLicht(substring);
     e7c:	80 91 3c 07 	lds	r24, 0x073C
     e80:	90 91 3d 07 	lds	r25, 0x073D
     e84:	0e 94 87 03 	call	0x70e	; 0x70e <set_grensLicht>
     e88:	10 cf       	rjmp	.-480    	; 0xcaa <protocolCom+0xee>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     e8a:	85 e9       	ldi	r24, 0x95	; 149
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	be 01       	movw	r22, r28
     e90:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     e94:	28 2f       	mov	r18, r24
     e96:	39 2f       	mov	r19, r25
     e98:	21 15       	cp	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	49 f4       	brne	.+18     	; 0xeb0 <protocolCom+0x2f4>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     e9e:	84 ea       	ldi	r24, 0xA4	; 164
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     ea6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <get_maxUnroll>
     eaa:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     eae:	fd ce       	rjmp	.-518    	; 0xcaa <protocolCom+0xee>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     eb0:	85 eb       	ldi	r24, 0xB5	; 181
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	be 01       	movw	r22, r28
     eb6:	4f e0       	ldi	r20, 0x0F	; 15
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
     ebe:	28 2f       	mov	r18, r24
     ec0:	39 2f       	mov	r19, r25
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	49 f4       	brne	.+18     	; 0xeda <protocolCom+0x31e>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				set_substring();
     ec8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
				set_maxUnroll(substring);
     ecc:	80 91 3c 07 	lds	r24, 0x073C
     ed0:	90 91 3d 07 	lds	r25, 0x073D
     ed4:	0e 94 2d 03 	call	0x65a	; 0x65a <set_maxUnroll>
     ed8:	e8 ce       	rjmp	.-560    	; 0xcaa <protocolCom+0xee>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     eda:	87 ec       	ldi	r24, 0xC7	; 199
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	be 01       	movw	r22, r28
     ee0:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     ee4:	28 2f       	mov	r18, r24
     ee6:	39 2f       	mov	r19, r25
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	49 f4       	brne	.+18     	; 0xf00 <protocolCom+0x344>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     eee:	86 ed       	ldi	r24, 0xD6	; 214
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     ef6:	0e 94 7e 05 	call	0xafc	; 0xafc <get_minUnroll>
     efa:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     efe:	d5 ce       	rjmp	.-598    	; 0xcaa <protocolCom+0xee>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     f00:	87 ee       	ldi	r24, 0xE7	; 231
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	be 01       	movw	r22, r28
     f06:	4f e0       	ldi	r20, 0x0F	; 15
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
     f0e:	28 2f       	mov	r18, r24
     f10:	39 2f       	mov	r19, r25
     f12:	21 15       	cp	r18, r1
     f14:	31 05       	cpc	r19, r1
     f16:	49 f4       	brne	.+18     	; 0xf2a <protocolCom+0x36e>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				set_substring();
     f18:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
				set_minUnroll(substring);
     f1c:	80 91 3c 07 	lds	r24, 0x073C
     f20:	90 91 3d 07 	lds	r25, 0x073D
     f24:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <set_minUnroll>
     f28:	c0 ce       	rjmp	.-640    	; 0xcaa <protocolCom+0xee>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     f2a:	89 ef       	ldi	r24, 0xF9	; 249
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	be 01       	movw	r22, r28
     f30:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     f34:	28 2f       	mov	r18, r24
     f36:	39 2f       	mov	r19, r25
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	49 f4       	brne	.+18     	; 0xf50 <protocolCom+0x394>
				ser_write("202 "),  ser_writeln(get_Naam());
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     f46:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_Naam>
     f4a:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     f4e:	ad ce       	rjmp	.-678    	; 0xcaa <protocolCom+0xee>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     f50:	87 e0       	ldi	r24, 0x07	; 7
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	be 01       	movw	r22, r28
     f56:	48 e0       	ldi	r20, 0x08	; 8
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
     f5e:	28 2f       	mov	r18, r24
     f60:	39 2f       	mov	r19, r25
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	69 f4       	brne	.+26     	; 0xf82 <protocolCom+0x3c6>
				set_substring();
     f68:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
				set_Naam(substring);
     f6c:	80 91 3c 07 	lds	r24, 0x073C
     f70:	90 91 3d 07 	lds	r25, 0x073D
     f74:	0e 94 3b 04 	call	0x876	; 0x876 <set_Naam>
				printf("200 OK \n");
     f78:	83 e1       	ldi	r24, 0x13	; 19
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <puts>
     f80:	94 ce       	rjmp	.-728    	; 0xcaa <protocolCom+0xee>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     f82:	8b e1       	ldi	r24, 0x1B	; 27
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	be 01       	movw	r22, r28
     f88:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     f8c:	28 2f       	mov	r18, r24
     f8e:	39 2f       	mov	r19, r25
     f90:	21 15       	cp	r18, r1
     f92:	31 05       	cpc	r19, r1
     f94:	49 f4       	brne	.+18     	; 0xfa8 <protocolCom+0x3ec>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     f9e:	0e 94 a0 04 	call	0x940	; 0x940 <get_Locatie>
     fa2:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     fa6:	81 ce       	rjmp	.-766    	; 0xcaa <protocolCom+0xee>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     fa8:	88 e2       	ldi	r24, 0x28	; 40
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	be 01       	movw	r22, r28
     fae:	4c e0       	ldi	r20, 0x0C	; 12
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
     fb6:	28 2f       	mov	r18, r24
     fb8:	39 2f       	mov	r19, r25
     fba:	21 15       	cp	r18, r1
     fbc:	31 05       	cpc	r19, r1
     fbe:	69 f4       	brne	.+26     	; 0xfda <protocolCom+0x41e>
				set_substring();
     fc0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
				set_Locatie(substring);
     fc4:	80 91 3c 07 	lds	r24, 0x073C
     fc8:	90 91 3d 07 	lds	r25, 0x073D
     fcc:	0e 94 0e 04 	call	0x81c	; 0x81c <set_Locatie>
				
				printf("200 OK \n");
     fd0:	83 e1       	ldi	r24, 0x13	; 19
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <puts>
     fd8:	68 ce       	rjmp	.-816    	; 0xcaa <protocolCom+0xee>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     fda:	88 e3       	ldi	r24, 0x38	; 56
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	be 01       	movw	r22, r28
     fe0:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
     fe4:	28 2f       	mov	r18, r24
     fe6:	39 2f       	mov	r19, r25
     fe8:	21 15       	cp	r18, r1
     fea:	31 05       	cpc	r19, r1
     fec:	49 f4       	brne	.+18     	; 0x1000 <protocolCom+0x444>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     fee:	84 e4       	ldi	r24, 0x44	; 68
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
     ff6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_Versie>
     ffa:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
     ffe:	55 ce       	rjmp	.-854    	; 0xcaa <protocolCom+0xee>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
    1000:	81 e5       	ldi	r24, 0x51	; 81
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	be 01       	movw	r22, r28
    1006:	4c e0       	ldi	r20, 0x0C	; 12
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 18 12 	call	0x2430	; 0x2430 <strncmp>
    100e:	28 2f       	mov	r18, r24
    1010:	39 2f       	mov	r19, r25
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	69 f4       	brne	.+26     	; 0x1032 <protocolCom+0x476>
					set_substring();
    1018:	0e 94 60 04 	call	0x8c0	; 0x8c0 <set_substring>
					set_Versie(substring);
    101c:	80 91 3c 07 	lds	r24, 0x073C
    1020:	90 91 3d 07 	lds	r25, 0x073D
    1024:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <set_Versie>
					
					printf("200 OK \n");
    1028:	83 e1       	ldi	r24, 0x13	; 19
    102a:	93 e0       	ldi	r25, 0x03	; 3
    102c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <puts>
    1030:	3c ce       	rjmp	.-904    	; 0xcaa <protocolCom+0xee>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
    1032:	80 e6       	ldi	r24, 0x60	; 96
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	be 01       	movw	r22, r28
    1038:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
    103c:	28 2f       	mov	r18, r24
    103e:	39 2f       	mov	r19, r25
    1040:	21 15       	cp	r18, r1
    1042:	31 05       	cpc	r19, r1
    1044:	89 f4       	brne	.+34     	; 0x1068 <protocolCom+0x4ac>
				if ((getIn() % 2) == 1){
    1046:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getIn>
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	11 f4       	brne	.+4      	; 0x105c <protocolCom+0x4a0>
					uitrollen();					
    1058:	0e 94 ee 08 	call	0x11dc	; 0x11dc <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
    105c:	85 e6       	ldi	r24, 0x65	; 101
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
				abort();
    1064:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
    1068:	8e e6       	ldi	r24, 0x6E	; 110
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	be 01       	movw	r22, r28
    106e:	0e 94 0f 12 	call	0x241e	; 0x241e <strcmp>
    1072:	28 2f       	mov	r18, r24
    1074:	39 2f       	mov	r19, r25
    1076:	21 15       	cp	r18, r1
    1078:	31 05       	cpc	r19, r1
    107a:	29 f4       	brne	.+10     	; 0x1086 <protocolCom+0x4ca>
				ser_writeln(
    107c:	83 e7       	ldi	r24, 0x73	; 115
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
    1084:	12 ce       	rjmp	.-988    	; 0xcaa <protocolCom+0xee>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
    1086:	88 eb       	ldi	r24, 0xB8	; 184
    1088:	95 e0       	ldi	r25, 0x05	; 5
    108a:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
    108e:	0d ce       	rjmp	.-998    	; 0xcaa <protocolCom+0xee>
			}		
			}
			}
			}	
			}					
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	5f 90       	pop	r5
    10ae:	4f 90       	pop	r4
    10b0:	3f 90       	pop	r3
    10b2:	2f 90       	pop	r2
    10b4:	08 95       	ret

000010b6 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
    10b6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
    10ba:	83 e3       	ldi	r24, 0x33	; 51
    10bc:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
    10c0:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    10c4:	88 e1       	ldi	r24, 0x18	; 24
    10c6:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
    10d0:	88 e1       	ldi	r24, 0x18	; 24
    10d2:	96 e0       	ldi	r25, 0x06	; 6
    10d4:	90 93 c9 07 	sts	0x07C9, r25
    10d8:	80 93 c8 07 	sts	0x07C8, r24
}
    10dc:	08 95       	ret

000010de <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    10de:	e0 ec       	ldi	r30, 0xC0	; 192
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	90 81       	ld	r25, Z
    10e4:	95 ff       	sbrs	r25, 5
    10e6:	fd cf       	rjmp	.-6      	; 0x10e2 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
    10e8:	80 93 c6 00 	sts	0x00C6, r24
}
    10ec:	08 95       	ret

000010ee <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
    10ee:	cf 93       	push	r28
    10f0:	c8 2f       	mov	r28, r24
	if (c=='\n') {
    10f2:	8a 30       	cpi	r24, 0x0A	; 10
    10f4:	19 f4       	brne	.+6      	; 0x10fc <ser_stdio_putchar+0xe>
		ser_transmit('\r');
    10f6:	8d e0       	ldi	r24, 0x0D	; 13
    10f8:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>
	}
	ser_transmit(c);
    10fc:	8c 2f       	mov	r24, r28
    10fe:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>
}
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    1106:	e0 ec       	ldi	r30, 0xC0	; 192
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 23       	and	r24, r24
    110e:	ec f7       	brge	.-6      	; 0x110a <ser_receive+0x4>
	return UDR0;
    1110:	80 91 c6 00 	lds	r24, 0x00C6
}
    1114:	08 95       	ret

00001116 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
    111c:	88 81       	ld	r24, Y
    111e:	88 23       	and	r24, r24
    1120:	31 f0       	breq	.+12     	; 0x112e <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
    1122:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
    1124:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
    1128:	89 91       	ld	r24, Y+
    112a:	88 23       	and	r24, r24
    112c:	d9 f7       	brne	.-10     	; 0x1124 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
    1134:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
	ser_transmit('\r');
    1138:	8d e0       	ldi	r24, 0x0D	; 13
    113a:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>
	ser_transmit('\n');
    113e:	8a e0       	ldi	r24, 0x0A	; 10
    1140:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>
}
    1144:	08 95       	ret

00001146 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
    1146:	af 92       	push	r10
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	5c 01       	movw	r10, r24
    115c:	d4 2f       	mov	r29, r20
	int i=0;
    115e:	6c 01       	movw	r12, r24
    1160:	ee 24       	eor	r14, r14
    1162:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1164:	8b 01       	movw	r16, r22
    1166:	01 50       	subi	r16, 0x01	; 1
    1168:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    116a:	0e 94 83 08 	call	0x1106	; 0x1106 <ser_receive>
    116e:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    1170:	dd 23       	and	r29, r29
    1172:	11 f0       	breq	.+4      	; 0x1178 <ser_readln+0x32>
    1174:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>
		if (c=='\r') {
    1178:	cd 30       	cpi	r28, 0x0D	; 13
    117a:	31 f4       	brne	.+12     	; 0x1188 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    117c:	dd 23       	and	r29, r29
    117e:	71 f0       	breq	.+28     	; 0x119c <ser_readln+0x56>
    1180:	8a e0       	ldi	r24, 0x0A	; 10
    1182:	0e 94 6f 08 	call	0x10de	; 0x10de <ser_transmit>
    1186:	0a c0       	rjmp	.+20     	; 0x119c <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1188:	e0 16       	cp	r14, r16
    118a:	f1 06       	cpc	r15, r17
    118c:	74 f7       	brge	.-36     	; 0x116a <ser_readln+0x24>
			buf[i++]=c;
    118e:	f6 01       	movw	r30, r12
    1190:	c1 93       	st	Z+, r28
    1192:	6f 01       	movw	r12, r30
    1194:	08 94       	sec
    1196:	e1 1c       	adc	r14, r1
    1198:	f1 1c       	adc	r15, r1
    119a:	e7 cf       	rjmp	.-50     	; 0x116a <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    119c:	ea 0c       	add	r14, r10
    119e:	fb 1c       	adc	r15, r11
    11a0:	f7 01       	movw	r30, r14
    11a2:	10 82       	st	Z, r1
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	08 95       	ret

000011ba <getIn>:



int getIn(){
	return IN;
}
    11ba:	80 91 a8 06 	lds	r24, 0x06A8
    11be:	90 91 a9 06 	lds	r25, 0x06A9
    11c2:	08 95       	ret

000011c4 <init_scherm_ports>:


init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    11c4:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    11c6:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    11c8:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    11ca:	e9 e6       	ldi	r30, 0x69	; 105
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    11d8:	2d 9a       	sbi	0x05, 5	; 5
}
    11da:	08 95       	ret

000011dc <uitrollen>:

void uitrollen(){
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
	IN = (IN + 1);
    11e8:	80 91 a8 06 	lds	r24, 0x06A8
    11ec:	90 91 a9 06 	lds	r25, 0x06A9
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	90 93 a9 06 	sts	0x06A9, r25
    11f6:	80 93 a8 06 	sts	0x06A8, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    11fa:	86 e2       	ldi	r24, 0x26	; 38
    11fc:	96 e0       	ldi	r25, 0x06	; 6
    11fe:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1202:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1204:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1206:	0e 94 ae 05 	call	0xb5c	; 0xb5c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strtod>
    1212:	6b 01       	movw	r12, r22
    1214:	7c 01       	movw	r14, r24
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
    1216:	cc e2       	ldi	r28, 0x2C	; 44
    1218:	d6 e0       	ldi	r29, 0x06	; 6
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    121a:	22 c0       	rjmp	.+68     	; 0x1260 <uitrollen+0x84>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    121c:	2c 9a       	sbi	0x05, 4	; 5
    121e:	8f e3       	ldi	r24, 0x3F	; 63
    1220:	9d e0       	ldi	r25, 0x0D	; 13
    1222:	a3 e0       	ldi	r26, 0x03	; 3
    1224:	81 50       	subi	r24, 0x01	; 1
    1226:	90 40       	sbci	r25, 0x00	; 0
    1228:	a0 40       	sbci	r26, 0x00	; 0
    122a:	e1 f7       	brne	.-8      	; 0x1224 <uitrollen+0x48>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <uitrollen+0x52>
    122e:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1230:	2c 98       	cbi	0x05, 4	; 5
    1232:	8f e3       	ldi	r24, 0x3F	; 63
    1234:	9d e0       	ldi	r25, 0x0D	; 13
    1236:	a3 e0       	ldi	r26, 0x03	; 3
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	90 40       	sbci	r25, 0x00	; 0
    123c:	a0 40       	sbci	r26, 0x00	; 0
    123e:	e1 f7       	brne	.-8      	; 0x1238 <uitrollen+0x5c>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <uitrollen+0x66>
    1242:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
    1244:	80 91 c4 07 	lds	r24, 0x07C4
    1248:	90 91 c5 07 	lds	r25, 0x07C5
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	90 93 c5 07 	sts	0x07C5, r25
    1252:	80 93 c4 07 	sts	0x07C4, r24
		if (j % 2 == 0){ser_write(".");}
    1256:	80 fd       	sbrc	r24, 0
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <uitrollen+0x84>
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1260:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1264:	a7 01       	movw	r20, r14
    1266:	96 01       	movw	r18, r12
    1268:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__cmpsf2>
    126c:	88 23       	and	r24, r24
    126e:	b4 f2       	brlt	.-84     	; 0x121c <uitrollen+0x40>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    1270:	10 92 c5 07 	sts	0x07C5, r1
    1274:	10 92 c4 07 	sts	0x07C4, r1
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    1278:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	00 d0       	rcall	.+0      	; 0x1282 <uitrollen+0xa6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <uitrollen+0xa8>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <uitrollen+0xaa>
    1286:	2e e2       	ldi	r18, 0x2E	; 46
    1288:	36 e0       	ldi	r19, 0x06	; 6
    128a:	ed b7       	in	r30, 0x3d	; 61
    128c:	fe b7       	in	r31, 0x3e	; 62
    128e:	32 83       	std	Z+2, r19	; 0x02
    1290:	21 83       	std	Z+1, r18	; 0x01
    1292:	83 83       	std	Z+3, r24	; 0x03
    1294:	94 83       	std	Z+4, r25	; 0x04
    1296:	a5 83       	std	Z+5, r26	; 0x05
    1298:	b6 83       	std	Z+6, r27	; 0x06
    129a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    129e:	8d b7       	in	r24, 0x3d	; 61
    12a0:	9e b7       	in	r25, 0x3e	; 62
    12a2:	06 96       	adiw	r24, 0x06	; 6
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	9e bf       	out	0x3e, r25	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	8d bf       	out	0x3d, r24	; 61
    12ae:	82 e5       	ldi	r24, 0x52	; 82
    12b0:	96 e0       	ldi	r25, 0x06	; 6
    12b2:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
    12b6:	8f e3       	ldi	r24, 0x3F	; 63
    12b8:	9d e0       	ldi	r25, 0x0D	; 13
    12ba:	a3 e0       	ldi	r26, 0x03	; 3
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	90 40       	sbci	r25, 0x00	; 0
    12c0:	a0 40       	sbci	r26, 0x00	; 0
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <uitrollen+0xe0>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <uitrollen+0xea>
    12c6:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	08 95       	ret

000012d6 <oprollen>:
	
	


void oprollen(){
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
	IN = (IN + 1);
    12e6:	80 91 a8 06 	lds	r24, 0x06A8
    12ea:	90 91 a9 06 	lds	r25, 0x06A9
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	90 93 a9 06 	sts	0x06A9, r25
    12f4:	80 93 a8 06 	sts	0x06A8, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    12f8:	80 e7       	ldi	r24, 0x70	; 112
    12fa:	96 e0       	ldi	r25, 0x06	; 6
    12fc:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    1300:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1302:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1304:	0e 94 7e 05 	call	0xafc	; 0xafc <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strtod>
    1310:	6b 01       	movw	r12, r22
    1312:	7c 01       	movw	r14, r24
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		printf("% 6.2f", x);
    1314:	c5 e7       	ldi	r28, 0x75	; 117
    1316:	d6 e0       	ldi	r29, 0x06	; 6
		printf("% 6.2f", getDistance());

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    1318:	0c e2       	ldi	r16, 0x2C	; 44
    131a:	16 e0       	ldi	r17, 0x06	; 6
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    131c:	56 c0       	rjmp	.+172    	; 0x13ca <oprollen+0xf4>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    131e:	2c 9a       	sbi	0x05, 4	; 5
    1320:	8f e3       	ldi	r24, 0x3F	; 63
    1322:	9d e0       	ldi	r25, 0x0D	; 13
    1324:	a3 e0       	ldi	r26, 0x03	; 3
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	90 40       	sbci	r25, 0x00	; 0
    132a:	a0 40       	sbci	r26, 0x00	; 0
    132c:	e1 f7       	brne	.-8      	; 0x1326 <oprollen+0x50>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <oprollen+0x5a>
    1330:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1332:	2c 98       	cbi	0x05, 4	; 5
    1334:	8f e3       	ldi	r24, 0x3F	; 63
    1336:	9d e0       	ldi	r25, 0x0D	; 13
    1338:	a3 e0       	ldi	r26, 0x03	; 3
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	90 40       	sbci	r25, 0x00	; 0
    133e:	a0 40       	sbci	r26, 0x00	; 0
    1340:	e1 f7       	brne	.-8      	; 0x133a <oprollen+0x64>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <oprollen+0x6e>
    1344:	00 00       	nop
		_delay_ms(DELAY_MS);
		printf("% 6.2f", x);
    1346:	00 d0       	rcall	.+0      	; 0x1348 <oprollen+0x72>
    1348:	00 d0       	rcall	.+0      	; 0x134a <oprollen+0x74>
    134a:	00 d0       	rcall	.+0      	; 0x134c <oprollen+0x76>
    134c:	ad b7       	in	r26, 0x3d	; 61
    134e:	be b7       	in	r27, 0x3e	; 62
    1350:	12 96       	adiw	r26, 0x02	; 2
    1352:	dc 93       	st	X, r29
    1354:	ce 93       	st	-X, r28
    1356:	11 97       	sbiw	r26, 0x01	; 1
    1358:	ed b7       	in	r30, 0x3d	; 61
    135a:	fe b7       	in	r31, 0x3e	; 62
    135c:	c3 82       	std	Z+3, r12	; 0x03
    135e:	d4 82       	std	Z+4, r13	; 0x04
    1360:	e5 82       	std	Z+5, r14	; 0x05
    1362:	f6 82       	std	Z+6, r15	; 0x06
    1364:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>
		printf("% 6.2f", getDistance());
    1368:	2d b7       	in	r18, 0x3d	; 61
    136a:	3e b7       	in	r19, 0x3e	; 62
    136c:	2a 5f       	subi	r18, 0xFA	; 250
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	3e bf       	out	0x3e, r19	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	2d bf       	out	0x3d, r18	; 61
    137a:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	00 d0       	rcall	.+0      	; 0x1384 <oprollen+0xae>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <oprollen+0xb0>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <oprollen+0xb2>
    1388:	ed b7       	in	r30, 0x3d	; 61
    138a:	fe b7       	in	r31, 0x3e	; 62
    138c:	d2 83       	std	Z+2, r29	; 0x02
    138e:	c1 83       	std	Z+1, r28	; 0x01
    1390:	83 83       	std	Z+3, r24	; 0x03
    1392:	94 83       	std	Z+4, r25	; 0x04
    1394:	a5 83       	std	Z+5, r26	; 0x05
    1396:	b6 83       	std	Z+6, r27	; 0x06
    1398:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>

		j += 1;
    139c:	80 91 c4 07 	lds	r24, 0x07C4
    13a0:	90 91 c5 07 	lds	r25, 0x07C5
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	90 93 c5 07 	sts	0x07C5, r25
    13aa:	80 93 c4 07 	sts	0x07C4, r24
		if (j % 2 == 0){ser_write(".");}
    13ae:	2d b7       	in	r18, 0x3d	; 61
    13b0:	3e b7       	in	r19, 0x3e	; 62
    13b2:	2a 5f       	subi	r18, 0xFA	; 250
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	3e bf       	out	0x3e, r19	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	2d bf       	out	0x3d, r18	; 61
    13c0:	80 fd       	sbrc	r24, 0
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <oprollen+0xf4>
    13c4:	c8 01       	movw	r24, r16
    13c6:	0e 94 8b 08 	call	0x1116	; 0x1116 <ser_write>
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    13ca:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13ce:	a7 01       	movw	r20, r14
    13d0:	96 01       	movw	r18, r12
    13d2:	0e 94 41 0b 	call	0x1682	; 0x1682 <__gesf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	0c f4       	brge	.+2      	; 0x13dc <oprollen+0x106>
    13da:	a1 cf       	rjmp	.-190    	; 0x131e <oprollen+0x48>
		printf("% 6.2f", getDistance());

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    13dc:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
	j = 0;
    13e0:	10 92 c5 07 	sts	0x07C5, r1
    13e4:	10 92 c4 07 	sts	0x07C4, r1
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    13e8:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <oprollen+0x11c>
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <oprollen+0x11e>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <oprollen+0x120>
    13f6:	2e e2       	ldi	r18, 0x2E	; 46
    13f8:	36 e0       	ldi	r19, 0x06	; 6
    13fa:	ed b7       	in	r30, 0x3d	; 61
    13fc:	fe b7       	in	r31, 0x3e	; 62
    13fe:	32 83       	std	Z+2, r19	; 0x02
    1400:	21 83       	std	Z+1, r18	; 0x01
    1402:	83 83       	std	Z+3, r24	; 0x03
    1404:	94 83       	std	Z+4, r25	; 0x04
    1406:	a5 83       	std	Z+5, r26	; 0x05
    1408:	b6 83       	std	Z+6, r27	; 0x06
    140a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    140e:	2d b7       	in	r18, 0x3d	; 61
    1410:	3e b7       	in	r19, 0x3e	; 62
    1412:	2a 5f       	subi	r18, 0xFA	; 250
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	3e bf       	out	0x3e, r19	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	2d bf       	out	0x3d, r18	; 61
    1420:	8c e7       	ldi	r24, 0x7C	; 124
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	0e 94 9a 08 	call	0x1134	; 0x1134 <ser_writeln>
    1428:	8f e3       	ldi	r24, 0x3F	; 63
    142a:	9d e0       	ldi	r25, 0x0D	; 13
    142c:	a3 e0       	ldi	r26, 0x03	; 3
    142e:	81 50       	subi	r24, 0x01	; 1
    1430:	90 40       	sbci	r25, 0x00	; 0
    1432:	a0 40       	sbci	r26, 0x00	; 0
    1434:	e1 f7       	brne	.-8      	; 0x142e <oprollen+0x158>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <oprollen+0x162>
    1438:	00 00       	nop
	_delay_ms(DELAY_MS);
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	08 95       	ret

0000144c <__subsf3>:
    144c:	50 58       	subi	r21, 0x80	; 128

0000144e <__addsf3>:
    144e:	bb 27       	eor	r27, r27
    1450:	aa 27       	eor	r26, r26
    1452:	0e d0       	rcall	.+28     	; 0x1470 <__addsf3x>
    1454:	dc c0       	rjmp	.+440    	; 0x160e <__fp_round>
    1456:	cd d0       	rcall	.+410    	; 0x15f2 <__fp_pscA>
    1458:	30 f0       	brcs	.+12     	; 0x1466 <__addsf3+0x18>
    145a:	d2 d0       	rcall	.+420    	; 0x1600 <__fp_pscB>
    145c:	20 f0       	brcs	.+8      	; 0x1466 <__addsf3+0x18>
    145e:	31 f4       	brne	.+12     	; 0x146c <__addsf3+0x1e>
    1460:	9f 3f       	cpi	r25, 0xFF	; 255
    1462:	11 f4       	brne	.+4      	; 0x1468 <__addsf3+0x1a>
    1464:	1e f4       	brtc	.+6      	; 0x146c <__addsf3+0x1e>
    1466:	c2 c0       	rjmp	.+388    	; 0x15ec <__fp_nan>
    1468:	0e f4       	brtc	.+2      	; 0x146c <__addsf3+0x1e>
    146a:	e0 95       	com	r30
    146c:	e7 fb       	bst	r30, 7
    146e:	b8 c0       	rjmp	.+368    	; 0x15e0 <__fp_inf>

00001470 <__addsf3x>:
    1470:	e9 2f       	mov	r30, r25
    1472:	de d0       	rcall	.+444    	; 0x1630 <__fp_split3>
    1474:	80 f3       	brcs	.-32     	; 0x1456 <__addsf3+0x8>
    1476:	ba 17       	cp	r27, r26
    1478:	62 07       	cpc	r22, r18
    147a:	73 07       	cpc	r23, r19
    147c:	84 07       	cpc	r24, r20
    147e:	95 07       	cpc	r25, r21
    1480:	18 f0       	brcs	.+6      	; 0x1488 <__addsf3x+0x18>
    1482:	71 f4       	brne	.+28     	; 0x14a0 <__addsf3x+0x30>
    1484:	9e f5       	brtc	.+102    	; 0x14ec <__addsf3x+0x7c>
    1486:	f6 c0       	rjmp	.+492    	; 0x1674 <__fp_zero>
    1488:	0e f4       	brtc	.+2      	; 0x148c <__addsf3x+0x1c>
    148a:	e0 95       	com	r30
    148c:	0b 2e       	mov	r0, r27
    148e:	ba 2f       	mov	r27, r26
    1490:	a0 2d       	mov	r26, r0
    1492:	0b 01       	movw	r0, r22
    1494:	b9 01       	movw	r22, r18
    1496:	90 01       	movw	r18, r0
    1498:	0c 01       	movw	r0, r24
    149a:	ca 01       	movw	r24, r20
    149c:	a0 01       	movw	r20, r0
    149e:	11 24       	eor	r1, r1
    14a0:	ff 27       	eor	r31, r31
    14a2:	59 1b       	sub	r21, r25
    14a4:	99 f0       	breq	.+38     	; 0x14cc <__addsf3x+0x5c>
    14a6:	59 3f       	cpi	r21, 0xF9	; 249
    14a8:	50 f4       	brcc	.+20     	; 0x14be <__addsf3x+0x4e>
    14aa:	50 3e       	cpi	r21, 0xE0	; 224
    14ac:	68 f1       	brcs	.+90     	; 0x1508 <__addsf3x+0x98>
    14ae:	1a 16       	cp	r1, r26
    14b0:	f0 40       	sbci	r31, 0x00	; 0
    14b2:	a2 2f       	mov	r26, r18
    14b4:	23 2f       	mov	r18, r19
    14b6:	34 2f       	mov	r19, r20
    14b8:	44 27       	eor	r20, r20
    14ba:	58 5f       	subi	r21, 0xF8	; 248
    14bc:	f3 cf       	rjmp	.-26     	; 0x14a4 <__addsf3x+0x34>
    14be:	46 95       	lsr	r20
    14c0:	37 95       	ror	r19
    14c2:	27 95       	ror	r18
    14c4:	a7 95       	ror	r26
    14c6:	f0 40       	sbci	r31, 0x00	; 0
    14c8:	53 95       	inc	r21
    14ca:	c9 f7       	brne	.-14     	; 0x14be <__addsf3x+0x4e>
    14cc:	7e f4       	brtc	.+30     	; 0x14ec <__addsf3x+0x7c>
    14ce:	1f 16       	cp	r1, r31
    14d0:	ba 0b       	sbc	r27, r26
    14d2:	62 0b       	sbc	r22, r18
    14d4:	73 0b       	sbc	r23, r19
    14d6:	84 0b       	sbc	r24, r20
    14d8:	ba f0       	brmi	.+46     	; 0x1508 <__addsf3x+0x98>
    14da:	91 50       	subi	r25, 0x01	; 1
    14dc:	a1 f0       	breq	.+40     	; 0x1506 <__addsf3x+0x96>
    14de:	ff 0f       	add	r31, r31
    14e0:	bb 1f       	adc	r27, r27
    14e2:	66 1f       	adc	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	88 1f       	adc	r24, r24
    14e8:	c2 f7       	brpl	.-16     	; 0x14da <__addsf3x+0x6a>
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <__addsf3x+0x98>
    14ec:	ba 0f       	add	r27, r26
    14ee:	62 1f       	adc	r22, r18
    14f0:	73 1f       	adc	r23, r19
    14f2:	84 1f       	adc	r24, r20
    14f4:	48 f4       	brcc	.+18     	; 0x1508 <__addsf3x+0x98>
    14f6:	87 95       	ror	r24
    14f8:	77 95       	ror	r23
    14fa:	67 95       	ror	r22
    14fc:	b7 95       	ror	r27
    14fe:	f7 95       	ror	r31
    1500:	9e 3f       	cpi	r25, 0xFE	; 254
    1502:	08 f0       	brcs	.+2      	; 0x1506 <__addsf3x+0x96>
    1504:	b3 cf       	rjmp	.-154    	; 0x146c <__addsf3+0x1e>
    1506:	93 95       	inc	r25
    1508:	88 0f       	add	r24, r24
    150a:	08 f0       	brcs	.+2      	; 0x150e <__addsf3x+0x9e>
    150c:	99 27       	eor	r25, r25
    150e:	ee 0f       	add	r30, r30
    1510:	97 95       	ror	r25
    1512:	87 95       	ror	r24
    1514:	08 95       	ret

00001516 <__cmpsf2>:
    1516:	40 d0       	rcall	.+128    	; 0x1598 <__fp_cmp>
    1518:	08 f4       	brcc	.+2      	; 0x151c <__cmpsf2+0x6>
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	08 95       	ret

0000151e <__floatunsisf>:
    151e:	e8 94       	clt
    1520:	09 c0       	rjmp	.+18     	; 0x1534 <__floatsisf+0x12>

00001522 <__floatsisf>:
    1522:	97 fb       	bst	r25, 7
    1524:	3e f4       	brtc	.+14     	; 0x1534 <__floatsisf+0x12>
    1526:	90 95       	com	r25
    1528:	80 95       	com	r24
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	99 23       	and	r25, r25
    1536:	a9 f0       	breq	.+42     	; 0x1562 <__floatsisf+0x40>
    1538:	f9 2f       	mov	r31, r25
    153a:	96 e9       	ldi	r25, 0x96	; 150
    153c:	bb 27       	eor	r27, r27
    153e:	93 95       	inc	r25
    1540:	f6 95       	lsr	r31
    1542:	87 95       	ror	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	b7 95       	ror	r27
    154a:	f1 11       	cpse	r31, r1
    154c:	f8 cf       	rjmp	.-16     	; 0x153e <__floatsisf+0x1c>
    154e:	fa f4       	brpl	.+62     	; 0x158e <__floatsisf+0x6c>
    1550:	bb 0f       	add	r27, r27
    1552:	11 f4       	brne	.+4      	; 0x1558 <__floatsisf+0x36>
    1554:	60 ff       	sbrs	r22, 0
    1556:	1b c0       	rjmp	.+54     	; 0x158e <__floatsisf+0x6c>
    1558:	6f 5f       	subi	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	16 c0       	rjmp	.+44     	; 0x158e <__floatsisf+0x6c>
    1562:	88 23       	and	r24, r24
    1564:	11 f0       	breq	.+4      	; 0x156a <__floatsisf+0x48>
    1566:	96 e9       	ldi	r25, 0x96	; 150
    1568:	11 c0       	rjmp	.+34     	; 0x158c <__floatsisf+0x6a>
    156a:	77 23       	and	r23, r23
    156c:	21 f0       	breq	.+8      	; 0x1576 <__floatsisf+0x54>
    156e:	9e e8       	ldi	r25, 0x8E	; 142
    1570:	87 2f       	mov	r24, r23
    1572:	76 2f       	mov	r23, r22
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <__floatsisf+0x5e>
    1576:	66 23       	and	r22, r22
    1578:	71 f0       	breq	.+28     	; 0x1596 <__floatsisf+0x74>
    157a:	96 e8       	ldi	r25, 0x86	; 134
    157c:	86 2f       	mov	r24, r22
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	2a f0       	brmi	.+10     	; 0x158e <__floatsisf+0x6c>
    1584:	9a 95       	dec	r25
    1586:	66 0f       	add	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	da f7       	brpl	.-10     	; 0x1584 <__floatsisf+0x62>
    158e:	88 0f       	add	r24, r24
    1590:	96 95       	lsr	r25
    1592:	87 95       	ror	r24
    1594:	97 f9       	bld	r25, 7
    1596:	08 95       	ret

00001598 <__fp_cmp>:
    1598:	99 0f       	add	r25, r25
    159a:	00 08       	sbc	r0, r0
    159c:	55 0f       	add	r21, r21
    159e:	aa 0b       	sbc	r26, r26
    15a0:	e0 e8       	ldi	r30, 0x80	; 128
    15a2:	fe ef       	ldi	r31, 0xFE	; 254
    15a4:	16 16       	cp	r1, r22
    15a6:	17 06       	cpc	r1, r23
    15a8:	e8 07       	cpc	r30, r24
    15aa:	f9 07       	cpc	r31, r25
    15ac:	c0 f0       	brcs	.+48     	; 0x15de <__fp_cmp+0x46>
    15ae:	12 16       	cp	r1, r18
    15b0:	13 06       	cpc	r1, r19
    15b2:	e4 07       	cpc	r30, r20
    15b4:	f5 07       	cpc	r31, r21
    15b6:	98 f0       	brcs	.+38     	; 0x15de <__fp_cmp+0x46>
    15b8:	62 1b       	sub	r22, r18
    15ba:	73 0b       	sbc	r23, r19
    15bc:	84 0b       	sbc	r24, r20
    15be:	95 0b       	sbc	r25, r21
    15c0:	39 f4       	brne	.+14     	; 0x15d0 <__fp_cmp+0x38>
    15c2:	0a 26       	eor	r0, r26
    15c4:	61 f0       	breq	.+24     	; 0x15de <__fp_cmp+0x46>
    15c6:	23 2b       	or	r18, r19
    15c8:	24 2b       	or	r18, r20
    15ca:	25 2b       	or	r18, r21
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <__fp_cmp+0x3e>
    15ce:	08 95       	ret
    15d0:	0a 26       	eor	r0, r26
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <__fp_cmp+0x3e>
    15d4:	a1 40       	sbci	r26, 0x01	; 1
    15d6:	a6 95       	lsr	r26
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	81 1d       	adc	r24, r1
    15dc:	81 1d       	adc	r24, r1
    15de:	08 95       	ret

000015e0 <__fp_inf>:
    15e0:	97 f9       	bld	r25, 7
    15e2:	9f 67       	ori	r25, 0x7F	; 127
    15e4:	80 e8       	ldi	r24, 0x80	; 128
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	08 95       	ret

000015ec <__fp_nan>:
    15ec:	9f ef       	ldi	r25, 0xFF	; 255
    15ee:	80 ec       	ldi	r24, 0xC0	; 192
    15f0:	08 95       	ret

000015f2 <__fp_pscA>:
    15f2:	00 24       	eor	r0, r0
    15f4:	0a 94       	dec	r0
    15f6:	16 16       	cp	r1, r22
    15f8:	17 06       	cpc	r1, r23
    15fa:	18 06       	cpc	r1, r24
    15fc:	09 06       	cpc	r0, r25
    15fe:	08 95       	ret

00001600 <__fp_pscB>:
    1600:	00 24       	eor	r0, r0
    1602:	0a 94       	dec	r0
    1604:	12 16       	cp	r1, r18
    1606:	13 06       	cpc	r1, r19
    1608:	14 06       	cpc	r1, r20
    160a:	05 06       	cpc	r0, r21
    160c:	08 95       	ret

0000160e <__fp_round>:
    160e:	09 2e       	mov	r0, r25
    1610:	03 94       	inc	r0
    1612:	00 0c       	add	r0, r0
    1614:	11 f4       	brne	.+4      	; 0x161a <__fp_round+0xc>
    1616:	88 23       	and	r24, r24
    1618:	52 f0       	brmi	.+20     	; 0x162e <__fp_round+0x20>
    161a:	bb 0f       	add	r27, r27
    161c:	40 f4       	brcc	.+16     	; 0x162e <__fp_round+0x20>
    161e:	bf 2b       	or	r27, r31
    1620:	11 f4       	brne	.+4      	; 0x1626 <__fp_round+0x18>
    1622:	60 ff       	sbrs	r22, 0
    1624:	04 c0       	rjmp	.+8      	; 0x162e <__fp_round+0x20>
    1626:	6f 5f       	subi	r22, 0xFF	; 255
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	8f 4f       	sbci	r24, 0xFF	; 255
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	08 95       	ret

00001630 <__fp_split3>:
    1630:	57 fd       	sbrc	r21, 7
    1632:	90 58       	subi	r25, 0x80	; 128
    1634:	44 0f       	add	r20, r20
    1636:	55 1f       	adc	r21, r21
    1638:	59 f0       	breq	.+22     	; 0x1650 <__fp_splitA+0x10>
    163a:	5f 3f       	cpi	r21, 0xFF	; 255
    163c:	71 f0       	breq	.+28     	; 0x165a <__fp_splitA+0x1a>
    163e:	47 95       	ror	r20

00001640 <__fp_splitA>:
    1640:	88 0f       	add	r24, r24
    1642:	97 fb       	bst	r25, 7
    1644:	99 1f       	adc	r25, r25
    1646:	61 f0       	breq	.+24     	; 0x1660 <__fp_splitA+0x20>
    1648:	9f 3f       	cpi	r25, 0xFF	; 255
    164a:	79 f0       	breq	.+30     	; 0x166a <__fp_splitA+0x2a>
    164c:	87 95       	ror	r24
    164e:	08 95       	ret
    1650:	12 16       	cp	r1, r18
    1652:	13 06       	cpc	r1, r19
    1654:	14 06       	cpc	r1, r20
    1656:	55 1f       	adc	r21, r21
    1658:	f2 cf       	rjmp	.-28     	; 0x163e <__fp_split3+0xe>
    165a:	46 95       	lsr	r20
    165c:	f1 df       	rcall	.-30     	; 0x1640 <__fp_splitA>
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <__fp_splitA+0x30>
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	18 06       	cpc	r1, r24
    1666:	99 1f       	adc	r25, r25
    1668:	f1 cf       	rjmp	.-30     	; 0x164c <__fp_splitA+0xc>
    166a:	86 95       	lsr	r24
    166c:	71 05       	cpc	r23, r1
    166e:	61 05       	cpc	r22, r1
    1670:	08 94       	sec
    1672:	08 95       	ret

00001674 <__fp_zero>:
    1674:	e8 94       	clt

00001676 <__fp_szero>:
    1676:	bb 27       	eor	r27, r27
    1678:	66 27       	eor	r22, r22
    167a:	77 27       	eor	r23, r23
    167c:	cb 01       	movw	r24, r22
    167e:	97 f9       	bld	r25, 7
    1680:	08 95       	ret

00001682 <__gesf2>:
    1682:	8a df       	rcall	.-236    	; 0x1598 <__fp_cmp>
    1684:	08 f4       	brcc	.+2      	; 0x1688 <__gesf2+0x6>
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	08 95       	ret

0000168a <__mulsf3>:
    168a:	0b d0       	rcall	.+22     	; 0x16a2 <__mulsf3x>
    168c:	c0 cf       	rjmp	.-128    	; 0x160e <__fp_round>
    168e:	b1 df       	rcall	.-158    	; 0x15f2 <__fp_pscA>
    1690:	28 f0       	brcs	.+10     	; 0x169c <__mulsf3+0x12>
    1692:	b6 df       	rcall	.-148    	; 0x1600 <__fp_pscB>
    1694:	18 f0       	brcs	.+6      	; 0x169c <__mulsf3+0x12>
    1696:	95 23       	and	r25, r21
    1698:	09 f0       	breq	.+2      	; 0x169c <__mulsf3+0x12>
    169a:	a2 cf       	rjmp	.-188    	; 0x15e0 <__fp_inf>
    169c:	a7 cf       	rjmp	.-178    	; 0x15ec <__fp_nan>
    169e:	11 24       	eor	r1, r1
    16a0:	ea cf       	rjmp	.-44     	; 0x1676 <__fp_szero>

000016a2 <__mulsf3x>:
    16a2:	c6 df       	rcall	.-116    	; 0x1630 <__fp_split3>
    16a4:	a0 f3       	brcs	.-24     	; 0x168e <__mulsf3+0x4>

000016a6 <__mulsf3_pse>:
    16a6:	95 9f       	mul	r25, r21
    16a8:	d1 f3       	breq	.-12     	; 0x169e <__mulsf3+0x14>
    16aa:	95 0f       	add	r25, r21
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	55 1f       	adc	r21, r21
    16b0:	62 9f       	mul	r22, r18
    16b2:	f0 01       	movw	r30, r0
    16b4:	72 9f       	mul	r23, r18
    16b6:	bb 27       	eor	r27, r27
    16b8:	f0 0d       	add	r31, r0
    16ba:	b1 1d       	adc	r27, r1
    16bc:	63 9f       	mul	r22, r19
    16be:	aa 27       	eor	r26, r26
    16c0:	f0 0d       	add	r31, r0
    16c2:	b1 1d       	adc	r27, r1
    16c4:	aa 1f       	adc	r26, r26
    16c6:	64 9f       	mul	r22, r20
    16c8:	66 27       	eor	r22, r22
    16ca:	b0 0d       	add	r27, r0
    16cc:	a1 1d       	adc	r26, r1
    16ce:	66 1f       	adc	r22, r22
    16d0:	82 9f       	mul	r24, r18
    16d2:	22 27       	eor	r18, r18
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	62 1f       	adc	r22, r18
    16da:	73 9f       	mul	r23, r19
    16dc:	b0 0d       	add	r27, r0
    16de:	a1 1d       	adc	r26, r1
    16e0:	62 1f       	adc	r22, r18
    16e2:	83 9f       	mul	r24, r19
    16e4:	a0 0d       	add	r26, r0
    16e6:	61 1d       	adc	r22, r1
    16e8:	22 1f       	adc	r18, r18
    16ea:	74 9f       	mul	r23, r20
    16ec:	33 27       	eor	r19, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	23 1f       	adc	r18, r19
    16f4:	84 9f       	mul	r24, r20
    16f6:	60 0d       	add	r22, r0
    16f8:	21 1d       	adc	r18, r1
    16fa:	82 2f       	mov	r24, r18
    16fc:	76 2f       	mov	r23, r22
    16fe:	6a 2f       	mov	r22, r26
    1700:	11 24       	eor	r1, r1
    1702:	9f 57       	subi	r25, 0x7F	; 127
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	8a f0       	brmi	.+34     	; 0x172a <__mulsf3_pse+0x84>
    1708:	e1 f0       	breq	.+56     	; 0x1742 <__mulsf3_pse+0x9c>
    170a:	88 23       	and	r24, r24
    170c:	4a f0       	brmi	.+18     	; 0x1720 <__mulsf3_pse+0x7a>
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	bb 1f       	adc	r27, r27
    1714:	66 1f       	adc	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	88 1f       	adc	r24, r24
    171a:	91 50       	subi	r25, 0x01	; 1
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	a9 f7       	brne	.-22     	; 0x170a <__mulsf3_pse+0x64>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	70 f0       	brcs	.+28     	; 0x1742 <__mulsf3_pse+0x9c>
    1726:	5c cf       	rjmp	.-328    	; 0x15e0 <__fp_inf>
    1728:	a6 cf       	rjmp	.-180    	; 0x1676 <__fp_szero>
    172a:	5f 3f       	cpi	r21, 0xFF	; 255
    172c:	ec f3       	brlt	.-6      	; 0x1728 <__mulsf3_pse+0x82>
    172e:	98 3e       	cpi	r25, 0xE8	; 232
    1730:	dc f3       	brlt	.-10     	; 0x1728 <__mulsf3_pse+0x82>
    1732:	86 95       	lsr	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	b7 95       	ror	r27
    173a:	f7 95       	ror	r31
    173c:	e7 95       	ror	r30
    173e:	9f 5f       	subi	r25, 0xFF	; 255
    1740:	c1 f7       	brne	.-16     	; 0x1732 <__mulsf3_pse+0x8c>
    1742:	fe 2b       	or	r31, r30
    1744:	88 0f       	add	r24, r24
    1746:	91 1d       	adc	r25, r1
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	97 f9       	bld	r25, 7
    174e:	08 95       	ret

00001750 <vfprintf>:
    1750:	a5 e1       	ldi	r26, 0x15	; 21
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ee ea       	ldi	r30, 0xAE	; 174
    1756:	fb e0       	ldi	r31, 0x0B	; 11
    1758:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__prologue_saves__>
    175c:	4c 01       	movw	r8, r24
    175e:	7f 87       	std	Y+15, r23	; 0x0f
    1760:	6e 87       	std	Y+14, r22	; 0x0e
    1762:	fc 01       	movw	r30, r24
    1764:	17 82       	std	Z+7, r1	; 0x07
    1766:	16 82       	std	Z+6, r1	; 0x06
    1768:	83 81       	ldd	r24, Z+3	; 0x03
    176a:	81 fd       	sbrc	r24, 1
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <vfprintf+0x26>
    176e:	76 c3       	rjmp	.+1772   	; 0x1e5c <vfprintf+0x70c>
    1770:	4c 85       	ldd	r20, Y+12	; 0x0c
    1772:	5d 85       	ldd	r21, Y+13	; 0x0d
    1774:	04 c0       	rjmp	.+8      	; 0x177e <vfprintf+0x2e>
    1776:	1e 01       	movw	r2, r28
    1778:	08 94       	sec
    177a:	21 1c       	adc	r2, r1
    177c:	31 1c       	adc	r3, r1
    177e:	f4 01       	movw	r30, r8
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	ee 85       	ldd	r30, Y+14	; 0x0e
    1784:	ff 85       	ldd	r31, Y+15	; 0x0f
    1786:	93 fd       	sbrc	r25, 3
    1788:	85 91       	lpm	r24, Z+
    178a:	93 ff       	sbrs	r25, 3
    178c:	81 91       	ld	r24, Z+
    178e:	ff 87       	std	Y+15, r31	; 0x0f
    1790:	ee 87       	std	Y+14, r30	; 0x0e
    1792:	88 23       	and	r24, r24
    1794:	09 f4       	brne	.+2      	; 0x1798 <vfprintf+0x48>
    1796:	5e c3       	rjmp	.+1724   	; 0x1e54 <vfprintf+0x704>
    1798:	85 32       	cpi	r24, 0x25	; 37
    179a:	41 f4       	brne	.+16     	; 0x17ac <vfprintf+0x5c>
    179c:	93 fd       	sbrc	r25, 3
    179e:	85 91       	lpm	r24, Z+
    17a0:	93 ff       	sbrs	r25, 3
    17a2:	81 91       	ld	r24, Z+
    17a4:	ff 87       	std	Y+15, r31	; 0x0f
    17a6:	ee 87       	std	Y+14, r30	; 0x0e
    17a8:	85 32       	cpi	r24, 0x25	; 37
    17aa:	59 f4       	brne	.+22     	; 0x17c2 <vfprintf+0x72>
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b4 01       	movw	r22, r8
    17b0:	4c 8b       	std	Y+20, r20	; 0x14
    17b2:	5d 8b       	std	Y+21, r21	; 0x15
    17b4:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    17b8:	4c 89       	ldd	r20, Y+20	; 0x14
    17ba:	5d 89       	ldd	r21, Y+21	; 0x15
    17bc:	5d 87       	std	Y+13, r21	; 0x0d
    17be:	4c 87       	std	Y+12, r20	; 0x0c
    17c0:	d7 cf       	rjmp	.-82     	; 0x1770 <vfprintf+0x20>
    17c2:	ff 24       	eor	r15, r15
    17c4:	dd 24       	eor	r13, r13
    17c6:	10 e0       	ldi	r17, 0x00	; 0
    17c8:	10 32       	cpi	r17, 0x20	; 32
    17ca:	b0 f4       	brcc	.+44     	; 0x17f8 <vfprintf+0xa8>
    17cc:	8b 32       	cpi	r24, 0x2B	; 43
    17ce:	69 f0       	breq	.+26     	; 0x17ea <vfprintf+0x9a>
    17d0:	8c 32       	cpi	r24, 0x2C	; 44
    17d2:	28 f4       	brcc	.+10     	; 0x17de <vfprintf+0x8e>
    17d4:	80 32       	cpi	r24, 0x20	; 32
    17d6:	51 f0       	breq	.+20     	; 0x17ec <vfprintf+0x9c>
    17d8:	83 32       	cpi	r24, 0x23	; 35
    17da:	71 f4       	brne	.+28     	; 0x17f8 <vfprintf+0xa8>
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <vfprintf+0xa4>
    17de:	8d 32       	cpi	r24, 0x2D	; 45
    17e0:	39 f0       	breq	.+14     	; 0x17f0 <vfprintf+0xa0>
    17e2:	80 33       	cpi	r24, 0x30	; 48
    17e4:	49 f4       	brne	.+18     	; 0x17f8 <vfprintf+0xa8>
    17e6:	11 60       	ori	r17, 0x01	; 1
    17e8:	2c c0       	rjmp	.+88     	; 0x1842 <vfprintf+0xf2>
    17ea:	12 60       	ori	r17, 0x02	; 2
    17ec:	14 60       	ori	r17, 0x04	; 4
    17ee:	29 c0       	rjmp	.+82     	; 0x1842 <vfprintf+0xf2>
    17f0:	18 60       	ori	r17, 0x08	; 8
    17f2:	27 c0       	rjmp	.+78     	; 0x1842 <vfprintf+0xf2>
    17f4:	10 61       	ori	r17, 0x10	; 16
    17f6:	25 c0       	rjmp	.+74     	; 0x1842 <vfprintf+0xf2>
    17f8:	17 fd       	sbrc	r17, 7
    17fa:	2e c0       	rjmp	.+92     	; 0x1858 <vfprintf+0x108>
    17fc:	28 2f       	mov	r18, r24
    17fe:	20 53       	subi	r18, 0x30	; 48
    1800:	2a 30       	cpi	r18, 0x0A	; 10
    1802:	98 f4       	brcc	.+38     	; 0x182a <vfprintf+0xda>
    1804:	16 ff       	sbrs	r17, 6
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <vfprintf+0xc8>
    1808:	8f 2d       	mov	r24, r15
    180a:	88 0f       	add	r24, r24
    180c:	f8 2e       	mov	r15, r24
    180e:	ff 0c       	add	r15, r15
    1810:	ff 0c       	add	r15, r15
    1812:	f8 0e       	add	r15, r24
    1814:	f2 0e       	add	r15, r18
    1816:	15 c0       	rjmp	.+42     	; 0x1842 <vfprintf+0xf2>
    1818:	8d 2d       	mov	r24, r13
    181a:	88 0f       	add	r24, r24
    181c:	d8 2e       	mov	r13, r24
    181e:	dd 0c       	add	r13, r13
    1820:	dd 0c       	add	r13, r13
    1822:	d8 0e       	add	r13, r24
    1824:	d2 0e       	add	r13, r18
    1826:	10 62       	ori	r17, 0x20	; 32
    1828:	0c c0       	rjmp	.+24     	; 0x1842 <vfprintf+0xf2>
    182a:	8e 32       	cpi	r24, 0x2E	; 46
    182c:	21 f4       	brne	.+8      	; 0x1836 <vfprintf+0xe6>
    182e:	16 fd       	sbrc	r17, 6
    1830:	11 c3       	rjmp	.+1570   	; 0x1e54 <vfprintf+0x704>
    1832:	10 64       	ori	r17, 0x40	; 64
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <vfprintf+0xf2>
    1836:	8c 36       	cpi	r24, 0x6C	; 108
    1838:	11 f4       	brne	.+4      	; 0x183e <vfprintf+0xee>
    183a:	10 68       	ori	r17, 0x80	; 128
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0xf2>
    183e:	88 36       	cpi	r24, 0x68	; 104
    1840:	59 f4       	brne	.+22     	; 0x1858 <vfprintf+0x108>
    1842:	ee 85       	ldd	r30, Y+14	; 0x0e
    1844:	ff 85       	ldd	r31, Y+15	; 0x0f
    1846:	93 fd       	sbrc	r25, 3
    1848:	85 91       	lpm	r24, Z+
    184a:	93 ff       	sbrs	r25, 3
    184c:	81 91       	ld	r24, Z+
    184e:	ff 87       	std	Y+15, r31	; 0x0f
    1850:	ee 87       	std	Y+14, r30	; 0x0e
    1852:	88 23       	and	r24, r24
    1854:	09 f0       	breq	.+2      	; 0x1858 <vfprintf+0x108>
    1856:	b8 cf       	rjmp	.-144    	; 0x17c8 <vfprintf+0x78>
    1858:	98 2f       	mov	r25, r24
    185a:	95 54       	subi	r25, 0x45	; 69
    185c:	93 30       	cpi	r25, 0x03	; 3
    185e:	18 f4       	brcc	.+6      	; 0x1866 <vfprintf+0x116>
    1860:	10 61       	ori	r17, 0x10	; 16
    1862:	80 5e       	subi	r24, 0xE0	; 224
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <vfprintf+0x122>
    1866:	98 2f       	mov	r25, r24
    1868:	95 56       	subi	r25, 0x65	; 101
    186a:	93 30       	cpi	r25, 0x03	; 3
    186c:	08 f0       	brcs	.+2      	; 0x1870 <vfprintf+0x120>
    186e:	a2 c1       	rjmp	.+836    	; 0x1bb4 <vfprintf+0x464>
    1870:	1f 7e       	andi	r17, 0xEF	; 239
    1872:	16 fd       	sbrc	r17, 6
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x12a>
    1876:	e6 e0       	ldi	r30, 0x06	; 6
    1878:	fe 2e       	mov	r15, r30
    187a:	1f 73       	andi	r17, 0x3F	; 63
    187c:	85 36       	cpi	r24, 0x65	; 101
    187e:	11 f4       	brne	.+4      	; 0x1884 <vfprintf+0x134>
    1880:	10 64       	ori	r17, 0x40	; 64
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <vfprintf+0x140>
    1884:	86 36       	cpi	r24, 0x66	; 102
    1886:	11 f4       	brne	.+4      	; 0x188c <vfprintf+0x13c>
    1888:	10 68       	ori	r17, 0x80	; 128
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <vfprintf+0x140>
    188c:	f1 10       	cpse	r15, r1
    188e:	fa 94       	dec	r15
    1890:	17 ff       	sbrs	r17, 7
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <vfprintf+0x152>
    1894:	fb e3       	ldi	r31, 0x3B	; 59
    1896:	ff 15       	cp	r31, r15
    1898:	48 f0       	brcs	.+18     	; 0x18ac <vfprintf+0x15c>
    189a:	ef 2c       	mov	r14, r15
    189c:	e3 94       	inc	r14
    189e:	27 e0       	ldi	r18, 0x07	; 7
    18a0:	0d c0       	rjmp	.+26     	; 0x18bc <vfprintf+0x16c>
    18a2:	27 e0       	ldi	r18, 0x07	; 7
    18a4:	2f 15       	cp	r18, r15
    18a6:	30 f0       	brcs	.+12     	; 0x18b4 <vfprintf+0x164>
    18a8:	2f 2d       	mov	r18, r15
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <vfprintf+0x16a>
    18ac:	27 e0       	ldi	r18, 0x07	; 7
    18ae:	7c e3       	ldi	r23, 0x3C	; 60
    18b0:	e7 2e       	mov	r14, r23
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <vfprintf+0x16c>
    18b4:	27 e0       	ldi	r18, 0x07	; 7
    18b6:	67 e0       	ldi	r22, 0x07	; 7
    18b8:	f6 2e       	mov	r15, r22
    18ba:	ee 24       	eor	r14, r14
    18bc:	ca 01       	movw	r24, r20
    18be:	04 96       	adiw	r24, 0x04	; 4
    18c0:	9d 87       	std	Y+13, r25	; 0x0d
    18c2:	8c 87       	std	Y+12, r24	; 0x0c
    18c4:	fa 01       	movw	r30, r20
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	a1 01       	movw	r20, r2
    18d0:	0e 2d       	mov	r16, r14
    18d2:	0e 94 01 11 	call	0x2202	; 0x2202 <__ftoa_engine>
    18d6:	5c 01       	movw	r10, r24
    18d8:	c9 80       	ldd	r12, Y+1	; 0x01
    18da:	2c 2d       	mov	r18, r12
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	39 8b       	std	Y+17, r19	; 0x11
    18e0:	28 8b       	std	Y+16, r18	; 0x10
    18e2:	c0 fe       	sbrs	r12, 0
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <vfprintf+0x19c>
    18e6:	38 89       	ldd	r19, Y+16	; 0x10
    18e8:	33 ff       	sbrs	r19, 3
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <vfprintf+0x1a8>
    18ec:	11 fd       	sbrc	r17, 1
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0x1ac>
    18f0:	12 ff       	sbrs	r17, 2
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <vfprintf+0x1b0>
    18f4:	00 e2       	ldi	r16, 0x20	; 32
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <vfprintf+0x1b2>
    18f8:	0d e2       	ldi	r16, 0x2D	; 45
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <vfprintf+0x1b2>
    18fc:	0b e2       	ldi	r16, 0x2B	; 43
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <vfprintf+0x1b2>
    1900:	00 e0       	ldi	r16, 0x00	; 0
    1902:	88 89       	ldd	r24, Y+16	; 0x10
    1904:	99 89       	ldd	r25, Y+17	; 0x11
    1906:	8c 70       	andi	r24, 0x0C	; 12
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	09 f4       	brne	.+2      	; 0x1910 <vfprintf+0x1c0>
    190e:	3c c0       	rjmp	.+120    	; 0x1988 <vfprintf+0x238>
    1910:	00 23       	and	r16, r16
    1912:	11 f0       	breq	.+4      	; 0x1918 <vfprintf+0x1c8>
    1914:	84 e0       	ldi	r24, 0x04	; 4
    1916:	01 c0       	rjmp	.+2      	; 0x191a <vfprintf+0x1ca>
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	8d 15       	cp	r24, r13
    191c:	58 f4       	brcc	.+22     	; 0x1934 <vfprintf+0x1e4>
    191e:	d8 1a       	sub	r13, r24
    1920:	13 fd       	sbrc	r17, 3
    1922:	09 c0       	rjmp	.+18     	; 0x1936 <vfprintf+0x1e6>
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	b4 01       	movw	r22, r8
    192a:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    192e:	da 94       	dec	r13
    1930:	c9 f7       	brne	.-14     	; 0x1924 <vfprintf+0x1d4>
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <vfprintf+0x1e6>
    1934:	dd 24       	eor	r13, r13
    1936:	00 23       	and	r16, r16
    1938:	29 f0       	breq	.+10     	; 0x1944 <vfprintf+0x1f4>
    193a:	80 2f       	mov	r24, r16
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	b4 01       	movw	r22, r8
    1940:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1944:	88 89       	ldd	r24, Y+16	; 0x10
    1946:	83 fd       	sbrc	r24, 3
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <vfprintf+0x204>
    194a:	3c e6       	ldi	r19, 0x6C	; 108
    194c:	e3 2e       	mov	r14, r19
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	f3 2e       	mov	r15, r19
    1952:	11 c0       	rjmp	.+34     	; 0x1976 <vfprintf+0x226>
    1954:	28 e6       	ldi	r18, 0x68	; 104
    1956:	e2 2e       	mov	r14, r18
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	f2 2e       	mov	r15, r18
    195c:	0c c0       	rjmp	.+24     	; 0x1976 <vfprintf+0x226>
    195e:	01 15       	cp	r16, r1
    1960:	11 05       	cpc	r17, r1
    1962:	09 f0       	breq	.+2      	; 0x1966 <vfprintf+0x216>
    1964:	80 52       	subi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	b4 01       	movw	r22, r8
    196a:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    196e:	08 94       	sec
    1970:	e1 1c       	adc	r14, r1
    1972:	f1 1c       	adc	r15, r1
    1974:	04 c0       	rjmp	.+8      	; 0x197e <vfprintf+0x22e>
    1976:	01 2f       	mov	r16, r17
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	00 71       	andi	r16, 0x10	; 16
    197c:	10 70       	andi	r17, 0x00	; 0
    197e:	f7 01       	movw	r30, r14
    1980:	84 91       	lpm	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	61 f7       	brne	.-40     	; 0x195e <vfprintf+0x20e>
    1986:	63 c2       	rjmp	.+1222   	; 0x1e4e <vfprintf+0x6fe>
    1988:	17 ff       	sbrs	r17, 7
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <vfprintf+0x258>
    198c:	ea 0c       	add	r14, r10
    198e:	f8 89       	ldd	r31, Y+16	; 0x10
    1990:	f4 ff       	sbrs	r31, 4
    1992:	04 c0       	rjmp	.+8      	; 0x199c <vfprintf+0x24c>
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	81 33       	cpi	r24, 0x31	; 49
    1998:	09 f4       	brne	.+2      	; 0x199c <vfprintf+0x24c>
    199a:	ea 94       	dec	r14
    199c:	1e 14       	cp	r1, r14
    199e:	4c f5       	brge	.+82     	; 0x19f2 <vfprintf+0x2a2>
    19a0:	28 e0       	ldi	r18, 0x08	; 8
    19a2:	2e 15       	cp	r18, r14
    19a4:	48 f1       	brcs	.+82     	; 0x19f8 <vfprintf+0x2a8>
    19a6:	2c c0       	rjmp	.+88     	; 0x1a00 <vfprintf+0x2b0>
    19a8:	16 fd       	sbrc	r17, 6
    19aa:	2a c0       	rjmp	.+84     	; 0x1a00 <vfprintf+0x2b0>
    19ac:	8f 2d       	mov	r24, r15
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	8a 15       	cp	r24, r10
    19b2:	9b 05       	cpc	r25, r11
    19b4:	44 f0       	brlt	.+16     	; 0x19c6 <vfprintf+0x276>
    19b6:	3c ef       	ldi	r19, 0xFC	; 252
    19b8:	a3 16       	cp	r10, r19
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	b3 06       	cpc	r11, r19
    19be:	1c f0       	brlt	.+6      	; 0x19c6 <vfprintf+0x276>
    19c0:	10 68       	ori	r17, 0x80	; 128
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <vfprintf+0x276>
    19c4:	fa 94       	dec	r15
    19c6:	ff 20       	and	r15, r15
    19c8:	49 f0       	breq	.+18     	; 0x19dc <vfprintf+0x28c>
    19ca:	e2 e0       	ldi	r30, 0x02	; 2
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	ec 0f       	add	r30, r28
    19d0:	fd 1f       	adc	r31, r29
    19d2:	ef 0d       	add	r30, r15
    19d4:	f1 1d       	adc	r31, r1
    19d6:	80 81       	ld	r24, Z
    19d8:	80 33       	cpi	r24, 0x30	; 48
    19da:	a1 f3       	breq	.-24     	; 0x19c4 <vfprintf+0x274>
    19dc:	17 ff       	sbrs	r17, 7
    19de:	10 c0       	rjmp	.+32     	; 0x1a00 <vfprintf+0x2b0>
    19e0:	ef 2c       	mov	r14, r15
    19e2:	e3 94       	inc	r14
    19e4:	8f 2d       	mov	r24, r15
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a8 16       	cp	r10, r24
    19ea:	b9 06       	cpc	r11, r25
    19ec:	44 f4       	brge	.+16     	; 0x19fe <vfprintf+0x2ae>
    19ee:	fa 18       	sub	r15, r10
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <vfprintf+0x2b0>
    19f2:	ee 24       	eor	r14, r14
    19f4:	e3 94       	inc	r14
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <vfprintf+0x2b0>
    19f8:	98 e0       	ldi	r25, 0x08	; 8
    19fa:	e9 2e       	mov	r14, r25
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <vfprintf+0x2b0>
    19fe:	ff 24       	eor	r15, r15
    1a00:	17 ff       	sbrs	r17, 7
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <vfprintf+0x2c2>
    1a04:	1a 14       	cp	r1, r10
    1a06:	1b 04       	cpc	r1, r11
    1a08:	3c f4       	brge	.+14     	; 0x1a18 <vfprintf+0x2c8>
    1a0a:	95 01       	movw	r18, r10
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <vfprintf+0x2cc>
    1a12:	25 e0       	ldi	r18, 0x05	; 5
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x2cc>
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	00 23       	and	r16, r16
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <vfprintf+0x2d4>
    1a20:	2f 5f       	subi	r18, 0xFF	; 255
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	ff 20       	and	r15, r15
    1a26:	29 f0       	breq	.+10     	; 0x1a32 <vfprintf+0x2e2>
    1a28:	8f 2d       	mov	r24, r15
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	28 0f       	add	r18, r24
    1a30:	39 1f       	adc	r19, r25
    1a32:	8d 2d       	mov	r24, r13
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	28 17       	cp	r18, r24
    1a38:	39 07       	cpc	r19, r25
    1a3a:	14 f4       	brge	.+4      	; 0x1a40 <vfprintf+0x2f0>
    1a3c:	d2 1a       	sub	r13, r18
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <vfprintf+0x2f2>
    1a40:	dd 24       	eor	r13, r13
    1a42:	61 2e       	mov	r6, r17
    1a44:	77 24       	eor	r7, r7
    1a46:	c3 01       	movw	r24, r6
    1a48:	89 70       	andi	r24, 0x09	; 9
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	49 f4       	brne	.+18     	; 0x1a62 <vfprintf+0x312>
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <vfprintf+0x30e>
    1a52:	80 e2       	ldi	r24, 0x20	; 32
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b4 01       	movw	r22, r8
    1a58:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1a5c:	da 94       	dec	r13
    1a5e:	dd 20       	and	r13, r13
    1a60:	c1 f7       	brne	.-16     	; 0x1a52 <vfprintf+0x302>
    1a62:	00 23       	and	r16, r16
    1a64:	29 f0       	breq	.+10     	; 0x1a70 <vfprintf+0x320>
    1a66:	80 2f       	mov	r24, r16
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	b4 01       	movw	r22, r8
    1a6c:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1a70:	63 fc       	sbrc	r6, 3
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <vfprintf+0x336>
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <vfprintf+0x332>
    1a76:	80 e3       	ldi	r24, 0x30	; 48
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	b4 01       	movw	r22, r8
    1a7c:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1a80:	da 94       	dec	r13
    1a82:	dd 20       	and	r13, r13
    1a84:	c1 f7       	brne	.-16     	; 0x1a76 <vfprintf+0x326>
    1a86:	17 ff       	sbrs	r17, 7
    1a88:	48 c0       	rjmp	.+144    	; 0x1b1a <vfprintf+0x3ca>
    1a8a:	85 01       	movw	r16, r10
    1a8c:	b7 fe       	sbrs	r11, 7
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <vfprintf+0x344>
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	66 24       	eor	r6, r6
    1a96:	77 24       	eor	r7, r7
    1a98:	95 01       	movw	r18, r10
    1a9a:	2e 19       	sub	r18, r14
    1a9c:	31 09       	sbc	r19, r1
    1a9e:	3b 8b       	std	Y+19, r19	; 0x13
    1aa0:	2a 8b       	std	Y+18, r18	; 0x12
    1aa2:	25 01       	movw	r4, r10
    1aa4:	40 1a       	sub	r4, r16
    1aa6:	51 0a       	sbc	r5, r17
    1aa8:	42 0c       	add	r4, r2
    1aaa:	53 1c       	adc	r5, r3
    1aac:	6f 2d       	mov	r22, r15
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	ee 24       	eor	r14, r14
    1ab2:	ff 24       	eor	r15, r15
    1ab4:	e6 1a       	sub	r14, r22
    1ab6:	f7 0a       	sbc	r15, r23
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	0f 3f       	cpi	r16, 0xFF	; 255
    1abc:	13 07       	cpc	r17, r19
    1abe:	29 f4       	brne	.+10     	; 0x1aca <vfprintf+0x37a>
    1ac0:	8e e2       	ldi	r24, 0x2E	; 46
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	b4 01       	movw	r22, r8
    1ac6:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1aca:	a0 16       	cp	r10, r16
    1acc:	b1 06       	cpc	r11, r17
    1ace:	54 f0       	brlt	.+20     	; 0x1ae4 <vfprintf+0x394>
    1ad0:	2a 89       	ldd	r18, Y+18	; 0x12
    1ad2:	3b 89       	ldd	r19, Y+19	; 0x13
    1ad4:	20 17       	cp	r18, r16
    1ad6:	31 07       	cpc	r19, r17
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <vfprintf+0x394>
    1ada:	f2 01       	movw	r30, r4
    1adc:	e6 0d       	add	r30, r6
    1ade:	f7 1d       	adc	r31, r7
    1ae0:	81 81       	ldd	r24, Z+1	; 0x01
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x396>
    1ae4:	80 e3       	ldi	r24, 0x30	; 48
    1ae6:	01 50       	subi	r16, 0x01	; 1
    1ae8:	10 40       	sbci	r17, 0x00	; 0
    1aea:	08 94       	sec
    1aec:	61 1c       	adc	r6, r1
    1aee:	71 1c       	adc	r7, r1
    1af0:	0e 15       	cp	r16, r14
    1af2:	1f 05       	cpc	r17, r15
    1af4:	2c f0       	brlt	.+10     	; 0x1b00 <vfprintf+0x3b0>
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	b4 01       	movw	r22, r8
    1afa:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1afe:	dc cf       	rjmp	.-72     	; 0x1ab8 <vfprintf+0x368>
    1b00:	0a 15       	cp	r16, r10
    1b02:	1b 05       	cpc	r17, r11
    1b04:	41 f4       	brne	.+16     	; 0x1b16 <vfprintf+0x3c6>
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	96 33       	cpi	r25, 0x36	; 54
    1b0a:	20 f4       	brcc	.+8      	; 0x1b14 <vfprintf+0x3c4>
    1b0c:	95 33       	cpi	r25, 0x35	; 53
    1b0e:	19 f4       	brne	.+6      	; 0x1b16 <vfprintf+0x3c6>
    1b10:	38 89       	ldd	r19, Y+16	; 0x10
    1b12:	34 ff       	sbrs	r19, 4
    1b14:	81 e3       	ldi	r24, 0x31	; 49
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	49 c0       	rjmp	.+146    	; 0x1bac <vfprintf+0x45c>
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	81 33       	cpi	r24, 0x31	; 49
    1b1e:	11 f0       	breq	.+4      	; 0x1b24 <vfprintf+0x3d4>
    1b20:	9f ee       	ldi	r25, 0xEF	; 239
    1b22:	c9 22       	and	r12, r25
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	b4 01       	movw	r22, r8
    1b28:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1b2c:	ff 20       	and	r15, r15
    1b2e:	89 f0       	breq	.+34     	; 0x1b52 <vfprintf+0x402>
    1b30:	8e e2       	ldi	r24, 0x2E	; 46
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	b4 01       	movw	r22, r8
    1b36:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1b3a:	12 e0       	ldi	r17, 0x02	; 2
    1b3c:	f1 01       	movw	r30, r2
    1b3e:	e1 0f       	add	r30, r17
    1b40:	f1 1d       	adc	r31, r1
    1b42:	1f 5f       	subi	r17, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	b4 01       	movw	r22, r8
    1b4a:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1b4e:	fa 94       	dec	r15
    1b50:	a9 f7       	brne	.-22     	; 0x1b3c <vfprintf+0x3ec>
    1b52:	64 fe       	sbrs	r6, 4
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <vfprintf+0x40c>
    1b56:	85 e4       	ldi	r24, 0x45	; 69
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <vfprintf+0x410>
    1b5c:	85 e6       	ldi	r24, 0x65	; 101
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	b4 01       	movw	r22, r8
    1b62:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1b66:	b7 fc       	sbrc	r11, 7
    1b68:	05 c0       	rjmp	.+10     	; 0x1b74 <vfprintf+0x424>
    1b6a:	a1 14       	cp	r10, r1
    1b6c:	b1 04       	cpc	r11, r1
    1b6e:	41 f4       	brne	.+16     	; 0x1b80 <vfprintf+0x430>
    1b70:	c4 fe       	sbrs	r12, 4
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <vfprintf+0x430>
    1b74:	b0 94       	com	r11
    1b76:	a1 94       	neg	r10
    1b78:	b1 08       	sbc	r11, r1
    1b7a:	b3 94       	inc	r11
    1b7c:	8d e2       	ldi	r24, 0x2D	; 45
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <vfprintf+0x432>
    1b80:	8b e2       	ldi	r24, 0x2B	; 43
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	b4 01       	movw	r22, r8
    1b86:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1b8a:	80 e3       	ldi	r24, 0x30	; 48
    1b8c:	05 c0       	rjmp	.+10     	; 0x1b98 <vfprintf+0x448>
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	e6 ef       	ldi	r30, 0xF6	; 246
    1b92:	ff ef       	ldi	r31, 0xFF	; 255
    1b94:	ae 0e       	add	r10, r30
    1b96:	bf 1e       	adc	r11, r31
    1b98:	fa e0       	ldi	r31, 0x0A	; 10
    1b9a:	af 16       	cp	r10, r31
    1b9c:	b1 04       	cpc	r11, r1
    1b9e:	bc f7       	brge	.-18     	; 0x1b8e <vfprintf+0x43e>
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1ba8:	c5 01       	movw	r24, r10
    1baa:	c0 96       	adiw	r24, 0x30	; 48
    1bac:	b4 01       	movw	r22, r8
    1bae:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1bb2:	4d c1       	rjmp	.+666    	; 0x1e4e <vfprintf+0x6fe>
    1bb4:	83 36       	cpi	r24, 0x63	; 99
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <vfprintf+0x474>
    1bb8:	83 37       	cpi	r24, 0x73	; 115
    1bba:	89 f0       	breq	.+34     	; 0x1bde <vfprintf+0x48e>
    1bbc:	83 35       	cpi	r24, 0x53	; 83
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <vfprintf+0x472>
    1bc0:	59 c0       	rjmp	.+178    	; 0x1c74 <vfprintf+0x524>
    1bc2:	22 c0       	rjmp	.+68     	; 0x1c08 <vfprintf+0x4b8>
    1bc4:	9a 01       	movw	r18, r20
    1bc6:	2e 5f       	subi	r18, 0xFE	; 254
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	3d 87       	std	Y+13, r19	; 0x0d
    1bcc:	2c 87       	std	Y+12, r18	; 0x0c
    1bce:	fa 01       	movw	r30, r20
    1bd0:	80 81       	ld	r24, Z
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	e8 2e       	mov	r14, r24
    1bd8:	f1 2c       	mov	r15, r1
    1bda:	51 01       	movw	r10, r2
    1bdc:	13 c0       	rjmp	.+38     	; 0x1c04 <vfprintf+0x4b4>
    1bde:	9a 01       	movw	r18, r20
    1be0:	2e 5f       	subi	r18, 0xFE	; 254
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	3d 87       	std	Y+13, r19	; 0x0d
    1be6:	2c 87       	std	Y+12, r18	; 0x0c
    1be8:	fa 01       	movw	r30, r20
    1bea:	a0 80       	ld	r10, Z
    1bec:	b1 80       	ldd	r11, Z+1	; 0x01
    1bee:	16 ff       	sbrs	r17, 6
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <vfprintf+0x4a8>
    1bf2:	6f 2d       	mov	r22, r15
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <vfprintf+0x4ac>
    1bf8:	6f ef       	ldi	r22, 0xFF	; 255
    1bfa:	7f ef       	ldi	r23, 0xFF	; 255
    1bfc:	c5 01       	movw	r24, r10
    1bfe:	0e 94 26 12 	call	0x244c	; 0x244c <strnlen>
    1c02:	7c 01       	movw	r14, r24
    1c04:	1f 77       	andi	r17, 0x7F	; 127
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <vfprintf+0x4e0>
    1c08:	9a 01       	movw	r18, r20
    1c0a:	2e 5f       	subi	r18, 0xFE	; 254
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	3d 87       	std	Y+13, r19	; 0x0d
    1c10:	2c 87       	std	Y+12, r18	; 0x0c
    1c12:	fa 01       	movw	r30, r20
    1c14:	a0 80       	ld	r10, Z
    1c16:	b1 80       	ldd	r11, Z+1	; 0x01
    1c18:	16 ff       	sbrs	r17, 6
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x4d2>
    1c1c:	6f 2d       	mov	r22, r15
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x4d6>
    1c22:	6f ef       	ldi	r22, 0xFF	; 255
    1c24:	7f ef       	ldi	r23, 0xFF	; 255
    1c26:	c5 01       	movw	r24, r10
    1c28:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <strnlen_P>
    1c2c:	7c 01       	movw	r14, r24
    1c2e:	10 68       	ori	r17, 0x80	; 128
    1c30:	13 fd       	sbrc	r17, 3
    1c32:	1c c0       	rjmp	.+56     	; 0x1c6c <vfprintf+0x51c>
    1c34:	06 c0       	rjmp	.+12     	; 0x1c42 <vfprintf+0x4f2>
    1c36:	80 e2       	ldi	r24, 0x20	; 32
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	b4 01       	movw	r22, r8
    1c3c:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1c40:	da 94       	dec	r13
    1c42:	8d 2d       	mov	r24, r13
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	e8 16       	cp	r14, r24
    1c48:	f9 06       	cpc	r15, r25
    1c4a:	a8 f3       	brcs	.-22     	; 0x1c36 <vfprintf+0x4e6>
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <vfprintf+0x51c>
    1c4e:	f5 01       	movw	r30, r10
    1c50:	17 fd       	sbrc	r17, 7
    1c52:	85 91       	lpm	r24, Z+
    1c54:	17 ff       	sbrs	r17, 7
    1c56:	81 91       	ld	r24, Z+
    1c58:	5f 01       	movw	r10, r30
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	b4 01       	movw	r22, r8
    1c5e:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1c62:	d1 10       	cpse	r13, r1
    1c64:	da 94       	dec	r13
    1c66:	08 94       	sec
    1c68:	e1 08       	sbc	r14, r1
    1c6a:	f1 08       	sbc	r15, r1
    1c6c:	e1 14       	cp	r14, r1
    1c6e:	f1 04       	cpc	r15, r1
    1c70:	71 f7       	brne	.-36     	; 0x1c4e <vfprintf+0x4fe>
    1c72:	ed c0       	rjmp	.+474    	; 0x1e4e <vfprintf+0x6fe>
    1c74:	84 36       	cpi	r24, 0x64	; 100
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <vfprintf+0x52c>
    1c78:	89 36       	cpi	r24, 0x69	; 105
    1c7a:	71 f5       	brne	.+92     	; 0x1cd8 <vfprintf+0x588>
    1c7c:	9a 01       	movw	r18, r20
    1c7e:	17 ff       	sbrs	r17, 7
    1c80:	0a c0       	rjmp	.+20     	; 0x1c96 <vfprintf+0x546>
    1c82:	2c 5f       	subi	r18, 0xFC	; 252
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	3d 87       	std	Y+13, r19	; 0x0d
    1c88:	2c 87       	std	Y+12, r18	; 0x0c
    1c8a:	fa 01       	movw	r30, r20
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	a2 81       	ldd	r26, Z+2	; 0x02
    1c92:	b3 81       	ldd	r27, Z+3	; 0x03
    1c94:	0b c0       	rjmp	.+22     	; 0x1cac <vfprintf+0x55c>
    1c96:	2e 5f       	subi	r18, 0xFE	; 254
    1c98:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9a:	3d 87       	std	Y+13, r19	; 0x0d
    1c9c:	2c 87       	std	Y+12, r18	; 0x0c
    1c9e:	fa 01       	movw	r30, r20
    1ca0:	80 81       	ld	r24, Z
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	97 fd       	sbrc	r25, 7
    1ca8:	a0 95       	com	r26
    1caa:	ba 2f       	mov	r27, r26
    1cac:	01 2f       	mov	r16, r17
    1cae:	0f 76       	andi	r16, 0x6F	; 111
    1cb0:	b7 ff       	sbrs	r27, 7
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <vfprintf+0x574>
    1cb4:	b0 95       	com	r27
    1cb6:	a0 95       	com	r26
    1cb8:	90 95       	com	r25
    1cba:	81 95       	neg	r24
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	af 4f       	sbci	r26, 0xFF	; 255
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	00 68       	ori	r16, 0x80	; 128
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	a1 01       	movw	r20, r2
    1cca:	2a e0       	ldi	r18, 0x0A	; 10
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	0e 94 a0 12 	call	0x2540	; 0x2540 <__ultoa_invert>
    1cd2:	e8 2e       	mov	r14, r24
    1cd4:	e2 18       	sub	r14, r2
    1cd6:	41 c0       	rjmp	.+130    	; 0x1d5a <vfprintf+0x60a>
    1cd8:	85 37       	cpi	r24, 0x75	; 117
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <vfprintf+0x594>
    1cdc:	1f 7e       	andi	r17, 0xEF	; 239
    1cde:	2a e0       	ldi	r18, 0x0A	; 10
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	20 c0       	rjmp	.+64     	; 0x1d24 <vfprintf+0x5d4>
    1ce4:	19 7f       	andi	r17, 0xF9	; 249
    1ce6:	8f 36       	cpi	r24, 0x6F	; 111
    1ce8:	a9 f0       	breq	.+42     	; 0x1d14 <vfprintf+0x5c4>
    1cea:	80 37       	cpi	r24, 0x70	; 112
    1cec:	20 f4       	brcc	.+8      	; 0x1cf6 <vfprintf+0x5a6>
    1cee:	88 35       	cpi	r24, 0x58	; 88
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <vfprintf+0x5a4>
    1cf2:	b0 c0       	rjmp	.+352    	; 0x1e54 <vfprintf+0x704>
    1cf4:	0b c0       	rjmp	.+22     	; 0x1d0c <vfprintf+0x5bc>
    1cf6:	80 37       	cpi	r24, 0x70	; 112
    1cf8:	21 f0       	breq	.+8      	; 0x1d02 <vfprintf+0x5b2>
    1cfa:	88 37       	cpi	r24, 0x78	; 120
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <vfprintf+0x5b0>
    1cfe:	aa c0       	rjmp	.+340    	; 0x1e54 <vfprintf+0x704>
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <vfprintf+0x5b4>
    1d02:	10 61       	ori	r17, 0x10	; 16
    1d04:	14 ff       	sbrs	r17, 4
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <vfprintf+0x5ca>
    1d08:	14 60       	ori	r17, 0x04	; 4
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <vfprintf+0x5ca>
    1d0c:	14 ff       	sbrs	r17, 4
    1d0e:	08 c0       	rjmp	.+16     	; 0x1d20 <vfprintf+0x5d0>
    1d10:	16 60       	ori	r17, 0x06	; 6
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <vfprintf+0x5d0>
    1d14:	28 e0       	ldi	r18, 0x08	; 8
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <vfprintf+0x5d4>
    1d1a:	20 e1       	ldi	r18, 0x10	; 16
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <vfprintf+0x5d4>
    1d20:	20 e1       	ldi	r18, 0x10	; 16
    1d22:	32 e0       	ldi	r19, 0x02	; 2
    1d24:	ca 01       	movw	r24, r20
    1d26:	17 ff       	sbrs	r17, 7
    1d28:	09 c0       	rjmp	.+18     	; 0x1d3c <vfprintf+0x5ec>
    1d2a:	04 96       	adiw	r24, 0x04	; 4
    1d2c:	9d 87       	std	Y+13, r25	; 0x0d
    1d2e:	8c 87       	std	Y+12, r24	; 0x0c
    1d30:	fa 01       	movw	r30, r20
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <vfprintf+0x5fc>
    1d3c:	02 96       	adiw	r24, 0x02	; 2
    1d3e:	9d 87       	std	Y+13, r25	; 0x0d
    1d40:	8c 87       	std	Y+12, r24	; 0x0c
    1d42:	fa 01       	movw	r30, r20
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a1 01       	movw	r20, r2
    1d4e:	0e 94 a0 12 	call	0x2540	; 0x2540 <__ultoa_invert>
    1d52:	e8 2e       	mov	r14, r24
    1d54:	e2 18       	sub	r14, r2
    1d56:	01 2f       	mov	r16, r17
    1d58:	0f 77       	andi	r16, 0x7F	; 127
    1d5a:	06 ff       	sbrs	r16, 6
    1d5c:	09 c0       	rjmp	.+18     	; 0x1d70 <vfprintf+0x620>
    1d5e:	0e 7f       	andi	r16, 0xFE	; 254
    1d60:	ef 14       	cp	r14, r15
    1d62:	30 f4       	brcc	.+12     	; 0x1d70 <vfprintf+0x620>
    1d64:	04 ff       	sbrs	r16, 4
    1d66:	06 c0       	rjmp	.+12     	; 0x1d74 <vfprintf+0x624>
    1d68:	02 fd       	sbrc	r16, 2
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <vfprintf+0x624>
    1d6c:	0f 7e       	andi	r16, 0xEF	; 239
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <vfprintf+0x624>
    1d70:	1e 2d       	mov	r17, r14
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <vfprintf+0x626>
    1d74:	1f 2d       	mov	r17, r15
    1d76:	80 2f       	mov	r24, r16
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	04 ff       	sbrs	r16, 4
    1d7c:	0c c0       	rjmp	.+24     	; 0x1d96 <vfprintf+0x646>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ee 0d       	add	r30, r14
    1d82:	f1 1d       	adc	r31, r1
    1d84:	20 81       	ld	r18, Z
    1d86:	20 33       	cpi	r18, 0x30	; 48
    1d88:	11 f4       	brne	.+4      	; 0x1d8e <vfprintf+0x63e>
    1d8a:	09 7e       	andi	r16, 0xE9	; 233
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <vfprintf+0x650>
    1d8e:	02 ff       	sbrs	r16, 2
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <vfprintf+0x64e>
    1d92:	1e 5f       	subi	r17, 0xFE	; 254
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <vfprintf+0x650>
    1d96:	86 78       	andi	r24, 0x86	; 134
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <vfprintf+0x650>
    1d9e:	1f 5f       	subi	r17, 0xFF	; 255
    1da0:	a0 2e       	mov	r10, r16
    1da2:	bb 24       	eor	r11, r11
    1da4:	03 fd       	sbrc	r16, 3
    1da6:	12 c0       	rjmp	.+36     	; 0x1dcc <vfprintf+0x67c>
    1da8:	00 ff       	sbrs	r16, 0
    1daa:	0d c0       	rjmp	.+26     	; 0x1dc6 <vfprintf+0x676>
    1dac:	fe 2c       	mov	r15, r14
    1dae:	1d 15       	cp	r17, r13
    1db0:	50 f4       	brcc	.+20     	; 0x1dc6 <vfprintf+0x676>
    1db2:	fd 0c       	add	r15, r13
    1db4:	f1 1a       	sub	r15, r17
    1db6:	1d 2d       	mov	r17, r13
    1db8:	06 c0       	rjmp	.+12     	; 0x1dc6 <vfprintf+0x676>
    1dba:	80 e2       	ldi	r24, 0x20	; 32
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	b4 01       	movw	r22, r8
    1dc0:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1dc4:	1f 5f       	subi	r17, 0xFF	; 255
    1dc6:	1d 15       	cp	r17, r13
    1dc8:	c0 f3       	brcs	.-16     	; 0x1dba <vfprintf+0x66a>
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <vfprintf+0x684>
    1dcc:	1d 15       	cp	r17, r13
    1dce:	10 f4       	brcc	.+4      	; 0x1dd4 <vfprintf+0x684>
    1dd0:	d1 1a       	sub	r13, r17
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <vfprintf+0x686>
    1dd4:	dd 24       	eor	r13, r13
    1dd6:	a4 fe       	sbrs	r10, 4
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <vfprintf+0x6a8>
    1dda:	80 e3       	ldi	r24, 0x30	; 48
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	b4 01       	movw	r22, r8
    1de0:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1de4:	a2 fe       	sbrs	r10, 2
    1de6:	1f c0       	rjmp	.+62     	; 0x1e26 <vfprintf+0x6d6>
    1de8:	a1 fe       	sbrs	r10, 1
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <vfprintf+0x6a2>
    1dec:	88 e5       	ldi	r24, 0x58	; 88
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	10 c0       	rjmp	.+32     	; 0x1e12 <vfprintf+0x6c2>
    1df2:	88 e7       	ldi	r24, 0x78	; 120
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <vfprintf+0x6c2>
    1df8:	c5 01       	movw	r24, r10
    1dfa:	86 78       	andi	r24, 0x86	; 134
    1dfc:	90 70       	andi	r25, 0x00	; 0
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	91 f0       	breq	.+36     	; 0x1e26 <vfprintf+0x6d6>
    1e02:	a1 fc       	sbrc	r10, 1
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <vfprintf+0x6ba>
    1e06:	80 e2       	ldi	r24, 0x20	; 32
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <vfprintf+0x6bc>
    1e0a:	8b e2       	ldi	r24, 0x2B	; 43
    1e0c:	07 fd       	sbrc	r16, 7
    1e0e:	8d e2       	ldi	r24, 0x2D	; 45
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	b4 01       	movw	r22, r8
    1e14:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <vfprintf+0x6d6>
    1e1a:	80 e3       	ldi	r24, 0x30	; 48
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	b4 01       	movw	r22, r8
    1e20:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1e24:	fa 94       	dec	r15
    1e26:	ef 14       	cp	r14, r15
    1e28:	c0 f3       	brcs	.-16     	; 0x1e1a <vfprintf+0x6ca>
    1e2a:	ea 94       	dec	r14
    1e2c:	f1 01       	movw	r30, r2
    1e2e:	ee 0d       	add	r30, r14
    1e30:	f1 1d       	adc	r31, r1
    1e32:	80 81       	ld	r24, Z
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	b4 01       	movw	r22, r8
    1e38:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1e3c:	ee 20       	and	r14, r14
    1e3e:	a9 f7       	brne	.-22     	; 0x1e2a <vfprintf+0x6da>
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <vfprintf+0x6fe>
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	b4 01       	movw	r22, r8
    1e48:	0e 94 31 12 	call	0x2462	; 0x2462 <fputc>
    1e4c:	da 94       	dec	r13
    1e4e:	dd 20       	and	r13, r13
    1e50:	c1 f7       	brne	.-16     	; 0x1e42 <vfprintf+0x6f2>
    1e52:	8e cc       	rjmp	.-1764   	; 0x1770 <vfprintf+0x20>
    1e54:	f4 01       	movw	r30, r8
    1e56:	86 81       	ldd	r24, Z+6	; 0x06
    1e58:	97 81       	ldd	r25, Z+7	; 0x07
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <vfprintf+0x710>
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	9f ef       	ldi	r25, 0xFF	; 255
    1e60:	65 96       	adiw	r28, 0x15	; 21
    1e62:	e2 e1       	ldi	r30, 0x12	; 18
    1e64:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__epilogue_restores__>

00001e68 <__divmodhi4>:
    1e68:	97 fb       	bst	r25, 7
    1e6a:	09 2e       	mov	r0, r25
    1e6c:	07 26       	eor	r0, r23
    1e6e:	0a d0       	rcall	.+20     	; 0x1e84 <__divmodhi4_neg1>
    1e70:	77 fd       	sbrc	r23, 7
    1e72:	04 d0       	rcall	.+8      	; 0x1e7c <__divmodhi4_neg2>
    1e74:	43 d0       	rcall	.+134    	; 0x1efc <__udivmodhi4>
    1e76:	06 d0       	rcall	.+12     	; 0x1e84 <__divmodhi4_neg1>
    1e78:	00 20       	and	r0, r0
    1e7a:	1a f4       	brpl	.+6      	; 0x1e82 <__divmodhi4_exit>

00001e7c <__divmodhi4_neg2>:
    1e7c:	70 95       	com	r23
    1e7e:	61 95       	neg	r22
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255

00001e82 <__divmodhi4_exit>:
    1e82:	08 95       	ret

00001e84 <__divmodhi4_neg1>:
    1e84:	f6 f7       	brtc	.-4      	; 0x1e82 <__divmodhi4_exit>
    1e86:	90 95       	com	r25
    1e88:	81 95       	neg	r24
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	08 95       	ret

00001e8e <__prologue_saves__>:
    1e8e:	2f 92       	push	r2
    1e90:	3f 92       	push	r3
    1e92:	4f 92       	push	r4
    1e94:	5f 92       	push	r5
    1e96:	6f 92       	push	r6
    1e98:	7f 92       	push	r7
    1e9a:	8f 92       	push	r8
    1e9c:	9f 92       	push	r9
    1e9e:	af 92       	push	r10
    1ea0:	bf 92       	push	r11
    1ea2:	cf 92       	push	r12
    1ea4:	df 92       	push	r13
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	ca 1b       	sub	r28, r26
    1eb8:	db 0b       	sbc	r29, r27
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	09 94       	ijmp

00001ec6 <__epilogue_restores__>:
    1ec6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec8:	39 88       	ldd	r3, Y+17	; 0x11
    1eca:	48 88       	ldd	r4, Y+16	; 0x10
    1ecc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ece:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed8:	b9 84       	ldd	r11, Y+9	; 0x09
    1eda:	c8 84       	ldd	r12, Y+8	; 0x08
    1edc:	df 80       	ldd	r13, Y+7	; 0x07
    1ede:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee8:	b9 81       	ldd	r27, Y+1	; 0x01
    1eea:	ce 0f       	add	r28, r30
    1eec:	d1 1d       	adc	r29, r1
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	ed 01       	movw	r28, r26
    1efa:	08 95       	ret

00001efc <__udivmodhi4>:
    1efc:	aa 1b       	sub	r26, r26
    1efe:	bb 1b       	sub	r27, r27
    1f00:	51 e1       	ldi	r21, 0x11	; 17
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <__udivmodhi4_ep>

00001f04 <__udivmodhi4_loop>:
    1f04:	aa 1f       	adc	r26, r26
    1f06:	bb 1f       	adc	r27, r27
    1f08:	a6 17       	cp	r26, r22
    1f0a:	b7 07       	cpc	r27, r23
    1f0c:	10 f0       	brcs	.+4      	; 0x1f12 <__udivmodhi4_ep>
    1f0e:	a6 1b       	sub	r26, r22
    1f10:	b7 0b       	sbc	r27, r23

00001f12 <__udivmodhi4_ep>:
    1f12:	88 1f       	adc	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	5a 95       	dec	r21
    1f18:	a9 f7       	brne	.-22     	; 0x1f04 <__udivmodhi4_loop>
    1f1a:	80 95       	com	r24
    1f1c:	90 95       	com	r25
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	08 95       	ret

00001f24 <strtod>:
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e8 e9       	ldi	r30, 0x98	; 152
    1f2a:	ff e0       	ldi	r31, 0x0F	; 15
    1f2c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__prologue_saves__+0x8>
    1f30:	5b 01       	movw	r10, r22
    1f32:	61 15       	cp	r22, r1
    1f34:	71 05       	cpc	r23, r1
    1f36:	21 f0       	breq	.+8      	; 0x1f40 <strtod+0x1c>
    1f38:	db 01       	movw	r26, r22
    1f3a:	8c 93       	st	X, r24
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	9c 93       	st	X, r25
    1f40:	7c 01       	movw	r14, r24
    1f42:	e7 01       	movw	r28, r14
    1f44:	08 94       	sec
    1f46:	e1 1c       	adc	r14, r1
    1f48:	f1 1c       	adc	r15, r1
    1f4a:	08 81       	ld	r16, Y
    1f4c:	67 01       	movw	r12, r14
    1f4e:	80 2f       	mov	r24, r16
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <isspace>
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	a1 f7       	brne	.-24     	; 0x1f42 <strtod+0x1e>
    1f5a:	0d 32       	cpi	r16, 0x2D	; 45
    1f5c:	41 f4       	brne	.+16     	; 0x1f6e <strtod+0x4a>
    1f5e:	09 81       	ldd	r16, Y+1	; 0x01
    1f60:	42 e0       	ldi	r20, 0x02	; 2
    1f62:	c4 2e       	mov	r12, r20
    1f64:	d1 2c       	mov	r13, r1
    1f66:	cc 0e       	add	r12, r28
    1f68:	dd 1e       	adc	r13, r29
    1f6a:	11 e0       	ldi	r17, 0x01	; 1
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <strtod+0x5c>
    1f6e:	0b 32       	cpi	r16, 0x2B	; 43
    1f70:	31 f4       	brne	.+12     	; 0x1f7e <strtod+0x5a>
    1f72:	09 81       	ldd	r16, Y+1	; 0x01
    1f74:	32 e0       	ldi	r19, 0x02	; 2
    1f76:	c3 2e       	mov	r12, r19
    1f78:	d1 2c       	mov	r13, r1
    1f7a:	cc 0e       	add	r12, r28
    1f7c:	dd 1e       	adc	r13, r29
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	e6 01       	movw	r28, r12
    1f82:	21 97       	sbiw	r28, 0x01	; 1
    1f84:	ce 01       	movw	r24, r28
    1f86:	60 e7       	ldi	r22, 0x70	; 112
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	43 e0       	ldi	r20, 0x03	; 3
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <strncasecmp_P>
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	d1 f4       	brne	.+52     	; 0x1fca <strtod+0xa6>
    1f96:	e6 01       	movw	r28, r12
    1f98:	22 96       	adiw	r28, 0x02	; 2
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	63 e7       	ldi	r22, 0x73	; 115
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	45 e0       	ldi	r20, 0x05	; 5
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <strncasecmp_P>
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <strtod+0x8c>
    1fac:	e6 01       	movw	r28, r12
    1fae:	27 96       	adiw	r28, 0x07	; 7
    1fb0:	a1 14       	cp	r10, r1
    1fb2:	b1 04       	cpc	r11, r1
    1fb4:	19 f0       	breq	.+6      	; 0x1fbc <strtod+0x98>
    1fb6:	f5 01       	movw	r30, r10
    1fb8:	d1 83       	std	Z+1, r29	; 0x01
    1fba:	c0 83       	st	Z, r28
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	90 e8       	ldi	r25, 0x80	; 128
    1fc2:	11 23       	and	r17, r17
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <strtod+0xa4>
    1fc6:	0a c1       	rjmp	.+532    	; 0x21dc <strtod+0x2b8>
    1fc8:	04 c1       	rjmp	.+520    	; 0x21d2 <strtod+0x2ae>
    1fca:	ce 01       	movw	r24, r28
    1fcc:	68 e7       	ldi	r22, 0x78	; 120
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	43 e0       	ldi	r20, 0x03	; 3
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <strncasecmp_P>
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	59 f4       	brne	.+22     	; 0x1ff2 <strtod+0xce>
    1fdc:	a1 14       	cp	r10, r1
    1fde:	b1 04       	cpc	r11, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <strtod+0xc0>
    1fe2:	f9 c0       	rjmp	.+498    	; 0x21d6 <strtod+0x2b2>
    1fe4:	c6 01       	movw	r24, r12
    1fe6:	02 96       	adiw	r24, 0x02	; 2
    1fe8:	d5 01       	movw	r26, r10
    1fea:	11 96       	adiw	r26, 0x01	; 1
    1fec:	9c 93       	st	X, r25
    1fee:	8e 93       	st	-X, r24
    1ff0:	f2 c0       	rjmp	.+484    	; 0x21d6 <strtod+0x2b2>
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	ba 01       	movw	r22, r20
    1ff8:	88 24       	eor	r8, r8
    1ffa:	99 24       	eor	r9, r9
    1ffc:	00 53       	subi	r16, 0x30	; 48
    1ffe:	0a 30       	cpi	r16, 0x0A	; 10
    2000:	90 f5       	brcc	.+100    	; 0x2066 <strtod+0x142>
    2002:	12 60       	ori	r17, 0x02	; 2
    2004:	21 2f       	mov	r18, r17
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	c9 01       	movw	r24, r18
    200a:	88 70       	andi	r24, 0x08	; 8
    200c:	90 70       	andi	r25, 0x00	; 0
    200e:	12 ff       	sbrs	r17, 2
    2010:	06 c0       	rjmp	.+12     	; 0x201e <strtod+0xfa>
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f5       	brne	.+90     	; 0x2070 <strtod+0x14c>
    2016:	08 94       	sec
    2018:	81 1c       	adc	r8, r1
    201a:	91 1c       	adc	r9, r1
    201c:	29 c0       	rjmp	.+82     	; 0x2070 <strtod+0x14c>
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	19 f0       	breq	.+6      	; 0x2028 <strtod+0x104>
    2022:	08 94       	sec
    2024:	81 08       	sbc	r8, r1
    2026:	91 08       	sbc	r9, r1
    2028:	db 01       	movw	r26, r22
    202a:	ca 01       	movw	r24, r20
    202c:	d2 e0       	ldi	r29, 0x02	; 2
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	aa 1f       	adc	r26, r26
    2034:	bb 1f       	adc	r27, r27
    2036:	da 95       	dec	r29
    2038:	d1 f7       	brne	.-12     	; 0x202e <strtod+0x10a>
    203a:	48 0f       	add	r20, r24
    203c:	59 1f       	adc	r21, r25
    203e:	6a 1f       	adc	r22, r26
    2040:	7b 1f       	adc	r23, r27
    2042:	44 0f       	add	r20, r20
    2044:	55 1f       	adc	r21, r21
    2046:	66 1f       	adc	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	40 0f       	add	r20, r16
    204c:	51 1d       	adc	r21, r1
    204e:	61 1d       	adc	r22, r1
    2050:	71 1d       	adc	r23, r1
    2052:	48 39       	cpi	r20, 0x98	; 152
    2054:	b9 e9       	ldi	r27, 0x99	; 153
    2056:	5b 07       	cpc	r21, r27
    2058:	b9 e9       	ldi	r27, 0x99	; 153
    205a:	6b 07       	cpc	r22, r27
    205c:	b9 e1       	ldi	r27, 0x19	; 25
    205e:	7b 07       	cpc	r23, r27
    2060:	38 f0       	brcs	.+14     	; 0x2070 <strtod+0x14c>
    2062:	14 60       	ori	r17, 0x04	; 4
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <strtod+0x14c>
    2066:	0e 3f       	cpi	r16, 0xFE	; 254
    2068:	39 f4       	brne	.+14     	; 0x2078 <strtod+0x154>
    206a:	13 fd       	sbrc	r17, 3
    206c:	43 c0       	rjmp	.+134    	; 0x20f4 <strtod+0x1d0>
    206e:	18 60       	ori	r17, 0x08	; 8
    2070:	f6 01       	movw	r30, r12
    2072:	01 91       	ld	r16, Z+
    2074:	6f 01       	movw	r12, r30
    2076:	c2 cf       	rjmp	.-124    	; 0x1ffc <strtod+0xd8>
    2078:	05 33       	cpi	r16, 0x35	; 53
    207a:	11 f0       	breq	.+4      	; 0x2080 <strtod+0x15c>
    207c:	05 31       	cpi	r16, 0x15	; 21
    207e:	d1 f5       	brne	.+116    	; 0x20f4 <strtod+0x1d0>
    2080:	d6 01       	movw	r26, r12
    2082:	ec 91       	ld	r30, X
    2084:	ed 32       	cpi	r30, 0x2D	; 45
    2086:	11 f4       	brne	.+4      	; 0x208c <strtod+0x168>
    2088:	10 61       	ori	r17, 0x10	; 16
    208a:	08 c0       	rjmp	.+16     	; 0x209c <strtod+0x178>
    208c:	eb 32       	cpi	r30, 0x2B	; 43
    208e:	29 f0       	breq	.+10     	; 0x209a <strtod+0x176>
    2090:	c6 01       	movw	r24, r12
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	21 e0       	ldi	r18, 0x01	; 1
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	08 c0       	rjmp	.+16     	; 0x20aa <strtod+0x186>
    209a:	d6 01       	movw	r26, r12
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	ec 91       	ld	r30, X
    20a0:	11 97       	sbiw	r26, 0x01	; 1
    20a2:	c6 01       	movw	r24, r12
    20a4:	02 96       	adiw	r24, 0x02	; 2
    20a6:	22 e0       	ldi	r18, 0x02	; 2
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	e0 53       	subi	r30, 0x30	; 48
    20ac:	ea 30       	cpi	r30, 0x0A	; 10
    20ae:	20 f0       	brcs	.+8      	; 0x20b8 <strtod+0x194>
    20b0:	6c 01       	movw	r12, r24
    20b2:	c2 1a       	sub	r12, r18
    20b4:	d3 0a       	sbc	r13, r19
    20b6:	1e c0       	rjmp	.+60     	; 0x20f4 <strtod+0x1d0>
    20b8:	dc 01       	movw	r26, r24
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	fc e0       	ldi	r31, 0x0C	; 12
    20c0:	20 38       	cpi	r18, 0x80	; 128
    20c2:	3f 07       	cpc	r19, r31
    20c4:	5c f4       	brge	.+22     	; 0x20dc <strtod+0x1b8>
    20c6:	c9 01       	movw	r24, r18
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	28 0f       	add	r18, r24
    20d2:	39 1f       	adc	r19, r25
    20d4:	22 0f       	add	r18, r18
    20d6:	33 1f       	adc	r19, r19
    20d8:	2e 0f       	add	r18, r30
    20da:	31 1d       	adc	r19, r1
    20dc:	ed 91       	ld	r30, X+
    20de:	e0 53       	subi	r30, 0x30	; 48
    20e0:	6d 01       	movw	r12, r26
    20e2:	ea 30       	cpi	r30, 0x0A	; 10
    20e4:	60 f3       	brcs	.-40     	; 0x20be <strtod+0x19a>
    20e6:	14 ff       	sbrs	r17, 4
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <strtod+0x1cc>
    20ea:	30 95       	com	r19
    20ec:	21 95       	neg	r18
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	82 0e       	add	r8, r18
    20f2:	93 1e       	adc	r9, r19
    20f4:	c1 2f       	mov	r28, r17
    20f6:	d0 e0       	ldi	r29, 0x00	; 0
    20f8:	11 ff       	sbrs	r17, 1
    20fa:	08 c0       	rjmp	.+16     	; 0x210c <strtod+0x1e8>
    20fc:	a1 14       	cp	r10, r1
    20fe:	b1 04       	cpc	r11, r1
    2100:	29 f0       	breq	.+10     	; 0x210c <strtod+0x1e8>
    2102:	c6 01       	movw	r24, r12
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	d5 01       	movw	r26, r10
    2108:	8d 93       	st	X+, r24
    210a:	9c 93       	st	X, r25
    210c:	cb 01       	movw	r24, r22
    210e:	ba 01       	movw	r22, r20
    2110:	0e 94 8f 0a 	call	0x151e	; 0x151e <__floatunsisf>
    2114:	6b 01       	movw	r12, r22
    2116:	7c 01       	movw	r14, r24
    2118:	ce 01       	movw	r24, r28
    211a:	83 70       	andi	r24, 0x03	; 3
    211c:	90 70       	andi	r25, 0x00	; 0
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	91 05       	cpc	r25, r1
    2122:	21 f4       	brne	.+8      	; 0x212c <strtod+0x208>
    2124:	f7 fa       	bst	r15, 7
    2126:	f0 94       	com	r15
    2128:	f7 f8       	bld	r15, 7
    212a:	f0 94       	com	r15
    212c:	c7 01       	movw	r24, r14
    212e:	b6 01       	movw	r22, r12
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	a9 01       	movw	r20, r18
    2136:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__cmpsf2>
    213a:	88 23       	and	r24, r24
    213c:	09 f4       	brne	.+2      	; 0x2140 <strtod+0x21c>
    213e:	44 c0       	rjmp	.+136    	; 0x21c8 <strtod+0x2a4>
    2140:	97 fe       	sbrs	r9, 7
    2142:	07 c0       	rjmp	.+14     	; 0x2152 <strtod+0x22e>
    2144:	90 94       	com	r9
    2146:	81 94       	neg	r8
    2148:	91 08       	sbc	r9, r1
    214a:	93 94       	inc	r9
    214c:	c7 ea       	ldi	r28, 0xA7	; 167
    214e:	d0 e0       	ldi	r29, 0x00	; 0
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <strtod+0x232>
    2152:	cf e8       	ldi	r28, 0x8F	; 143
    2154:	d0 e0       	ldi	r29, 0x00	; 0
    2156:	98 ee       	ldi	r25, 0xE8	; 232
    2158:	69 2e       	mov	r6, r25
    215a:	9f ef       	ldi	r25, 0xFF	; 255
    215c:	79 2e       	mov	r7, r25
    215e:	6c 0e       	add	r6, r28
    2160:	7d 1e       	adc	r7, r29
    2162:	20 e2       	ldi	r18, 0x20	; 32
    2164:	a2 2e       	mov	r10, r18
    2166:	b1 2c       	mov	r11, r1
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <strtod+0x264>
    216a:	fe 01       	movw	r30, r28
    216c:	05 91       	lpm	r16, Z+
    216e:	15 91       	lpm	r17, Z+
    2170:	25 91       	lpm	r18, Z+
    2172:	34 91       	lpm	r19, Z
    2174:	c7 01       	movw	r24, r14
    2176:	b6 01       	movw	r22, r12
    2178:	a9 01       	movw	r20, r18
    217a:	98 01       	movw	r18, r16
    217c:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3>
    2180:	6b 01       	movw	r12, r22
    2182:	7c 01       	movw	r14, r24
    2184:	8a 18       	sub	r8, r10
    2186:	9b 08       	sbc	r9, r11
    2188:	8a 14       	cp	r8, r10
    218a:	9b 04       	cpc	r9, r11
    218c:	74 f7       	brge	.-36     	; 0x216a <strtod+0x246>
    218e:	24 97       	sbiw	r28, 0x04	; 4
    2190:	b5 94       	asr	r11
    2192:	a7 94       	ror	r10
    2194:	c6 15       	cp	r28, r6
    2196:	d7 05       	cpc	r29, r7
    2198:	b9 f7       	brne	.-18     	; 0x2188 <strtod+0x264>
    219a:	c6 01       	movw	r24, r12
    219c:	d7 01       	movw	r26, r14
    219e:	2a 2f       	mov	r18, r26
    21a0:	22 0f       	add	r18, r18
    21a2:	2b 2f       	mov	r18, r27
    21a4:	22 1f       	adc	r18, r18
    21a6:	2f 3f       	cpi	r18, 0xFF	; 255
    21a8:	49 f0       	breq	.+18     	; 0x21bc <strtod+0x298>
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	a9 01       	movw	r20, r18
    21b4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__cmpsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	31 f4       	brne	.+12     	; 0x21c8 <strtod+0x2a4>
    21bc:	82 e2       	ldi	r24, 0x22	; 34
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	90 93 cd 07 	sts	0x07CD, r25
    21c4:	80 93 cc 07 	sts	0x07CC, r24
    21c8:	3c 2d       	mov	r19, r12
    21ca:	2d 2d       	mov	r18, r13
    21cc:	9e 2d       	mov	r25, r14
    21ce:	8f 2d       	mov	r24, r15
    21d0:	06 c0       	rjmp	.+12     	; 0x21de <strtod+0x2ba>
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <strtod+0x2ba>
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	90 ec       	ldi	r25, 0xC0	; 192
    21dc:	8f e7       	ldi	r24, 0x7F	; 127
    21de:	b9 01       	movw	r22, r18
    21e0:	ac 01       	movw	r20, r24
    21e2:	87 2f       	mov	r24, r23
    21e4:	92 2f       	mov	r25, r18
    21e6:	a5 2f       	mov	r26, r21
    21e8:	b4 2f       	mov	r27, r20
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	ee e0       	ldi	r30, 0x0E	; 14
    21f4:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__epilogue_restores__+0x8>

000021f8 <abort>:
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	f8 94       	cli
    21fe:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_exit>

00002202 <__ftoa_engine>:
    2202:	28 30       	cpi	r18, 0x08	; 8
    2204:	08 f0       	brcs	.+2      	; 0x2208 <__ftoa_engine+0x6>
    2206:	27 e0       	ldi	r18, 0x07	; 7
    2208:	33 27       	eor	r19, r19
    220a:	da 01       	movw	r26, r20
    220c:	99 0f       	add	r25, r25
    220e:	31 1d       	adc	r19, r1
    2210:	87 fd       	sbrc	r24, 7
    2212:	91 60       	ori	r25, 0x01	; 1
    2214:	00 96       	adiw	r24, 0x00	; 0
    2216:	61 05       	cpc	r22, r1
    2218:	71 05       	cpc	r23, r1
    221a:	39 f4       	brne	.+14     	; 0x222a <__ftoa_engine+0x28>
    221c:	32 60       	ori	r19, 0x02	; 2
    221e:	2e 5f       	subi	r18, 0xFE	; 254
    2220:	3d 93       	st	X+, r19
    2222:	30 e3       	ldi	r19, 0x30	; 48
    2224:	2a 95       	dec	r18
    2226:	e1 f7       	brne	.-8      	; 0x2220 <__ftoa_engine+0x1e>
    2228:	08 95       	ret
    222a:	9f 3f       	cpi	r25, 0xFF	; 255
    222c:	30 f0       	brcs	.+12     	; 0x223a <__ftoa_engine+0x38>
    222e:	80 38       	cpi	r24, 0x80	; 128
    2230:	71 05       	cpc	r23, r1
    2232:	61 05       	cpc	r22, r1
    2234:	09 f0       	breq	.+2      	; 0x2238 <__ftoa_engine+0x36>
    2236:	3c 5f       	subi	r19, 0xFC	; 252
    2238:	3c 5f       	subi	r19, 0xFC	; 252
    223a:	3d 93       	st	X+, r19
    223c:	91 30       	cpi	r25, 0x01	; 1
    223e:	08 f0       	brcs	.+2      	; 0x2242 <__ftoa_engine+0x40>
    2240:	80 68       	ori	r24, 0x80	; 128
    2242:	91 1d       	adc	r25, r1
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	1f 93       	push	r17
    224a:	0f 93       	push	r16
    224c:	ff 92       	push	r15
    224e:	ef 92       	push	r14
    2250:	19 2f       	mov	r17, r25
    2252:	98 7f       	andi	r25, 0xF8	; 248
    2254:	96 95       	lsr	r25
    2256:	e9 2f       	mov	r30, r25
    2258:	96 95       	lsr	r25
    225a:	96 95       	lsr	r25
    225c:	e9 0f       	add	r30, r25
    225e:	ff 27       	eor	r31, r31
    2260:	eb 5f       	subi	r30, 0xFB	; 251
    2262:	fe 4f       	sbci	r31, 0xFE	; 254
    2264:	99 27       	eor	r25, r25
    2266:	33 27       	eor	r19, r19
    2268:	ee 24       	eor	r14, r14
    226a:	ff 24       	eor	r15, r15
    226c:	a7 01       	movw	r20, r14
    226e:	e7 01       	movw	r28, r14
    2270:	05 90       	lpm	r0, Z+
    2272:	08 94       	sec
    2274:	07 94       	ror	r0
    2276:	28 f4       	brcc	.+10     	; 0x2282 <__ftoa_engine+0x80>
    2278:	36 0f       	add	r19, r22
    227a:	e7 1e       	adc	r14, r23
    227c:	f8 1e       	adc	r15, r24
    227e:	49 1f       	adc	r20, r25
    2280:	51 1d       	adc	r21, r1
    2282:	66 0f       	add	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	06 94       	lsr	r0
    228c:	a1 f7       	brne	.-24     	; 0x2276 <__ftoa_engine+0x74>
    228e:	05 90       	lpm	r0, Z+
    2290:	07 94       	ror	r0
    2292:	28 f4       	brcc	.+10     	; 0x229e <__ftoa_engine+0x9c>
    2294:	e7 0e       	add	r14, r23
    2296:	f8 1e       	adc	r15, r24
    2298:	49 1f       	adc	r20, r25
    229a:	56 1f       	adc	r21, r22
    229c:	c1 1d       	adc	r28, r1
    229e:	77 0f       	add	r23, r23
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	66 1f       	adc	r22, r22
    22a6:	06 94       	lsr	r0
    22a8:	a1 f7       	brne	.-24     	; 0x2292 <__ftoa_engine+0x90>
    22aa:	05 90       	lpm	r0, Z+
    22ac:	07 94       	ror	r0
    22ae:	28 f4       	brcc	.+10     	; 0x22ba <__ftoa_engine+0xb8>
    22b0:	f8 0e       	add	r15, r24
    22b2:	49 1f       	adc	r20, r25
    22b4:	56 1f       	adc	r21, r22
    22b6:	c7 1f       	adc	r28, r23
    22b8:	d1 1d       	adc	r29, r1
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	66 1f       	adc	r22, r22
    22c0:	77 1f       	adc	r23, r23
    22c2:	06 94       	lsr	r0
    22c4:	a1 f7       	brne	.-24     	; 0x22ae <__ftoa_engine+0xac>
    22c6:	05 90       	lpm	r0, Z+
    22c8:	07 94       	ror	r0
    22ca:	20 f4       	brcc	.+8      	; 0x22d4 <__ftoa_engine+0xd2>
    22cc:	49 0f       	add	r20, r25
    22ce:	56 1f       	adc	r21, r22
    22d0:	c7 1f       	adc	r28, r23
    22d2:	d8 1f       	adc	r29, r24
    22d4:	99 0f       	add	r25, r25
    22d6:	66 1f       	adc	r22, r22
    22d8:	77 1f       	adc	r23, r23
    22da:	88 1f       	adc	r24, r24
    22dc:	06 94       	lsr	r0
    22de:	a9 f7       	brne	.-22     	; 0x22ca <__ftoa_engine+0xc8>
    22e0:	84 91       	lpm	r24, Z
    22e2:	10 95       	com	r17
    22e4:	17 70       	andi	r17, 0x07	; 7
    22e6:	41 f0       	breq	.+16     	; 0x22f8 <__ftoa_engine+0xf6>
    22e8:	d6 95       	lsr	r29
    22ea:	c7 95       	ror	r28
    22ec:	57 95       	ror	r21
    22ee:	47 95       	ror	r20
    22f0:	f7 94       	ror	r15
    22f2:	e7 94       	ror	r14
    22f4:	1a 95       	dec	r17
    22f6:	c1 f7       	brne	.-16     	; 0x22e8 <__ftoa_engine+0xe6>
    22f8:	eb ea       	ldi	r30, 0xAB	; 171
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	68 94       	set
    22fe:	15 90       	lpm	r1, Z+
    2300:	15 91       	lpm	r17, Z+
    2302:	35 91       	lpm	r19, Z+
    2304:	65 91       	lpm	r22, Z+
    2306:	95 91       	lpm	r25, Z+
    2308:	05 90       	lpm	r0, Z+
    230a:	7f e2       	ldi	r23, 0x2F	; 47
    230c:	73 95       	inc	r23
    230e:	e1 18       	sub	r14, r1
    2310:	f1 0a       	sbc	r15, r17
    2312:	43 0b       	sbc	r20, r19
    2314:	56 0b       	sbc	r21, r22
    2316:	c9 0b       	sbc	r28, r25
    2318:	d0 09       	sbc	r29, r0
    231a:	c0 f7       	brcc	.-16     	; 0x230c <__ftoa_engine+0x10a>
    231c:	e1 0c       	add	r14, r1
    231e:	f1 1e       	adc	r15, r17
    2320:	43 1f       	adc	r20, r19
    2322:	56 1f       	adc	r21, r22
    2324:	c9 1f       	adc	r28, r25
    2326:	d0 1d       	adc	r29, r0
    2328:	7e f4       	brtc	.+30     	; 0x2348 <__ftoa_engine+0x146>
    232a:	70 33       	cpi	r23, 0x30	; 48
    232c:	11 f4       	brne	.+4      	; 0x2332 <__ftoa_engine+0x130>
    232e:	8a 95       	dec	r24
    2330:	e6 cf       	rjmp	.-52     	; 0x22fe <__ftoa_engine+0xfc>
    2332:	e8 94       	clt
    2334:	01 50       	subi	r16, 0x01	; 1
    2336:	30 f0       	brcs	.+12     	; 0x2344 <__ftoa_engine+0x142>
    2338:	08 0f       	add	r16, r24
    233a:	0a f4       	brpl	.+2      	; 0x233e <__ftoa_engine+0x13c>
    233c:	00 27       	eor	r16, r16
    233e:	02 17       	cp	r16, r18
    2340:	08 f4       	brcc	.+2      	; 0x2344 <__ftoa_engine+0x142>
    2342:	20 2f       	mov	r18, r16
    2344:	23 95       	inc	r18
    2346:	02 2f       	mov	r16, r18
    2348:	7a 33       	cpi	r23, 0x3A	; 58
    234a:	28 f0       	brcs	.+10     	; 0x2356 <__ftoa_engine+0x154>
    234c:	79 e3       	ldi	r23, 0x39	; 57
    234e:	7d 93       	st	X+, r23
    2350:	2a 95       	dec	r18
    2352:	e9 f7       	brne	.-6      	; 0x234e <__ftoa_engine+0x14c>
    2354:	10 c0       	rjmp	.+32     	; 0x2376 <__ftoa_engine+0x174>
    2356:	7d 93       	st	X+, r23
    2358:	2a 95       	dec	r18
    235a:	89 f6       	brne	.-94     	; 0x22fe <__ftoa_engine+0xfc>
    235c:	06 94       	lsr	r0
    235e:	97 95       	ror	r25
    2360:	67 95       	ror	r22
    2362:	37 95       	ror	r19
    2364:	17 95       	ror	r17
    2366:	17 94       	ror	r1
    2368:	e1 18       	sub	r14, r1
    236a:	f1 0a       	sbc	r15, r17
    236c:	43 0b       	sbc	r20, r19
    236e:	56 0b       	sbc	r21, r22
    2370:	c9 0b       	sbc	r28, r25
    2372:	d0 09       	sbc	r29, r0
    2374:	98 f0       	brcs	.+38     	; 0x239c <__ftoa_engine+0x19a>
    2376:	23 95       	inc	r18
    2378:	7e 91       	ld	r23, -X
    237a:	73 95       	inc	r23
    237c:	7a 33       	cpi	r23, 0x3A	; 58
    237e:	08 f0       	brcs	.+2      	; 0x2382 <__ftoa_engine+0x180>
    2380:	70 e3       	ldi	r23, 0x30	; 48
    2382:	7c 93       	st	X, r23
    2384:	20 13       	cpse	r18, r16
    2386:	b8 f7       	brcc	.-18     	; 0x2376 <__ftoa_engine+0x174>
    2388:	7e 91       	ld	r23, -X
    238a:	70 61       	ori	r23, 0x10	; 16
    238c:	7d 93       	st	X+, r23
    238e:	30 f0       	brcs	.+12     	; 0x239c <__ftoa_engine+0x19a>
    2390:	83 95       	inc	r24
    2392:	71 e3       	ldi	r23, 0x31	; 49
    2394:	7d 93       	st	X+, r23
    2396:	70 e3       	ldi	r23, 0x30	; 48
    2398:	2a 95       	dec	r18
    239a:	e1 f7       	brne	.-8      	; 0x2394 <__ftoa_engine+0x192>
    239c:	11 24       	eor	r1, r1
    239e:	ef 90       	pop	r14
    23a0:	ff 90       	pop	r15
    23a2:	0f 91       	pop	r16
    23a4:	1f 91       	pop	r17
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	99 27       	eor	r25, r25
    23ac:	87 fd       	sbrc	r24, 7
    23ae:	90 95       	com	r25
    23b0:	08 95       	ret

000023b2 <isspace>:
    23b2:	91 11       	cpse	r25, r1
    23b4:	3d c1       	rjmp	.+634    	; 0x2630 <__ctype_isfalse>
    23b6:	80 32       	cpi	r24, 0x20	; 32
    23b8:	19 f0       	breq	.+6      	; 0x23c0 <isspace+0xe>
    23ba:	89 50       	subi	r24, 0x09	; 9
    23bc:	85 50       	subi	r24, 0x05	; 5
    23be:	d0 f7       	brcc	.-12     	; 0x23b4 <isspace+0x2>
    23c0:	08 95       	ret

000023c2 <strncasecmp_P>:
    23c2:	fb 01       	movw	r30, r22
    23c4:	dc 01       	movw	r26, r24
    23c6:	41 50       	subi	r20, 0x01	; 1
    23c8:	50 40       	sbci	r21, 0x00	; 0
    23ca:	88 f0       	brcs	.+34     	; 0x23ee <strncasecmp_P+0x2c>
    23cc:	8d 91       	ld	r24, X+
    23ce:	81 34       	cpi	r24, 0x41	; 65
    23d0:	1c f0       	brlt	.+6      	; 0x23d8 <strncasecmp_P+0x16>
    23d2:	8b 35       	cpi	r24, 0x5B	; 91
    23d4:	0c f4       	brge	.+2      	; 0x23d8 <strncasecmp_P+0x16>
    23d6:	80 5e       	subi	r24, 0xE0	; 224
    23d8:	65 91       	lpm	r22, Z+
    23da:	61 34       	cpi	r22, 0x41	; 65
    23dc:	1c f0       	brlt	.+6      	; 0x23e4 <strncasecmp_P+0x22>
    23de:	6b 35       	cpi	r22, 0x5B	; 91
    23e0:	0c f4       	brge	.+2      	; 0x23e4 <strncasecmp_P+0x22>
    23e2:	60 5e       	subi	r22, 0xE0	; 224
    23e4:	86 1b       	sub	r24, r22
    23e6:	61 11       	cpse	r22, r1
    23e8:	71 f3       	breq	.-36     	; 0x23c6 <strncasecmp_P+0x4>
    23ea:	99 0b       	sbc	r25, r25
    23ec:	08 95       	ret
    23ee:	88 1b       	sub	r24, r24
    23f0:	fc cf       	rjmp	.-8      	; 0x23ea <strncasecmp_P+0x28>

000023f2 <strnlen_P>:
    23f2:	fc 01       	movw	r30, r24
    23f4:	05 90       	lpm	r0, Z+
    23f6:	61 50       	subi	r22, 0x01	; 1
    23f8:	70 40       	sbci	r23, 0x00	; 0
    23fa:	01 10       	cpse	r0, r1
    23fc:	d8 f7       	brcc	.-10     	; 0x23f4 <strnlen_P+0x2>
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	8e 0f       	add	r24, r30
    2404:	9f 1f       	adc	r25, r31
    2406:	08 95       	ret

00002408 <strchr>:
    2408:	fc 01       	movw	r30, r24
    240a:	81 91       	ld	r24, Z+
    240c:	86 17       	cp	r24, r22
    240e:	21 f0       	breq	.+8      	; 0x2418 <strchr+0x10>
    2410:	88 23       	and	r24, r24
    2412:	d9 f7       	brne	.-10     	; 0x240a <strchr+0x2>
    2414:	99 27       	eor	r25, r25
    2416:	08 95       	ret
    2418:	31 97       	sbiw	r30, 0x01	; 1
    241a:	cf 01       	movw	r24, r30
    241c:	08 95       	ret

0000241e <strcmp>:
    241e:	fb 01       	movw	r30, r22
    2420:	dc 01       	movw	r26, r24
    2422:	8d 91       	ld	r24, X+
    2424:	01 90       	ld	r0, Z+
    2426:	80 19       	sub	r24, r0
    2428:	01 10       	cpse	r0, r1
    242a:	d9 f3       	breq	.-10     	; 0x2422 <strcmp+0x4>
    242c:	99 0b       	sbc	r25, r25
    242e:	08 95       	ret

00002430 <strncmp>:
    2430:	fb 01       	movw	r30, r22
    2432:	dc 01       	movw	r26, r24
    2434:	41 50       	subi	r20, 0x01	; 1
    2436:	50 40       	sbci	r21, 0x00	; 0
    2438:	30 f0       	brcs	.+12     	; 0x2446 <strncmp+0x16>
    243a:	8d 91       	ld	r24, X+
    243c:	01 90       	ld	r0, Z+
    243e:	80 19       	sub	r24, r0
    2440:	19 f4       	brne	.+6      	; 0x2448 <strncmp+0x18>
    2442:	00 20       	and	r0, r0
    2444:	b9 f7       	brne	.-18     	; 0x2434 <strncmp+0x4>
    2446:	88 1b       	sub	r24, r24
    2448:	99 0b       	sbc	r25, r25
    244a:	08 95       	ret

0000244c <strnlen>:
    244c:	fc 01       	movw	r30, r24
    244e:	61 50       	subi	r22, 0x01	; 1
    2450:	70 40       	sbci	r23, 0x00	; 0
    2452:	01 90       	ld	r0, Z+
    2454:	01 10       	cpse	r0, r1
    2456:	d8 f7       	brcc	.-10     	; 0x244e <strnlen+0x2>
    2458:	80 95       	com	r24
    245a:	90 95       	com	r25
    245c:	8e 0f       	add	r24, r30
    245e:	9f 1f       	adc	r25, r31
    2460:	08 95       	ret

00002462 <fputc>:
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	8c 01       	movw	r16, r24
    246c:	eb 01       	movw	r28, r22
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	81 ff       	sbrs	r24, 1
    2472:	1b c0       	rjmp	.+54     	; 0x24aa <fputc+0x48>
    2474:	82 ff       	sbrs	r24, 2
    2476:	0d c0       	rjmp	.+26     	; 0x2492 <fputc+0x30>
    2478:	2e 81       	ldd	r18, Y+6	; 0x06
    247a:	3f 81       	ldd	r19, Y+7	; 0x07
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	28 17       	cp	r18, r24
    2482:	39 07       	cpc	r19, r25
    2484:	64 f4       	brge	.+24     	; 0x249e <fputc+0x3c>
    2486:	e8 81       	ld	r30, Y
    2488:	f9 81       	ldd	r31, Y+1	; 0x01
    248a:	01 93       	st	Z+, r16
    248c:	f9 83       	std	Y+1, r31	; 0x01
    248e:	e8 83       	st	Y, r30
    2490:	06 c0       	rjmp	.+12     	; 0x249e <fputc+0x3c>
    2492:	e8 85       	ldd	r30, Y+8	; 0x08
    2494:	f9 85       	ldd	r31, Y+9	; 0x09
    2496:	80 2f       	mov	r24, r16
    2498:	09 95       	icall
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	31 f4       	brne	.+12     	; 0x24aa <fputc+0x48>
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	9f 83       	std	Y+7, r25	; 0x07
    24a6:	8e 83       	std	Y+6, r24	; 0x06
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <fputc+0x4c>
    24aa:	0f ef       	ldi	r16, 0xFF	; 255
    24ac:	1f ef       	ldi	r17, 0xFF	; 255
    24ae:	c8 01       	movw	r24, r16
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <printf>:
    24ba:	a0 e0       	ldi	r26, 0x00	; 0
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e3 e6       	ldi	r30, 0x63	; 99
    24c0:	f2 e1       	ldi	r31, 0x12	; 18
    24c2:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__prologue_saves__+0x20>
    24c6:	fe 01       	movw	r30, r28
    24c8:	35 96       	adiw	r30, 0x05	; 5
    24ca:	61 91       	ld	r22, Z+
    24cc:	71 91       	ld	r23, Z+
    24ce:	80 91 c8 07 	lds	r24, 0x07C8
    24d2:	90 91 c9 07 	lds	r25, 0x07C9
    24d6:	af 01       	movw	r20, r30
    24d8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <vfprintf>
    24dc:	20 96       	adiw	r28, 0x00	; 0
    24de:	e2 e0       	ldi	r30, 0x02	; 2
    24e0:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__epilogue_restores__+0x20>

000024e4 <puts>:
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	8c 01       	movw	r16, r24
    24ee:	e0 91 c8 07 	lds	r30, 0x07C8
    24f2:	f0 91 c9 07 	lds	r31, 0x07C9
    24f6:	83 81       	ldd	r24, Z+3	; 0x03
    24f8:	81 ff       	sbrs	r24, 1
    24fa:	1a c0       	rjmp	.+52     	; 0x2530 <puts+0x4c>
    24fc:	c0 e0       	ldi	r28, 0x00	; 0
    24fe:	d0 e0       	ldi	r29, 0x00	; 0
    2500:	05 c0       	rjmp	.+10     	; 0x250c <puts+0x28>
    2502:	09 95       	icall
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	11 f0       	breq	.+4      	; 0x250c <puts+0x28>
    2508:	cf ef       	ldi	r28, 0xFF	; 255
    250a:	df ef       	ldi	r29, 0xFF	; 255
    250c:	f8 01       	movw	r30, r16
    250e:	81 91       	ld	r24, Z+
    2510:	8f 01       	movw	r16, r30
    2512:	60 91 c8 07 	lds	r22, 0x07C8
    2516:	70 91 c9 07 	lds	r23, 0x07C9
    251a:	db 01       	movw	r26, r22
    251c:	18 96       	adiw	r26, 0x08	; 8
    251e:	ed 91       	ld	r30, X+
    2520:	fc 91       	ld	r31, X
    2522:	19 97       	sbiw	r26, 0x09	; 9
    2524:	88 23       	and	r24, r24
    2526:	69 f7       	brne	.-38     	; 0x2502 <puts+0x1e>
    2528:	8a e0       	ldi	r24, 0x0A	; 10
    252a:	09 95       	icall
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	11 f0       	breq	.+4      	; 0x2534 <puts+0x50>
    2530:	cf ef       	ldi	r28, 0xFF	; 255
    2532:	df ef       	ldi	r29, 0xFF	; 255
    2534:	ce 01       	movw	r24, r28
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	08 95       	ret

00002540 <__ultoa_invert>:
    2540:	fa 01       	movw	r30, r20
    2542:	aa 27       	eor	r26, r26
    2544:	28 30       	cpi	r18, 0x08	; 8
    2546:	51 f1       	breq	.+84     	; 0x259c <__ultoa_invert+0x5c>
    2548:	20 31       	cpi	r18, 0x10	; 16
    254a:	81 f1       	breq	.+96     	; 0x25ac <__ultoa_invert+0x6c>
    254c:	e8 94       	clt
    254e:	6f 93       	push	r22
    2550:	6e 7f       	andi	r22, 0xFE	; 254
    2552:	6e 5f       	subi	r22, 0xFE	; 254
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	8f 4f       	sbci	r24, 0xFF	; 255
    2558:	9f 4f       	sbci	r25, 0xFF	; 255
    255a:	af 4f       	sbci	r26, 0xFF	; 255
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	3e d0       	rcall	.+124    	; 0x25dc <__ultoa_invert+0x9c>
    2560:	b4 e0       	ldi	r27, 0x04	; 4
    2562:	3c d0       	rcall	.+120    	; 0x25dc <__ultoa_invert+0x9c>
    2564:	67 0f       	add	r22, r23
    2566:	78 1f       	adc	r23, r24
    2568:	89 1f       	adc	r24, r25
    256a:	9a 1f       	adc	r25, r26
    256c:	a1 1d       	adc	r26, r1
    256e:	68 0f       	add	r22, r24
    2570:	79 1f       	adc	r23, r25
    2572:	8a 1f       	adc	r24, r26
    2574:	91 1d       	adc	r25, r1
    2576:	a1 1d       	adc	r26, r1
    2578:	6a 0f       	add	r22, r26
    257a:	71 1d       	adc	r23, r1
    257c:	81 1d       	adc	r24, r1
    257e:	91 1d       	adc	r25, r1
    2580:	a1 1d       	adc	r26, r1
    2582:	20 d0       	rcall	.+64     	; 0x25c4 <__ultoa_invert+0x84>
    2584:	09 f4       	brne	.+2      	; 0x2588 <__ultoa_invert+0x48>
    2586:	68 94       	set
    2588:	3f 91       	pop	r19
    258a:	2a e0       	ldi	r18, 0x0A	; 10
    258c:	26 9f       	mul	r18, r22
    258e:	11 24       	eor	r1, r1
    2590:	30 19       	sub	r19, r0
    2592:	30 5d       	subi	r19, 0xD0	; 208
    2594:	31 93       	st	Z+, r19
    2596:	de f6       	brtc	.-74     	; 0x254e <__ultoa_invert+0xe>
    2598:	cf 01       	movw	r24, r30
    259a:	08 95       	ret
    259c:	46 2f       	mov	r20, r22
    259e:	47 70       	andi	r20, 0x07	; 7
    25a0:	40 5d       	subi	r20, 0xD0	; 208
    25a2:	41 93       	st	Z+, r20
    25a4:	b3 e0       	ldi	r27, 0x03	; 3
    25a6:	0f d0       	rcall	.+30     	; 0x25c6 <__ultoa_invert+0x86>
    25a8:	c9 f7       	brne	.-14     	; 0x259c <__ultoa_invert+0x5c>
    25aa:	f6 cf       	rjmp	.-20     	; 0x2598 <__ultoa_invert+0x58>
    25ac:	46 2f       	mov	r20, r22
    25ae:	4f 70       	andi	r20, 0x0F	; 15
    25b0:	40 5d       	subi	r20, 0xD0	; 208
    25b2:	4a 33       	cpi	r20, 0x3A	; 58
    25b4:	18 f0       	brcs	.+6      	; 0x25bc <__ultoa_invert+0x7c>
    25b6:	49 5d       	subi	r20, 0xD9	; 217
    25b8:	31 fd       	sbrc	r19, 1
    25ba:	40 52       	subi	r20, 0x20	; 32
    25bc:	41 93       	st	Z+, r20
    25be:	02 d0       	rcall	.+4      	; 0x25c4 <__ultoa_invert+0x84>
    25c0:	a9 f7       	brne	.-22     	; 0x25ac <__ultoa_invert+0x6c>
    25c2:	ea cf       	rjmp	.-44     	; 0x2598 <__ultoa_invert+0x58>
    25c4:	b4 e0       	ldi	r27, 0x04	; 4
    25c6:	a6 95       	lsr	r26
    25c8:	97 95       	ror	r25
    25ca:	87 95       	ror	r24
    25cc:	77 95       	ror	r23
    25ce:	67 95       	ror	r22
    25d0:	ba 95       	dec	r27
    25d2:	c9 f7       	brne	.-14     	; 0x25c6 <__ultoa_invert+0x86>
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	61 05       	cpc	r22, r1
    25d8:	71 05       	cpc	r23, r1
    25da:	08 95       	ret
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	0a 2e       	mov	r0, r26
    25e2:	06 94       	lsr	r0
    25e4:	57 95       	ror	r21
    25e6:	47 95       	ror	r20
    25e8:	37 95       	ror	r19
    25ea:	27 95       	ror	r18
    25ec:	ba 95       	dec	r27
    25ee:	c9 f7       	brne	.-14     	; 0x25e2 <__ultoa_invert+0xa2>
    25f0:	62 0f       	add	r22, r18
    25f2:	73 1f       	adc	r23, r19
    25f4:	84 1f       	adc	r24, r20
    25f6:	95 1f       	adc	r25, r21
    25f8:	a0 1d       	adc	r26, r0
    25fa:	08 95       	ret

000025fc <__eerd_byte_m328p>:
    25fc:	f9 99       	sbic	0x1f, 1	; 31
    25fe:	fe cf       	rjmp	.-4      	; 0x25fc <__eerd_byte_m328p>
    2600:	92 bd       	out	0x22, r25	; 34
    2602:	81 bd       	out	0x21, r24	; 33
    2604:	f8 9a       	sbi	0x1f, 0	; 31
    2606:	99 27       	eor	r25, r25
    2608:	80 b5       	in	r24, 0x20	; 32
    260a:	08 95       	ret

0000260c <__eeupd_byte_m328p>:
    260c:	26 2f       	mov	r18, r22

0000260e <__eeupd_r18_m328p>:
    260e:	f9 99       	sbic	0x1f, 1	; 31
    2610:	fe cf       	rjmp	.-4      	; 0x260e <__eeupd_r18_m328p>
    2612:	92 bd       	out	0x22, r25	; 34
    2614:	81 bd       	out	0x21, r24	; 33
    2616:	f8 9a       	sbi	0x1f, 0	; 31
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	00 b4       	in	r0, 0x20	; 32
    261c:	02 16       	cp	r0, r18
    261e:	39 f0       	breq	.+14     	; 0x262e <__eeupd_r18_m328p+0x20>
    2620:	1f ba       	out	0x1f, r1	; 31
    2622:	20 bd       	out	0x20, r18	; 32
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	fa 9a       	sbi	0x1f, 2	; 31
    262a:	f9 9a       	sbi	0x1f, 1	; 31
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	08 95       	ret

00002630 <__ctype_isfalse>:
    2630:	99 27       	eor	r25, r25
    2632:	88 27       	eor	r24, r24

00002634 <__ctype_istrue>:
    2634:	08 95       	ret

00002636 <_exit>:
    2636:	f8 94       	cli

00002638 <__stop_program>:
    2638:	ff cf       	rjmp	.-2      	; 0x2638 <__stop_program>
