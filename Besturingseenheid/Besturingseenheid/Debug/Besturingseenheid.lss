
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ec  00800100  000023a4  00002438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  008006ec  008006ec  00002a24  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00006780  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025f3  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  00008fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f9  00000000  00000000  00009d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  0000b384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000873  00000000  00000000  0000bad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d94  00000000  00000000  0000c34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e0df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e4 ea       	ldi	r30, 0xA4	; 164
     1ba:	f3 e2       	ldi	r31, 0x23	; 35
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	ac 3e       	cpi	r26, 0xEC	; 236
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	18 e0       	ldi	r17, 0x08	; 8
     1ca:	ac ee       	ldi	r26, 0xEC	; 236
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a0 32       	cpi	r26, 0x20	; 32
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 ec 06 	lds	r24, 0x06EC
     262:	90 91 ed 06 	lds	r25, 0x06ED
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 f4 06 	lds	r22, 0x06F4
     28a:	70 91 f5 06 	lds	r23, 0x06F5
     28e:	80 91 f6 06 	lds	r24, 0x06F6
     292:	90 91 f7 06 	lds	r25, 0x06F7
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 00 01 	sts	0x0100, r20
     2c2:	50 93 01 01 	sts	0x0101, r21
     2c6:	60 93 02 01 	sts	0x0102, r22
     2ca:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 46 09 	call	0x128c	; 0x128c <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 fc 06 	sts	0x06FC, r20
     30c:	50 93 fd 06 	sts	0x06FD, r21
     310:	60 93 fe 06 	sts	0x06FE, r22
     314:	70 93 ff 06 	sts	0x06FF, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 20 07 	sts	0x0720, r20
     350:	50 93 21 07 	sts	0x0721, r21
     354:	60 93 22 07 	sts	0x0722, r22
     358:	70 93 23 07 	sts	0x0723, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 15 08 	call	0x102a	; 0x102a <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
	//sei();
	
	extraTime1++;
     3b2:	80 91 ee 06 	lds	r24, 0x06EE
     3b6:	90 91 ef 06 	lds	r25, 0x06EF
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 ef 06 	sts	0x06EF, r25
     3c0:	80 93 ee 06 	sts	0x06EE, r24
	if(extraTime1>100){
     3c4:	80 91 ee 06 	lds	r24, 0x06EE
     3c8:	90 91 ef 06 	lds	r25, 0x06EF
     3cc:	85 36       	cpi	r24, 0x65	; 101
     3ce:	91 05       	cpc	r25, r1
     3d0:	6c f0       	brlt	.+26     	; 0x3ec <__vector_14+0x48>
		timerVariable++;
     3d2:	80 91 ec 06 	lds	r24, 0x06EC
     3d6:	90 91 ed 06 	lds	r25, 0x06ED
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 ed 06 	sts	0x06ED, r25
     3e0:	80 93 ec 06 	sts	0x06EC, r24
		extraTime1 = 0;
     3e4:	10 92 ef 06 	sts	0x06EF, r1
     3e8:	10 92 ee 06 	sts	0x06EE, r1
	}
	extraTime++;
     3ec:	80 91 f0 06 	lds	r24, 0x06F0
     3f0:	90 91 f1 06 	lds	r25, 0x06F1
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	90 93 f1 06 	sts	0x06F1, r25
     3fa:	80 93 f0 06 	sts	0x06F0, r24
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
	}*/
}
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	if(i == 1)
     432:	80 91 f2 06 	lds	r24, 0x06F2
     436:	90 91 f3 06 	lds	r25, 0x06F3
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	91 05       	cpc	r25, r1
     43e:	d1 f4       	brne	.+52     	; 0x474 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     440:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     444:	c4 e8       	ldi	r28, 0x84	; 132
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	68 81       	ld	r22, Y
     44a:	79 81       	ldd	r23, Y+1	; 0x01
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 44 09 	call	0x1288	; 0x1288 <__floatunsisf>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	80 93 f4 06 	sts	0x06F4, r24
     45c:	90 93 f5 06 	sts	0x06F5, r25
     460:	a0 93 f6 06 	sts	0x06F6, r26
     464:	b0 93 f7 06 	sts	0x06F7, r27
		TCNT1 = 0; //Reset duration
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     46c:	10 92 f3 06 	sts	0x06F3, r1
     470:	10 92 f2 06 	sts	0x06F2, r1
	}

	if(i==0)
     474:	80 91 f2 06 	lds	r24, 0x06F2
     478:	90 91 f3 06 	lds	r25, 0x06F3
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	59 f4       	brne	.+22     	; 0x496 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     480:	e1 e8       	ldi	r30, 0x81	; 129
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 83       	st	Z, r24
		i = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 f3 06 	sts	0x06F3, r25
     492:	80 93 f2 06 	sts	0x06F2, r24
	}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4c4:	c0 91 f8 06 	lds	r28, 0x06F8
     4c8:	d0 91 f9 06 	lds	r29, 0x06F9
     4cc:	20 91 1c 01 	lds	r18, 0x011C
     4d0:	30 91 1d 01 	lds	r19, 0x011D
     4d4:	2c 17       	cp	r18, r28
     4d6:	3d 07       	cpc	r19, r29
     4d8:	8c f0       	brlt	.+34     	; 0x4fc <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4da:	8c 01       	movw	r16, r24
     4dc:	0c 0f       	add	r16, r28
     4de:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     4e0:	f8 01       	movw	r30, r16
     4e2:	61 91       	ld	r22, Z+
     4e4:	8f 01       	movw	r16, r30
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	80 91 1c 01 	lds	r24, 0x011C
     4f2:	90 91 1d 01 	lds	r25, 0x011D
     4f6:	8c 17       	cp	r24, r28
     4f8:	9d 07       	cpc	r25, r29
     4fa:	94 f7       	brge	.-28     	; 0x4e0 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     50e:	c0 91 f8 06 	lds	r28, 0x06F8
     512:	d0 91 f9 06 	lds	r29, 0x06F9
     516:	80 91 1c 01 	lds	r24, 0x011C
     51a:	90 91 1d 01 	lds	r25, 0x011D
     51e:	8c 17       	cp	r24, r28
     520:	9d 07       	cpc	r25, r29
     522:	8c f0       	brlt	.+34     	; 0x546 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     524:	8e 01       	movw	r16, r28
     526:	0e 59       	subi	r16, 0x9E	; 158
     528:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     530:	f8 01       	movw	r30, r16
     532:	81 93       	st	Z+, r24
     534:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	80 91 1c 01 	lds	r24, 0x011C
     53c:	90 91 1d 01 	lds	r25, 0x011D
     540:	8c 17       	cp	r24, r28
     542:	9d 07       	cpc	r25, r29
     544:	94 f7       	brge	.-28     	; 0x52a <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     546:	82 e6       	ldi	r24, 0x62	; 98
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     55e:	c0 91 0e 01 	lds	r28, 0x010E
     562:	d0 91 0f 01 	lds	r29, 0x010F
     566:	80 91 1a 01 	lds	r24, 0x011A
     56a:	90 91 1b 01 	lds	r25, 0x011B
     56e:	99 23       	and	r25, r25
     570:	cc f0       	brlt	.+50     	; 0x5a4 <set_Locatie+0x50>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     576:	f8 01       	movw	r30, r16
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	ce 01       	movw	r24, r28
     57e:	60 81       	ld	r22, Z
     580:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	80 91 0e 01 	lds	r24, 0x010E
     58a:	90 91 0f 01 	lds	r25, 0x010F
     58e:	9e 01       	movw	r18, r28
     590:	28 1b       	sub	r18, r24
     592:	39 0b       	sbc	r19, r25
     594:	c9 01       	movw	r24, r18
     596:	20 91 1a 01 	lds	r18, 0x011A
     59a:	30 91 1b 01 	lds	r19, 0x011B
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	4c f7       	brge	.-46     	; 0x576 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5be:	e0 90 0e 01 	lds	r14, 0x010E
     5c2:	f0 90 0f 01 	lds	r15, 0x010F
     5c6:	80 91 1a 01 	lds	r24, 0x011A
     5ca:	90 91 1b 01 	lds	r25, 0x011B
     5ce:	99 23       	and	r25, r25
     5d0:	ec f0       	brlt	.+58     	; 0x60c <get_Locatie+0x5e>
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     5da:	0f 2e       	mov	r0, r31
     5dc:	f3 e3       	ldi	r31, 0x33	; 51
     5de:	cf 2e       	mov	r12, r31
     5e0:	f7 e0       	ldi	r31, 0x07	; 7
     5e2:	df 2e       	mov	r13, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	c7 01       	movw	r24, r14
     5e8:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     5ec:	cc 0d       	add	r28, r12
     5ee:	dd 1d       	adc	r29, r13
     5f0:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5f2:	08 94       	sec
     5f4:	e1 1c       	adc	r14, r1
     5f6:	f1 1c       	adc	r15, r1
     5f8:	e8 01       	movw	r28, r16
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	80 91 1a 01 	lds	r24, 0x011A
     602:	90 91 1b 01 	lds	r25, 0x011B
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	6c f7       	brge	.-38     	; 0x5e6 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     60c:	83 e3       	ldi	r24, 0x33	; 51
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     62c:	c0 91 0c 01 	lds	r28, 0x010C
     630:	d0 91 0d 01 	lds	r29, 0x010D
     634:	80 91 18 01 	lds	r24, 0x0118
     638:	90 91 19 01 	lds	r25, 0x0119
     63c:	99 23       	and	r25, r25
     63e:	cc f0       	brlt	.+50     	; 0x672 <set_Versie+0x50>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     644:	f8 01       	movw	r30, r16
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	ce 01       	movw	r24, r28
     64c:	60 81       	ld	r22, Z
     64e:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	80 91 0c 01 	lds	r24, 0x010C
     658:	90 91 0d 01 	lds	r25, 0x010D
     65c:	9e 01       	movw	r18, r28
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	c9 01       	movw	r24, r18
     664:	20 91 18 01 	lds	r18, 0x0118
     668:	30 91 19 01 	lds	r19, 0x0119
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	4c f7       	brge	.-46     	; 0x644 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     68c:	e0 90 0c 01 	lds	r14, 0x010C
     690:	f0 90 0d 01 	lds	r15, 0x010D
     694:	80 91 18 01 	lds	r24, 0x0118
     698:	90 91 19 01 	lds	r25, 0x0119
     69c:	99 23       	and	r25, r25
     69e:	ec f0       	brlt	.+58     	; 0x6da <get_Versie+0x5e>
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     6a8:	0f 2e       	mov	r0, r31
     6aa:	fe e8       	ldi	r31, 0x8E	; 142
     6ac:	cf 2e       	mov	r12, r31
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	c7 01       	movw	r24, r14
     6b6:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     6ba:	cc 0d       	add	r28, r12
     6bc:	dd 1d       	adc	r29, r13
     6be:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     6c0:	08 94       	sec
     6c2:	e1 1c       	adc	r14, r1
     6c4:	f1 1c       	adc	r15, r1
     6c6:	e8 01       	movw	r28, r16
     6c8:	0f 5f       	subi	r16, 0xFF	; 255
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	80 91 18 01 	lds	r24, 0x0118
     6d0:	90 91 19 01 	lds	r25, 0x0119
     6d4:	8c 17       	cp	r24, r28
     6d6:	9d 07       	cpc	r25, r29
     6d8:	6c f7       	brge	.-38     	; 0x6b4 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     6da:	8e e8       	ldi	r24, 0x8E	; 142
     6dc:	97 e0       	ldi	r25, 0x07	; 7
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	08 95       	ret

000006f0 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     6fa:	c0 91 0a 01 	lds	r28, 0x010A
     6fe:	d0 91 0b 01 	lds	r29, 0x010B
     702:	80 91 16 01 	lds	r24, 0x0116
     706:	90 91 17 01 	lds	r25, 0x0117
     70a:	99 23       	and	r25, r25
     70c:	cc f0       	brlt	.+50     	; 0x740 <set_grensTemp+0x50>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     712:	f8 01       	movw	r30, r16
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	ce 01       	movw	r24, r28
     71a:	60 81       	ld	r22, Z
     71c:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     720:	21 96       	adiw	r28, 0x01	; 1
     722:	80 91 0a 01 	lds	r24, 0x010A
     726:	90 91 0b 01 	lds	r25, 0x010B
     72a:	9e 01       	movw	r18, r28
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	c9 01       	movw	r24, r18
     732:	20 91 16 01 	lds	r18, 0x0116
     736:	30 91 17 01 	lds	r19, 0x0117
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4c f7       	brge	.-46     	; 0x712 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     75a:	e0 90 0a 01 	lds	r14, 0x010A
     75e:	f0 90 0b 01 	lds	r15, 0x010B
     762:	80 91 16 01 	lds	r24, 0x0116
     766:	90 91 17 01 	lds	r25, 0x0117
     76a:	99 23       	and	r25, r25
     76c:	ec f0       	brlt	.+58     	; 0x7a8 <get_grensTemp+0x5e>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     776:	0f 2e       	mov	r0, r31
     778:	ff e5       	ldi	r31, 0x5F	; 95
     77a:	cf 2e       	mov	r12, r31
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	c7 01       	movw	r24, r14
     784:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     788:	cc 0d       	add	r28, r12
     78a:	dd 1d       	adc	r29, r13
     78c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     78e:	08 94       	sec
     790:	e1 1c       	adc	r14, r1
     792:	f1 1c       	adc	r15, r1
     794:	e8 01       	movw	r28, r16
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	80 91 16 01 	lds	r24, 0x0116
     79e:	90 91 17 01 	lds	r25, 0x0117
     7a2:	8c 17       	cp	r24, r28
     7a4:	9d 07       	cpc	r25, r29
     7a6:	6c f7       	brge	.-38     	; 0x782 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     7a8:	8f e5       	ldi	r24, 0x5F	; 95
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7c8:	c0 91 08 01 	lds	r28, 0x0108
     7cc:	d0 91 09 01 	lds	r29, 0x0109
     7d0:	80 91 14 01 	lds	r24, 0x0114
     7d4:	90 91 15 01 	lds	r25, 0x0115
     7d8:	99 23       	and	r25, r25
     7da:	cc f0       	brlt	.+50     	; 0x80e <set_grensLicht+0x50>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	e8 0f       	add	r30, r24
     7e4:	f9 1f       	adc	r31, r25
     7e6:	ce 01       	movw	r24, r28
     7e8:	60 81       	ld	r22, Z
     7ea:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	80 91 08 01 	lds	r24, 0x0108
     7f4:	90 91 09 01 	lds	r25, 0x0109
     7f8:	9e 01       	movw	r18, r28
     7fa:	28 1b       	sub	r18, r24
     7fc:	39 0b       	sbc	r19, r25
     7fe:	c9 01       	movw	r24, r18
     800:	20 91 14 01 	lds	r18, 0x0114
     804:	30 91 15 01 	lds	r19, 0x0115
     808:	28 17       	cp	r18, r24
     80a:	39 07       	cpc	r19, r25
     80c:	4c f7       	brge	.-46     	; 0x7e0 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     824:	e0 90 08 01 	lds	r14, 0x0108
     828:	f0 90 09 01 	lds	r15, 0x0109
     82c:	80 91 14 01 	lds	r24, 0x0114
     830:	90 91 15 01 	lds	r25, 0x0115
     834:	99 23       	and	r25, r25
     836:	bc f0       	brlt	.+46     	; 0x866 <get_grensLight+0x4e>
     838:	01 e0       	ldi	r16, 0x01	; 1
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     840:	c7 01       	movw	r24, r14
     842:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     846:	ca 56       	subi	r28, 0x6A	; 106
     848:	d8 4f       	sbci	r29, 0xF8	; 248
     84a:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84c:	08 94       	sec
     84e:	e1 1c       	adc	r14, r1
     850:	f1 1c       	adc	r15, r1
     852:	e8 01       	movw	r28, r16
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	80 91 14 01 	lds	r24, 0x0114
     85c:	90 91 15 01 	lds	r25, 0x0115
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	6c f7       	brge	.-38     	; 0x840 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     866:	86 e9       	ldi	r24, 0x96	; 150
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     882:	c0 91 06 01 	lds	r28, 0x0106
     886:	d0 91 07 01 	lds	r29, 0x0107
     88a:	80 91 12 01 	lds	r24, 0x0112
     88e:	90 91 13 01 	lds	r25, 0x0113
     892:	99 23       	and	r25, r25
     894:	cc f0       	brlt	.+50     	; 0x8c8 <set_minUnroll+0x50>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     89a:	f8 01       	movw	r30, r16
     89c:	e8 0f       	add	r30, r24
     89e:	f9 1f       	adc	r31, r25
     8a0:	ce 01       	movw	r24, r28
     8a2:	60 81       	ld	r22, Z
     8a4:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8a8:	21 96       	adiw	r28, 0x01	; 1
     8aa:	80 91 06 01 	lds	r24, 0x0106
     8ae:	90 91 07 01 	lds	r25, 0x0107
     8b2:	9e 01       	movw	r18, r28
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	c9 01       	movw	r24, r18
     8ba:	20 91 12 01 	lds	r18, 0x0112
     8be:	30 91 13 01 	lds	r19, 0x0113
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	4c f7       	brge	.-46     	; 0x89a <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8de:	e0 90 06 01 	lds	r14, 0x0106
     8e2:	f0 90 07 01 	lds	r15, 0x0107
     8e6:	80 91 12 01 	lds	r24, 0x0112
     8ea:	90 91 13 01 	lds	r25, 0x0113
     8ee:	99 23       	and	r25, r25
     8f0:	bc f0       	brlt	.+46     	; 0x920 <__stack+0x21>
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     8fa:	c7 01       	movw	r24, r14
     8fc:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     900:	cc 5d       	subi	r28, 0xDC	; 220
     902:	d8 4f       	sbci	r29, 0xF8	; 248
     904:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     906:	08 94       	sec
     908:	e1 1c       	adc	r14, r1
     90a:	f1 1c       	adc	r15, r1
     90c:	e8 01       	movw	r28, r16
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	80 91 12 01 	lds	r24, 0x0112
     916:	90 91 13 01 	lds	r25, 0x0113
     91a:	8c 17       	cp	r24, r28
     91c:	9d 07       	cpc	r25, r29
     91e:	6c f7       	brge	.-38     	; 0x8fa <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     920:	84 e2       	ldi	r24, 0x24	; 36
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     93c:	c0 91 04 01 	lds	r28, 0x0104
     940:	d0 91 05 01 	lds	r29, 0x0105
     944:	80 91 10 01 	lds	r24, 0x0110
     948:	90 91 11 01 	lds	r25, 0x0111
     94c:	99 23       	and	r25, r25
     94e:	cc f0       	brlt	.+50     	; 0x982 <set_maxUnroll+0x50>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     954:	f8 01       	movw	r30, r16
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ce 01       	movw	r24, r28
     95c:	60 81       	ld	r22, Z
     95e:	0e 94 bb 11 	call	0x2376	; 0x2376 <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     962:	21 96       	adiw	r28, 0x01	; 1
     964:	80 91 04 01 	lds	r24, 0x0104
     968:	90 91 05 01 	lds	r25, 0x0105
     96c:	9e 01       	movw	r18, r28
     96e:	28 1b       	sub	r18, r24
     970:	39 0b       	sbc	r19, r25
     972:	c9 01       	movw	r24, r18
     974:	20 91 10 01 	lds	r18, 0x0110
     978:	30 91 11 01 	lds	r19, 0x0111
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	4c f7       	brge	.-46     	; 0x954 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     998:	e0 90 04 01 	lds	r14, 0x0104
     99c:	f0 90 05 01 	lds	r15, 0x0105
     9a0:	80 91 10 01 	lds	r24, 0x0110
     9a4:	90 91 11 01 	lds	r25, 0x0111
     9a8:	99 23       	and	r25, r25
     9aa:	bc f0       	brlt	.+46     	; 0x9da <get_maxUnroll+0x4e>
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     9b4:	c7 01       	movw	r24, r14
     9b6:	0e 94 b3 11 	call	0x2366	; 0x2366 <__eerd_byte_m328p>
     9ba:	cc 53       	subi	r28, 0x3C	; 60
     9bc:	d8 4f       	sbci	r29, 0xF8	; 248
     9be:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9c0:	08 94       	sec
     9c2:	e1 1c       	adc	r14, r1
     9c4:	f1 1c       	adc	r15, r1
     9c6:	e8 01       	movw	r28, r16
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	80 91 10 01 	lds	r24, 0x0110
     9d0:	90 91 11 01 	lds	r25, 0x0111
     9d4:	8c 17       	cp	r24, r28
     9d6:	9d 07       	cpc	r25, r29
     9d8:	6c f7       	brge	.-38     	; 0x9b4 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     9da:	84 ec       	ldi	r24, 0xC4	; 196
     9dc:	97 e0       	ldi	r25, 0x07	; 7
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     9ec:	88 ef       	ldi	r24, 0xF8	; 248
     9ee:	97 e0       	ldi	r25, 0x07	; 7
     9f0:	68 e2       	ldi	r22, 0x28	; 40
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 b9 10 	call	0x2172	; 0x2172 <strchr>
	p1[strlen(p1) -1] = '\0';
     9f8:	e8 2f       	mov	r30, r24
     9fa:	f9 2f       	mov	r31, r25
     9fc:	df 01       	movw	r26, r30
     9fe:	0d 90       	ld	r0, X+
     a00:	00 20       	and	r0, r0
     a02:	e9 f7       	brne	.-6      	; 0x9fe <set_substring+0x12>
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	ae 1b       	sub	r26, r30
     a08:	bf 0b       	sbc	r27, r31
     a0a:	a8 0f       	add	r26, r24
     a0c:	b9 1f       	adc	r27, r25
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	1c 92       	st	X, r1
	substring = p1 +1;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 f5 07 	sts	0x07F5, r25
     a18:	80 93 f4 07 	sts	0x07F4, r24
     a1c:	08 95       	ret

00000a1e <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     a1e:	2f 92       	push	r2
     a20:	3f 92       	push	r3
     a22:	4f 92       	push	r4
     a24:	5f 92       	push	r5
     a26:	6f 92       	push	r6
     a28:	7f 92       	push	r7
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	ser_write("201 Please enter ID");
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     a4a:	c8 ef       	ldi	r28, 0xF8	; 248
     a4c:	d7 e0       	ldi	r29, 0x07	; 7
     a4e:	ce 01       	movw	r24, r28
     a50:	6e e1       	ldi	r22, 0x1E	; 30
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 d6 07 	call	0xfac	; 0xfac <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     a5a:	8a e6       	ldi	r24, 0x6A	; 106
     a5c:	96 e0       	ldi	r25, 0x06	; 6
     a5e:	be 01       	movw	r22, r28
     a60:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     a64:	28 2f       	mov	r18, r24
     a66:	39 2f       	mov	r19, r25
	if(ret |= 0){
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	b9 f0       	breq	.+46     	; 0xa9c <protocolCom+0x7e>
		ser_writeln("504: Verkeerde ID");
     a6e:	82 e3       	ldi	r24, 0x32	; 50
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
			}		
			}
			}
			}					
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret
	if(ret |= 0){
		ser_writeln("504: Verkeerde ID");
	}
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
     a9c:	84 e4       	ldi	r24, 0x44	; 68
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 27 11 	call	0x224e	; 0x224e <puts>
		ser_writeln("200 Handshake bevestigt");
     aa4:	85 e5       	ldi	r24, 0x55	; 85
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
		while (1) {
			ser_write("204 Wat kan ik voor u doen? ");
     aac:	0d e6       	ldi	r16, 0x6D	; 109
     aae:	11 e0       	ldi	r17, 0x01	; 1
			ser_readln(in_buf, sizeof(in_buf), 1);
     ab0:	c8 ef       	ldi	r28, 0xF8	; 248
     ab2:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fa e8       	ldi	r31, 0x8A	; 138
     ab8:	ef 2e       	mov	r14, r31
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	ff 2e       	mov	r15, r31
     abe:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f2 eb       	ldi	r31, 0xB2	; 178
     ac4:	af 2e       	mov	r10, r31
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	bf 2e       	mov	r11, r31
     aca:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     acc:	0f 2e       	mov	r0, r31
     ace:	f9 ed       	ldi	r31, 0xD9	; 217
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff ee       	ldi	r31, 0xEF	; 239
     adc:	8f 2e       	mov	r8, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	9f 2e       	mov	r9, r31
     ae2:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fb e0       	ldi	r31, 0x0B	; 11
     ae8:	6f 2e       	mov	r6, r31
     aea:	f2 e0       	ldi	r31, 0x02	; 2
     aec:	7f 2e       	mov	r7, r31
     aee:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     af0:	0f 2e       	mov	r0, r31
     af2:	fa e2       	ldi	r31, 0x2A	; 42
     af4:	4f 2e       	mov	r4, r31
     af6:	f2 e0       	ldi	r31, 0x02	; 2
     af8:	5f 2e       	mov	r5, r31
     afa:	f0 2d       	mov	r31, r0
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     afc:	0f 2e       	mov	r0, r31
     afe:	f6 e5       	ldi	r31, 0x56	; 86
     b00:	2f 2e       	mov	r2, r31
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	3f 2e       	mov	r3, r31
     b06:	f0 2d       	mov	r31, r0
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter \n");
		ser_writeln("200 Handshake bevestigt");
		while (1) {
			ser_write("204 Wat kan ik voor u doen? ");
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
			ser_readln(in_buf, sizeof(in_buf), 1);
     b0e:	ce 01       	movw	r24, r28
     b10:	6e e1       	ldi	r22, 0x1E	; 30
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 d6 07 	call	0xfac	; 0xfac <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b1a:	c7 01       	movw	r24, r14
     b1c:	be 01       	movw	r22, r28
     b1e:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     b22:	28 2f       	mov	r18, r24
     b24:	39 2f       	mov	r19, r25
     b26:	21 15       	cp	r18, r1
     b28:	31 05       	cpc	r19, r1
     b2a:	a1 f4       	brne	.+40     	; 0xb54 <protocolCom+0x136>
				if ((get_unrollStatus() % 2) == 1){
     b2c:	0e 94 10 08 	call	0x1020	; 0x1020 <get_unrollStatus>
     b30:	62 e0       	ldi	r22, 0x02	; 2
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__divmodhi4>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	91 05       	cpc	r25, r1
     b3c:	21 f4       	brne	.+8      	; 0xb46 <protocolCom+0x128>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     b3e:	81 e9       	ldi	r24, 0x91	; 145
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     b46:	0e 94 10 08 	call	0x1020	; 0x1020 <get_unrollStatus>
     b4a:	80 fd       	sbrc	r24, 0
     b4c:	1f c0       	rjmp	.+62     	; 0xb8c <protocolCom+0x16e>
					uitrollen();
     b4e:	0e 94 21 08 	call	0x1042	; 0x1042 <uitrollen>
     b52:	1c c0       	rjmp	.+56     	; 0xb8c <protocolCom+0x16e>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b54:	c5 01       	movw	r24, r10
     b56:	be 01       	movw	r22, r28
     b58:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     b5c:	28 2f       	mov	r18, r24
     b5e:	39 2f       	mov	r19, r25
     b60:	21 15       	cp	r18, r1
     b62:	31 05       	cpc	r19, r1
     b64:	99 f4       	brne	.+38     	; 0xb8c <protocolCom+0x16e>
				if ((get_unrollStatus() % 2) == 0){
     b66:	0e 94 10 08 	call	0x1020	; 0x1020 <get_unrollStatus>
     b6a:	80 fd       	sbrc	r24, 0
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <protocolCom+0x158>
					ser_writeln("501 Zonnescherm is al opgerold!");
     b6e:	89 eb       	ldi	r24, 0xB9	; 185
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     b76:	0e 94 10 08 	call	0x1020	; 0x1020 <get_unrollStatus>
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__divmodhi4>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	11 f4       	brne	.+4      	; 0xb8c <protocolCom+0x16e>
					oprollen();
     b88:	0e 94 7d 08 	call	0x10fa	; 0x10fa <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b8c:	c6 01       	movw	r24, r12
     b8e:	be 01       	movw	r22, r28
     b90:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     b94:	28 2f       	mov	r18, r24
     b96:	39 2f       	mov	r19, r25
     b98:	21 15       	cp	r18, r1
     b9a:	31 05       	cpc	r19, r1
     b9c:	b9 f4       	brne	.+46     	; 0xbcc <protocolCom+0x1ae>
				printf("202 Status: %i", get_unrollStatus());
     b9e:	0e 94 10 08 	call	0x1020	; 0x1020 <get_unrollStatus>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <protocolCom+0x186>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <protocolCom+0x188>
     ba6:	20 ee       	ldi	r18, 0xE0	; 224
     ba8:	31 e0       	ldi	r19, 0x01	; 1
     baa:	ad b7       	in	r26, 0x3d	; 61
     bac:	be b7       	in	r27, 0x3e	; 62
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	3c 93       	st	X, r19
     bb2:	2e 93       	st	-X, r18
     bb4:	11 97       	sbiw	r26, 0x01	; 1
     bb6:	14 96       	adiw	r26, 0x04	; 4
     bb8:	9c 93       	st	X, r25
     bba:	8e 93       	st	-X, r24
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	9e cf       	rjmp	.-196    	; 0xb08 <protocolCom+0xea>
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     bcc:	c4 01       	movw	r24, r8
     bce:	be 01       	movw	r22, r28
     bd0:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     bd4:	28 2f       	mov	r18, r24
     bd6:	39 2f       	mov	r19, r25
     bd8:	21 15       	cp	r18, r1
     bda:	31 05       	cpc	r19, r1
     bdc:	e1 f4       	brne	.+56     	; 0xc16 <protocolCom+0x1f8>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bde:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <protocolCom+0x1ca>
     be8:	00 d0       	rcall	.+0      	; 0xbea <protocolCom+0x1cc>
     bea:	00 d0       	rcall	.+0      	; 0xbec <protocolCom+0x1ce>
     bec:	28 ef       	ldi	r18, 0xF8	; 248
     bee:	31 e0       	ldi	r19, 0x01	; 1
     bf0:	ed b7       	in	r30, 0x3d	; 61
     bf2:	fe b7       	in	r31, 0x3e	; 62
     bf4:	32 83       	std	Z+2, r19	; 0x02
     bf6:	21 83       	std	Z+1, r18	; 0x01
     bf8:	83 83       	std	Z+3, r24	; 0x03
     bfa:	94 83       	std	Z+4, r25	; 0x04
     bfc:	a5 83       	std	Z+5, r26	; 0x05
     bfe:	b6 83       	std	Z+6, r27	; 0x06
     c00:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     c04:	8d b7       	in	r24, 0x3d	; 61
     c06:	9e b7       	in	r25, 0x3e	; 62
     c08:	06 96       	adiw	r24, 0x06	; 6
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	9e bf       	out	0x3e, r25	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	8d bf       	out	0x3d, r24	; 61
     c14:	79 cf       	rjmp	.-270    	; 0xb08 <protocolCom+0xea>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c16:	c3 01       	movw	r24, r6
     c18:	be 01       	movw	r22, r28
     c1a:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     c1e:	28 2f       	mov	r18, r24
     c20:	39 2f       	mov	r19, r25
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	49 f4       	brne	.+18     	; 0xc3a <protocolCom+0x21c>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c28:	8a e1       	ldi	r24, 0x1A	; 26
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     c30:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c34:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     c38:	67 cf       	rjmp	.-306    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c3a:	c2 01       	movw	r24, r4
     c3c:	be 01       	movw	r22, r28
     c3e:	4e e0       	ldi	r20, 0x0E	; 14
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     c46:	28 2f       	mov	r18, r24
     c48:	39 2f       	mov	r19, r25
     c4a:	21 15       	cp	r18, r1
     c4c:	31 05       	cpc	r19, r1
     c4e:	71 f4       	brne	.+28     	; 0xc6c <protocolCom+0x24e>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				
				if(sizeof in_buf> 18){
					printf("504 Ongeldige temperatuur");
     c50:	00 d0       	rcall	.+0      	; 0xc52 <protocolCom+0x234>
     c52:	8c e3       	ldi	r24, 0x3C	; 60
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	ad b7       	in	r26, 0x3d	; 61
     c58:	be b7       	in	r27, 0x3e	; 62
     c5a:	12 96       	adiw	r26, 0x02	; 2
     c5c:	9c 93       	st	X, r25
     c5e:	8e 93       	st	-X, r24
     c60:	11 97       	sbiw	r26, 0x01	; 1
     c62:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	4e cf       	rjmp	.-356    	; 0xb08 <protocolCom+0xea>
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c6c:	c1 01       	movw	r24, r2
     c6e:	be 01       	movw	r22, r28
     c70:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     c74:	28 2f       	mov	r18, r24
     c76:	39 2f       	mov	r19, r25
     c78:	21 15       	cp	r18, r1
     c7a:	31 05       	cpc	r19, r1
     c7c:	c1 f4       	brne	.+48     	; 0xcae <protocolCom+0x290>
				printf("202 LIGHT %i \n", getLight());
     c7e:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <protocolCom+0x266>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <protocolCom+0x268>
     c86:	ed b7       	in	r30, 0x3d	; 61
     c88:	fe b7       	in	r31, 0x3e	; 62
     c8a:	31 96       	adiw	r30, 0x01	; 1
     c8c:	20 e6       	ldi	r18, 0x60	; 96
     c8e:	32 e0       	ldi	r19, 0x02	; 2
     c90:	ad b7       	in	r26, 0x3d	; 61
     c92:	be b7       	in	r27, 0x3e	; 62
     c94:	12 96       	adiw	r26, 0x02	; 2
     c96:	3c 93       	st	X, r19
     c98:	2e 93       	st	-X, r18
     c9a:	11 97       	sbiw	r26, 0x01	; 1
     c9c:	82 83       	std	Z+2, r24	; 0x02
     c9e:	13 82       	std	Z+3, r1	; 0x03
     ca0:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	2d cf       	rjmp	.-422    	; 0xb08 <protocolCom+0xea>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     cae:	8f e6       	ldi	r24, 0x6F	; 111
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	be 01       	movw	r22, r28
     cb4:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     cb8:	28 2f       	mov	r18, r24
     cba:	39 2f       	mov	r19, r25
     cbc:	21 15       	cp	r18, r1
     cbe:	31 05       	cpc	r19, r1
     cc0:	49 f4       	brne	.+18     	; 0xcd4 <protocolCom+0x2b6>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     cc2:	8f e7       	ldi	r24, 0x7F	; 127
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     cca:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     cce:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     cd2:	1a cf       	rjmp	.-460    	; 0xb08 <protocolCom+0xea>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     cd4:	80 e9       	ldi	r24, 0x90	; 144
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	be 01       	movw	r22, r28
     cda:	4f e0       	ldi	r20, 0x0F	; 15
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     ce2:	28 2f       	mov	r18, r24
     ce4:	39 2f       	mov	r19, r25
     ce6:	21 15       	cp	r18, r1
     ce8:	31 05       	cpc	r19, r1
     cea:	61 f4       	brne	.+24     	; 0xd04 <protocolCom+0x2e6>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
     cec:	00 d0       	rcall	.+0      	; 0xcee <protocolCom+0x2d0>
     cee:	83 ea       	ldi	r24, 0xA3	; 163
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	ed b7       	in	r30, 0x3d	; 61
     cf4:	fe b7       	in	r31, 0x3e	; 62
     cf6:	92 83       	std	Z+2, r25	; 0x02
     cf8:	81 83       	std	Z+1, r24	; 0x01
     cfa:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	02 cf       	rjmp	.-508    	; 0xb08 <protocolCom+0xea>
				set_grensLicht(substring);
				ser_writeln(get_grensLight());
				}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     d04:	82 ec       	ldi	r24, 0xC2	; 194
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	be 01       	movw	r22, r28
     d0a:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     d0e:	28 2f       	mov	r18, r24
     d10:	39 2f       	mov	r19, r25
     d12:	21 15       	cp	r18, r1
     d14:	31 05       	cpc	r19, r1
     d16:	49 f4       	brne	.+18     	; 0xd2a <protocolCom+0x30c>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     d18:	81 ed       	ldi	r24, 0xD1	; 209
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     d20:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     d24:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     d28:	ef ce       	rjmp	.-546    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     d2a:	82 ee       	ldi	r24, 0xE2	; 226
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	be 01       	movw	r22, r28
     d30:	4f e0       	ldi	r20, 0x0F	; 15
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     d38:	28 2f       	mov	r18, r24
     d3a:	39 2f       	mov	r19, r25
     d3c:	21 15       	cp	r18, r1
     d3e:	31 05       	cpc	r19, r1
     d40:	71 f4       	brne	.+28     	; 0xd5e <protocolCom+0x340>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);
				
				if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
     d42:	00 d0       	rcall	.+0      	; 0xd44 <protocolCom+0x326>
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	ad b7       	in	r26, 0x3d	; 61
     d4a:	be b7       	in	r27, 0x3e	; 62
     d4c:	12 96       	adiw	r26, 0x02	; 2
     d4e:	9c 93       	st	X, r25
     d50:	8e 93       	st	-X, r24
     d52:	11 97       	sbiw	r26, 0x01	; 1
     d54:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	d5 ce       	rjmp	.-598    	; 0xb08 <protocolCom+0xea>
				set_substring();
				set_maxUnroll(substring);
				ser_writeln(get_maxUnroll());
				}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     d5e:	8f e0       	ldi	r24, 0x0F	; 15
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	be 01       	movw	r22, r28
     d64:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     d68:	28 2f       	mov	r18, r24
     d6a:	39 2f       	mov	r19, r25
     d6c:	21 15       	cp	r18, r1
     d6e:	31 05       	cpc	r19, r1
     d70:	49 f4       	brne	.+18     	; 0xd84 <protocolCom+0x366>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     d72:	8e e1       	ldi	r24, 0x1E	; 30
     d74:	93 e0       	ldi	r25, 0x03	; 3
     d76:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     d7a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     d7e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     d82:	c2 ce       	rjmp	.-636    	; 0xb08 <protocolCom+0xea>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     d84:	8f e2       	ldi	r24, 0x2F	; 47
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	be 01       	movw	r22, r28
     d8a:	4f e0       	ldi	r20, 0x0F	; 15
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     d92:	28 2f       	mov	r18, r24
     d94:	39 2f       	mov	r19, r25
     d96:	21 15       	cp	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	61 f4       	brne	.+24     	; 0xdb4 <protocolCom+0x396>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				
				if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <protocolCom+0x380>
     d9e:	81 e4       	ldi	r24, 0x41	; 65
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	ed b7       	in	r30, 0x3d	; 61
     da4:	fe b7       	in	r31, 0x3e	; 62
     da6:	92 83       	std	Z+2, r25	; 0x02
     da8:	81 83       	std	Z+1, r24	; 0x01
     daa:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	aa ce       	rjmp	.-684    	; 0xb08 <protocolCom+0xea>
				set_minUnroll(substring);
				ser_writeln(get_minUnroll());
				}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     db4:	8b e5       	ldi	r24, 0x5B	; 91
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	be 01       	movw	r22, r28
     dba:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     dbe:	28 2f       	mov	r18, r24
     dc0:	39 2f       	mov	r19, r25
     dc2:	21 15       	cp	r18, r1
     dc4:	31 05       	cpc	r19, r1
     dc6:	49 f4       	brne	.+18     	; 0xdda <protocolCom+0x3bc>
				ser_write("202 "),  ser_writeln(get_Naam());
     dc8:	84 e6       	ldi	r24, 0x64	; 100
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     dd0:	0e 94 83 02 	call	0x506	; 0x506 <get_Naam>
     dd4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     dd8:	97 ce       	rjmp	.-722    	; 0xb08 <protocolCom+0xea>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     dda:	89 e6       	ldi	r24, 0x69	; 105
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	be 01       	movw	r22, r28
     de0:	48 e0       	ldi	r20, 0x08	; 8
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     de8:	28 2f       	mov	r18, r24
     dea:	39 2f       	mov	r19, r25
     dec:	21 15       	cp	r18, r1
     dee:	31 05       	cpc	r19, r1
     df0:	69 f4       	brne	.+26     	; 0xe0c <protocolCom+0x3ee>
				if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{
				set_substring();
     df2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Naam(substring);
     df6:	80 91 f4 07 	lds	r24, 0x07F4
     dfa:	90 91 f5 07 	lds	r25, 0x07F5
     dfe:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_Naam>
				printf("200 OK \n");
     e02:	85 e7       	ldi	r24, 0x75	; 117
     e04:	93 e0       	ldi	r25, 0x03	; 3
     e06:	0e 94 27 11 	call	0x224e	; 0x224e <puts>
     e0a:	7e ce       	rjmp	.-772    	; 0xb08 <protocolCom+0xea>
				}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     e0c:	8d e7       	ldi	r24, 0x7D	; 125
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	be 01       	movw	r22, r28
     e12:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     e16:	28 2f       	mov	r18, r24
     e18:	39 2f       	mov	r19, r25
     e1a:	21 15       	cp	r18, r1
     e1c:	31 05       	cpc	r19, r1
     e1e:	49 f4       	brne	.+18     	; 0xe32 <protocolCom+0x414>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     e28:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_Locatie>
     e2c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     e30:	6b ce       	rjmp	.-810    	; 0xb08 <protocolCom+0xea>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     e32:	8a e8       	ldi	r24, 0x8A	; 138
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	be 01       	movw	r22, r28
     e38:	4c e0       	ldi	r20, 0x0C	; 12
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     e40:	28 2f       	mov	r18, r24
     e42:	39 2f       	mov	r19, r25
     e44:	21 15       	cp	r18, r1
     e46:	31 05       	cpc	r19, r1
     e48:	69 f4       	brne	.+26     	; 0xe64 <protocolCom+0x446>
				if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{
				set_substring();
     e4a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Locatie(substring);
     e4e:	80 91 f4 07 	lds	r24, 0x07F4
     e52:	90 91 f5 07 	lds	r25, 0x07F5
     e56:	0e 94 aa 02 	call	0x554	; 0x554 <set_Locatie>
				
				printf("200 OK \n");
     e5a:	85 e7       	ldi	r24, 0x75	; 117
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	0e 94 27 11 	call	0x224e	; 0x224e <puts>
     e62:	52 ce       	rjmp	.-860    	; 0xb08 <protocolCom+0xea>
				}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     e64:	8a e9       	ldi	r24, 0x9A	; 154
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	be 01       	movw	r22, r28
     e6a:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     e6e:	28 2f       	mov	r18, r24
     e70:	39 2f       	mov	r19, r25
     e72:	21 15       	cp	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	49 f4       	brne	.+18     	; 0xe8a <protocolCom+0x46c>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     e78:	86 ea       	ldi	r24, 0xA6	; 166
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
     e80:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
     e84:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     e88:	3f ce       	rjmp	.-898    	; 0xb08 <protocolCom+0xea>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     e8a:	83 eb       	ldi	r24, 0xB3	; 179
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	be 01       	movw	r22, r28
     e90:	4c e0       	ldi	r20, 0x0C	; 12
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	0e 94 cd 10 	call	0x219a	; 0x219a <strncmp>
     e98:	28 2f       	mov	r18, r24
     e9a:	39 2f       	mov	r19, r25
     e9c:	21 15       	cp	r18, r1
     e9e:	31 05       	cpc	r19, r1
     ea0:	71 f4       	brne	.+28     	; 0xebe <protocolCom+0x4a0>
					if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <protocolCom+0x486>
     ea4:	82 ec       	ldi	r24, 0xC2	; 194
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	ad b7       	in	r26, 0x3d	; 61
     eaa:	be b7       	in	r27, 0x3e	; 62
     eac:	12 96       	adiw	r26, 0x02	; 2
     eae:	9c 93       	st	X, r25
     eb0:	8e 93       	st	-X, r24
     eb2:	11 97       	sbiw	r26, 0x01	; 1
     eb4:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	25 ce       	rjmp	.-950    	; 0xb08 <protocolCom+0xea>
					printf("200 OK \n");
					}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     ebe:	86 ed       	ldi	r24, 0xD6	; 214
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	be 01       	movw	r22, r28
     ec4:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     ec8:	28 2f       	mov	r18, r24
     eca:	39 2f       	mov	r19, r25
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	89 f4       	brne	.+34     	; 0xef4 <protocolCom+0x4d6>
				if ((get_unrollStatus() % 2) == 1){
     ed2:	0e 94 10 08 	call	0x1020	; 0x1020 <get_unrollStatus>
     ed6:	62 e0       	ldi	r22, 0x02	; 2
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__divmodhi4>
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	11 f4       	brne	.+4      	; 0xee8 <protocolCom+0x4ca>
					uitrollen();					
     ee4:	0e 94 21 08 	call	0x1042	; 0x1042 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     ee8:	8b ed       	ldi	r24, 0xDB	; 219
     eea:	93 e0       	ldi	r25, 0x03	; 3
     eec:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
				abort();
     ef0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     ef4:	84 ee       	ldi	r24, 0xE4	; 228
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	be 01       	movw	r22, r28
     efa:	0e 94 c4 10 	call	0x2188	; 0x2188 <strcmp>
     efe:	28 2f       	mov	r18, r24
     f00:	39 2f       	mov	r19, r25
     f02:	21 15       	cp	r18, r1
     f04:	31 05       	cpc	r19, r1
     f06:	29 f4       	brne	.+10     	; 0xf12 <protocolCom+0x4f4>
				ser_writeln(
     f08:	89 ee       	ldi	r24, 0xE9	; 233
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     f10:	fb cd       	rjmp	.-1034   	; 0xb08 <protocolCom+0xea>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     f12:	8e e2       	ldi	r24, 0x2E	; 46
     f14:	96 e0       	ldi	r25, 0x06	; 6
     f16:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
     f1a:	f6 cd       	rjmp	.-1044   	; 0xb08 <protocolCom+0xea>

00000f1c <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     f1c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     f20:	83 e3       	ldi	r24, 0x33	; 51
     f22:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     f26:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     f2a:	88 e1       	ldi	r24, 0x18	; 24
     f2c:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     f30:	86 e0       	ldi	r24, 0x06	; 6
     f32:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     f36:	84 e7       	ldi	r24, 0x74	; 116
     f38:	96 e0       	ldi	r25, 0x06	; 6
     f3a:	90 93 1b 08 	sts	0x081B, r25
     f3e:	80 93 1a 08 	sts	0x081A, r24
}
     f42:	08 95       	ret

00000f44 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     f44:	e0 ec       	ldi	r30, 0xC0	; 192
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	90 81       	ld	r25, Z
     f4a:	95 ff       	sbrs	r25, 5
     f4c:	fd cf       	rjmp	.-6      	; 0xf48 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     f4e:	80 93 c6 00 	sts	0x00C6, r24
}
     f52:	08 95       	ret

00000f54 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     f54:	cf 93       	push	r28
     f56:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     f58:	8a 30       	cpi	r24, 0x0A	; 10
     f5a:	19 f4       	brne	.+6      	; 0xf62 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     f5c:	8d e0       	ldi	r24, 0x0D	; 13
     f5e:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>
	}
	ser_transmit(c);
     f62:	8c 2f       	mov	r24, r28
     f64:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>
}
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     f6c:	e0 ec       	ldi	r30, 0xC0	; 192
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 23       	and	r24, r24
     f74:	ec f7       	brge	.-6      	; 0xf70 <ser_receive+0x4>
	return UDR0;
     f76:	80 91 c6 00 	lds	r24, 0x00C6
}
     f7a:	08 95       	ret

00000f7c <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     f82:	88 81       	ld	r24, Y
     f84:	88 23       	and	r24, r24
     f86:	31 f0       	breq	.+12     	; 0xf94 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     f88:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     f8a:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     f8e:	89 91       	ld	r24, Y+
     f90:	88 23       	and	r24, r24
     f92:	d9 f7       	brne	.-10     	; 0xf8a <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     f9a:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
	ser_transmit('\r');
     f9e:	8d e0       	ldi	r24, 0x0D	; 13
     fa0:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>
	ser_transmit('\n');
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>
}
     faa:	08 95       	ret

00000fac <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     fac:	af 92       	push	r10
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	5c 01       	movw	r10, r24
     fc2:	d4 2f       	mov	r29, r20
	int i=0;
     fc4:	6c 01       	movw	r12, r24
     fc6:	ee 24       	eor	r14, r14
     fc8:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     fca:	8b 01       	movw	r16, r22
     fcc:	01 50       	subi	r16, 0x01	; 1
     fce:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     fd0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ser_receive>
     fd4:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     fd6:	dd 23       	and	r29, r29
     fd8:	11 f0       	breq	.+4      	; 0xfde <ser_readln+0x32>
     fda:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>
		if (c=='\r') {
     fde:	cd 30       	cpi	r28, 0x0D	; 13
     fe0:	31 f4       	brne	.+12     	; 0xfee <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     fe2:	dd 23       	and	r29, r29
     fe4:	71 f0       	breq	.+28     	; 0x1002 <ser_readln+0x56>
     fe6:	8a e0       	ldi	r24, 0x0A	; 10
     fe8:	0e 94 a2 07 	call	0xf44	; 0xf44 <ser_transmit>
     fec:	0a c0       	rjmp	.+20     	; 0x1002 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     fee:	e0 16       	cp	r14, r16
     ff0:	f1 06       	cpc	r15, r17
     ff2:	74 f7       	brge	.-36     	; 0xfd0 <ser_readln+0x24>
			buf[i++]=c;
     ff4:	f6 01       	movw	r30, r12
     ff6:	c1 93       	st	Z+, r28
     ff8:	6f 01       	movw	r12, r30
     ffa:	08 94       	sec
     ffc:	e1 1c       	adc	r14, r1
     ffe:	f1 1c       	adc	r15, r1
    1000:	e7 cf       	rjmp	.-50     	; 0xfd0 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    1002:	ea 0c       	add	r14, r10
    1004:	fb 1c       	adc	r15, r11
    1006:	f7 01       	movw	r30, r14
    1008:	10 82       	st	Z, r1
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	08 95       	ret

00001020 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    1020:	80 91 fa 06 	lds	r24, 0x06FA
    1024:	90 91 fb 06 	lds	r25, 0x06FB
    1028:	08 95       	ret

0000102a <init_scherm_ports>:


void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    102a:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    102c:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    102e:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    1030:	e9 e6       	ldi	r30, 0x69	; 105
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    103e:	2d 9a       	sbi	0x05, 5	; 5
}
    1040:	08 95       	ret

00001042 <uitrollen>:

void uitrollen(){
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
	IN = (IN + 1);
    104a:	80 91 fa 06 	lds	r24, 0x06FA
    104e:	90 91 fb 06 	lds	r25, 0x06FB
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	90 93 fb 06 	sts	0x06FB, r25
    1058:	80 93 fa 06 	sts	0x06FA, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    105c:	82 e8       	ldi	r24, 0x82	; 130
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    1064:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    1066:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1068:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <strtod>
    1074:	6b 01       	movw	r12, r22
    1076:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    107a:	2c 9a       	sbi	0x05, 4	; 5
    107c:	8f e3       	ldi	r24, 0x3F	; 63
    107e:	9d e0       	ldi	r25, 0x0D	; 13
    1080:	a3 e0       	ldi	r26, 0x03	; 3
    1082:	81 50       	subi	r24, 0x01	; 1
    1084:	90 40       	sbci	r25, 0x00	; 0
    1086:	a0 40       	sbci	r26, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <uitrollen+0x40>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <uitrollen+0x4a>
    108c:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    108e:	2c 98       	cbi	0x05, 4	; 5
    1090:	8f e3       	ldi	r24, 0x3F	; 63
    1092:	9d e0       	ldi	r25, 0x0D	; 13
    1094:	a3 e0       	ldi	r26, 0x03	; 3
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	90 40       	sbci	r25, 0x00	; 0
    109a:	a0 40       	sbci	r26, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <uitrollen+0x54>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <uitrollen+0x5e>
    10a0:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    10a2:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    10a6:	a7 01       	movw	r20, r14
    10a8:	96 01       	movw	r18, r12
    10aa:	0e 94 40 09 	call	0x1280	; 0x1280 <__cmpsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	24 f3       	brlt	.-56     	; 0x107a <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    10b2:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <uitrollen+0x7a>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <uitrollen+0x7c>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <uitrollen+0x7e>
    10c0:	28 e8       	ldi	r18, 0x88	; 136
    10c2:	36 e0       	ldi	r19, 0x06	; 6
    10c4:	ed b7       	in	r30, 0x3d	; 61
    10c6:	fe b7       	in	r31, 0x3e	; 62
    10c8:	32 83       	std	Z+2, r19	; 0x02
    10ca:	21 83       	std	Z+1, r18	; 0x01
    10cc:	83 83       	std	Z+3, r24	; 0x03
    10ce:	94 83       	std	Z+4, r25	; 0x04
    10d0:	a5 83       	std	Z+5, r26	; 0x05
    10d2:	b6 83       	std	Z+6, r27	; 0x06
    10d4:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    10d8:	8d b7       	in	r24, 0x3d	; 61
    10da:	9e b7       	in	r25, 0x3e	; 62
    10dc:	06 96       	adiw	r24, 0x06	; 6
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	9e bf       	out	0x3e, r25	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	8d bf       	out	0x3d, r24	; 61
    10e8:	8c ea       	ldi	r24, 0xAC	; 172
    10ea:	96 e0       	ldi	r25, 0x06	; 6
    10ec:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
}
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <oprollen>:
	
	


void oprollen(){
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
	IN = (IN + 1);
    1102:	80 91 fa 06 	lds	r24, 0x06FA
    1106:	90 91 fb 06 	lds	r25, 0x06FB
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	90 93 fb 06 	sts	0x06FB, r25
    1110:	80 93 fa 06 	sts	0x06FA, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    1114:	8a ec       	ldi	r24, 0xCA	; 202
    1116:	96 e0       	ldi	r25, 0x06	; 6
    1118:	0e 94 be 07 	call	0xf7c	; 0xf7c <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    111c:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    111e:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1120:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <strtod>
    112c:	6b 01       	movw	r12, r22
    112e:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    1130:	14 c0       	rjmp	.+40     	; 0x115a <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1132:	2c 9a       	sbi	0x05, 4	; 5
    1134:	8f e3       	ldi	r24, 0x3F	; 63
    1136:	9d e0       	ldi	r25, 0x0D	; 13
    1138:	a3 e0       	ldi	r26, 0x03	; 3
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	90 40       	sbci	r25, 0x00	; 0
    113e:	a0 40       	sbci	r26, 0x00	; 0
    1140:	e1 f7       	brne	.-8      	; 0x113a <oprollen+0x40>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <oprollen+0x4a>
    1144:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1146:	2c 98       	cbi	0x05, 4	; 5
    1148:	8f e3       	ldi	r24, 0x3F	; 63
    114a:	9d e0       	ldi	r25, 0x0D	; 13
    114c:	a3 e0       	ldi	r26, 0x03	; 3
    114e:	81 50       	subi	r24, 0x01	; 1
    1150:	90 40       	sbci	r25, 0x00	; 0
    1152:	a0 40       	sbci	r26, 0x00	; 0
    1154:	e1 f7       	brne	.-8      	; 0x114e <oprollen+0x54>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <oprollen+0x5e>
    1158:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    115a:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    115e:	a7 01       	movw	r20, r14
    1160:	96 01       	movw	r18, r12
    1162:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	24 f3       	brlt	.-56     	; 0x1132 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    116a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    116e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	00 d0       	rcall	.+0      	; 0x1178 <oprollen+0x7e>
    1178:	00 d0       	rcall	.+0      	; 0x117a <oprollen+0x80>
    117a:	00 d0       	rcall	.+0      	; 0x117c <oprollen+0x82>
    117c:	28 e8       	ldi	r18, 0x88	; 136
    117e:	36 e0       	ldi	r19, 0x06	; 6
    1180:	ed b7       	in	r30, 0x3d	; 61
    1182:	fe b7       	in	r31, 0x3e	; 62
    1184:	32 83       	std	Z+2, r19	; 0x02
    1186:	21 83       	std	Z+1, r18	; 0x01
    1188:	83 83       	std	Z+3, r24	; 0x03
    118a:	94 83       	std	Z+4, r25	; 0x04
    118c:	a5 83       	std	Z+5, r26	; 0x05
    118e:	b6 83       	std	Z+6, r27	; 0x06
    1190:	0e 94 12 11 	call	0x2224	; 0x2224 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    1194:	8d b7       	in	r24, 0x3d	; 61
    1196:	9e b7       	in	r25, 0x3e	; 62
    1198:	06 96       	adiw	r24, 0x06	; 6
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	9e bf       	out	0x3e, r25	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	8d bf       	out	0x3d, r24	; 61
    11a4:	8f ec       	ldi	r24, 0xCF	; 207
    11a6:	96 e0       	ldi	r25, 0x06	; 6
    11a8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <ser_writeln>
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	08 95       	ret

000011b6 <__subsf3>:
    11b6:	50 58       	subi	r21, 0x80	; 128

000011b8 <__addsf3>:
    11b8:	bb 27       	eor	r27, r27
    11ba:	aa 27       	eor	r26, r26
    11bc:	0e d0       	rcall	.+28     	; 0x11da <__addsf3x>
    11be:	dc c0       	rjmp	.+440    	; 0x1378 <__fp_round>
    11c0:	cd d0       	rcall	.+410    	; 0x135c <__fp_pscA>
    11c2:	30 f0       	brcs	.+12     	; 0x11d0 <__addsf3+0x18>
    11c4:	d2 d0       	rcall	.+420    	; 0x136a <__fp_pscB>
    11c6:	20 f0       	brcs	.+8      	; 0x11d0 <__addsf3+0x18>
    11c8:	31 f4       	brne	.+12     	; 0x11d6 <__addsf3+0x1e>
    11ca:	9f 3f       	cpi	r25, 0xFF	; 255
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <__addsf3+0x1a>
    11ce:	1e f4       	brtc	.+6      	; 0x11d6 <__addsf3+0x1e>
    11d0:	c2 c0       	rjmp	.+388    	; 0x1356 <__fp_nan>
    11d2:	0e f4       	brtc	.+2      	; 0x11d6 <__addsf3+0x1e>
    11d4:	e0 95       	com	r30
    11d6:	e7 fb       	bst	r30, 7
    11d8:	b8 c0       	rjmp	.+368    	; 0x134a <__fp_inf>

000011da <__addsf3x>:
    11da:	e9 2f       	mov	r30, r25
    11dc:	de d0       	rcall	.+444    	; 0x139a <__fp_split3>
    11de:	80 f3       	brcs	.-32     	; 0x11c0 <__addsf3+0x8>
    11e0:	ba 17       	cp	r27, r26
    11e2:	62 07       	cpc	r22, r18
    11e4:	73 07       	cpc	r23, r19
    11e6:	84 07       	cpc	r24, r20
    11e8:	95 07       	cpc	r25, r21
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <__addsf3x+0x18>
    11ec:	71 f4       	brne	.+28     	; 0x120a <__addsf3x+0x30>
    11ee:	9e f5       	brtc	.+102    	; 0x1256 <__addsf3x+0x7c>
    11f0:	f6 c0       	rjmp	.+492    	; 0x13de <__fp_zero>
    11f2:	0e f4       	brtc	.+2      	; 0x11f6 <__addsf3x+0x1c>
    11f4:	e0 95       	com	r30
    11f6:	0b 2e       	mov	r0, r27
    11f8:	ba 2f       	mov	r27, r26
    11fa:	a0 2d       	mov	r26, r0
    11fc:	0b 01       	movw	r0, r22
    11fe:	b9 01       	movw	r22, r18
    1200:	90 01       	movw	r18, r0
    1202:	0c 01       	movw	r0, r24
    1204:	ca 01       	movw	r24, r20
    1206:	a0 01       	movw	r20, r0
    1208:	11 24       	eor	r1, r1
    120a:	ff 27       	eor	r31, r31
    120c:	59 1b       	sub	r21, r25
    120e:	99 f0       	breq	.+38     	; 0x1236 <__addsf3x+0x5c>
    1210:	59 3f       	cpi	r21, 0xF9	; 249
    1212:	50 f4       	brcc	.+20     	; 0x1228 <__addsf3x+0x4e>
    1214:	50 3e       	cpi	r21, 0xE0	; 224
    1216:	68 f1       	brcs	.+90     	; 0x1272 <__addsf3x+0x98>
    1218:	1a 16       	cp	r1, r26
    121a:	f0 40       	sbci	r31, 0x00	; 0
    121c:	a2 2f       	mov	r26, r18
    121e:	23 2f       	mov	r18, r19
    1220:	34 2f       	mov	r19, r20
    1222:	44 27       	eor	r20, r20
    1224:	58 5f       	subi	r21, 0xF8	; 248
    1226:	f3 cf       	rjmp	.-26     	; 0x120e <__addsf3x+0x34>
    1228:	46 95       	lsr	r20
    122a:	37 95       	ror	r19
    122c:	27 95       	ror	r18
    122e:	a7 95       	ror	r26
    1230:	f0 40       	sbci	r31, 0x00	; 0
    1232:	53 95       	inc	r21
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__addsf3x+0x4e>
    1236:	7e f4       	brtc	.+30     	; 0x1256 <__addsf3x+0x7c>
    1238:	1f 16       	cp	r1, r31
    123a:	ba 0b       	sbc	r27, r26
    123c:	62 0b       	sbc	r22, r18
    123e:	73 0b       	sbc	r23, r19
    1240:	84 0b       	sbc	r24, r20
    1242:	ba f0       	brmi	.+46     	; 0x1272 <__addsf3x+0x98>
    1244:	91 50       	subi	r25, 0x01	; 1
    1246:	a1 f0       	breq	.+40     	; 0x1270 <__addsf3x+0x96>
    1248:	ff 0f       	add	r31, r31
    124a:	bb 1f       	adc	r27, r27
    124c:	66 1f       	adc	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	c2 f7       	brpl	.-16     	; 0x1244 <__addsf3x+0x6a>
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <__addsf3x+0x98>
    1256:	ba 0f       	add	r27, r26
    1258:	62 1f       	adc	r22, r18
    125a:	73 1f       	adc	r23, r19
    125c:	84 1f       	adc	r24, r20
    125e:	48 f4       	brcc	.+18     	; 0x1272 <__addsf3x+0x98>
    1260:	87 95       	ror	r24
    1262:	77 95       	ror	r23
    1264:	67 95       	ror	r22
    1266:	b7 95       	ror	r27
    1268:	f7 95       	ror	r31
    126a:	9e 3f       	cpi	r25, 0xFE	; 254
    126c:	08 f0       	brcs	.+2      	; 0x1270 <__addsf3x+0x96>
    126e:	b3 cf       	rjmp	.-154    	; 0x11d6 <__addsf3+0x1e>
    1270:	93 95       	inc	r25
    1272:	88 0f       	add	r24, r24
    1274:	08 f0       	brcs	.+2      	; 0x1278 <__addsf3x+0x9e>
    1276:	99 27       	eor	r25, r25
    1278:	ee 0f       	add	r30, r30
    127a:	97 95       	ror	r25
    127c:	87 95       	ror	r24
    127e:	08 95       	ret

00001280 <__cmpsf2>:
    1280:	40 d0       	rcall	.+128    	; 0x1302 <__fp_cmp>
    1282:	08 f4       	brcc	.+2      	; 0x1286 <__cmpsf2+0x6>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	08 95       	ret

00001288 <__floatunsisf>:
    1288:	e8 94       	clt
    128a:	09 c0       	rjmp	.+18     	; 0x129e <__floatsisf+0x12>

0000128c <__floatsisf>:
    128c:	97 fb       	bst	r25, 7
    128e:	3e f4       	brtc	.+14     	; 0x129e <__floatsisf+0x12>
    1290:	90 95       	com	r25
    1292:	80 95       	com	r24
    1294:	70 95       	com	r23
    1296:	61 95       	neg	r22
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	8f 4f       	sbci	r24, 0xFF	; 255
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	99 23       	and	r25, r25
    12a0:	a9 f0       	breq	.+42     	; 0x12cc <__floatsisf+0x40>
    12a2:	f9 2f       	mov	r31, r25
    12a4:	96 e9       	ldi	r25, 0x96	; 150
    12a6:	bb 27       	eor	r27, r27
    12a8:	93 95       	inc	r25
    12aa:	f6 95       	lsr	r31
    12ac:	87 95       	ror	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b7 95       	ror	r27
    12b4:	f1 11       	cpse	r31, r1
    12b6:	f8 cf       	rjmp	.-16     	; 0x12a8 <__floatsisf+0x1c>
    12b8:	fa f4       	brpl	.+62     	; 0x12f8 <__floatsisf+0x6c>
    12ba:	bb 0f       	add	r27, r27
    12bc:	11 f4       	brne	.+4      	; 0x12c2 <__floatsisf+0x36>
    12be:	60 ff       	sbrs	r22, 0
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <__floatsisf+0x6c>
    12c2:	6f 5f       	subi	r22, 0xFF	; 255
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	16 c0       	rjmp	.+44     	; 0x12f8 <__floatsisf+0x6c>
    12cc:	88 23       	and	r24, r24
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <__floatsisf+0x48>
    12d0:	96 e9       	ldi	r25, 0x96	; 150
    12d2:	11 c0       	rjmp	.+34     	; 0x12f6 <__floatsisf+0x6a>
    12d4:	77 23       	and	r23, r23
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <__floatsisf+0x54>
    12d8:	9e e8       	ldi	r25, 0x8E	; 142
    12da:	87 2f       	mov	r24, r23
    12dc:	76 2f       	mov	r23, r22
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <__floatsisf+0x5e>
    12e0:	66 23       	and	r22, r22
    12e2:	71 f0       	breq	.+28     	; 0x1300 <__floatsisf+0x74>
    12e4:	96 e8       	ldi	r25, 0x86	; 134
    12e6:	86 2f       	mov	r24, r22
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	2a f0       	brmi	.+10     	; 0x12f8 <__floatsisf+0x6c>
    12ee:	9a 95       	dec	r25
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	da f7       	brpl	.-10     	; 0x12ee <__floatsisf+0x62>
    12f8:	88 0f       	add	r24, r24
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <__fp_cmp>:
    1302:	99 0f       	add	r25, r25
    1304:	00 08       	sbc	r0, r0
    1306:	55 0f       	add	r21, r21
    1308:	aa 0b       	sbc	r26, r26
    130a:	e0 e8       	ldi	r30, 0x80	; 128
    130c:	fe ef       	ldi	r31, 0xFE	; 254
    130e:	16 16       	cp	r1, r22
    1310:	17 06       	cpc	r1, r23
    1312:	e8 07       	cpc	r30, r24
    1314:	f9 07       	cpc	r31, r25
    1316:	c0 f0       	brcs	.+48     	; 0x1348 <__fp_cmp+0x46>
    1318:	12 16       	cp	r1, r18
    131a:	13 06       	cpc	r1, r19
    131c:	e4 07       	cpc	r30, r20
    131e:	f5 07       	cpc	r31, r21
    1320:	98 f0       	brcs	.+38     	; 0x1348 <__fp_cmp+0x46>
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	95 0b       	sbc	r25, r21
    132a:	39 f4       	brne	.+14     	; 0x133a <__fp_cmp+0x38>
    132c:	0a 26       	eor	r0, r26
    132e:	61 f0       	breq	.+24     	; 0x1348 <__fp_cmp+0x46>
    1330:	23 2b       	or	r18, r19
    1332:	24 2b       	or	r18, r20
    1334:	25 2b       	or	r18, r21
    1336:	21 f4       	brne	.+8      	; 0x1340 <__fp_cmp+0x3e>
    1338:	08 95       	ret
    133a:	0a 26       	eor	r0, r26
    133c:	09 f4       	brne	.+2      	; 0x1340 <__fp_cmp+0x3e>
    133e:	a1 40       	sbci	r26, 0x01	; 1
    1340:	a6 95       	lsr	r26
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	81 1d       	adc	r24, r1
    1346:	81 1d       	adc	r24, r1
    1348:	08 95       	ret

0000134a <__fp_inf>:
    134a:	97 f9       	bld	r25, 7
    134c:	9f 67       	ori	r25, 0x7F	; 127
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	08 95       	ret

00001356 <__fp_nan>:
    1356:	9f ef       	ldi	r25, 0xFF	; 255
    1358:	80 ec       	ldi	r24, 0xC0	; 192
    135a:	08 95       	ret

0000135c <__fp_pscA>:
    135c:	00 24       	eor	r0, r0
    135e:	0a 94       	dec	r0
    1360:	16 16       	cp	r1, r22
    1362:	17 06       	cpc	r1, r23
    1364:	18 06       	cpc	r1, r24
    1366:	09 06       	cpc	r0, r25
    1368:	08 95       	ret

0000136a <__fp_pscB>:
    136a:	00 24       	eor	r0, r0
    136c:	0a 94       	dec	r0
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	14 06       	cpc	r1, r20
    1374:	05 06       	cpc	r0, r21
    1376:	08 95       	ret

00001378 <__fp_round>:
    1378:	09 2e       	mov	r0, r25
    137a:	03 94       	inc	r0
    137c:	00 0c       	add	r0, r0
    137e:	11 f4       	brne	.+4      	; 0x1384 <__fp_round+0xc>
    1380:	88 23       	and	r24, r24
    1382:	52 f0       	brmi	.+20     	; 0x1398 <__fp_round+0x20>
    1384:	bb 0f       	add	r27, r27
    1386:	40 f4       	brcc	.+16     	; 0x1398 <__fp_round+0x20>
    1388:	bf 2b       	or	r27, r31
    138a:	11 f4       	brne	.+4      	; 0x1390 <__fp_round+0x18>
    138c:	60 ff       	sbrs	r22, 0
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <__fp_round+0x20>
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	08 95       	ret

0000139a <__fp_split3>:
    139a:	57 fd       	sbrc	r21, 7
    139c:	90 58       	subi	r25, 0x80	; 128
    139e:	44 0f       	add	r20, r20
    13a0:	55 1f       	adc	r21, r21
    13a2:	59 f0       	breq	.+22     	; 0x13ba <__fp_splitA+0x10>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <__fp_splitA+0x1a>
    13a8:	47 95       	ror	r20

000013aa <__fp_splitA>:
    13aa:	88 0f       	add	r24, r24
    13ac:	97 fb       	bst	r25, 7
    13ae:	99 1f       	adc	r25, r25
    13b0:	61 f0       	breq	.+24     	; 0x13ca <__fp_splitA+0x20>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <__fp_splitA+0x2a>
    13b6:	87 95       	ror	r24
    13b8:	08 95       	ret
    13ba:	12 16       	cp	r1, r18
    13bc:	13 06       	cpc	r1, r19
    13be:	14 06       	cpc	r1, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	f2 cf       	rjmp	.-28     	; 0x13a8 <__fp_split3+0xe>
    13c4:	46 95       	lsr	r20
    13c6:	f1 df       	rcall	.-30     	; 0x13aa <__fp_splitA>
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <__fp_splitA+0x30>
    13ca:	16 16       	cp	r1, r22
    13cc:	17 06       	cpc	r1, r23
    13ce:	18 06       	cpc	r1, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	f1 cf       	rjmp	.-30     	; 0x13b6 <__fp_splitA+0xc>
    13d4:	86 95       	lsr	r24
    13d6:	71 05       	cpc	r23, r1
    13d8:	61 05       	cpc	r22, r1
    13da:	08 94       	sec
    13dc:	08 95       	ret

000013de <__fp_zero>:
    13de:	e8 94       	clt

000013e0 <__fp_szero>:
    13e0:	bb 27       	eor	r27, r27
    13e2:	66 27       	eor	r22, r22
    13e4:	77 27       	eor	r23, r23
    13e6:	cb 01       	movw	r24, r22
    13e8:	97 f9       	bld	r25, 7
    13ea:	08 95       	ret

000013ec <__gesf2>:
    13ec:	8a df       	rcall	.-236    	; 0x1302 <__fp_cmp>
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <__gesf2+0x6>
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	08 95       	ret

000013f4 <__mulsf3>:
    13f4:	0b d0       	rcall	.+22     	; 0x140c <__mulsf3x>
    13f6:	c0 cf       	rjmp	.-128    	; 0x1378 <__fp_round>
    13f8:	b1 df       	rcall	.-158    	; 0x135c <__fp_pscA>
    13fa:	28 f0       	brcs	.+10     	; 0x1406 <__mulsf3+0x12>
    13fc:	b6 df       	rcall	.-148    	; 0x136a <__fp_pscB>
    13fe:	18 f0       	brcs	.+6      	; 0x1406 <__mulsf3+0x12>
    1400:	95 23       	and	r25, r21
    1402:	09 f0       	breq	.+2      	; 0x1406 <__mulsf3+0x12>
    1404:	a2 cf       	rjmp	.-188    	; 0x134a <__fp_inf>
    1406:	a7 cf       	rjmp	.-178    	; 0x1356 <__fp_nan>
    1408:	11 24       	eor	r1, r1
    140a:	ea cf       	rjmp	.-44     	; 0x13e0 <__fp_szero>

0000140c <__mulsf3x>:
    140c:	c6 df       	rcall	.-116    	; 0x139a <__fp_split3>
    140e:	a0 f3       	brcs	.-24     	; 0x13f8 <__mulsf3+0x4>

00001410 <__mulsf3_pse>:
    1410:	95 9f       	mul	r25, r21
    1412:	d1 f3       	breq	.-12     	; 0x1408 <__mulsf3+0x14>
    1414:	95 0f       	add	r25, r21
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	55 1f       	adc	r21, r21
    141a:	62 9f       	mul	r22, r18
    141c:	f0 01       	movw	r30, r0
    141e:	72 9f       	mul	r23, r18
    1420:	bb 27       	eor	r27, r27
    1422:	f0 0d       	add	r31, r0
    1424:	b1 1d       	adc	r27, r1
    1426:	63 9f       	mul	r22, r19
    1428:	aa 27       	eor	r26, r26
    142a:	f0 0d       	add	r31, r0
    142c:	b1 1d       	adc	r27, r1
    142e:	aa 1f       	adc	r26, r26
    1430:	64 9f       	mul	r22, r20
    1432:	66 27       	eor	r22, r22
    1434:	b0 0d       	add	r27, r0
    1436:	a1 1d       	adc	r26, r1
    1438:	66 1f       	adc	r22, r22
    143a:	82 9f       	mul	r24, r18
    143c:	22 27       	eor	r18, r18
    143e:	b0 0d       	add	r27, r0
    1440:	a1 1d       	adc	r26, r1
    1442:	62 1f       	adc	r22, r18
    1444:	73 9f       	mul	r23, r19
    1446:	b0 0d       	add	r27, r0
    1448:	a1 1d       	adc	r26, r1
    144a:	62 1f       	adc	r22, r18
    144c:	83 9f       	mul	r24, r19
    144e:	a0 0d       	add	r26, r0
    1450:	61 1d       	adc	r22, r1
    1452:	22 1f       	adc	r18, r18
    1454:	74 9f       	mul	r23, r20
    1456:	33 27       	eor	r19, r19
    1458:	a0 0d       	add	r26, r0
    145a:	61 1d       	adc	r22, r1
    145c:	23 1f       	adc	r18, r19
    145e:	84 9f       	mul	r24, r20
    1460:	60 0d       	add	r22, r0
    1462:	21 1d       	adc	r18, r1
    1464:	82 2f       	mov	r24, r18
    1466:	76 2f       	mov	r23, r22
    1468:	6a 2f       	mov	r22, r26
    146a:	11 24       	eor	r1, r1
    146c:	9f 57       	subi	r25, 0x7F	; 127
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	8a f0       	brmi	.+34     	; 0x1494 <__mulsf3_pse+0x84>
    1472:	e1 f0       	breq	.+56     	; 0x14ac <__mulsf3_pse+0x9c>
    1474:	88 23       	and	r24, r24
    1476:	4a f0       	brmi	.+18     	; 0x148a <__mulsf3_pse+0x7a>
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	bb 1f       	adc	r27, r27
    147e:	66 1f       	adc	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	91 50       	subi	r25, 0x01	; 1
    1486:	50 40       	sbci	r21, 0x00	; 0
    1488:	a9 f7       	brne	.-22     	; 0x1474 <__mulsf3_pse+0x64>
    148a:	9e 3f       	cpi	r25, 0xFE	; 254
    148c:	51 05       	cpc	r21, r1
    148e:	70 f0       	brcs	.+28     	; 0x14ac <__mulsf3_pse+0x9c>
    1490:	5c cf       	rjmp	.-328    	; 0x134a <__fp_inf>
    1492:	a6 cf       	rjmp	.-180    	; 0x13e0 <__fp_szero>
    1494:	5f 3f       	cpi	r21, 0xFF	; 255
    1496:	ec f3       	brlt	.-6      	; 0x1492 <__mulsf3_pse+0x82>
    1498:	98 3e       	cpi	r25, 0xE8	; 232
    149a:	dc f3       	brlt	.-10     	; 0x1492 <__mulsf3_pse+0x82>
    149c:	86 95       	lsr	r24
    149e:	77 95       	ror	r23
    14a0:	67 95       	ror	r22
    14a2:	b7 95       	ror	r27
    14a4:	f7 95       	ror	r31
    14a6:	e7 95       	ror	r30
    14a8:	9f 5f       	subi	r25, 0xFF	; 255
    14aa:	c1 f7       	brne	.-16     	; 0x149c <__mulsf3_pse+0x8c>
    14ac:	fe 2b       	or	r31, r30
    14ae:	88 0f       	add	r24, r24
    14b0:	91 1d       	adc	r25, r1
    14b2:	96 95       	lsr	r25
    14b4:	87 95       	ror	r24
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret

000014ba <vfprintf>:
    14ba:	a5 e1       	ldi	r26, 0x15	; 21
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e3 e6       	ldi	r30, 0x63	; 99
    14c0:	fa e0       	ldi	r31, 0x0A	; 10
    14c2:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__prologue_saves__>
    14c6:	4c 01       	movw	r8, r24
    14c8:	7f 87       	std	Y+15, r23	; 0x0f
    14ca:	6e 87       	std	Y+14, r22	; 0x0e
    14cc:	fc 01       	movw	r30, r24
    14ce:	17 82       	std	Z+7, r1	; 0x07
    14d0:	16 82       	std	Z+6, r1	; 0x06
    14d2:	83 81       	ldd	r24, Z+3	; 0x03
    14d4:	81 fd       	sbrc	r24, 1
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <vfprintf+0x26>
    14d8:	76 c3       	rjmp	.+1772   	; 0x1bc6 <vfprintf+0x70c>
    14da:	4c 85       	ldd	r20, Y+12	; 0x0c
    14dc:	5d 85       	ldd	r21, Y+13	; 0x0d
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <vfprintf+0x2e>
    14e0:	1e 01       	movw	r2, r28
    14e2:	08 94       	sec
    14e4:	21 1c       	adc	r2, r1
    14e6:	31 1c       	adc	r3, r1
    14e8:	f4 01       	movw	r30, r8
    14ea:	93 81       	ldd	r25, Z+3	; 0x03
    14ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    14ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	ff 87       	std	Y+15, r31	; 0x0f
    14fa:	ee 87       	std	Y+14, r30	; 0x0e
    14fc:	88 23       	and	r24, r24
    14fe:	09 f4       	brne	.+2      	; 0x1502 <vfprintf+0x48>
    1500:	5e c3       	rjmp	.+1724   	; 0x1bbe <vfprintf+0x704>
    1502:	85 32       	cpi	r24, 0x25	; 37
    1504:	41 f4       	brne	.+16     	; 0x1516 <vfprintf+0x5c>
    1506:	93 fd       	sbrc	r25, 3
    1508:	85 91       	lpm	r24, Z+
    150a:	93 ff       	sbrs	r25, 3
    150c:	81 91       	ld	r24, Z+
    150e:	ff 87       	std	Y+15, r31	; 0x0f
    1510:	ee 87       	std	Y+14, r30	; 0x0e
    1512:	85 32       	cpi	r24, 0x25	; 37
    1514:	59 f4       	brne	.+22     	; 0x152c <vfprintf+0x72>
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	b4 01       	movw	r22, r8
    151a:	4c 8b       	std	Y+20, r20	; 0x14
    151c:	5d 8b       	std	Y+21, r21	; 0x15
    151e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1522:	4c 89       	ldd	r20, Y+20	; 0x14
    1524:	5d 89       	ldd	r21, Y+21	; 0x15
    1526:	5d 87       	std	Y+13, r21	; 0x0d
    1528:	4c 87       	std	Y+12, r20	; 0x0c
    152a:	d7 cf       	rjmp	.-82     	; 0x14da <vfprintf+0x20>
    152c:	ff 24       	eor	r15, r15
    152e:	dd 24       	eor	r13, r13
    1530:	10 e0       	ldi	r17, 0x00	; 0
    1532:	10 32       	cpi	r17, 0x20	; 32
    1534:	b0 f4       	brcc	.+44     	; 0x1562 <vfprintf+0xa8>
    1536:	8b 32       	cpi	r24, 0x2B	; 43
    1538:	69 f0       	breq	.+26     	; 0x1554 <vfprintf+0x9a>
    153a:	8c 32       	cpi	r24, 0x2C	; 44
    153c:	28 f4       	brcc	.+10     	; 0x1548 <vfprintf+0x8e>
    153e:	80 32       	cpi	r24, 0x20	; 32
    1540:	51 f0       	breq	.+20     	; 0x1556 <vfprintf+0x9c>
    1542:	83 32       	cpi	r24, 0x23	; 35
    1544:	71 f4       	brne	.+28     	; 0x1562 <vfprintf+0xa8>
    1546:	0b c0       	rjmp	.+22     	; 0x155e <vfprintf+0xa4>
    1548:	8d 32       	cpi	r24, 0x2D	; 45
    154a:	39 f0       	breq	.+14     	; 0x155a <vfprintf+0xa0>
    154c:	80 33       	cpi	r24, 0x30	; 48
    154e:	49 f4       	brne	.+18     	; 0x1562 <vfprintf+0xa8>
    1550:	11 60       	ori	r17, 0x01	; 1
    1552:	2c c0       	rjmp	.+88     	; 0x15ac <vfprintf+0xf2>
    1554:	12 60       	ori	r17, 0x02	; 2
    1556:	14 60       	ori	r17, 0x04	; 4
    1558:	29 c0       	rjmp	.+82     	; 0x15ac <vfprintf+0xf2>
    155a:	18 60       	ori	r17, 0x08	; 8
    155c:	27 c0       	rjmp	.+78     	; 0x15ac <vfprintf+0xf2>
    155e:	10 61       	ori	r17, 0x10	; 16
    1560:	25 c0       	rjmp	.+74     	; 0x15ac <vfprintf+0xf2>
    1562:	17 fd       	sbrc	r17, 7
    1564:	2e c0       	rjmp	.+92     	; 0x15c2 <vfprintf+0x108>
    1566:	28 2f       	mov	r18, r24
    1568:	20 53       	subi	r18, 0x30	; 48
    156a:	2a 30       	cpi	r18, 0x0A	; 10
    156c:	98 f4       	brcc	.+38     	; 0x1594 <vfprintf+0xda>
    156e:	16 ff       	sbrs	r17, 6
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <vfprintf+0xc8>
    1572:	8f 2d       	mov	r24, r15
    1574:	88 0f       	add	r24, r24
    1576:	f8 2e       	mov	r15, r24
    1578:	ff 0c       	add	r15, r15
    157a:	ff 0c       	add	r15, r15
    157c:	f8 0e       	add	r15, r24
    157e:	f2 0e       	add	r15, r18
    1580:	15 c0       	rjmp	.+42     	; 0x15ac <vfprintf+0xf2>
    1582:	8d 2d       	mov	r24, r13
    1584:	88 0f       	add	r24, r24
    1586:	d8 2e       	mov	r13, r24
    1588:	dd 0c       	add	r13, r13
    158a:	dd 0c       	add	r13, r13
    158c:	d8 0e       	add	r13, r24
    158e:	d2 0e       	add	r13, r18
    1590:	10 62       	ori	r17, 0x20	; 32
    1592:	0c c0       	rjmp	.+24     	; 0x15ac <vfprintf+0xf2>
    1594:	8e 32       	cpi	r24, 0x2E	; 46
    1596:	21 f4       	brne	.+8      	; 0x15a0 <vfprintf+0xe6>
    1598:	16 fd       	sbrc	r17, 6
    159a:	11 c3       	rjmp	.+1570   	; 0x1bbe <vfprintf+0x704>
    159c:	10 64       	ori	r17, 0x40	; 64
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <vfprintf+0xf2>
    15a0:	8c 36       	cpi	r24, 0x6C	; 108
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <vfprintf+0xee>
    15a4:	10 68       	ori	r17, 0x80	; 128
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0xf2>
    15a8:	88 36       	cpi	r24, 0x68	; 104
    15aa:	59 f4       	brne	.+22     	; 0x15c2 <vfprintf+0x108>
    15ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    15b0:	93 fd       	sbrc	r25, 3
    15b2:	85 91       	lpm	r24, Z+
    15b4:	93 ff       	sbrs	r25, 3
    15b6:	81 91       	ld	r24, Z+
    15b8:	ff 87       	std	Y+15, r31	; 0x0f
    15ba:	ee 87       	std	Y+14, r30	; 0x0e
    15bc:	88 23       	and	r24, r24
    15be:	09 f0       	breq	.+2      	; 0x15c2 <vfprintf+0x108>
    15c0:	b8 cf       	rjmp	.-144    	; 0x1532 <vfprintf+0x78>
    15c2:	98 2f       	mov	r25, r24
    15c4:	95 54       	subi	r25, 0x45	; 69
    15c6:	93 30       	cpi	r25, 0x03	; 3
    15c8:	18 f4       	brcc	.+6      	; 0x15d0 <vfprintf+0x116>
    15ca:	10 61       	ori	r17, 0x10	; 16
    15cc:	80 5e       	subi	r24, 0xE0	; 224
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <vfprintf+0x122>
    15d0:	98 2f       	mov	r25, r24
    15d2:	95 56       	subi	r25, 0x65	; 101
    15d4:	93 30       	cpi	r25, 0x03	; 3
    15d6:	08 f0       	brcs	.+2      	; 0x15da <vfprintf+0x120>
    15d8:	a2 c1       	rjmp	.+836    	; 0x191e <vfprintf+0x464>
    15da:	1f 7e       	andi	r17, 0xEF	; 239
    15dc:	16 fd       	sbrc	r17, 6
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0x12a>
    15e0:	e6 e0       	ldi	r30, 0x06	; 6
    15e2:	fe 2e       	mov	r15, r30
    15e4:	1f 73       	andi	r17, 0x3F	; 63
    15e6:	85 36       	cpi	r24, 0x65	; 101
    15e8:	11 f4       	brne	.+4      	; 0x15ee <vfprintf+0x134>
    15ea:	10 64       	ori	r17, 0x40	; 64
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <vfprintf+0x140>
    15ee:	86 36       	cpi	r24, 0x66	; 102
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <vfprintf+0x13c>
    15f2:	10 68       	ori	r17, 0x80	; 128
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x140>
    15f6:	f1 10       	cpse	r15, r1
    15f8:	fa 94       	dec	r15
    15fa:	17 ff       	sbrs	r17, 7
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <vfprintf+0x152>
    15fe:	fb e3       	ldi	r31, 0x3B	; 59
    1600:	ff 15       	cp	r31, r15
    1602:	48 f0       	brcs	.+18     	; 0x1616 <vfprintf+0x15c>
    1604:	ef 2c       	mov	r14, r15
    1606:	e3 94       	inc	r14
    1608:	27 e0       	ldi	r18, 0x07	; 7
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <vfprintf+0x16c>
    160c:	27 e0       	ldi	r18, 0x07	; 7
    160e:	2f 15       	cp	r18, r15
    1610:	30 f0       	brcs	.+12     	; 0x161e <vfprintf+0x164>
    1612:	2f 2d       	mov	r18, r15
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <vfprintf+0x16a>
    1616:	27 e0       	ldi	r18, 0x07	; 7
    1618:	7c e3       	ldi	r23, 0x3C	; 60
    161a:	e7 2e       	mov	r14, r23
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <vfprintf+0x16c>
    161e:	27 e0       	ldi	r18, 0x07	; 7
    1620:	67 e0       	ldi	r22, 0x07	; 7
    1622:	f6 2e       	mov	r15, r22
    1624:	ee 24       	eor	r14, r14
    1626:	ca 01       	movw	r24, r20
    1628:	04 96       	adiw	r24, 0x04	; 4
    162a:	9d 87       	std	Y+13, r25	; 0x0d
    162c:	8c 87       	std	Y+12, r24	; 0x0c
    162e:	fa 01       	movw	r30, r20
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	a1 01       	movw	r20, r2
    163a:	0e 2d       	mov	r16, r14
    163c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__ftoa_engine>
    1640:	5c 01       	movw	r10, r24
    1642:	c9 80       	ldd	r12, Y+1	; 0x01
    1644:	2c 2d       	mov	r18, r12
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	39 8b       	std	Y+17, r19	; 0x11
    164a:	28 8b       	std	Y+16, r18	; 0x10
    164c:	c0 fe       	sbrs	r12, 0
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <vfprintf+0x19c>
    1650:	38 89       	ldd	r19, Y+16	; 0x10
    1652:	33 ff       	sbrs	r19, 3
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x1a8>
    1656:	11 fd       	sbrc	r17, 1
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <vfprintf+0x1ac>
    165a:	12 ff       	sbrs	r17, 2
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x1b0>
    165e:	00 e2       	ldi	r16, 0x20	; 32
    1660:	05 c0       	rjmp	.+10     	; 0x166c <vfprintf+0x1b2>
    1662:	0d e2       	ldi	r16, 0x2D	; 45
    1664:	03 c0       	rjmp	.+6      	; 0x166c <vfprintf+0x1b2>
    1666:	0b e2       	ldi	r16, 0x2B	; 43
    1668:	01 c0       	rjmp	.+2      	; 0x166c <vfprintf+0x1b2>
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	88 89       	ldd	r24, Y+16	; 0x10
    166e:	99 89       	ldd	r25, Y+17	; 0x11
    1670:	8c 70       	andi	r24, 0x0C	; 12
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	09 f4       	brne	.+2      	; 0x167a <vfprintf+0x1c0>
    1678:	3c c0       	rjmp	.+120    	; 0x16f2 <vfprintf+0x238>
    167a:	00 23       	and	r16, r16
    167c:	11 f0       	breq	.+4      	; 0x1682 <vfprintf+0x1c8>
    167e:	84 e0       	ldi	r24, 0x04	; 4
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <vfprintf+0x1ca>
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	8d 15       	cp	r24, r13
    1686:	58 f4       	brcc	.+22     	; 0x169e <vfprintf+0x1e4>
    1688:	d8 1a       	sub	r13, r24
    168a:	13 fd       	sbrc	r17, 3
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <vfprintf+0x1e6>
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	b4 01       	movw	r22, r8
    1694:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1698:	da 94       	dec	r13
    169a:	c9 f7       	brne	.-14     	; 0x168e <vfprintf+0x1d4>
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <vfprintf+0x1e6>
    169e:	dd 24       	eor	r13, r13
    16a0:	00 23       	and	r16, r16
    16a2:	29 f0       	breq	.+10     	; 0x16ae <vfprintf+0x1f4>
    16a4:	80 2f       	mov	r24, r16
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b4 01       	movw	r22, r8
    16aa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    16ae:	88 89       	ldd	r24, Y+16	; 0x10
    16b0:	83 fd       	sbrc	r24, 3
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x204>
    16b4:	3c e6       	ldi	r19, 0x6C	; 108
    16b6:	e3 2e       	mov	r14, r19
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	f3 2e       	mov	r15, r19
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <vfprintf+0x226>
    16be:	28 e6       	ldi	r18, 0x68	; 104
    16c0:	e2 2e       	mov	r14, r18
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	f2 2e       	mov	r15, r18
    16c6:	0c c0       	rjmp	.+24     	; 0x16e0 <vfprintf+0x226>
    16c8:	01 15       	cp	r16, r1
    16ca:	11 05       	cpc	r17, r1
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <vfprintf+0x216>
    16ce:	80 52       	subi	r24, 0x20	; 32
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	b4 01       	movw	r22, r8
    16d4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    16d8:	08 94       	sec
    16da:	e1 1c       	adc	r14, r1
    16dc:	f1 1c       	adc	r15, r1
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <vfprintf+0x22e>
    16e0:	01 2f       	mov	r16, r17
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	00 71       	andi	r16, 0x10	; 16
    16e6:	10 70       	andi	r17, 0x00	; 0
    16e8:	f7 01       	movw	r30, r14
    16ea:	84 91       	lpm	r24, Z
    16ec:	88 23       	and	r24, r24
    16ee:	61 f7       	brne	.-40     	; 0x16c8 <vfprintf+0x20e>
    16f0:	63 c2       	rjmp	.+1222   	; 0x1bb8 <vfprintf+0x6fe>
    16f2:	17 ff       	sbrs	r17, 7
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <vfprintf+0x258>
    16f6:	ea 0c       	add	r14, r10
    16f8:	f8 89       	ldd	r31, Y+16	; 0x10
    16fa:	f4 ff       	sbrs	r31, 4
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <vfprintf+0x24c>
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	81 33       	cpi	r24, 0x31	; 49
    1702:	09 f4       	brne	.+2      	; 0x1706 <vfprintf+0x24c>
    1704:	ea 94       	dec	r14
    1706:	1e 14       	cp	r1, r14
    1708:	4c f5       	brge	.+82     	; 0x175c <vfprintf+0x2a2>
    170a:	28 e0       	ldi	r18, 0x08	; 8
    170c:	2e 15       	cp	r18, r14
    170e:	48 f1       	brcs	.+82     	; 0x1762 <vfprintf+0x2a8>
    1710:	2c c0       	rjmp	.+88     	; 0x176a <vfprintf+0x2b0>
    1712:	16 fd       	sbrc	r17, 6
    1714:	2a c0       	rjmp	.+84     	; 0x176a <vfprintf+0x2b0>
    1716:	8f 2d       	mov	r24, r15
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	8a 15       	cp	r24, r10
    171c:	9b 05       	cpc	r25, r11
    171e:	44 f0       	brlt	.+16     	; 0x1730 <vfprintf+0x276>
    1720:	3c ef       	ldi	r19, 0xFC	; 252
    1722:	a3 16       	cp	r10, r19
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	b3 06       	cpc	r11, r19
    1728:	1c f0       	brlt	.+6      	; 0x1730 <vfprintf+0x276>
    172a:	10 68       	ori	r17, 0x80	; 128
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <vfprintf+0x276>
    172e:	fa 94       	dec	r15
    1730:	ff 20       	and	r15, r15
    1732:	49 f0       	breq	.+18     	; 0x1746 <vfprintf+0x28c>
    1734:	e2 e0       	ldi	r30, 0x02	; 2
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	ec 0f       	add	r30, r28
    173a:	fd 1f       	adc	r31, r29
    173c:	ef 0d       	add	r30, r15
    173e:	f1 1d       	adc	r31, r1
    1740:	80 81       	ld	r24, Z
    1742:	80 33       	cpi	r24, 0x30	; 48
    1744:	a1 f3       	breq	.-24     	; 0x172e <vfprintf+0x274>
    1746:	17 ff       	sbrs	r17, 7
    1748:	10 c0       	rjmp	.+32     	; 0x176a <vfprintf+0x2b0>
    174a:	ef 2c       	mov	r14, r15
    174c:	e3 94       	inc	r14
    174e:	8f 2d       	mov	r24, r15
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a8 16       	cp	r10, r24
    1754:	b9 06       	cpc	r11, r25
    1756:	44 f4       	brge	.+16     	; 0x1768 <vfprintf+0x2ae>
    1758:	fa 18       	sub	r15, r10
    175a:	07 c0       	rjmp	.+14     	; 0x176a <vfprintf+0x2b0>
    175c:	ee 24       	eor	r14, r14
    175e:	e3 94       	inc	r14
    1760:	04 c0       	rjmp	.+8      	; 0x176a <vfprintf+0x2b0>
    1762:	98 e0       	ldi	r25, 0x08	; 8
    1764:	e9 2e       	mov	r14, r25
    1766:	01 c0       	rjmp	.+2      	; 0x176a <vfprintf+0x2b0>
    1768:	ff 24       	eor	r15, r15
    176a:	17 ff       	sbrs	r17, 7
    176c:	07 c0       	rjmp	.+14     	; 0x177c <vfprintf+0x2c2>
    176e:	1a 14       	cp	r1, r10
    1770:	1b 04       	cpc	r1, r11
    1772:	3c f4       	brge	.+14     	; 0x1782 <vfprintf+0x2c8>
    1774:	95 01       	movw	r18, r10
    1776:	2f 5f       	subi	r18, 0xFF	; 255
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	05 c0       	rjmp	.+10     	; 0x1786 <vfprintf+0x2cc>
    177c:	25 e0       	ldi	r18, 0x05	; 5
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x2cc>
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	00 23       	and	r16, r16
    1788:	11 f0       	breq	.+4      	; 0x178e <vfprintf+0x2d4>
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	ff 20       	and	r15, r15
    1790:	29 f0       	breq	.+10     	; 0x179c <vfprintf+0x2e2>
    1792:	8f 2d       	mov	r24, r15
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	28 0f       	add	r18, r24
    179a:	39 1f       	adc	r19, r25
    179c:	8d 2d       	mov	r24, r13
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	28 17       	cp	r18, r24
    17a2:	39 07       	cpc	r19, r25
    17a4:	14 f4       	brge	.+4      	; 0x17aa <vfprintf+0x2f0>
    17a6:	d2 1a       	sub	r13, r18
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <vfprintf+0x2f2>
    17aa:	dd 24       	eor	r13, r13
    17ac:	61 2e       	mov	r6, r17
    17ae:	77 24       	eor	r7, r7
    17b0:	c3 01       	movw	r24, r6
    17b2:	89 70       	andi	r24, 0x09	; 9
    17b4:	90 70       	andi	r25, 0x00	; 0
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	49 f4       	brne	.+18     	; 0x17cc <vfprintf+0x312>
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <vfprintf+0x30e>
    17bc:	80 e2       	ldi	r24, 0x20	; 32
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	b4 01       	movw	r22, r8
    17c2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    17c6:	da 94       	dec	r13
    17c8:	dd 20       	and	r13, r13
    17ca:	c1 f7       	brne	.-16     	; 0x17bc <vfprintf+0x302>
    17cc:	00 23       	and	r16, r16
    17ce:	29 f0       	breq	.+10     	; 0x17da <vfprintf+0x320>
    17d0:	80 2f       	mov	r24, r16
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	b4 01       	movw	r22, r8
    17d6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    17da:	63 fc       	sbrc	r6, 3
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <vfprintf+0x336>
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x332>
    17e0:	80 e3       	ldi	r24, 0x30	; 48
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	b4 01       	movw	r22, r8
    17e6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    17ea:	da 94       	dec	r13
    17ec:	dd 20       	and	r13, r13
    17ee:	c1 f7       	brne	.-16     	; 0x17e0 <vfprintf+0x326>
    17f0:	17 ff       	sbrs	r17, 7
    17f2:	48 c0       	rjmp	.+144    	; 0x1884 <vfprintf+0x3ca>
    17f4:	85 01       	movw	r16, r10
    17f6:	b7 fe       	sbrs	r11, 7
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <vfprintf+0x344>
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	10 e0       	ldi	r17, 0x00	; 0
    17fe:	66 24       	eor	r6, r6
    1800:	77 24       	eor	r7, r7
    1802:	95 01       	movw	r18, r10
    1804:	2e 19       	sub	r18, r14
    1806:	31 09       	sbc	r19, r1
    1808:	3b 8b       	std	Y+19, r19	; 0x13
    180a:	2a 8b       	std	Y+18, r18	; 0x12
    180c:	25 01       	movw	r4, r10
    180e:	40 1a       	sub	r4, r16
    1810:	51 0a       	sbc	r5, r17
    1812:	42 0c       	add	r4, r2
    1814:	53 1c       	adc	r5, r3
    1816:	6f 2d       	mov	r22, r15
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	ee 24       	eor	r14, r14
    181c:	ff 24       	eor	r15, r15
    181e:	e6 1a       	sub	r14, r22
    1820:	f7 0a       	sbc	r15, r23
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	0f 3f       	cpi	r16, 0xFF	; 255
    1826:	13 07       	cpc	r17, r19
    1828:	29 f4       	brne	.+10     	; 0x1834 <vfprintf+0x37a>
    182a:	8e e2       	ldi	r24, 0x2E	; 46
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	b4 01       	movw	r22, r8
    1830:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1834:	a0 16       	cp	r10, r16
    1836:	b1 06       	cpc	r11, r17
    1838:	54 f0       	brlt	.+20     	; 0x184e <vfprintf+0x394>
    183a:	2a 89       	ldd	r18, Y+18	; 0x12
    183c:	3b 89       	ldd	r19, Y+19	; 0x13
    183e:	20 17       	cp	r18, r16
    1840:	31 07       	cpc	r19, r17
    1842:	2c f4       	brge	.+10     	; 0x184e <vfprintf+0x394>
    1844:	f2 01       	movw	r30, r4
    1846:	e6 0d       	add	r30, r6
    1848:	f7 1d       	adc	r31, r7
    184a:	81 81       	ldd	r24, Z+1	; 0x01
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <vfprintf+0x396>
    184e:	80 e3       	ldi	r24, 0x30	; 48
    1850:	01 50       	subi	r16, 0x01	; 1
    1852:	10 40       	sbci	r17, 0x00	; 0
    1854:	08 94       	sec
    1856:	61 1c       	adc	r6, r1
    1858:	71 1c       	adc	r7, r1
    185a:	0e 15       	cp	r16, r14
    185c:	1f 05       	cpc	r17, r15
    185e:	2c f0       	brlt	.+10     	; 0x186a <vfprintf+0x3b0>
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	b4 01       	movw	r22, r8
    1864:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1868:	dc cf       	rjmp	.-72     	; 0x1822 <vfprintf+0x368>
    186a:	0a 15       	cp	r16, r10
    186c:	1b 05       	cpc	r17, r11
    186e:	41 f4       	brne	.+16     	; 0x1880 <vfprintf+0x3c6>
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	96 33       	cpi	r25, 0x36	; 54
    1874:	20 f4       	brcc	.+8      	; 0x187e <vfprintf+0x3c4>
    1876:	95 33       	cpi	r25, 0x35	; 53
    1878:	19 f4       	brne	.+6      	; 0x1880 <vfprintf+0x3c6>
    187a:	38 89       	ldd	r19, Y+16	; 0x10
    187c:	34 ff       	sbrs	r19, 4
    187e:	81 e3       	ldi	r24, 0x31	; 49
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	49 c0       	rjmp	.+146    	; 0x1916 <vfprintf+0x45c>
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	81 33       	cpi	r24, 0x31	; 49
    1888:	11 f0       	breq	.+4      	; 0x188e <vfprintf+0x3d4>
    188a:	9f ee       	ldi	r25, 0xEF	; 239
    188c:	c9 22       	and	r12, r25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	b4 01       	movw	r22, r8
    1892:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1896:	ff 20       	and	r15, r15
    1898:	89 f0       	breq	.+34     	; 0x18bc <vfprintf+0x402>
    189a:	8e e2       	ldi	r24, 0x2E	; 46
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b4 01       	movw	r22, r8
    18a0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    18a4:	12 e0       	ldi	r17, 0x02	; 2
    18a6:	f1 01       	movw	r30, r2
    18a8:	e1 0f       	add	r30, r17
    18aa:	f1 1d       	adc	r31, r1
    18ac:	1f 5f       	subi	r17, 0xFF	; 255
    18ae:	80 81       	ld	r24, Z
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	b4 01       	movw	r22, r8
    18b4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    18b8:	fa 94       	dec	r15
    18ba:	a9 f7       	brne	.-22     	; 0x18a6 <vfprintf+0x3ec>
    18bc:	64 fe       	sbrs	r6, 4
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <vfprintf+0x40c>
    18c0:	85 e4       	ldi	r24, 0x45	; 69
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <vfprintf+0x410>
    18c6:	85 e6       	ldi	r24, 0x65	; 101
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	b4 01       	movw	r22, r8
    18cc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    18d0:	b7 fc       	sbrc	r11, 7
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <vfprintf+0x424>
    18d4:	a1 14       	cp	r10, r1
    18d6:	b1 04       	cpc	r11, r1
    18d8:	41 f4       	brne	.+16     	; 0x18ea <vfprintf+0x430>
    18da:	c4 fe       	sbrs	r12, 4
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <vfprintf+0x430>
    18de:	b0 94       	com	r11
    18e0:	a1 94       	neg	r10
    18e2:	b1 08       	sbc	r11, r1
    18e4:	b3 94       	inc	r11
    18e6:	8d e2       	ldi	r24, 0x2D	; 45
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x432>
    18ea:	8b e2       	ldi	r24, 0x2B	; 43
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	b4 01       	movw	r22, r8
    18f0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    18f4:	80 e3       	ldi	r24, 0x30	; 48
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <vfprintf+0x448>
    18f8:	8f 5f       	subi	r24, 0xFF	; 255
    18fa:	e6 ef       	ldi	r30, 0xF6	; 246
    18fc:	ff ef       	ldi	r31, 0xFF	; 255
    18fe:	ae 0e       	add	r10, r30
    1900:	bf 1e       	adc	r11, r31
    1902:	fa e0       	ldi	r31, 0x0A	; 10
    1904:	af 16       	cp	r10, r31
    1906:	b1 04       	cpc	r11, r1
    1908:	bc f7       	brge	.-18     	; 0x18f8 <vfprintf+0x43e>
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	b4 01       	movw	r22, r8
    190e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1912:	c5 01       	movw	r24, r10
    1914:	c0 96       	adiw	r24, 0x30	; 48
    1916:	b4 01       	movw	r22, r8
    1918:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    191c:	4d c1       	rjmp	.+666    	; 0x1bb8 <vfprintf+0x6fe>
    191e:	83 36       	cpi	r24, 0x63	; 99
    1920:	31 f0       	breq	.+12     	; 0x192e <vfprintf+0x474>
    1922:	83 37       	cpi	r24, 0x73	; 115
    1924:	89 f0       	breq	.+34     	; 0x1948 <vfprintf+0x48e>
    1926:	83 35       	cpi	r24, 0x53	; 83
    1928:	09 f0       	breq	.+2      	; 0x192c <vfprintf+0x472>
    192a:	59 c0       	rjmp	.+178    	; 0x19de <vfprintf+0x524>
    192c:	22 c0       	rjmp	.+68     	; 0x1972 <vfprintf+0x4b8>
    192e:	9a 01       	movw	r18, r20
    1930:	2e 5f       	subi	r18, 0xFE	; 254
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	3d 87       	std	Y+13, r19	; 0x0d
    1936:	2c 87       	std	Y+12, r18	; 0x0c
    1938:	fa 01       	movw	r30, r20
    193a:	80 81       	ld	r24, Z
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	e8 2e       	mov	r14, r24
    1942:	f1 2c       	mov	r15, r1
    1944:	51 01       	movw	r10, r2
    1946:	13 c0       	rjmp	.+38     	; 0x196e <vfprintf+0x4b4>
    1948:	9a 01       	movw	r18, r20
    194a:	2e 5f       	subi	r18, 0xFE	; 254
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	3d 87       	std	Y+13, r19	; 0x0d
    1950:	2c 87       	std	Y+12, r18	; 0x0c
    1952:	fa 01       	movw	r30, r20
    1954:	a0 80       	ld	r10, Z
    1956:	b1 80       	ldd	r11, Z+1	; 0x01
    1958:	16 ff       	sbrs	r17, 6
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x4a8>
    195c:	6f 2d       	mov	r22, r15
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x4ac>
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	7f ef       	ldi	r23, 0xFF	; 255
    1966:	c5 01       	movw	r24, r10
    1968:	0e 94 db 10 	call	0x21b6	; 0x21b6 <strnlen>
    196c:	7c 01       	movw	r14, r24
    196e:	1f 77       	andi	r17, 0x7F	; 127
    1970:	14 c0       	rjmp	.+40     	; 0x199a <vfprintf+0x4e0>
    1972:	9a 01       	movw	r18, r20
    1974:	2e 5f       	subi	r18, 0xFE	; 254
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	3d 87       	std	Y+13, r19	; 0x0d
    197a:	2c 87       	std	Y+12, r18	; 0x0c
    197c:	fa 01       	movw	r30, r20
    197e:	a0 80       	ld	r10, Z
    1980:	b1 80       	ldd	r11, Z+1	; 0x01
    1982:	16 ff       	sbrs	r17, 6
    1984:	03 c0       	rjmp	.+6      	; 0x198c <vfprintf+0x4d2>
    1986:	6f 2d       	mov	r22, r15
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x4d6>
    198c:	6f ef       	ldi	r22, 0xFF	; 255
    198e:	7f ef       	ldi	r23, 0xFF	; 255
    1990:	c5 01       	movw	r24, r10
    1992:	0e 94 ae 10 	call	0x215c	; 0x215c <strnlen_P>
    1996:	7c 01       	movw	r14, r24
    1998:	10 68       	ori	r17, 0x80	; 128
    199a:	13 fd       	sbrc	r17, 3
    199c:	1c c0       	rjmp	.+56     	; 0x19d6 <vfprintf+0x51c>
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x4f2>
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	b4 01       	movw	r22, r8
    19a6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    19aa:	da 94       	dec	r13
    19ac:	8d 2d       	mov	r24, r13
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	e8 16       	cp	r14, r24
    19b2:	f9 06       	cpc	r15, r25
    19b4:	a8 f3       	brcs	.-22     	; 0x19a0 <vfprintf+0x4e6>
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <vfprintf+0x51c>
    19b8:	f5 01       	movw	r30, r10
    19ba:	17 fd       	sbrc	r17, 7
    19bc:	85 91       	lpm	r24, Z+
    19be:	17 ff       	sbrs	r17, 7
    19c0:	81 91       	ld	r24, Z+
    19c2:	5f 01       	movw	r10, r30
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	b4 01       	movw	r22, r8
    19c8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    19cc:	d1 10       	cpse	r13, r1
    19ce:	da 94       	dec	r13
    19d0:	08 94       	sec
    19d2:	e1 08       	sbc	r14, r1
    19d4:	f1 08       	sbc	r15, r1
    19d6:	e1 14       	cp	r14, r1
    19d8:	f1 04       	cpc	r15, r1
    19da:	71 f7       	brne	.-36     	; 0x19b8 <vfprintf+0x4fe>
    19dc:	ed c0       	rjmp	.+474    	; 0x1bb8 <vfprintf+0x6fe>
    19de:	84 36       	cpi	r24, 0x64	; 100
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <vfprintf+0x52c>
    19e2:	89 36       	cpi	r24, 0x69	; 105
    19e4:	71 f5       	brne	.+92     	; 0x1a42 <vfprintf+0x588>
    19e6:	9a 01       	movw	r18, r20
    19e8:	17 ff       	sbrs	r17, 7
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <vfprintf+0x546>
    19ec:	2c 5f       	subi	r18, 0xFC	; 252
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	3d 87       	std	Y+13, r19	; 0x0d
    19f2:	2c 87       	std	Y+12, r18	; 0x0c
    19f4:	fa 01       	movw	r30, r20
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	a2 81       	ldd	r26, Z+2	; 0x02
    19fc:	b3 81       	ldd	r27, Z+3	; 0x03
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <vfprintf+0x55c>
    1a00:	2e 5f       	subi	r18, 0xFE	; 254
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	3d 87       	std	Y+13, r19	; 0x0d
    1a06:	2c 87       	std	Y+12, r18	; 0x0c
    1a08:	fa 01       	movw	r30, r20
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	aa 27       	eor	r26, r26
    1a10:	97 fd       	sbrc	r25, 7
    1a12:	a0 95       	com	r26
    1a14:	ba 2f       	mov	r27, r26
    1a16:	01 2f       	mov	r16, r17
    1a18:	0f 76       	andi	r16, 0x6F	; 111
    1a1a:	b7 ff       	sbrs	r27, 7
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <vfprintf+0x574>
    1a1e:	b0 95       	com	r27
    1a20:	a0 95       	com	r26
    1a22:	90 95       	com	r25
    1a24:	81 95       	neg	r24
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	af 4f       	sbci	r26, 0xFF	; 255
    1a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2c:	00 68       	ori	r16, 0x80	; 128
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	a1 01       	movw	r20, r2
    1a34:	2a e0       	ldi	r18, 0x0A	; 10
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	0e 94 55 11 	call	0x22aa	; 0x22aa <__ultoa_invert>
    1a3c:	e8 2e       	mov	r14, r24
    1a3e:	e2 18       	sub	r14, r2
    1a40:	41 c0       	rjmp	.+130    	; 0x1ac4 <vfprintf+0x60a>
    1a42:	85 37       	cpi	r24, 0x75	; 117
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <vfprintf+0x594>
    1a46:	1f 7e       	andi	r17, 0xEF	; 239
    1a48:	2a e0       	ldi	r18, 0x0A	; 10
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	20 c0       	rjmp	.+64     	; 0x1a8e <vfprintf+0x5d4>
    1a4e:	19 7f       	andi	r17, 0xF9	; 249
    1a50:	8f 36       	cpi	r24, 0x6F	; 111
    1a52:	a9 f0       	breq	.+42     	; 0x1a7e <vfprintf+0x5c4>
    1a54:	80 37       	cpi	r24, 0x70	; 112
    1a56:	20 f4       	brcc	.+8      	; 0x1a60 <vfprintf+0x5a6>
    1a58:	88 35       	cpi	r24, 0x58	; 88
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <vfprintf+0x5a4>
    1a5c:	b0 c0       	rjmp	.+352    	; 0x1bbe <vfprintf+0x704>
    1a5e:	0b c0       	rjmp	.+22     	; 0x1a76 <vfprintf+0x5bc>
    1a60:	80 37       	cpi	r24, 0x70	; 112
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <vfprintf+0x5b2>
    1a64:	88 37       	cpi	r24, 0x78	; 120
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <vfprintf+0x5b0>
    1a68:	aa c0       	rjmp	.+340    	; 0x1bbe <vfprintf+0x704>
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <vfprintf+0x5b4>
    1a6c:	10 61       	ori	r17, 0x10	; 16
    1a6e:	14 ff       	sbrs	r17, 4
    1a70:	09 c0       	rjmp	.+18     	; 0x1a84 <vfprintf+0x5ca>
    1a72:	14 60       	ori	r17, 0x04	; 4
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <vfprintf+0x5ca>
    1a76:	14 ff       	sbrs	r17, 4
    1a78:	08 c0       	rjmp	.+16     	; 0x1a8a <vfprintf+0x5d0>
    1a7a:	16 60       	ori	r17, 0x06	; 6
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x5d0>
    1a7e:	28 e0       	ldi	r18, 0x08	; 8
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <vfprintf+0x5d4>
    1a84:	20 e1       	ldi	r18, 0x10	; 16
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x5d4>
    1a8a:	20 e1       	ldi	r18, 0x10	; 16
    1a8c:	32 e0       	ldi	r19, 0x02	; 2
    1a8e:	ca 01       	movw	r24, r20
    1a90:	17 ff       	sbrs	r17, 7
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <vfprintf+0x5ec>
    1a94:	04 96       	adiw	r24, 0x04	; 4
    1a96:	9d 87       	std	Y+13, r25	; 0x0d
    1a98:	8c 87       	std	Y+12, r24	; 0x0c
    1a9a:	fa 01       	movw	r30, r20
    1a9c:	60 81       	ld	r22, Z
    1a9e:	71 81       	ldd	r23, Z+1	; 0x01
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <vfprintf+0x5fc>
    1aa6:	02 96       	adiw	r24, 0x02	; 2
    1aa8:	9d 87       	std	Y+13, r25	; 0x0d
    1aaa:	8c 87       	std	Y+12, r24	; 0x0c
    1aac:	fa 01       	movw	r30, r20
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a1 01       	movw	r20, r2
    1ab8:	0e 94 55 11 	call	0x22aa	; 0x22aa <__ultoa_invert>
    1abc:	e8 2e       	mov	r14, r24
    1abe:	e2 18       	sub	r14, r2
    1ac0:	01 2f       	mov	r16, r17
    1ac2:	0f 77       	andi	r16, 0x7F	; 127
    1ac4:	06 ff       	sbrs	r16, 6
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <vfprintf+0x620>
    1ac8:	0e 7f       	andi	r16, 0xFE	; 254
    1aca:	ef 14       	cp	r14, r15
    1acc:	30 f4       	brcc	.+12     	; 0x1ada <vfprintf+0x620>
    1ace:	04 ff       	sbrs	r16, 4
    1ad0:	06 c0       	rjmp	.+12     	; 0x1ade <vfprintf+0x624>
    1ad2:	02 fd       	sbrc	r16, 2
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <vfprintf+0x624>
    1ad6:	0f 7e       	andi	r16, 0xEF	; 239
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <vfprintf+0x624>
    1ada:	1e 2d       	mov	r17, r14
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <vfprintf+0x626>
    1ade:	1f 2d       	mov	r17, r15
    1ae0:	80 2f       	mov	r24, r16
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	04 ff       	sbrs	r16, 4
    1ae6:	0c c0       	rjmp	.+24     	; 0x1b00 <vfprintf+0x646>
    1ae8:	fe 01       	movw	r30, r28
    1aea:	ee 0d       	add	r30, r14
    1aec:	f1 1d       	adc	r31, r1
    1aee:	20 81       	ld	r18, Z
    1af0:	20 33       	cpi	r18, 0x30	; 48
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <vfprintf+0x63e>
    1af4:	09 7e       	andi	r16, 0xE9	; 233
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <vfprintf+0x650>
    1af8:	02 ff       	sbrs	r16, 2
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <vfprintf+0x64e>
    1afc:	1e 5f       	subi	r17, 0xFE	; 254
    1afe:	05 c0       	rjmp	.+10     	; 0x1b0a <vfprintf+0x650>
    1b00:	86 78       	andi	r24, 0x86	; 134
    1b02:	90 70       	andi	r25, 0x00	; 0
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <vfprintf+0x650>
    1b08:	1f 5f       	subi	r17, 0xFF	; 255
    1b0a:	a0 2e       	mov	r10, r16
    1b0c:	bb 24       	eor	r11, r11
    1b0e:	03 fd       	sbrc	r16, 3
    1b10:	12 c0       	rjmp	.+36     	; 0x1b36 <vfprintf+0x67c>
    1b12:	00 ff       	sbrs	r16, 0
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <vfprintf+0x676>
    1b16:	fe 2c       	mov	r15, r14
    1b18:	1d 15       	cp	r17, r13
    1b1a:	50 f4       	brcc	.+20     	; 0x1b30 <vfprintf+0x676>
    1b1c:	fd 0c       	add	r15, r13
    1b1e:	f1 1a       	sub	r15, r17
    1b20:	1d 2d       	mov	r17, r13
    1b22:	06 c0       	rjmp	.+12     	; 0x1b30 <vfprintf+0x676>
    1b24:	80 e2       	ldi	r24, 0x20	; 32
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	b4 01       	movw	r22, r8
    1b2a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1b2e:	1f 5f       	subi	r17, 0xFF	; 255
    1b30:	1d 15       	cp	r17, r13
    1b32:	c0 f3       	brcs	.-16     	; 0x1b24 <vfprintf+0x66a>
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <vfprintf+0x684>
    1b36:	1d 15       	cp	r17, r13
    1b38:	10 f4       	brcc	.+4      	; 0x1b3e <vfprintf+0x684>
    1b3a:	d1 1a       	sub	r13, r17
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <vfprintf+0x686>
    1b3e:	dd 24       	eor	r13, r13
    1b40:	a4 fe       	sbrs	r10, 4
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <vfprintf+0x6a8>
    1b44:	80 e3       	ldi	r24, 0x30	; 48
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	b4 01       	movw	r22, r8
    1b4a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1b4e:	a2 fe       	sbrs	r10, 2
    1b50:	1f c0       	rjmp	.+62     	; 0x1b90 <vfprintf+0x6d6>
    1b52:	a1 fe       	sbrs	r10, 1
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <vfprintf+0x6a2>
    1b56:	88 e5       	ldi	r24, 0x58	; 88
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <vfprintf+0x6c2>
    1b5c:	88 e7       	ldi	r24, 0x78	; 120
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <vfprintf+0x6c2>
    1b62:	c5 01       	movw	r24, r10
    1b64:	86 78       	andi	r24, 0x86	; 134
    1b66:	90 70       	andi	r25, 0x00	; 0
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	91 f0       	breq	.+36     	; 0x1b90 <vfprintf+0x6d6>
    1b6c:	a1 fc       	sbrc	r10, 1
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x6ba>
    1b70:	80 e2       	ldi	r24, 0x20	; 32
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x6bc>
    1b74:	8b e2       	ldi	r24, 0x2B	; 43
    1b76:	07 fd       	sbrc	r16, 7
    1b78:	8d e2       	ldi	r24, 0x2D	; 45
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	b4 01       	movw	r22, r8
    1b7e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1b82:	06 c0       	rjmp	.+12     	; 0x1b90 <vfprintf+0x6d6>
    1b84:	80 e3       	ldi	r24, 0x30	; 48
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	b4 01       	movw	r22, r8
    1b8a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1b8e:	fa 94       	dec	r15
    1b90:	ef 14       	cp	r14, r15
    1b92:	c0 f3       	brcs	.-16     	; 0x1b84 <vfprintf+0x6ca>
    1b94:	ea 94       	dec	r14
    1b96:	f1 01       	movw	r30, r2
    1b98:	ee 0d       	add	r30, r14
    1b9a:	f1 1d       	adc	r31, r1
    1b9c:	80 81       	ld	r24, Z
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b4 01       	movw	r22, r8
    1ba2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1ba6:	ee 20       	and	r14, r14
    1ba8:	a9 f7       	brne	.-22     	; 0x1b94 <vfprintf+0x6da>
    1baa:	06 c0       	rjmp	.+12     	; 0x1bb8 <vfprintf+0x6fe>
    1bac:	80 e2       	ldi	r24, 0x20	; 32
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	b4 01       	movw	r22, r8
    1bb2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <fputc>
    1bb6:	da 94       	dec	r13
    1bb8:	dd 20       	and	r13, r13
    1bba:	c1 f7       	brne	.-16     	; 0x1bac <vfprintf+0x6f2>
    1bbc:	8e cc       	rjmp	.-1764   	; 0x14da <vfprintf+0x20>
    1bbe:	f4 01       	movw	r30, r8
    1bc0:	86 81       	ldd	r24, Z+6	; 0x06
    1bc2:	97 81       	ldd	r25, Z+7	; 0x07
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x710>
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	65 96       	adiw	r28, 0x15	; 21
    1bcc:	e2 e1       	ldi	r30, 0x12	; 18
    1bce:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__epilogue_restores__>

00001bd2 <__divmodhi4>:
    1bd2:	97 fb       	bst	r25, 7
    1bd4:	09 2e       	mov	r0, r25
    1bd6:	07 26       	eor	r0, r23
    1bd8:	0a d0       	rcall	.+20     	; 0x1bee <__divmodhi4_neg1>
    1bda:	77 fd       	sbrc	r23, 7
    1bdc:	04 d0       	rcall	.+8      	; 0x1be6 <__divmodhi4_neg2>
    1bde:	43 d0       	rcall	.+134    	; 0x1c66 <__udivmodhi4>
    1be0:	06 d0       	rcall	.+12     	; 0x1bee <__divmodhi4_neg1>
    1be2:	00 20       	and	r0, r0
    1be4:	1a f4       	brpl	.+6      	; 0x1bec <__divmodhi4_exit>

00001be6 <__divmodhi4_neg2>:
    1be6:	70 95       	com	r23
    1be8:	61 95       	neg	r22
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255

00001bec <__divmodhi4_exit>:
    1bec:	08 95       	ret

00001bee <__divmodhi4_neg1>:
    1bee:	f6 f7       	brtc	.-4      	; 0x1bec <__divmodhi4_exit>
    1bf0:	90 95       	com	r25
    1bf2:	81 95       	neg	r24
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	08 95       	ret

00001bf8 <__prologue_saves__>:
    1bf8:	2f 92       	push	r2
    1bfa:	3f 92       	push	r3
    1bfc:	4f 92       	push	r4
    1bfe:	5f 92       	push	r5
    1c00:	6f 92       	push	r6
    1c02:	7f 92       	push	r7
    1c04:	8f 92       	push	r8
    1c06:	9f 92       	push	r9
    1c08:	af 92       	push	r10
    1c0a:	bf 92       	push	r11
    1c0c:	cf 92       	push	r12
    1c0e:	df 92       	push	r13
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	ca 1b       	sub	r28, r26
    1c22:	db 0b       	sbc	r29, r27
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	09 94       	ijmp

00001c30 <__epilogue_restores__>:
    1c30:	2a 88       	ldd	r2, Y+18	; 0x12
    1c32:	39 88       	ldd	r3, Y+17	; 0x11
    1c34:	48 88       	ldd	r4, Y+16	; 0x10
    1c36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c42:	b9 84       	ldd	r11, Y+9	; 0x09
    1c44:	c8 84       	ldd	r12, Y+8	; 0x08
    1c46:	df 80       	ldd	r13, Y+7	; 0x07
    1c48:	ee 80       	ldd	r14, Y+6	; 0x06
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c50:	aa 81       	ldd	r26, Y+2	; 0x02
    1c52:	b9 81       	ldd	r27, Y+1	; 0x01
    1c54:	ce 0f       	add	r28, r30
    1c56:	d1 1d       	adc	r29, r1
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	ed 01       	movw	r28, r26
    1c64:	08 95       	ret

00001c66 <__udivmodhi4>:
    1c66:	aa 1b       	sub	r26, r26
    1c68:	bb 1b       	sub	r27, r27
    1c6a:	51 e1       	ldi	r21, 0x11	; 17
    1c6c:	07 c0       	rjmp	.+14     	; 0x1c7c <__udivmodhi4_ep>

00001c6e <__udivmodhi4_loop>:
    1c6e:	aa 1f       	adc	r26, r26
    1c70:	bb 1f       	adc	r27, r27
    1c72:	a6 17       	cp	r26, r22
    1c74:	b7 07       	cpc	r27, r23
    1c76:	10 f0       	brcs	.+4      	; 0x1c7c <__udivmodhi4_ep>
    1c78:	a6 1b       	sub	r26, r22
    1c7a:	b7 0b       	sbc	r27, r23

00001c7c <__udivmodhi4_ep>:
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	5a 95       	dec	r21
    1c82:	a9 f7       	brne	.-22     	; 0x1c6e <__udivmodhi4_loop>
    1c84:	80 95       	com	r24
    1c86:	90 95       	com	r25
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	08 95       	ret

00001c8e <strtod>:
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ed e4       	ldi	r30, 0x4D	; 77
    1c94:	fe e0       	ldi	r31, 0x0E	; 14
    1c96:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__prologue_saves__+0x8>
    1c9a:	5b 01       	movw	r10, r22
    1c9c:	61 15       	cp	r22, r1
    1c9e:	71 05       	cpc	r23, r1
    1ca0:	21 f0       	breq	.+8      	; 0x1caa <strtod+0x1c>
    1ca2:	db 01       	movw	r26, r22
    1ca4:	8c 93       	st	X, r24
    1ca6:	11 96       	adiw	r26, 0x01	; 1
    1ca8:	9c 93       	st	X, r25
    1caa:	7c 01       	movw	r14, r24
    1cac:	e7 01       	movw	r28, r14
    1cae:	08 94       	sec
    1cb0:	e1 1c       	adc	r14, r1
    1cb2:	f1 1c       	adc	r15, r1
    1cb4:	08 81       	ld	r16, Y
    1cb6:	67 01       	movw	r12, r14
    1cb8:	80 2f       	mov	r24, r16
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 8e 10 	call	0x211c	; 0x211c <isspace>
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	a1 f7       	brne	.-24     	; 0x1cac <strtod+0x1e>
    1cc4:	0d 32       	cpi	r16, 0x2D	; 45
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <strtod+0x4a>
    1cc8:	09 81       	ldd	r16, Y+1	; 0x01
    1cca:	42 e0       	ldi	r20, 0x02	; 2
    1ccc:	c4 2e       	mov	r12, r20
    1cce:	d1 2c       	mov	r13, r1
    1cd0:	cc 0e       	add	r12, r28
    1cd2:	dd 1e       	adc	r13, r29
    1cd4:	11 e0       	ldi	r17, 0x01	; 1
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <strtod+0x5c>
    1cd8:	0b 32       	cpi	r16, 0x2B	; 43
    1cda:	31 f4       	brne	.+12     	; 0x1ce8 <strtod+0x5a>
    1cdc:	09 81       	ldd	r16, Y+1	; 0x01
    1cde:	32 e0       	ldi	r19, 0x02	; 2
    1ce0:	c3 2e       	mov	r12, r19
    1ce2:	d1 2c       	mov	r13, r1
    1ce4:	cc 0e       	add	r12, r28
    1ce6:	dd 1e       	adc	r13, r29
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    1cea:	e6 01       	movw	r28, r12
    1cec:	21 97       	sbiw	r28, 0x01	; 1
    1cee:	ce 01       	movw	r24, r28
    1cf0:	60 e7       	ldi	r22, 0x70	; 112
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	43 e0       	ldi	r20, 0x03	; 3
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	0e 94 96 10 	call	0x212c	; 0x212c <strncasecmp_P>
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	d1 f4       	brne	.+52     	; 0x1d34 <strtod+0xa6>
    1d00:	e6 01       	movw	r28, r12
    1d02:	22 96       	adiw	r28, 0x02	; 2
    1d04:	ce 01       	movw	r24, r28
    1d06:	63 e7       	ldi	r22, 0x73	; 115
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	45 e0       	ldi	r20, 0x05	; 5
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	0e 94 96 10 	call	0x212c	; 0x212c <strncasecmp_P>
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <strtod+0x8c>
    1d16:	e6 01       	movw	r28, r12
    1d18:	27 96       	adiw	r28, 0x07	; 7
    1d1a:	a1 14       	cp	r10, r1
    1d1c:	b1 04       	cpc	r11, r1
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <strtod+0x98>
    1d20:	f5 01       	movw	r30, r10
    1d22:	d1 83       	std	Z+1, r29	; 0x01
    1d24:	c0 83       	st	Z, r28
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	90 e8       	ldi	r25, 0x80	; 128
    1d2c:	11 23       	and	r17, r17
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <strtod+0xa4>
    1d30:	0a c1       	rjmp	.+532    	; 0x1f46 <strtod+0x2b8>
    1d32:	04 c1       	rjmp	.+520    	; 0x1f3c <strtod+0x2ae>
    1d34:	ce 01       	movw	r24, r28
    1d36:	68 e7       	ldi	r22, 0x78	; 120
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	43 e0       	ldi	r20, 0x03	; 3
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	0e 94 96 10 	call	0x212c	; 0x212c <strncasecmp_P>
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	59 f4       	brne	.+22     	; 0x1d5c <strtod+0xce>
    1d46:	a1 14       	cp	r10, r1
    1d48:	b1 04       	cpc	r11, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <strtod+0xc0>
    1d4c:	f9 c0       	rjmp	.+498    	; 0x1f40 <strtod+0x2b2>
    1d4e:	c6 01       	movw	r24, r12
    1d50:	02 96       	adiw	r24, 0x02	; 2
    1d52:	d5 01       	movw	r26, r10
    1d54:	11 96       	adiw	r26, 0x01	; 1
    1d56:	9c 93       	st	X, r25
    1d58:	8e 93       	st	-X, r24
    1d5a:	f2 c0       	rjmp	.+484    	; 0x1f40 <strtod+0x2b2>
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	ba 01       	movw	r22, r20
    1d62:	88 24       	eor	r8, r8
    1d64:	99 24       	eor	r9, r9
    1d66:	00 53       	subi	r16, 0x30	; 48
    1d68:	0a 30       	cpi	r16, 0x0A	; 10
    1d6a:	90 f5       	brcc	.+100    	; 0x1dd0 <strtod+0x142>
    1d6c:	12 60       	ori	r17, 0x02	; 2
    1d6e:	21 2f       	mov	r18, r17
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	c9 01       	movw	r24, r18
    1d74:	88 70       	andi	r24, 0x08	; 8
    1d76:	90 70       	andi	r25, 0x00	; 0
    1d78:	12 ff       	sbrs	r17, 2
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <strtod+0xfa>
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f5       	brne	.+90     	; 0x1dda <strtod+0x14c>
    1d80:	08 94       	sec
    1d82:	81 1c       	adc	r8, r1
    1d84:	91 1c       	adc	r9, r1
    1d86:	29 c0       	rjmp	.+82     	; 0x1dda <strtod+0x14c>
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <strtod+0x104>
    1d8c:	08 94       	sec
    1d8e:	81 08       	sbc	r8, r1
    1d90:	91 08       	sbc	r9, r1
    1d92:	db 01       	movw	r26, r22
    1d94:	ca 01       	movw	r24, r20
    1d96:	d2 e0       	ldi	r29, 0x02	; 2
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	aa 1f       	adc	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	da 95       	dec	r29
    1da2:	d1 f7       	brne	.-12     	; 0x1d98 <strtod+0x10a>
    1da4:	48 0f       	add	r20, r24
    1da6:	59 1f       	adc	r21, r25
    1da8:	6a 1f       	adc	r22, r26
    1daa:	7b 1f       	adc	r23, r27
    1dac:	44 0f       	add	r20, r20
    1dae:	55 1f       	adc	r21, r21
    1db0:	66 1f       	adc	r22, r22
    1db2:	77 1f       	adc	r23, r23
    1db4:	40 0f       	add	r20, r16
    1db6:	51 1d       	adc	r21, r1
    1db8:	61 1d       	adc	r22, r1
    1dba:	71 1d       	adc	r23, r1
    1dbc:	48 39       	cpi	r20, 0x98	; 152
    1dbe:	b9 e9       	ldi	r27, 0x99	; 153
    1dc0:	5b 07       	cpc	r21, r27
    1dc2:	b9 e9       	ldi	r27, 0x99	; 153
    1dc4:	6b 07       	cpc	r22, r27
    1dc6:	b9 e1       	ldi	r27, 0x19	; 25
    1dc8:	7b 07       	cpc	r23, r27
    1dca:	38 f0       	brcs	.+14     	; 0x1dda <strtod+0x14c>
    1dcc:	14 60       	ori	r17, 0x04	; 4
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <strtod+0x14c>
    1dd0:	0e 3f       	cpi	r16, 0xFE	; 254
    1dd2:	39 f4       	brne	.+14     	; 0x1de2 <strtod+0x154>
    1dd4:	13 fd       	sbrc	r17, 3
    1dd6:	43 c0       	rjmp	.+134    	; 0x1e5e <strtod+0x1d0>
    1dd8:	18 60       	ori	r17, 0x08	; 8
    1dda:	f6 01       	movw	r30, r12
    1ddc:	01 91       	ld	r16, Z+
    1dde:	6f 01       	movw	r12, r30
    1de0:	c2 cf       	rjmp	.-124    	; 0x1d66 <strtod+0xd8>
    1de2:	05 33       	cpi	r16, 0x35	; 53
    1de4:	11 f0       	breq	.+4      	; 0x1dea <strtod+0x15c>
    1de6:	05 31       	cpi	r16, 0x15	; 21
    1de8:	d1 f5       	brne	.+116    	; 0x1e5e <strtod+0x1d0>
    1dea:	d6 01       	movw	r26, r12
    1dec:	ec 91       	ld	r30, X
    1dee:	ed 32       	cpi	r30, 0x2D	; 45
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <strtod+0x168>
    1df2:	10 61       	ori	r17, 0x10	; 16
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <strtod+0x178>
    1df6:	eb 32       	cpi	r30, 0x2B	; 43
    1df8:	29 f0       	breq	.+10     	; 0x1e04 <strtod+0x176>
    1dfa:	c6 01       	movw	r24, r12
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	21 e0       	ldi	r18, 0x01	; 1
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	08 c0       	rjmp	.+16     	; 0x1e14 <strtod+0x186>
    1e04:	d6 01       	movw	r26, r12
    1e06:	11 96       	adiw	r26, 0x01	; 1
    1e08:	ec 91       	ld	r30, X
    1e0a:	11 97       	sbiw	r26, 0x01	; 1
    1e0c:	c6 01       	movw	r24, r12
    1e0e:	02 96       	adiw	r24, 0x02	; 2
    1e10:	22 e0       	ldi	r18, 0x02	; 2
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	e0 53       	subi	r30, 0x30	; 48
    1e16:	ea 30       	cpi	r30, 0x0A	; 10
    1e18:	20 f0       	brcs	.+8      	; 0x1e22 <strtod+0x194>
    1e1a:	6c 01       	movw	r12, r24
    1e1c:	c2 1a       	sub	r12, r18
    1e1e:	d3 0a       	sbc	r13, r19
    1e20:	1e c0       	rjmp	.+60     	; 0x1e5e <strtod+0x1d0>
    1e22:	dc 01       	movw	r26, r24
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	fc e0       	ldi	r31, 0x0C	; 12
    1e2a:	20 38       	cpi	r18, 0x80	; 128
    1e2c:	3f 07       	cpc	r19, r31
    1e2e:	5c f4       	brge	.+22     	; 0x1e46 <strtod+0x1b8>
    1e30:	c9 01       	movw	r24, r18
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	28 0f       	add	r18, r24
    1e3c:	39 1f       	adc	r19, r25
    1e3e:	22 0f       	add	r18, r18
    1e40:	33 1f       	adc	r19, r19
    1e42:	2e 0f       	add	r18, r30
    1e44:	31 1d       	adc	r19, r1
    1e46:	ed 91       	ld	r30, X+
    1e48:	e0 53       	subi	r30, 0x30	; 48
    1e4a:	6d 01       	movw	r12, r26
    1e4c:	ea 30       	cpi	r30, 0x0A	; 10
    1e4e:	60 f3       	brcs	.-40     	; 0x1e28 <strtod+0x19a>
    1e50:	14 ff       	sbrs	r17, 4
    1e52:	03 c0       	rjmp	.+6      	; 0x1e5a <strtod+0x1cc>
    1e54:	30 95       	com	r19
    1e56:	21 95       	neg	r18
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	82 0e       	add	r8, r18
    1e5c:	93 1e       	adc	r9, r19
    1e5e:	c1 2f       	mov	r28, r17
    1e60:	d0 e0       	ldi	r29, 0x00	; 0
    1e62:	11 ff       	sbrs	r17, 1
    1e64:	08 c0       	rjmp	.+16     	; 0x1e76 <strtod+0x1e8>
    1e66:	a1 14       	cp	r10, r1
    1e68:	b1 04       	cpc	r11, r1
    1e6a:	29 f0       	breq	.+10     	; 0x1e76 <strtod+0x1e8>
    1e6c:	c6 01       	movw	r24, r12
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	d5 01       	movw	r26, r10
    1e72:	8d 93       	st	X+, r24
    1e74:	9c 93       	st	X, r25
    1e76:	cb 01       	movw	r24, r22
    1e78:	ba 01       	movw	r22, r20
    1e7a:	0e 94 44 09 	call	0x1288	; 0x1288 <__floatunsisf>
    1e7e:	6b 01       	movw	r12, r22
    1e80:	7c 01       	movw	r14, r24
    1e82:	ce 01       	movw	r24, r28
    1e84:	83 70       	andi	r24, 0x03	; 3
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <strtod+0x208>
    1e8e:	f7 fa       	bst	r15, 7
    1e90:	f0 94       	com	r15
    1e92:	f7 f8       	bld	r15, 7
    1e94:	f0 94       	com	r15
    1e96:	c7 01       	movw	r24, r14
    1e98:	b6 01       	movw	r22, r12
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	a9 01       	movw	r20, r18
    1ea0:	0e 94 40 09 	call	0x1280	; 0x1280 <__cmpsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <strtod+0x21c>
    1ea8:	44 c0       	rjmp	.+136    	; 0x1f32 <strtod+0x2a4>
    1eaa:	97 fe       	sbrs	r9, 7
    1eac:	07 c0       	rjmp	.+14     	; 0x1ebc <strtod+0x22e>
    1eae:	90 94       	com	r9
    1eb0:	81 94       	neg	r8
    1eb2:	91 08       	sbc	r9, r1
    1eb4:	93 94       	inc	r9
    1eb6:	c7 ea       	ldi	r28, 0xA7	; 167
    1eb8:	d0 e0       	ldi	r29, 0x00	; 0
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <strtod+0x232>
    1ebc:	cf e8       	ldi	r28, 0x8F	; 143
    1ebe:	d0 e0       	ldi	r29, 0x00	; 0
    1ec0:	98 ee       	ldi	r25, 0xE8	; 232
    1ec2:	69 2e       	mov	r6, r25
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	79 2e       	mov	r7, r25
    1ec8:	6c 0e       	add	r6, r28
    1eca:	7d 1e       	adc	r7, r29
    1ecc:	20 e2       	ldi	r18, 0x20	; 32
    1ece:	a2 2e       	mov	r10, r18
    1ed0:	b1 2c       	mov	r11, r1
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <strtod+0x264>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	05 91       	lpm	r16, Z+
    1ed8:	15 91       	lpm	r17, Z+
    1eda:	25 91       	lpm	r18, Z+
    1edc:	34 91       	lpm	r19, Z
    1ede:	c7 01       	movw	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	a9 01       	movw	r20, r18
    1ee4:	98 01       	movw	r18, r16
    1ee6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__mulsf3>
    1eea:	6b 01       	movw	r12, r22
    1eec:	7c 01       	movw	r14, r24
    1eee:	8a 18       	sub	r8, r10
    1ef0:	9b 08       	sbc	r9, r11
    1ef2:	8a 14       	cp	r8, r10
    1ef4:	9b 04       	cpc	r9, r11
    1ef6:	74 f7       	brge	.-36     	; 0x1ed4 <strtod+0x246>
    1ef8:	24 97       	sbiw	r28, 0x04	; 4
    1efa:	b5 94       	asr	r11
    1efc:	a7 94       	ror	r10
    1efe:	c6 15       	cp	r28, r6
    1f00:	d7 05       	cpc	r29, r7
    1f02:	b9 f7       	brne	.-18     	; 0x1ef2 <strtod+0x264>
    1f04:	c6 01       	movw	r24, r12
    1f06:	d7 01       	movw	r26, r14
    1f08:	2a 2f       	mov	r18, r26
    1f0a:	22 0f       	add	r18, r18
    1f0c:	2b 2f       	mov	r18, r27
    1f0e:	22 1f       	adc	r18, r18
    1f10:	2f 3f       	cpi	r18, 0xFF	; 255
    1f12:	49 f0       	breq	.+18     	; 0x1f26 <strtod+0x298>
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	a9 01       	movw	r20, r18
    1f1e:	0e 94 40 09 	call	0x1280	; 0x1280 <__cmpsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	31 f4       	brne	.+12     	; 0x1f32 <strtod+0x2a4>
    1f26:	82 e2       	ldi	r24, 0x22	; 34
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	90 93 1f 08 	sts	0x081F, r25
    1f2e:	80 93 1e 08 	sts	0x081E, r24
    1f32:	3c 2d       	mov	r19, r12
    1f34:	2d 2d       	mov	r18, r13
    1f36:	9e 2d       	mov	r25, r14
    1f38:	8f 2d       	mov	r24, r15
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <strtod+0x2ba>
    1f3c:	8f ef       	ldi	r24, 0xFF	; 255
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <strtod+0x2ba>
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	90 ec       	ldi	r25, 0xC0	; 192
    1f46:	8f e7       	ldi	r24, 0x7F	; 127
    1f48:	b9 01       	movw	r22, r18
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	87 2f       	mov	r24, r23
    1f4e:	92 2f       	mov	r25, r18
    1f50:	a5 2f       	mov	r26, r21
    1f52:	b4 2f       	mov	r27, r20
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	ee e0       	ldi	r30, 0x0E	; 14
    1f5e:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__epilogue_restores__+0x8>

00001f62 <abort>:
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	f8 94       	cli
    1f68:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <_exit>

00001f6c <__ftoa_engine>:
    1f6c:	28 30       	cpi	r18, 0x08	; 8
    1f6e:	08 f0       	brcs	.+2      	; 0x1f72 <__ftoa_engine+0x6>
    1f70:	27 e0       	ldi	r18, 0x07	; 7
    1f72:	33 27       	eor	r19, r19
    1f74:	da 01       	movw	r26, r20
    1f76:	99 0f       	add	r25, r25
    1f78:	31 1d       	adc	r19, r1
    1f7a:	87 fd       	sbrc	r24, 7
    1f7c:	91 60       	ori	r25, 0x01	; 1
    1f7e:	00 96       	adiw	r24, 0x00	; 0
    1f80:	61 05       	cpc	r22, r1
    1f82:	71 05       	cpc	r23, r1
    1f84:	39 f4       	brne	.+14     	; 0x1f94 <__ftoa_engine+0x28>
    1f86:	32 60       	ori	r19, 0x02	; 2
    1f88:	2e 5f       	subi	r18, 0xFE	; 254
    1f8a:	3d 93       	st	X+, r19
    1f8c:	30 e3       	ldi	r19, 0x30	; 48
    1f8e:	2a 95       	dec	r18
    1f90:	e1 f7       	brne	.-8      	; 0x1f8a <__ftoa_engine+0x1e>
    1f92:	08 95       	ret
    1f94:	9f 3f       	cpi	r25, 0xFF	; 255
    1f96:	30 f0       	brcs	.+12     	; 0x1fa4 <__ftoa_engine+0x38>
    1f98:	80 38       	cpi	r24, 0x80	; 128
    1f9a:	71 05       	cpc	r23, r1
    1f9c:	61 05       	cpc	r22, r1
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <__ftoa_engine+0x36>
    1fa0:	3c 5f       	subi	r19, 0xFC	; 252
    1fa2:	3c 5f       	subi	r19, 0xFC	; 252
    1fa4:	3d 93       	st	X+, r19
    1fa6:	91 30       	cpi	r25, 0x01	; 1
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <__ftoa_engine+0x40>
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	91 1d       	adc	r25, r1
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	1f 93       	push	r17
    1fb4:	0f 93       	push	r16
    1fb6:	ff 92       	push	r15
    1fb8:	ef 92       	push	r14
    1fba:	19 2f       	mov	r17, r25
    1fbc:	98 7f       	andi	r25, 0xF8	; 248
    1fbe:	96 95       	lsr	r25
    1fc0:	e9 2f       	mov	r30, r25
    1fc2:	96 95       	lsr	r25
    1fc4:	96 95       	lsr	r25
    1fc6:	e9 0f       	add	r30, r25
    1fc8:	ff 27       	eor	r31, r31
    1fca:	eb 5f       	subi	r30, 0xFB	; 251
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	99 27       	eor	r25, r25
    1fd0:	33 27       	eor	r19, r19
    1fd2:	ee 24       	eor	r14, r14
    1fd4:	ff 24       	eor	r15, r15
    1fd6:	a7 01       	movw	r20, r14
    1fd8:	e7 01       	movw	r28, r14
    1fda:	05 90       	lpm	r0, Z+
    1fdc:	08 94       	sec
    1fde:	07 94       	ror	r0
    1fe0:	28 f4       	brcc	.+10     	; 0x1fec <__ftoa_engine+0x80>
    1fe2:	36 0f       	add	r19, r22
    1fe4:	e7 1e       	adc	r14, r23
    1fe6:	f8 1e       	adc	r15, r24
    1fe8:	49 1f       	adc	r20, r25
    1fea:	51 1d       	adc	r21, r1
    1fec:	66 0f       	add	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	06 94       	lsr	r0
    1ff6:	a1 f7       	brne	.-24     	; 0x1fe0 <__ftoa_engine+0x74>
    1ff8:	05 90       	lpm	r0, Z+
    1ffa:	07 94       	ror	r0
    1ffc:	28 f4       	brcc	.+10     	; 0x2008 <__ftoa_engine+0x9c>
    1ffe:	e7 0e       	add	r14, r23
    2000:	f8 1e       	adc	r15, r24
    2002:	49 1f       	adc	r20, r25
    2004:	56 1f       	adc	r21, r22
    2006:	c1 1d       	adc	r28, r1
    2008:	77 0f       	add	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	66 1f       	adc	r22, r22
    2010:	06 94       	lsr	r0
    2012:	a1 f7       	brne	.-24     	; 0x1ffc <__ftoa_engine+0x90>
    2014:	05 90       	lpm	r0, Z+
    2016:	07 94       	ror	r0
    2018:	28 f4       	brcc	.+10     	; 0x2024 <__ftoa_engine+0xb8>
    201a:	f8 0e       	add	r15, r24
    201c:	49 1f       	adc	r20, r25
    201e:	56 1f       	adc	r21, r22
    2020:	c7 1f       	adc	r28, r23
    2022:	d1 1d       	adc	r29, r1
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	66 1f       	adc	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	06 94       	lsr	r0
    202e:	a1 f7       	brne	.-24     	; 0x2018 <__ftoa_engine+0xac>
    2030:	05 90       	lpm	r0, Z+
    2032:	07 94       	ror	r0
    2034:	20 f4       	brcc	.+8      	; 0x203e <__ftoa_engine+0xd2>
    2036:	49 0f       	add	r20, r25
    2038:	56 1f       	adc	r21, r22
    203a:	c7 1f       	adc	r28, r23
    203c:	d8 1f       	adc	r29, r24
    203e:	99 0f       	add	r25, r25
    2040:	66 1f       	adc	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	06 94       	lsr	r0
    2048:	a9 f7       	brne	.-22     	; 0x2034 <__ftoa_engine+0xc8>
    204a:	84 91       	lpm	r24, Z
    204c:	10 95       	com	r17
    204e:	17 70       	andi	r17, 0x07	; 7
    2050:	41 f0       	breq	.+16     	; 0x2062 <__ftoa_engine+0xf6>
    2052:	d6 95       	lsr	r29
    2054:	c7 95       	ror	r28
    2056:	57 95       	ror	r21
    2058:	47 95       	ror	r20
    205a:	f7 94       	ror	r15
    205c:	e7 94       	ror	r14
    205e:	1a 95       	dec	r17
    2060:	c1 f7       	brne	.-16     	; 0x2052 <__ftoa_engine+0xe6>
    2062:	eb ea       	ldi	r30, 0xAB	; 171
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	68 94       	set
    2068:	15 90       	lpm	r1, Z+
    206a:	15 91       	lpm	r17, Z+
    206c:	35 91       	lpm	r19, Z+
    206e:	65 91       	lpm	r22, Z+
    2070:	95 91       	lpm	r25, Z+
    2072:	05 90       	lpm	r0, Z+
    2074:	7f e2       	ldi	r23, 0x2F	; 47
    2076:	73 95       	inc	r23
    2078:	e1 18       	sub	r14, r1
    207a:	f1 0a       	sbc	r15, r17
    207c:	43 0b       	sbc	r20, r19
    207e:	56 0b       	sbc	r21, r22
    2080:	c9 0b       	sbc	r28, r25
    2082:	d0 09       	sbc	r29, r0
    2084:	c0 f7       	brcc	.-16     	; 0x2076 <__ftoa_engine+0x10a>
    2086:	e1 0c       	add	r14, r1
    2088:	f1 1e       	adc	r15, r17
    208a:	43 1f       	adc	r20, r19
    208c:	56 1f       	adc	r21, r22
    208e:	c9 1f       	adc	r28, r25
    2090:	d0 1d       	adc	r29, r0
    2092:	7e f4       	brtc	.+30     	; 0x20b2 <__ftoa_engine+0x146>
    2094:	70 33       	cpi	r23, 0x30	; 48
    2096:	11 f4       	brne	.+4      	; 0x209c <__ftoa_engine+0x130>
    2098:	8a 95       	dec	r24
    209a:	e6 cf       	rjmp	.-52     	; 0x2068 <__ftoa_engine+0xfc>
    209c:	e8 94       	clt
    209e:	01 50       	subi	r16, 0x01	; 1
    20a0:	30 f0       	brcs	.+12     	; 0x20ae <__ftoa_engine+0x142>
    20a2:	08 0f       	add	r16, r24
    20a4:	0a f4       	brpl	.+2      	; 0x20a8 <__ftoa_engine+0x13c>
    20a6:	00 27       	eor	r16, r16
    20a8:	02 17       	cp	r16, r18
    20aa:	08 f4       	brcc	.+2      	; 0x20ae <__ftoa_engine+0x142>
    20ac:	20 2f       	mov	r18, r16
    20ae:	23 95       	inc	r18
    20b0:	02 2f       	mov	r16, r18
    20b2:	7a 33       	cpi	r23, 0x3A	; 58
    20b4:	28 f0       	brcs	.+10     	; 0x20c0 <__ftoa_engine+0x154>
    20b6:	79 e3       	ldi	r23, 0x39	; 57
    20b8:	7d 93       	st	X+, r23
    20ba:	2a 95       	dec	r18
    20bc:	e9 f7       	brne	.-6      	; 0x20b8 <__ftoa_engine+0x14c>
    20be:	10 c0       	rjmp	.+32     	; 0x20e0 <__ftoa_engine+0x174>
    20c0:	7d 93       	st	X+, r23
    20c2:	2a 95       	dec	r18
    20c4:	89 f6       	brne	.-94     	; 0x2068 <__ftoa_engine+0xfc>
    20c6:	06 94       	lsr	r0
    20c8:	97 95       	ror	r25
    20ca:	67 95       	ror	r22
    20cc:	37 95       	ror	r19
    20ce:	17 95       	ror	r17
    20d0:	17 94       	ror	r1
    20d2:	e1 18       	sub	r14, r1
    20d4:	f1 0a       	sbc	r15, r17
    20d6:	43 0b       	sbc	r20, r19
    20d8:	56 0b       	sbc	r21, r22
    20da:	c9 0b       	sbc	r28, r25
    20dc:	d0 09       	sbc	r29, r0
    20de:	98 f0       	brcs	.+38     	; 0x2106 <__ftoa_engine+0x19a>
    20e0:	23 95       	inc	r18
    20e2:	7e 91       	ld	r23, -X
    20e4:	73 95       	inc	r23
    20e6:	7a 33       	cpi	r23, 0x3A	; 58
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <__ftoa_engine+0x180>
    20ea:	70 e3       	ldi	r23, 0x30	; 48
    20ec:	7c 93       	st	X, r23
    20ee:	20 13       	cpse	r18, r16
    20f0:	b8 f7       	brcc	.-18     	; 0x20e0 <__ftoa_engine+0x174>
    20f2:	7e 91       	ld	r23, -X
    20f4:	70 61       	ori	r23, 0x10	; 16
    20f6:	7d 93       	st	X+, r23
    20f8:	30 f0       	brcs	.+12     	; 0x2106 <__ftoa_engine+0x19a>
    20fa:	83 95       	inc	r24
    20fc:	71 e3       	ldi	r23, 0x31	; 49
    20fe:	7d 93       	st	X+, r23
    2100:	70 e3       	ldi	r23, 0x30	; 48
    2102:	2a 95       	dec	r18
    2104:	e1 f7       	brne	.-8      	; 0x20fe <__ftoa_engine+0x192>
    2106:	11 24       	eor	r1, r1
    2108:	ef 90       	pop	r14
    210a:	ff 90       	pop	r15
    210c:	0f 91       	pop	r16
    210e:	1f 91       	pop	r17
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	99 27       	eor	r25, r25
    2116:	87 fd       	sbrc	r24, 7
    2118:	90 95       	com	r25
    211a:	08 95       	ret

0000211c <isspace>:
    211c:	91 11       	cpse	r25, r1
    211e:	3d c1       	rjmp	.+634    	; 0x239a <__ctype_isfalse>
    2120:	80 32       	cpi	r24, 0x20	; 32
    2122:	19 f0       	breq	.+6      	; 0x212a <isspace+0xe>
    2124:	89 50       	subi	r24, 0x09	; 9
    2126:	85 50       	subi	r24, 0x05	; 5
    2128:	d0 f7       	brcc	.-12     	; 0x211e <isspace+0x2>
    212a:	08 95       	ret

0000212c <strncasecmp_P>:
    212c:	fb 01       	movw	r30, r22
    212e:	dc 01       	movw	r26, r24
    2130:	41 50       	subi	r20, 0x01	; 1
    2132:	50 40       	sbci	r21, 0x00	; 0
    2134:	88 f0       	brcs	.+34     	; 0x2158 <strncasecmp_P+0x2c>
    2136:	8d 91       	ld	r24, X+
    2138:	81 34       	cpi	r24, 0x41	; 65
    213a:	1c f0       	brlt	.+6      	; 0x2142 <strncasecmp_P+0x16>
    213c:	8b 35       	cpi	r24, 0x5B	; 91
    213e:	0c f4       	brge	.+2      	; 0x2142 <strncasecmp_P+0x16>
    2140:	80 5e       	subi	r24, 0xE0	; 224
    2142:	65 91       	lpm	r22, Z+
    2144:	61 34       	cpi	r22, 0x41	; 65
    2146:	1c f0       	brlt	.+6      	; 0x214e <strncasecmp_P+0x22>
    2148:	6b 35       	cpi	r22, 0x5B	; 91
    214a:	0c f4       	brge	.+2      	; 0x214e <strncasecmp_P+0x22>
    214c:	60 5e       	subi	r22, 0xE0	; 224
    214e:	86 1b       	sub	r24, r22
    2150:	61 11       	cpse	r22, r1
    2152:	71 f3       	breq	.-36     	; 0x2130 <strncasecmp_P+0x4>
    2154:	99 0b       	sbc	r25, r25
    2156:	08 95       	ret
    2158:	88 1b       	sub	r24, r24
    215a:	fc cf       	rjmp	.-8      	; 0x2154 <strncasecmp_P+0x28>

0000215c <strnlen_P>:
    215c:	fc 01       	movw	r30, r24
    215e:	05 90       	lpm	r0, Z+
    2160:	61 50       	subi	r22, 0x01	; 1
    2162:	70 40       	sbci	r23, 0x00	; 0
    2164:	01 10       	cpse	r0, r1
    2166:	d8 f7       	brcc	.-10     	; 0x215e <strnlen_P+0x2>
    2168:	80 95       	com	r24
    216a:	90 95       	com	r25
    216c:	8e 0f       	add	r24, r30
    216e:	9f 1f       	adc	r25, r31
    2170:	08 95       	ret

00002172 <strchr>:
    2172:	fc 01       	movw	r30, r24
    2174:	81 91       	ld	r24, Z+
    2176:	86 17       	cp	r24, r22
    2178:	21 f0       	breq	.+8      	; 0x2182 <strchr+0x10>
    217a:	88 23       	and	r24, r24
    217c:	d9 f7       	brne	.-10     	; 0x2174 <strchr+0x2>
    217e:	99 27       	eor	r25, r25
    2180:	08 95       	ret
    2182:	31 97       	sbiw	r30, 0x01	; 1
    2184:	cf 01       	movw	r24, r30
    2186:	08 95       	ret

00002188 <strcmp>:
    2188:	fb 01       	movw	r30, r22
    218a:	dc 01       	movw	r26, r24
    218c:	8d 91       	ld	r24, X+
    218e:	01 90       	ld	r0, Z+
    2190:	80 19       	sub	r24, r0
    2192:	01 10       	cpse	r0, r1
    2194:	d9 f3       	breq	.-10     	; 0x218c <strcmp+0x4>
    2196:	99 0b       	sbc	r25, r25
    2198:	08 95       	ret

0000219a <strncmp>:
    219a:	fb 01       	movw	r30, r22
    219c:	dc 01       	movw	r26, r24
    219e:	41 50       	subi	r20, 0x01	; 1
    21a0:	50 40       	sbci	r21, 0x00	; 0
    21a2:	30 f0       	brcs	.+12     	; 0x21b0 <strncmp+0x16>
    21a4:	8d 91       	ld	r24, X+
    21a6:	01 90       	ld	r0, Z+
    21a8:	80 19       	sub	r24, r0
    21aa:	19 f4       	brne	.+6      	; 0x21b2 <strncmp+0x18>
    21ac:	00 20       	and	r0, r0
    21ae:	b9 f7       	brne	.-18     	; 0x219e <strncmp+0x4>
    21b0:	88 1b       	sub	r24, r24
    21b2:	99 0b       	sbc	r25, r25
    21b4:	08 95       	ret

000021b6 <strnlen>:
    21b6:	fc 01       	movw	r30, r24
    21b8:	61 50       	subi	r22, 0x01	; 1
    21ba:	70 40       	sbci	r23, 0x00	; 0
    21bc:	01 90       	ld	r0, Z+
    21be:	01 10       	cpse	r0, r1
    21c0:	d8 f7       	brcc	.-10     	; 0x21b8 <strnlen+0x2>
    21c2:	80 95       	com	r24
    21c4:	90 95       	com	r25
    21c6:	8e 0f       	add	r24, r30
    21c8:	9f 1f       	adc	r25, r31
    21ca:	08 95       	ret

000021cc <fputc>:
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	8c 01       	movw	r16, r24
    21d6:	eb 01       	movw	r28, r22
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	81 ff       	sbrs	r24, 1
    21dc:	1b c0       	rjmp	.+54     	; 0x2214 <fputc+0x48>
    21de:	82 ff       	sbrs	r24, 2
    21e0:	0d c0       	rjmp	.+26     	; 0x21fc <fputc+0x30>
    21e2:	2e 81       	ldd	r18, Y+6	; 0x06
    21e4:	3f 81       	ldd	r19, Y+7	; 0x07
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	28 17       	cp	r18, r24
    21ec:	39 07       	cpc	r19, r25
    21ee:	64 f4       	brge	.+24     	; 0x2208 <fputc+0x3c>
    21f0:	e8 81       	ld	r30, Y
    21f2:	f9 81       	ldd	r31, Y+1	; 0x01
    21f4:	01 93       	st	Z+, r16
    21f6:	f9 83       	std	Y+1, r31	; 0x01
    21f8:	e8 83       	st	Y, r30
    21fa:	06 c0       	rjmp	.+12     	; 0x2208 <fputc+0x3c>
    21fc:	e8 85       	ldd	r30, Y+8	; 0x08
    21fe:	f9 85       	ldd	r31, Y+9	; 0x09
    2200:	80 2f       	mov	r24, r16
    2202:	09 95       	icall
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	31 f4       	brne	.+12     	; 0x2214 <fputc+0x48>
    2208:	8e 81       	ldd	r24, Y+6	; 0x06
    220a:	9f 81       	ldd	r25, Y+7	; 0x07
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	9f 83       	std	Y+7, r25	; 0x07
    2210:	8e 83       	std	Y+6, r24	; 0x06
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <fputc+0x4c>
    2214:	0f ef       	ldi	r16, 0xFF	; 255
    2216:	1f ef       	ldi	r17, 0xFF	; 255
    2218:	c8 01       	movw	r24, r16
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	08 95       	ret

00002224 <printf>:
    2224:	a0 e0       	ldi	r26, 0x00	; 0
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e1       	ldi	r30, 0x18	; 24
    222a:	f1 e1       	ldi	r31, 0x11	; 17
    222c:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__prologue_saves__+0x20>
    2230:	fe 01       	movw	r30, r28
    2232:	35 96       	adiw	r30, 0x05	; 5
    2234:	61 91       	ld	r22, Z+
    2236:	71 91       	ld	r23, Z+
    2238:	80 91 1a 08 	lds	r24, 0x081A
    223c:	90 91 1b 08 	lds	r25, 0x081B
    2240:	af 01       	movw	r20, r30
    2242:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <vfprintf>
    2246:	20 96       	adiw	r28, 0x00	; 0
    2248:	e2 e0       	ldi	r30, 0x02	; 2
    224a:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__epilogue_restores__+0x20>

0000224e <puts>:
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	8c 01       	movw	r16, r24
    2258:	e0 91 1a 08 	lds	r30, 0x081A
    225c:	f0 91 1b 08 	lds	r31, 0x081B
    2260:	83 81       	ldd	r24, Z+3	; 0x03
    2262:	81 ff       	sbrs	r24, 1
    2264:	1a c0       	rjmp	.+52     	; 0x229a <puts+0x4c>
    2266:	c0 e0       	ldi	r28, 0x00	; 0
    2268:	d0 e0       	ldi	r29, 0x00	; 0
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <puts+0x28>
    226c:	09 95       	icall
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	11 f0       	breq	.+4      	; 0x2276 <puts+0x28>
    2272:	cf ef       	ldi	r28, 0xFF	; 255
    2274:	df ef       	ldi	r29, 0xFF	; 255
    2276:	f8 01       	movw	r30, r16
    2278:	81 91       	ld	r24, Z+
    227a:	8f 01       	movw	r16, r30
    227c:	60 91 1a 08 	lds	r22, 0x081A
    2280:	70 91 1b 08 	lds	r23, 0x081B
    2284:	db 01       	movw	r26, r22
    2286:	18 96       	adiw	r26, 0x08	; 8
    2288:	ed 91       	ld	r30, X+
    228a:	fc 91       	ld	r31, X
    228c:	19 97       	sbiw	r26, 0x09	; 9
    228e:	88 23       	and	r24, r24
    2290:	69 f7       	brne	.-38     	; 0x226c <puts+0x1e>
    2292:	8a e0       	ldi	r24, 0x0A	; 10
    2294:	09 95       	icall
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	11 f0       	breq	.+4      	; 0x229e <puts+0x50>
    229a:	cf ef       	ldi	r28, 0xFF	; 255
    229c:	df ef       	ldi	r29, 0xFF	; 255
    229e:	ce 01       	movw	r24, r28
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	08 95       	ret

000022aa <__ultoa_invert>:
    22aa:	fa 01       	movw	r30, r20
    22ac:	aa 27       	eor	r26, r26
    22ae:	28 30       	cpi	r18, 0x08	; 8
    22b0:	51 f1       	breq	.+84     	; 0x2306 <__ultoa_invert+0x5c>
    22b2:	20 31       	cpi	r18, 0x10	; 16
    22b4:	81 f1       	breq	.+96     	; 0x2316 <__ultoa_invert+0x6c>
    22b6:	e8 94       	clt
    22b8:	6f 93       	push	r22
    22ba:	6e 7f       	andi	r22, 0xFE	; 254
    22bc:	6e 5f       	subi	r22, 0xFE	; 254
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	af 4f       	sbci	r26, 0xFF	; 255
    22c6:	b1 e0       	ldi	r27, 0x01	; 1
    22c8:	3e d0       	rcall	.+124    	; 0x2346 <__ultoa_invert+0x9c>
    22ca:	b4 e0       	ldi	r27, 0x04	; 4
    22cc:	3c d0       	rcall	.+120    	; 0x2346 <__ultoa_invert+0x9c>
    22ce:	67 0f       	add	r22, r23
    22d0:	78 1f       	adc	r23, r24
    22d2:	89 1f       	adc	r24, r25
    22d4:	9a 1f       	adc	r25, r26
    22d6:	a1 1d       	adc	r26, r1
    22d8:	68 0f       	add	r22, r24
    22da:	79 1f       	adc	r23, r25
    22dc:	8a 1f       	adc	r24, r26
    22de:	91 1d       	adc	r25, r1
    22e0:	a1 1d       	adc	r26, r1
    22e2:	6a 0f       	add	r22, r26
    22e4:	71 1d       	adc	r23, r1
    22e6:	81 1d       	adc	r24, r1
    22e8:	91 1d       	adc	r25, r1
    22ea:	a1 1d       	adc	r26, r1
    22ec:	20 d0       	rcall	.+64     	; 0x232e <__ultoa_invert+0x84>
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <__ultoa_invert+0x48>
    22f0:	68 94       	set
    22f2:	3f 91       	pop	r19
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	26 9f       	mul	r18, r22
    22f8:	11 24       	eor	r1, r1
    22fa:	30 19       	sub	r19, r0
    22fc:	30 5d       	subi	r19, 0xD0	; 208
    22fe:	31 93       	st	Z+, r19
    2300:	de f6       	brtc	.-74     	; 0x22b8 <__ultoa_invert+0xe>
    2302:	cf 01       	movw	r24, r30
    2304:	08 95       	ret
    2306:	46 2f       	mov	r20, r22
    2308:	47 70       	andi	r20, 0x07	; 7
    230a:	40 5d       	subi	r20, 0xD0	; 208
    230c:	41 93       	st	Z+, r20
    230e:	b3 e0       	ldi	r27, 0x03	; 3
    2310:	0f d0       	rcall	.+30     	; 0x2330 <__ultoa_invert+0x86>
    2312:	c9 f7       	brne	.-14     	; 0x2306 <__ultoa_invert+0x5c>
    2314:	f6 cf       	rjmp	.-20     	; 0x2302 <__ultoa_invert+0x58>
    2316:	46 2f       	mov	r20, r22
    2318:	4f 70       	andi	r20, 0x0F	; 15
    231a:	40 5d       	subi	r20, 0xD0	; 208
    231c:	4a 33       	cpi	r20, 0x3A	; 58
    231e:	18 f0       	brcs	.+6      	; 0x2326 <__ultoa_invert+0x7c>
    2320:	49 5d       	subi	r20, 0xD9	; 217
    2322:	31 fd       	sbrc	r19, 1
    2324:	40 52       	subi	r20, 0x20	; 32
    2326:	41 93       	st	Z+, r20
    2328:	02 d0       	rcall	.+4      	; 0x232e <__ultoa_invert+0x84>
    232a:	a9 f7       	brne	.-22     	; 0x2316 <__ultoa_invert+0x6c>
    232c:	ea cf       	rjmp	.-44     	; 0x2302 <__ultoa_invert+0x58>
    232e:	b4 e0       	ldi	r27, 0x04	; 4
    2330:	a6 95       	lsr	r26
    2332:	97 95       	ror	r25
    2334:	87 95       	ror	r24
    2336:	77 95       	ror	r23
    2338:	67 95       	ror	r22
    233a:	ba 95       	dec	r27
    233c:	c9 f7       	brne	.-14     	; 0x2330 <__ultoa_invert+0x86>
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	61 05       	cpc	r22, r1
    2342:	71 05       	cpc	r23, r1
    2344:	08 95       	ret
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	0a 2e       	mov	r0, r26
    234c:	06 94       	lsr	r0
    234e:	57 95       	ror	r21
    2350:	47 95       	ror	r20
    2352:	37 95       	ror	r19
    2354:	27 95       	ror	r18
    2356:	ba 95       	dec	r27
    2358:	c9 f7       	brne	.-14     	; 0x234c <__ultoa_invert+0xa2>
    235a:	62 0f       	add	r22, r18
    235c:	73 1f       	adc	r23, r19
    235e:	84 1f       	adc	r24, r20
    2360:	95 1f       	adc	r25, r21
    2362:	a0 1d       	adc	r26, r0
    2364:	08 95       	ret

00002366 <__eerd_byte_m328p>:
    2366:	f9 99       	sbic	0x1f, 1	; 31
    2368:	fe cf       	rjmp	.-4      	; 0x2366 <__eerd_byte_m328p>
    236a:	92 bd       	out	0x22, r25	; 34
    236c:	81 bd       	out	0x21, r24	; 33
    236e:	f8 9a       	sbi	0x1f, 0	; 31
    2370:	99 27       	eor	r25, r25
    2372:	80 b5       	in	r24, 0x20	; 32
    2374:	08 95       	ret

00002376 <__eeupd_byte_m328p>:
    2376:	26 2f       	mov	r18, r22

00002378 <__eeupd_r18_m328p>:
    2378:	f9 99       	sbic	0x1f, 1	; 31
    237a:	fe cf       	rjmp	.-4      	; 0x2378 <__eeupd_r18_m328p>
    237c:	92 bd       	out	0x22, r25	; 34
    237e:	81 bd       	out	0x21, r24	; 33
    2380:	f8 9a       	sbi	0x1f, 0	; 31
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	00 b4       	in	r0, 0x20	; 32
    2386:	02 16       	cp	r0, r18
    2388:	39 f0       	breq	.+14     	; 0x2398 <__eeupd_r18_m328p+0x20>
    238a:	1f ba       	out	0x1f, r1	; 31
    238c:	20 bd       	out	0x20, r18	; 32
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	fa 9a       	sbi	0x1f, 2	; 31
    2394:	f9 9a       	sbi	0x1f, 1	; 31
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	08 95       	ret

0000239a <__ctype_isfalse>:
    239a:	99 27       	eor	r25, r25
    239c:	88 27       	eor	r24, r24

0000239e <__ctype_istrue>:
    239e:	08 95       	ret

000023a0 <_exit>:
    23a0:	f8 94       	cli

000023a2 <__stop_program>:
    23a2:	ff cf       	rjmp	.-2      	; 0x23a2 <__stop_program>
