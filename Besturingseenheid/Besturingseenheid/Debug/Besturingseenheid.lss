
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000568  00800100  00001d0e  00001da2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800668  00800668  0000230a  2**0
                  ALLOC
  3 .stab         00002f40  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000900  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00005b50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b70  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a69  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001242  00000000  00000000  00008309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  0000954c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001032  00000000  00000000  00009f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000af54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_14>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	16 e0       	ldi	r17, 0x06	; 6
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ee e0       	ldi	r30, 0x0E	; 14
     17e:	fd e1       	ldi	r31, 0x1D	; 29
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 36       	cpi	r26, 0x68	; 104
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	16 e0       	ldi	r17, 0x06	; 6
     18e:	a8 e6       	ldi	r26, 0x68	; 104
     190:	b6 e0       	ldi	r27, 0x06	; 6
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	aa 3c       	cpi	r26, 0xCA	; 202
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 a1 01 	call	0x342	; 0x342 <main>
     1a0:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	80 93 7e 00 	sts	0x007E, r24
	
}
     1b4:	08 95       	ret

000001b6 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1b6:	ea e7       	ldi	r30, 0x7A	; 122
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 64       	ori	r24, 0x40	; 64
     1be:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1c0:	80 81       	ld	r24, Z
     1c2:	86 fd       	sbrc	r24, 6
     1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     1c6:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     1ca:	08 95       	ret

000001cc <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     1cc:	85 e4       	ldi	r24, 0x45	; 69
     1ce:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1dc:	80 81       	ld	r24, Z
     1de:	86 fd       	sbrc	r24, 6
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <get_temp_adc+0x10>
	return ADC;
     1e2:	80 91 78 00 	lds	r24, 0x0078
     1e6:	90 91 79 00 	lds	r25, 0x0079
}
     1ea:	08 95       	ret

000001ec <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     1ec:	82 e6       	ldi	r24, 0x62	; 98
     1ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
     206:	08 95       	ret

00000208 <init_ports>:
volatile int index = 0;
volatile int extraTime = 0;
volatile int extraTime1 = 0;

void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     208:	87 ef       	ldi	r24, 0xF7	; 247
     20a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	84 b9       	out	0x04, r24	; 4
}
     210:	08 95       	ret

00000212 <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     21c:	10 92 80 00 	sts	0x0080, r1
}
     220:	08 95       	ret

00000222 <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     222:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     224:	8f e3       	ldi	r24, 0x3F	; 63
     226:	9c e9       	ldi	r25, 0x9C	; 156
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <getDistance+0x6>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <getDistance+0xc>
     22e:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     230:	28 98       	cbi	0x05, 0	; 5
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	91 ee       	ldi	r25, 0xE1	; 225
     236:	a4 e0       	ldi	r26, 0x04	; 4
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	a0 40       	sbci	r26, 0x00	; 0
     23e:	e1 f7       	brne	.-8      	; 0x238 <getDistance+0x16>
     240:	00 c0       	rjmp	.+0      	; 0x242 <getDistance+0x20>
     242:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     244:	60 91 74 06 	lds	r22, 0x0674
     248:	70 91 75 06 	lds	r23, 0x0675
     24c:	80 91 76 06 	lds	r24, 0x0676
     250:	90 91 77 06 	lds	r25, 0x0677
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	5f e3       	ldi	r21, 0x3F	; 63
     25c:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
     260:	29 e9       	ldi	r18, 0x99	; 153
     262:	3b eb       	ldi	r19, 0xBB	; 187
     264:	46 e1       	ldi	r20, 0x16	; 22
     266:	5b e3       	ldi	r21, 0x3B	; 59
     268:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
     26c:	26 2f       	mov	r18, r22
     26e:	37 2f       	mov	r19, r23
     270:	f8 2f       	mov	r31, r24
     272:	e9 2f       	mov	r30, r25
     274:	46 2f       	mov	r20, r22
     276:	57 2f       	mov	r21, r23
     278:	68 2f       	mov	r22, r24
     27a:	79 2f       	mov	r23, r25
     27c:	40 93 6e 06 	sts	0x066E, r20
     280:	50 93 6f 06 	sts	0x066F, r21
     284:	60 93 70 06 	sts	0x0670, r22
     288:	70 93 71 06 	sts	0x0671, r23
	return afstand;
}
     28c:	82 2f       	mov	r24, r18
     28e:	93 2f       	mov	r25, r19
     290:	af 2f       	mov	r26, r31
     292:	be 2f       	mov	r27, r30
     294:	bc 01       	movw	r22, r24
     296:	cd 01       	movw	r24, r26
     298:	08 95       	ret

0000029a <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     29a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <get_temp_adc>
     29e:	68 2f       	mov	r22, r24
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__floatsisf>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 ea       	ldi	r20, 0xA0	; 160
     2b0:	5b e3       	ldi	r21, 0x3B	; 59
     2b2:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
     2b6:	26 2f       	mov	r18, r22
     2b8:	37 2f       	mov	r19, r23
     2ba:	f8 2f       	mov	r31, r24
     2bc:	e9 2f       	mov	r30, r25
     2be:	46 2f       	mov	r20, r22
     2c0:	57 2f       	mov	r21, r23
     2c2:	68 2f       	mov	r22, r24
     2c4:	79 2f       	mov	r23, r25
     2c6:	40 93 7a 06 	sts	0x067A, r20
     2ca:	50 93 7b 06 	sts	0x067B, r21
     2ce:	60 93 7c 06 	sts	0x067C, r22
     2d2:	70 93 7d 06 	sts	0x067D, r23
	ADCRes = (Volt - 0.5) * 100;
     2d6:	82 2f       	mov	r24, r18
     2d8:	93 2f       	mov	r25, r19
     2da:	af 2f       	mov	r26, r31
     2dc:	be 2f       	mov	r27, r30
     2de:	bc 01       	movw	r22, r24
     2e0:	cd 01       	movw	r24, r26
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	5f e3       	ldi	r21, 0x3F	; 63
     2ea:	0e 94 52 07 	call	0xea4	; 0xea4 <__subsf3>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	48 ec       	ldi	r20, 0xC8	; 200
     2f4:	52 e4       	ldi	r21, 0x42	; 66
     2f6:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
     2fa:	26 2f       	mov	r18, r22
     2fc:	37 2f       	mov	r19, r23
     2fe:	f8 2f       	mov	r31, r24
     300:	e9 2f       	mov	r30, r25
     302:	46 2f       	mov	r20, r22
     304:	57 2f       	mov	r21, r23
     306:	68 2f       	mov	r22, r24
     308:	79 2f       	mov	r23, r25
     30a:	40 93 9e 06 	sts	0x069E, r20
     30e:	50 93 9f 06 	sts	0x069F, r21
     312:	60 93 a0 06 	sts	0x06A0, r22
     316:	70 93 a1 06 	sts	0x06A1, r23
	return ADCRes;
}
     31a:	82 2f       	mov	r24, r18
     31c:	93 2f       	mov	r25, r19
     31e:	af 2f       	mov	r26, r31
     320:	be 2f       	mov	r27, r30
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	08 95       	ret

00000328 <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     328:	0e 94 f6 00 	call	0x1ec	; 0x1ec <get_light_adc>
	return temp;
}
     32c:	08 95       	ret

0000032e <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     332:	9c e9       	ldi	r25, 0x9C	; 156
     334:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     336:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     33a:	85 b5       	in	r24, 0x25	; 37
     33c:	85 60       	ori	r24, 0x05	; 5
     33e:	85 bd       	out	0x25, r24	; 37
}
     340:	08 95       	ret

00000342 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     342:	0e 94 14 06 	call	0xc28	; 0xc28 <init_scherm_ports>
	init_timer();
     346:	0e 94 97 01 	call	0x32e	; 0x32e <init_timer>
//	init_timer2();
	ser_init();
     34a:	0e 94 88 05 	call	0xb10	; 0xb10 <ser_init>
	ADC_init();
     34e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	
	init_ports();
     352:	0e 94 04 01 	call	0x208	; 0x208 <init_ports>
	init_ext_int();
     356:	0e 94 09 01 	call	0x212	; 0x212 <init_ext_int>
	
	sei(); // set external interrupt
     35a:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	while(1){
		protocolCom();
     35c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <protocolCom>
     360:	fd cf       	rjmp	.-6      	; 0x35c <main+0x1a>

00000362 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
     36c:	2f 93       	push	r18
     36e:	3f 93       	push	r19
     370:	4f 93       	push	r20
     372:	5f 93       	push	r21
     374:	6f 93       	push	r22
     376:	7f 93       	push	r23
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
     37c:	af 93       	push	r26
     37e:	bf 93       	push	r27
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
	
	extraTime++;
     388:	80 91 6a 06 	lds	r24, 0x066A
     38c:	90 91 6b 06 	lds	r25, 0x066B
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	90 93 6b 06 	sts	0x066B, r25
     396:	80 93 6a 06 	sts	0x066A, r24
	if(extraTime>3000){
     39a:	80 91 6a 06 	lds	r24, 0x066A
     39e:	90 91 6b 06 	lds	r25, 0x066B
     3a2:	2b e0       	ldi	r18, 0x0B	; 11
     3a4:	89 3b       	cpi	r24, 0xB9	; 185
     3a6:	92 07       	cpc	r25, r18
     3a8:	0c f4       	brge	.+2      	; 0x3ac <__vector_14+0x4a>
     3aa:	83 c0       	rjmp	.+262    	; 0x4b2 <__vector_14+0x150>

		printf("%i temperatuur= % 6.2f\n", index, getTemp());
     3ac:	c0 91 6c 06 	lds	r28, 0x066C
     3b0:	d0 91 6d 06 	lds	r29, 0x066D
     3b4:	0e 94 4d 01 	call	0x29a	; 0x29a <getTemp>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	ed b7       	in	r30, 0x3d	; 61
     3be:	fe b7       	in	r31, 0x3e	; 62
     3c0:	38 97       	sbiw	r30, 0x08	; 8
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	fe bf       	out	0x3e, r31	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	ed bf       	out	0x3d, r30	; 61
     3cc:	4d b7       	in	r20, 0x3d	; 61
     3ce:	5e b7       	in	r21, 0x3e	; 62
     3d0:	4f 5f       	subi	r20, 0xFF	; 255
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	31 e0       	ldi	r19, 0x01	; 1
     3d8:	32 83       	std	Z+2, r19	; 0x02
     3da:	21 83       	std	Z+1, r18	; 0x01
     3dc:	fa 01       	movw	r30, r20
     3de:	d3 83       	std	Z+3, r29	; 0x03
     3e0:	c2 83       	std	Z+2, r28	; 0x02
     3e2:	84 83       	std	Z+4, r24	; 0x04
     3e4:	95 83       	std	Z+5, r25	; 0x05
     3e6:	a6 83       	std	Z+6, r26	; 0x06
     3e8:	b7 83       	std	Z+7, r27	; 0x07
     3ea:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     3ee:	8f e3       	ldi	r24, 0x3F	; 63
     3f0:	9c e9       	ldi	r25, 0x9C	; 156
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <__vector_14+0x90>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <__vector_14+0x96>
     3f8:	00 00       	nop
		_delay_ms(10);
		printf("%i intensiteit=%d\n", index, getLight());
     3fa:	c0 91 6c 06 	lds	r28, 0x066C
     3fe:	d0 91 6d 06 	lds	r29, 0x066D
     402:	ad b7       	in	r26, 0x3d	; 61
     404:	be b7       	in	r27, 0x3e	; 62
     406:	18 96       	adiw	r26, 0x08	; 8
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	be bf       	out	0x3e, r27	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	ad bf       	out	0x3d, r26	; 61
     412:	0e 94 94 01 	call	0x328	; 0x328 <getLight>
     416:	00 d0       	rcall	.+0      	; 0x418 <__vector_14+0xb6>
     418:	00 d0       	rcall	.+0      	; 0x41a <__vector_14+0xb8>
     41a:	00 d0       	rcall	.+0      	; 0x41c <__vector_14+0xba>
     41c:	ed b7       	in	r30, 0x3d	; 61
     41e:	fe b7       	in	r31, 0x3e	; 62
     420:	31 96       	adiw	r30, 0x01	; 1
     422:	28 e1       	ldi	r18, 0x18	; 24
     424:	31 e0       	ldi	r19, 0x01	; 1
     426:	ad b7       	in	r26, 0x3d	; 61
     428:	be b7       	in	r27, 0x3e	; 62
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	3c 93       	st	X, r19
     42e:	2e 93       	st	-X, r18
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	d3 83       	std	Z+3, r29	; 0x03
     434:	c2 83       	std	Z+2, r28	; 0x02
     436:	84 83       	std	Z+4, r24	; 0x04
     438:	15 82       	std	Z+5, r1	; 0x05
     43a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
		
	
	
		if(getLight()> get_grens_light() && (getOut() % 2) == 0)
     43e:	ed b7       	in	r30, 0x3d	; 61
     440:	fe b7       	in	r31, 0x3e	; 62
     442:	36 96       	adiw	r30, 0x06	; 6
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	fe bf       	out	0x3e, r31	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	ed bf       	out	0x3d, r30	; 61
     44e:	0e 94 94 01 	call	0x328	; 0x328 <getLight>
     452:	c8 2f       	mov	r28, r24
     454:	0e 94 c4 02 	call	0x588	; 0x588 <get_grens_light>
     458:	2c 2f       	mov	r18, r28
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	34 f4       	brge	.+12     	; 0x46e <__vector_14+0x10c>
     462:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getOut>
     466:	80 fd       	sbrc	r24, 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <__vector_14+0x10c>
		{
			uitrollen();
     46a:	0e 94 20 06 	call	0xc40	; 0xc40 <uitrollen>
		}
		if(getLight()< get_grens_light() && (getIn() % 2) == 1)
     46e:	0e 94 94 01 	call	0x328	; 0x328 <getLight>
     472:	c8 2f       	mov	r28, r24
     474:	0e 94 c4 02 	call	0x588	; 0x588 <get_grens_light>
     478:	2c 2f       	mov	r18, r28
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	28 17       	cp	r18, r24
     47e:	39 07       	cpc	r19, r25
     480:	5c f4       	brge	.+22     	; 0x498 <__vector_14+0x136>
     482:	0e 94 0a 06 	call	0xc14	; 0xc14 <getIn>
     486:	62 e0       	ldi	r22, 0x02	; 2
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divmodhi4>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	91 05       	cpc	r25, r1
     492:	11 f4       	brne	.+4      	; 0x498 <__vector_14+0x136>
		{
			oprollen();
     494:	0e 94 b9 06 	call	0xd72	; 0xd72 <oprollen>
		}	
	
		index++;
     498:	80 91 6c 06 	lds	r24, 0x066C
     49c:	90 91 6d 06 	lds	r25, 0x066D
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	90 93 6d 06 	sts	0x066D, r25
     4a6:	80 93 6c 06 	sts	0x066C, r24
		
		// Resets de timer en de Totale timer ticks
		extraTime = 0;
     4aa:	10 92 6b 06 	sts	0x066B, r1
     4ae:	10 92 6a 06 	sts	0x066A, r1
	}
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	7f 91       	pop	r23
     4c4:	6f 91       	pop	r22
     4c6:	5f 91       	pop	r21
     4c8:	4f 91       	pop	r20
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <__vector_2>:

ISR(INT1_vect)
{
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
	if(i == 1)
     4fe:	80 91 72 06 	lds	r24, 0x0672
     502:	90 91 73 06 	lds	r25, 0x0673
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	91 05       	cpc	r25, r1
     50a:	d1 f4       	brne	.+52     	; 0x540 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     50c:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     510:	c4 e8       	ldi	r28, 0x84	; 132
     512:	d0 e0       	ldi	r29, 0x00	; 0
     514:	68 81       	ld	r22, Y
     516:	79 81       	ldd	r23, Y+1	; 0x01
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 e7 07 	call	0xfce	; 0xfce <__floatunsisf>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	80 93 74 06 	sts	0x0674, r24
     528:	90 93 75 06 	sts	0x0675, r25
     52c:	a0 93 76 06 	sts	0x0676, r26
     530:	b0 93 77 06 	sts	0x0677, r27
		TCNT1 = 0; //Reset duration
     534:	19 82       	std	Y+1, r1	; 0x01
     536:	18 82       	st	Y, r1
		i = 0; //Reset counter
     538:	10 92 73 06 	sts	0x0673, r1
     53c:	10 92 72 06 	sts	0x0672, r1
	}

	if(i==0)
     540:	80 91 72 06 	lds	r24, 0x0672
     544:	90 91 73 06 	lds	r25, 0x0673
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	59 f4       	brne	.+22     	; 0x562 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     54c:	e1 e8       	ldi	r30, 0x81	; 129
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	81 60       	ori	r24, 0x01	; 1
     554:	80 83       	st	Z, r24
		i = 1;
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	90 93 73 06 	sts	0x0673, r25
     55e:	80 93 72 06 	sts	0x0672, r24
	}
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <get_grens_light>:
double MAX_UNROLL= 50.0;
double MIN_UNROLL= 0.05;

uint8_t get_grens_light(){
	return GRENS_LIGHT;
}	
     588:	80 91 ce 05 	lds	r24, 0x05CE
     58c:	08 95       	ret

0000058e <get_grens_temp>:

uint8_t get_grens_temp(){
	return GRENS_TEMP;
     58e:	60 91 cf 05 	lds	r22, 0x05CF
     592:	70 91 d0 05 	lds	r23, 0x05D0
     596:	80 91 d1 05 	lds	r24, 0x05D1
     59a:	90 91 d2 05 	lds	r25, 0x05D2
     59e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fixunssfsi>
     5a2:	86 2f       	mov	r24, r22
}
     5a4:	08 95       	ret

000005a6 <get_max_unroll>:

double get_max_unroll(){
	return MAX_UNROLL;
}
     5a6:	50 91 ca 05 	lds	r21, 0x05CA
     5aa:	40 91 cb 05 	lds	r20, 0x05CB
     5ae:	30 91 cc 05 	lds	r19, 0x05CC
     5b2:	20 91 cd 05 	lds	r18, 0x05CD
     5b6:	85 2f       	mov	r24, r21
     5b8:	94 2f       	mov	r25, r20
     5ba:	a3 2f       	mov	r26, r19
     5bc:	b2 2f       	mov	r27, r18
     5be:	bc 01       	movw	r22, r24
     5c0:	cd 01       	movw	r24, r26
     5c2:	08 95       	ret

000005c4 <get_min_unroll>:
double get_min_unroll(){
	return MIN_UNROLL;
}
     5c4:	50 91 c6 05 	lds	r21, 0x05C6
     5c8:	40 91 c7 05 	lds	r20, 0x05C7
     5cc:	30 91 c8 05 	lds	r19, 0x05C8
     5d0:	20 91 c9 05 	lds	r18, 0x05C9
     5d4:	85 2f       	mov	r24, r21
     5d6:	94 2f       	mov	r25, r20
     5d8:	a3 2f       	mov	r26, r19
     5da:	b2 2f       	mov	r27, r18
     5dc:	bc 01       	movw	r22, r24
     5de:	cd 01       	movw	r24, r26
     5e0:	08 95       	ret

000005e2 <protocolCom>:

void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     5e2:	0b e2       	ldi	r16, 0x2B	; 43
     5e4:	11 e0       	ldi	r17, 0x01	; 1
		ser_readln(in_buf, sizeof(in_buf), 1);
     5e6:	c2 ea       	ldi	r28, 0xA2	; 162
     5e8:	d6 e0       	ldi	r29, 0x06	; 6
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f4 e4       	ldi	r31, 0x44	; 68
     5ee:	ef 2e       	mov	r14, r31
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	ff 2e       	mov	r15, r31
     5f4:	f0 2d       	mov	r31, r0
				} if((getOut() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f8 e6       	ldi	r31, 0x68	; 104
     5fa:	af 2e       	mov	r10, r31
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	bf 2e       	mov	r11, r31
     600:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     602:	0f 2e       	mov	r0, r31
     604:	fb e8       	ldi	r31, 0x8B	; 139
     606:	cf 2e       	mov	r12, r31
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	df 2e       	mov	r13, r31
     60c:	f0 2d       	mov	r31, r0

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     60e:	0f 2e       	mov	r0, r31
     610:	f2 e9       	ldi	r31, 0x92	; 146
     612:	8f 2e       	mov	r8, r31
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	9f 2e       	mov	r9, r31
     618:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     61a:	0f 2e       	mov	r0, r31
     61c:	fe ea       	ldi	r31, 0xAE	; 174
     61e:	6f 2e       	mov	r6, r31
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	7f 2e       	mov	r7, r31
     624:	f0 2d       	mov	r31, r0
				printf("202 GRENS_TEMP: % 6.2f \n", GRENS_TEMP);
			}
			else if(strcmp("SET_GRENS_TEMP(Z)", in_buf) == 0){
     626:	0f 2e       	mov	r0, r31
     628:	f6 ed       	ldi	r31, 0xD6	; 214
     62a:	4f 2e       	mov	r4, r31
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	5f 2e       	mov	r5, r31
     630:	f0 2d       	mov	r31, r0
				printf("203 GRENS_TEMP: %6.2f -> %6.2f ", GRENS_LIGHT, in_buf);
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     632:	0f 2e       	mov	r0, r31
     634:	f8 e0       	ldi	r31, 0x08	; 8
     636:	2f 2e       	mov	r2, r31
     638:	f2 e0       	ldi	r31, 0x02	; 2
     63a:	3f 2e       	mov	r3, r31
     63c:	f0 2d       	mov	r31, r0
	return MIN_UNROLL;
}

void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     63e:	c8 01       	movw	r24, r16
     640:	0e 94 b8 05 	call	0xb70	; 0xb70 <ser_write>
		ser_readln(in_buf, sizeof(in_buf), 1);
     644:	ce 01       	movw	r24, r28
     646:	6e e1       	ldi	r22, 0x1E	; 30
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	0e 94 d0 05 	call	0xba0	; 0xba0 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     650:	c7 01       	movw	r24, r14
     652:	be 01       	movw	r22, r28
     654:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     658:	28 2f       	mov	r18, r24
     65a:	39 2f       	mov	r19, r25
     65c:	21 15       	cp	r18, r1
     65e:	31 05       	cpc	r19, r1
     660:	a1 f4       	brne	.+40     	; 0x68a <protocolCom+0xa8>
				if ((getOut() % 2) == 1){
     662:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getOut>
     666:	62 e0       	ldi	r22, 0x02	; 2
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divmodhi4>
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	91 05       	cpc	r25, r1
     672:	21 f4       	brne	.+8      	; 0x67c <protocolCom+0x9a>
					ser_writeln("Zonnescherm is al uitgerold!");
     674:	8b e4       	ldi	r24, 0x4B	; 75
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
				} if((getOut() % 2) == 0){
     67c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getOut>
     680:	80 fd       	sbrc	r24, 0
     682:	1f c0       	rjmp	.+62     	; 0x6c2 <protocolCom+0xe0>
					uitrollen();
     684:	0e 94 20 06 	call	0xc40	; 0xc40 <uitrollen>
     688:	1c c0       	rjmp	.+56     	; 0x6c2 <protocolCom+0xe0>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     68a:	c5 01       	movw	r24, r10
     68c:	be 01       	movw	r22, r28
     68e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     692:	28 2f       	mov	r18, r24
     694:	39 2f       	mov	r19, r25
     696:	21 15       	cp	r18, r1
     698:	31 05       	cpc	r19, r1
     69a:	99 f4       	brne	.+38     	; 0x6c2 <protocolCom+0xe0>
				if ((getIn() % 2) == 0){
     69c:	0e 94 0a 06 	call	0xc14	; 0xc14 <getIn>
     6a0:	80 fd       	sbrc	r24, 0
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <protocolCom+0xca>
					ser_writeln("Zonnescherm is al opgerold!");
     6a4:	8f e6       	ldi	r24, 0x6F	; 111
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
				} if((getIn() % 2) == 1){
     6ac:	0e 94 0a 06 	call	0xc14	; 0xc14 <getIn>
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divmodhi4>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	91 05       	cpc	r25, r1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <protocolCom+0xe0>
					oprollen();
     6be:	0e 94 b9 06 	call	0xd72	; 0xd72 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     6c2:	c6 01       	movw	r24, r12
     6c4:	be 01       	movw	r22, r28
     6c6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     6ca:	28 2f       	mov	r18, r24
     6cc:	39 2f       	mov	r19, r25
     6ce:	21 15       	cp	r18, r1
     6d0:	31 05       	cpc	r19, r1
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <protocolCom+0xf4>
     6d4:	b4 cf       	rjmp	.-152    	; 0x63e <protocolCom+0x5c>

			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     6d6:	c4 01       	movw	r24, r8
     6d8:	be 01       	movw	r22, r28
     6da:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     6de:	28 2f       	mov	r18, r24
     6e0:	39 2f       	mov	r19, r25
     6e2:	21 15       	cp	r18, r1
     6e4:	31 05       	cpc	r19, r1
     6e6:	e1 f4       	brne	.+56     	; 0x720 <protocolCom+0x13e>
				printf("202 TEMP= % 6.2f \n", getTemp());
     6e8:	0e 94 4d 01 	call	0x29a	; 0x29a <getTemp>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <protocolCom+0x110>
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <protocolCom+0x112>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <protocolCom+0x114>
     6f6:	2b e9       	ldi	r18, 0x9B	; 155
     6f8:	31 e0       	ldi	r19, 0x01	; 1
     6fa:	ed b7       	in	r30, 0x3d	; 61
     6fc:	fe b7       	in	r31, 0x3e	; 62
     6fe:	32 83       	std	Z+2, r19	; 0x02
     700:	21 83       	std	Z+1, r18	; 0x01
     702:	83 83       	std	Z+3, r24	; 0x03
     704:	94 83       	std	Z+4, r25	; 0x04
     706:	a5 83       	std	Z+5, r26	; 0x05
     708:	b6 83       	std	Z+6, r27	; 0x06
     70a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     70e:	8d b7       	in	r24, 0x3d	; 61
     710:	9e b7       	in	r25, 0x3e	; 62
     712:	06 96       	adiw	r24, 0x06	; 6
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	9e bf       	out	0x3e, r25	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	8d bf       	out	0x3d, r24	; 61
     71e:	8f cf       	rjmp	.-226    	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     720:	c3 01       	movw	r24, r6
     722:	be 01       	movw	r22, r28
     724:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     728:	28 2f       	mov	r18, r24
     72a:	39 2f       	mov	r19, r25
     72c:	21 15       	cp	r18, r1
     72e:	31 05       	cpc	r19, r1
     730:	21 f5       	brne	.+72     	; 0x77a <protocolCom+0x198>
				printf("202 GRENS_TEMP: % 6.2f \n", GRENS_TEMP);
     732:	00 d0       	rcall	.+0      	; 0x734 <protocolCom+0x152>
     734:	00 d0       	rcall	.+0      	; 0x736 <protocolCom+0x154>
     736:	00 d0       	rcall	.+0      	; 0x738 <protocolCom+0x156>
     738:	8d eb       	ldi	r24, 0xBD	; 189
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	ad b7       	in	r26, 0x3d	; 61
     73e:	be b7       	in	r27, 0x3e	; 62
     740:	12 96       	adiw	r26, 0x02	; 2
     742:	9c 93       	st	X, r25
     744:	8e 93       	st	-X, r24
     746:	11 97       	sbiw	r26, 0x01	; 1
     748:	80 91 cf 05 	lds	r24, 0x05CF
     74c:	90 91 d0 05 	lds	r25, 0x05D0
     750:	a0 91 d1 05 	lds	r26, 0x05D1
     754:	b0 91 d2 05 	lds	r27, 0x05D2
     758:	ed b7       	in	r30, 0x3d	; 61
     75a:	fe b7       	in	r31, 0x3e	; 62
     75c:	83 83       	std	Z+3, r24	; 0x03
     75e:	94 83       	std	Z+4, r25	; 0x04
     760:	a5 83       	std	Z+5, r26	; 0x05
     762:	b6 83       	std	Z+6, r27	; 0x06
     764:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     768:	8d b7       	in	r24, 0x3d	; 61
     76a:	9e b7       	in	r25, 0x3e	; 62
     76c:	06 96       	adiw	r24, 0x06	; 6
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	9e bf       	out	0x3e, r25	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	8d bf       	out	0x3d, r24	; 61
     778:	62 cf       	rjmp	.-316    	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("SET_GRENS_TEMP(Z)", in_buf) == 0){
     77a:	c2 01       	movw	r24, r4
     77c:	be 01       	movw	r22, r28
     77e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     782:	28 2f       	mov	r18, r24
     784:	39 2f       	mov	r19, r25
     786:	21 15       	cp	r18, r1
     788:	31 05       	cpc	r19, r1
     78a:	f9 f4       	brne	.+62     	; 0x7ca <protocolCom+0x1e8>
				printf("203 GRENS_TEMP: %6.2f -> %6.2f ", GRENS_LIGHT, in_buf);
     78c:	00 d0       	rcall	.+0      	; 0x78e <protocolCom+0x1ac>
     78e:	00 d0       	rcall	.+0      	; 0x790 <protocolCom+0x1ae>
     790:	00 d0       	rcall	.+0      	; 0x792 <protocolCom+0x1b0>
     792:	ed b7       	in	r30, 0x3d	; 61
     794:	fe b7       	in	r31, 0x3e	; 62
     796:	31 96       	adiw	r30, 0x01	; 1
     798:	88 ee       	ldi	r24, 0xE8	; 232
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	ad b7       	in	r26, 0x3d	; 61
     79e:	be b7       	in	r27, 0x3e	; 62
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	9c 93       	st	X, r25
     7a4:	8e 93       	st	-X, r24
     7a6:	11 97       	sbiw	r26, 0x01	; 1
     7a8:	80 91 ce 05 	lds	r24, 0x05CE
     7ac:	82 83       	std	Z+2, r24	; 0x02
     7ae:	13 82       	std	Z+3, r1	; 0x03
     7b0:	d5 83       	std	Z+5, r29	; 0x05
     7b2:	c4 83       	std	Z+4, r28	; 0x04
     7b4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     7b8:	ed b7       	in	r30, 0x3d	; 61
     7ba:	fe b7       	in	r31, 0x3e	; 62
     7bc:	36 96       	adiw	r30, 0x06	; 6
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	fe bf       	out	0x3e, r31	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	ed bf       	out	0x3d, r30	; 61
     7c8:	3a cf       	rjmp	.-396    	; 0x63e <protocolCom+0x5c>
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     7ca:	c1 01       	movw	r24, r2
     7cc:	be 01       	movw	r22, r28
     7ce:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     7d2:	28 2f       	mov	r18, r24
     7d4:	39 2f       	mov	r19, r25
     7d6:	21 15       	cp	r18, r1
     7d8:	31 05       	cpc	r19, r1
     7da:	c1 f4       	brne	.+48     	; 0x80c <protocolCom+0x22a>
				printf("202 LIGHT %i \n", getLight());
     7dc:	0e 94 94 01 	call	0x328	; 0x328 <getLight>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <protocolCom+0x200>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <protocolCom+0x202>
     7e4:	ed b7       	in	r30, 0x3d	; 61
     7e6:	fe b7       	in	r31, 0x3e	; 62
     7e8:	31 96       	adiw	r30, 0x01	; 1
     7ea:	22 e1       	ldi	r18, 0x12	; 18
     7ec:	32 e0       	ldi	r19, 0x02	; 2
     7ee:	ad b7       	in	r26, 0x3d	; 61
     7f0:	be b7       	in	r27, 0x3e	; 62
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	3c 93       	st	X, r19
     7f6:	2e 93       	st	-X, r18
     7f8:	11 97       	sbiw	r26, 0x01	; 1
     7fa:	82 83       	std	Z+2, r24	; 0x02
     7fc:	13 82       	std	Z+3, r1	; 0x03
     7fe:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	19 cf       	rjmp	.-462    	; 0x63e <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     80c:	81 e2       	ldi	r24, 0x21	; 33
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	be 01       	movw	r22, r28
     812:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     816:	28 2f       	mov	r18, r24
     818:	39 2f       	mov	r19, r25
     81a:	21 15       	cp	r18, r1
     81c:	31 05       	cpc	r19, r1
     81e:	c1 f4       	brne	.+48     	; 0x850 <protocolCom+0x26e>
				printf("202 GRENS_LIGHT: % 6.2f \n", GRENS_LIGHT);
     820:	00 d0       	rcall	.+0      	; 0x822 <protocolCom+0x240>
     822:	00 d0       	rcall	.+0      	; 0x824 <protocolCom+0x242>
     824:	ed b7       	in	r30, 0x3d	; 61
     826:	fe b7       	in	r31, 0x3e	; 62
     828:	31 96       	adiw	r30, 0x01	; 1
     82a:	81 e3       	ldi	r24, 0x31	; 49
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	ad b7       	in	r26, 0x3d	; 61
     830:	be b7       	in	r27, 0x3e	; 62
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	9c 93       	st	X, r25
     836:	8e 93       	st	-X, r24
     838:	11 97       	sbiw	r26, 0x01	; 1
     83a:	80 91 ce 05 	lds	r24, 0x05CE
     83e:	82 83       	std	Z+2, r24	; 0x02
     840:	13 82       	std	Z+3, r1	; 0x03
     842:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	f7 ce       	rjmp	.-530    	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("SET_GRENS_LIGHT(Z)", in_buf) == 0){
     850:	8b e4       	ldi	r24, 0x4B	; 75
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	be 01       	movw	r22, r28
     856:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     85a:	28 2f       	mov	r18, r24
     85c:	39 2f       	mov	r19, r25
     85e:	21 15       	cp	r18, r1
     860:	31 05       	cpc	r19, r1
     862:	f9 f4       	brne	.+62     	; 0x8a2 <protocolCom+0x2c0>
				printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", GRENS_LIGHT, in_buf);
     864:	00 d0       	rcall	.+0      	; 0x866 <protocolCom+0x284>
     866:	00 d0       	rcall	.+0      	; 0x868 <protocolCom+0x286>
     868:	00 d0       	rcall	.+0      	; 0x86a <protocolCom+0x288>
     86a:	ed b7       	in	r30, 0x3d	; 61
     86c:	fe b7       	in	r31, 0x3e	; 62
     86e:	31 96       	adiw	r30, 0x01	; 1
     870:	8e e5       	ldi	r24, 0x5E	; 94
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	ad b7       	in	r26, 0x3d	; 61
     876:	be b7       	in	r27, 0x3e	; 62
     878:	12 96       	adiw	r26, 0x02	; 2
     87a:	9c 93       	st	X, r25
     87c:	8e 93       	st	-X, r24
     87e:	11 97       	sbiw	r26, 0x01	; 1
     880:	80 91 ce 05 	lds	r24, 0x05CE
     884:	82 83       	std	Z+2, r24	; 0x02
     886:	13 82       	std	Z+3, r1	; 0x03
     888:	d5 83       	std	Z+5, r29	; 0x05
     88a:	c4 83       	std	Z+4, r28	; 0x04
     88c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     890:	ed b7       	in	r30, 0x3d	; 61
     892:	fe b7       	in	r31, 0x3e	; 62
     894:	36 96       	adiw	r30, 0x06	; 6
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	fe bf       	out	0x3e, r31	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	ed bf       	out	0x3d, r30	; 61
     8a0:	ce ce       	rjmp	.-612    	; 0x63e <protocolCom+0x5c>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     8a2:	8f e7       	ldi	r24, 0x7F	; 127
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	be 01       	movw	r22, r28
     8a8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     8ac:	28 2f       	mov	r18, r24
     8ae:	39 2f       	mov	r19, r25
     8b0:	21 15       	cp	r18, r1
     8b2:	31 05       	cpc	r19, r1
     8b4:	21 f5       	brne	.+72     	; 0x8fe <protocolCom+0x31c>
				printf("202 TEMP= % 6.2f \n", MAX_UNROLL);
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <protocolCom+0x2d6>
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <protocolCom+0x2d8>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <protocolCom+0x2da>
     8bc:	8b e9       	ldi	r24, 0x9B	; 155
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	ad b7       	in	r26, 0x3d	; 61
     8c2:	be b7       	in	r27, 0x3e	; 62
     8c4:	12 96       	adiw	r26, 0x02	; 2
     8c6:	9c 93       	st	X, r25
     8c8:	8e 93       	st	-X, r24
     8ca:	11 97       	sbiw	r26, 0x01	; 1
     8cc:	80 91 ca 05 	lds	r24, 0x05CA
     8d0:	90 91 cb 05 	lds	r25, 0x05CB
     8d4:	a0 91 cc 05 	lds	r26, 0x05CC
     8d8:	b0 91 cd 05 	lds	r27, 0x05CD
     8dc:	ed b7       	in	r30, 0x3d	; 61
     8de:	fe b7       	in	r31, 0x3e	; 62
     8e0:	83 83       	std	Z+3, r24	; 0x03
     8e2:	94 83       	std	Z+4, r25	; 0x04
     8e4:	a5 83       	std	Z+5, r26	; 0x05
     8e6:	b6 83       	std	Z+6, r27	; 0x06
     8e8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     8ec:	8d b7       	in	r24, 0x3d	; 61
     8ee:	9e b7       	in	r25, 0x3e	; 62
     8f0:	06 96       	adiw	r24, 0x06	; 6
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	9e bf       	out	0x3e, r25	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	8d bf       	out	0x3d, r24	; 61
     8fc:	a0 ce       	rjmp	.-704    	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("SET_MAX_UNROLL(Z)", in_buf) == 0){
     8fe:	8e e8       	ldi	r24, 0x8E	; 142
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	be 01       	movw	r22, r28
     904:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     908:	28 2f       	mov	r18, r24
     90a:	39 2f       	mov	r19, r25
     90c:	21 15       	cp	r18, r1
     90e:	31 05       	cpc	r19, r1
     910:	51 f5       	brne	.+84     	; 0x966 <__stack+0x67>
				printf("203 MAX_UNROLL: %6.2f -> %6.2f ", MAX_UNROLL, in_buf);
     912:	ad b7       	in	r26, 0x3d	; 61
     914:	be b7       	in	r27, 0x3e	; 62
     916:	18 97       	sbiw	r26, 0x08	; 8
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	be bf       	out	0x3e, r27	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	ad bf       	out	0x3d, r26	; 61
     922:	ed b7       	in	r30, 0x3d	; 61
     924:	fe b7       	in	r31, 0x3e	; 62
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	80 ea       	ldi	r24, 0xA0	; 160
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	9c 93       	st	X, r25
     930:	8e 93       	st	-X, r24
     932:	11 97       	sbiw	r26, 0x01	; 1
     934:	80 91 ca 05 	lds	r24, 0x05CA
     938:	90 91 cb 05 	lds	r25, 0x05CB
     93c:	a0 91 cc 05 	lds	r26, 0x05CC
     940:	b0 91 cd 05 	lds	r27, 0x05CD
     944:	82 83       	std	Z+2, r24	; 0x02
     946:	93 83       	std	Z+3, r25	; 0x03
     948:	a4 83       	std	Z+4, r26	; 0x04
     94a:	b5 83       	std	Z+5, r27	; 0x05
     94c:	d7 83       	std	Z+7, r29	; 0x07
     94e:	c6 83       	std	Z+6, r28	; 0x06
     950:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     954:	ed b7       	in	r30, 0x3d	; 61
     956:	fe b7       	in	r31, 0x3e	; 62
     958:	38 96       	adiw	r30, 0x08	; 8
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	fe bf       	out	0x3e, r31	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	ed bf       	out	0x3d, r30	; 61
     964:	6c ce       	rjmp	.-808    	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     966:	80 ec       	ldi	r24, 0xC0	; 192
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	be 01       	movw	r22, r28
     96c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     970:	28 2f       	mov	r18, r24
     972:	39 2f       	mov	r19, r25
     974:	21 15       	cp	r18, r1
     976:	31 05       	cpc	r19, r1
     978:	21 f5       	brne	.+72     	; 0x9c2 <__stack+0xc3>
				printf("203 MAX_UNROLL: %6.2f -> %6.2f ", MIN_UNROLL);
     97a:	00 d0       	rcall	.+0      	; 0x97c <__stack+0x7d>
     97c:	00 d0       	rcall	.+0      	; 0x97e <__stack+0x7f>
     97e:	00 d0       	rcall	.+0      	; 0x980 <__stack+0x81>
     980:	80 ea       	ldi	r24, 0xA0	; 160
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	ad b7       	in	r26, 0x3d	; 61
     986:	be b7       	in	r27, 0x3e	; 62
     988:	12 96       	adiw	r26, 0x02	; 2
     98a:	9c 93       	st	X, r25
     98c:	8e 93       	st	-X, r24
     98e:	11 97       	sbiw	r26, 0x01	; 1
     990:	80 91 c6 05 	lds	r24, 0x05C6
     994:	90 91 c7 05 	lds	r25, 0x05C7
     998:	a0 91 c8 05 	lds	r26, 0x05C8
     99c:	b0 91 c9 05 	lds	r27, 0x05C9
     9a0:	ed b7       	in	r30, 0x3d	; 61
     9a2:	fe b7       	in	r31, 0x3e	; 62
     9a4:	83 83       	std	Z+3, r24	; 0x03
     9a6:	94 83       	std	Z+4, r25	; 0x04
     9a8:	a5 83       	std	Z+5, r26	; 0x05
     9aa:	b6 83       	std	Z+6, r27	; 0x06
     9ac:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     9b0:	8d b7       	in	r24, 0x3d	; 61
     9b2:	9e b7       	in	r25, 0x3e	; 62
     9b4:	06 96       	adiw	r24, 0x06	; 6
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	9e bf       	out	0x3e, r25	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	8d bf       	out	0x3d, r24	; 61
     9c0:	3e ce       	rjmp	.-900    	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("SET_MIN_UNROLL(Z)", in_buf) == 0){
     9c2:	8f ec       	ldi	r24, 0xCF	; 207
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	be 01       	movw	r22, r28
     9c8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     9cc:	28 2f       	mov	r18, r24
     9ce:	39 2f       	mov	r19, r25
     9d0:	21 15       	cp	r18, r1
     9d2:	31 05       	cpc	r19, r1
     9d4:	51 f5       	brne	.+84     	; 0xa2a <__stack+0x12b>
				printf("203 MIN_UNROLL: %6.2f -> %6.2f ", MAX_UNROLL, in_buf);
     9d6:	ad b7       	in	r26, 0x3d	; 61
     9d8:	be b7       	in	r27, 0x3e	; 62
     9da:	18 97       	sbiw	r26, 0x08	; 8
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	be bf       	out	0x3e, r27	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	ad bf       	out	0x3d, r26	; 61
     9e6:	ed b7       	in	r30, 0x3d	; 61
     9e8:	fe b7       	in	r31, 0x3e	; 62
     9ea:	31 96       	adiw	r30, 0x01	; 1
     9ec:	81 ee       	ldi	r24, 0xE1	; 225
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	12 96       	adiw	r26, 0x02	; 2
     9f2:	9c 93       	st	X, r25
     9f4:	8e 93       	st	-X, r24
     9f6:	11 97       	sbiw	r26, 0x01	; 1
     9f8:	80 91 ca 05 	lds	r24, 0x05CA
     9fc:	90 91 cb 05 	lds	r25, 0x05CB
     a00:	a0 91 cc 05 	lds	r26, 0x05CC
     a04:	b0 91 cd 05 	lds	r27, 0x05CD
     a08:	82 83       	std	Z+2, r24	; 0x02
     a0a:	93 83       	std	Z+3, r25	; 0x03
     a0c:	a4 83       	std	Z+4, r26	; 0x04
     a0e:	b5 83       	std	Z+5, r27	; 0x05
     a10:	d7 83       	std	Z+7, r29	; 0x07
     a12:	c6 83       	std	Z+6, r28	; 0x06
     a14:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     a18:	ed b7       	in	r30, 0x3d	; 61
     a1a:	fe b7       	in	r31, 0x3e	; 62
     a1c:	38 96       	adiw	r30, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	fe bf       	out	0x3e, r31	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	ed bf       	out	0x3d, r30	; 61
     a28:	0a ce       	rjmp	.-1004   	; 0x63e <protocolCom+0x5c>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	be 01       	movw	r22, r28
     a30:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     a34:	28 2f       	mov	r18, r24
     a36:	39 2f       	mov	r19, r25
     a38:	21 15       	cp	r18, r1
     a3a:	31 05       	cpc	r19, r1
     a3c:	09 f4       	brne	.+2      	; 0xa40 <__stack+0x141>
     a3e:	ff cd       	rjmp	.-1026   	; 0x63e <protocolCom+0x5c>

			}
			else if(strcmp("SET_NAME", in_buf) == 0){
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	93 e0       	ldi	r25, 0x03	; 3
     a44:	be 01       	movw	r22, r28
     a46:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     a4a:	28 2f       	mov	r18, r24
     a4c:	39 2f       	mov	r19, r25
     a4e:	21 15       	cp	r18, r1
     a50:	31 05       	cpc	r19, r1
     a52:	71 f4       	brne	.+28     	; 0xa70 <__stack+0x171>
				printf("200 OK ");
     a54:	00 d0       	rcall	.+0      	; 0xa56 <__stack+0x157>
     a56:	83 e1       	ldi	r24, 0x13	; 19
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	ad b7       	in	r26, 0x3d	; 61
     a5c:	be b7       	in	r27, 0x3e	; 62
     a5e:	12 96       	adiw	r26, 0x02	; 2
     a60:	9c 93       	st	X, r25
     a62:	8e 93       	st	-X, r24
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	e7 cd       	rjmp	.-1074   	; 0x63e <protocolCom+0x5c>
			}
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     a70:	8b e1       	ldi	r24, 0x1B	; 27
     a72:	93 e0       	ldi	r25, 0x03	; 3
     a74:	be 01       	movw	r22, r28
     a76:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     a7a:	28 2f       	mov	r18, r24
     a7c:	39 2f       	mov	r19, r25
     a7e:	21 15       	cp	r18, r1
     a80:	31 05       	cpc	r19, r1
     a82:	09 f4       	brne	.+2      	; 0xa86 <__stack+0x187>
     a84:	dc cd       	rjmp	.-1096   	; 0x63e <protocolCom+0x5c>

			}
			else if(strcmp("SET_LOCATION(Z)", in_buf) == 0){
     a86:	88 e2       	ldi	r24, 0x28	; 40
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	be 01       	movw	r22, r28
     a8c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     a90:	28 2f       	mov	r18, r24
     a92:	39 2f       	mov	r19, r25
     a94:	21 15       	cp	r18, r1
     a96:	31 05       	cpc	r19, r1
     a98:	61 f4       	brne	.+24     	; 0xab2 <__stack+0x1b3>
				printf("200 OK ");
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <__stack+0x19d>
     a9c:	83 e1       	ldi	r24, 0x13	; 19
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	ed b7       	in	r30, 0x3d	; 61
     aa2:	fe b7       	in	r31, 0x3e	; 62
     aa4:	92 83       	std	Z+2, r25	; 0x02
     aa6:	81 83       	std	Z+1, r24	; 0x01
     aa8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	c6 cd       	rjmp	.-1140   	; 0x63e <protocolCom+0x5c>
			}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     ab2:	88 e3       	ldi	r24, 0x38	; 56
     ab4:	93 e0       	ldi	r25, 0x03	; 3
     ab6:	be 01       	movw	r22, r28
     ab8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     abc:	28 2f       	mov	r18, r24
     abe:	39 2f       	mov	r19, r25
     ac0:	21 15       	cp	r18, r1
     ac2:	31 05       	cpc	r19, r1
     ac4:	89 f4       	brne	.+34     	; 0xae8 <__stack+0x1e9>
				if ((getOut() % 2) == 1){
     ac6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getOut>
     aca:	62 e0       	ldi	r22, 0x02	; 2
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divmodhi4>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	91 05       	cpc	r25, r1
     ad6:	11 f4       	brne	.+4      	; 0xadc <__stack+0x1dd>
					uitrollen();					
     ad8:	0e 94 20 06 	call	0xc40	; 0xc40 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     adc:	8d e3       	ldi	r24, 0x3D	; 61
     ade:	93 e0       	ldi	r25, 0x03	; 3
     ae0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
				abort();
     ae4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     ae8:	86 e4       	ldi	r24, 0x46	; 70
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	be 01       	movw	r22, r28
     aee:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <strcmp>
     af2:	28 2f       	mov	r18, r24
     af4:	39 2f       	mov	r19, r25
     af6:	21 15       	cp	r18, r1
     af8:	31 05       	cpc	r19, r1
     afa:	29 f4       	brne	.+10     	; 0xb06 <__stack+0x207>
				ser_writeln(
     afc:	8b e4       	ldi	r24, 0x4B	; 75
     afe:	93 e0       	ldi	r25, 0x03	; 3
     b00:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
     b04:	9c cd       	rjmp	.-1224   	; 0x63e <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     b06:	8a e8       	ldi	r24, 0x8A	; 138
     b08:	95 e0       	ldi	r25, 0x05	; 5
     b0a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
     b0e:	97 cd       	rjmp	.-1234   	; 0x63e <protocolCom+0x5c>

00000b10 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     b10:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     b14:	83 e3       	ldi	r24, 0x33	; 51
     b16:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     b1a:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     b2a:	83 ed       	ldi	r24, 0xD3	; 211
     b2c:	95 e0       	ldi	r25, 0x05	; 5
     b2e:	90 93 c7 06 	sts	0x06C7, r25
     b32:	80 93 c6 06 	sts	0x06C6, r24
}
     b36:	08 95       	ret

00000b38 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     b38:	e0 ec       	ldi	r30, 0xC0	; 192
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	90 81       	ld	r25, Z
     b3e:	95 ff       	sbrs	r25, 5
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     b42:	80 93 c6 00 	sts	0x00C6, r24
}
     b46:	08 95       	ret

00000b48 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     b48:	cf 93       	push	r28
     b4a:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     b4c:	8a 30       	cpi	r24, 0x0A	; 10
     b4e:	19 f4       	brne	.+6      	; 0xb56 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     b50:	8d e0       	ldi	r24, 0x0D	; 13
     b52:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>
	}
	ser_transmit(c);
     b56:	8c 2f       	mov	r24, r28
     b58:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>
}
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     b60:	e0 ec       	ldi	r30, 0xC0	; 192
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 23       	and	r24, r24
     b68:	ec f7       	brge	.-6      	; 0xb64 <ser_receive+0x4>
	return UDR0;
     b6a:	80 91 c6 00 	lds	r24, 0x00C6
}
     b6e:	08 95       	ret

00000b70 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     b76:	88 81       	ld	r24, Y
     b78:	88 23       	and	r24, r24
     b7a:	31 f0       	breq	.+12     	; 0xb88 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     b7c:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     b7e:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     b82:	89 91       	ld	r24, Y+
     b84:	88 23       	and	r24, r24
     b86:	d9 f7       	brne	.-10     	; 0xb7e <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     b8e:	0e 94 b8 05 	call	0xb70	; 0xb70 <ser_write>
	ser_transmit('\r');
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>
	ser_transmit('\n');
     b98:	8a e0       	ldi	r24, 0x0A	; 10
     b9a:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>
}
     b9e:	08 95       	ret

00000ba0 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     ba0:	af 92       	push	r10
     ba2:	bf 92       	push	r11
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	5c 01       	movw	r10, r24
     bb6:	d4 2f       	mov	r29, r20
	int i=0;
     bb8:	6c 01       	movw	r12, r24
     bba:	ee 24       	eor	r14, r14
     bbc:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     bbe:	8b 01       	movw	r16, r22
     bc0:	01 50       	subi	r16, 0x01	; 1
     bc2:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     bc4:	0e 94 b0 05 	call	0xb60	; 0xb60 <ser_receive>
     bc8:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     bca:	dd 23       	and	r29, r29
     bcc:	11 f0       	breq	.+4      	; 0xbd2 <ser_readln+0x32>
     bce:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>
		if (c=='\r') {
     bd2:	cd 30       	cpi	r28, 0x0D	; 13
     bd4:	31 f4       	brne	.+12     	; 0xbe2 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     bd6:	dd 23       	and	r29, r29
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <ser_readln+0x56>
     bda:	8a e0       	ldi	r24, 0x0A	; 10
     bdc:	0e 94 9c 05 	call	0xb38	; 0xb38 <ser_transmit>
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     be2:	e0 16       	cp	r14, r16
     be4:	f1 06       	cpc	r15, r17
     be6:	74 f7       	brge	.-36     	; 0xbc4 <ser_readln+0x24>
			buf[i++]=c;
     be8:	f6 01       	movw	r30, r12
     bea:	c1 93       	st	Z+, r28
     bec:	6f 01       	movw	r12, r30
     bee:	08 94       	sec
     bf0:	e1 1c       	adc	r14, r1
     bf2:	f1 1c       	adc	r15, r1
     bf4:	e7 cf       	rjmp	.-50     	; 0xbc4 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     bf6:	ea 0c       	add	r14, r10
     bf8:	fb 1c       	adc	r15, r11
     bfa:	f7 01       	movw	r30, r14
     bfc:	10 82       	st	Z, r1
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	08 95       	ret

00000c14 <getIn>:

int j, IN, OUT = 0; //Voor knipperen van zonnescherm | Voor het kijken of hij uitgerold/opgerold is

int getIn(){
	return IN;
}
     c14:	80 91 c2 06 	lds	r24, 0x06C2
     c18:	90 91 c3 06 	lds	r25, 0x06C3
     c1c:	08 95       	ret

00000c1e <getOut>:

int getOut(){
	return OUT;
}
     c1e:	80 91 78 06 	lds	r24, 0x0678
     c22:	90 91 79 06 	lds	r25, 0x0679
     c26:	08 95       	ret

00000c28 <init_scherm_ports>:

init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
     c28:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
     c2a:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
     c2c:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
     c2e:	e9 e6       	ldi	r30, 0x69	; 105
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
     c3c:	2d 9a       	sbi	0x05, 5	; 5
}
     c3e:	08 95       	ret

00000c40 <uitrollen>:

void uitrollen(){
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
	OUT = (OUT + 1);
     c44:	80 91 78 06 	lds	r24, 0x0678
     c48:	90 91 79 06 	lds	r25, 0x0679
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	90 93 79 06 	sts	0x0679, r25
     c52:	80 93 78 06 	sts	0x0678, r24
	IN = (IN + 1);
     c56:	80 91 c2 06 	lds	r24, 0x06C2
     c5a:	90 91 c3 06 	lds	r25, 0x06C3
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	90 93 c3 06 	sts	0x06C3, r25
     c64:	80 93 c2 06 	sts	0x06C2, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
     c68:	81 ee       	ldi	r24, 0xE1	; 225
     c6a:	95 e0       	ldi	r25, 0x05	; 5
     c6c:	0e 94 b8 05 	call	0xb70	; 0xb70 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
     c70:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
     c72:	2b 9a       	sbi	0x05, 3	; 5
	
	printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
     c74:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <uitrollen+0x3e>
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <uitrollen+0x40>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <uitrollen+0x42>
     c82:	26 ee       	ldi	r18, 0xE6	; 230
     c84:	35 e0       	ldi	r19, 0x05	; 5
     c86:	ed b7       	in	r30, 0x3d	; 61
     c88:	fe b7       	in	r31, 0x3e	; 62
     c8a:	32 83       	std	Z+2, r19	; 0x02
     c8c:	21 83       	std	Z+1, r18	; 0x01
     c8e:	83 83       	std	Z+3, r24	; 0x03
     c90:	94 83       	std	Z+4, r25	; 0x04
     c92:	a5 83       	std	Z+5, r26	; 0x05
     c94:	b6 83       	std	Z+6, r27	; 0x06
     c96:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     c9a:	87 ea       	ldi	r24, 0xA7	; 167
     c9c:	91 e6       	ldi	r25, 0x61	; 97
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <uitrollen+0x5e>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <uitrollen+0x64>
     ca4:	00 00       	nop
     ca6:	ad b7       	in	r26, 0x3d	; 61
     ca8:	be b7       	in	r27, 0x3e	; 62
     caa:	16 96       	adiw	r26, 0x06	; 6
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	be bf       	out	0x3e, r27	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	ad bf       	out	0x3d, r26	; 61
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
	if (j % 2 == 0){ser_write(".");}
     cb6:	c7 e0       	ldi	r28, 0x07	; 7
     cb8:	d6 e0       	ldi	r29, 0x06	; 6
     cba:	22 c0       	rjmp	.+68     	; 0xd00 <uitrollen+0xc0>
	
	printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	_delay_ms(100);
	while (getDistance()<20){
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
     cbc:	2c 9a       	sbi	0x05, 4	; 5
     cbe:	8f e3       	ldi	r24, 0x3F	; 63
     cc0:	9d e0       	ldi	r25, 0x0D	; 13
     cc2:	a3 e0       	ldi	r26, 0x03	; 3
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	a0 40       	sbci	r26, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <uitrollen+0x84>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <uitrollen+0x8e>
     cce:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
     cd0:	2c 98       	cbi	0x05, 4	; 5
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	9d e0       	ldi	r25, 0x0D	; 13
     cd6:	a3 e0       	ldi	r26, 0x03	; 3
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	a0 40       	sbci	r26, 0x00	; 0
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <uitrollen+0x98>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <uitrollen+0xa2>
     ce2:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
     ce4:	80 91 c0 06 	lds	r24, 0x06C0
     ce8:	90 91 c1 06 	lds	r25, 0x06C1
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	90 93 c1 06 	sts	0x06C1, r25
     cf2:	80 93 c0 06 	sts	0x06C0, r24
	if (j % 2 == 0){ser_write(".");}
     cf6:	80 fd       	sbrc	r24, 0
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <uitrollen+0xc0>
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 b8 05 	call	0xb70	; 0xb70 <ser_write>
	
	PORTB |= _BV(PORTB3);
	
	printf("Zonneschermuitrollen % 6.2f cm \n", getDistance());
	_delay_ms(100);
	while (getDistance()<20){
     d00:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 ea       	ldi	r20, 0xA0	; 160
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__cmpsf2>
     d10:	88 23       	and	r24, r24
     d12:	a4 f2       	brlt	.-88     	; 0xcbc <uitrollen+0x7c>
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
	if (j % 2 == 0){ser_write(".");}
}
j = 0;
     d14:	10 92 c1 06 	sts	0x06C1, r1
     d18:	10 92 c0 06 	sts	0x06C0, r1
printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
     d1c:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	00 d0       	rcall	.+0      	; 0xd26 <uitrollen+0xe6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <uitrollen+0xe8>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <uitrollen+0xea>
     d2a:	29 e0       	ldi	r18, 0x09	; 9
     d2c:	36 e0       	ldi	r19, 0x06	; 6
     d2e:	ed b7       	in	r30, 0x3d	; 61
     d30:	fe b7       	in	r31, 0x3e	; 62
     d32:	32 83       	std	Z+2, r19	; 0x02
     d34:	21 83       	std	Z+1, r18	; 0x01
     d36:	83 83       	std	Z+3, r24	; 0x03
     d38:	94 83       	std	Z+4, r25	; 0x04
     d3a:	a5 83       	std	Z+5, r26	; 0x05
     d3c:	b6 83       	std	Z+6, r27	; 0x06
     d3e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
ser_writeln("\n\r201 Zonnescherm is uitgerold\n");
     d42:	8d b7       	in	r24, 0x3d	; 61
     d44:	9e b7       	in	r25, 0x3e	; 62
     d46:	06 96       	adiw	r24, 0x06	; 6
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	9e bf       	out	0x3e, r25	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	8d bf       	out	0x3d, r24	; 61
     d52:	89 e2       	ldi	r24, 0x29	; 41
     d54:	96 e0       	ldi	r25, 0x06	; 6
     d56:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
     d5a:	8f e3       	ldi	r24, 0x3F	; 63
     d5c:	9d e0       	ldi	r25, 0x0D	; 13
     d5e:	a3 e0       	ldi	r26, 0x03	; 3
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	90 40       	sbci	r25, 0x00	; 0
     d64:	a0 40       	sbci	r26, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <uitrollen+0x120>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <uitrollen+0x12a>
     d6a:	00 00       	nop
_delay_ms(DELAY_MS);
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <oprollen>:

void oprollen(){
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
	IN = (IN + 1);
     d76:	80 91 c2 06 	lds	r24, 0x06C2
     d7a:	90 91 c3 06 	lds	r25, 0x06C3
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 c3 06 	sts	0x06C3, r25
     d84:	80 93 c2 06 	sts	0x06C2, r24
	OUT = (OUT + 1);
     d88:	80 91 78 06 	lds	r24, 0x0678
     d8c:	90 91 79 06 	lds	r25, 0x0679
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	90 93 79 06 	sts	0x0679, r25
     d96:	80 93 78 06 	sts	0x0678, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
     d9a:	81 ee       	ldi	r24, 0xE1	; 225
     d9c:	95 e0       	ldi	r25, 0x05	; 5
     d9e:	0e 94 b8 05 	call	0xb70	; 0xb70 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
     da2:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
     da4:	2d 9a       	sbi	0x05, 5	; 5
	
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
     da6:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <oprollen+0x3e>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <oprollen+0x40>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <oprollen+0x42>
     db4:	29 e0       	ldi	r18, 0x09	; 9
     db6:	36 e0       	ldi	r19, 0x06	; 6
     db8:	ed b7       	in	r30, 0x3d	; 61
     dba:	fe b7       	in	r31, 0x3e	; 62
     dbc:	32 83       	std	Z+2, r19	; 0x02
     dbe:	21 83       	std	Z+1, r18	; 0x01
     dc0:	83 83       	std	Z+3, r24	; 0x03
     dc2:	94 83       	std	Z+4, r25	; 0x04
     dc4:	a5 83       	std	Z+5, r26	; 0x05
     dc6:	b6 83       	std	Z+6, r27	; 0x06
     dc8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
     dcc:	87 ea       	ldi	r24, 0xA7	; 167
     dce:	91 e6       	ldi	r25, 0x61	; 97
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <oprollen+0x5e>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <oprollen+0x64>
     dd6:	00 00       	nop
     dd8:	ad b7       	in	r26, 0x3d	; 61
     dda:	be b7       	in	r27, 0x3e	; 62
     ddc:	16 96       	adiw	r26, 0x06	; 6
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	be bf       	out	0x3e, r27	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	ad bf       	out	0x3d, r26	; 61
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
     de8:	c7 e0       	ldi	r28, 0x07	; 7
     dea:	d6 e0       	ldi	r29, 0x06	; 6
     dec:	22 c0       	rjmp	.+68     	; 0xe32 <oprollen+0xc0>
	
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	_delay_ms(100);
	while (getDistance()>5){
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
     dee:	2c 9a       	sbi	0x05, 4	; 5
     df0:	8f e3       	ldi	r24, 0x3F	; 63
     df2:	9d e0       	ldi	r25, 0x0D	; 13
     df4:	a3 e0       	ldi	r26, 0x03	; 3
     df6:	81 50       	subi	r24, 0x01	; 1
     df8:	90 40       	sbci	r25, 0x00	; 0
     dfa:	a0 40       	sbci	r26, 0x00	; 0
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <oprollen+0x84>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <oprollen+0x8e>
     e00:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
     e02:	2c 98       	cbi	0x05, 4	; 5
     e04:	8f e3       	ldi	r24, 0x3F	; 63
     e06:	9d e0       	ldi	r25, 0x0D	; 13
     e08:	a3 e0       	ldi	r26, 0x03	; 3
     e0a:	81 50       	subi	r24, 0x01	; 1
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	a0 40       	sbci	r26, 0x00	; 0
     e10:	e1 f7       	brne	.-8      	; 0xe0a <oprollen+0x98>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <oprollen+0xa2>
     e14:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
     e16:	80 91 c0 06 	lds	r24, 0x06C0
     e1a:	90 91 c1 06 	lds	r25, 0x06C1
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	90 93 c1 06 	sts	0x06C1, r25
     e24:	80 93 c0 06 	sts	0x06C0, r24
		if (j % 2 == 0){ser_write(".");}
     e28:	80 fd       	sbrc	r24, 0
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <oprollen+0xc0>
     e2c:	ce 01       	movw	r24, r28
     e2e:	0e 94 b8 05 	call	0xb70	; 0xb70 <ser_write>
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
	
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
	_delay_ms(100);
	while (getDistance()>5){
     e32:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 ea       	ldi	r20, 0xA0	; 160
     e3c:	50 e4       	ldi	r21, 0x40	; 64
     e3e:	0e 94 99 08 	call	0x1132	; 0x1132 <__gesf2>
     e42:	18 16       	cp	r1, r24
     e44:	a4 f2       	brlt	.-88     	; 0xdee <oprollen+0x7c>
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
		}			
		j = 0;
     e46:	10 92 c1 06 	sts	0x06C1, r1
     e4a:	10 92 c0 06 	sts	0x06C0, r1
		printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
     e4e:	0e 94 11 01 	call	0x222	; 0x222 <getDistance>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	00 d0       	rcall	.+0      	; 0xe58 <oprollen+0xe6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <oprollen+0xe8>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <oprollen+0xea>
     e5c:	29 e0       	ldi	r18, 0x09	; 9
     e5e:	36 e0       	ldi	r19, 0x06	; 6
     e60:	ed b7       	in	r30, 0x3d	; 61
     e62:	fe b7       	in	r31, 0x3e	; 62
     e64:	32 83       	std	Z+2, r19	; 0x02
     e66:	21 83       	std	Z+1, r18	; 0x01
     e68:	83 83       	std	Z+3, r24	; 0x03
     e6a:	94 83       	std	Z+4, r25	; 0x04
     e6c:	a5 83       	std	Z+5, r26	; 0x05
     e6e:	b6 83       	std	Z+6, r27	; 0x06
     e70:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <printf>
		ser_writeln("\n\r201 Zonnescherm is opgerold\n");
     e74:	8d b7       	in	r24, 0x3d	; 61
     e76:	9e b7       	in	r25, 0x3e	; 62
     e78:	06 96       	adiw	r24, 0x06	; 6
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	9e bf       	out	0x3e, r25	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	8d bf       	out	0x3d, r24	; 61
     e84:	89 e4       	ldi	r24, 0x49	; 73
     e86:	96 e0       	ldi	r25, 0x06	; 6
     e88:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ser_writeln>
     e8c:	8f e3       	ldi	r24, 0x3F	; 63
     e8e:	9d e0       	ldi	r25, 0x0D	; 13
     e90:	a3 e0       	ldi	r26, 0x03	; 3
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	90 40       	sbci	r25, 0x00	; 0
     e96:	a0 40       	sbci	r26, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <oprollen+0x120>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <oprollen+0x12a>
     e9c:	00 00       	nop
		_delay_ms(DELAY_MS);
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <__subsf3>:
     ea4:	50 58       	subi	r21, 0x80	; 128

00000ea6 <__addsf3>:
     ea6:	bb 27       	eor	r27, r27
     ea8:	aa 27       	eor	r26, r26
     eaa:	0e d0       	rcall	.+28     	; 0xec8 <__addsf3x>
     eac:	08 c1       	rjmp	.+528    	; 0x10be <__fp_round>
     eae:	f9 d0       	rcall	.+498    	; 0x10a2 <__fp_pscA>
     eb0:	30 f0       	brcs	.+12     	; 0xebe <__addsf3+0x18>
     eb2:	fe d0       	rcall	.+508    	; 0x10b0 <__fp_pscB>
     eb4:	20 f0       	brcs	.+8      	; 0xebe <__addsf3+0x18>
     eb6:	31 f4       	brne	.+12     	; 0xec4 <__addsf3+0x1e>
     eb8:	9f 3f       	cpi	r25, 0xFF	; 255
     eba:	11 f4       	brne	.+4      	; 0xec0 <__addsf3+0x1a>
     ebc:	1e f4       	brtc	.+6      	; 0xec4 <__addsf3+0x1e>
     ebe:	ee c0       	rjmp	.+476    	; 0x109c <__fp_nan>
     ec0:	0e f4       	brtc	.+2      	; 0xec4 <__addsf3+0x1e>
     ec2:	e0 95       	com	r30
     ec4:	e7 fb       	bst	r30, 7
     ec6:	e4 c0       	rjmp	.+456    	; 0x1090 <__fp_inf>

00000ec8 <__addsf3x>:
     ec8:	e9 2f       	mov	r30, r25
     eca:	0a d1       	rcall	.+532    	; 0x10e0 <__fp_split3>
     ecc:	80 f3       	brcs	.-32     	; 0xeae <__addsf3+0x8>
     ece:	ba 17       	cp	r27, r26
     ed0:	62 07       	cpc	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	95 07       	cpc	r25, r21
     ed8:	18 f0       	brcs	.+6      	; 0xee0 <__addsf3x+0x18>
     eda:	71 f4       	brne	.+28     	; 0xef8 <__addsf3x+0x30>
     edc:	9e f5       	brtc	.+102    	; 0xf44 <__addsf3x+0x7c>
     ede:	22 c1       	rjmp	.+580    	; 0x1124 <__fp_zero>
     ee0:	0e f4       	brtc	.+2      	; 0xee4 <__addsf3x+0x1c>
     ee2:	e0 95       	com	r30
     ee4:	0b 2e       	mov	r0, r27
     ee6:	ba 2f       	mov	r27, r26
     ee8:	a0 2d       	mov	r26, r0
     eea:	0b 01       	movw	r0, r22
     eec:	b9 01       	movw	r22, r18
     eee:	90 01       	movw	r18, r0
     ef0:	0c 01       	movw	r0, r24
     ef2:	ca 01       	movw	r24, r20
     ef4:	a0 01       	movw	r20, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	ff 27       	eor	r31, r31
     efa:	59 1b       	sub	r21, r25
     efc:	99 f0       	breq	.+38     	; 0xf24 <__addsf3x+0x5c>
     efe:	59 3f       	cpi	r21, 0xF9	; 249
     f00:	50 f4       	brcc	.+20     	; 0xf16 <__addsf3x+0x4e>
     f02:	50 3e       	cpi	r21, 0xE0	; 224
     f04:	68 f1       	brcs	.+90     	; 0xf60 <__addsf3x+0x98>
     f06:	1a 16       	cp	r1, r26
     f08:	f0 40       	sbci	r31, 0x00	; 0
     f0a:	a2 2f       	mov	r26, r18
     f0c:	23 2f       	mov	r18, r19
     f0e:	34 2f       	mov	r19, r20
     f10:	44 27       	eor	r20, r20
     f12:	58 5f       	subi	r21, 0xF8	; 248
     f14:	f3 cf       	rjmp	.-26     	; 0xefc <__addsf3x+0x34>
     f16:	46 95       	lsr	r20
     f18:	37 95       	ror	r19
     f1a:	27 95       	ror	r18
     f1c:	a7 95       	ror	r26
     f1e:	f0 40       	sbci	r31, 0x00	; 0
     f20:	53 95       	inc	r21
     f22:	c9 f7       	brne	.-14     	; 0xf16 <__addsf3x+0x4e>
     f24:	7e f4       	brtc	.+30     	; 0xf44 <__addsf3x+0x7c>
     f26:	1f 16       	cp	r1, r31
     f28:	ba 0b       	sbc	r27, r26
     f2a:	62 0b       	sbc	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	ba f0       	brmi	.+46     	; 0xf60 <__addsf3x+0x98>
     f32:	91 50       	subi	r25, 0x01	; 1
     f34:	a1 f0       	breq	.+40     	; 0xf5e <__addsf3x+0x96>
     f36:	ff 0f       	add	r31, r31
     f38:	bb 1f       	adc	r27, r27
     f3a:	66 1f       	adc	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	c2 f7       	brpl	.-16     	; 0xf32 <__addsf3x+0x6a>
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <__addsf3x+0x98>
     f44:	ba 0f       	add	r27, r26
     f46:	62 1f       	adc	r22, r18
     f48:	73 1f       	adc	r23, r19
     f4a:	84 1f       	adc	r24, r20
     f4c:	48 f4       	brcc	.+18     	; 0xf60 <__addsf3x+0x98>
     f4e:	87 95       	ror	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f7 95       	ror	r31
     f58:	9e 3f       	cpi	r25, 0xFE	; 254
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <__addsf3x+0x96>
     f5c:	b3 cf       	rjmp	.-154    	; 0xec4 <__addsf3+0x1e>
     f5e:	93 95       	inc	r25
     f60:	88 0f       	add	r24, r24
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__addsf3x+0x9e>
     f64:	99 27       	eor	r25, r25
     f66:	ee 0f       	add	r30, r30
     f68:	97 95       	ror	r25
     f6a:	87 95       	ror	r24
     f6c:	08 95       	ret

00000f6e <__cmpsf2>:
     f6e:	6c d0       	rcall	.+216    	; 0x1048 <__fp_cmp>
     f70:	08 f4       	brcc	.+2      	; 0xf74 <__cmpsf2+0x6>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret

00000f76 <__fixunssfsi>:
     f76:	bc d0       	rcall	.+376    	; 0x10f0 <__fp_splitA>
     f78:	88 f0       	brcs	.+34     	; 0xf9c <__fixunssfsi+0x26>
     f7a:	9f 57       	subi	r25, 0x7F	; 127
     f7c:	90 f0       	brcs	.+36     	; 0xfa2 <__fixunssfsi+0x2c>
     f7e:	b9 2f       	mov	r27, r25
     f80:	99 27       	eor	r25, r25
     f82:	b7 51       	subi	r27, 0x17	; 23
     f84:	a0 f0       	brcs	.+40     	; 0xfae <__fixunssfsi+0x38>
     f86:	d1 f0       	breq	.+52     	; 0xfbc <__fixunssfsi+0x46>
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	1a f0       	brmi	.+6      	; 0xf98 <__fixunssfsi+0x22>
     f92:	ba 95       	dec	r27
     f94:	c9 f7       	brne	.-14     	; 0xf88 <__fixunssfsi+0x12>
     f96:	12 c0       	rjmp	.+36     	; 0xfbc <__fixunssfsi+0x46>
     f98:	b1 30       	cpi	r27, 0x01	; 1
     f9a:	81 f0       	breq	.+32     	; 0xfbc <__fixunssfsi+0x46>
     f9c:	c3 d0       	rcall	.+390    	; 0x1124 <__fp_zero>
     f9e:	b1 e0       	ldi	r27, 0x01	; 1
     fa0:	08 95       	ret
     fa2:	c0 c0       	rjmp	.+384    	; 0x1124 <__fp_zero>
     fa4:	67 2f       	mov	r22, r23
     fa6:	78 2f       	mov	r23, r24
     fa8:	88 27       	eor	r24, r24
     faa:	b8 5f       	subi	r27, 0xF8	; 248
     fac:	39 f0       	breq	.+14     	; 0xfbc <__fixunssfsi+0x46>
     fae:	b9 3f       	cpi	r27, 0xF9	; 249
     fb0:	cc f3       	brlt	.-14     	; 0xfa4 <__fixunssfsi+0x2e>
     fb2:	86 95       	lsr	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b3 95       	inc	r27
     fba:	d9 f7       	brne	.-10     	; 0xfb2 <__fixunssfsi+0x3c>
     fbc:	3e f4       	brtc	.+14     	; 0xfcc <__fixunssfsi+0x56>
     fbe:	90 95       	com	r25
     fc0:	80 95       	com	r24
     fc2:	70 95       	com	r23
     fc4:	61 95       	neg	r22
     fc6:	7f 4f       	sbci	r23, 0xFF	; 255
     fc8:	8f 4f       	sbci	r24, 0xFF	; 255
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	08 95       	ret

00000fce <__floatunsisf>:
     fce:	e8 94       	clt
     fd0:	09 c0       	rjmp	.+18     	; 0xfe4 <__floatsisf+0x12>

00000fd2 <__floatsisf>:
     fd2:	97 fb       	bst	r25, 7
     fd4:	3e f4       	brtc	.+14     	; 0xfe4 <__floatsisf+0x12>
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	99 23       	and	r25, r25
     fe6:	a9 f0       	breq	.+42     	; 0x1012 <__floatsisf+0x40>
     fe8:	f9 2f       	mov	r31, r25
     fea:	96 e9       	ldi	r25, 0x96	; 150
     fec:	bb 27       	eor	r27, r27
     fee:	93 95       	inc	r25
     ff0:	f6 95       	lsr	r31
     ff2:	87 95       	ror	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	b7 95       	ror	r27
     ffa:	f1 11       	cpse	r31, r1
     ffc:	f8 cf       	rjmp	.-16     	; 0xfee <__floatsisf+0x1c>
     ffe:	fa f4       	brpl	.+62     	; 0x103e <__floatsisf+0x6c>
    1000:	bb 0f       	add	r27, r27
    1002:	11 f4       	brne	.+4      	; 0x1008 <__floatsisf+0x36>
    1004:	60 ff       	sbrs	r22, 0
    1006:	1b c0       	rjmp	.+54     	; 0x103e <__floatsisf+0x6c>
    1008:	6f 5f       	subi	r22, 0xFF	; 255
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	8f 4f       	sbci	r24, 0xFF	; 255
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	16 c0       	rjmp	.+44     	; 0x103e <__floatsisf+0x6c>
    1012:	88 23       	and	r24, r24
    1014:	11 f0       	breq	.+4      	; 0x101a <__floatsisf+0x48>
    1016:	96 e9       	ldi	r25, 0x96	; 150
    1018:	11 c0       	rjmp	.+34     	; 0x103c <__floatsisf+0x6a>
    101a:	77 23       	and	r23, r23
    101c:	21 f0       	breq	.+8      	; 0x1026 <__floatsisf+0x54>
    101e:	9e e8       	ldi	r25, 0x8E	; 142
    1020:	87 2f       	mov	r24, r23
    1022:	76 2f       	mov	r23, r22
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <__floatsisf+0x5e>
    1026:	66 23       	and	r22, r22
    1028:	71 f0       	breq	.+28     	; 0x1046 <__floatsisf+0x74>
    102a:	96 e8       	ldi	r25, 0x86	; 134
    102c:	86 2f       	mov	r24, r22
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	2a f0       	brmi	.+10     	; 0x103e <__floatsisf+0x6c>
    1034:	9a 95       	dec	r25
    1036:	66 0f       	add	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	da f7       	brpl	.-10     	; 0x1034 <__floatsisf+0x62>
    103e:	88 0f       	add	r24, r24
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	97 f9       	bld	r25, 7
    1046:	08 95       	ret

00001048 <__fp_cmp>:
    1048:	99 0f       	add	r25, r25
    104a:	00 08       	sbc	r0, r0
    104c:	55 0f       	add	r21, r21
    104e:	aa 0b       	sbc	r26, r26
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	fe ef       	ldi	r31, 0xFE	; 254
    1054:	16 16       	cp	r1, r22
    1056:	17 06       	cpc	r1, r23
    1058:	e8 07       	cpc	r30, r24
    105a:	f9 07       	cpc	r31, r25
    105c:	c0 f0       	brcs	.+48     	; 0x108e <__fp_cmp+0x46>
    105e:	12 16       	cp	r1, r18
    1060:	13 06       	cpc	r1, r19
    1062:	e4 07       	cpc	r30, r20
    1064:	f5 07       	cpc	r31, r21
    1066:	98 f0       	brcs	.+38     	; 0x108e <__fp_cmp+0x46>
    1068:	62 1b       	sub	r22, r18
    106a:	73 0b       	sbc	r23, r19
    106c:	84 0b       	sbc	r24, r20
    106e:	95 0b       	sbc	r25, r21
    1070:	39 f4       	brne	.+14     	; 0x1080 <__fp_cmp+0x38>
    1072:	0a 26       	eor	r0, r26
    1074:	61 f0       	breq	.+24     	; 0x108e <__fp_cmp+0x46>
    1076:	23 2b       	or	r18, r19
    1078:	24 2b       	or	r18, r20
    107a:	25 2b       	or	r18, r21
    107c:	21 f4       	brne	.+8      	; 0x1086 <__fp_cmp+0x3e>
    107e:	08 95       	ret
    1080:	0a 26       	eor	r0, r26
    1082:	09 f4       	brne	.+2      	; 0x1086 <__fp_cmp+0x3e>
    1084:	a1 40       	sbci	r26, 0x01	; 1
    1086:	a6 95       	lsr	r26
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	81 1d       	adc	r24, r1
    108c:	81 1d       	adc	r24, r1
    108e:	08 95       	ret

00001090 <__fp_inf>:
    1090:	97 f9       	bld	r25, 7
    1092:	9f 67       	ori	r25, 0x7F	; 127
    1094:	80 e8       	ldi	r24, 0x80	; 128
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	08 95       	ret

0000109c <__fp_nan>:
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	80 ec       	ldi	r24, 0xC0	; 192
    10a0:	08 95       	ret

000010a2 <__fp_pscA>:
    10a2:	00 24       	eor	r0, r0
    10a4:	0a 94       	dec	r0
    10a6:	16 16       	cp	r1, r22
    10a8:	17 06       	cpc	r1, r23
    10aa:	18 06       	cpc	r1, r24
    10ac:	09 06       	cpc	r0, r25
    10ae:	08 95       	ret

000010b0 <__fp_pscB>:
    10b0:	00 24       	eor	r0, r0
    10b2:	0a 94       	dec	r0
    10b4:	12 16       	cp	r1, r18
    10b6:	13 06       	cpc	r1, r19
    10b8:	14 06       	cpc	r1, r20
    10ba:	05 06       	cpc	r0, r21
    10bc:	08 95       	ret

000010be <__fp_round>:
    10be:	09 2e       	mov	r0, r25
    10c0:	03 94       	inc	r0
    10c2:	00 0c       	add	r0, r0
    10c4:	11 f4       	brne	.+4      	; 0x10ca <__fp_round+0xc>
    10c6:	88 23       	and	r24, r24
    10c8:	52 f0       	brmi	.+20     	; 0x10de <__fp_round+0x20>
    10ca:	bb 0f       	add	r27, r27
    10cc:	40 f4       	brcc	.+16     	; 0x10de <__fp_round+0x20>
    10ce:	bf 2b       	or	r27, r31
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <__fp_round+0x18>
    10d2:	60 ff       	sbrs	r22, 0
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <__fp_round+0x20>
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	08 95       	ret

000010e0 <__fp_split3>:
    10e0:	57 fd       	sbrc	r21, 7
    10e2:	90 58       	subi	r25, 0x80	; 128
    10e4:	44 0f       	add	r20, r20
    10e6:	55 1f       	adc	r21, r21
    10e8:	59 f0       	breq	.+22     	; 0x1100 <__fp_splitA+0x10>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	71 f0       	breq	.+28     	; 0x110a <__fp_splitA+0x1a>
    10ee:	47 95       	ror	r20

000010f0 <__fp_splitA>:
    10f0:	88 0f       	add	r24, r24
    10f2:	97 fb       	bst	r25, 7
    10f4:	99 1f       	adc	r25, r25
    10f6:	61 f0       	breq	.+24     	; 0x1110 <__fp_splitA+0x20>
    10f8:	9f 3f       	cpi	r25, 0xFF	; 255
    10fa:	79 f0       	breq	.+30     	; 0x111a <__fp_splitA+0x2a>
    10fc:	87 95       	ror	r24
    10fe:	08 95       	ret
    1100:	12 16       	cp	r1, r18
    1102:	13 06       	cpc	r1, r19
    1104:	14 06       	cpc	r1, r20
    1106:	55 1f       	adc	r21, r21
    1108:	f2 cf       	rjmp	.-28     	; 0x10ee <__fp_split3+0xe>
    110a:	46 95       	lsr	r20
    110c:	f1 df       	rcall	.-30     	; 0x10f0 <__fp_splitA>
    110e:	08 c0       	rjmp	.+16     	; 0x1120 <__fp_splitA+0x30>
    1110:	16 16       	cp	r1, r22
    1112:	17 06       	cpc	r1, r23
    1114:	18 06       	cpc	r1, r24
    1116:	99 1f       	adc	r25, r25
    1118:	f1 cf       	rjmp	.-30     	; 0x10fc <__fp_splitA+0xc>
    111a:	86 95       	lsr	r24
    111c:	71 05       	cpc	r23, r1
    111e:	61 05       	cpc	r22, r1
    1120:	08 94       	sec
    1122:	08 95       	ret

00001124 <__fp_zero>:
    1124:	e8 94       	clt

00001126 <__fp_szero>:
    1126:	bb 27       	eor	r27, r27
    1128:	66 27       	eor	r22, r22
    112a:	77 27       	eor	r23, r23
    112c:	cb 01       	movw	r24, r22
    112e:	97 f9       	bld	r25, 7
    1130:	08 95       	ret

00001132 <__gesf2>:
    1132:	8a df       	rcall	.-236    	; 0x1048 <__fp_cmp>
    1134:	08 f4       	brcc	.+2      	; 0x1138 <__gesf2+0x6>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	08 95       	ret

0000113a <__mulsf3>:
    113a:	0b d0       	rcall	.+22     	; 0x1152 <__mulsf3x>
    113c:	c0 cf       	rjmp	.-128    	; 0x10be <__fp_round>
    113e:	b1 df       	rcall	.-158    	; 0x10a2 <__fp_pscA>
    1140:	28 f0       	brcs	.+10     	; 0x114c <__mulsf3+0x12>
    1142:	b6 df       	rcall	.-148    	; 0x10b0 <__fp_pscB>
    1144:	18 f0       	brcs	.+6      	; 0x114c <__mulsf3+0x12>
    1146:	95 23       	and	r25, r21
    1148:	09 f0       	breq	.+2      	; 0x114c <__mulsf3+0x12>
    114a:	a2 cf       	rjmp	.-188    	; 0x1090 <__fp_inf>
    114c:	a7 cf       	rjmp	.-178    	; 0x109c <__fp_nan>
    114e:	11 24       	eor	r1, r1
    1150:	ea cf       	rjmp	.-44     	; 0x1126 <__fp_szero>

00001152 <__mulsf3x>:
    1152:	c6 df       	rcall	.-116    	; 0x10e0 <__fp_split3>
    1154:	a0 f3       	brcs	.-24     	; 0x113e <__mulsf3+0x4>

00001156 <__mulsf3_pse>:
    1156:	95 9f       	mul	r25, r21
    1158:	d1 f3       	breq	.-12     	; 0x114e <__mulsf3+0x14>
    115a:	95 0f       	add	r25, r21
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	55 1f       	adc	r21, r21
    1160:	62 9f       	mul	r22, r18
    1162:	f0 01       	movw	r30, r0
    1164:	72 9f       	mul	r23, r18
    1166:	bb 27       	eor	r27, r27
    1168:	f0 0d       	add	r31, r0
    116a:	b1 1d       	adc	r27, r1
    116c:	63 9f       	mul	r22, r19
    116e:	aa 27       	eor	r26, r26
    1170:	f0 0d       	add	r31, r0
    1172:	b1 1d       	adc	r27, r1
    1174:	aa 1f       	adc	r26, r26
    1176:	64 9f       	mul	r22, r20
    1178:	66 27       	eor	r22, r22
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	66 1f       	adc	r22, r22
    1180:	82 9f       	mul	r24, r18
    1182:	22 27       	eor	r18, r18
    1184:	b0 0d       	add	r27, r0
    1186:	a1 1d       	adc	r26, r1
    1188:	62 1f       	adc	r22, r18
    118a:	73 9f       	mul	r23, r19
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	62 1f       	adc	r22, r18
    1192:	83 9f       	mul	r24, r19
    1194:	a0 0d       	add	r26, r0
    1196:	61 1d       	adc	r22, r1
    1198:	22 1f       	adc	r18, r18
    119a:	74 9f       	mul	r23, r20
    119c:	33 27       	eor	r19, r19
    119e:	a0 0d       	add	r26, r0
    11a0:	61 1d       	adc	r22, r1
    11a2:	23 1f       	adc	r18, r19
    11a4:	84 9f       	mul	r24, r20
    11a6:	60 0d       	add	r22, r0
    11a8:	21 1d       	adc	r18, r1
    11aa:	82 2f       	mov	r24, r18
    11ac:	76 2f       	mov	r23, r22
    11ae:	6a 2f       	mov	r22, r26
    11b0:	11 24       	eor	r1, r1
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	8a f0       	brmi	.+34     	; 0x11da <__mulsf3_pse+0x84>
    11b8:	e1 f0       	breq	.+56     	; 0x11f2 <__mulsf3_pse+0x9c>
    11ba:	88 23       	and	r24, r24
    11bc:	4a f0       	brmi	.+18     	; 0x11d0 <__mulsf3_pse+0x7a>
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__mulsf3_pse+0x64>
    11d0:	9e 3f       	cpi	r25, 0xFE	; 254
    11d2:	51 05       	cpc	r21, r1
    11d4:	70 f0       	brcs	.+28     	; 0x11f2 <__mulsf3_pse+0x9c>
    11d6:	5c cf       	rjmp	.-328    	; 0x1090 <__fp_inf>
    11d8:	a6 cf       	rjmp	.-180    	; 0x1126 <__fp_szero>
    11da:	5f 3f       	cpi	r21, 0xFF	; 255
    11dc:	ec f3       	brlt	.-6      	; 0x11d8 <__mulsf3_pse+0x82>
    11de:	98 3e       	cpi	r25, 0xE8	; 232
    11e0:	dc f3       	brlt	.-10     	; 0x11d8 <__mulsf3_pse+0x82>
    11e2:	86 95       	lsr	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	f7 95       	ror	r31
    11ec:	e7 95       	ror	r30
    11ee:	9f 5f       	subi	r25, 0xFF	; 255
    11f0:	c1 f7       	brne	.-16     	; 0x11e2 <__mulsf3_pse+0x8c>
    11f2:	fe 2b       	or	r31, r30
    11f4:	88 0f       	add	r24, r24
    11f6:	91 1d       	adc	r25, r1
    11f8:	96 95       	lsr	r25
    11fa:	87 95       	ror	r24
    11fc:	97 f9       	bld	r25, 7
    11fe:	08 95       	ret

00001200 <vfprintf>:
    1200:	a5 e1       	ldi	r26, 0x15	; 21
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e0       	ldi	r30, 0x06	; 6
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__prologue_saves__>
    120c:	4c 01       	movw	r8, r24
    120e:	7f 87       	std	Y+15, r23	; 0x0f
    1210:	6e 87       	std	Y+14, r22	; 0x0e
    1212:	fc 01       	movw	r30, r24
    1214:	17 82       	std	Z+7, r1	; 0x07
    1216:	16 82       	std	Z+6, r1	; 0x06
    1218:	83 81       	ldd	r24, Z+3	; 0x03
    121a:	81 fd       	sbrc	r24, 1
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <vfprintf+0x26>
    121e:	76 c3       	rjmp	.+1772   	; 0x190c <vfprintf+0x70c>
    1220:	4c 85       	ldd	r20, Y+12	; 0x0c
    1222:	5d 85       	ldd	r21, Y+13	; 0x0d
    1224:	04 c0       	rjmp	.+8      	; 0x122e <vfprintf+0x2e>
    1226:	1e 01       	movw	r2, r28
    1228:	08 94       	sec
    122a:	21 1c       	adc	r2, r1
    122c:	31 1c       	adc	r3, r1
    122e:	f4 01       	movw	r30, r8
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	ee 85       	ldd	r30, Y+14	; 0x0e
    1234:	ff 85       	ldd	r31, Y+15	; 0x0f
    1236:	93 fd       	sbrc	r25, 3
    1238:	85 91       	lpm	r24, Z+
    123a:	93 ff       	sbrs	r25, 3
    123c:	81 91       	ld	r24, Z+
    123e:	ff 87       	std	Y+15, r31	; 0x0f
    1240:	ee 87       	std	Y+14, r30	; 0x0e
    1242:	88 23       	and	r24, r24
    1244:	09 f4       	brne	.+2      	; 0x1248 <vfprintf+0x48>
    1246:	5e c3       	rjmp	.+1724   	; 0x1904 <vfprintf+0x704>
    1248:	85 32       	cpi	r24, 0x25	; 37
    124a:	41 f4       	brne	.+16     	; 0x125c <vfprintf+0x5c>
    124c:	93 fd       	sbrc	r25, 3
    124e:	85 91       	lpm	r24, Z+
    1250:	93 ff       	sbrs	r25, 3
    1252:	81 91       	ld	r24, Z+
    1254:	ff 87       	std	Y+15, r31	; 0x0f
    1256:	ee 87       	std	Y+14, r30	; 0x0e
    1258:	85 32       	cpi	r24, 0x25	; 37
    125a:	59 f4       	brne	.+22     	; 0x1272 <vfprintf+0x72>
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	b4 01       	movw	r22, r8
    1260:	4c 8b       	std	Y+20, r20	; 0x14
    1262:	5d 8b       	std	Y+21, r21	; 0x15
    1264:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1268:	4c 89       	ldd	r20, Y+20	; 0x14
    126a:	5d 89       	ldd	r21, Y+21	; 0x15
    126c:	5d 87       	std	Y+13, r21	; 0x0d
    126e:	4c 87       	std	Y+12, r20	; 0x0c
    1270:	d7 cf       	rjmp	.-82     	; 0x1220 <vfprintf+0x20>
    1272:	ff 24       	eor	r15, r15
    1274:	dd 24       	eor	r13, r13
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	10 32       	cpi	r17, 0x20	; 32
    127a:	b0 f4       	brcc	.+44     	; 0x12a8 <vfprintf+0xa8>
    127c:	8b 32       	cpi	r24, 0x2B	; 43
    127e:	69 f0       	breq	.+26     	; 0x129a <vfprintf+0x9a>
    1280:	8c 32       	cpi	r24, 0x2C	; 44
    1282:	28 f4       	brcc	.+10     	; 0x128e <vfprintf+0x8e>
    1284:	80 32       	cpi	r24, 0x20	; 32
    1286:	51 f0       	breq	.+20     	; 0x129c <vfprintf+0x9c>
    1288:	83 32       	cpi	r24, 0x23	; 35
    128a:	71 f4       	brne	.+28     	; 0x12a8 <vfprintf+0xa8>
    128c:	0b c0       	rjmp	.+22     	; 0x12a4 <vfprintf+0xa4>
    128e:	8d 32       	cpi	r24, 0x2D	; 45
    1290:	39 f0       	breq	.+14     	; 0x12a0 <vfprintf+0xa0>
    1292:	80 33       	cpi	r24, 0x30	; 48
    1294:	49 f4       	brne	.+18     	; 0x12a8 <vfprintf+0xa8>
    1296:	11 60       	ori	r17, 0x01	; 1
    1298:	2c c0       	rjmp	.+88     	; 0x12f2 <vfprintf+0xf2>
    129a:	12 60       	ori	r17, 0x02	; 2
    129c:	14 60       	ori	r17, 0x04	; 4
    129e:	29 c0       	rjmp	.+82     	; 0x12f2 <vfprintf+0xf2>
    12a0:	18 60       	ori	r17, 0x08	; 8
    12a2:	27 c0       	rjmp	.+78     	; 0x12f2 <vfprintf+0xf2>
    12a4:	10 61       	ori	r17, 0x10	; 16
    12a6:	25 c0       	rjmp	.+74     	; 0x12f2 <vfprintf+0xf2>
    12a8:	17 fd       	sbrc	r17, 7
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <vfprintf+0x108>
    12ac:	28 2f       	mov	r18, r24
    12ae:	20 53       	subi	r18, 0x30	; 48
    12b0:	2a 30       	cpi	r18, 0x0A	; 10
    12b2:	98 f4       	brcc	.+38     	; 0x12da <vfprintf+0xda>
    12b4:	16 ff       	sbrs	r17, 6
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <vfprintf+0xc8>
    12b8:	8f 2d       	mov	r24, r15
    12ba:	88 0f       	add	r24, r24
    12bc:	f8 2e       	mov	r15, r24
    12be:	ff 0c       	add	r15, r15
    12c0:	ff 0c       	add	r15, r15
    12c2:	f8 0e       	add	r15, r24
    12c4:	f2 0e       	add	r15, r18
    12c6:	15 c0       	rjmp	.+42     	; 0x12f2 <vfprintf+0xf2>
    12c8:	8d 2d       	mov	r24, r13
    12ca:	88 0f       	add	r24, r24
    12cc:	d8 2e       	mov	r13, r24
    12ce:	dd 0c       	add	r13, r13
    12d0:	dd 0c       	add	r13, r13
    12d2:	d8 0e       	add	r13, r24
    12d4:	d2 0e       	add	r13, r18
    12d6:	10 62       	ori	r17, 0x20	; 32
    12d8:	0c c0       	rjmp	.+24     	; 0x12f2 <vfprintf+0xf2>
    12da:	8e 32       	cpi	r24, 0x2E	; 46
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <vfprintf+0xe6>
    12de:	16 fd       	sbrc	r17, 6
    12e0:	11 c3       	rjmp	.+1570   	; 0x1904 <vfprintf+0x704>
    12e2:	10 64       	ori	r17, 0x40	; 64
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <vfprintf+0xf2>
    12e6:	8c 36       	cpi	r24, 0x6C	; 108
    12e8:	11 f4       	brne	.+4      	; 0x12ee <vfprintf+0xee>
    12ea:	10 68       	ori	r17, 0x80	; 128
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <vfprintf+0xf2>
    12ee:	88 36       	cpi	r24, 0x68	; 104
    12f0:	59 f4       	brne	.+22     	; 0x1308 <vfprintf+0x108>
    12f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    12f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    12f6:	93 fd       	sbrc	r25, 3
    12f8:	85 91       	lpm	r24, Z+
    12fa:	93 ff       	sbrs	r25, 3
    12fc:	81 91       	ld	r24, Z+
    12fe:	ff 87       	std	Y+15, r31	; 0x0f
    1300:	ee 87       	std	Y+14, r30	; 0x0e
    1302:	88 23       	and	r24, r24
    1304:	09 f0       	breq	.+2      	; 0x1308 <vfprintf+0x108>
    1306:	b8 cf       	rjmp	.-144    	; 0x1278 <vfprintf+0x78>
    1308:	98 2f       	mov	r25, r24
    130a:	95 54       	subi	r25, 0x45	; 69
    130c:	93 30       	cpi	r25, 0x03	; 3
    130e:	18 f4       	brcc	.+6      	; 0x1316 <vfprintf+0x116>
    1310:	10 61       	ori	r17, 0x10	; 16
    1312:	80 5e       	subi	r24, 0xE0	; 224
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <vfprintf+0x122>
    1316:	98 2f       	mov	r25, r24
    1318:	95 56       	subi	r25, 0x65	; 101
    131a:	93 30       	cpi	r25, 0x03	; 3
    131c:	08 f0       	brcs	.+2      	; 0x1320 <vfprintf+0x120>
    131e:	a2 c1       	rjmp	.+836    	; 0x1664 <vfprintf+0x464>
    1320:	1f 7e       	andi	r17, 0xEF	; 239
    1322:	16 fd       	sbrc	r17, 6
    1324:	02 c0       	rjmp	.+4      	; 0x132a <vfprintf+0x12a>
    1326:	e6 e0       	ldi	r30, 0x06	; 6
    1328:	fe 2e       	mov	r15, r30
    132a:	1f 73       	andi	r17, 0x3F	; 63
    132c:	85 36       	cpi	r24, 0x65	; 101
    132e:	11 f4       	brne	.+4      	; 0x1334 <vfprintf+0x134>
    1330:	10 64       	ori	r17, 0x40	; 64
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <vfprintf+0x140>
    1334:	86 36       	cpi	r24, 0x66	; 102
    1336:	11 f4       	brne	.+4      	; 0x133c <vfprintf+0x13c>
    1338:	10 68       	ori	r17, 0x80	; 128
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <vfprintf+0x140>
    133c:	f1 10       	cpse	r15, r1
    133e:	fa 94       	dec	r15
    1340:	17 ff       	sbrs	r17, 7
    1342:	07 c0       	rjmp	.+14     	; 0x1352 <vfprintf+0x152>
    1344:	fb e3       	ldi	r31, 0x3B	; 59
    1346:	ff 15       	cp	r31, r15
    1348:	48 f0       	brcs	.+18     	; 0x135c <vfprintf+0x15c>
    134a:	ef 2c       	mov	r14, r15
    134c:	e3 94       	inc	r14
    134e:	27 e0       	ldi	r18, 0x07	; 7
    1350:	0d c0       	rjmp	.+26     	; 0x136c <vfprintf+0x16c>
    1352:	27 e0       	ldi	r18, 0x07	; 7
    1354:	2f 15       	cp	r18, r15
    1356:	30 f0       	brcs	.+12     	; 0x1364 <vfprintf+0x164>
    1358:	2f 2d       	mov	r18, r15
    135a:	07 c0       	rjmp	.+14     	; 0x136a <vfprintf+0x16a>
    135c:	27 e0       	ldi	r18, 0x07	; 7
    135e:	7c e3       	ldi	r23, 0x3C	; 60
    1360:	e7 2e       	mov	r14, r23
    1362:	04 c0       	rjmp	.+8      	; 0x136c <vfprintf+0x16c>
    1364:	27 e0       	ldi	r18, 0x07	; 7
    1366:	67 e0       	ldi	r22, 0x07	; 7
    1368:	f6 2e       	mov	r15, r22
    136a:	ee 24       	eor	r14, r14
    136c:	ca 01       	movw	r24, r20
    136e:	04 96       	adiw	r24, 0x04	; 4
    1370:	9d 87       	std	Y+13, r25	; 0x0d
    1372:	8c 87       	std	Y+12, r24	; 0x0c
    1374:	fa 01       	movw	r30, r20
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	a1 01       	movw	r20, r2
    1380:	0e 2d       	mov	r16, r14
    1382:	0e 94 ef 0c 	call	0x19de	; 0x19de <__ftoa_engine>
    1386:	5c 01       	movw	r10, r24
    1388:	c9 80       	ldd	r12, Y+1	; 0x01
    138a:	2c 2d       	mov	r18, r12
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	39 8b       	std	Y+17, r19	; 0x11
    1390:	28 8b       	std	Y+16, r18	; 0x10
    1392:	c0 fe       	sbrs	r12, 0
    1394:	03 c0       	rjmp	.+6      	; 0x139c <vfprintf+0x19c>
    1396:	38 89       	ldd	r19, Y+16	; 0x10
    1398:	33 ff       	sbrs	r19, 3
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <vfprintf+0x1a8>
    139c:	11 fd       	sbrc	r17, 1
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <vfprintf+0x1ac>
    13a0:	12 ff       	sbrs	r17, 2
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <vfprintf+0x1b0>
    13a4:	00 e2       	ldi	r16, 0x20	; 32
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <vfprintf+0x1b2>
    13a8:	0d e2       	ldi	r16, 0x2D	; 45
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x1b2>
    13ac:	0b e2       	ldi	r16, 0x2B	; 43
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <vfprintf+0x1b2>
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	88 89       	ldd	r24, Y+16	; 0x10
    13b4:	99 89       	ldd	r25, Y+17	; 0x11
    13b6:	8c 70       	andi	r24, 0x0C	; 12
    13b8:	90 70       	andi	r25, 0x00	; 0
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <vfprintf+0x1c0>
    13be:	3c c0       	rjmp	.+120    	; 0x1438 <vfprintf+0x238>
    13c0:	00 23       	and	r16, r16
    13c2:	11 f0       	breq	.+4      	; 0x13c8 <vfprintf+0x1c8>
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <vfprintf+0x1ca>
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	8d 15       	cp	r24, r13
    13cc:	58 f4       	brcc	.+22     	; 0x13e4 <vfprintf+0x1e4>
    13ce:	d8 1a       	sub	r13, r24
    13d0:	13 fd       	sbrc	r17, 3
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <vfprintf+0x1e6>
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	b4 01       	movw	r22, r8
    13da:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    13de:	da 94       	dec	r13
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <vfprintf+0x1d4>
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <vfprintf+0x1e6>
    13e4:	dd 24       	eor	r13, r13
    13e6:	00 23       	and	r16, r16
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <vfprintf+0x1f4>
    13ea:	80 2f       	mov	r24, r16
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	b4 01       	movw	r22, r8
    13f0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    13f4:	88 89       	ldd	r24, Y+16	; 0x10
    13f6:	83 fd       	sbrc	r24, 3
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <vfprintf+0x204>
    13fa:	3c e6       	ldi	r19, 0x6C	; 108
    13fc:	e3 2e       	mov	r14, r19
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	f3 2e       	mov	r15, r19
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <vfprintf+0x226>
    1404:	28 e6       	ldi	r18, 0x68	; 104
    1406:	e2 2e       	mov	r14, r18
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	f2 2e       	mov	r15, r18
    140c:	0c c0       	rjmp	.+24     	; 0x1426 <vfprintf+0x226>
    140e:	01 15       	cp	r16, r1
    1410:	11 05       	cpc	r17, r1
    1412:	09 f0       	breq	.+2      	; 0x1416 <vfprintf+0x216>
    1414:	80 52       	subi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	b4 01       	movw	r22, r8
    141a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    141e:	08 94       	sec
    1420:	e1 1c       	adc	r14, r1
    1422:	f1 1c       	adc	r15, r1
    1424:	04 c0       	rjmp	.+8      	; 0x142e <vfprintf+0x22e>
    1426:	01 2f       	mov	r16, r17
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	00 71       	andi	r16, 0x10	; 16
    142c:	10 70       	andi	r17, 0x00	; 0
    142e:	f7 01       	movw	r30, r14
    1430:	84 91       	lpm	r24, Z
    1432:	88 23       	and	r24, r24
    1434:	61 f7       	brne	.-40     	; 0x140e <vfprintf+0x20e>
    1436:	63 c2       	rjmp	.+1222   	; 0x18fe <vfprintf+0x6fe>
    1438:	17 ff       	sbrs	r17, 7
    143a:	0e c0       	rjmp	.+28     	; 0x1458 <vfprintf+0x258>
    143c:	ea 0c       	add	r14, r10
    143e:	f8 89       	ldd	r31, Y+16	; 0x10
    1440:	f4 ff       	sbrs	r31, 4
    1442:	04 c0       	rjmp	.+8      	; 0x144c <vfprintf+0x24c>
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	81 33       	cpi	r24, 0x31	; 49
    1448:	09 f4       	brne	.+2      	; 0x144c <vfprintf+0x24c>
    144a:	ea 94       	dec	r14
    144c:	1e 14       	cp	r1, r14
    144e:	4c f5       	brge	.+82     	; 0x14a2 <vfprintf+0x2a2>
    1450:	28 e0       	ldi	r18, 0x08	; 8
    1452:	2e 15       	cp	r18, r14
    1454:	48 f1       	brcs	.+82     	; 0x14a8 <vfprintf+0x2a8>
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <vfprintf+0x2b0>
    1458:	16 fd       	sbrc	r17, 6
    145a:	2a c0       	rjmp	.+84     	; 0x14b0 <vfprintf+0x2b0>
    145c:	8f 2d       	mov	r24, r15
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	8a 15       	cp	r24, r10
    1462:	9b 05       	cpc	r25, r11
    1464:	44 f0       	brlt	.+16     	; 0x1476 <vfprintf+0x276>
    1466:	3c ef       	ldi	r19, 0xFC	; 252
    1468:	a3 16       	cp	r10, r19
    146a:	3f ef       	ldi	r19, 0xFF	; 255
    146c:	b3 06       	cpc	r11, r19
    146e:	1c f0       	brlt	.+6      	; 0x1476 <vfprintf+0x276>
    1470:	10 68       	ori	r17, 0x80	; 128
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <vfprintf+0x276>
    1474:	fa 94       	dec	r15
    1476:	ff 20       	and	r15, r15
    1478:	49 f0       	breq	.+18     	; 0x148c <vfprintf+0x28c>
    147a:	e2 e0       	ldi	r30, 0x02	; 2
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	ec 0f       	add	r30, r28
    1480:	fd 1f       	adc	r31, r29
    1482:	ef 0d       	add	r30, r15
    1484:	f1 1d       	adc	r31, r1
    1486:	80 81       	ld	r24, Z
    1488:	80 33       	cpi	r24, 0x30	; 48
    148a:	a1 f3       	breq	.-24     	; 0x1474 <vfprintf+0x274>
    148c:	17 ff       	sbrs	r17, 7
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <vfprintf+0x2b0>
    1490:	ef 2c       	mov	r14, r15
    1492:	e3 94       	inc	r14
    1494:	8f 2d       	mov	r24, r15
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a8 16       	cp	r10, r24
    149a:	b9 06       	cpc	r11, r25
    149c:	44 f4       	brge	.+16     	; 0x14ae <vfprintf+0x2ae>
    149e:	fa 18       	sub	r15, r10
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <vfprintf+0x2b0>
    14a2:	ee 24       	eor	r14, r14
    14a4:	e3 94       	inc	r14
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <vfprintf+0x2b0>
    14a8:	98 e0       	ldi	r25, 0x08	; 8
    14aa:	e9 2e       	mov	r14, r25
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x2b0>
    14ae:	ff 24       	eor	r15, r15
    14b0:	17 ff       	sbrs	r17, 7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x2c2>
    14b4:	1a 14       	cp	r1, r10
    14b6:	1b 04       	cpc	r1, r11
    14b8:	3c f4       	brge	.+14     	; 0x14c8 <vfprintf+0x2c8>
    14ba:	95 01       	movw	r18, r10
    14bc:	2f 5f       	subi	r18, 0xFF	; 255
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <vfprintf+0x2cc>
    14c2:	25 e0       	ldi	r18, 0x05	; 5
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfprintf+0x2cc>
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	00 23       	and	r16, r16
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <vfprintf+0x2d4>
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	ff 20       	and	r15, r15
    14d6:	29 f0       	breq	.+10     	; 0x14e2 <vfprintf+0x2e2>
    14d8:	8f 2d       	mov	r24, r15
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	28 0f       	add	r18, r24
    14e0:	39 1f       	adc	r19, r25
    14e2:	8d 2d       	mov	r24, r13
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	14 f4       	brge	.+4      	; 0x14f0 <vfprintf+0x2f0>
    14ec:	d2 1a       	sub	r13, r18
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <vfprintf+0x2f2>
    14f0:	dd 24       	eor	r13, r13
    14f2:	61 2e       	mov	r6, r17
    14f4:	77 24       	eor	r7, r7
    14f6:	c3 01       	movw	r24, r6
    14f8:	89 70       	andi	r24, 0x09	; 9
    14fa:	90 70       	andi	r25, 0x00	; 0
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	49 f4       	brne	.+18     	; 0x1512 <vfprintf+0x312>
    1500:	06 c0       	rjmp	.+12     	; 0x150e <vfprintf+0x30e>
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	b4 01       	movw	r22, r8
    1508:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    150c:	da 94       	dec	r13
    150e:	dd 20       	and	r13, r13
    1510:	c1 f7       	brne	.-16     	; 0x1502 <vfprintf+0x302>
    1512:	00 23       	and	r16, r16
    1514:	29 f0       	breq	.+10     	; 0x1520 <vfprintf+0x320>
    1516:	80 2f       	mov	r24, r16
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	b4 01       	movw	r22, r8
    151c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1520:	63 fc       	sbrc	r6, 3
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <vfprintf+0x336>
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <vfprintf+0x332>
    1526:	80 e3       	ldi	r24, 0x30	; 48
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	b4 01       	movw	r22, r8
    152c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1530:	da 94       	dec	r13
    1532:	dd 20       	and	r13, r13
    1534:	c1 f7       	brne	.-16     	; 0x1526 <vfprintf+0x326>
    1536:	17 ff       	sbrs	r17, 7
    1538:	48 c0       	rjmp	.+144    	; 0x15ca <vfprintf+0x3ca>
    153a:	85 01       	movw	r16, r10
    153c:	b7 fe       	sbrs	r11, 7
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0x344>
    1540:	00 e0       	ldi	r16, 0x00	; 0
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	66 24       	eor	r6, r6
    1546:	77 24       	eor	r7, r7
    1548:	95 01       	movw	r18, r10
    154a:	2e 19       	sub	r18, r14
    154c:	31 09       	sbc	r19, r1
    154e:	3b 8b       	std	Y+19, r19	; 0x13
    1550:	2a 8b       	std	Y+18, r18	; 0x12
    1552:	25 01       	movw	r4, r10
    1554:	40 1a       	sub	r4, r16
    1556:	51 0a       	sbc	r5, r17
    1558:	42 0c       	add	r4, r2
    155a:	53 1c       	adc	r5, r3
    155c:	6f 2d       	mov	r22, r15
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	ee 24       	eor	r14, r14
    1562:	ff 24       	eor	r15, r15
    1564:	e6 1a       	sub	r14, r22
    1566:	f7 0a       	sbc	r15, r23
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	0f 3f       	cpi	r16, 0xFF	; 255
    156c:	13 07       	cpc	r17, r19
    156e:	29 f4       	brne	.+10     	; 0x157a <vfprintf+0x37a>
    1570:	8e e2       	ldi	r24, 0x2E	; 46
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b4 01       	movw	r22, r8
    1576:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    157a:	a0 16       	cp	r10, r16
    157c:	b1 06       	cpc	r11, r17
    157e:	54 f0       	brlt	.+20     	; 0x1594 <vfprintf+0x394>
    1580:	2a 89       	ldd	r18, Y+18	; 0x12
    1582:	3b 89       	ldd	r19, Y+19	; 0x13
    1584:	20 17       	cp	r18, r16
    1586:	31 07       	cpc	r19, r17
    1588:	2c f4       	brge	.+10     	; 0x1594 <vfprintf+0x394>
    158a:	f2 01       	movw	r30, r4
    158c:	e6 0d       	add	r30, r6
    158e:	f7 1d       	adc	r31, r7
    1590:	81 81       	ldd	r24, Z+1	; 0x01
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <vfprintf+0x396>
    1594:	80 e3       	ldi	r24, 0x30	; 48
    1596:	01 50       	subi	r16, 0x01	; 1
    1598:	10 40       	sbci	r17, 0x00	; 0
    159a:	08 94       	sec
    159c:	61 1c       	adc	r6, r1
    159e:	71 1c       	adc	r7, r1
    15a0:	0e 15       	cp	r16, r14
    15a2:	1f 05       	cpc	r17, r15
    15a4:	2c f0       	brlt	.+10     	; 0x15b0 <vfprintf+0x3b0>
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	b4 01       	movw	r22, r8
    15aa:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    15ae:	dc cf       	rjmp	.-72     	; 0x1568 <vfprintf+0x368>
    15b0:	0a 15       	cp	r16, r10
    15b2:	1b 05       	cpc	r17, r11
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <vfprintf+0x3c6>
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	96 33       	cpi	r25, 0x36	; 54
    15ba:	20 f4       	brcc	.+8      	; 0x15c4 <vfprintf+0x3c4>
    15bc:	95 33       	cpi	r25, 0x35	; 53
    15be:	19 f4       	brne	.+6      	; 0x15c6 <vfprintf+0x3c6>
    15c0:	38 89       	ldd	r19, Y+16	; 0x10
    15c2:	34 ff       	sbrs	r19, 4
    15c4:	81 e3       	ldi	r24, 0x31	; 49
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	49 c0       	rjmp	.+146    	; 0x165c <vfprintf+0x45c>
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	81 33       	cpi	r24, 0x31	; 49
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <vfprintf+0x3d4>
    15d0:	9f ee       	ldi	r25, 0xEF	; 239
    15d2:	c9 22       	and	r12, r25
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	b4 01       	movw	r22, r8
    15d8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    15dc:	ff 20       	and	r15, r15
    15de:	89 f0       	breq	.+34     	; 0x1602 <vfprintf+0x402>
    15e0:	8e e2       	ldi	r24, 0x2E	; 46
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	b4 01       	movw	r22, r8
    15e6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    15ea:	12 e0       	ldi	r17, 0x02	; 2
    15ec:	f1 01       	movw	r30, r2
    15ee:	e1 0f       	add	r30, r17
    15f0:	f1 1d       	adc	r31, r1
    15f2:	1f 5f       	subi	r17, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	b4 01       	movw	r22, r8
    15fa:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    15fe:	fa 94       	dec	r15
    1600:	a9 f7       	brne	.-22     	; 0x15ec <vfprintf+0x3ec>
    1602:	64 fe       	sbrs	r6, 4
    1604:	03 c0       	rjmp	.+6      	; 0x160c <vfprintf+0x40c>
    1606:	85 e4       	ldi	r24, 0x45	; 69
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0x410>
    160c:	85 e6       	ldi	r24, 0x65	; 101
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	b4 01       	movw	r22, r8
    1612:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1616:	b7 fc       	sbrc	r11, 7
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <vfprintf+0x424>
    161a:	a1 14       	cp	r10, r1
    161c:	b1 04       	cpc	r11, r1
    161e:	41 f4       	brne	.+16     	; 0x1630 <vfprintf+0x430>
    1620:	c4 fe       	sbrs	r12, 4
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <vfprintf+0x430>
    1624:	b0 94       	com	r11
    1626:	a1 94       	neg	r10
    1628:	b1 08       	sbc	r11, r1
    162a:	b3 94       	inc	r11
    162c:	8d e2       	ldi	r24, 0x2D	; 45
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <vfprintf+0x432>
    1630:	8b e2       	ldi	r24, 0x2B	; 43
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	b4 01       	movw	r22, r8
    1636:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    163a:	80 e3       	ldi	r24, 0x30	; 48
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <vfprintf+0x448>
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	e6 ef       	ldi	r30, 0xF6	; 246
    1642:	ff ef       	ldi	r31, 0xFF	; 255
    1644:	ae 0e       	add	r10, r30
    1646:	bf 1e       	adc	r11, r31
    1648:	fa e0       	ldi	r31, 0x0A	; 10
    164a:	af 16       	cp	r10, r31
    164c:	b1 04       	cpc	r11, r1
    164e:	bc f7       	brge	.-18     	; 0x163e <vfprintf+0x43e>
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	b4 01       	movw	r22, r8
    1654:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1658:	c5 01       	movw	r24, r10
    165a:	c0 96       	adiw	r24, 0x30	; 48
    165c:	b4 01       	movw	r22, r8
    165e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1662:	4d c1       	rjmp	.+666    	; 0x18fe <vfprintf+0x6fe>
    1664:	83 36       	cpi	r24, 0x63	; 99
    1666:	31 f0       	breq	.+12     	; 0x1674 <vfprintf+0x474>
    1668:	83 37       	cpi	r24, 0x73	; 115
    166a:	89 f0       	breq	.+34     	; 0x168e <vfprintf+0x48e>
    166c:	83 35       	cpi	r24, 0x53	; 83
    166e:	09 f0       	breq	.+2      	; 0x1672 <vfprintf+0x472>
    1670:	59 c0       	rjmp	.+178    	; 0x1724 <vfprintf+0x524>
    1672:	22 c0       	rjmp	.+68     	; 0x16b8 <vfprintf+0x4b8>
    1674:	9a 01       	movw	r18, r20
    1676:	2e 5f       	subi	r18, 0xFE	; 254
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	3d 87       	std	Y+13, r19	; 0x0d
    167c:	2c 87       	std	Y+12, r18	; 0x0c
    167e:	fa 01       	movw	r30, r20
    1680:	80 81       	ld	r24, Z
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	e8 2e       	mov	r14, r24
    1688:	f1 2c       	mov	r15, r1
    168a:	51 01       	movw	r10, r2
    168c:	13 c0       	rjmp	.+38     	; 0x16b4 <vfprintf+0x4b4>
    168e:	9a 01       	movw	r18, r20
    1690:	2e 5f       	subi	r18, 0xFE	; 254
    1692:	3f 4f       	sbci	r19, 0xFF	; 255
    1694:	3d 87       	std	Y+13, r19	; 0x0d
    1696:	2c 87       	std	Y+12, r18	; 0x0c
    1698:	fa 01       	movw	r30, r20
    169a:	a0 80       	ld	r10, Z
    169c:	b1 80       	ldd	r11, Z+1	; 0x01
    169e:	16 ff       	sbrs	r17, 6
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x4a8>
    16a2:	6f 2d       	mov	r22, r15
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x4ac>
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f ef       	ldi	r23, 0xFF	; 255
    16ac:	c5 01       	movw	r24, r10
    16ae:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <strnlen>
    16b2:	7c 01       	movw	r14, r24
    16b4:	1f 77       	andi	r17, 0x7F	; 127
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <vfprintf+0x4e0>
    16b8:	9a 01       	movw	r18, r20
    16ba:	2e 5f       	subi	r18, 0xFE	; 254
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	3d 87       	std	Y+13, r19	; 0x0d
    16c0:	2c 87       	std	Y+12, r18	; 0x0c
    16c2:	fa 01       	movw	r30, r20
    16c4:	a0 80       	ld	r10, Z
    16c6:	b1 80       	ldd	r11, Z+1	; 0x01
    16c8:	16 ff       	sbrs	r17, 6
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <vfprintf+0x4d2>
    16cc:	6f 2d       	mov	r22, r15
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <vfprintf+0x4d6>
    16d2:	6f ef       	ldi	r22, 0xFF	; 255
    16d4:	7f ef       	ldi	r23, 0xFF	; 255
    16d6:	c5 01       	movw	r24, r10
    16d8:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <strnlen_P>
    16dc:	7c 01       	movw	r14, r24
    16de:	10 68       	ori	r17, 0x80	; 128
    16e0:	13 fd       	sbrc	r17, 3
    16e2:	1c c0       	rjmp	.+56     	; 0x171c <vfprintf+0x51c>
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x4f2>
    16e6:	80 e2       	ldi	r24, 0x20	; 32
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b4 01       	movw	r22, r8
    16ec:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    16f0:	da 94       	dec	r13
    16f2:	8d 2d       	mov	r24, r13
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	e8 16       	cp	r14, r24
    16f8:	f9 06       	cpc	r15, r25
    16fa:	a8 f3       	brcs	.-22     	; 0x16e6 <vfprintf+0x4e6>
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <vfprintf+0x51c>
    16fe:	f5 01       	movw	r30, r10
    1700:	17 fd       	sbrc	r17, 7
    1702:	85 91       	lpm	r24, Z+
    1704:	17 ff       	sbrs	r17, 7
    1706:	81 91       	ld	r24, Z+
    1708:	5f 01       	movw	r10, r30
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b4 01       	movw	r22, r8
    170e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1712:	d1 10       	cpse	r13, r1
    1714:	da 94       	dec	r13
    1716:	08 94       	sec
    1718:	e1 08       	sbc	r14, r1
    171a:	f1 08       	sbc	r15, r1
    171c:	e1 14       	cp	r14, r1
    171e:	f1 04       	cpc	r15, r1
    1720:	71 f7       	brne	.-36     	; 0x16fe <vfprintf+0x4fe>
    1722:	ed c0       	rjmp	.+474    	; 0x18fe <vfprintf+0x6fe>
    1724:	84 36       	cpi	r24, 0x64	; 100
    1726:	11 f0       	breq	.+4      	; 0x172c <vfprintf+0x52c>
    1728:	89 36       	cpi	r24, 0x69	; 105
    172a:	71 f5       	brne	.+92     	; 0x1788 <vfprintf+0x588>
    172c:	9a 01       	movw	r18, r20
    172e:	17 ff       	sbrs	r17, 7
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <vfprintf+0x546>
    1732:	2c 5f       	subi	r18, 0xFC	; 252
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	3d 87       	std	Y+13, r19	; 0x0d
    1738:	2c 87       	std	Y+12, r18	; 0x0c
    173a:	fa 01       	movw	r30, r20
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	a2 81       	ldd	r26, Z+2	; 0x02
    1742:	b3 81       	ldd	r27, Z+3	; 0x03
    1744:	0b c0       	rjmp	.+22     	; 0x175c <vfprintf+0x55c>
    1746:	2e 5f       	subi	r18, 0xFE	; 254
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	3d 87       	std	Y+13, r19	; 0x0d
    174c:	2c 87       	std	Y+12, r18	; 0x0c
    174e:	fa 01       	movw	r30, r20
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	aa 27       	eor	r26, r26
    1756:	97 fd       	sbrc	r25, 7
    1758:	a0 95       	com	r26
    175a:	ba 2f       	mov	r27, r26
    175c:	01 2f       	mov	r16, r17
    175e:	0f 76       	andi	r16, 0x6F	; 111
    1760:	b7 ff       	sbrs	r27, 7
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <vfprintf+0x574>
    1764:	b0 95       	com	r27
    1766:	a0 95       	com	r26
    1768:	90 95       	com	r25
    176a:	81 95       	neg	r24
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	af 4f       	sbci	r26, 0xFF	; 255
    1770:	bf 4f       	sbci	r27, 0xFF	; 255
    1772:	00 68       	ori	r16, 0x80	; 128
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	a1 01       	movw	r20, r2
    177a:	2a e0       	ldi	r18, 0x0A	; 10
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__ultoa_invert>
    1782:	e8 2e       	mov	r14, r24
    1784:	e2 18       	sub	r14, r2
    1786:	41 c0       	rjmp	.+130    	; 0x180a <vfprintf+0x60a>
    1788:	85 37       	cpi	r24, 0x75	; 117
    178a:	21 f4       	brne	.+8      	; 0x1794 <vfprintf+0x594>
    178c:	1f 7e       	andi	r17, 0xEF	; 239
    178e:	2a e0       	ldi	r18, 0x0A	; 10
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	20 c0       	rjmp	.+64     	; 0x17d4 <vfprintf+0x5d4>
    1794:	19 7f       	andi	r17, 0xF9	; 249
    1796:	8f 36       	cpi	r24, 0x6F	; 111
    1798:	a9 f0       	breq	.+42     	; 0x17c4 <vfprintf+0x5c4>
    179a:	80 37       	cpi	r24, 0x70	; 112
    179c:	20 f4       	brcc	.+8      	; 0x17a6 <vfprintf+0x5a6>
    179e:	88 35       	cpi	r24, 0x58	; 88
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <vfprintf+0x5a4>
    17a2:	b0 c0       	rjmp	.+352    	; 0x1904 <vfprintf+0x704>
    17a4:	0b c0       	rjmp	.+22     	; 0x17bc <vfprintf+0x5bc>
    17a6:	80 37       	cpi	r24, 0x70	; 112
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <vfprintf+0x5b2>
    17aa:	88 37       	cpi	r24, 0x78	; 120
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <vfprintf+0x5b0>
    17ae:	aa c0       	rjmp	.+340    	; 0x1904 <vfprintf+0x704>
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <vfprintf+0x5b4>
    17b2:	10 61       	ori	r17, 0x10	; 16
    17b4:	14 ff       	sbrs	r17, 4
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <vfprintf+0x5ca>
    17b8:	14 60       	ori	r17, 0x04	; 4
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <vfprintf+0x5ca>
    17bc:	14 ff       	sbrs	r17, 4
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <vfprintf+0x5d0>
    17c0:	16 60       	ori	r17, 0x06	; 6
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <vfprintf+0x5d0>
    17c4:	28 e0       	ldi	r18, 0x08	; 8
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <vfprintf+0x5d4>
    17ca:	20 e1       	ldi	r18, 0x10	; 16
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x5d4>
    17d0:	20 e1       	ldi	r18, 0x10	; 16
    17d2:	32 e0       	ldi	r19, 0x02	; 2
    17d4:	ca 01       	movw	r24, r20
    17d6:	17 ff       	sbrs	r17, 7
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <vfprintf+0x5ec>
    17da:	04 96       	adiw	r24, 0x04	; 4
    17dc:	9d 87       	std	Y+13, r25	; 0x0d
    17de:	8c 87       	std	Y+12, r24	; 0x0c
    17e0:	fa 01       	movw	r30, r20
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <vfprintf+0x5fc>
    17ec:	02 96       	adiw	r24, 0x02	; 2
    17ee:	9d 87       	std	Y+13, r25	; 0x0d
    17f0:	8c 87       	std	Y+12, r24	; 0x0c
    17f2:	fa 01       	movw	r30, r20
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a1 01       	movw	r20, r2
    17fe:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__ultoa_invert>
    1802:	e8 2e       	mov	r14, r24
    1804:	e2 18       	sub	r14, r2
    1806:	01 2f       	mov	r16, r17
    1808:	0f 77       	andi	r16, 0x7F	; 127
    180a:	06 ff       	sbrs	r16, 6
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <vfprintf+0x620>
    180e:	0e 7f       	andi	r16, 0xFE	; 254
    1810:	ef 14       	cp	r14, r15
    1812:	30 f4       	brcc	.+12     	; 0x1820 <vfprintf+0x620>
    1814:	04 ff       	sbrs	r16, 4
    1816:	06 c0       	rjmp	.+12     	; 0x1824 <vfprintf+0x624>
    1818:	02 fd       	sbrc	r16, 2
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <vfprintf+0x624>
    181c:	0f 7e       	andi	r16, 0xEF	; 239
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x624>
    1820:	1e 2d       	mov	r17, r14
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <vfprintf+0x626>
    1824:	1f 2d       	mov	r17, r15
    1826:	80 2f       	mov	r24, r16
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	04 ff       	sbrs	r16, 4
    182c:	0c c0       	rjmp	.+24     	; 0x1846 <vfprintf+0x646>
    182e:	fe 01       	movw	r30, r28
    1830:	ee 0d       	add	r30, r14
    1832:	f1 1d       	adc	r31, r1
    1834:	20 81       	ld	r18, Z
    1836:	20 33       	cpi	r18, 0x30	; 48
    1838:	11 f4       	brne	.+4      	; 0x183e <vfprintf+0x63e>
    183a:	09 7e       	andi	r16, 0xE9	; 233
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <vfprintf+0x650>
    183e:	02 ff       	sbrs	r16, 2
    1840:	06 c0       	rjmp	.+12     	; 0x184e <vfprintf+0x64e>
    1842:	1e 5f       	subi	r17, 0xFE	; 254
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <vfprintf+0x650>
    1846:	86 78       	andi	r24, 0x86	; 134
    1848:	90 70       	andi	r25, 0x00	; 0
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	09 f0       	breq	.+2      	; 0x1850 <vfprintf+0x650>
    184e:	1f 5f       	subi	r17, 0xFF	; 255
    1850:	a0 2e       	mov	r10, r16
    1852:	bb 24       	eor	r11, r11
    1854:	03 fd       	sbrc	r16, 3
    1856:	12 c0       	rjmp	.+36     	; 0x187c <vfprintf+0x67c>
    1858:	00 ff       	sbrs	r16, 0
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <vfprintf+0x676>
    185c:	fe 2c       	mov	r15, r14
    185e:	1d 15       	cp	r17, r13
    1860:	50 f4       	brcc	.+20     	; 0x1876 <vfprintf+0x676>
    1862:	fd 0c       	add	r15, r13
    1864:	f1 1a       	sub	r15, r17
    1866:	1d 2d       	mov	r17, r13
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <vfprintf+0x676>
    186a:	80 e2       	ldi	r24, 0x20	; 32
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	b4 01       	movw	r22, r8
    1870:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1874:	1f 5f       	subi	r17, 0xFF	; 255
    1876:	1d 15       	cp	r17, r13
    1878:	c0 f3       	brcs	.-16     	; 0x186a <vfprintf+0x66a>
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <vfprintf+0x684>
    187c:	1d 15       	cp	r17, r13
    187e:	10 f4       	brcc	.+4      	; 0x1884 <vfprintf+0x684>
    1880:	d1 1a       	sub	r13, r17
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <vfprintf+0x686>
    1884:	dd 24       	eor	r13, r13
    1886:	a4 fe       	sbrs	r10, 4
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <vfprintf+0x6a8>
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b4 01       	movw	r22, r8
    1890:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    1894:	a2 fe       	sbrs	r10, 2
    1896:	1f c0       	rjmp	.+62     	; 0x18d6 <vfprintf+0x6d6>
    1898:	a1 fe       	sbrs	r10, 1
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <vfprintf+0x6a2>
    189c:	88 e5       	ldi	r24, 0x58	; 88
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	10 c0       	rjmp	.+32     	; 0x18c2 <vfprintf+0x6c2>
    18a2:	88 e7       	ldi	r24, 0x78	; 120
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <vfprintf+0x6c2>
    18a8:	c5 01       	movw	r24, r10
    18aa:	86 78       	andi	r24, 0x86	; 134
    18ac:	90 70       	andi	r25, 0x00	; 0
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	91 f0       	breq	.+36     	; 0x18d6 <vfprintf+0x6d6>
    18b2:	a1 fc       	sbrc	r10, 1
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <vfprintf+0x6ba>
    18b6:	80 e2       	ldi	r24, 0x20	; 32
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <vfprintf+0x6bc>
    18ba:	8b e2       	ldi	r24, 0x2B	; 43
    18bc:	07 fd       	sbrc	r16, 7
    18be:	8d e2       	ldi	r24, 0x2D	; 45
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b4 01       	movw	r22, r8
    18c4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x6d6>
    18ca:	80 e3       	ldi	r24, 0x30	; 48
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	b4 01       	movw	r22, r8
    18d0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    18d4:	fa 94       	dec	r15
    18d6:	ef 14       	cp	r14, r15
    18d8:	c0 f3       	brcs	.-16     	; 0x18ca <vfprintf+0x6ca>
    18da:	ea 94       	dec	r14
    18dc:	f1 01       	movw	r30, r2
    18de:	ee 0d       	add	r30, r14
    18e0:	f1 1d       	adc	r31, r1
    18e2:	80 81       	ld	r24, Z
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b4 01       	movw	r22, r8
    18e8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    18ec:	ee 20       	and	r14, r14
    18ee:	a9 f7       	brne	.-22     	; 0x18da <vfprintf+0x6da>
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <vfprintf+0x6fe>
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b4 01       	movw	r22, r8
    18f8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <fputc>
    18fc:	da 94       	dec	r13
    18fe:	dd 20       	and	r13, r13
    1900:	c1 f7       	brne	.-16     	; 0x18f2 <vfprintf+0x6f2>
    1902:	8e cc       	rjmp	.-1764   	; 0x1220 <vfprintf+0x20>
    1904:	f4 01       	movw	r30, r8
    1906:	86 81       	ldd	r24, Z+6	; 0x06
    1908:	97 81       	ldd	r25, Z+7	; 0x07
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x710>
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	9f ef       	ldi	r25, 0xFF	; 255
    1910:	65 96       	adiw	r28, 0x15	; 21
    1912:	e2 e1       	ldi	r30, 0x12	; 18
    1914:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__epilogue_restores__>

00001918 <__divmodhi4>:
    1918:	97 fb       	bst	r25, 7
    191a:	09 2e       	mov	r0, r25
    191c:	07 26       	eor	r0, r23
    191e:	0a d0       	rcall	.+20     	; 0x1934 <__divmodhi4_neg1>
    1920:	77 fd       	sbrc	r23, 7
    1922:	04 d0       	rcall	.+8      	; 0x192c <__divmodhi4_neg2>
    1924:	43 d0       	rcall	.+134    	; 0x19ac <__udivmodhi4>
    1926:	06 d0       	rcall	.+12     	; 0x1934 <__divmodhi4_neg1>
    1928:	00 20       	and	r0, r0
    192a:	1a f4       	brpl	.+6      	; 0x1932 <__divmodhi4_exit>

0000192c <__divmodhi4_neg2>:
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255

00001932 <__divmodhi4_exit>:
    1932:	08 95       	ret

00001934 <__divmodhi4_neg1>:
    1934:	f6 f7       	brtc	.-4      	; 0x1932 <__divmodhi4_exit>
    1936:	90 95       	com	r25
    1938:	81 95       	neg	r24
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	08 95       	ret

0000193e <__prologue_saves__>:
    193e:	2f 92       	push	r2
    1940:	3f 92       	push	r3
    1942:	4f 92       	push	r4
    1944:	5f 92       	push	r5
    1946:	6f 92       	push	r6
    1948:	7f 92       	push	r7
    194a:	8f 92       	push	r8
    194c:	9f 92       	push	r9
    194e:	af 92       	push	r10
    1950:	bf 92       	push	r11
    1952:	cf 92       	push	r12
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	ca 1b       	sub	r28, r26
    1968:	db 0b       	sbc	r29, r27
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	09 94       	ijmp

00001976 <__epilogue_restores__>:
    1976:	2a 88       	ldd	r2, Y+18	; 0x12
    1978:	39 88       	ldd	r3, Y+17	; 0x11
    197a:	48 88       	ldd	r4, Y+16	; 0x10
    197c:	5f 84       	ldd	r5, Y+15	; 0x0f
    197e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1980:	7d 84       	ldd	r7, Y+13	; 0x0d
    1982:	8c 84       	ldd	r8, Y+12	; 0x0c
    1984:	9b 84       	ldd	r9, Y+11	; 0x0b
    1986:	aa 84       	ldd	r10, Y+10	; 0x0a
    1988:	b9 84       	ldd	r11, Y+9	; 0x09
    198a:	c8 84       	ldd	r12, Y+8	; 0x08
    198c:	df 80       	ldd	r13, Y+7	; 0x07
    198e:	ee 80       	ldd	r14, Y+6	; 0x06
    1990:	fd 80       	ldd	r15, Y+5	; 0x05
    1992:	0c 81       	ldd	r16, Y+4	; 0x04
    1994:	1b 81       	ldd	r17, Y+3	; 0x03
    1996:	aa 81       	ldd	r26, Y+2	; 0x02
    1998:	b9 81       	ldd	r27, Y+1	; 0x01
    199a:	ce 0f       	add	r28, r30
    199c:	d1 1d       	adc	r29, r1
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	ed 01       	movw	r28, r26
    19aa:	08 95       	ret

000019ac <__udivmodhi4>:
    19ac:	aa 1b       	sub	r26, r26
    19ae:	bb 1b       	sub	r27, r27
    19b0:	51 e1       	ldi	r21, 0x11	; 17
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <__udivmodhi4_ep>

000019b4 <__udivmodhi4_loop>:
    19b4:	aa 1f       	adc	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	a6 17       	cp	r26, r22
    19ba:	b7 07       	cpc	r27, r23
    19bc:	10 f0       	brcs	.+4      	; 0x19c2 <__udivmodhi4_ep>
    19be:	a6 1b       	sub	r26, r22
    19c0:	b7 0b       	sbc	r27, r23

000019c2 <__udivmodhi4_ep>:
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	5a 95       	dec	r21
    19c8:	a9 f7       	brne	.-22     	; 0x19b4 <__udivmodhi4_loop>
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	08 95       	ret

000019d4 <abort>:
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	f8 94       	cli
    19da:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <_exit>

000019de <__ftoa_engine>:
    19de:	28 30       	cpi	r18, 0x08	; 8
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <__ftoa_engine+0x6>
    19e2:	27 e0       	ldi	r18, 0x07	; 7
    19e4:	33 27       	eor	r19, r19
    19e6:	da 01       	movw	r26, r20
    19e8:	99 0f       	add	r25, r25
    19ea:	31 1d       	adc	r19, r1
    19ec:	87 fd       	sbrc	r24, 7
    19ee:	91 60       	ori	r25, 0x01	; 1
    19f0:	00 96       	adiw	r24, 0x00	; 0
    19f2:	61 05       	cpc	r22, r1
    19f4:	71 05       	cpc	r23, r1
    19f6:	39 f4       	brne	.+14     	; 0x1a06 <__ftoa_engine+0x28>
    19f8:	32 60       	ori	r19, 0x02	; 2
    19fa:	2e 5f       	subi	r18, 0xFE	; 254
    19fc:	3d 93       	st	X+, r19
    19fe:	30 e3       	ldi	r19, 0x30	; 48
    1a00:	2a 95       	dec	r18
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <__ftoa_engine+0x1e>
    1a04:	08 95       	ret
    1a06:	9f 3f       	cpi	r25, 0xFF	; 255
    1a08:	30 f0       	brcs	.+12     	; 0x1a16 <__ftoa_engine+0x38>
    1a0a:	80 38       	cpi	r24, 0x80	; 128
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	61 05       	cpc	r22, r1
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <__ftoa_engine+0x36>
    1a12:	3c 5f       	subi	r19, 0xFC	; 252
    1a14:	3c 5f       	subi	r19, 0xFC	; 252
    1a16:	3d 93       	st	X+, r19
    1a18:	91 30       	cpi	r25, 0x01	; 1
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <__ftoa_engine+0x40>
    1a1c:	80 68       	ori	r24, 0x80	; 128
    1a1e:	91 1d       	adc	r25, r1
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	1f 93       	push	r17
    1a26:	0f 93       	push	r16
    1a28:	ff 92       	push	r15
    1a2a:	ef 92       	push	r14
    1a2c:	19 2f       	mov	r17, r25
    1a2e:	98 7f       	andi	r25, 0xF8	; 248
    1a30:	96 95       	lsr	r25
    1a32:	e9 2f       	mov	r30, r25
    1a34:	96 95       	lsr	r25
    1a36:	96 95       	lsr	r25
    1a38:	e9 0f       	add	r30, r25
    1a3a:	ff 27       	eor	r31, r31
    1a3c:	e6 53       	subi	r30, 0x36	; 54
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	99 27       	eor	r25, r25
    1a42:	33 27       	eor	r19, r19
    1a44:	ee 24       	eor	r14, r14
    1a46:	ff 24       	eor	r15, r15
    1a48:	a7 01       	movw	r20, r14
    1a4a:	e7 01       	movw	r28, r14
    1a4c:	05 90       	lpm	r0, Z+
    1a4e:	08 94       	sec
    1a50:	07 94       	ror	r0
    1a52:	28 f4       	brcc	.+10     	; 0x1a5e <__ftoa_engine+0x80>
    1a54:	36 0f       	add	r19, r22
    1a56:	e7 1e       	adc	r14, r23
    1a58:	f8 1e       	adc	r15, r24
    1a5a:	49 1f       	adc	r20, r25
    1a5c:	51 1d       	adc	r21, r1
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	06 94       	lsr	r0
    1a68:	a1 f7       	brne	.-24     	; 0x1a52 <__ftoa_engine+0x74>
    1a6a:	05 90       	lpm	r0, Z+
    1a6c:	07 94       	ror	r0
    1a6e:	28 f4       	brcc	.+10     	; 0x1a7a <__ftoa_engine+0x9c>
    1a70:	e7 0e       	add	r14, r23
    1a72:	f8 1e       	adc	r15, r24
    1a74:	49 1f       	adc	r20, r25
    1a76:	56 1f       	adc	r21, r22
    1a78:	c1 1d       	adc	r28, r1
    1a7a:	77 0f       	add	r23, r23
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	66 1f       	adc	r22, r22
    1a82:	06 94       	lsr	r0
    1a84:	a1 f7       	brne	.-24     	; 0x1a6e <__ftoa_engine+0x90>
    1a86:	05 90       	lpm	r0, Z+
    1a88:	07 94       	ror	r0
    1a8a:	28 f4       	brcc	.+10     	; 0x1a96 <__ftoa_engine+0xb8>
    1a8c:	f8 0e       	add	r15, r24
    1a8e:	49 1f       	adc	r20, r25
    1a90:	56 1f       	adc	r21, r22
    1a92:	c7 1f       	adc	r28, r23
    1a94:	d1 1d       	adc	r29, r1
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	66 1f       	adc	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	06 94       	lsr	r0
    1aa0:	a1 f7       	brne	.-24     	; 0x1a8a <__ftoa_engine+0xac>
    1aa2:	05 90       	lpm	r0, Z+
    1aa4:	07 94       	ror	r0
    1aa6:	20 f4       	brcc	.+8      	; 0x1ab0 <__ftoa_engine+0xd2>
    1aa8:	49 0f       	add	r20, r25
    1aaa:	56 1f       	adc	r21, r22
    1aac:	c7 1f       	adc	r28, r23
    1aae:	d8 1f       	adc	r29, r24
    1ab0:	99 0f       	add	r25, r25
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	06 94       	lsr	r0
    1aba:	a9 f7       	brne	.-22     	; 0x1aa6 <__ftoa_engine+0xc8>
    1abc:	84 91       	lpm	r24, Z
    1abe:	10 95       	com	r17
    1ac0:	17 70       	andi	r17, 0x07	; 7
    1ac2:	41 f0       	breq	.+16     	; 0x1ad4 <__ftoa_engine+0xf6>
    1ac4:	d6 95       	lsr	r29
    1ac6:	c7 95       	ror	r28
    1ac8:	57 95       	ror	r21
    1aca:	47 95       	ror	r20
    1acc:	f7 94       	ror	r15
    1ace:	e7 94       	ror	r14
    1ad0:	1a 95       	dec	r17
    1ad2:	c1 f7       	brne	.-16     	; 0x1ac4 <__ftoa_engine+0xe6>
    1ad4:	e0 e7       	ldi	r30, 0x70	; 112
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	68 94       	set
    1ada:	15 90       	lpm	r1, Z+
    1adc:	15 91       	lpm	r17, Z+
    1ade:	35 91       	lpm	r19, Z+
    1ae0:	65 91       	lpm	r22, Z+
    1ae2:	95 91       	lpm	r25, Z+
    1ae4:	05 90       	lpm	r0, Z+
    1ae6:	7f e2       	ldi	r23, 0x2F	; 47
    1ae8:	73 95       	inc	r23
    1aea:	e1 18       	sub	r14, r1
    1aec:	f1 0a       	sbc	r15, r17
    1aee:	43 0b       	sbc	r20, r19
    1af0:	56 0b       	sbc	r21, r22
    1af2:	c9 0b       	sbc	r28, r25
    1af4:	d0 09       	sbc	r29, r0
    1af6:	c0 f7       	brcc	.-16     	; 0x1ae8 <__ftoa_engine+0x10a>
    1af8:	e1 0c       	add	r14, r1
    1afa:	f1 1e       	adc	r15, r17
    1afc:	43 1f       	adc	r20, r19
    1afe:	56 1f       	adc	r21, r22
    1b00:	c9 1f       	adc	r28, r25
    1b02:	d0 1d       	adc	r29, r0
    1b04:	7e f4       	brtc	.+30     	; 0x1b24 <__ftoa_engine+0x146>
    1b06:	70 33       	cpi	r23, 0x30	; 48
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <__ftoa_engine+0x130>
    1b0a:	8a 95       	dec	r24
    1b0c:	e6 cf       	rjmp	.-52     	; 0x1ada <__ftoa_engine+0xfc>
    1b0e:	e8 94       	clt
    1b10:	01 50       	subi	r16, 0x01	; 1
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <__ftoa_engine+0x142>
    1b14:	08 0f       	add	r16, r24
    1b16:	0a f4       	brpl	.+2      	; 0x1b1a <__ftoa_engine+0x13c>
    1b18:	00 27       	eor	r16, r16
    1b1a:	02 17       	cp	r16, r18
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <__ftoa_engine+0x142>
    1b1e:	20 2f       	mov	r18, r16
    1b20:	23 95       	inc	r18
    1b22:	02 2f       	mov	r16, r18
    1b24:	7a 33       	cpi	r23, 0x3A	; 58
    1b26:	28 f0       	brcs	.+10     	; 0x1b32 <__ftoa_engine+0x154>
    1b28:	79 e3       	ldi	r23, 0x39	; 57
    1b2a:	7d 93       	st	X+, r23
    1b2c:	2a 95       	dec	r18
    1b2e:	e9 f7       	brne	.-6      	; 0x1b2a <__ftoa_engine+0x14c>
    1b30:	10 c0       	rjmp	.+32     	; 0x1b52 <__ftoa_engine+0x174>
    1b32:	7d 93       	st	X+, r23
    1b34:	2a 95       	dec	r18
    1b36:	89 f6       	brne	.-94     	; 0x1ada <__ftoa_engine+0xfc>
    1b38:	06 94       	lsr	r0
    1b3a:	97 95       	ror	r25
    1b3c:	67 95       	ror	r22
    1b3e:	37 95       	ror	r19
    1b40:	17 95       	ror	r17
    1b42:	17 94       	ror	r1
    1b44:	e1 18       	sub	r14, r1
    1b46:	f1 0a       	sbc	r15, r17
    1b48:	43 0b       	sbc	r20, r19
    1b4a:	56 0b       	sbc	r21, r22
    1b4c:	c9 0b       	sbc	r28, r25
    1b4e:	d0 09       	sbc	r29, r0
    1b50:	98 f0       	brcs	.+38     	; 0x1b78 <__ftoa_engine+0x19a>
    1b52:	23 95       	inc	r18
    1b54:	7e 91       	ld	r23, -X
    1b56:	73 95       	inc	r23
    1b58:	7a 33       	cpi	r23, 0x3A	; 58
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <__ftoa_engine+0x180>
    1b5c:	70 e3       	ldi	r23, 0x30	; 48
    1b5e:	7c 93       	st	X, r23
    1b60:	20 13       	cpse	r18, r16
    1b62:	b8 f7       	brcc	.-18     	; 0x1b52 <__ftoa_engine+0x174>
    1b64:	7e 91       	ld	r23, -X
    1b66:	70 61       	ori	r23, 0x10	; 16
    1b68:	7d 93       	st	X+, r23
    1b6a:	30 f0       	brcs	.+12     	; 0x1b78 <__ftoa_engine+0x19a>
    1b6c:	83 95       	inc	r24
    1b6e:	71 e3       	ldi	r23, 0x31	; 49
    1b70:	7d 93       	st	X+, r23
    1b72:	70 e3       	ldi	r23, 0x30	; 48
    1b74:	2a 95       	dec	r18
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <__ftoa_engine+0x192>
    1b78:	11 24       	eor	r1, r1
    1b7a:	ef 90       	pop	r14
    1b7c:	ff 90       	pop	r15
    1b7e:	0f 91       	pop	r16
    1b80:	1f 91       	pop	r17
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	99 27       	eor	r25, r25
    1b88:	87 fd       	sbrc	r24, 7
    1b8a:	90 95       	com	r25
    1b8c:	08 95       	ret

00001b8e <strnlen_P>:
    1b8e:	fc 01       	movw	r30, r24
    1b90:	05 90       	lpm	r0, Z+
    1b92:	61 50       	subi	r22, 0x01	; 1
    1b94:	70 40       	sbci	r23, 0x00	; 0
    1b96:	01 10       	cpse	r0, r1
    1b98:	d8 f7       	brcc	.-10     	; 0x1b90 <strnlen_P+0x2>
    1b9a:	80 95       	com	r24
    1b9c:	90 95       	com	r25
    1b9e:	8e 0f       	add	r24, r30
    1ba0:	9f 1f       	adc	r25, r31
    1ba2:	08 95       	ret

00001ba4 <strcmp>:
    1ba4:	fb 01       	movw	r30, r22
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	8d 91       	ld	r24, X+
    1baa:	01 90       	ld	r0, Z+
    1bac:	80 19       	sub	r24, r0
    1bae:	01 10       	cpse	r0, r1
    1bb0:	d9 f3       	breq	.-10     	; 0x1ba8 <strcmp+0x4>
    1bb2:	99 0b       	sbc	r25, r25
    1bb4:	08 95       	ret

00001bb6 <strnlen>:
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	61 50       	subi	r22, 0x01	; 1
    1bba:	70 40       	sbci	r23, 0x00	; 0
    1bbc:	01 90       	ld	r0, Z+
    1bbe:	01 10       	cpse	r0, r1
    1bc0:	d8 f7       	brcc	.-10     	; 0x1bb8 <strnlen+0x2>
    1bc2:	80 95       	com	r24
    1bc4:	90 95       	com	r25
    1bc6:	8e 0f       	add	r24, r30
    1bc8:	9f 1f       	adc	r25, r31
    1bca:	08 95       	ret

00001bcc <fputc>:
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	8c 01       	movw	r16, r24
    1bd6:	eb 01       	movw	r28, r22
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	81 ff       	sbrs	r24, 1
    1bdc:	1b c0       	rjmp	.+54     	; 0x1c14 <fputc+0x48>
    1bde:	82 ff       	sbrs	r24, 2
    1be0:	0d c0       	rjmp	.+26     	; 0x1bfc <fputc+0x30>
    1be2:	2e 81       	ldd	r18, Y+6	; 0x06
    1be4:	3f 81       	ldd	r19, Y+7	; 0x07
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bea:	28 17       	cp	r18, r24
    1bec:	39 07       	cpc	r19, r25
    1bee:	64 f4       	brge	.+24     	; 0x1c08 <fputc+0x3c>
    1bf0:	e8 81       	ld	r30, Y
    1bf2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf4:	01 93       	st	Z+, r16
    1bf6:	f9 83       	std	Y+1, r31	; 0x01
    1bf8:	e8 83       	st	Y, r30
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <fputc+0x3c>
    1bfc:	e8 85       	ldd	r30, Y+8	; 0x08
    1bfe:	f9 85       	ldd	r31, Y+9	; 0x09
    1c00:	80 2f       	mov	r24, r16
    1c02:	09 95       	icall
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	31 f4       	brne	.+12     	; 0x1c14 <fputc+0x48>
    1c08:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	9f 83       	std	Y+7, r25	; 0x07
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <fputc+0x4c>
    1c14:	0f ef       	ldi	r16, 0xFF	; 255
    1c16:	1f ef       	ldi	r17, 0xFF	; 255
    1c18:	c8 01       	movw	r24, r16
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	08 95       	ret

00001c24 <printf>:
    1c24:	a0 e0       	ldi	r26, 0x00	; 0
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e1       	ldi	r30, 0x18	; 24
    1c2a:	fe e0       	ldi	r31, 0x0E	; 14
    1c2c:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__prologue_saves__+0x20>
    1c30:	fe 01       	movw	r30, r28
    1c32:	35 96       	adiw	r30, 0x05	; 5
    1c34:	61 91       	ld	r22, Z+
    1c36:	71 91       	ld	r23, Z+
    1c38:	80 91 c6 06 	lds	r24, 0x06C6
    1c3c:	90 91 c7 06 	lds	r25, 0x06C7
    1c40:	af 01       	movw	r20, r30
    1c42:	0e 94 00 09 	call	0x1200	; 0x1200 <vfprintf>
    1c46:	20 96       	adiw	r28, 0x00	; 0
    1c48:	e2 e0       	ldi	r30, 0x02	; 2
    1c4a:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__epilogue_restores__+0x20>

00001c4e <__ultoa_invert>:
    1c4e:	fa 01       	movw	r30, r20
    1c50:	aa 27       	eor	r26, r26
    1c52:	28 30       	cpi	r18, 0x08	; 8
    1c54:	51 f1       	breq	.+84     	; 0x1caa <__ultoa_invert+0x5c>
    1c56:	20 31       	cpi	r18, 0x10	; 16
    1c58:	81 f1       	breq	.+96     	; 0x1cba <__ultoa_invert+0x6c>
    1c5a:	e8 94       	clt
    1c5c:	6f 93       	push	r22
    1c5e:	6e 7f       	andi	r22, 0xFE	; 254
    1c60:	6e 5f       	subi	r22, 0xFE	; 254
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	8f 4f       	sbci	r24, 0xFF	; 255
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	af 4f       	sbci	r26, 0xFF	; 255
    1c6a:	b1 e0       	ldi	r27, 0x01	; 1
    1c6c:	3e d0       	rcall	.+124    	; 0x1cea <__ultoa_invert+0x9c>
    1c6e:	b4 e0       	ldi	r27, 0x04	; 4
    1c70:	3c d0       	rcall	.+120    	; 0x1cea <__ultoa_invert+0x9c>
    1c72:	67 0f       	add	r22, r23
    1c74:	78 1f       	adc	r23, r24
    1c76:	89 1f       	adc	r24, r25
    1c78:	9a 1f       	adc	r25, r26
    1c7a:	a1 1d       	adc	r26, r1
    1c7c:	68 0f       	add	r22, r24
    1c7e:	79 1f       	adc	r23, r25
    1c80:	8a 1f       	adc	r24, r26
    1c82:	91 1d       	adc	r25, r1
    1c84:	a1 1d       	adc	r26, r1
    1c86:	6a 0f       	add	r22, r26
    1c88:	71 1d       	adc	r23, r1
    1c8a:	81 1d       	adc	r24, r1
    1c8c:	91 1d       	adc	r25, r1
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	20 d0       	rcall	.+64     	; 0x1cd2 <__ultoa_invert+0x84>
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <__ultoa_invert+0x48>
    1c94:	68 94       	set
    1c96:	3f 91       	pop	r19
    1c98:	2a e0       	ldi	r18, 0x0A	; 10
    1c9a:	26 9f       	mul	r18, r22
    1c9c:	11 24       	eor	r1, r1
    1c9e:	30 19       	sub	r19, r0
    1ca0:	30 5d       	subi	r19, 0xD0	; 208
    1ca2:	31 93       	st	Z+, r19
    1ca4:	de f6       	brtc	.-74     	; 0x1c5c <__ultoa_invert+0xe>
    1ca6:	cf 01       	movw	r24, r30
    1ca8:	08 95       	ret
    1caa:	46 2f       	mov	r20, r22
    1cac:	47 70       	andi	r20, 0x07	; 7
    1cae:	40 5d       	subi	r20, 0xD0	; 208
    1cb0:	41 93       	st	Z+, r20
    1cb2:	b3 e0       	ldi	r27, 0x03	; 3
    1cb4:	0f d0       	rcall	.+30     	; 0x1cd4 <__ultoa_invert+0x86>
    1cb6:	c9 f7       	brne	.-14     	; 0x1caa <__ultoa_invert+0x5c>
    1cb8:	f6 cf       	rjmp	.-20     	; 0x1ca6 <__ultoa_invert+0x58>
    1cba:	46 2f       	mov	r20, r22
    1cbc:	4f 70       	andi	r20, 0x0F	; 15
    1cbe:	40 5d       	subi	r20, 0xD0	; 208
    1cc0:	4a 33       	cpi	r20, 0x3A	; 58
    1cc2:	18 f0       	brcs	.+6      	; 0x1cca <__ultoa_invert+0x7c>
    1cc4:	49 5d       	subi	r20, 0xD9	; 217
    1cc6:	31 fd       	sbrc	r19, 1
    1cc8:	40 52       	subi	r20, 0x20	; 32
    1cca:	41 93       	st	Z+, r20
    1ccc:	02 d0       	rcall	.+4      	; 0x1cd2 <__ultoa_invert+0x84>
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__ultoa_invert+0x6c>
    1cd0:	ea cf       	rjmp	.-44     	; 0x1ca6 <__ultoa_invert+0x58>
    1cd2:	b4 e0       	ldi	r27, 0x04	; 4
    1cd4:	a6 95       	lsr	r26
    1cd6:	97 95       	ror	r25
    1cd8:	87 95       	ror	r24
    1cda:	77 95       	ror	r23
    1cdc:	67 95       	ror	r22
    1cde:	ba 95       	dec	r27
    1ce0:	c9 f7       	brne	.-14     	; 0x1cd4 <__ultoa_invert+0x86>
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	61 05       	cpc	r22, r1
    1ce6:	71 05       	cpc	r23, r1
    1ce8:	08 95       	ret
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	0a 2e       	mov	r0, r26
    1cf0:	06 94       	lsr	r0
    1cf2:	57 95       	ror	r21
    1cf4:	47 95       	ror	r20
    1cf6:	37 95       	ror	r19
    1cf8:	27 95       	ror	r18
    1cfa:	ba 95       	dec	r27
    1cfc:	c9 f7       	brne	.-14     	; 0x1cf0 <__ultoa_invert+0xa2>
    1cfe:	62 0f       	add	r22, r18
    1d00:	73 1f       	adc	r23, r19
    1d02:	84 1f       	adc	r24, r20
    1d04:	95 1f       	adc	r25, r21
    1d06:	a0 1d       	adc	r26, r0
    1d08:	08 95       	ret

00001d0a <_exit>:
    1d0a:	f8 94       	cli

00001d0c <__stop_program>:
    1d0c:	ff cf       	rjmp	.-2      	; 0x1d0c <__stop_program>
