
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f2  00800100  00002396  0000242a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  008005f2  008005f2  0000291c  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00006678  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002718  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dac  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f7  00000000  00000000  00009d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  0000b354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084a  00000000  00000000  0000ba24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c4f  00000000  00000000  0000c26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000debd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	15 e0       	ldi	r17, 0x05	; 5
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	e6 e9       	ldi	r30, 0x96	; 150
     1ba:	f3 e2       	ldi	r31, 0x23	; 35
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a2 3f       	cpi	r26, 0xF2	; 242
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	a2 ef       	ldi	r26, 0xF2	; 242
     1cc:	b5 e0       	ldi	r27, 0x05	; 5
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ac 32       	cpi	r26, 0x2C	; 44
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c4 01 	call	0x388	; 0x388 <main>
     1dc:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 f2 05 	lds	r24, 0x05F2
     262:	90 91 f3 05 	lds	r25, 0x05F3
}	
     266:	08 95       	ret

00000268 <getDistance>:
	gewenste resultaten toonde.
*/

double getDistance(){
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     268:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26a:	8f e3       	ldi	r24, 0x3F	; 63
     26c:	9c e9       	ldi	r25, 0x9C	; 156
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <getDistance+0x6>
     272:	00 c0       	rjmp	.+0      	; 0x274 <getDistance+0xc>
     274:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     276:	28 98       	cbi	0x05, 0	; 5
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	91 ee       	ldi	r25, 0xE1	; 225
     27c:	a4 e0       	ldi	r26, 0x04	; 4
     27e:	81 50       	subi	r24, 0x01	; 1
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	a0 40       	sbci	r26, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <getDistance+0x16>
     286:	00 c0       	rjmp	.+0      	; 0x288 <getDistance+0x20>
     288:	00 00       	nop
	_delay_ms(100);
	afstand = (pulse * 0.5) * 0.0023;
     28a:	60 91 00 06 	lds	r22, 0x0600
     28e:	70 91 01 06 	lds	r23, 0x0601
     292:	80 91 02 06 	lds	r24, 0x0602
     296:	90 91 03 06 	lds	r25, 0x0603
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e3       	ldi	r21, 0x3F	; 63
     2a2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     2a6:	29 e9       	ldi	r18, 0x99	; 153
     2a8:	3b eb       	ldi	r19, 0xBB	; 187
     2aa:	46 e1       	ldi	r20, 0x16	; 22
     2ac:	5b e3       	ldi	r21, 0x3B	; 59
     2ae:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     2b2:	26 2f       	mov	r18, r22
     2b4:	37 2f       	mov	r19, r23
     2b6:	f8 2f       	mov	r31, r24
     2b8:	e9 2f       	mov	r30, r25
     2ba:	46 2f       	mov	r20, r22
     2bc:	57 2f       	mov	r21, r23
     2be:	68 2f       	mov	r22, r24
     2c0:	79 2f       	mov	r23, r25
     2c2:	40 93 fa 05 	sts	0x05FA, r20
     2c6:	50 93 fb 05 	sts	0x05FB, r21
     2ca:	60 93 fc 05 	sts	0x05FC, r22
     2ce:	70 93 fd 05 	sts	0x05FD, r23
	return afstand;
}
     2d2:	82 2f       	mov	r24, r18
     2d4:	93 2f       	mov	r25, r19
     2d6:	af 2f       	mov	r26, r31
     2d8:	be 2f       	mov	r27, r30
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	08 95       	ret

000002e0 <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2e0:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e4:	68 2f       	mov	r22, r24
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatsisf>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 ea       	ldi	r20, 0xA0	; 160
     2f6:	5b e3       	ldi	r21, 0x3B	; 59
     2f8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     2fc:	26 2f       	mov	r18, r22
     2fe:	37 2f       	mov	r19, r23
     300:	f8 2f       	mov	r31, r24
     302:	e9 2f       	mov	r30, r25
     304:	46 2f       	mov	r20, r22
     306:	57 2f       	mov	r21, r23
     308:	68 2f       	mov	r22, r24
     30a:	79 2f       	mov	r23, r25
     30c:	40 93 08 06 	sts	0x0608, r20
     310:	50 93 09 06 	sts	0x0609, r21
     314:	60 93 0a 06 	sts	0x060A, r22
     318:	70 93 0b 06 	sts	0x060B, r23
	ADCRes = (Volt - 0.5) * 100;
     31c:	82 2f       	mov	r24, r18
     31e:	93 2f       	mov	r25, r19
     320:	af 2f       	mov	r26, r31
     322:	be 2f       	mov	r27, r30
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__subsf3>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	48 ec       	ldi	r20, 0xC8	; 200
     33a:	52 e4       	ldi	r21, 0x42	; 66
     33c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     340:	26 2f       	mov	r18, r22
     342:	37 2f       	mov	r19, r23
     344:	f8 2f       	mov	r31, r24
     346:	e9 2f       	mov	r30, r25
     348:	46 2f       	mov	r20, r22
     34a:	57 2f       	mov	r21, r23
     34c:	68 2f       	mov	r22, r24
     34e:	79 2f       	mov	r23, r25
     350:	40 93 2c 06 	sts	0x062C, r20
     354:	50 93 2d 06 	sts	0x062D, r21
     358:	60 93 2e 06 	sts	0x062E, r22
     35c:	70 93 2f 06 	sts	0x062F, r23
	return ADCRes;
}
     360:	82 2f       	mov	r24, r18
     362:	93 2f       	mov	r25, r19
     364:	af 2f       	mov	r26, r31
     366:	be 2f       	mov	r27, r30
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	08 95       	ret

0000036e <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36e:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     372:	08 95       	ret

00000374 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     378:	9c e9       	ldi	r25, 0x9C	; 156
     37a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     37c:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     380:	85 b5       	in	r24, 0x25	; 37
     382:	85 60       	ori	r24, 0x05	; 5
     384:	85 bd       	out	0x25, r24	; 37
}
     386:	08 95       	ret

00000388 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     388:	0e 94 bc 07 	call	0xf78	; 0xf78 <init_scherm_ports>
	init_timer();
     38c:	0e 94 ba 01 	call	0x374	; 0x374 <init_timer>
	ser_init();
     390:	0e 94 30 07 	call	0xe60	; 0xe60 <ser_init>
	ADC_init();
     394:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     398:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     39c:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     3a0:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     3a2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <protocolCom>
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <main+0x1a>

000003a8 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	2f 93       	push	r18
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
	extraTime1++;
     3b8:	80 91 f4 05 	lds	r24, 0x05F4
     3bc:	90 91 f5 05 	lds	r25, 0x05F5
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 f5 05 	sts	0x05F5, r25
     3c6:	80 93 f4 05 	sts	0x05F4, r24
	if(extraTime1>100){
     3ca:	80 91 f4 05 	lds	r24, 0x05F4
     3ce:	90 91 f5 05 	lds	r25, 0x05F5
     3d2:	85 36       	cpi	r24, 0x65	; 101
     3d4:	91 05       	cpc	r25, r1
     3d6:	6c f0       	brlt	.+26     	; 0x3f2 <__vector_14+0x4a>
		timerVariable++;
     3d8:	80 91 f2 05 	lds	r24, 0x05F2
     3dc:	90 91 f3 05 	lds	r25, 0x05F3
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	90 93 f3 05 	sts	0x05F3, r25
     3e6:	80 93 f2 05 	sts	0x05F2, r24
		extraTime1 = 0;
     3ea:	10 92 f5 05 	sts	0x05F5, r1
     3ee:	10 92 f4 05 	sts	0x05F4, r1
	}
	extraTime++;
     3f2:	80 91 f6 05 	lds	r24, 0x05F6
     3f6:	90 91 f7 05 	lds	r25, 0x05F7
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	90 93 f7 05 	sts	0x05F7, r25
     400:	80 93 f6 05 	sts	0x05F6, r24
	if(extraTime>6000){
     404:	80 91 f6 05 	lds	r24, 0x05F6
     408:	90 91 f7 05 	lds	r25, 0x05F7
     40c:	27 e1       	ldi	r18, 0x17	; 23
     40e:	81 37       	cpi	r24, 0x71	; 113
     410:	92 07       	cpc	r25, r18
     412:	24 f0       	brlt	.+8      	; 0x41c <__vector_14+0x74>
		}	
	
		index++;
		
		// Resets de timer en de Totale timer ticks*/
		extraTime = 0;
     414:	10 92 f7 05 	sts	0x05F7, r1
     418:	10 92 f6 05 	sts	0x05F6, r1
	}
}
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	2f 91       	pop	r18
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <__vector_2>:

ISR(INT1_vect)
{
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	2f 93       	push	r18
     438:	3f 93       	push	r19
     43a:	4f 93       	push	r20
     43c:	5f 93       	push	r21
     43e:	6f 93       	push	r22
     440:	7f 93       	push	r23
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	if(i == 1)
     452:	80 91 fe 05 	lds	r24, 0x05FE
     456:	90 91 ff 05 	lds	r25, 0x05FF
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	91 05       	cpc	r25, r1
     45e:	d1 f4       	brne	.+52     	; 0x494 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     460:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     464:	c4 e8       	ldi	r28, 0x84	; 132
     466:	d0 e0       	ldi	r29, 0x00	; 0
     468:	68 81       	ld	r22, Y
     46a:	79 81       	ldd	r23, Y+1	; 0x01
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatunsisf>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	80 93 00 06 	sts	0x0600, r24
     47c:	90 93 01 06 	sts	0x0601, r25
     480:	a0 93 02 06 	sts	0x0602, r26
     484:	b0 93 03 06 	sts	0x0603, r27
		TCNT1 = 0; //Reset duration
     488:	19 82       	std	Y+1, r1	; 0x01
     48a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     48c:	10 92 ff 05 	sts	0x05FF, r1
     490:	10 92 fe 05 	sts	0x05FE, r1
	}

	if(i==0)
     494:	80 91 fe 05 	lds	r24, 0x05FE
     498:	90 91 ff 05 	lds	r25, 0x05FF
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	59 f4       	brne	.+22     	; 0x4b6 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     4a0:	e1 e8       	ldi	r30, 0x81	; 129
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
		i = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 ff 05 	sts	0x05FF, r25
     4b2:	80 93 fe 05 	sts	0x05FE, r24
	}
     4b6:	ff 91       	pop	r31
     4b8:	ef 91       	pop	r30
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <set_maxUnroll>:
		}
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	8c 01       	movw	r16, r24
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     4e6:	c0 91 68 05 	lds	r28, 0x0568
     4ea:	d0 91 69 05 	lds	r29, 0x0569
     4ee:	80 91 74 05 	lds	r24, 0x0574
     4f2:	90 91 75 05 	lds	r25, 0x0575
     4f6:	99 23       	and	r25, r25
     4f8:	cc f0       	brlt	.+50     	; 0x52c <set_maxUnroll+0x50>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     4fe:	f8 01       	movw	r30, r16
     500:	e8 0f       	add	r30, r24
     502:	f9 1f       	adc	r31, r25
     504:	ce 01       	movw	r24, r28
     506:	60 81       	ld	r22, Z
     508:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
		return minUnrollRes;
	}

	//Zetten van de maximale uitrol.
	void set_maxUnroll(char* uit){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     50c:	21 96       	adiw	r28, 0x01	; 1
     50e:	80 91 68 05 	lds	r24, 0x0568
     512:	90 91 69 05 	lds	r25, 0x0569
     516:	9e 01       	movw	r18, r28
     518:	28 1b       	sub	r18, r24
     51a:	39 0b       	sbc	r19, r25
     51c:	c9 01       	movw	r24, r18
     51e:	20 91 74 05 	lds	r18, 0x0574
     522:	30 91 75 05 	lds	r19, 0x0575
     526:	28 17       	cp	r18, r24
     528:	39 07       	cpc	r19, r25
     52a:	4c f7       	brge	.-46     	; 0x4fe <set_maxUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		}
	}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <set_minUnroll>:
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	8c 01       	movw	r16, r24
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     540:	c0 91 6a 05 	lds	r28, 0x056A
     544:	d0 91 6b 05 	lds	r29, 0x056B
     548:	80 91 76 05 	lds	r24, 0x0576
     54c:	90 91 77 05 	lds	r25, 0x0577
     550:	99 23       	and	r25, r25
     552:	cc f0       	brlt	.+50     	; 0x586 <set_minUnroll+0x50>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     558:	f8 01       	movw	r30, r16
     55a:	e8 0f       	add	r30, r24
     55c:	f9 1f       	adc	r31, r25
     55e:	ce 01       	movw	r24, r28
     560:	60 81       	ld	r22, Z
     562:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
		return grens_lichtintRes;
	}

	//Zetten van de maximale inrol.
	void set_minUnroll(char* in){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     566:	21 96       	adiw	r28, 0x01	; 1
     568:	80 91 6a 05 	lds	r24, 0x056A
     56c:	90 91 6b 05 	lds	r25, 0x056B
     570:	9e 01       	movw	r18, r28
     572:	28 1b       	sub	r18, r24
     574:	39 0b       	sbc	r19, r25
     576:	c9 01       	movw	r24, r18
     578:	20 91 76 05 	lds	r18, 0x0576
     57c:	30 91 77 05 	lds	r19, 0x0577
     580:	28 17       	cp	r18, r24
     582:	39 07       	cpc	r19, r25
     584:	4c f7       	brge	.-46     	; 0x558 <set_minUnroll+0x22>
			eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		}
		
	}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <set_grensLicht>:
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	8c 01       	movw	r16, r24
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     59a:	c0 91 6c 05 	lds	r28, 0x056C
     59e:	d0 91 6d 05 	lds	r29, 0x056D
     5a2:	80 91 78 05 	lds	r24, 0x0578
     5a6:	90 91 79 05 	lds	r25, 0x0579
     5aa:	99 23       	and	r25, r25
     5ac:	cc f0       	brlt	.+50     	; 0x5e0 <set_grensLicht+0x50>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     5b2:	f8 01       	movw	r30, r16
     5b4:	e8 0f       	add	r30, r24
     5b6:	f9 1f       	adc	r31, r25
     5b8:	ce 01       	movw	r24, r28
     5ba:	60 81       	ld	r22, Z
     5bc:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
		return grens_temperatuurRes;
	}

	//Zetten van grens_lichtintensiteit grenswaarde.
	void set_grensLicht(char* li){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     5c0:	21 96       	adiw	r28, 0x01	; 1
     5c2:	80 91 6c 05 	lds	r24, 0x056C
     5c6:	90 91 6d 05 	lds	r25, 0x056D
     5ca:	9e 01       	movw	r18, r28
     5cc:	28 1b       	sub	r18, r24
     5ce:	39 0b       	sbc	r19, r25
     5d0:	c9 01       	movw	r24, r18
     5d2:	20 91 78 05 	lds	r18, 0x0578
     5d6:	30 91 79 05 	lds	r19, 0x0579
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	4c f7       	brge	.-46     	; 0x5b2 <set_grensLicht+0x22>
			eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		}
	}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <set_grensTemp>:
		}
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	8c 01       	movw	r16, r24
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     5f4:	c0 91 6e 05 	lds	r28, 0x056E
     5f8:	d0 91 6f 05 	lds	r29, 0x056F
     5fc:	80 91 7a 05 	lds	r24, 0x057A
     600:	90 91 7b 05 	lds	r25, 0x057B
     604:	99 23       	and	r25, r25
     606:	cc f0       	brlt	.+50     	; 0x63a <set_grensTemp+0x50>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     60c:	f8 01       	movw	r30, r16
     60e:	e8 0f       	add	r30, r24
     610:	f9 1f       	adc	r31, r25
     612:	ce 01       	movw	r24, r28
     614:	60 81       	ld	r22, Z
     616:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
		return versieRes;
	}

	//Zetten van grens_temperatuur grenswaarde.
	void set_grensTemp(char* t){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	80 91 6e 05 	lds	r24, 0x056E
     620:	90 91 6f 05 	lds	r25, 0x056F
     624:	9e 01       	movw	r18, r28
     626:	28 1b       	sub	r18, r24
     628:	39 0b       	sbc	r19, r25
     62a:	c9 01       	movw	r24, r18
     62c:	20 91 7a 05 	lds	r18, 0x057A
     630:	30 91 7b 05 	lds	r19, 0x057B
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	4c f7       	brge	.-46     	; 0x60c <set_grensTemp+0x22>
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	08 95       	ret

00000644 <set_Versie>:
		}
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	8c 01       	movw	r16, r24
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     64e:	c0 91 70 05 	lds	r28, 0x0570
     652:	d0 91 71 05 	lds	r29, 0x0571
     656:	80 91 7c 05 	lds	r24, 0x057C
     65a:	90 91 7d 05 	lds	r25, 0x057D
     65e:	99 23       	and	r25, r25
     660:	cc f0       	brlt	.+50     	; 0x694 <set_Versie+0x50>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     666:	f8 01       	movw	r30, r16
     668:	e8 0f       	add	r30, r24
     66a:	f9 1f       	adc	r31, r25
     66c:	ce 01       	movw	r24, r28
     66e:	60 81       	ld	r22, Z
     670:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
		return locatieRes;
	}

	//Zetten van versienummer.
	void set_Versie(char* v){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     674:	21 96       	adiw	r28, 0x01	; 1
     676:	80 91 70 05 	lds	r24, 0x0570
     67a:	90 91 71 05 	lds	r25, 0x0571
     67e:	9e 01       	movw	r18, r28
     680:	28 1b       	sub	r18, r24
     682:	39 0b       	sbc	r19, r25
     684:	c9 01       	movw	r24, r18
     686:	20 91 7c 05 	lds	r18, 0x057C
     68a:	30 91 7d 05 	lds	r19, 0x057D
     68e:	28 17       	cp	r18, r24
     690:	39 07       	cpc	r19, r25
     692:	4c f7       	brge	.-46     	; 0x666 <set_Versie+0x22>
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <set_Locatie>:
		}
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	8c 01       	movw	r16, r24
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6a8:	c0 91 72 05 	lds	r28, 0x0572
     6ac:	d0 91 73 05 	lds	r29, 0x0573
     6b0:	80 91 7e 05 	lds	r24, 0x057E
     6b4:	90 91 7f 05 	lds	r25, 0x057F
     6b8:	99 23       	and	r25, r25
     6ba:	cc f0       	brlt	.+50     	; 0x6ee <set_Locatie+0x50>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     6c0:	f8 01       	movw	r30, r16
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	ce 01       	movw	r24, r28
     6c8:	60 81       	ld	r22, Z
     6ca:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
		return naamRes;
	}

	//Zetten van locatie.
	void set_Locatie(char* l){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     6ce:	21 96       	adiw	r28, 0x01	; 1
     6d0:	80 91 72 05 	lds	r24, 0x0572
     6d4:	90 91 73 05 	lds	r25, 0x0573
     6d8:	9e 01       	movw	r18, r28
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	c9 01       	movw	r24, r18
     6e0:	20 91 7e 05 	lds	r18, 0x057E
     6e4:	30 91 7f 05 	lds	r19, 0x057F
     6e8:	28 17       	cp	r18, r24
     6ea:	39 07       	cpc	r19, r25
     6ec:	4c f7       	brge	.-46     	; 0x6c0 <set_Locatie+0x22>
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <set_Naam>:
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     700:	c0 91 04 06 	lds	r28, 0x0604
     704:	d0 91 05 06 	lds	r29, 0x0605
     708:	20 91 80 05 	lds	r18, 0x0580
     70c:	30 91 81 05 	lds	r19, 0x0581
     710:	2c 17       	cp	r18, r28
     712:	3d 07       	cpc	r19, r29
     714:	8c f0       	brlt	.+34     	; 0x738 <set_Naam+0x40>
			p1[strlen(p1) -1] = '\0';
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
     716:	8c 01       	movw	r16, r24
     718:	0c 0f       	add	r16, r28
     71a:	1d 1f       	adc	r17, r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			eeprom_update_byte((uint8_t*)teller,n[teller]);
     71c:	f8 01       	movw	r30, r16
     71e:	61 91       	ld	r22, Z+
     720:	8f 01       	movw	r16, r30
     722:	ce 01       	movw	r24, r28
     724:	0e 94 b4 11 	call	0x2368	; 0x2368 <__eeupd_byte_m328p>
			substring = p1 +1;
		}
		
	//Zetten van naam.
	void set_Naam(char* n){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     728:	21 96       	adiw	r28, 0x01	; 1
     72a:	80 91 80 05 	lds	r24, 0x0580
     72e:	90 91 81 05 	lds	r25, 0x0581
     732:	8c 17       	cp	r24, r28
     734:	9d 07       	cpc	r25, r29
     736:	94 f7       	brge	.-28     	; 0x71c <set_Naam+0x24>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <set_substring>:
			

//_______________________________________________________________________________________________//
	
	 void set_substring(){
			char * p1 = strstr (in_buf, "(");
     742:	8c e9       	ldi	r24, 0x9C	; 156
     744:	96 e0       	ldi	r25, 0x06	; 6
     746:	68 e2       	ldi	r22, 0x28	; 40
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	0e 94 b2 10 	call	0x2164	; 0x2164 <strchr>
			p1[strlen(p1) -1] = '\0';
     74e:	e8 2f       	mov	r30, r24
     750:	f9 2f       	mov	r31, r25
     752:	df 01       	movw	r26, r30
     754:	0d 90       	ld	r0, X+
     756:	00 20       	and	r0, r0
     758:	e9 f7       	brne	.-6      	; 0x754 <set_substring+0x12>
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	ae 1b       	sub	r26, r30
     75e:	bf 0b       	sbc	r27, r31
     760:	a8 0f       	add	r26, r24
     762:	b9 1f       	adc	r27, r25
     764:	11 97       	sbiw	r26, 0x01	; 1
     766:	1c 92       	st	X, r1
			substring = p1 +1;
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	90 93 9b 06 	sts	0x069B, r25
     76e:	80 93 9a 06 	sts	0x069A, r24
		}
     772:	08 95       	ret

00000774 <get_Naam>:
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     77c:	c0 91 04 06 	lds	r28, 0x0604
     780:	d0 91 05 06 	lds	r29, 0x0605
     784:	80 91 80 05 	lds	r24, 0x0580
     788:	90 91 81 05 	lds	r25, 0x0581
     78c:	8c 17       	cp	r24, r28
     78e:	9d 07       	cpc	r25, r29
     790:	8c f0       	brlt	.+34     	; 0x7b4 <get_Naam+0x40>
			eeprom_update_byte((uint8_t*)teller,n[teller]);
		}
	}

	//Retourneren van naam
	char* get_Naam(){
     792:	8e 01       	movw	r16, r28
     794:	02 59       	subi	r16, 0x92	; 146
     796:	19 4f       	sbci	r17, 0xF9	; 249
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     798:	ce 01       	movw	r24, r28
     79a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     79e:	f8 01       	movw	r30, r16
     7a0:	81 93       	st	Z+, r24
     7a2:	8f 01       	movw	r16, r30
		}
	}

	//Retourneren van naam
	char* get_Naam(){
		for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     7a4:	21 96       	adiw	r28, 0x01	; 1
     7a6:	80 91 80 05 	lds	r24, 0x0580
     7aa:	90 91 81 05 	lds	r25, 0x0581
     7ae:	8c 17       	cp	r24, r28
     7b0:	9d 07       	cpc	r25, r29
     7b2:	94 f7       	brge	.-28     	; 0x798 <get_Naam+0x24>
			naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		}
		return naamRes;
	}
     7b4:	8e e6       	ldi	r24, 0x6E	; 110
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <get_Locatie>:
			eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     7d2:	e0 90 72 05 	lds	r14, 0x0572
     7d6:	f0 90 73 05 	lds	r15, 0x0573
     7da:	80 91 7e 05 	lds	r24, 0x057E
     7de:	90 91 7f 05 	lds	r25, 0x057F
     7e2:	99 23       	and	r25, r25
     7e4:	ec f0       	brlt	.+58     	; 0x820 <get_Locatie+0x5e>
     7e6:	01 e0       	ldi	r16, 0x01	; 1
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	c0 e0       	ldi	r28, 0x00	; 0
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     7ee:	0f 2e       	mov	r0, r31
     7f0:	ff e3       	ldi	r31, 0x3F	; 63
     7f2:	cf 2e       	mov	r12, r31
     7f4:	f6 e0       	ldi	r31, 0x06	; 6
     7f6:	df 2e       	mov	r13, r31
     7f8:	f0 2d       	mov	r31, r0
     7fa:	c7 01       	movw	r24, r14
     7fc:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     800:	cc 0d       	add	r28, r12
     802:	dd 1d       	adc	r29, r13
     804:	88 83       	st	Y, r24
		}
	}

	//Retourneren van locatie.
	char* get_Locatie(){
		for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     806:	08 94       	sec
     808:	e1 1c       	adc	r14, r1
     80a:	f1 1c       	adc	r15, r1
     80c:	e8 01       	movw	r28, r16
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	80 91 7e 05 	lds	r24, 0x057E
     816:	90 91 7f 05 	lds	r25, 0x057F
     81a:	8c 17       	cp	r24, r28
     81c:	9d 07       	cpc	r25, r29
     81e:	6c f7       	brge	.-38     	; 0x7fa <get_Locatie+0x38>
			locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		}
		return locatieRes;
	}
     820:	8f e3       	ldi	r24, 0x3F	; 63
     822:	96 e0       	ldi	r25, 0x06	; 6
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <get_Versie>:
			eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     846:	e0 90 70 05 	lds	r14, 0x0570
     84a:	f0 90 71 05 	lds	r15, 0x0571
     84e:	80 91 7c 05 	lds	r24, 0x057C
     852:	90 91 7d 05 	lds	r25, 0x057D
     856:	99 23       	and	r25, r25
     858:	ec f0       	brlt	.+58     	; 0x894 <get_Versie+0x5e>
     85a:	01 e0       	ldi	r16, 0x01	; 1
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	c0 e0       	ldi	r28, 0x00	; 0
     860:	d0 e0       	ldi	r29, 0x00	; 0
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     862:	0f 2e       	mov	r0, r31
     864:	fa eb       	ldi	r31, 0xBA	; 186
     866:	cf 2e       	mov	r12, r31
     868:	f6 e0       	ldi	r31, 0x06	; 6
     86a:	df 2e       	mov	r13, r31
     86c:	f0 2d       	mov	r31, r0
     86e:	c7 01       	movw	r24, r14
     870:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     874:	cc 0d       	add	r28, r12
     876:	dd 1d       	adc	r29, r13
     878:	88 83       	st	Y, r24
		}
	}

	//Retourneren versie nummer.
	char* get_Versie(){
		for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     87a:	08 94       	sec
     87c:	e1 1c       	adc	r14, r1
     87e:	f1 1c       	adc	r15, r1
     880:	e8 01       	movw	r28, r16
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	80 91 7c 05 	lds	r24, 0x057C
     88a:	90 91 7d 05 	lds	r25, 0x057D
     88e:	8c 17       	cp	r24, r28
     890:	9d 07       	cpc	r25, r29
     892:	6c f7       	brge	.-38     	; 0x86e <get_Versie+0x38>
			versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		}
		return versieRes;
	}
     894:	8a eb       	ldi	r24, 0xBA	; 186
     896:	96 e0       	ldi	r25, 0x06	; 6
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	08 95       	ret

000008aa <get_grensTemp>:
			eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8ba:	e0 90 6e 05 	lds	r14, 0x056E
     8be:	f0 90 6f 05 	lds	r15, 0x056F
     8c2:	80 91 7a 05 	lds	r24, 0x057A
     8c6:	90 91 7b 05 	lds	r25, 0x057B
     8ca:	99 23       	and	r25, r25
     8cc:	ec f0       	brlt	.+58     	; 0x908 <__stack+0x9>
     8ce:	01 e0       	ldi	r16, 0x01	; 1
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     8d6:	0f 2e       	mov	r0, r31
     8d8:	fb e6       	ldi	r31, 0x6B	; 107
     8da:	cf 2e       	mov	r12, r31
     8dc:	f6 e0       	ldi	r31, 0x06	; 6
     8de:	df 2e       	mov	r13, r31
     8e0:	f0 2d       	mov	r31, r0
     8e2:	c7 01       	movw	r24, r14
     8e4:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     8e8:	cc 0d       	add	r28, r12
     8ea:	dd 1d       	adc	r29, r13
     8ec:	88 83       	st	Y, r24
		}
	}

	//Retourneren van grenswaarde grens_temperatuur.
	char* get_grensTemp(){
		for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     8ee:	08 94       	sec
     8f0:	e1 1c       	adc	r14, r1
     8f2:	f1 1c       	adc	r15, r1
     8f4:	e8 01       	movw	r28, r16
     8f6:	0f 5f       	subi	r16, 0xFF	; 255
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	80 91 7a 05 	lds	r24, 0x057A
     8fe:	90 91 7b 05 	lds	r25, 0x057B
     902:	8c 17       	cp	r24, r28
     904:	9d 07       	cpc	r25, r29
     906:	6c f7       	brge	.-38     	; 0x8e2 <get_grensTemp+0x38>
			grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		return grens_temperatuurRes;
	}
     908:	8b e6       	ldi	r24, 0x6B	; 107
     90a:	96 e0       	ldi	r25, 0x06	; 6
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	08 95       	ret

0000091e <get_grensLight>:
		}
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     92a:	e0 90 6c 05 	lds	r14, 0x056C
     92e:	f0 90 6d 05 	lds	r15, 0x056D
     932:	80 91 78 05 	lds	r24, 0x0578
     936:	90 91 79 05 	lds	r25, 0x0579
     93a:	99 23       	and	r25, r25
     93c:	bc f0       	brlt	.+46     	; 0x96c <get_grensLight+0x4e>
     93e:	01 e0       	ldi	r16, 0x01	; 1
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	c0 e0       	ldi	r28, 0x00	; 0
     944:	d0 e0       	ldi	r29, 0x00	; 0
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     946:	c7 01       	movw	r24, r14
     948:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     94c:	ce 53       	subi	r28, 0x3E	; 62
     94e:	d9 4f       	sbci	r29, 0xF9	; 249
     950:	88 83       	st	Y, r24
	}


	//Retourneren van grenswaarde grens_lichtintensiteit.
	char* get_grensLight(){
		for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     952:	08 94       	sec
     954:	e1 1c       	adc	r14, r1
     956:	f1 1c       	adc	r15, r1
     958:	e8 01       	movw	r28, r16
     95a:	0f 5f       	subi	r16, 0xFF	; 255
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	80 91 78 05 	lds	r24, 0x0578
     962:	90 91 79 05 	lds	r25, 0x0579
     966:	8c 17       	cp	r24, r28
     968:	9d 07       	cpc	r25, r29
     96a:	6c f7       	brge	.-38     	; 0x946 <get_grensLight+0x28>
			grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		}
		//ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		return grens_lichtintRes;
	}
     96c:	82 ec       	ldi	r24, 0xC2	; 194
     96e:	96 e0       	ldi	r25, 0x06	; 6
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <get_minUnroll>:
		
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     98a:	e0 90 6a 05 	lds	r14, 0x056A
     98e:	f0 90 6b 05 	lds	r15, 0x056B
     992:	80 91 76 05 	lds	r24, 0x0576
     996:	90 91 77 05 	lds	r25, 0x0577
     99a:	99 23       	and	r25, r25
     99c:	bc f0       	brlt	.+46     	; 0x9cc <get_minUnroll+0x4e>
     99e:	01 e0       	ldi	r16, 0x01	; 1
     9a0:	10 e0       	ldi	r17, 0x00	; 0
     9a2:	c0 e0       	ldi	r28, 0x00	; 0
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     9a6:	c7 01       	movw	r24, r14
     9a8:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     9ac:	c0 5d       	subi	r28, 0xD0	; 208
     9ae:	d9 4f       	sbci	r29, 0xF9	; 249
     9b0:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale inrol waarde.
	char* get_minUnroll(){
		for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     9b2:	08 94       	sec
     9b4:	e1 1c       	adc	r14, r1
     9b6:	f1 1c       	adc	r15, r1
     9b8:	e8 01       	movw	r28, r16
     9ba:	0f 5f       	subi	r16, 0xFF	; 255
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
     9be:	80 91 76 05 	lds	r24, 0x0576
     9c2:	90 91 77 05 	lds	r25, 0x0577
     9c6:	8c 17       	cp	r24, r28
     9c8:	9d 07       	cpc	r25, r29
     9ca:	6c f7       	brge	.-38     	; 0x9a6 <get_minUnroll+0x28>
			minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return minUnrollRes;
	}
     9cc:	80 e3       	ldi	r24, 0x30	; 48
     9ce:	96 e0       	ldi	r25, 0x06	; 6
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	08 95       	ret

000009de <get_maxUnroll>:
		}
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9ea:	e0 90 68 05 	lds	r14, 0x0568
     9ee:	f0 90 69 05 	lds	r15, 0x0569
     9f2:	80 91 74 05 	lds	r24, 0x0574
     9f6:	90 91 75 05 	lds	r25, 0x0575
     9fa:	99 23       	and	r25, r25
     9fc:	bc f0       	brlt	.+46     	; 0xa2c <get_maxUnroll+0x4e>
     9fe:	01 e0       	ldi	r16, 0x01	; 1
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	c0 e0       	ldi	r28, 0x00	; 0
     a04:	d0 e0       	ldi	r29, 0x00	; 0
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     a06:	c7 01       	movw	r24, r14
     a08:	0e 94 ac 11 	call	0x2358	; 0x2358 <__eerd_byte_m328p>
     a0c:	c0 51       	subi	r28, 0x10	; 16
     a0e:	d9 4f       	sbci	r29, 0xF9	; 249
     a10:	88 83       	st	Y, r24
	}


	//Retourneren van de maximale uitrol waarde.
	char* get_maxUnroll(){
		for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     a12:	08 94       	sec
     a14:	e1 1c       	adc	r14, r1
     a16:	f1 1c       	adc	r15, r1
     a18:	e8 01       	movw	r28, r16
     a1a:	0f 5f       	subi	r16, 0xFF	; 255
     a1c:	1f 4f       	sbci	r17, 0xFF	; 255
     a1e:	80 91 74 05 	lds	r24, 0x0574
     a22:	90 91 75 05 	lds	r25, 0x0575
     a26:	8c 17       	cp	r24, r28
     a28:	9d 07       	cpc	r25, r29
     a2a:	6c f7       	brge	.-38     	; 0xa06 <get_maxUnroll+0x28>
			maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		}
		return maxUnrollRes;
     a2c:	80 ef       	ldi	r24, 0xF0	; 240
     a2e:	96 e0       	ldi	r25, 0x06	; 6
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	08 95       	ret

00000a3e <protocolCom>:


//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     a3e:	00 e0       	ldi	r16, 0x00	; 0
     a40:	11 e0       	ldi	r17, 0x01	; 1
		ser_readln(in_buf, sizeof(in_buf), 1);
     a42:	cc e9       	ldi	r28, 0x9C	; 156
     a44:	d6 e0       	ldi	r29, 0x06	; 6
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     a46:	0f 2e       	mov	r0, r31
     a48:	f9 e1       	ldi	r31, 0x19	; 25
     a4a:	ef 2e       	mov	r14, r31
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
     a4e:	ff 2e       	mov	r15, r31
     a50:	f0 2d       	mov	r31, r0
				} if((getOut() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     a52:	0f 2e       	mov	r0, r31
     a54:	f1 e4       	ldi	r31, 0x41	; 65
     a56:	af 2e       	mov	r10, r31
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	bf 2e       	mov	r11, r31
     a5c:	f0 2d       	mov	r31, r0
				if ((getIn() % 2) == 0){
					ser_writeln("999 Zonnescherm is al opgerold!");
     a5e:	0f 2e       	mov	r0, r31
     a60:	f8 e4       	ldi	r31, 0x48	; 72
     a62:	2f 2e       	mov	r2, r31
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	3f 2e       	mov	r3, r31
     a68:	f0 2d       	mov	r31, r0
				} if((getIn() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f8 e6       	ldi	r31, 0x68	; 104
     a6e:	cf 2e       	mov	r12, r31
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	df 2e       	mov	r13, r31
     a74:	f0 2d       	mov	r31, r0
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     a76:	0f 2e       	mov	r0, r31
     a78:	ff e6       	ldi	r31, 0x6F	; 111
     a7a:	8f 2e       	mov	r8, r31
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	9f 2e       	mov	r9, r31
     a80:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     a82:	0f 2e       	mov	r0, r31
     a84:	fb e8       	ldi	r31, 0x8B	; 139
     a86:	6f 2e       	mov	r6, r31
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	7f 2e       	mov	r7, r31
     a8c:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     a8e:	0f 2e       	mov	r0, r31
     a90:	fa ea       	ldi	r31, 0xAA	; 170
     a92:	4f 2e       	mov	r4, r31
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	5f 2e       	mov	r5, r31
     a98:	f0 2d       	mov	r31, r0


//---------------------------
void protocolCom(){
	while (1) {
		ser_write("Wat kan ik voor u doen? ");
     a9a:	c8 01       	movw	r24, r16
     a9c:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
		ser_readln(in_buf, sizeof(in_buf), 1);
     aa0:	ce 01       	movw	r24, r28
     aa2:	6e e1       	ldi	r22, 0x1E	; 30
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	0e 94 78 07 	call	0xef0	; 0xef0 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     aac:	c7 01       	movw	r24, r14
     aae:	be 01       	movw	r22, r28
     ab0:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     ab4:	28 2f       	mov	r18, r24
     ab6:	39 2f       	mov	r19, r25
     ab8:	21 15       	cp	r18, r1
     aba:	31 05       	cpc	r19, r1
     abc:	a1 f4       	brne	.+40     	; 0xae6 <protocolCom+0xa8>
				if ((getOut() % 2) == 1){
     abe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <getOut>
     ac2:	62 e0       	ldi	r22, 0x02	; 2
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__divmodhi4>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	91 05       	cpc	r25, r1
     ace:	21 f4       	brne	.+8      	; 0xad8 <protocolCom+0x9a>
					ser_writeln("999 Zonnescherm is al uitgerold!");
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
				} if((getOut() % 2) == 0){
     ad8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <getOut>
     adc:	80 fd       	sbrc	r24, 0
     ade:	1e c0       	rjmp	.+60     	; 0xb1c <protocolCom+0xde>
					uitrollen();
     ae0:	0e 94 c8 07 	call	0xf90	; 0xf90 <uitrollen>
     ae4:	1b c0       	rjmp	.+54     	; 0xb1c <protocolCom+0xde>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ae6:	c5 01       	movw	r24, r10
     ae8:	be 01       	movw	r22, r28
     aea:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     aee:	28 2f       	mov	r18, r24
     af0:	39 2f       	mov	r19, r25
     af2:	21 15       	cp	r18, r1
     af4:	31 05       	cpc	r19, r1
     af6:	91 f4       	brne	.+36     	; 0xb1c <protocolCom+0xde>
				if ((getIn() % 2) == 0){
     af8:	0e 94 b2 07 	call	0xf64	; 0xf64 <getIn>
     afc:	80 fd       	sbrc	r24, 0
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <protocolCom+0xc8>
					ser_writeln("999 Zonnescherm is al opgerold!");
     b00:	c1 01       	movw	r24, r2
     b02:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
				} if((getIn() % 2) == 1){
     b06:	0e 94 b2 07 	call	0xf64	; 0xf64 <getIn>
     b0a:	62 e0       	ldi	r22, 0x02	; 2
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__divmodhi4>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	91 05       	cpc	r25, r1
     b16:	11 f4       	brne	.+4      	; 0xb1c <protocolCom+0xde>
					oprollen();
     b18:	0e 94 4e 08 	call	0x109c	; 0x109c <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b1c:	c6 01       	movw	r24, r12
     b1e:	be 01       	movw	r22, r28
     b20:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     b24:	28 2f       	mov	r18, r24
     b26:	39 2f       	mov	r19, r25
     b28:	21 15       	cp	r18, r1
     b2a:	31 05       	cpc	r19, r1
     b2c:	09 f4       	brne	.+2      	; 0xb30 <protocolCom+0xf2>
     b2e:	b5 cf       	rjmp	.-150    	; 0xa9a <protocolCom+0x5c>
			
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     b30:	c4 01       	movw	r24, r8
     b32:	be 01       	movw	r22, r28
     b34:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     b38:	28 2f       	mov	r18, r24
     b3a:	39 2f       	mov	r19, r25
     b3c:	21 15       	cp	r18, r1
     b3e:	31 05       	cpc	r19, r1
     b40:	e1 f4       	brne	.+56     	; 0xb7a <protocolCom+0x13c>
				printf("202 TEMP= % 6.2f \n", getTemp());
     b42:	0e 94 70 01 	call	0x2e0	; 0x2e0 <getTemp>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <protocolCom+0x10e>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <protocolCom+0x110>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <protocolCom+0x112>
     b50:	28 e7       	ldi	r18, 0x78	; 120
     b52:	31 e0       	ldi	r19, 0x01	; 1
     b54:	ed b7       	in	r30, 0x3d	; 61
     b56:	fe b7       	in	r31, 0x3e	; 62
     b58:	32 83       	std	Z+2, r19	; 0x02
     b5a:	21 83       	std	Z+1, r18	; 0x01
     b5c:	83 83       	std	Z+3, r24	; 0x03
     b5e:	94 83       	std	Z+4, r25	; 0x04
     b60:	a5 83       	std	Z+5, r26	; 0x05
     b62:	b6 83       	std	Z+6, r27	; 0x06
     b64:	0e 94 0b 11 	call	0x2216	; 0x2216 <printf>
     b68:	8d b7       	in	r24, 0x3d	; 61
     b6a:	9e b7       	in	r25, 0x3e	; 62
     b6c:	06 96       	adiw	r24, 0x06	; 6
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	9e bf       	out	0x3e, r25	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	8d bf       	out	0x3d, r24	; 61
     b78:	90 cf       	rjmp	.-224    	; 0xa9a <protocolCom+0x5c>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     b7a:	c3 01       	movw	r24, r6
     b7c:	be 01       	movw	r22, r28
     b7e:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     b82:	28 2f       	mov	r18, r24
     b84:	39 2f       	mov	r19, r25
     b86:	21 15       	cp	r18, r1
     b88:	31 05       	cpc	r19, r1
     b8a:	49 f4       	brne	.+18     	; 0xb9e <protocolCom+0x160>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     b8c:	8a e9       	ldi	r24, 0x9A	; 154
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     b94:	0e 94 55 04 	call	0x8aa	; 0x8aa <get_grensTemp>
     b98:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     b9c:	7e cf       	rjmp	.-260    	; 0xa9a <protocolCom+0x5c>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     b9e:	c2 01       	movw	r24, r4
     ba0:	be 01       	movw	r22, r28
     ba2:	4e e0       	ldi	r20, 0x0E	; 14
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     baa:	28 2f       	mov	r18, r24
     bac:	39 2f       	mov	r19, r25
     bae:	21 15       	cp	r18, r1
     bb0:	31 05       	cpc	r19, r1
     bb2:	49 f4       	brne	.+18     	; 0xbc6 <protocolCom+0x188>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				set_substring();
     bb4:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
				set_grensTemp(substring);
     bb8:	80 91 9a 06 	lds	r24, 0x069A
     bbc:	90 91 9b 06 	lds	r25, 0x069B
     bc0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <set_grensTemp>
     bc4:	6a cf       	rjmp	.-300    	; 0xa9a <protocolCom+0x5c>
				
			}
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     bc6:	8c eb       	ldi	r24, 0xBC	; 188
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	be 01       	movw	r22, r28
     bcc:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     bd0:	28 2f       	mov	r18, r24
     bd2:	39 2f       	mov	r19, r25
     bd4:	21 15       	cp	r18, r1
     bd6:	31 05       	cpc	r19, r1
     bd8:	c1 f4       	brne	.+48     	; 0xc0a <protocolCom+0x1cc>
				printf("202 LIGHT %i \n", getLight());
     bda:	0e 94 b7 01 	call	0x36e	; 0x36e <getLight>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <protocolCom+0x1a2>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <protocolCom+0x1a4>
     be2:	ed b7       	in	r30, 0x3d	; 61
     be4:	fe b7       	in	r31, 0x3e	; 62
     be6:	31 96       	adiw	r30, 0x01	; 1
     be8:	26 ec       	ldi	r18, 0xC6	; 198
     bea:	31 e0       	ldi	r19, 0x01	; 1
     bec:	ad b7       	in	r26, 0x3d	; 61
     bee:	be b7       	in	r27, 0x3e	; 62
     bf0:	12 96       	adiw	r26, 0x02	; 2
     bf2:	3c 93       	st	X, r19
     bf4:	2e 93       	st	-X, r18
     bf6:	11 97       	sbiw	r26, 0x01	; 1
     bf8:	82 83       	std	Z+2, r24	; 0x02
     bfa:	13 82       	std	Z+3, r1	; 0x03
     bfc:	0e 94 0b 11 	call	0x2216	; 0x2216 <printf>
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	48 cf       	rjmp	.-368    	; 0xa9a <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     c0a:	85 ed       	ldi	r24, 0xD5	; 213
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	be 01       	movw	r22, r28
     c10:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     c14:	28 2f       	mov	r18, r24
     c16:	39 2f       	mov	r19, r25
     c18:	21 15       	cp	r18, r1
     c1a:	31 05       	cpc	r19, r1
     c1c:	49 f4       	brne	.+18     	; 0xc30 <protocolCom+0x1f2>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_write(get_grensLight());
     c1e:	85 ee       	ldi	r24, 0xE5	; 229
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     c26:	0e 94 8f 04 	call	0x91e	; 0x91e <get_grensLight>
     c2a:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     c2e:	35 cf       	rjmp	.-406    	; 0xa9a <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     c30:	86 ef       	ldi	r24, 0xF6	; 246
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	be 01       	movw	r22, r28
     c36:	4f e0       	ldi	r20, 0x0F	; 15
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     c3e:	28 2f       	mov	r18, r24
     c40:	39 2f       	mov	r19, r25
     c42:	21 15       	cp	r18, r1
     c44:	31 05       	cpc	r19, r1
     c46:	49 f4       	brne	.+18     	; 0xc5a <protocolCom+0x21c>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				set_substring();
     c48:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
				set_grensLicht(substring);
     c4c:	80 91 9a 06 	lds	r24, 0x069A
     c50:	90 91 9b 06 	lds	r25, 0x069B
     c54:	0e 94 c8 02 	call	0x590	; 0x590 <set_grensLicht>
     c58:	20 cf       	rjmp	.-448    	; 0xa9a <protocolCom+0x5c>
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     c5a:	89 e0       	ldi	r24, 0x09	; 9
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	be 01       	movw	r22, r28
     c60:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     c64:	28 2f       	mov	r18, r24
     c66:	39 2f       	mov	r19, r25
     c68:	21 15       	cp	r18, r1
     c6a:	31 05       	cpc	r19, r1
     c6c:	49 f4       	brne	.+18     	; 0xc80 <protocolCom+0x242>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     c6e:	88 e1       	ldi	r24, 0x18	; 24
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     c76:	0e 94 ef 04 	call	0x9de	; 0x9de <get_maxUnroll>
     c7a:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     c7e:	0d cf       	rjmp	.-486    	; 0xa9a <protocolCom+0x5c>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     c80:	89 e2       	ldi	r24, 0x29	; 41
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	be 01       	movw	r22, r28
     c86:	4f e0       	ldi	r20, 0x0F	; 15
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     c8e:	28 2f       	mov	r18, r24
     c90:	39 2f       	mov	r19, r25
     c92:	21 15       	cp	r18, r1
     c94:	31 05       	cpc	r19, r1
     c96:	49 f4       	brne	.+18     	; 0xcaa <protocolCom+0x26c>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);G
				set_substring();
     c98:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
				set_maxUnroll(substring);
     c9c:	80 91 9a 06 	lds	r24, 0x069A
     ca0:	90 91 9b 06 	lds	r25, 0x069B
     ca4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <set_maxUnroll>
     ca8:	f8 ce       	rjmp	.-528    	; 0xa9a <protocolCom+0x5c>
			}
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     caa:	8b e3       	ldi	r24, 0x3B	; 59
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	be 01       	movw	r22, r28
     cb0:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     cb4:	28 2f       	mov	r18, r24
     cb6:	39 2f       	mov	r19, r25
     cb8:	21 15       	cp	r18, r1
     cba:	31 05       	cpc	r19, r1
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <protocolCom+0x292>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     cbe:	8a e4       	ldi	r24, 0x4A	; 74
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     cc6:	0e 94 bf 04 	call	0x97e	; 0x97e <get_minUnroll>
     cca:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     cce:	e5 ce       	rjmp	.-566    	; 0xa9a <protocolCom+0x5c>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     cd0:	8b e5       	ldi	r24, 0x5B	; 91
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	be 01       	movw	r22, r28
     cd6:	4f e0       	ldi	r20, 0x0F	; 15
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     cde:	28 2f       	mov	r18, r24
     ce0:	39 2f       	mov	r19, r25
     ce2:	21 15       	cp	r18, r1
     ce4:	31 05       	cpc	r19, r1
     ce6:	49 f4       	brne	.+18     	; 0xcfa <protocolCom+0x2bc>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				set_substring();
     ce8:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
				set_minUnroll(substring);
     cec:	80 91 9a 06 	lds	r24, 0x069A
     cf0:	90 91 9b 06 	lds	r25, 0x069B
     cf4:	0e 94 9b 02 	call	0x536	; 0x536 <set_minUnroll>
     cf8:	d0 ce       	rjmp	.-608    	; 0xa9a <protocolCom+0x5c>
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     cfa:	8d e6       	ldi	r24, 0x6D	; 109
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	be 01       	movw	r22, r28
     d00:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     d04:	28 2f       	mov	r18, r24
     d06:	39 2f       	mov	r19, r25
     d08:	21 15       	cp	r18, r1
     d0a:	31 05       	cpc	r19, r1
     d0c:	49 f4       	brne	.+18     	; 0xd20 <protocolCom+0x2e2>
				ser_write("202 "),  ser_writeln(get_Naam());
     d0e:	86 e7       	ldi	r24, 0x76	; 118
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     d16:	0e 94 ba 03 	call	0x774	; 0x774 <get_Naam>
     d1a:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     d1e:	bd ce       	rjmp	.-646    	; 0xa9a <protocolCom+0x5c>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     d20:	8b e7       	ldi	r24, 0x7B	; 123
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	be 01       	movw	r22, r28
     d26:	48 e0       	ldi	r20, 0x08	; 8
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     d2e:	28 2f       	mov	r18, r24
     d30:	39 2f       	mov	r19, r25
     d32:	21 15       	cp	r18, r1
     d34:	31 05       	cpc	r19, r1
     d36:	69 f4       	brne	.+26     	; 0xd52 <protocolCom+0x314>
				set_substring();
     d38:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
				set_Naam(substring);
     d3c:	80 91 9a 06 	lds	r24, 0x069A
     d40:	90 91 9b 06 	lds	r25, 0x069B
     d44:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <set_Naam>
				printf("200 OK \n");
     d48:	87 e8       	ldi	r24, 0x87	; 135
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 20 11 	call	0x2240	; 0x2240 <puts>
     d50:	a4 ce       	rjmp	.-696    	; 0xa9a <protocolCom+0x5c>
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     d52:	8f e8       	ldi	r24, 0x8F	; 143
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	be 01       	movw	r22, r28
     d58:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     d5c:	28 2f       	mov	r18, r24
     d5e:	39 2f       	mov	r19, r25
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	49 f4       	brne	.+18     	; 0xd78 <protocolCom+0x33a>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     d66:	86 e7       	ldi	r24, 0x76	; 118
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     d6e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <get_Locatie>
     d72:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     d76:	91 ce       	rjmp	.-734    	; 0xa9a <protocolCom+0x5c>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     d78:	8c e9       	ldi	r24, 0x9C	; 156
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	be 01       	movw	r22, r28
     d7e:	4c e0       	ldi	r20, 0x0C	; 12
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     d86:	28 2f       	mov	r18, r24
     d88:	39 2f       	mov	r19, r25
     d8a:	21 15       	cp	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	69 f4       	brne	.+26     	; 0xdaa <protocolCom+0x36c>
				set_substring();
     d90:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
				set_Locatie(substring);
     d94:	80 91 9a 06 	lds	r24, 0x069A
     d98:	90 91 9b 06 	lds	r25, 0x069B
     d9c:	0e 94 4f 03 	call	0x69e	; 0x69e <set_Locatie>
				
				printf("200 OK \n");
     da0:	87 e8       	ldi	r24, 0x87	; 135
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 20 11 	call	0x2240	; 0x2240 <puts>
     da8:	78 ce       	rjmp	.-784    	; 0xa9a <protocolCom+0x5c>
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     daa:	8c ea       	ldi	r24, 0xAC	; 172
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	be 01       	movw	r22, r28
     db0:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     db4:	28 2f       	mov	r18, r24
     db6:	39 2f       	mov	r19, r25
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	49 f4       	brne	.+18     	; 0xdd0 <protocolCom+0x392>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     dbe:	88 eb       	ldi	r24, 0xB8	; 184
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
     dc6:	0e 94 1b 04 	call	0x836	; 0x836 <get_Versie>
     dca:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     dce:	65 ce       	rjmp	.-822    	; 0xa9a <protocolCom+0x5c>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     dd0:	85 ec       	ldi	r24, 0xC5	; 197
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	be 01       	movw	r22, r28
     dd6:	4c e0       	ldi	r20, 0x0C	; 12
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	0e 94 c6 10 	call	0x218c	; 0x218c <strncmp>
     dde:	28 2f       	mov	r18, r24
     de0:	39 2f       	mov	r19, r25
     de2:	21 15       	cp	r18, r1
     de4:	31 05       	cpc	r19, r1
     de6:	69 f4       	brne	.+26     	; 0xe02 <protocolCom+0x3c4>
					set_substring();
     de8:	0e 94 a1 03 	call	0x742	; 0x742 <set_substring>
					set_Versie(substring);
     dec:	80 91 9a 06 	lds	r24, 0x069A
     df0:	90 91 9b 06 	lds	r25, 0x069B
     df4:	0e 94 22 03 	call	0x644	; 0x644 <set_Versie>
					
					printf("200 OK \n");
     df8:	87 e8       	ldi	r24, 0x87	; 135
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 20 11 	call	0x2240	; 0x2240 <puts>
     e00:	4c ce       	rjmp	.-872    	; 0xa9a <protocolCom+0x5c>
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     e02:	84 ed       	ldi	r24, 0xD4	; 212
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	be 01       	movw	r22, r28
     e08:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     e0c:	28 2f       	mov	r18, r24
     e0e:	39 2f       	mov	r19, r25
     e10:	21 15       	cp	r18, r1
     e12:	31 05       	cpc	r19, r1
     e14:	89 f4       	brne	.+34     	; 0xe38 <protocolCom+0x3fa>
				if ((getOut() % 2) == 1){
     e16:	0e 94 b7 07 	call	0xf6e	; 0xf6e <getOut>
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__divmodhi4>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	91 05       	cpc	r25, r1
     e26:	11 f4       	brne	.+4      	; 0xe2c <protocolCom+0x3ee>
					uitrollen();					
     e28:	0e 94 c8 07 	call	0xf90	; 0xf90 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     e2c:	89 ed       	ldi	r24, 0xD9	; 217
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
				abort();
     e34:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     e38:	82 ee       	ldi	r24, 0xE2	; 226
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	be 01       	movw	r22, r28
     e3e:	0e 94 bd 10 	call	0x217a	; 0x217a <strcmp>
     e42:	28 2f       	mov	r18, r24
     e44:	39 2f       	mov	r19, r25
     e46:	21 15       	cp	r18, r1
     e48:	31 05       	cpc	r19, r1
     e4a:	29 f4       	brne	.+10     	; 0xe56 <protocolCom+0x418>
				ser_writeln(
     e4c:	87 ee       	ldi	r24, 0xE7	; 231
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     e54:	22 ce       	rjmp	.-956    	; 0xa9a <protocolCom+0x5c>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     e56:	8c e2       	ldi	r24, 0x2C	; 44
     e58:	95 e0       	ldi	r25, 0x05	; 5
     e5a:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
     e5e:	1d ce       	rjmp	.-966    	; 0xa9a <protocolCom+0x5c>

00000e60 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     e60:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     e64:	83 e3       	ldi	r24, 0x33	; 51
     e66:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     e6a:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     e6e:	88 e1       	ldi	r24, 0x18	; 24
     e70:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     e74:	86 e0       	ldi	r24, 0x06	; 6
     e76:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     e7a:	82 e8       	ldi	r24, 0x82	; 130
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	90 93 27 07 	sts	0x0727, r25
     e82:	80 93 26 07 	sts	0x0726, r24
}
     e86:	08 95       	ret

00000e88 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     e88:	e0 ec       	ldi	r30, 0xC0	; 192
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	90 81       	ld	r25, Z
     e8e:	95 ff       	sbrs	r25, 5
     e90:	fd cf       	rjmp	.-6      	; 0xe8c <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     e92:	80 93 c6 00 	sts	0x00C6, r24
}
     e96:	08 95       	ret

00000e98 <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     e98:	cf 93       	push	r28
     e9a:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     e9c:	8a 30       	cpi	r24, 0x0A	; 10
     e9e:	19 f4       	brne	.+6      	; 0xea6 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     ea0:	8d e0       	ldi	r24, 0x0D	; 13
     ea2:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>
	}
	ser_transmit(c);
     ea6:	8c 2f       	mov	r24, r28
     ea8:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>
}
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     eb0:	e0 ec       	ldi	r30, 0xC0	; 192
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	ec f7       	brge	.-6      	; 0xeb4 <ser_receive+0x4>
	return UDR0;
     eba:	80 91 c6 00 	lds	r24, 0x00C6
}
     ebe:	08 95       	ret

00000ec0 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     ec6:	88 81       	ld	r24, Y
     ec8:	88 23       	and	r24, r24
     eca:	31 f0       	breq	.+12     	; 0xed8 <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     ecc:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     ece:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     ed2:	89 91       	ld	r24, Y+
     ed4:	88 23       	and	r24, r24
     ed6:	d9 f7       	brne	.-10     	; 0xece <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     ede:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
	ser_transmit('\r');
     ee2:	8d e0       	ldi	r24, 0x0D	; 13
     ee4:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>
	ser_transmit('\n');
     ee8:	8a e0       	ldi	r24, 0x0A	; 10
     eea:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>
}
     eee:	08 95       	ret

00000ef0 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	5c 01       	movw	r10, r24
     f06:	d4 2f       	mov	r29, r20
	int i=0;
     f08:	6c 01       	movw	r12, r24
     f0a:	ee 24       	eor	r14, r14
     f0c:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f0e:	8b 01       	movw	r16, r22
     f10:	01 50       	subi	r16, 0x01	; 1
     f12:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     f14:	0e 94 58 07 	call	0xeb0	; 0xeb0 <ser_receive>
     f18:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     f1a:	dd 23       	and	r29, r29
     f1c:	11 f0       	breq	.+4      	; 0xf22 <ser_readln+0x32>
     f1e:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>
		if (c=='\r') {
     f22:	cd 30       	cpi	r28, 0x0D	; 13
     f24:	31 f4       	brne	.+12     	; 0xf32 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     f26:	dd 23       	and	r29, r29
     f28:	71 f0       	breq	.+28     	; 0xf46 <ser_readln+0x56>
     f2a:	8a e0       	ldi	r24, 0x0A	; 10
     f2c:	0e 94 44 07 	call	0xe88	; 0xe88 <ser_transmit>
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     f32:	e0 16       	cp	r14, r16
     f34:	f1 06       	cpc	r15, r17
     f36:	74 f7       	brge	.-36     	; 0xf14 <ser_readln+0x24>
			buf[i++]=c;
     f38:	f6 01       	movw	r30, r12
     f3a:	c1 93       	st	Z+, r28
     f3c:	6f 01       	movw	r12, r30
     f3e:	08 94       	sec
     f40:	e1 1c       	adc	r14, r1
     f42:	f1 1c       	adc	r15, r1
     f44:	e7 cf       	rjmp	.-50     	; 0xf14 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     f46:	ea 0c       	add	r14, r10
     f48:	fb 1c       	adc	r15, r11
     f4a:	f7 01       	movw	r30, r14
     f4c:	10 82       	st	Z, r1
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	08 95       	ret

00000f64 <getIn>:



int getIn(){
	return IN;
}
     f64:	80 91 22 07 	lds	r24, 0x0722
     f68:	90 91 23 07 	lds	r25, 0x0723
     f6c:	08 95       	ret

00000f6e <getOut>:

int getOut(){
	return OUT;
}
     f6e:	80 91 06 06 	lds	r24, 0x0606
     f72:	90 91 07 06 	lds	r25, 0x0607
     f76:	08 95       	ret

00000f78 <init_scherm_ports>:

init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
     f78:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
     f7a:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
     f7c:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
     f7e:	e9 e6       	ldi	r30, 0x69	; 105
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
     f8c:	2d 9a       	sbi	0x05, 5	; 5
}
     f8e:	08 95       	ret

00000f90 <uitrollen>:

void uitrollen(){
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
	OUT = (OUT + 1);
     f9c:	80 91 06 06 	lds	r24, 0x0606
     fa0:	90 91 07 06 	lds	r25, 0x0607
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	90 93 07 06 	sts	0x0607, r25
     faa:	80 93 06 06 	sts	0x0606, r24
	IN = (IN + 1);
     fae:	80 91 22 07 	lds	r24, 0x0722
     fb2:	90 91 23 07 	lds	r25, 0x0723
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	90 93 23 07 	sts	0x0723, r25
     fbc:	80 93 22 07 	sts	0x0722, r24
	ser_write("250 "); //Geef aan dat het commando is gelukt
     fc0:	80 e9       	ldi	r24, 0x90	; 144
     fc2:	95 e0       	ldi	r25, 0x05	; 5
     fc4:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
     fc8:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
     fca:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
     fcc:	0e 94 ef 04 	call	0x9de	; 0x9de <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <strtod>
     fd8:	6b 01       	movw	r12, r22
     fda:	7c 01       	movw	r14, r24
		PORTB |= _BV(PORTB4);
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);
		j += 1;
		if (j % 2 == 0){ser_write(".");}
     fdc:	c5 e9       	ldi	r28, 0x95	; 149
     fde:	d5 e0       	ldi	r29, 0x05	; 5
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
     fe0:	22 c0       	rjmp	.+68     	; 0x1026 <uitrollen+0x96>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
     fe2:	2c 9a       	sbi	0x05, 4	; 5
     fe4:	8f e3       	ldi	r24, 0x3F	; 63
     fe6:	9d e0       	ldi	r25, 0x0D	; 13
     fe8:	a3 e0       	ldi	r26, 0x03	; 3
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	90 40       	sbci	r25, 0x00	; 0
     fee:	a0 40       	sbci	r26, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <uitrollen+0x5a>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <uitrollen+0x64>
     ff4:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
     ff6:	2c 98       	cbi	0x05, 4	; 5
     ff8:	8f e3       	ldi	r24, 0x3F	; 63
     ffa:	9d e0       	ldi	r25, 0x0D	; 13
     ffc:	a3 e0       	ldi	r26, 0x03	; 3
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	90 40       	sbci	r25, 0x00	; 0
    1002:	a0 40       	sbci	r26, 0x00	; 0
    1004:	e1 f7       	brne	.-8      	; 0xffe <uitrollen+0x6e>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <uitrollen+0x78>
    1008:	00 00       	nop
		_delay_ms(DELAY_MS);
		j += 1;
    100a:	80 91 20 07 	lds	r24, 0x0720
    100e:	90 91 21 07 	lds	r25, 0x0721
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	90 93 21 07 	sts	0x0721, r25
    1018:	80 93 20 07 	sts	0x0720, r24
		if (j % 2 == 0){ser_write(".");}
    101c:	80 fd       	sbrc	r24, 0
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <uitrollen+0x96>
    1020:	ce 01       	movw	r24, r28
    1022:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    1026:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    102a:	a7 01       	movw	r20, r14
    102c:	96 01       	movw	r18, r12
    102e:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
    1032:	88 23       	and	r24, r24
    1034:	b4 f2       	brlt	.-84     	; 0xfe2 <uitrollen+0x52>
		if(get_timerVariable()% 2 == 0){
			PORTB &= ~_BV(PORTB4);
			//printf("%i", get_timerVariable());
		}	*/		
	}
	j = 0;
    1036:	10 92 21 07 	sts	0x0721, r1
    103a:	10 92 20 07 	sts	0x0720, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    103e:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	00 d0       	rcall	.+0      	; 0x1048 <uitrollen+0xb8>
    1048:	00 d0       	rcall	.+0      	; 0x104a <uitrollen+0xba>
    104a:	00 d0       	rcall	.+0      	; 0x104c <uitrollen+0xbc>
    104c:	27 e9       	ldi	r18, 0x97	; 151
    104e:	35 e0       	ldi	r19, 0x05	; 5
    1050:	ed b7       	in	r30, 0x3d	; 61
    1052:	fe b7       	in	r31, 0x3e	; 62
    1054:	32 83       	std	Z+2, r19	; 0x02
    1056:	21 83       	std	Z+1, r18	; 0x01
    1058:	83 83       	std	Z+3, r24	; 0x03
    105a:	94 83       	std	Z+4, r25	; 0x04
    105c:	a5 83       	std	Z+5, r26	; 0x05
    105e:	b6 83       	std	Z+6, r27	; 0x06
    1060:	0e 94 0b 11 	call	0x2216	; 0x2216 <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    1064:	8d b7       	in	r24, 0x3d	; 61
    1066:	9e b7       	in	r25, 0x3e	; 62
    1068:	06 96       	adiw	r24, 0x06	; 6
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	9e bf       	out	0x3e, r25	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	8d bf       	out	0x3d, r24	; 61
    1074:	87 eb       	ldi	r24, 0xB7	; 183
    1076:	95 e0       	ldi	r25, 0x05	; 5
    1078:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
    107c:	8f e3       	ldi	r24, 0x3F	; 63
    107e:	9d e0       	ldi	r25, 0x0D	; 13
    1080:	a3 e0       	ldi	r26, 0x03	; 3
    1082:	81 50       	subi	r24, 0x01	; 1
    1084:	90 40       	sbci	r25, 0x00	; 0
    1086:	a0 40       	sbci	r26, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <uitrollen+0xf2>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <uitrollen+0xfc>
    108c:	00 00       	nop
	_delay_ms(DELAY_MS);
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	08 95       	ret

0000109c <oprollen>:
	
	


void oprollen(){
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
	IN = (IN + 1);
    10a8:	80 91 22 07 	lds	r24, 0x0722
    10ac:	90 91 23 07 	lds	r25, 0x0723
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	90 93 23 07 	sts	0x0723, r25
    10b6:	80 93 22 07 	sts	0x0722, r24
	OUT = (OUT + 1);
    10ba:	80 91 06 06 	lds	r24, 0x0606
    10be:	90 91 07 06 	lds	r25, 0x0607
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	90 93 07 06 	sts	0x0607, r25
    10c8:	80 93 06 06 	sts	0x0606, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    10cc:	80 e9       	ldi	r24, 0x90	; 144
    10ce:	95 e0       	ldi	r25, 0x05	; 5
    10d0:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    10d4:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    10d6:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double
	char* c = get_minUnroll();
    10d8:	0e 94 bf 04 	call	0x97e	; 0x97e <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <strtod>
    10e4:	6b 01       	movw	r12, r22
    10e6:	7c 01       	movw	r14, r24
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
    10e8:	c5 e9       	ldi	r28, 0x95	; 149
    10ea:	d5 e0       	ldi	r29, 0x05	; 5
	// Converteer de char* naar een double
	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	
	while (getDistance()> x){
    10ec:	22 c0       	rjmp	.+68     	; 0x1132 <oprollen+0x96>

		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    10ee:	2c 9a       	sbi	0x05, 4	; 5
    10f0:	8f e3       	ldi	r24, 0x3F	; 63
    10f2:	9d e0       	ldi	r25, 0x0D	; 13
    10f4:	a3 e0       	ldi	r26, 0x03	; 3
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	90 40       	sbci	r25, 0x00	; 0
    10fa:	a0 40       	sbci	r26, 0x00	; 0
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <oprollen+0x5a>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <oprollen+0x64>
    1100:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1102:	2c 98       	cbi	0x05, 4	; 5
    1104:	8f e3       	ldi	r24, 0x3F	; 63
    1106:	9d e0       	ldi	r25, 0x0D	; 13
    1108:	a3 e0       	ldi	r26, 0x03	; 3
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	90 40       	sbci	r25, 0x00	; 0
    110e:	a0 40       	sbci	r26, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <oprollen+0x6e>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <oprollen+0x78>
    1114:	00 00       	nop
		_delay_ms(DELAY_MS);

		j += 1;
    1116:	80 91 20 07 	lds	r24, 0x0720
    111a:	90 91 21 07 	lds	r25, 0x0721
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	90 93 21 07 	sts	0x0721, r25
    1124:	80 93 20 07 	sts	0x0720, r24
		if (j % 2 == 0){ser_write(".");}
    1128:	80 fd       	sbrc	r24, 0
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <oprollen+0x96>
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 60 07 	call	0xec0	; 0xec0 <ser_write>
	// Converteer de char* naar een double
	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	
	while (getDistance()> x){
    1132:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1136:	a7 01       	movw	r20, r14
    1138:	96 01       	movw	r18, r12
    113a:	0e 94 ef 09 	call	0x13de	; 0x13de <__gesf2>
    113e:	18 16       	cp	r1, r24
    1140:	b4 f2       	brlt	.-84     	; 0x10ee <oprollen+0x52>
		_delay_ms(DELAY_MS);

		j += 1;
		if (j % 2 == 0){ser_write(".");}
	}			
	j = 0;
    1142:	10 92 21 07 	sts	0x0721, r1
    1146:	10 92 20 07 	sts	0x0720, r1
	printf("Zonneschermoprollen % 6.2f cm \n", getDistance());
    114a:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	00 d0       	rcall	.+0      	; 0x1154 <oprollen+0xb8>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <oprollen+0xba>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <oprollen+0xbc>
    1158:	27 e9       	ldi	r18, 0x97	; 151
    115a:	35 e0       	ldi	r19, 0x05	; 5
    115c:	ed b7       	in	r30, 0x3d	; 61
    115e:	fe b7       	in	r31, 0x3e	; 62
    1160:	32 83       	std	Z+2, r19	; 0x02
    1162:	21 83       	std	Z+1, r18	; 0x01
    1164:	83 83       	std	Z+3, r24	; 0x03
    1166:	94 83       	std	Z+4, r25	; 0x04
    1168:	a5 83       	std	Z+5, r26	; 0x05
    116a:	b6 83       	std	Z+6, r27	; 0x06
    116c:	0e 94 0b 11 	call	0x2216	; 0x2216 <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    1170:	8d b7       	in	r24, 0x3d	; 61
    1172:	9e b7       	in	r25, 0x3e	; 62
    1174:	06 96       	adiw	r24, 0x06	; 6
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	9e bf       	out	0x3e, r25	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	8d bf       	out	0x3d, r24	; 61
    1180:	85 ed       	ldi	r24, 0xD5	; 213
    1182:	95 e0       	ldi	r25, 0x05	; 5
    1184:	0e 94 6f 07 	call	0xede	; 0xede <ser_writeln>
    1188:	8f e3       	ldi	r24, 0x3F	; 63
    118a:	9d e0       	ldi	r25, 0x0D	; 13
    118c:	a3 e0       	ldi	r26, 0x03	; 3
    118e:	81 50       	subi	r24, 0x01	; 1
    1190:	90 40       	sbci	r25, 0x00	; 0
    1192:	a0 40       	sbci	r26, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <oprollen+0xf2>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <oprollen+0xfc>
    1198:	00 00       	nop
	_delay_ms(DELAY_MS);
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	cf 90       	pop	r12
    11a6:	08 95       	ret

000011a8 <__subsf3>:
    11a8:	50 58       	subi	r21, 0x80	; 128

000011aa <__addsf3>:
    11aa:	bb 27       	eor	r27, r27
    11ac:	aa 27       	eor	r26, r26
    11ae:	0e d0       	rcall	.+28     	; 0x11cc <__addsf3x>
    11b0:	dc c0       	rjmp	.+440    	; 0x136a <__fp_round>
    11b2:	cd d0       	rcall	.+410    	; 0x134e <__fp_pscA>
    11b4:	30 f0       	brcs	.+12     	; 0x11c2 <__addsf3+0x18>
    11b6:	d2 d0       	rcall	.+420    	; 0x135c <__fp_pscB>
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <__addsf3+0x18>
    11ba:	31 f4       	brne	.+12     	; 0x11c8 <__addsf3+0x1e>
    11bc:	9f 3f       	cpi	r25, 0xFF	; 255
    11be:	11 f4       	brne	.+4      	; 0x11c4 <__addsf3+0x1a>
    11c0:	1e f4       	brtc	.+6      	; 0x11c8 <__addsf3+0x1e>
    11c2:	c2 c0       	rjmp	.+388    	; 0x1348 <__fp_nan>
    11c4:	0e f4       	brtc	.+2      	; 0x11c8 <__addsf3+0x1e>
    11c6:	e0 95       	com	r30
    11c8:	e7 fb       	bst	r30, 7
    11ca:	b8 c0       	rjmp	.+368    	; 0x133c <__fp_inf>

000011cc <__addsf3x>:
    11cc:	e9 2f       	mov	r30, r25
    11ce:	de d0       	rcall	.+444    	; 0x138c <__fp_split3>
    11d0:	80 f3       	brcs	.-32     	; 0x11b2 <__addsf3+0x8>
    11d2:	ba 17       	cp	r27, r26
    11d4:	62 07       	cpc	r22, r18
    11d6:	73 07       	cpc	r23, r19
    11d8:	84 07       	cpc	r24, r20
    11da:	95 07       	cpc	r25, r21
    11dc:	18 f0       	brcs	.+6      	; 0x11e4 <__addsf3x+0x18>
    11de:	71 f4       	brne	.+28     	; 0x11fc <__addsf3x+0x30>
    11e0:	9e f5       	brtc	.+102    	; 0x1248 <__addsf3x+0x7c>
    11e2:	f6 c0       	rjmp	.+492    	; 0x13d0 <__fp_zero>
    11e4:	0e f4       	brtc	.+2      	; 0x11e8 <__addsf3x+0x1c>
    11e6:	e0 95       	com	r30
    11e8:	0b 2e       	mov	r0, r27
    11ea:	ba 2f       	mov	r27, r26
    11ec:	a0 2d       	mov	r26, r0
    11ee:	0b 01       	movw	r0, r22
    11f0:	b9 01       	movw	r22, r18
    11f2:	90 01       	movw	r18, r0
    11f4:	0c 01       	movw	r0, r24
    11f6:	ca 01       	movw	r24, r20
    11f8:	a0 01       	movw	r20, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	ff 27       	eor	r31, r31
    11fe:	59 1b       	sub	r21, r25
    1200:	99 f0       	breq	.+38     	; 0x1228 <__addsf3x+0x5c>
    1202:	59 3f       	cpi	r21, 0xF9	; 249
    1204:	50 f4       	brcc	.+20     	; 0x121a <__addsf3x+0x4e>
    1206:	50 3e       	cpi	r21, 0xE0	; 224
    1208:	68 f1       	brcs	.+90     	; 0x1264 <__addsf3x+0x98>
    120a:	1a 16       	cp	r1, r26
    120c:	f0 40       	sbci	r31, 0x00	; 0
    120e:	a2 2f       	mov	r26, r18
    1210:	23 2f       	mov	r18, r19
    1212:	34 2f       	mov	r19, r20
    1214:	44 27       	eor	r20, r20
    1216:	58 5f       	subi	r21, 0xF8	; 248
    1218:	f3 cf       	rjmp	.-26     	; 0x1200 <__addsf3x+0x34>
    121a:	46 95       	lsr	r20
    121c:	37 95       	ror	r19
    121e:	27 95       	ror	r18
    1220:	a7 95       	ror	r26
    1222:	f0 40       	sbci	r31, 0x00	; 0
    1224:	53 95       	inc	r21
    1226:	c9 f7       	brne	.-14     	; 0x121a <__addsf3x+0x4e>
    1228:	7e f4       	brtc	.+30     	; 0x1248 <__addsf3x+0x7c>
    122a:	1f 16       	cp	r1, r31
    122c:	ba 0b       	sbc	r27, r26
    122e:	62 0b       	sbc	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	ba f0       	brmi	.+46     	; 0x1264 <__addsf3x+0x98>
    1236:	91 50       	subi	r25, 0x01	; 1
    1238:	a1 f0       	breq	.+40     	; 0x1262 <__addsf3x+0x96>
    123a:	ff 0f       	add	r31, r31
    123c:	bb 1f       	adc	r27, r27
    123e:	66 1f       	adc	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	c2 f7       	brpl	.-16     	; 0x1236 <__addsf3x+0x6a>
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <__addsf3x+0x98>
    1248:	ba 0f       	add	r27, r26
    124a:	62 1f       	adc	r22, r18
    124c:	73 1f       	adc	r23, r19
    124e:	84 1f       	adc	r24, r20
    1250:	48 f4       	brcc	.+18     	; 0x1264 <__addsf3x+0x98>
    1252:	87 95       	ror	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	b7 95       	ror	r27
    125a:	f7 95       	ror	r31
    125c:	9e 3f       	cpi	r25, 0xFE	; 254
    125e:	08 f0       	brcs	.+2      	; 0x1262 <__addsf3x+0x96>
    1260:	b3 cf       	rjmp	.-154    	; 0x11c8 <__addsf3+0x1e>
    1262:	93 95       	inc	r25
    1264:	88 0f       	add	r24, r24
    1266:	08 f0       	brcs	.+2      	; 0x126a <__addsf3x+0x9e>
    1268:	99 27       	eor	r25, r25
    126a:	ee 0f       	add	r30, r30
    126c:	97 95       	ror	r25
    126e:	87 95       	ror	r24
    1270:	08 95       	ret

00001272 <__cmpsf2>:
    1272:	40 d0       	rcall	.+128    	; 0x12f4 <__fp_cmp>
    1274:	08 f4       	brcc	.+2      	; 0x1278 <__cmpsf2+0x6>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	08 95       	ret

0000127a <__floatunsisf>:
    127a:	e8 94       	clt
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <__floatsisf+0x12>

0000127e <__floatsisf>:
    127e:	97 fb       	bst	r25, 7
    1280:	3e f4       	brtc	.+14     	; 0x1290 <__floatsisf+0x12>
    1282:	90 95       	com	r25
    1284:	80 95       	com	r24
    1286:	70 95       	com	r23
    1288:	61 95       	neg	r22
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	99 23       	and	r25, r25
    1292:	a9 f0       	breq	.+42     	; 0x12be <__floatsisf+0x40>
    1294:	f9 2f       	mov	r31, r25
    1296:	96 e9       	ldi	r25, 0x96	; 150
    1298:	bb 27       	eor	r27, r27
    129a:	93 95       	inc	r25
    129c:	f6 95       	lsr	r31
    129e:	87 95       	ror	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	b7 95       	ror	r27
    12a6:	f1 11       	cpse	r31, r1
    12a8:	f8 cf       	rjmp	.-16     	; 0x129a <__floatsisf+0x1c>
    12aa:	fa f4       	brpl	.+62     	; 0x12ea <__floatsisf+0x6c>
    12ac:	bb 0f       	add	r27, r27
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__floatsisf+0x36>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <__floatsisf+0x6c>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	16 c0       	rjmp	.+44     	; 0x12ea <__floatsisf+0x6c>
    12be:	88 23       	and	r24, r24
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <__floatsisf+0x48>
    12c2:	96 e9       	ldi	r25, 0x96	; 150
    12c4:	11 c0       	rjmp	.+34     	; 0x12e8 <__floatsisf+0x6a>
    12c6:	77 23       	and	r23, r23
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <__floatsisf+0x54>
    12ca:	9e e8       	ldi	r25, 0x8E	; 142
    12cc:	87 2f       	mov	r24, r23
    12ce:	76 2f       	mov	r23, r22
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <__floatsisf+0x5e>
    12d2:	66 23       	and	r22, r22
    12d4:	71 f0       	breq	.+28     	; 0x12f2 <__floatsisf+0x74>
    12d6:	96 e8       	ldi	r25, 0x86	; 134
    12d8:	86 2f       	mov	r24, r22
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	2a f0       	brmi	.+10     	; 0x12ea <__floatsisf+0x6c>
    12e0:	9a 95       	dec	r25
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	da f7       	brpl	.-10     	; 0x12e0 <__floatsisf+0x62>
    12ea:	88 0f       	add	r24, r24
    12ec:	96 95       	lsr	r25
    12ee:	87 95       	ror	r24
    12f0:	97 f9       	bld	r25, 7
    12f2:	08 95       	ret

000012f4 <__fp_cmp>:
    12f4:	99 0f       	add	r25, r25
    12f6:	00 08       	sbc	r0, r0
    12f8:	55 0f       	add	r21, r21
    12fa:	aa 0b       	sbc	r26, r26
    12fc:	e0 e8       	ldi	r30, 0x80	; 128
    12fe:	fe ef       	ldi	r31, 0xFE	; 254
    1300:	16 16       	cp	r1, r22
    1302:	17 06       	cpc	r1, r23
    1304:	e8 07       	cpc	r30, r24
    1306:	f9 07       	cpc	r31, r25
    1308:	c0 f0       	brcs	.+48     	; 0x133a <__fp_cmp+0x46>
    130a:	12 16       	cp	r1, r18
    130c:	13 06       	cpc	r1, r19
    130e:	e4 07       	cpc	r30, r20
    1310:	f5 07       	cpc	r31, r21
    1312:	98 f0       	brcs	.+38     	; 0x133a <__fp_cmp+0x46>
    1314:	62 1b       	sub	r22, r18
    1316:	73 0b       	sbc	r23, r19
    1318:	84 0b       	sbc	r24, r20
    131a:	95 0b       	sbc	r25, r21
    131c:	39 f4       	brne	.+14     	; 0x132c <__fp_cmp+0x38>
    131e:	0a 26       	eor	r0, r26
    1320:	61 f0       	breq	.+24     	; 0x133a <__fp_cmp+0x46>
    1322:	23 2b       	or	r18, r19
    1324:	24 2b       	or	r18, r20
    1326:	25 2b       	or	r18, r21
    1328:	21 f4       	brne	.+8      	; 0x1332 <__fp_cmp+0x3e>
    132a:	08 95       	ret
    132c:	0a 26       	eor	r0, r26
    132e:	09 f4       	brne	.+2      	; 0x1332 <__fp_cmp+0x3e>
    1330:	a1 40       	sbci	r26, 0x01	; 1
    1332:	a6 95       	lsr	r26
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	81 1d       	adc	r24, r1
    1338:	81 1d       	adc	r24, r1
    133a:	08 95       	ret

0000133c <__fp_inf>:
    133c:	97 f9       	bld	r25, 7
    133e:	9f 67       	ori	r25, 0x7F	; 127
    1340:	80 e8       	ldi	r24, 0x80	; 128
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	08 95       	ret

00001348 <__fp_nan>:
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	80 ec       	ldi	r24, 0xC0	; 192
    134c:	08 95       	ret

0000134e <__fp_pscA>:
    134e:	00 24       	eor	r0, r0
    1350:	0a 94       	dec	r0
    1352:	16 16       	cp	r1, r22
    1354:	17 06       	cpc	r1, r23
    1356:	18 06       	cpc	r1, r24
    1358:	09 06       	cpc	r0, r25
    135a:	08 95       	ret

0000135c <__fp_pscB>:
    135c:	00 24       	eor	r0, r0
    135e:	0a 94       	dec	r0
    1360:	12 16       	cp	r1, r18
    1362:	13 06       	cpc	r1, r19
    1364:	14 06       	cpc	r1, r20
    1366:	05 06       	cpc	r0, r21
    1368:	08 95       	ret

0000136a <__fp_round>:
    136a:	09 2e       	mov	r0, r25
    136c:	03 94       	inc	r0
    136e:	00 0c       	add	r0, r0
    1370:	11 f4       	brne	.+4      	; 0x1376 <__fp_round+0xc>
    1372:	88 23       	and	r24, r24
    1374:	52 f0       	brmi	.+20     	; 0x138a <__fp_round+0x20>
    1376:	bb 0f       	add	r27, r27
    1378:	40 f4       	brcc	.+16     	; 0x138a <__fp_round+0x20>
    137a:	bf 2b       	or	r27, r31
    137c:	11 f4       	brne	.+4      	; 0x1382 <__fp_round+0x18>
    137e:	60 ff       	sbrs	r22, 0
    1380:	04 c0       	rjmp	.+8      	; 0x138a <__fp_round+0x20>
    1382:	6f 5f       	subi	r22, 0xFF	; 255
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	08 95       	ret

0000138c <__fp_split3>:
    138c:	57 fd       	sbrc	r21, 7
    138e:	90 58       	subi	r25, 0x80	; 128
    1390:	44 0f       	add	r20, r20
    1392:	55 1f       	adc	r21, r21
    1394:	59 f0       	breq	.+22     	; 0x13ac <__fp_splitA+0x10>
    1396:	5f 3f       	cpi	r21, 0xFF	; 255
    1398:	71 f0       	breq	.+28     	; 0x13b6 <__fp_splitA+0x1a>
    139a:	47 95       	ror	r20

0000139c <__fp_splitA>:
    139c:	88 0f       	add	r24, r24
    139e:	97 fb       	bst	r25, 7
    13a0:	99 1f       	adc	r25, r25
    13a2:	61 f0       	breq	.+24     	; 0x13bc <__fp_splitA+0x20>
    13a4:	9f 3f       	cpi	r25, 0xFF	; 255
    13a6:	79 f0       	breq	.+30     	; 0x13c6 <__fp_splitA+0x2a>
    13a8:	87 95       	ror	r24
    13aa:	08 95       	ret
    13ac:	12 16       	cp	r1, r18
    13ae:	13 06       	cpc	r1, r19
    13b0:	14 06       	cpc	r1, r20
    13b2:	55 1f       	adc	r21, r21
    13b4:	f2 cf       	rjmp	.-28     	; 0x139a <__fp_split3+0xe>
    13b6:	46 95       	lsr	r20
    13b8:	f1 df       	rcall	.-30     	; 0x139c <__fp_splitA>
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <__fp_splitA+0x30>
    13bc:	16 16       	cp	r1, r22
    13be:	17 06       	cpc	r1, r23
    13c0:	18 06       	cpc	r1, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	f1 cf       	rjmp	.-30     	; 0x13a8 <__fp_splitA+0xc>
    13c6:	86 95       	lsr	r24
    13c8:	71 05       	cpc	r23, r1
    13ca:	61 05       	cpc	r22, r1
    13cc:	08 94       	sec
    13ce:	08 95       	ret

000013d0 <__fp_zero>:
    13d0:	e8 94       	clt

000013d2 <__fp_szero>:
    13d2:	bb 27       	eor	r27, r27
    13d4:	66 27       	eor	r22, r22
    13d6:	77 27       	eor	r23, r23
    13d8:	cb 01       	movw	r24, r22
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret

000013de <__gesf2>:
    13de:	8a df       	rcall	.-236    	; 0x12f4 <__fp_cmp>
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <__gesf2+0x6>
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	08 95       	ret

000013e6 <__mulsf3>:
    13e6:	0b d0       	rcall	.+22     	; 0x13fe <__mulsf3x>
    13e8:	c0 cf       	rjmp	.-128    	; 0x136a <__fp_round>
    13ea:	b1 df       	rcall	.-158    	; 0x134e <__fp_pscA>
    13ec:	28 f0       	brcs	.+10     	; 0x13f8 <__mulsf3+0x12>
    13ee:	b6 df       	rcall	.-148    	; 0x135c <__fp_pscB>
    13f0:	18 f0       	brcs	.+6      	; 0x13f8 <__mulsf3+0x12>
    13f2:	95 23       	and	r25, r21
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__mulsf3+0x12>
    13f6:	a2 cf       	rjmp	.-188    	; 0x133c <__fp_inf>
    13f8:	a7 cf       	rjmp	.-178    	; 0x1348 <__fp_nan>
    13fa:	11 24       	eor	r1, r1
    13fc:	ea cf       	rjmp	.-44     	; 0x13d2 <__fp_szero>

000013fe <__mulsf3x>:
    13fe:	c6 df       	rcall	.-116    	; 0x138c <__fp_split3>
    1400:	a0 f3       	brcs	.-24     	; 0x13ea <__mulsf3+0x4>

00001402 <__mulsf3_pse>:
    1402:	95 9f       	mul	r25, r21
    1404:	d1 f3       	breq	.-12     	; 0x13fa <__mulsf3+0x14>
    1406:	95 0f       	add	r25, r21
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	55 1f       	adc	r21, r21
    140c:	62 9f       	mul	r22, r18
    140e:	f0 01       	movw	r30, r0
    1410:	72 9f       	mul	r23, r18
    1412:	bb 27       	eor	r27, r27
    1414:	f0 0d       	add	r31, r0
    1416:	b1 1d       	adc	r27, r1
    1418:	63 9f       	mul	r22, r19
    141a:	aa 27       	eor	r26, r26
    141c:	f0 0d       	add	r31, r0
    141e:	b1 1d       	adc	r27, r1
    1420:	aa 1f       	adc	r26, r26
    1422:	64 9f       	mul	r22, r20
    1424:	66 27       	eor	r22, r22
    1426:	b0 0d       	add	r27, r0
    1428:	a1 1d       	adc	r26, r1
    142a:	66 1f       	adc	r22, r22
    142c:	82 9f       	mul	r24, r18
    142e:	22 27       	eor	r18, r18
    1430:	b0 0d       	add	r27, r0
    1432:	a1 1d       	adc	r26, r1
    1434:	62 1f       	adc	r22, r18
    1436:	73 9f       	mul	r23, r19
    1438:	b0 0d       	add	r27, r0
    143a:	a1 1d       	adc	r26, r1
    143c:	62 1f       	adc	r22, r18
    143e:	83 9f       	mul	r24, r19
    1440:	a0 0d       	add	r26, r0
    1442:	61 1d       	adc	r22, r1
    1444:	22 1f       	adc	r18, r18
    1446:	74 9f       	mul	r23, r20
    1448:	33 27       	eor	r19, r19
    144a:	a0 0d       	add	r26, r0
    144c:	61 1d       	adc	r22, r1
    144e:	23 1f       	adc	r18, r19
    1450:	84 9f       	mul	r24, r20
    1452:	60 0d       	add	r22, r0
    1454:	21 1d       	adc	r18, r1
    1456:	82 2f       	mov	r24, r18
    1458:	76 2f       	mov	r23, r22
    145a:	6a 2f       	mov	r22, r26
    145c:	11 24       	eor	r1, r1
    145e:	9f 57       	subi	r25, 0x7F	; 127
    1460:	50 40       	sbci	r21, 0x00	; 0
    1462:	8a f0       	brmi	.+34     	; 0x1486 <__mulsf3_pse+0x84>
    1464:	e1 f0       	breq	.+56     	; 0x149e <__mulsf3_pse+0x9c>
    1466:	88 23       	and	r24, r24
    1468:	4a f0       	brmi	.+18     	; 0x147c <__mulsf3_pse+0x7a>
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	bb 1f       	adc	r27, r27
    1470:	66 1f       	adc	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	91 50       	subi	r25, 0x01	; 1
    1478:	50 40       	sbci	r21, 0x00	; 0
    147a:	a9 f7       	brne	.-22     	; 0x1466 <__mulsf3_pse+0x64>
    147c:	9e 3f       	cpi	r25, 0xFE	; 254
    147e:	51 05       	cpc	r21, r1
    1480:	70 f0       	brcs	.+28     	; 0x149e <__mulsf3_pse+0x9c>
    1482:	5c cf       	rjmp	.-328    	; 0x133c <__fp_inf>
    1484:	a6 cf       	rjmp	.-180    	; 0x13d2 <__fp_szero>
    1486:	5f 3f       	cpi	r21, 0xFF	; 255
    1488:	ec f3       	brlt	.-6      	; 0x1484 <__mulsf3_pse+0x82>
    148a:	98 3e       	cpi	r25, 0xE8	; 232
    148c:	dc f3       	brlt	.-10     	; 0x1484 <__mulsf3_pse+0x82>
    148e:	86 95       	lsr	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b7 95       	ror	r27
    1496:	f7 95       	ror	r31
    1498:	e7 95       	ror	r30
    149a:	9f 5f       	subi	r25, 0xFF	; 255
    149c:	c1 f7       	brne	.-16     	; 0x148e <__mulsf3_pse+0x8c>
    149e:	fe 2b       	or	r31, r30
    14a0:	88 0f       	add	r24, r24
    14a2:	91 1d       	adc	r25, r1
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret

000014ac <vfprintf>:
    14ac:	a5 e1       	ldi	r26, 0x15	; 21
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ec e5       	ldi	r30, 0x5C	; 92
    14b2:	fa e0       	ldi	r31, 0x0A	; 10
    14b4:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__prologue_saves__>
    14b8:	4c 01       	movw	r8, r24
    14ba:	7f 87       	std	Y+15, r23	; 0x0f
    14bc:	6e 87       	std	Y+14, r22	; 0x0e
    14be:	fc 01       	movw	r30, r24
    14c0:	17 82       	std	Z+7, r1	; 0x07
    14c2:	16 82       	std	Z+6, r1	; 0x06
    14c4:	83 81       	ldd	r24, Z+3	; 0x03
    14c6:	81 fd       	sbrc	r24, 1
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <vfprintf+0x26>
    14ca:	76 c3       	rjmp	.+1772   	; 0x1bb8 <vfprintf+0x70c>
    14cc:	4c 85       	ldd	r20, Y+12	; 0x0c
    14ce:	5d 85       	ldd	r21, Y+13	; 0x0d
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <vfprintf+0x2e>
    14d2:	1e 01       	movw	r2, r28
    14d4:	08 94       	sec
    14d6:	21 1c       	adc	r2, r1
    14d8:	31 1c       	adc	r3, r1
    14da:	f4 01       	movw	r30, r8
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	ee 85       	ldd	r30, Y+14	; 0x0e
    14e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    14e2:	93 fd       	sbrc	r25, 3
    14e4:	85 91       	lpm	r24, Z+
    14e6:	93 ff       	sbrs	r25, 3
    14e8:	81 91       	ld	r24, Z+
    14ea:	ff 87       	std	Y+15, r31	; 0x0f
    14ec:	ee 87       	std	Y+14, r30	; 0x0e
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <vfprintf+0x48>
    14f2:	5e c3       	rjmp	.+1724   	; 0x1bb0 <vfprintf+0x704>
    14f4:	85 32       	cpi	r24, 0x25	; 37
    14f6:	41 f4       	brne	.+16     	; 0x1508 <vfprintf+0x5c>
    14f8:	93 fd       	sbrc	r25, 3
    14fa:	85 91       	lpm	r24, Z+
    14fc:	93 ff       	sbrs	r25, 3
    14fe:	81 91       	ld	r24, Z+
    1500:	ff 87       	std	Y+15, r31	; 0x0f
    1502:	ee 87       	std	Y+14, r30	; 0x0e
    1504:	85 32       	cpi	r24, 0x25	; 37
    1506:	59 f4       	brne	.+22     	; 0x151e <vfprintf+0x72>
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	b4 01       	movw	r22, r8
    150c:	4c 8b       	std	Y+20, r20	; 0x14
    150e:	5d 8b       	std	Y+21, r21	; 0x15
    1510:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1514:	4c 89       	ldd	r20, Y+20	; 0x14
    1516:	5d 89       	ldd	r21, Y+21	; 0x15
    1518:	5d 87       	std	Y+13, r21	; 0x0d
    151a:	4c 87       	std	Y+12, r20	; 0x0c
    151c:	d7 cf       	rjmp	.-82     	; 0x14cc <vfprintf+0x20>
    151e:	ff 24       	eor	r15, r15
    1520:	dd 24       	eor	r13, r13
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	10 32       	cpi	r17, 0x20	; 32
    1526:	b0 f4       	brcc	.+44     	; 0x1554 <vfprintf+0xa8>
    1528:	8b 32       	cpi	r24, 0x2B	; 43
    152a:	69 f0       	breq	.+26     	; 0x1546 <vfprintf+0x9a>
    152c:	8c 32       	cpi	r24, 0x2C	; 44
    152e:	28 f4       	brcc	.+10     	; 0x153a <vfprintf+0x8e>
    1530:	80 32       	cpi	r24, 0x20	; 32
    1532:	51 f0       	breq	.+20     	; 0x1548 <vfprintf+0x9c>
    1534:	83 32       	cpi	r24, 0x23	; 35
    1536:	71 f4       	brne	.+28     	; 0x1554 <vfprintf+0xa8>
    1538:	0b c0       	rjmp	.+22     	; 0x1550 <vfprintf+0xa4>
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	39 f0       	breq	.+14     	; 0x154c <vfprintf+0xa0>
    153e:	80 33       	cpi	r24, 0x30	; 48
    1540:	49 f4       	brne	.+18     	; 0x1554 <vfprintf+0xa8>
    1542:	11 60       	ori	r17, 0x01	; 1
    1544:	2c c0       	rjmp	.+88     	; 0x159e <vfprintf+0xf2>
    1546:	12 60       	ori	r17, 0x02	; 2
    1548:	14 60       	ori	r17, 0x04	; 4
    154a:	29 c0       	rjmp	.+82     	; 0x159e <vfprintf+0xf2>
    154c:	18 60       	ori	r17, 0x08	; 8
    154e:	27 c0       	rjmp	.+78     	; 0x159e <vfprintf+0xf2>
    1550:	10 61       	ori	r17, 0x10	; 16
    1552:	25 c0       	rjmp	.+74     	; 0x159e <vfprintf+0xf2>
    1554:	17 fd       	sbrc	r17, 7
    1556:	2e c0       	rjmp	.+92     	; 0x15b4 <vfprintf+0x108>
    1558:	28 2f       	mov	r18, r24
    155a:	20 53       	subi	r18, 0x30	; 48
    155c:	2a 30       	cpi	r18, 0x0A	; 10
    155e:	98 f4       	brcc	.+38     	; 0x1586 <vfprintf+0xda>
    1560:	16 ff       	sbrs	r17, 6
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <vfprintf+0xc8>
    1564:	8f 2d       	mov	r24, r15
    1566:	88 0f       	add	r24, r24
    1568:	f8 2e       	mov	r15, r24
    156a:	ff 0c       	add	r15, r15
    156c:	ff 0c       	add	r15, r15
    156e:	f8 0e       	add	r15, r24
    1570:	f2 0e       	add	r15, r18
    1572:	15 c0       	rjmp	.+42     	; 0x159e <vfprintf+0xf2>
    1574:	8d 2d       	mov	r24, r13
    1576:	88 0f       	add	r24, r24
    1578:	d8 2e       	mov	r13, r24
    157a:	dd 0c       	add	r13, r13
    157c:	dd 0c       	add	r13, r13
    157e:	d8 0e       	add	r13, r24
    1580:	d2 0e       	add	r13, r18
    1582:	10 62       	ori	r17, 0x20	; 32
    1584:	0c c0       	rjmp	.+24     	; 0x159e <vfprintf+0xf2>
    1586:	8e 32       	cpi	r24, 0x2E	; 46
    1588:	21 f4       	brne	.+8      	; 0x1592 <vfprintf+0xe6>
    158a:	16 fd       	sbrc	r17, 6
    158c:	11 c3       	rjmp	.+1570   	; 0x1bb0 <vfprintf+0x704>
    158e:	10 64       	ori	r17, 0x40	; 64
    1590:	06 c0       	rjmp	.+12     	; 0x159e <vfprintf+0xf2>
    1592:	8c 36       	cpi	r24, 0x6C	; 108
    1594:	11 f4       	brne	.+4      	; 0x159a <vfprintf+0xee>
    1596:	10 68       	ori	r17, 0x80	; 128
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0xf2>
    159a:	88 36       	cpi	r24, 0x68	; 104
    159c:	59 f4       	brne	.+22     	; 0x15b4 <vfprintf+0x108>
    159e:	ee 85       	ldd	r30, Y+14	; 0x0e
    15a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    15a2:	93 fd       	sbrc	r25, 3
    15a4:	85 91       	lpm	r24, Z+
    15a6:	93 ff       	sbrs	r25, 3
    15a8:	81 91       	ld	r24, Z+
    15aa:	ff 87       	std	Y+15, r31	; 0x0f
    15ac:	ee 87       	std	Y+14, r30	; 0x0e
    15ae:	88 23       	and	r24, r24
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <vfprintf+0x108>
    15b2:	b8 cf       	rjmp	.-144    	; 0x1524 <vfprintf+0x78>
    15b4:	98 2f       	mov	r25, r24
    15b6:	95 54       	subi	r25, 0x45	; 69
    15b8:	93 30       	cpi	r25, 0x03	; 3
    15ba:	18 f4       	brcc	.+6      	; 0x15c2 <vfprintf+0x116>
    15bc:	10 61       	ori	r17, 0x10	; 16
    15be:	80 5e       	subi	r24, 0xE0	; 224
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x122>
    15c2:	98 2f       	mov	r25, r24
    15c4:	95 56       	subi	r25, 0x65	; 101
    15c6:	93 30       	cpi	r25, 0x03	; 3
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <vfprintf+0x120>
    15ca:	a2 c1       	rjmp	.+836    	; 0x1910 <vfprintf+0x464>
    15cc:	1f 7e       	andi	r17, 0xEF	; 239
    15ce:	16 fd       	sbrc	r17, 6
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x12a>
    15d2:	e6 e0       	ldi	r30, 0x06	; 6
    15d4:	fe 2e       	mov	r15, r30
    15d6:	1f 73       	andi	r17, 0x3F	; 63
    15d8:	85 36       	cpi	r24, 0x65	; 101
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0x134>
    15dc:	10 64       	ori	r17, 0x40	; 64
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <vfprintf+0x140>
    15e0:	86 36       	cpi	r24, 0x66	; 102
    15e2:	11 f4       	brne	.+4      	; 0x15e8 <vfprintf+0x13c>
    15e4:	10 68       	ori	r17, 0x80	; 128
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x140>
    15e8:	f1 10       	cpse	r15, r1
    15ea:	fa 94       	dec	r15
    15ec:	17 ff       	sbrs	r17, 7
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <vfprintf+0x152>
    15f0:	fb e3       	ldi	r31, 0x3B	; 59
    15f2:	ff 15       	cp	r31, r15
    15f4:	48 f0       	brcs	.+18     	; 0x1608 <vfprintf+0x15c>
    15f6:	ef 2c       	mov	r14, r15
    15f8:	e3 94       	inc	r14
    15fa:	27 e0       	ldi	r18, 0x07	; 7
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <vfprintf+0x16c>
    15fe:	27 e0       	ldi	r18, 0x07	; 7
    1600:	2f 15       	cp	r18, r15
    1602:	30 f0       	brcs	.+12     	; 0x1610 <vfprintf+0x164>
    1604:	2f 2d       	mov	r18, r15
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <vfprintf+0x16a>
    1608:	27 e0       	ldi	r18, 0x07	; 7
    160a:	7c e3       	ldi	r23, 0x3C	; 60
    160c:	e7 2e       	mov	r14, r23
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <vfprintf+0x16c>
    1610:	27 e0       	ldi	r18, 0x07	; 7
    1612:	67 e0       	ldi	r22, 0x07	; 7
    1614:	f6 2e       	mov	r15, r22
    1616:	ee 24       	eor	r14, r14
    1618:	ca 01       	movw	r24, r20
    161a:	04 96       	adiw	r24, 0x04	; 4
    161c:	9d 87       	std	Y+13, r25	; 0x0d
    161e:	8c 87       	std	Y+12, r24	; 0x0c
    1620:	fa 01       	movw	r30, r20
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	a1 01       	movw	r20, r2
    162c:	0e 2d       	mov	r16, r14
    162e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__ftoa_engine>
    1632:	5c 01       	movw	r10, r24
    1634:	c9 80       	ldd	r12, Y+1	; 0x01
    1636:	2c 2d       	mov	r18, r12
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	39 8b       	std	Y+17, r19	; 0x11
    163c:	28 8b       	std	Y+16, r18	; 0x10
    163e:	c0 fe       	sbrs	r12, 0
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <vfprintf+0x19c>
    1642:	38 89       	ldd	r19, Y+16	; 0x10
    1644:	33 ff       	sbrs	r19, 3
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <vfprintf+0x1a8>
    1648:	11 fd       	sbrc	r17, 1
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <vfprintf+0x1ac>
    164c:	12 ff       	sbrs	r17, 2
    164e:	06 c0       	rjmp	.+12     	; 0x165c <vfprintf+0x1b0>
    1650:	00 e2       	ldi	r16, 0x20	; 32
    1652:	05 c0       	rjmp	.+10     	; 0x165e <vfprintf+0x1b2>
    1654:	0d e2       	ldi	r16, 0x2D	; 45
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x1b2>
    1658:	0b e2       	ldi	r16, 0x2B	; 43
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vfprintf+0x1b2>
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	88 89       	ldd	r24, Y+16	; 0x10
    1660:	99 89       	ldd	r25, Y+17	; 0x11
    1662:	8c 70       	andi	r24, 0x0C	; 12
    1664:	90 70       	andi	r25, 0x00	; 0
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	09 f4       	brne	.+2      	; 0x166c <vfprintf+0x1c0>
    166a:	3c c0       	rjmp	.+120    	; 0x16e4 <vfprintf+0x238>
    166c:	00 23       	and	r16, r16
    166e:	11 f0       	breq	.+4      	; 0x1674 <vfprintf+0x1c8>
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <vfprintf+0x1ca>
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	8d 15       	cp	r24, r13
    1678:	58 f4       	brcc	.+22     	; 0x1690 <vfprintf+0x1e4>
    167a:	d8 1a       	sub	r13, r24
    167c:	13 fd       	sbrc	r17, 3
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <vfprintf+0x1e6>
    1680:	80 e2       	ldi	r24, 0x20	; 32
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b4 01       	movw	r22, r8
    1686:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    168a:	da 94       	dec	r13
    168c:	c9 f7       	brne	.-14     	; 0x1680 <vfprintf+0x1d4>
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <vfprintf+0x1e6>
    1690:	dd 24       	eor	r13, r13
    1692:	00 23       	and	r16, r16
    1694:	29 f0       	breq	.+10     	; 0x16a0 <vfprintf+0x1f4>
    1696:	80 2f       	mov	r24, r16
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	b4 01       	movw	r22, r8
    169c:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    16a0:	88 89       	ldd	r24, Y+16	; 0x10
    16a2:	83 fd       	sbrc	r24, 3
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <vfprintf+0x204>
    16a6:	3c e6       	ldi	r19, 0x6C	; 108
    16a8:	e3 2e       	mov	r14, r19
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	f3 2e       	mov	r15, r19
    16ae:	11 c0       	rjmp	.+34     	; 0x16d2 <vfprintf+0x226>
    16b0:	28 e6       	ldi	r18, 0x68	; 104
    16b2:	e2 2e       	mov	r14, r18
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	f2 2e       	mov	r15, r18
    16b8:	0c c0       	rjmp	.+24     	; 0x16d2 <vfprintf+0x226>
    16ba:	01 15       	cp	r16, r1
    16bc:	11 05       	cpc	r17, r1
    16be:	09 f0       	breq	.+2      	; 0x16c2 <vfprintf+0x216>
    16c0:	80 52       	subi	r24, 0x20	; 32
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	b4 01       	movw	r22, r8
    16c6:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    16ca:	08 94       	sec
    16cc:	e1 1c       	adc	r14, r1
    16ce:	f1 1c       	adc	r15, r1
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <vfprintf+0x22e>
    16d2:	01 2f       	mov	r16, r17
    16d4:	10 e0       	ldi	r17, 0x00	; 0
    16d6:	00 71       	andi	r16, 0x10	; 16
    16d8:	10 70       	andi	r17, 0x00	; 0
    16da:	f7 01       	movw	r30, r14
    16dc:	84 91       	lpm	r24, Z
    16de:	88 23       	and	r24, r24
    16e0:	61 f7       	brne	.-40     	; 0x16ba <vfprintf+0x20e>
    16e2:	63 c2       	rjmp	.+1222   	; 0x1baa <vfprintf+0x6fe>
    16e4:	17 ff       	sbrs	r17, 7
    16e6:	0e c0       	rjmp	.+28     	; 0x1704 <vfprintf+0x258>
    16e8:	ea 0c       	add	r14, r10
    16ea:	f8 89       	ldd	r31, Y+16	; 0x10
    16ec:	f4 ff       	sbrs	r31, 4
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <vfprintf+0x24c>
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	81 33       	cpi	r24, 0x31	; 49
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <vfprintf+0x24c>
    16f6:	ea 94       	dec	r14
    16f8:	1e 14       	cp	r1, r14
    16fa:	4c f5       	brge	.+82     	; 0x174e <vfprintf+0x2a2>
    16fc:	28 e0       	ldi	r18, 0x08	; 8
    16fe:	2e 15       	cp	r18, r14
    1700:	48 f1       	brcs	.+82     	; 0x1754 <vfprintf+0x2a8>
    1702:	2c c0       	rjmp	.+88     	; 0x175c <vfprintf+0x2b0>
    1704:	16 fd       	sbrc	r17, 6
    1706:	2a c0       	rjmp	.+84     	; 0x175c <vfprintf+0x2b0>
    1708:	8f 2d       	mov	r24, r15
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	8a 15       	cp	r24, r10
    170e:	9b 05       	cpc	r25, r11
    1710:	44 f0       	brlt	.+16     	; 0x1722 <vfprintf+0x276>
    1712:	3c ef       	ldi	r19, 0xFC	; 252
    1714:	a3 16       	cp	r10, r19
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	b3 06       	cpc	r11, r19
    171a:	1c f0       	brlt	.+6      	; 0x1722 <vfprintf+0x276>
    171c:	10 68       	ori	r17, 0x80	; 128
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <vfprintf+0x276>
    1720:	fa 94       	dec	r15
    1722:	ff 20       	and	r15, r15
    1724:	49 f0       	breq	.+18     	; 0x1738 <vfprintf+0x28c>
    1726:	e2 e0       	ldi	r30, 0x02	; 2
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	ec 0f       	add	r30, r28
    172c:	fd 1f       	adc	r31, r29
    172e:	ef 0d       	add	r30, r15
    1730:	f1 1d       	adc	r31, r1
    1732:	80 81       	ld	r24, Z
    1734:	80 33       	cpi	r24, 0x30	; 48
    1736:	a1 f3       	breq	.-24     	; 0x1720 <vfprintf+0x274>
    1738:	17 ff       	sbrs	r17, 7
    173a:	10 c0       	rjmp	.+32     	; 0x175c <vfprintf+0x2b0>
    173c:	ef 2c       	mov	r14, r15
    173e:	e3 94       	inc	r14
    1740:	8f 2d       	mov	r24, r15
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a8 16       	cp	r10, r24
    1746:	b9 06       	cpc	r11, r25
    1748:	44 f4       	brge	.+16     	; 0x175a <vfprintf+0x2ae>
    174a:	fa 18       	sub	r15, r10
    174c:	07 c0       	rjmp	.+14     	; 0x175c <vfprintf+0x2b0>
    174e:	ee 24       	eor	r14, r14
    1750:	e3 94       	inc	r14
    1752:	04 c0       	rjmp	.+8      	; 0x175c <vfprintf+0x2b0>
    1754:	98 e0       	ldi	r25, 0x08	; 8
    1756:	e9 2e       	mov	r14, r25
    1758:	01 c0       	rjmp	.+2      	; 0x175c <vfprintf+0x2b0>
    175a:	ff 24       	eor	r15, r15
    175c:	17 ff       	sbrs	r17, 7
    175e:	07 c0       	rjmp	.+14     	; 0x176e <vfprintf+0x2c2>
    1760:	1a 14       	cp	r1, r10
    1762:	1b 04       	cpc	r1, r11
    1764:	3c f4       	brge	.+14     	; 0x1774 <vfprintf+0x2c8>
    1766:	95 01       	movw	r18, r10
    1768:	2f 5f       	subi	r18, 0xFF	; 255
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <vfprintf+0x2cc>
    176e:	25 e0       	ldi	r18, 0x05	; 5
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x2cc>
    1774:	21 e0       	ldi	r18, 0x01	; 1
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	00 23       	and	r16, r16
    177a:	11 f0       	breq	.+4      	; 0x1780 <vfprintf+0x2d4>
    177c:	2f 5f       	subi	r18, 0xFF	; 255
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	ff 20       	and	r15, r15
    1782:	29 f0       	breq	.+10     	; 0x178e <vfprintf+0x2e2>
    1784:	8f 2d       	mov	r24, r15
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	28 0f       	add	r18, r24
    178c:	39 1f       	adc	r19, r25
    178e:	8d 2d       	mov	r24, r13
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	28 17       	cp	r18, r24
    1794:	39 07       	cpc	r19, r25
    1796:	14 f4       	brge	.+4      	; 0x179c <vfprintf+0x2f0>
    1798:	d2 1a       	sub	r13, r18
    179a:	01 c0       	rjmp	.+2      	; 0x179e <vfprintf+0x2f2>
    179c:	dd 24       	eor	r13, r13
    179e:	61 2e       	mov	r6, r17
    17a0:	77 24       	eor	r7, r7
    17a2:	c3 01       	movw	r24, r6
    17a4:	89 70       	andi	r24, 0x09	; 9
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	49 f4       	brne	.+18     	; 0x17be <vfprintf+0x312>
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <vfprintf+0x30e>
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	b4 01       	movw	r22, r8
    17b4:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    17b8:	da 94       	dec	r13
    17ba:	dd 20       	and	r13, r13
    17bc:	c1 f7       	brne	.-16     	; 0x17ae <vfprintf+0x302>
    17be:	00 23       	and	r16, r16
    17c0:	29 f0       	breq	.+10     	; 0x17cc <vfprintf+0x320>
    17c2:	80 2f       	mov	r24, r16
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	b4 01       	movw	r22, r8
    17c8:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    17cc:	63 fc       	sbrc	r6, 3
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <vfprintf+0x336>
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x332>
    17d2:	80 e3       	ldi	r24, 0x30	; 48
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b4 01       	movw	r22, r8
    17d8:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    17dc:	da 94       	dec	r13
    17de:	dd 20       	and	r13, r13
    17e0:	c1 f7       	brne	.-16     	; 0x17d2 <vfprintf+0x326>
    17e2:	17 ff       	sbrs	r17, 7
    17e4:	48 c0       	rjmp	.+144    	; 0x1876 <vfprintf+0x3ca>
    17e6:	85 01       	movw	r16, r10
    17e8:	b7 fe       	sbrs	r11, 7
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x344>
    17ec:	00 e0       	ldi	r16, 0x00	; 0
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	66 24       	eor	r6, r6
    17f2:	77 24       	eor	r7, r7
    17f4:	95 01       	movw	r18, r10
    17f6:	2e 19       	sub	r18, r14
    17f8:	31 09       	sbc	r19, r1
    17fa:	3b 8b       	std	Y+19, r19	; 0x13
    17fc:	2a 8b       	std	Y+18, r18	; 0x12
    17fe:	25 01       	movw	r4, r10
    1800:	40 1a       	sub	r4, r16
    1802:	51 0a       	sbc	r5, r17
    1804:	42 0c       	add	r4, r2
    1806:	53 1c       	adc	r5, r3
    1808:	6f 2d       	mov	r22, r15
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	ee 24       	eor	r14, r14
    180e:	ff 24       	eor	r15, r15
    1810:	e6 1a       	sub	r14, r22
    1812:	f7 0a       	sbc	r15, r23
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	0f 3f       	cpi	r16, 0xFF	; 255
    1818:	13 07       	cpc	r17, r19
    181a:	29 f4       	brne	.+10     	; 0x1826 <vfprintf+0x37a>
    181c:	8e e2       	ldi	r24, 0x2E	; 46
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b4 01       	movw	r22, r8
    1822:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1826:	a0 16       	cp	r10, r16
    1828:	b1 06       	cpc	r11, r17
    182a:	54 f0       	brlt	.+20     	; 0x1840 <vfprintf+0x394>
    182c:	2a 89       	ldd	r18, Y+18	; 0x12
    182e:	3b 89       	ldd	r19, Y+19	; 0x13
    1830:	20 17       	cp	r18, r16
    1832:	31 07       	cpc	r19, r17
    1834:	2c f4       	brge	.+10     	; 0x1840 <vfprintf+0x394>
    1836:	f2 01       	movw	r30, r4
    1838:	e6 0d       	add	r30, r6
    183a:	f7 1d       	adc	r31, r7
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <vfprintf+0x396>
    1840:	80 e3       	ldi	r24, 0x30	; 48
    1842:	01 50       	subi	r16, 0x01	; 1
    1844:	10 40       	sbci	r17, 0x00	; 0
    1846:	08 94       	sec
    1848:	61 1c       	adc	r6, r1
    184a:	71 1c       	adc	r7, r1
    184c:	0e 15       	cp	r16, r14
    184e:	1f 05       	cpc	r17, r15
    1850:	2c f0       	brlt	.+10     	; 0x185c <vfprintf+0x3b0>
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	b4 01       	movw	r22, r8
    1856:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    185a:	dc cf       	rjmp	.-72     	; 0x1814 <vfprintf+0x368>
    185c:	0a 15       	cp	r16, r10
    185e:	1b 05       	cpc	r17, r11
    1860:	41 f4       	brne	.+16     	; 0x1872 <vfprintf+0x3c6>
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	96 33       	cpi	r25, 0x36	; 54
    1866:	20 f4       	brcc	.+8      	; 0x1870 <vfprintf+0x3c4>
    1868:	95 33       	cpi	r25, 0x35	; 53
    186a:	19 f4       	brne	.+6      	; 0x1872 <vfprintf+0x3c6>
    186c:	38 89       	ldd	r19, Y+16	; 0x10
    186e:	34 ff       	sbrs	r19, 4
    1870:	81 e3       	ldi	r24, 0x31	; 49
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	49 c0       	rjmp	.+146    	; 0x1908 <vfprintf+0x45c>
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	81 33       	cpi	r24, 0x31	; 49
    187a:	11 f0       	breq	.+4      	; 0x1880 <vfprintf+0x3d4>
    187c:	9f ee       	ldi	r25, 0xEF	; 239
    187e:	c9 22       	and	r12, r25
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	b4 01       	movw	r22, r8
    1884:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1888:	ff 20       	and	r15, r15
    188a:	89 f0       	breq	.+34     	; 0x18ae <vfprintf+0x402>
    188c:	8e e2       	ldi	r24, 0x2E	; 46
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	b4 01       	movw	r22, r8
    1892:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1896:	12 e0       	ldi	r17, 0x02	; 2
    1898:	f1 01       	movw	r30, r2
    189a:	e1 0f       	add	r30, r17
    189c:	f1 1d       	adc	r31, r1
    189e:	1f 5f       	subi	r17, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	b4 01       	movw	r22, r8
    18a6:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    18aa:	fa 94       	dec	r15
    18ac:	a9 f7       	brne	.-22     	; 0x1898 <vfprintf+0x3ec>
    18ae:	64 fe       	sbrs	r6, 4
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <vfprintf+0x40c>
    18b2:	85 e4       	ldi	r24, 0x45	; 69
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x410>
    18b8:	85 e6       	ldi	r24, 0x65	; 101
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	b4 01       	movw	r22, r8
    18be:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    18c2:	b7 fc       	sbrc	r11, 7
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <vfprintf+0x424>
    18c6:	a1 14       	cp	r10, r1
    18c8:	b1 04       	cpc	r11, r1
    18ca:	41 f4       	brne	.+16     	; 0x18dc <vfprintf+0x430>
    18cc:	c4 fe       	sbrs	r12, 4
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <vfprintf+0x430>
    18d0:	b0 94       	com	r11
    18d2:	a1 94       	neg	r10
    18d4:	b1 08       	sbc	r11, r1
    18d6:	b3 94       	inc	r11
    18d8:	8d e2       	ldi	r24, 0x2D	; 45
    18da:	01 c0       	rjmp	.+2      	; 0x18de <vfprintf+0x432>
    18dc:	8b e2       	ldi	r24, 0x2B	; 43
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	b4 01       	movw	r22, r8
    18e2:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    18e6:	80 e3       	ldi	r24, 0x30	; 48
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <vfprintf+0x448>
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	e6 ef       	ldi	r30, 0xF6	; 246
    18ee:	ff ef       	ldi	r31, 0xFF	; 255
    18f0:	ae 0e       	add	r10, r30
    18f2:	bf 1e       	adc	r11, r31
    18f4:	fa e0       	ldi	r31, 0x0A	; 10
    18f6:	af 16       	cp	r10, r31
    18f8:	b1 04       	cpc	r11, r1
    18fa:	bc f7       	brge	.-18     	; 0x18ea <vfprintf+0x43e>
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	b4 01       	movw	r22, r8
    1900:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1904:	c5 01       	movw	r24, r10
    1906:	c0 96       	adiw	r24, 0x30	; 48
    1908:	b4 01       	movw	r22, r8
    190a:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    190e:	4d c1       	rjmp	.+666    	; 0x1baa <vfprintf+0x6fe>
    1910:	83 36       	cpi	r24, 0x63	; 99
    1912:	31 f0       	breq	.+12     	; 0x1920 <vfprintf+0x474>
    1914:	83 37       	cpi	r24, 0x73	; 115
    1916:	89 f0       	breq	.+34     	; 0x193a <vfprintf+0x48e>
    1918:	83 35       	cpi	r24, 0x53	; 83
    191a:	09 f0       	breq	.+2      	; 0x191e <vfprintf+0x472>
    191c:	59 c0       	rjmp	.+178    	; 0x19d0 <vfprintf+0x524>
    191e:	22 c0       	rjmp	.+68     	; 0x1964 <vfprintf+0x4b8>
    1920:	9a 01       	movw	r18, r20
    1922:	2e 5f       	subi	r18, 0xFE	; 254
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	3d 87       	std	Y+13, r19	; 0x0d
    1928:	2c 87       	std	Y+12, r18	; 0x0c
    192a:	fa 01       	movw	r30, r20
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	e8 2e       	mov	r14, r24
    1934:	f1 2c       	mov	r15, r1
    1936:	51 01       	movw	r10, r2
    1938:	13 c0       	rjmp	.+38     	; 0x1960 <vfprintf+0x4b4>
    193a:	9a 01       	movw	r18, r20
    193c:	2e 5f       	subi	r18, 0xFE	; 254
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	3d 87       	std	Y+13, r19	; 0x0d
    1942:	2c 87       	std	Y+12, r18	; 0x0c
    1944:	fa 01       	movw	r30, r20
    1946:	a0 80       	ld	r10, Z
    1948:	b1 80       	ldd	r11, Z+1	; 0x01
    194a:	16 ff       	sbrs	r17, 6
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <vfprintf+0x4a8>
    194e:	6f 2d       	mov	r22, r15
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0x4ac>
    1954:	6f ef       	ldi	r22, 0xFF	; 255
    1956:	7f ef       	ldi	r23, 0xFF	; 255
    1958:	c5 01       	movw	r24, r10
    195a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <strnlen>
    195e:	7c 01       	movw	r14, r24
    1960:	1f 77       	andi	r17, 0x7F	; 127
    1962:	14 c0       	rjmp	.+40     	; 0x198c <vfprintf+0x4e0>
    1964:	9a 01       	movw	r18, r20
    1966:	2e 5f       	subi	r18, 0xFE	; 254
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	3d 87       	std	Y+13, r19	; 0x0d
    196c:	2c 87       	std	Y+12, r18	; 0x0c
    196e:	fa 01       	movw	r30, r20
    1970:	a0 80       	ld	r10, Z
    1972:	b1 80       	ldd	r11, Z+1	; 0x01
    1974:	16 ff       	sbrs	r17, 6
    1976:	03 c0       	rjmp	.+6      	; 0x197e <vfprintf+0x4d2>
    1978:	6f 2d       	mov	r22, r15
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0x4d6>
    197e:	6f ef       	ldi	r22, 0xFF	; 255
    1980:	7f ef       	ldi	r23, 0xFF	; 255
    1982:	c5 01       	movw	r24, r10
    1984:	0e 94 a7 10 	call	0x214e	; 0x214e <strnlen_P>
    1988:	7c 01       	movw	r14, r24
    198a:	10 68       	ori	r17, 0x80	; 128
    198c:	13 fd       	sbrc	r17, 3
    198e:	1c c0       	rjmp	.+56     	; 0x19c8 <vfprintf+0x51c>
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x4f2>
    1992:	80 e2       	ldi	r24, 0x20	; 32
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	b4 01       	movw	r22, r8
    1998:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    199c:	da 94       	dec	r13
    199e:	8d 2d       	mov	r24, r13
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	e8 16       	cp	r14, r24
    19a4:	f9 06       	cpc	r15, r25
    19a6:	a8 f3       	brcs	.-22     	; 0x1992 <vfprintf+0x4e6>
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <vfprintf+0x51c>
    19aa:	f5 01       	movw	r30, r10
    19ac:	17 fd       	sbrc	r17, 7
    19ae:	85 91       	lpm	r24, Z+
    19b0:	17 ff       	sbrs	r17, 7
    19b2:	81 91       	ld	r24, Z+
    19b4:	5f 01       	movw	r10, r30
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	b4 01       	movw	r22, r8
    19ba:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    19be:	d1 10       	cpse	r13, r1
    19c0:	da 94       	dec	r13
    19c2:	08 94       	sec
    19c4:	e1 08       	sbc	r14, r1
    19c6:	f1 08       	sbc	r15, r1
    19c8:	e1 14       	cp	r14, r1
    19ca:	f1 04       	cpc	r15, r1
    19cc:	71 f7       	brne	.-36     	; 0x19aa <vfprintf+0x4fe>
    19ce:	ed c0       	rjmp	.+474    	; 0x1baa <vfprintf+0x6fe>
    19d0:	84 36       	cpi	r24, 0x64	; 100
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <vfprintf+0x52c>
    19d4:	89 36       	cpi	r24, 0x69	; 105
    19d6:	71 f5       	brne	.+92     	; 0x1a34 <vfprintf+0x588>
    19d8:	9a 01       	movw	r18, r20
    19da:	17 ff       	sbrs	r17, 7
    19dc:	0a c0       	rjmp	.+20     	; 0x19f2 <vfprintf+0x546>
    19de:	2c 5f       	subi	r18, 0xFC	; 252
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	3d 87       	std	Y+13, r19	; 0x0d
    19e4:	2c 87       	std	Y+12, r18	; 0x0c
    19e6:	fa 01       	movw	r30, r20
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	a2 81       	ldd	r26, Z+2	; 0x02
    19ee:	b3 81       	ldd	r27, Z+3	; 0x03
    19f0:	0b c0       	rjmp	.+22     	; 0x1a08 <vfprintf+0x55c>
    19f2:	2e 5f       	subi	r18, 0xFE	; 254
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	3d 87       	std	Y+13, r19	; 0x0d
    19f8:	2c 87       	std	Y+12, r18	; 0x0c
    19fa:	fa 01       	movw	r30, r20
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	aa 27       	eor	r26, r26
    1a02:	97 fd       	sbrc	r25, 7
    1a04:	a0 95       	com	r26
    1a06:	ba 2f       	mov	r27, r26
    1a08:	01 2f       	mov	r16, r17
    1a0a:	0f 76       	andi	r16, 0x6F	; 111
    1a0c:	b7 ff       	sbrs	r27, 7
    1a0e:	08 c0       	rjmp	.+16     	; 0x1a20 <vfprintf+0x574>
    1a10:	b0 95       	com	r27
    1a12:	a0 95       	com	r26
    1a14:	90 95       	com	r25
    1a16:	81 95       	neg	r24
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	af 4f       	sbci	r26, 0xFF	; 255
    1a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1e:	00 68       	ori	r16, 0x80	; 128
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	a1 01       	movw	r20, r2
    1a26:	2a e0       	ldi	r18, 0x0A	; 10
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	0e 94 4e 11 	call	0x229c	; 0x229c <__ultoa_invert>
    1a2e:	e8 2e       	mov	r14, r24
    1a30:	e2 18       	sub	r14, r2
    1a32:	41 c0       	rjmp	.+130    	; 0x1ab6 <vfprintf+0x60a>
    1a34:	85 37       	cpi	r24, 0x75	; 117
    1a36:	21 f4       	brne	.+8      	; 0x1a40 <vfprintf+0x594>
    1a38:	1f 7e       	andi	r17, 0xEF	; 239
    1a3a:	2a e0       	ldi	r18, 0x0A	; 10
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	20 c0       	rjmp	.+64     	; 0x1a80 <vfprintf+0x5d4>
    1a40:	19 7f       	andi	r17, 0xF9	; 249
    1a42:	8f 36       	cpi	r24, 0x6F	; 111
    1a44:	a9 f0       	breq	.+42     	; 0x1a70 <vfprintf+0x5c4>
    1a46:	80 37       	cpi	r24, 0x70	; 112
    1a48:	20 f4       	brcc	.+8      	; 0x1a52 <vfprintf+0x5a6>
    1a4a:	88 35       	cpi	r24, 0x58	; 88
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <vfprintf+0x5a4>
    1a4e:	b0 c0       	rjmp	.+352    	; 0x1bb0 <vfprintf+0x704>
    1a50:	0b c0       	rjmp	.+22     	; 0x1a68 <vfprintf+0x5bc>
    1a52:	80 37       	cpi	r24, 0x70	; 112
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <vfprintf+0x5b2>
    1a56:	88 37       	cpi	r24, 0x78	; 120
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <vfprintf+0x5b0>
    1a5a:	aa c0       	rjmp	.+340    	; 0x1bb0 <vfprintf+0x704>
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <vfprintf+0x5b4>
    1a5e:	10 61       	ori	r17, 0x10	; 16
    1a60:	14 ff       	sbrs	r17, 4
    1a62:	09 c0       	rjmp	.+18     	; 0x1a76 <vfprintf+0x5ca>
    1a64:	14 60       	ori	r17, 0x04	; 4
    1a66:	07 c0       	rjmp	.+14     	; 0x1a76 <vfprintf+0x5ca>
    1a68:	14 ff       	sbrs	r17, 4
    1a6a:	08 c0       	rjmp	.+16     	; 0x1a7c <vfprintf+0x5d0>
    1a6c:	16 60       	ori	r17, 0x06	; 6
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <vfprintf+0x5d0>
    1a70:	28 e0       	ldi	r18, 0x08	; 8
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	05 c0       	rjmp	.+10     	; 0x1a80 <vfprintf+0x5d4>
    1a76:	20 e1       	ldi	r18, 0x10	; 16
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <vfprintf+0x5d4>
    1a7c:	20 e1       	ldi	r18, 0x10	; 16
    1a7e:	32 e0       	ldi	r19, 0x02	; 2
    1a80:	ca 01       	movw	r24, r20
    1a82:	17 ff       	sbrs	r17, 7
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <vfprintf+0x5ec>
    1a86:	04 96       	adiw	r24, 0x04	; 4
    1a88:	9d 87       	std	Y+13, r25	; 0x0d
    1a8a:	8c 87       	std	Y+12, r24	; 0x0c
    1a8c:	fa 01       	movw	r30, r20
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <vfprintf+0x5fc>
    1a98:	02 96       	adiw	r24, 0x02	; 2
    1a9a:	9d 87       	std	Y+13, r25	; 0x0d
    1a9c:	8c 87       	std	Y+12, r24	; 0x0c
    1a9e:	fa 01       	movw	r30, r20
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a1 01       	movw	r20, r2
    1aaa:	0e 94 4e 11 	call	0x229c	; 0x229c <__ultoa_invert>
    1aae:	e8 2e       	mov	r14, r24
    1ab0:	e2 18       	sub	r14, r2
    1ab2:	01 2f       	mov	r16, r17
    1ab4:	0f 77       	andi	r16, 0x7F	; 127
    1ab6:	06 ff       	sbrs	r16, 6
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <vfprintf+0x620>
    1aba:	0e 7f       	andi	r16, 0xFE	; 254
    1abc:	ef 14       	cp	r14, r15
    1abe:	30 f4       	brcc	.+12     	; 0x1acc <vfprintf+0x620>
    1ac0:	04 ff       	sbrs	r16, 4
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x624>
    1ac4:	02 fd       	sbrc	r16, 2
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <vfprintf+0x624>
    1ac8:	0f 7e       	andi	r16, 0xEF	; 239
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <vfprintf+0x624>
    1acc:	1e 2d       	mov	r17, r14
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <vfprintf+0x626>
    1ad0:	1f 2d       	mov	r17, r15
    1ad2:	80 2f       	mov	r24, r16
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	04 ff       	sbrs	r16, 4
    1ad8:	0c c0       	rjmp	.+24     	; 0x1af2 <vfprintf+0x646>
    1ada:	fe 01       	movw	r30, r28
    1adc:	ee 0d       	add	r30, r14
    1ade:	f1 1d       	adc	r31, r1
    1ae0:	20 81       	ld	r18, Z
    1ae2:	20 33       	cpi	r18, 0x30	; 48
    1ae4:	11 f4       	brne	.+4      	; 0x1aea <vfprintf+0x63e>
    1ae6:	09 7e       	andi	r16, 0xE9	; 233
    1ae8:	09 c0       	rjmp	.+18     	; 0x1afc <vfprintf+0x650>
    1aea:	02 ff       	sbrs	r16, 2
    1aec:	06 c0       	rjmp	.+12     	; 0x1afa <vfprintf+0x64e>
    1aee:	1e 5f       	subi	r17, 0xFE	; 254
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <vfprintf+0x650>
    1af2:	86 78       	andi	r24, 0x86	; 134
    1af4:	90 70       	andi	r25, 0x00	; 0
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	09 f0       	breq	.+2      	; 0x1afc <vfprintf+0x650>
    1afa:	1f 5f       	subi	r17, 0xFF	; 255
    1afc:	a0 2e       	mov	r10, r16
    1afe:	bb 24       	eor	r11, r11
    1b00:	03 fd       	sbrc	r16, 3
    1b02:	12 c0       	rjmp	.+36     	; 0x1b28 <vfprintf+0x67c>
    1b04:	00 ff       	sbrs	r16, 0
    1b06:	0d c0       	rjmp	.+26     	; 0x1b22 <vfprintf+0x676>
    1b08:	fe 2c       	mov	r15, r14
    1b0a:	1d 15       	cp	r17, r13
    1b0c:	50 f4       	brcc	.+20     	; 0x1b22 <vfprintf+0x676>
    1b0e:	fd 0c       	add	r15, r13
    1b10:	f1 1a       	sub	r15, r17
    1b12:	1d 2d       	mov	r17, r13
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <vfprintf+0x676>
    1b16:	80 e2       	ldi	r24, 0x20	; 32
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	b4 01       	movw	r22, r8
    1b1c:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1b20:	1f 5f       	subi	r17, 0xFF	; 255
    1b22:	1d 15       	cp	r17, r13
    1b24:	c0 f3       	brcs	.-16     	; 0x1b16 <vfprintf+0x66a>
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <vfprintf+0x684>
    1b28:	1d 15       	cp	r17, r13
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <vfprintf+0x684>
    1b2c:	d1 1a       	sub	r13, r17
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <vfprintf+0x686>
    1b30:	dd 24       	eor	r13, r13
    1b32:	a4 fe       	sbrs	r10, 4
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <vfprintf+0x6a8>
    1b36:	80 e3       	ldi	r24, 0x30	; 48
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1b40:	a2 fe       	sbrs	r10, 2
    1b42:	1f c0       	rjmp	.+62     	; 0x1b82 <vfprintf+0x6d6>
    1b44:	a1 fe       	sbrs	r10, 1
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <vfprintf+0x6a2>
    1b48:	88 e5       	ldi	r24, 0x58	; 88
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	10 c0       	rjmp	.+32     	; 0x1b6e <vfprintf+0x6c2>
    1b4e:	88 e7       	ldi	r24, 0x78	; 120
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0d c0       	rjmp	.+26     	; 0x1b6e <vfprintf+0x6c2>
    1b54:	c5 01       	movw	r24, r10
    1b56:	86 78       	andi	r24, 0x86	; 134
    1b58:	90 70       	andi	r25, 0x00	; 0
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <vfprintf+0x6d6>
    1b5e:	a1 fc       	sbrc	r10, 1
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <vfprintf+0x6ba>
    1b62:	80 e2       	ldi	r24, 0x20	; 32
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <vfprintf+0x6bc>
    1b66:	8b e2       	ldi	r24, 0x2B	; 43
    1b68:	07 fd       	sbrc	r16, 7
    1b6a:	8d e2       	ldi	r24, 0x2D	; 45
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	b4 01       	movw	r22, r8
    1b70:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <vfprintf+0x6d6>
    1b76:	80 e3       	ldi	r24, 0x30	; 48
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	b4 01       	movw	r22, r8
    1b7c:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1b80:	fa 94       	dec	r15
    1b82:	ef 14       	cp	r14, r15
    1b84:	c0 f3       	brcs	.-16     	; 0x1b76 <vfprintf+0x6ca>
    1b86:	ea 94       	dec	r14
    1b88:	f1 01       	movw	r30, r2
    1b8a:	ee 0d       	add	r30, r14
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	80 81       	ld	r24, Z
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	b4 01       	movw	r22, r8
    1b94:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1b98:	ee 20       	and	r14, r14
    1b9a:	a9 f7       	brne	.-22     	; 0x1b86 <vfprintf+0x6da>
    1b9c:	06 c0       	rjmp	.+12     	; 0x1baa <vfprintf+0x6fe>
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	0e 94 df 10 	call	0x21be	; 0x21be <fputc>
    1ba8:	da 94       	dec	r13
    1baa:	dd 20       	and	r13, r13
    1bac:	c1 f7       	brne	.-16     	; 0x1b9e <vfprintf+0x6f2>
    1bae:	8e cc       	rjmp	.-1764   	; 0x14cc <vfprintf+0x20>
    1bb0:	f4 01       	movw	r30, r8
    1bb2:	86 81       	ldd	r24, Z+6	; 0x06
    1bb4:	97 81       	ldd	r25, Z+7	; 0x07
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <vfprintf+0x710>
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
    1bbc:	65 96       	adiw	r28, 0x15	; 21
    1bbe:	e2 e1       	ldi	r30, 0x12	; 18
    1bc0:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__epilogue_restores__>

00001bc4 <__divmodhi4>:
    1bc4:	97 fb       	bst	r25, 7
    1bc6:	09 2e       	mov	r0, r25
    1bc8:	07 26       	eor	r0, r23
    1bca:	0a d0       	rcall	.+20     	; 0x1be0 <__divmodhi4_neg1>
    1bcc:	77 fd       	sbrc	r23, 7
    1bce:	04 d0       	rcall	.+8      	; 0x1bd8 <__divmodhi4_neg2>
    1bd0:	43 d0       	rcall	.+134    	; 0x1c58 <__udivmodhi4>
    1bd2:	06 d0       	rcall	.+12     	; 0x1be0 <__divmodhi4_neg1>
    1bd4:	00 20       	and	r0, r0
    1bd6:	1a f4       	brpl	.+6      	; 0x1bde <__divmodhi4_exit>

00001bd8 <__divmodhi4_neg2>:
    1bd8:	70 95       	com	r23
    1bda:	61 95       	neg	r22
    1bdc:	7f 4f       	sbci	r23, 0xFF	; 255

00001bde <__divmodhi4_exit>:
    1bde:	08 95       	ret

00001be0 <__divmodhi4_neg1>:
    1be0:	f6 f7       	brtc	.-4      	; 0x1bde <__divmodhi4_exit>
    1be2:	90 95       	com	r25
    1be4:	81 95       	neg	r24
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	08 95       	ret

00001bea <__prologue_saves__>:
    1bea:	2f 92       	push	r2
    1bec:	3f 92       	push	r3
    1bee:	4f 92       	push	r4
    1bf0:	5f 92       	push	r5
    1bf2:	6f 92       	push	r6
    1bf4:	7f 92       	push	r7
    1bf6:	8f 92       	push	r8
    1bf8:	9f 92       	push	r9
    1bfa:	af 92       	push	r10
    1bfc:	bf 92       	push	r11
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	ca 1b       	sub	r28, r26
    1c14:	db 0b       	sbc	r29, r27
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	09 94       	ijmp

00001c22 <__epilogue_restores__>:
    1c22:	2a 88       	ldd	r2, Y+18	; 0x12
    1c24:	39 88       	ldd	r3, Y+17	; 0x11
    1c26:	48 88       	ldd	r4, Y+16	; 0x10
    1c28:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c30:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c32:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c34:	b9 84       	ldd	r11, Y+9	; 0x09
    1c36:	c8 84       	ldd	r12, Y+8	; 0x08
    1c38:	df 80       	ldd	r13, Y+7	; 0x07
    1c3a:	ee 80       	ldd	r14, Y+6	; 0x06
    1c3c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c3e:	0c 81       	ldd	r16, Y+4	; 0x04
    1c40:	1b 81       	ldd	r17, Y+3	; 0x03
    1c42:	aa 81       	ldd	r26, Y+2	; 0x02
    1c44:	b9 81       	ldd	r27, Y+1	; 0x01
    1c46:	ce 0f       	add	r28, r30
    1c48:	d1 1d       	adc	r29, r1
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	ed 01       	movw	r28, r26
    1c56:	08 95       	ret

00001c58 <__udivmodhi4>:
    1c58:	aa 1b       	sub	r26, r26
    1c5a:	bb 1b       	sub	r27, r27
    1c5c:	51 e1       	ldi	r21, 0x11	; 17
    1c5e:	07 c0       	rjmp	.+14     	; 0x1c6e <__udivmodhi4_ep>

00001c60 <__udivmodhi4_loop>:
    1c60:	aa 1f       	adc	r26, r26
    1c62:	bb 1f       	adc	r27, r27
    1c64:	a6 17       	cp	r26, r22
    1c66:	b7 07       	cpc	r27, r23
    1c68:	10 f0       	brcs	.+4      	; 0x1c6e <__udivmodhi4_ep>
    1c6a:	a6 1b       	sub	r26, r22
    1c6c:	b7 0b       	sbc	r27, r23

00001c6e <__udivmodhi4_ep>:
    1c6e:	88 1f       	adc	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	5a 95       	dec	r21
    1c74:	a9 f7       	brne	.-22     	; 0x1c60 <__udivmodhi4_loop>
    1c76:	80 95       	com	r24
    1c78:	90 95       	com	r25
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	08 95       	ret

00001c80 <strtod>:
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e4       	ldi	r30, 0x46	; 70
    1c86:	fe e0       	ldi	r31, 0x0E	; 14
    1c88:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__prologue_saves__+0x8>
    1c8c:	5b 01       	movw	r10, r22
    1c8e:	61 15       	cp	r22, r1
    1c90:	71 05       	cpc	r23, r1
    1c92:	21 f0       	breq	.+8      	; 0x1c9c <strtod+0x1c>
    1c94:	db 01       	movw	r26, r22
    1c96:	8c 93       	st	X, r24
    1c98:	11 96       	adiw	r26, 0x01	; 1
    1c9a:	9c 93       	st	X, r25
    1c9c:	7c 01       	movw	r14, r24
    1c9e:	e7 01       	movw	r28, r14
    1ca0:	08 94       	sec
    1ca2:	e1 1c       	adc	r14, r1
    1ca4:	f1 1c       	adc	r15, r1
    1ca6:	08 81       	ld	r16, Y
    1ca8:	67 01       	movw	r12, r14
    1caa:	80 2f       	mov	r24, r16
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 87 10 	call	0x210e	; 0x210e <isspace>
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	a1 f7       	brne	.-24     	; 0x1c9e <strtod+0x1e>
    1cb6:	0d 32       	cpi	r16, 0x2D	; 45
    1cb8:	41 f4       	brne	.+16     	; 0x1cca <strtod+0x4a>
    1cba:	09 81       	ldd	r16, Y+1	; 0x01
    1cbc:	42 e0       	ldi	r20, 0x02	; 2
    1cbe:	c4 2e       	mov	r12, r20
    1cc0:	d1 2c       	mov	r13, r1
    1cc2:	cc 0e       	add	r12, r28
    1cc4:	dd 1e       	adc	r13, r29
    1cc6:	11 e0       	ldi	r17, 0x01	; 1
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <strtod+0x5c>
    1cca:	0b 32       	cpi	r16, 0x2B	; 43
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <strtod+0x5a>
    1cce:	09 81       	ldd	r16, Y+1	; 0x01
    1cd0:	32 e0       	ldi	r19, 0x02	; 2
    1cd2:	c3 2e       	mov	r12, r19
    1cd4:	d1 2c       	mov	r13, r1
    1cd6:	cc 0e       	add	r12, r28
    1cd8:	dd 1e       	adc	r13, r29
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	e6 01       	movw	r28, r12
    1cde:	21 97       	sbiw	r28, 0x01	; 1
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	60 e7       	ldi	r22, 0x70	; 112
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	43 e0       	ldi	r20, 0x03	; 3
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	0e 94 8f 10 	call	0x211e	; 0x211e <strncasecmp_P>
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	d1 f4       	brne	.+52     	; 0x1d26 <strtod+0xa6>
    1cf2:	e6 01       	movw	r28, r12
    1cf4:	22 96       	adiw	r28, 0x02	; 2
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	63 e7       	ldi	r22, 0x73	; 115
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	45 e0       	ldi	r20, 0x05	; 5
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	0e 94 8f 10 	call	0x211e	; 0x211e <strncasecmp_P>
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <strtod+0x8c>
    1d08:	e6 01       	movw	r28, r12
    1d0a:	27 96       	adiw	r28, 0x07	; 7
    1d0c:	a1 14       	cp	r10, r1
    1d0e:	b1 04       	cpc	r11, r1
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <strtod+0x98>
    1d12:	f5 01       	movw	r30, r10
    1d14:	d1 83       	std	Z+1, r29	; 0x01
    1d16:	c0 83       	st	Z, r28
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	90 e8       	ldi	r25, 0x80	; 128
    1d1e:	11 23       	and	r17, r17
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <strtod+0xa4>
    1d22:	0a c1       	rjmp	.+532    	; 0x1f38 <strtod+0x2b8>
    1d24:	04 c1       	rjmp	.+520    	; 0x1f2e <strtod+0x2ae>
    1d26:	ce 01       	movw	r24, r28
    1d28:	68 e7       	ldi	r22, 0x78	; 120
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	43 e0       	ldi	r20, 0x03	; 3
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	0e 94 8f 10 	call	0x211e	; 0x211e <strncasecmp_P>
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	59 f4       	brne	.+22     	; 0x1d4e <strtod+0xce>
    1d38:	a1 14       	cp	r10, r1
    1d3a:	b1 04       	cpc	r11, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <strtod+0xc0>
    1d3e:	f9 c0       	rjmp	.+498    	; 0x1f32 <strtod+0x2b2>
    1d40:	c6 01       	movw	r24, r12
    1d42:	02 96       	adiw	r24, 0x02	; 2
    1d44:	d5 01       	movw	r26, r10
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	9c 93       	st	X, r25
    1d4a:	8e 93       	st	-X, r24
    1d4c:	f2 c0       	rjmp	.+484    	; 0x1f32 <strtod+0x2b2>
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	ba 01       	movw	r22, r20
    1d54:	88 24       	eor	r8, r8
    1d56:	99 24       	eor	r9, r9
    1d58:	00 53       	subi	r16, 0x30	; 48
    1d5a:	0a 30       	cpi	r16, 0x0A	; 10
    1d5c:	90 f5       	brcc	.+100    	; 0x1dc2 <strtod+0x142>
    1d5e:	12 60       	ori	r17, 0x02	; 2
    1d60:	21 2f       	mov	r18, r17
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	c9 01       	movw	r24, r18
    1d66:	88 70       	andi	r24, 0x08	; 8
    1d68:	90 70       	andi	r25, 0x00	; 0
    1d6a:	12 ff       	sbrs	r17, 2
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <strtod+0xfa>
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	69 f5       	brne	.+90     	; 0x1dcc <strtod+0x14c>
    1d72:	08 94       	sec
    1d74:	81 1c       	adc	r8, r1
    1d76:	91 1c       	adc	r9, r1
    1d78:	29 c0       	rjmp	.+82     	; 0x1dcc <strtod+0x14c>
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <strtod+0x104>
    1d7e:	08 94       	sec
    1d80:	81 08       	sbc	r8, r1
    1d82:	91 08       	sbc	r9, r1
    1d84:	db 01       	movw	r26, r22
    1d86:	ca 01       	movw	r24, r20
    1d88:	d2 e0       	ldi	r29, 0x02	; 2
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	aa 1f       	adc	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	da 95       	dec	r29
    1d94:	d1 f7       	brne	.-12     	; 0x1d8a <strtod+0x10a>
    1d96:	48 0f       	add	r20, r24
    1d98:	59 1f       	adc	r21, r25
    1d9a:	6a 1f       	adc	r22, r26
    1d9c:	7b 1f       	adc	r23, r27
    1d9e:	44 0f       	add	r20, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	66 1f       	adc	r22, r22
    1da4:	77 1f       	adc	r23, r23
    1da6:	40 0f       	add	r20, r16
    1da8:	51 1d       	adc	r21, r1
    1daa:	61 1d       	adc	r22, r1
    1dac:	71 1d       	adc	r23, r1
    1dae:	48 39       	cpi	r20, 0x98	; 152
    1db0:	b9 e9       	ldi	r27, 0x99	; 153
    1db2:	5b 07       	cpc	r21, r27
    1db4:	b9 e9       	ldi	r27, 0x99	; 153
    1db6:	6b 07       	cpc	r22, r27
    1db8:	b9 e1       	ldi	r27, 0x19	; 25
    1dba:	7b 07       	cpc	r23, r27
    1dbc:	38 f0       	brcs	.+14     	; 0x1dcc <strtod+0x14c>
    1dbe:	14 60       	ori	r17, 0x04	; 4
    1dc0:	05 c0       	rjmp	.+10     	; 0x1dcc <strtod+0x14c>
    1dc2:	0e 3f       	cpi	r16, 0xFE	; 254
    1dc4:	39 f4       	brne	.+14     	; 0x1dd4 <strtod+0x154>
    1dc6:	13 fd       	sbrc	r17, 3
    1dc8:	43 c0       	rjmp	.+134    	; 0x1e50 <strtod+0x1d0>
    1dca:	18 60       	ori	r17, 0x08	; 8
    1dcc:	f6 01       	movw	r30, r12
    1dce:	01 91       	ld	r16, Z+
    1dd0:	6f 01       	movw	r12, r30
    1dd2:	c2 cf       	rjmp	.-124    	; 0x1d58 <strtod+0xd8>
    1dd4:	05 33       	cpi	r16, 0x35	; 53
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <strtod+0x15c>
    1dd8:	05 31       	cpi	r16, 0x15	; 21
    1dda:	d1 f5       	brne	.+116    	; 0x1e50 <strtod+0x1d0>
    1ddc:	d6 01       	movw	r26, r12
    1dde:	ec 91       	ld	r30, X
    1de0:	ed 32       	cpi	r30, 0x2D	; 45
    1de2:	11 f4       	brne	.+4      	; 0x1de8 <strtod+0x168>
    1de4:	10 61       	ori	r17, 0x10	; 16
    1de6:	08 c0       	rjmp	.+16     	; 0x1df8 <strtod+0x178>
    1de8:	eb 32       	cpi	r30, 0x2B	; 43
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <strtod+0x176>
    1dec:	c6 01       	movw	r24, r12
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	21 e0       	ldi	r18, 0x01	; 1
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <strtod+0x186>
    1df6:	d6 01       	movw	r26, r12
    1df8:	11 96       	adiw	r26, 0x01	; 1
    1dfa:	ec 91       	ld	r30, X
    1dfc:	11 97       	sbiw	r26, 0x01	; 1
    1dfe:	c6 01       	movw	r24, r12
    1e00:	02 96       	adiw	r24, 0x02	; 2
    1e02:	22 e0       	ldi	r18, 0x02	; 2
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	e0 53       	subi	r30, 0x30	; 48
    1e08:	ea 30       	cpi	r30, 0x0A	; 10
    1e0a:	20 f0       	brcs	.+8      	; 0x1e14 <strtod+0x194>
    1e0c:	6c 01       	movw	r12, r24
    1e0e:	c2 1a       	sub	r12, r18
    1e10:	d3 0a       	sbc	r13, r19
    1e12:	1e c0       	rjmp	.+60     	; 0x1e50 <strtod+0x1d0>
    1e14:	dc 01       	movw	r26, r24
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	fc e0       	ldi	r31, 0x0C	; 12
    1e1c:	20 38       	cpi	r18, 0x80	; 128
    1e1e:	3f 07       	cpc	r19, r31
    1e20:	5c f4       	brge	.+22     	; 0x1e38 <strtod+0x1b8>
    1e22:	c9 01       	movw	r24, r18
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	28 0f       	add	r18, r24
    1e2e:	39 1f       	adc	r19, r25
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	2e 0f       	add	r18, r30
    1e36:	31 1d       	adc	r19, r1
    1e38:	ed 91       	ld	r30, X+
    1e3a:	e0 53       	subi	r30, 0x30	; 48
    1e3c:	6d 01       	movw	r12, r26
    1e3e:	ea 30       	cpi	r30, 0x0A	; 10
    1e40:	60 f3       	brcs	.-40     	; 0x1e1a <strtod+0x19a>
    1e42:	14 ff       	sbrs	r17, 4
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <strtod+0x1cc>
    1e46:	30 95       	com	r19
    1e48:	21 95       	neg	r18
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	82 0e       	add	r8, r18
    1e4e:	93 1e       	adc	r9, r19
    1e50:	c1 2f       	mov	r28, r17
    1e52:	d0 e0       	ldi	r29, 0x00	; 0
    1e54:	11 ff       	sbrs	r17, 1
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <strtod+0x1e8>
    1e58:	a1 14       	cp	r10, r1
    1e5a:	b1 04       	cpc	r11, r1
    1e5c:	29 f0       	breq	.+10     	; 0x1e68 <strtod+0x1e8>
    1e5e:	c6 01       	movw	r24, r12
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	d5 01       	movw	r26, r10
    1e64:	8d 93       	st	X+, r24
    1e66:	9c 93       	st	X, r25
    1e68:	cb 01       	movw	r24, r22
    1e6a:	ba 01       	movw	r22, r20
    1e6c:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatunsisf>
    1e70:	6b 01       	movw	r12, r22
    1e72:	7c 01       	movw	r14, r24
    1e74:	ce 01       	movw	r24, r28
    1e76:	83 70       	andi	r24, 0x03	; 3
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	21 f4       	brne	.+8      	; 0x1e88 <strtod+0x208>
    1e80:	f7 fa       	bst	r15, 7
    1e82:	f0 94       	com	r15
    1e84:	f7 f8       	bld	r15, 7
    1e86:	f0 94       	com	r15
    1e88:	c7 01       	movw	r24, r14
    1e8a:	b6 01       	movw	r22, r12
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	a9 01       	movw	r20, r18
    1e92:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <strtod+0x21c>
    1e9a:	44 c0       	rjmp	.+136    	; 0x1f24 <strtod+0x2a4>
    1e9c:	97 fe       	sbrs	r9, 7
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <strtod+0x22e>
    1ea0:	90 94       	com	r9
    1ea2:	81 94       	neg	r8
    1ea4:	91 08       	sbc	r9, r1
    1ea6:	93 94       	inc	r9
    1ea8:	c7 ea       	ldi	r28, 0xA7	; 167
    1eaa:	d0 e0       	ldi	r29, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <strtod+0x232>
    1eae:	cf e8       	ldi	r28, 0x8F	; 143
    1eb0:	d0 e0       	ldi	r29, 0x00	; 0
    1eb2:	98 ee       	ldi	r25, 0xE8	; 232
    1eb4:	69 2e       	mov	r6, r25
    1eb6:	9f ef       	ldi	r25, 0xFF	; 255
    1eb8:	79 2e       	mov	r7, r25
    1eba:	6c 0e       	add	r6, r28
    1ebc:	7d 1e       	adc	r7, r29
    1ebe:	20 e2       	ldi	r18, 0x20	; 32
    1ec0:	a2 2e       	mov	r10, r18
    1ec2:	b1 2c       	mov	r11, r1
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <strtod+0x264>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	05 91       	lpm	r16, Z+
    1eca:	15 91       	lpm	r17, Z+
    1ecc:	25 91       	lpm	r18, Z+
    1ece:	34 91       	lpm	r19, Z
    1ed0:	c7 01       	movw	r24, r14
    1ed2:	b6 01       	movw	r22, r12
    1ed4:	a9 01       	movw	r20, r18
    1ed6:	98 01       	movw	r18, r16
    1ed8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
    1edc:	6b 01       	movw	r12, r22
    1ede:	7c 01       	movw	r14, r24
    1ee0:	8a 18       	sub	r8, r10
    1ee2:	9b 08       	sbc	r9, r11
    1ee4:	8a 14       	cp	r8, r10
    1ee6:	9b 04       	cpc	r9, r11
    1ee8:	74 f7       	brge	.-36     	; 0x1ec6 <strtod+0x246>
    1eea:	24 97       	sbiw	r28, 0x04	; 4
    1eec:	b5 94       	asr	r11
    1eee:	a7 94       	ror	r10
    1ef0:	c6 15       	cp	r28, r6
    1ef2:	d7 05       	cpc	r29, r7
    1ef4:	b9 f7       	brne	.-18     	; 0x1ee4 <strtod+0x264>
    1ef6:	c6 01       	movw	r24, r12
    1ef8:	d7 01       	movw	r26, r14
    1efa:	2a 2f       	mov	r18, r26
    1efc:	22 0f       	add	r18, r18
    1efe:	2b 2f       	mov	r18, r27
    1f00:	22 1f       	adc	r18, r18
    1f02:	2f 3f       	cpi	r18, 0xFF	; 255
    1f04:	49 f0       	breq	.+18     	; 0x1f18 <strtod+0x298>
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	a9 01       	movw	r20, r18
    1f10:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	31 f4       	brne	.+12     	; 0x1f24 <strtod+0x2a4>
    1f18:	82 e2       	ldi	r24, 0x22	; 34
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	90 93 2b 07 	sts	0x072B, r25
    1f20:	80 93 2a 07 	sts	0x072A, r24
    1f24:	3c 2d       	mov	r19, r12
    1f26:	2d 2d       	mov	r18, r13
    1f28:	9e 2d       	mov	r25, r14
    1f2a:	8f 2d       	mov	r24, r15
    1f2c:	06 c0       	rjmp	.+12     	; 0x1f3a <strtod+0x2ba>
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <strtod+0x2ba>
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	90 ec       	ldi	r25, 0xC0	; 192
    1f38:	8f e7       	ldi	r24, 0x7F	; 127
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	87 2f       	mov	r24, r23
    1f40:	92 2f       	mov	r25, r18
    1f42:	a5 2f       	mov	r26, r21
    1f44:	b4 2f       	mov	r27, r20
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	ee e0       	ldi	r30, 0x0E	; 14
    1f50:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__epilogue_restores__+0x8>

00001f54 <abort>:
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	f8 94       	cli
    1f5a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_exit>

00001f5e <__ftoa_engine>:
    1f5e:	28 30       	cpi	r18, 0x08	; 8
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <__ftoa_engine+0x6>
    1f62:	27 e0       	ldi	r18, 0x07	; 7
    1f64:	33 27       	eor	r19, r19
    1f66:	da 01       	movw	r26, r20
    1f68:	99 0f       	add	r25, r25
    1f6a:	31 1d       	adc	r19, r1
    1f6c:	87 fd       	sbrc	r24, 7
    1f6e:	91 60       	ori	r25, 0x01	; 1
    1f70:	00 96       	adiw	r24, 0x00	; 0
    1f72:	61 05       	cpc	r22, r1
    1f74:	71 05       	cpc	r23, r1
    1f76:	39 f4       	brne	.+14     	; 0x1f86 <__ftoa_engine+0x28>
    1f78:	32 60       	ori	r19, 0x02	; 2
    1f7a:	2e 5f       	subi	r18, 0xFE	; 254
    1f7c:	3d 93       	st	X+, r19
    1f7e:	30 e3       	ldi	r19, 0x30	; 48
    1f80:	2a 95       	dec	r18
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <__ftoa_engine+0x1e>
    1f84:	08 95       	ret
    1f86:	9f 3f       	cpi	r25, 0xFF	; 255
    1f88:	30 f0       	brcs	.+12     	; 0x1f96 <__ftoa_engine+0x38>
    1f8a:	80 38       	cpi	r24, 0x80	; 128
    1f8c:	71 05       	cpc	r23, r1
    1f8e:	61 05       	cpc	r22, r1
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <__ftoa_engine+0x36>
    1f92:	3c 5f       	subi	r19, 0xFC	; 252
    1f94:	3c 5f       	subi	r19, 0xFC	; 252
    1f96:	3d 93       	st	X+, r19
    1f98:	91 30       	cpi	r25, 0x01	; 1
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <__ftoa_engine+0x40>
    1f9c:	80 68       	ori	r24, 0x80	; 128
    1f9e:	91 1d       	adc	r25, r1
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	1f 93       	push	r17
    1fa6:	0f 93       	push	r16
    1fa8:	ff 92       	push	r15
    1faa:	ef 92       	push	r14
    1fac:	19 2f       	mov	r17, r25
    1fae:	98 7f       	andi	r25, 0xF8	; 248
    1fb0:	96 95       	lsr	r25
    1fb2:	e9 2f       	mov	r30, r25
    1fb4:	96 95       	lsr	r25
    1fb6:	96 95       	lsr	r25
    1fb8:	e9 0f       	add	r30, r25
    1fba:	ff 27       	eor	r31, r31
    1fbc:	eb 5f       	subi	r30, 0xFB	; 251
    1fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc0:	99 27       	eor	r25, r25
    1fc2:	33 27       	eor	r19, r19
    1fc4:	ee 24       	eor	r14, r14
    1fc6:	ff 24       	eor	r15, r15
    1fc8:	a7 01       	movw	r20, r14
    1fca:	e7 01       	movw	r28, r14
    1fcc:	05 90       	lpm	r0, Z+
    1fce:	08 94       	sec
    1fd0:	07 94       	ror	r0
    1fd2:	28 f4       	brcc	.+10     	; 0x1fde <__ftoa_engine+0x80>
    1fd4:	36 0f       	add	r19, r22
    1fd6:	e7 1e       	adc	r14, r23
    1fd8:	f8 1e       	adc	r15, r24
    1fda:	49 1f       	adc	r20, r25
    1fdc:	51 1d       	adc	r21, r1
    1fde:	66 0f       	add	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	06 94       	lsr	r0
    1fe8:	a1 f7       	brne	.-24     	; 0x1fd2 <__ftoa_engine+0x74>
    1fea:	05 90       	lpm	r0, Z+
    1fec:	07 94       	ror	r0
    1fee:	28 f4       	brcc	.+10     	; 0x1ffa <__ftoa_engine+0x9c>
    1ff0:	e7 0e       	add	r14, r23
    1ff2:	f8 1e       	adc	r15, r24
    1ff4:	49 1f       	adc	r20, r25
    1ff6:	56 1f       	adc	r21, r22
    1ff8:	c1 1d       	adc	r28, r1
    1ffa:	77 0f       	add	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	66 1f       	adc	r22, r22
    2002:	06 94       	lsr	r0
    2004:	a1 f7       	brne	.-24     	; 0x1fee <__ftoa_engine+0x90>
    2006:	05 90       	lpm	r0, Z+
    2008:	07 94       	ror	r0
    200a:	28 f4       	brcc	.+10     	; 0x2016 <__ftoa_engine+0xb8>
    200c:	f8 0e       	add	r15, r24
    200e:	49 1f       	adc	r20, r25
    2010:	56 1f       	adc	r21, r22
    2012:	c7 1f       	adc	r28, r23
    2014:	d1 1d       	adc	r29, r1
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	66 1f       	adc	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	06 94       	lsr	r0
    2020:	a1 f7       	brne	.-24     	; 0x200a <__ftoa_engine+0xac>
    2022:	05 90       	lpm	r0, Z+
    2024:	07 94       	ror	r0
    2026:	20 f4       	brcc	.+8      	; 0x2030 <__ftoa_engine+0xd2>
    2028:	49 0f       	add	r20, r25
    202a:	56 1f       	adc	r21, r22
    202c:	c7 1f       	adc	r28, r23
    202e:	d8 1f       	adc	r29, r24
    2030:	99 0f       	add	r25, r25
    2032:	66 1f       	adc	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	88 1f       	adc	r24, r24
    2038:	06 94       	lsr	r0
    203a:	a9 f7       	brne	.-22     	; 0x2026 <__ftoa_engine+0xc8>
    203c:	84 91       	lpm	r24, Z
    203e:	10 95       	com	r17
    2040:	17 70       	andi	r17, 0x07	; 7
    2042:	41 f0       	breq	.+16     	; 0x2054 <__ftoa_engine+0xf6>
    2044:	d6 95       	lsr	r29
    2046:	c7 95       	ror	r28
    2048:	57 95       	ror	r21
    204a:	47 95       	ror	r20
    204c:	f7 94       	ror	r15
    204e:	e7 94       	ror	r14
    2050:	1a 95       	dec	r17
    2052:	c1 f7       	brne	.-16     	; 0x2044 <__ftoa_engine+0xe6>
    2054:	eb ea       	ldi	r30, 0xAB	; 171
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	68 94       	set
    205a:	15 90       	lpm	r1, Z+
    205c:	15 91       	lpm	r17, Z+
    205e:	35 91       	lpm	r19, Z+
    2060:	65 91       	lpm	r22, Z+
    2062:	95 91       	lpm	r25, Z+
    2064:	05 90       	lpm	r0, Z+
    2066:	7f e2       	ldi	r23, 0x2F	; 47
    2068:	73 95       	inc	r23
    206a:	e1 18       	sub	r14, r1
    206c:	f1 0a       	sbc	r15, r17
    206e:	43 0b       	sbc	r20, r19
    2070:	56 0b       	sbc	r21, r22
    2072:	c9 0b       	sbc	r28, r25
    2074:	d0 09       	sbc	r29, r0
    2076:	c0 f7       	brcc	.-16     	; 0x2068 <__ftoa_engine+0x10a>
    2078:	e1 0c       	add	r14, r1
    207a:	f1 1e       	adc	r15, r17
    207c:	43 1f       	adc	r20, r19
    207e:	56 1f       	adc	r21, r22
    2080:	c9 1f       	adc	r28, r25
    2082:	d0 1d       	adc	r29, r0
    2084:	7e f4       	brtc	.+30     	; 0x20a4 <__ftoa_engine+0x146>
    2086:	70 33       	cpi	r23, 0x30	; 48
    2088:	11 f4       	brne	.+4      	; 0x208e <__ftoa_engine+0x130>
    208a:	8a 95       	dec	r24
    208c:	e6 cf       	rjmp	.-52     	; 0x205a <__ftoa_engine+0xfc>
    208e:	e8 94       	clt
    2090:	01 50       	subi	r16, 0x01	; 1
    2092:	30 f0       	brcs	.+12     	; 0x20a0 <__ftoa_engine+0x142>
    2094:	08 0f       	add	r16, r24
    2096:	0a f4       	brpl	.+2      	; 0x209a <__ftoa_engine+0x13c>
    2098:	00 27       	eor	r16, r16
    209a:	02 17       	cp	r16, r18
    209c:	08 f4       	brcc	.+2      	; 0x20a0 <__ftoa_engine+0x142>
    209e:	20 2f       	mov	r18, r16
    20a0:	23 95       	inc	r18
    20a2:	02 2f       	mov	r16, r18
    20a4:	7a 33       	cpi	r23, 0x3A	; 58
    20a6:	28 f0       	brcs	.+10     	; 0x20b2 <__ftoa_engine+0x154>
    20a8:	79 e3       	ldi	r23, 0x39	; 57
    20aa:	7d 93       	st	X+, r23
    20ac:	2a 95       	dec	r18
    20ae:	e9 f7       	brne	.-6      	; 0x20aa <__ftoa_engine+0x14c>
    20b0:	10 c0       	rjmp	.+32     	; 0x20d2 <__ftoa_engine+0x174>
    20b2:	7d 93       	st	X+, r23
    20b4:	2a 95       	dec	r18
    20b6:	89 f6       	brne	.-94     	; 0x205a <__ftoa_engine+0xfc>
    20b8:	06 94       	lsr	r0
    20ba:	97 95       	ror	r25
    20bc:	67 95       	ror	r22
    20be:	37 95       	ror	r19
    20c0:	17 95       	ror	r17
    20c2:	17 94       	ror	r1
    20c4:	e1 18       	sub	r14, r1
    20c6:	f1 0a       	sbc	r15, r17
    20c8:	43 0b       	sbc	r20, r19
    20ca:	56 0b       	sbc	r21, r22
    20cc:	c9 0b       	sbc	r28, r25
    20ce:	d0 09       	sbc	r29, r0
    20d0:	98 f0       	brcs	.+38     	; 0x20f8 <__ftoa_engine+0x19a>
    20d2:	23 95       	inc	r18
    20d4:	7e 91       	ld	r23, -X
    20d6:	73 95       	inc	r23
    20d8:	7a 33       	cpi	r23, 0x3A	; 58
    20da:	08 f0       	brcs	.+2      	; 0x20de <__ftoa_engine+0x180>
    20dc:	70 e3       	ldi	r23, 0x30	; 48
    20de:	7c 93       	st	X, r23
    20e0:	20 13       	cpse	r18, r16
    20e2:	b8 f7       	brcc	.-18     	; 0x20d2 <__ftoa_engine+0x174>
    20e4:	7e 91       	ld	r23, -X
    20e6:	70 61       	ori	r23, 0x10	; 16
    20e8:	7d 93       	st	X+, r23
    20ea:	30 f0       	brcs	.+12     	; 0x20f8 <__ftoa_engine+0x19a>
    20ec:	83 95       	inc	r24
    20ee:	71 e3       	ldi	r23, 0x31	; 49
    20f0:	7d 93       	st	X+, r23
    20f2:	70 e3       	ldi	r23, 0x30	; 48
    20f4:	2a 95       	dec	r18
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <__ftoa_engine+0x192>
    20f8:	11 24       	eor	r1, r1
    20fa:	ef 90       	pop	r14
    20fc:	ff 90       	pop	r15
    20fe:	0f 91       	pop	r16
    2100:	1f 91       	pop	r17
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	99 27       	eor	r25, r25
    2108:	87 fd       	sbrc	r24, 7
    210a:	90 95       	com	r25
    210c:	08 95       	ret

0000210e <isspace>:
    210e:	91 11       	cpse	r25, r1
    2110:	3d c1       	rjmp	.+634    	; 0x238c <__ctype_isfalse>
    2112:	80 32       	cpi	r24, 0x20	; 32
    2114:	19 f0       	breq	.+6      	; 0x211c <isspace+0xe>
    2116:	89 50       	subi	r24, 0x09	; 9
    2118:	85 50       	subi	r24, 0x05	; 5
    211a:	d0 f7       	brcc	.-12     	; 0x2110 <isspace+0x2>
    211c:	08 95       	ret

0000211e <strncasecmp_P>:
    211e:	fb 01       	movw	r30, r22
    2120:	dc 01       	movw	r26, r24
    2122:	41 50       	subi	r20, 0x01	; 1
    2124:	50 40       	sbci	r21, 0x00	; 0
    2126:	88 f0       	brcs	.+34     	; 0x214a <strncasecmp_P+0x2c>
    2128:	8d 91       	ld	r24, X+
    212a:	81 34       	cpi	r24, 0x41	; 65
    212c:	1c f0       	brlt	.+6      	; 0x2134 <strncasecmp_P+0x16>
    212e:	8b 35       	cpi	r24, 0x5B	; 91
    2130:	0c f4       	brge	.+2      	; 0x2134 <strncasecmp_P+0x16>
    2132:	80 5e       	subi	r24, 0xE0	; 224
    2134:	65 91       	lpm	r22, Z+
    2136:	61 34       	cpi	r22, 0x41	; 65
    2138:	1c f0       	brlt	.+6      	; 0x2140 <strncasecmp_P+0x22>
    213a:	6b 35       	cpi	r22, 0x5B	; 91
    213c:	0c f4       	brge	.+2      	; 0x2140 <strncasecmp_P+0x22>
    213e:	60 5e       	subi	r22, 0xE0	; 224
    2140:	86 1b       	sub	r24, r22
    2142:	61 11       	cpse	r22, r1
    2144:	71 f3       	breq	.-36     	; 0x2122 <strncasecmp_P+0x4>
    2146:	99 0b       	sbc	r25, r25
    2148:	08 95       	ret
    214a:	88 1b       	sub	r24, r24
    214c:	fc cf       	rjmp	.-8      	; 0x2146 <strncasecmp_P+0x28>

0000214e <strnlen_P>:
    214e:	fc 01       	movw	r30, r24
    2150:	05 90       	lpm	r0, Z+
    2152:	61 50       	subi	r22, 0x01	; 1
    2154:	70 40       	sbci	r23, 0x00	; 0
    2156:	01 10       	cpse	r0, r1
    2158:	d8 f7       	brcc	.-10     	; 0x2150 <strnlen_P+0x2>
    215a:	80 95       	com	r24
    215c:	90 95       	com	r25
    215e:	8e 0f       	add	r24, r30
    2160:	9f 1f       	adc	r25, r31
    2162:	08 95       	ret

00002164 <strchr>:
    2164:	fc 01       	movw	r30, r24
    2166:	81 91       	ld	r24, Z+
    2168:	86 17       	cp	r24, r22
    216a:	21 f0       	breq	.+8      	; 0x2174 <strchr+0x10>
    216c:	88 23       	and	r24, r24
    216e:	d9 f7       	brne	.-10     	; 0x2166 <strchr+0x2>
    2170:	99 27       	eor	r25, r25
    2172:	08 95       	ret
    2174:	31 97       	sbiw	r30, 0x01	; 1
    2176:	cf 01       	movw	r24, r30
    2178:	08 95       	ret

0000217a <strcmp>:
    217a:	fb 01       	movw	r30, r22
    217c:	dc 01       	movw	r26, r24
    217e:	8d 91       	ld	r24, X+
    2180:	01 90       	ld	r0, Z+
    2182:	80 19       	sub	r24, r0
    2184:	01 10       	cpse	r0, r1
    2186:	d9 f3       	breq	.-10     	; 0x217e <strcmp+0x4>
    2188:	99 0b       	sbc	r25, r25
    218a:	08 95       	ret

0000218c <strncmp>:
    218c:	fb 01       	movw	r30, r22
    218e:	dc 01       	movw	r26, r24
    2190:	41 50       	subi	r20, 0x01	; 1
    2192:	50 40       	sbci	r21, 0x00	; 0
    2194:	30 f0       	brcs	.+12     	; 0x21a2 <strncmp+0x16>
    2196:	8d 91       	ld	r24, X+
    2198:	01 90       	ld	r0, Z+
    219a:	80 19       	sub	r24, r0
    219c:	19 f4       	brne	.+6      	; 0x21a4 <strncmp+0x18>
    219e:	00 20       	and	r0, r0
    21a0:	b9 f7       	brne	.-18     	; 0x2190 <strncmp+0x4>
    21a2:	88 1b       	sub	r24, r24
    21a4:	99 0b       	sbc	r25, r25
    21a6:	08 95       	ret

000021a8 <strnlen>:
    21a8:	fc 01       	movw	r30, r24
    21aa:	61 50       	subi	r22, 0x01	; 1
    21ac:	70 40       	sbci	r23, 0x00	; 0
    21ae:	01 90       	ld	r0, Z+
    21b0:	01 10       	cpse	r0, r1
    21b2:	d8 f7       	brcc	.-10     	; 0x21aa <strnlen+0x2>
    21b4:	80 95       	com	r24
    21b6:	90 95       	com	r25
    21b8:	8e 0f       	add	r24, r30
    21ba:	9f 1f       	adc	r25, r31
    21bc:	08 95       	ret

000021be <fputc>:
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	8c 01       	movw	r16, r24
    21c8:	eb 01       	movw	r28, r22
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	81 ff       	sbrs	r24, 1
    21ce:	1b c0       	rjmp	.+54     	; 0x2206 <fputc+0x48>
    21d0:	82 ff       	sbrs	r24, 2
    21d2:	0d c0       	rjmp	.+26     	; 0x21ee <fputc+0x30>
    21d4:	2e 81       	ldd	r18, Y+6	; 0x06
    21d6:	3f 81       	ldd	r19, Y+7	; 0x07
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	9d 81       	ldd	r25, Y+5	; 0x05
    21dc:	28 17       	cp	r18, r24
    21de:	39 07       	cpc	r19, r25
    21e0:	64 f4       	brge	.+24     	; 0x21fa <fputc+0x3c>
    21e2:	e8 81       	ld	r30, Y
    21e4:	f9 81       	ldd	r31, Y+1	; 0x01
    21e6:	01 93       	st	Z+, r16
    21e8:	f9 83       	std	Y+1, r31	; 0x01
    21ea:	e8 83       	st	Y, r30
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <fputc+0x3c>
    21ee:	e8 85       	ldd	r30, Y+8	; 0x08
    21f0:	f9 85       	ldd	r31, Y+9	; 0x09
    21f2:	80 2f       	mov	r24, r16
    21f4:	09 95       	icall
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	31 f4       	brne	.+12     	; 0x2206 <fputc+0x48>
    21fa:	8e 81       	ldd	r24, Y+6	; 0x06
    21fc:	9f 81       	ldd	r25, Y+7	; 0x07
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	9f 83       	std	Y+7, r25	; 0x07
    2202:	8e 83       	std	Y+6, r24	; 0x06
    2204:	02 c0       	rjmp	.+4      	; 0x220a <fputc+0x4c>
    2206:	0f ef       	ldi	r16, 0xFF	; 255
    2208:	1f ef       	ldi	r17, 0xFF	; 255
    220a:	c8 01       	movw	r24, r16
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	08 95       	ret

00002216 <printf>:
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e1 e1       	ldi	r30, 0x11	; 17
    221c:	f1 e1       	ldi	r31, 0x11	; 17
    221e:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__prologue_saves__+0x20>
    2222:	fe 01       	movw	r30, r28
    2224:	35 96       	adiw	r30, 0x05	; 5
    2226:	61 91       	ld	r22, Z+
    2228:	71 91       	ld	r23, Z+
    222a:	80 91 26 07 	lds	r24, 0x0726
    222e:	90 91 27 07 	lds	r25, 0x0727
    2232:	af 01       	movw	r20, r30
    2234:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vfprintf>
    2238:	20 96       	adiw	r28, 0x00	; 0
    223a:	e2 e0       	ldi	r30, 0x02	; 2
    223c:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__epilogue_restores__+0x20>

00002240 <puts>:
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	8c 01       	movw	r16, r24
    224a:	e0 91 26 07 	lds	r30, 0x0726
    224e:	f0 91 27 07 	lds	r31, 0x0727
    2252:	83 81       	ldd	r24, Z+3	; 0x03
    2254:	81 ff       	sbrs	r24, 1
    2256:	1a c0       	rjmp	.+52     	; 0x228c <puts+0x4c>
    2258:	c0 e0       	ldi	r28, 0x00	; 0
    225a:	d0 e0       	ldi	r29, 0x00	; 0
    225c:	05 c0       	rjmp	.+10     	; 0x2268 <puts+0x28>
    225e:	09 95       	icall
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	11 f0       	breq	.+4      	; 0x2268 <puts+0x28>
    2264:	cf ef       	ldi	r28, 0xFF	; 255
    2266:	df ef       	ldi	r29, 0xFF	; 255
    2268:	f8 01       	movw	r30, r16
    226a:	81 91       	ld	r24, Z+
    226c:	8f 01       	movw	r16, r30
    226e:	60 91 26 07 	lds	r22, 0x0726
    2272:	70 91 27 07 	lds	r23, 0x0727
    2276:	db 01       	movw	r26, r22
    2278:	18 96       	adiw	r26, 0x08	; 8
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	19 97       	sbiw	r26, 0x09	; 9
    2280:	88 23       	and	r24, r24
    2282:	69 f7       	brne	.-38     	; 0x225e <puts+0x1e>
    2284:	8a e0       	ldi	r24, 0x0A	; 10
    2286:	09 95       	icall
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	11 f0       	breq	.+4      	; 0x2290 <puts+0x50>
    228c:	cf ef       	ldi	r28, 0xFF	; 255
    228e:	df ef       	ldi	r29, 0xFF	; 255
    2290:	ce 01       	movw	r24, r28
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	08 95       	ret

0000229c <__ultoa_invert>:
    229c:	fa 01       	movw	r30, r20
    229e:	aa 27       	eor	r26, r26
    22a0:	28 30       	cpi	r18, 0x08	; 8
    22a2:	51 f1       	breq	.+84     	; 0x22f8 <__ultoa_invert+0x5c>
    22a4:	20 31       	cpi	r18, 0x10	; 16
    22a6:	81 f1       	breq	.+96     	; 0x2308 <__ultoa_invert+0x6c>
    22a8:	e8 94       	clt
    22aa:	6f 93       	push	r22
    22ac:	6e 7f       	andi	r22, 0xFE	; 254
    22ae:	6e 5f       	subi	r22, 0xFE	; 254
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	8f 4f       	sbci	r24, 0xFF	; 255
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	af 4f       	sbci	r26, 0xFF	; 255
    22b8:	b1 e0       	ldi	r27, 0x01	; 1
    22ba:	3e d0       	rcall	.+124    	; 0x2338 <__ultoa_invert+0x9c>
    22bc:	b4 e0       	ldi	r27, 0x04	; 4
    22be:	3c d0       	rcall	.+120    	; 0x2338 <__ultoa_invert+0x9c>
    22c0:	67 0f       	add	r22, r23
    22c2:	78 1f       	adc	r23, r24
    22c4:	89 1f       	adc	r24, r25
    22c6:	9a 1f       	adc	r25, r26
    22c8:	a1 1d       	adc	r26, r1
    22ca:	68 0f       	add	r22, r24
    22cc:	79 1f       	adc	r23, r25
    22ce:	8a 1f       	adc	r24, r26
    22d0:	91 1d       	adc	r25, r1
    22d2:	a1 1d       	adc	r26, r1
    22d4:	6a 0f       	add	r22, r26
    22d6:	71 1d       	adc	r23, r1
    22d8:	81 1d       	adc	r24, r1
    22da:	91 1d       	adc	r25, r1
    22dc:	a1 1d       	adc	r26, r1
    22de:	20 d0       	rcall	.+64     	; 0x2320 <__ultoa_invert+0x84>
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <__ultoa_invert+0x48>
    22e2:	68 94       	set
    22e4:	3f 91       	pop	r19
    22e6:	2a e0       	ldi	r18, 0x0A	; 10
    22e8:	26 9f       	mul	r18, r22
    22ea:	11 24       	eor	r1, r1
    22ec:	30 19       	sub	r19, r0
    22ee:	30 5d       	subi	r19, 0xD0	; 208
    22f0:	31 93       	st	Z+, r19
    22f2:	de f6       	brtc	.-74     	; 0x22aa <__ultoa_invert+0xe>
    22f4:	cf 01       	movw	r24, r30
    22f6:	08 95       	ret
    22f8:	46 2f       	mov	r20, r22
    22fa:	47 70       	andi	r20, 0x07	; 7
    22fc:	40 5d       	subi	r20, 0xD0	; 208
    22fe:	41 93       	st	Z+, r20
    2300:	b3 e0       	ldi	r27, 0x03	; 3
    2302:	0f d0       	rcall	.+30     	; 0x2322 <__ultoa_invert+0x86>
    2304:	c9 f7       	brne	.-14     	; 0x22f8 <__ultoa_invert+0x5c>
    2306:	f6 cf       	rjmp	.-20     	; 0x22f4 <__ultoa_invert+0x58>
    2308:	46 2f       	mov	r20, r22
    230a:	4f 70       	andi	r20, 0x0F	; 15
    230c:	40 5d       	subi	r20, 0xD0	; 208
    230e:	4a 33       	cpi	r20, 0x3A	; 58
    2310:	18 f0       	brcs	.+6      	; 0x2318 <__ultoa_invert+0x7c>
    2312:	49 5d       	subi	r20, 0xD9	; 217
    2314:	31 fd       	sbrc	r19, 1
    2316:	40 52       	subi	r20, 0x20	; 32
    2318:	41 93       	st	Z+, r20
    231a:	02 d0       	rcall	.+4      	; 0x2320 <__ultoa_invert+0x84>
    231c:	a9 f7       	brne	.-22     	; 0x2308 <__ultoa_invert+0x6c>
    231e:	ea cf       	rjmp	.-44     	; 0x22f4 <__ultoa_invert+0x58>
    2320:	b4 e0       	ldi	r27, 0x04	; 4
    2322:	a6 95       	lsr	r26
    2324:	97 95       	ror	r25
    2326:	87 95       	ror	r24
    2328:	77 95       	ror	r23
    232a:	67 95       	ror	r22
    232c:	ba 95       	dec	r27
    232e:	c9 f7       	brne	.-14     	; 0x2322 <__ultoa_invert+0x86>
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	61 05       	cpc	r22, r1
    2334:	71 05       	cpc	r23, r1
    2336:	08 95       	ret
    2338:	9b 01       	movw	r18, r22
    233a:	ac 01       	movw	r20, r24
    233c:	0a 2e       	mov	r0, r26
    233e:	06 94       	lsr	r0
    2340:	57 95       	ror	r21
    2342:	47 95       	ror	r20
    2344:	37 95       	ror	r19
    2346:	27 95       	ror	r18
    2348:	ba 95       	dec	r27
    234a:	c9 f7       	brne	.-14     	; 0x233e <__ultoa_invert+0xa2>
    234c:	62 0f       	add	r22, r18
    234e:	73 1f       	adc	r23, r19
    2350:	84 1f       	adc	r24, r20
    2352:	95 1f       	adc	r25, r21
    2354:	a0 1d       	adc	r26, r0
    2356:	08 95       	ret

00002358 <__eerd_byte_m328p>:
    2358:	f9 99       	sbic	0x1f, 1	; 31
    235a:	fe cf       	rjmp	.-4      	; 0x2358 <__eerd_byte_m328p>
    235c:	92 bd       	out	0x22, r25	; 34
    235e:	81 bd       	out	0x21, r24	; 33
    2360:	f8 9a       	sbi	0x1f, 0	; 31
    2362:	99 27       	eor	r25, r25
    2364:	80 b5       	in	r24, 0x20	; 32
    2366:	08 95       	ret

00002368 <__eeupd_byte_m328p>:
    2368:	26 2f       	mov	r18, r22

0000236a <__eeupd_r18_m328p>:
    236a:	f9 99       	sbic	0x1f, 1	; 31
    236c:	fe cf       	rjmp	.-4      	; 0x236a <__eeupd_r18_m328p>
    236e:	92 bd       	out	0x22, r25	; 34
    2370:	81 bd       	out	0x21, r24	; 33
    2372:	f8 9a       	sbi	0x1f, 0	; 31
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	00 b4       	in	r0, 0x20	; 32
    2378:	02 16       	cp	r0, r18
    237a:	39 f0       	breq	.+14     	; 0x238a <__eeupd_r18_m328p+0x20>
    237c:	1f ba       	out	0x1f, r1	; 31
    237e:	20 bd       	out	0x20, r18	; 32
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	fa 9a       	sbi	0x1f, 2	; 31
    2386:	f9 9a       	sbi	0x1f, 1	; 31
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	08 95       	ret

0000238c <__ctype_isfalse>:
    238c:	99 27       	eor	r25, r25
    238e:	88 27       	eor	r24, r24

00002390 <__ctype_istrue>:
    2390:	08 95       	ret

00002392 <_exit>:
    2392:	f8 94       	cli

00002394 <__stop_program>:
    2394:	ff cf       	rjmp	.-2      	; 0x2394 <__stop_program>
