
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005c4  00800100  0000239c  00002430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000239c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  008006c4  008006c4  000029f4  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00006750  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025f3  00000000  00000000  00006990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  00008f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f8  00000000  00000000  00009d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  0000b354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000873  00000000  00000000  0000baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d94  00000000  00000000  0000c31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e0af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	ec e9       	ldi	r30, 0x9C	; 156
     1ba:	f3 e2       	ldi	r31, 0x23	; 35
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a4 3c       	cpi	r26, 0xC4	; 196
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	17 e0       	ldi	r17, 0x07	; 7
     1ca:	a4 ec       	ldi	r26, 0xC4	; 196
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	a8 3f       	cpi	r26, 0xF8	; 248
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 c4 06 	lds	r24, 0x06C4
     262:	90 91 c5 06 	lds	r25, 0x06C5
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 cc 06 	lds	r22, 0x06CC
     28a:	70 91 cd 06 	lds	r23, 0x06CD
     28e:	80 91 ce 06 	lds	r24, 0x06CE
     292:	90 91 cf 06 	lds	r25, 0x06CF
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 00 01 	sts	0x0100, r20
     2c2:	50 93 01 01 	sts	0x0101, r21
     2c6:	60 93 02 01 	sts	0x0102, r22
     2ca:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 42 09 	call	0x1284	; 0x1284 <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 d4 06 	sts	0x06D4, r20
     30c:	50 93 d5 06 	sts	0x06D5, r21
     310:	60 93 d6 06 	sts	0x06D6, r22
     314:	70 93 d7 06 	sts	0x06D7, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 f8 06 	sts	0x06F8, r20
     350:	50 93 f9 06 	sts	0x06F9, r21
     354:	60 93 fa 06 	sts	0x06FA, r22
     358:	70 93 fb 06 	sts	0x06FB, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 11 08 	call	0x1022	; 0x1022 <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 8a 07 	call	0xf14	; 0xf14 <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
	//sei();
	
	extraTime1++;
     3b2:	80 91 c6 06 	lds	r24, 0x06C6
     3b6:	90 91 c7 06 	lds	r25, 0x06C7
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 c7 06 	sts	0x06C7, r25
     3c0:	80 93 c6 06 	sts	0x06C6, r24
	if(extraTime1>100){
     3c4:	80 91 c6 06 	lds	r24, 0x06C6
     3c8:	90 91 c7 06 	lds	r25, 0x06C7
     3cc:	85 36       	cpi	r24, 0x65	; 101
     3ce:	91 05       	cpc	r25, r1
     3d0:	6c f0       	brlt	.+26     	; 0x3ec <__vector_14+0x48>
		timerVariable++;
     3d2:	80 91 c4 06 	lds	r24, 0x06C4
     3d6:	90 91 c5 06 	lds	r25, 0x06C5
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 c5 06 	sts	0x06C5, r25
     3e0:	80 93 c4 06 	sts	0x06C4, r24
		extraTime1 = 0;
     3e4:	10 92 c7 06 	sts	0x06C7, r1
     3e8:	10 92 c6 06 	sts	0x06C6, r1
	}
	extraTime++;
     3ec:	80 91 c8 06 	lds	r24, 0x06C8
     3f0:	90 91 c9 06 	lds	r25, 0x06C9
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	90 93 c9 06 	sts	0x06C9, r25
     3fa:	80 93 c8 06 	sts	0x06C8, r24
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
	}*/
}
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	if(i == 1)
     432:	80 91 ca 06 	lds	r24, 0x06CA
     436:	90 91 cb 06 	lds	r25, 0x06CB
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	91 05       	cpc	r25, r1
     43e:	d1 f4       	brne	.+52     	; 0x474 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     440:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     444:	c4 e8       	ldi	r28, 0x84	; 132
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	68 81       	ld	r22, Y
     44a:	79 81       	ldd	r23, Y+1	; 0x01
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 40 09 	call	0x1280	; 0x1280 <__floatunsisf>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	80 93 cc 06 	sts	0x06CC, r24
     45c:	90 93 cd 06 	sts	0x06CD, r25
     460:	a0 93 ce 06 	sts	0x06CE, r26
     464:	b0 93 cf 06 	sts	0x06CF, r27
		TCNT1 = 0; //Reset duration
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     46c:	10 92 cb 06 	sts	0x06CB, r1
     470:	10 92 ca 06 	sts	0x06CA, r1
	}

	if(i==0)
     474:	80 91 ca 06 	lds	r24, 0x06CA
     478:	90 91 cb 06 	lds	r25, 0x06CB
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	59 f4       	brne	.+22     	; 0x496 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     480:	e1 e8       	ldi	r30, 0x81	; 129
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 83       	st	Z, r24
		i = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 cb 06 	sts	0x06CB, r25
     492:	80 93 ca 06 	sts	0x06CA, r24
	}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4c4:	c0 91 d0 06 	lds	r28, 0x06D0
     4c8:	d0 91 d1 06 	lds	r29, 0x06D1
     4cc:	20 91 1c 01 	lds	r18, 0x011C
     4d0:	30 91 1d 01 	lds	r19, 0x011D
     4d4:	2c 17       	cp	r18, r28
     4d6:	3d 07       	cpc	r19, r29
     4d8:	8c f0       	brlt	.+34     	; 0x4fc <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4da:	8c 01       	movw	r16, r24
     4dc:	0c 0f       	add	r16, r28
     4de:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     4e0:	f8 01       	movw	r30, r16
     4e2:	61 91       	ld	r22, Z+
     4e4:	8f 01       	movw	r16, r30
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	80 91 1c 01 	lds	r24, 0x011C
     4f2:	90 91 1d 01 	lds	r25, 0x011D
     4f6:	8c 17       	cp	r24, r28
     4f8:	9d 07       	cpc	r25, r29
     4fa:	94 f7       	brge	.-28     	; 0x4e0 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     50e:	c0 91 d0 06 	lds	r28, 0x06D0
     512:	d0 91 d1 06 	lds	r29, 0x06D1
     516:	80 91 1c 01 	lds	r24, 0x011C
     51a:	90 91 1d 01 	lds	r25, 0x011D
     51e:	8c 17       	cp	r24, r28
     520:	9d 07       	cpc	r25, r29
     522:	8c f0       	brlt	.+34     	; 0x546 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     524:	8e 01       	movw	r16, r28
     526:	06 5c       	subi	r16, 0xC6	; 198
     528:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     530:	f8 01       	movw	r30, r16
     532:	81 93       	st	Z+, r24
     534:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	80 91 1c 01 	lds	r24, 0x011C
     53c:	90 91 1d 01 	lds	r25, 0x011D
     540:	8c 17       	cp	r24, r28
     542:	9d 07       	cpc	r25, r29
     544:	94 f7       	brge	.-28     	; 0x52a <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     546:	8a e3       	ldi	r24, 0x3A	; 58
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     55e:	c0 91 0e 01 	lds	r28, 0x010E
     562:	d0 91 0f 01 	lds	r29, 0x010F
     566:	80 91 1a 01 	lds	r24, 0x011A
     56a:	90 91 1b 01 	lds	r25, 0x011B
     56e:	99 23       	and	r25, r25
     570:	cc f0       	brlt	.+50     	; 0x5a4 <set_Locatie+0x50>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     576:	f8 01       	movw	r30, r16
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	ce 01       	movw	r24, r28
     57e:	60 81       	ld	r22, Z
     580:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	80 91 0e 01 	lds	r24, 0x010E
     58a:	90 91 0f 01 	lds	r25, 0x010F
     58e:	9e 01       	movw	r18, r28
     590:	28 1b       	sub	r18, r24
     592:	39 0b       	sbc	r19, r25
     594:	c9 01       	movw	r24, r18
     596:	20 91 1a 01 	lds	r18, 0x011A
     59a:	30 91 1b 01 	lds	r19, 0x011B
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	4c f7       	brge	.-46     	; 0x576 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5be:	e0 90 0e 01 	lds	r14, 0x010E
     5c2:	f0 90 0f 01 	lds	r15, 0x010F
     5c6:	80 91 1a 01 	lds	r24, 0x011A
     5ca:	90 91 1b 01 	lds	r25, 0x011B
     5ce:	99 23       	and	r25, r25
     5d0:	ec f0       	brlt	.+58     	; 0x60c <get_Locatie+0x5e>
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     5da:	0f 2e       	mov	r0, r31
     5dc:	fb e0       	ldi	r31, 0x0B	; 11
     5de:	cf 2e       	mov	r12, r31
     5e0:	f7 e0       	ldi	r31, 0x07	; 7
     5e2:	df 2e       	mov	r13, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	c7 01       	movw	r24, r14
     5e8:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     5ec:	cc 0d       	add	r28, r12
     5ee:	dd 1d       	adc	r29, r13
     5f0:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5f2:	08 94       	sec
     5f4:	e1 1c       	adc	r14, r1
     5f6:	f1 1c       	adc	r15, r1
     5f8:	e8 01       	movw	r28, r16
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	80 91 1a 01 	lds	r24, 0x011A
     602:	90 91 1b 01 	lds	r25, 0x011B
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	6c f7       	brge	.-38     	; 0x5e6 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     60c:	8b e0       	ldi	r24, 0x0B	; 11
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     62c:	c0 91 0c 01 	lds	r28, 0x010C
     630:	d0 91 0d 01 	lds	r29, 0x010D
     634:	80 91 18 01 	lds	r24, 0x0118
     638:	90 91 19 01 	lds	r25, 0x0119
     63c:	99 23       	and	r25, r25
     63e:	cc f0       	brlt	.+50     	; 0x672 <set_Versie+0x50>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     644:	f8 01       	movw	r30, r16
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	ce 01       	movw	r24, r28
     64c:	60 81       	ld	r22, Z
     64e:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	80 91 0c 01 	lds	r24, 0x010C
     658:	90 91 0d 01 	lds	r25, 0x010D
     65c:	9e 01       	movw	r18, r28
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	c9 01       	movw	r24, r18
     664:	20 91 18 01 	lds	r18, 0x0118
     668:	30 91 19 01 	lds	r19, 0x0119
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	4c f7       	brge	.-46     	; 0x644 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     68c:	e0 90 0c 01 	lds	r14, 0x010C
     690:	f0 90 0d 01 	lds	r15, 0x010D
     694:	80 91 18 01 	lds	r24, 0x0118
     698:	90 91 19 01 	lds	r25, 0x0119
     69c:	99 23       	and	r25, r25
     69e:	ec f0       	brlt	.+58     	; 0x6da <get_Versie+0x5e>
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f6 e6       	ldi	r31, 0x66	; 102
     6ac:	cf 2e       	mov	r12, r31
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	c7 01       	movw	r24, r14
     6b6:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     6ba:	cc 0d       	add	r28, r12
     6bc:	dd 1d       	adc	r29, r13
     6be:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     6c0:	08 94       	sec
     6c2:	e1 1c       	adc	r14, r1
     6c4:	f1 1c       	adc	r15, r1
     6c6:	e8 01       	movw	r28, r16
     6c8:	0f 5f       	subi	r16, 0xFF	; 255
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	80 91 18 01 	lds	r24, 0x0118
     6d0:	90 91 19 01 	lds	r25, 0x0119
     6d4:	8c 17       	cp	r24, r28
     6d6:	9d 07       	cpc	r25, r29
     6d8:	6c f7       	brge	.-38     	; 0x6b4 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     6da:	86 e6       	ldi	r24, 0x66	; 102
     6dc:	97 e0       	ldi	r25, 0x07	; 7
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	08 95       	ret

000006f0 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     6fa:	c0 91 0a 01 	lds	r28, 0x010A
     6fe:	d0 91 0b 01 	lds	r29, 0x010B
     702:	80 91 16 01 	lds	r24, 0x0116
     706:	90 91 17 01 	lds	r25, 0x0117
     70a:	99 23       	and	r25, r25
     70c:	cc f0       	brlt	.+50     	; 0x740 <set_grensTemp+0x50>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     712:	f8 01       	movw	r30, r16
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	ce 01       	movw	r24, r28
     71a:	60 81       	ld	r22, Z
     71c:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     720:	21 96       	adiw	r28, 0x01	; 1
     722:	80 91 0a 01 	lds	r24, 0x010A
     726:	90 91 0b 01 	lds	r25, 0x010B
     72a:	9e 01       	movw	r18, r28
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	c9 01       	movw	r24, r18
     732:	20 91 16 01 	lds	r18, 0x0116
     736:	30 91 17 01 	lds	r19, 0x0117
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4c f7       	brge	.-46     	; 0x712 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     75a:	e0 90 0a 01 	lds	r14, 0x010A
     75e:	f0 90 0b 01 	lds	r15, 0x010B
     762:	80 91 16 01 	lds	r24, 0x0116
     766:	90 91 17 01 	lds	r25, 0x0117
     76a:	99 23       	and	r25, r25
     76c:	ec f0       	brlt	.+58     	; 0x7a8 <get_grensTemp+0x5e>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     776:	0f 2e       	mov	r0, r31
     778:	f7 e3       	ldi	r31, 0x37	; 55
     77a:	cf 2e       	mov	r12, r31
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	c7 01       	movw	r24, r14
     784:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     788:	cc 0d       	add	r28, r12
     78a:	dd 1d       	adc	r29, r13
     78c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     78e:	08 94       	sec
     790:	e1 1c       	adc	r14, r1
     792:	f1 1c       	adc	r15, r1
     794:	e8 01       	movw	r28, r16
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	80 91 16 01 	lds	r24, 0x0116
     79e:	90 91 17 01 	lds	r25, 0x0117
     7a2:	8c 17       	cp	r24, r28
     7a4:	9d 07       	cpc	r25, r29
     7a6:	6c f7       	brge	.-38     	; 0x782 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     7a8:	87 e3       	ldi	r24, 0x37	; 55
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7c8:	c0 91 08 01 	lds	r28, 0x0108
     7cc:	d0 91 09 01 	lds	r29, 0x0109
     7d0:	80 91 14 01 	lds	r24, 0x0114
     7d4:	90 91 15 01 	lds	r25, 0x0115
     7d8:	99 23       	and	r25, r25
     7da:	cc f0       	brlt	.+50     	; 0x80e <set_grensLicht+0x50>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	e8 0f       	add	r30, r24
     7e4:	f9 1f       	adc	r31, r25
     7e6:	ce 01       	movw	r24, r28
     7e8:	60 81       	ld	r22, Z
     7ea:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	80 91 08 01 	lds	r24, 0x0108
     7f4:	90 91 09 01 	lds	r25, 0x0109
     7f8:	9e 01       	movw	r18, r28
     7fa:	28 1b       	sub	r18, r24
     7fc:	39 0b       	sbc	r19, r25
     7fe:	c9 01       	movw	r24, r18
     800:	20 91 14 01 	lds	r18, 0x0114
     804:	30 91 15 01 	lds	r19, 0x0115
     808:	28 17       	cp	r18, r24
     80a:	39 07       	cpc	r19, r25
     80c:	4c f7       	brge	.-46     	; 0x7e0 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     824:	e0 90 08 01 	lds	r14, 0x0108
     828:	f0 90 09 01 	lds	r15, 0x0109
     82c:	80 91 14 01 	lds	r24, 0x0114
     830:	90 91 15 01 	lds	r25, 0x0115
     834:	99 23       	and	r25, r25
     836:	bc f0       	brlt	.+46     	; 0x866 <get_grensLight+0x4e>
     838:	01 e0       	ldi	r16, 0x01	; 1
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     840:	c7 01       	movw	r24, r14
     842:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     846:	c2 59       	subi	r28, 0x92	; 146
     848:	d8 4f       	sbci	r29, 0xF8	; 248
     84a:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84c:	08 94       	sec
     84e:	e1 1c       	adc	r14, r1
     850:	f1 1c       	adc	r15, r1
     852:	e8 01       	movw	r28, r16
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	80 91 14 01 	lds	r24, 0x0114
     85c:	90 91 15 01 	lds	r25, 0x0115
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	6c f7       	brge	.-38     	; 0x840 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     866:	8e e6       	ldi	r24, 0x6E	; 110
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     882:	c0 91 06 01 	lds	r28, 0x0106
     886:	d0 91 07 01 	lds	r29, 0x0107
     88a:	80 91 12 01 	lds	r24, 0x0112
     88e:	90 91 13 01 	lds	r25, 0x0113
     892:	99 23       	and	r25, r25
     894:	cc f0       	brlt	.+50     	; 0x8c8 <set_minUnroll+0x50>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     89a:	f8 01       	movw	r30, r16
     89c:	e8 0f       	add	r30, r24
     89e:	f9 1f       	adc	r31, r25
     8a0:	ce 01       	movw	r24, r28
     8a2:	60 81       	ld	r22, Z
     8a4:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8a8:	21 96       	adiw	r28, 0x01	; 1
     8aa:	80 91 06 01 	lds	r24, 0x0106
     8ae:	90 91 07 01 	lds	r25, 0x0107
     8b2:	9e 01       	movw	r18, r28
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	c9 01       	movw	r24, r18
     8ba:	20 91 12 01 	lds	r18, 0x0112
     8be:	30 91 13 01 	lds	r19, 0x0113
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	4c f7       	brge	.-46     	; 0x89a <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8de:	e0 90 06 01 	lds	r14, 0x0106
     8e2:	f0 90 07 01 	lds	r15, 0x0107
     8e6:	80 91 12 01 	lds	r24, 0x0112
     8ea:	90 91 13 01 	lds	r25, 0x0113
     8ee:	99 23       	and	r25, r25
     8f0:	bc f0       	brlt	.+46     	; 0x920 <__stack+0x21>
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     8fa:	c7 01       	movw	r24, r14
     8fc:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     900:	c4 50       	subi	r28, 0x04	; 4
     902:	d9 4f       	sbci	r29, 0xF9	; 249
     904:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     906:	08 94       	sec
     908:	e1 1c       	adc	r14, r1
     90a:	f1 1c       	adc	r15, r1
     90c:	e8 01       	movw	r28, r16
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	80 91 12 01 	lds	r24, 0x0112
     916:	90 91 13 01 	lds	r25, 0x0113
     91a:	8c 17       	cp	r24, r28
     91c:	9d 07       	cpc	r25, r29
     91e:	6c f7       	brge	.-38     	; 0x8fa <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     920:	8c ef       	ldi	r24, 0xFC	; 252
     922:	96 e0       	ldi	r25, 0x06	; 6
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     93c:	c0 91 04 01 	lds	r28, 0x0104
     940:	d0 91 05 01 	lds	r29, 0x0105
     944:	80 91 10 01 	lds	r24, 0x0110
     948:	90 91 11 01 	lds	r25, 0x0111
     94c:	99 23       	and	r25, r25
     94e:	cc f0       	brlt	.+50     	; 0x982 <set_maxUnroll+0x50>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     954:	f8 01       	movw	r30, r16
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ce 01       	movw	r24, r28
     95c:	60 81       	ld	r22, Z
     95e:	0e 94 b7 11 	call	0x236e	; 0x236e <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     962:	21 96       	adiw	r28, 0x01	; 1
     964:	80 91 04 01 	lds	r24, 0x0104
     968:	90 91 05 01 	lds	r25, 0x0105
     96c:	9e 01       	movw	r18, r28
     96e:	28 1b       	sub	r18, r24
     970:	39 0b       	sbc	r19, r25
     972:	c9 01       	movw	r24, r18
     974:	20 91 10 01 	lds	r18, 0x0110
     978:	30 91 11 01 	lds	r19, 0x0111
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	4c f7       	brge	.-46     	; 0x954 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     998:	e0 90 04 01 	lds	r14, 0x0104
     99c:	f0 90 05 01 	lds	r15, 0x0105
     9a0:	80 91 10 01 	lds	r24, 0x0110
     9a4:	90 91 11 01 	lds	r25, 0x0111
     9a8:	99 23       	and	r25, r25
     9aa:	bc f0       	brlt	.+46     	; 0x9da <get_maxUnroll+0x4e>
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     9b4:	c7 01       	movw	r24, r14
     9b6:	0e 94 af 11 	call	0x235e	; 0x235e <__eerd_byte_m328p>
     9ba:	c4 56       	subi	r28, 0x64	; 100
     9bc:	d8 4f       	sbci	r29, 0xF8	; 248
     9be:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9c0:	08 94       	sec
     9c2:	e1 1c       	adc	r14, r1
     9c4:	f1 1c       	adc	r15, r1
     9c6:	e8 01       	movw	r28, r16
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	80 91 10 01 	lds	r24, 0x0110
     9d0:	90 91 11 01 	lds	r25, 0x0111
     9d4:	8c 17       	cp	r24, r28
     9d6:	9d 07       	cpc	r25, r29
     9d8:	6c f7       	brge	.-38     	; 0x9b4 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     9da:	8c e9       	ldi	r24, 0x9C	; 156
     9dc:	97 e0       	ldi	r25, 0x07	; 7
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     9ec:	80 ed       	ldi	r24, 0xD0	; 208
     9ee:	97 e0       	ldi	r25, 0x07	; 7
     9f0:	68 e2       	ldi	r22, 0x28	; 40
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 b5 10 	call	0x216a	; 0x216a <strchr>
	p1[strlen(p1) -1] = '\0';
     9f8:	e8 2f       	mov	r30, r24
     9fa:	f9 2f       	mov	r31, r25
     9fc:	df 01       	movw	r26, r30
     9fe:	0d 90       	ld	r0, X+
     a00:	00 20       	and	r0, r0
     a02:	e9 f7       	brne	.-6      	; 0x9fe <set_substring+0x12>
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	ae 1b       	sub	r26, r30
     a08:	bf 0b       	sbc	r27, r31
     a0a:	a8 0f       	add	r26, r24
     a0c:	b9 1f       	adc	r27, r25
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	1c 92       	st	X, r1
	substring = p1 +1;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 cd 07 	sts	0x07CD, r25
     a18:	80 93 cc 07 	sts	0x07CC, r24
     a1c:	08 95       	ret

00000a1e <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     a1e:	2f 92       	push	r2
     a20:	3f 92       	push	r3
     a22:	4f 92       	push	r4
     a24:	5f 92       	push	r5
     a26:	6f 92       	push	r6
     a28:	7f 92       	push	r7
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	ser_write("201 Please enter ID");
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     a4a:	c0 ed       	ldi	r28, 0xD0	; 208
     a4c:	d7 e0       	ldi	r29, 0x07	; 7
     a4e:	ce 01       	movw	r24, r28
     a50:	6e e1       	ldi	r22, 0x1E	; 30
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     a5a:	81 e4       	ldi	r24, 0x41	; 65
     a5c:	96 e0       	ldi	r25, 0x06	; 6
     a5e:	be 01       	movw	r22, r28
     a60:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     a64:	28 2f       	mov	r18, r24
     a66:	39 2f       	mov	r19, r25
	if(ret |= 0){
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	b9 f0       	breq	.+46     	; 0xa9c <protocolCom+0x7e>
		ser_writeln("504: Verkeerde ID");
     a6e:	82 e3       	ldi	r24, 0x32	; 50
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
			}		
			}
			}
			}					
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret
		ser_writeln("504: Verkeerde ID");
	}
	else{
		// groeneotter is het antwoord op de handshake
		
			ser_writeln("200");
     a9c:	84 e4       	ldi	r24, 0x44	; 68
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     aa4:	08 e4       	ldi	r16, 0x48	; 72
     aa6:	11 e0       	ldi	r17, 0x01	; 1
				ser_readln(in_buf, sizeof(in_buf), 1);
     aa8:	c0 ed       	ldi	r28, 0xD0	; 208
     aaa:	d7 e0       	ldi	r29, 0x07	; 7
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     aac:	0f 2e       	mov	r0, r31
     aae:	f1 e6       	ldi	r31, 0x61	; 97
     ab0:	ef 2e       	mov	r14, r31
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	ff 2e       	mov	r15, r31
     ab6:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ab8:	0f 2e       	mov	r0, r31
     aba:	f9 e8       	ldi	r31, 0x89	; 137
     abc:	af 2e       	mov	r10, r31
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	bf 2e       	mov	r11, r31
     ac2:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f0 eb       	ldi	r31, 0xB0	; 176
     ac8:	cf 2e       	mov	r12, r31
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	df 2e       	mov	r13, r31
     ace:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     ad0:	0f 2e       	mov	r0, r31
     ad2:	f6 ec       	ldi	r31, 0xC6	; 198
     ad4:	8f 2e       	mov	r8, r31
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	9f 2e       	mov	r9, r31
     ada:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     adc:	0f 2e       	mov	r0, r31
     ade:	f2 ee       	ldi	r31, 0xE2	; 226
     ae0:	6f 2e       	mov	r6, r31
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	7f 2e       	mov	r7, r31
     ae6:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     ae8:	0f 2e       	mov	r0, r31
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	4f 2e       	mov	r4, r31
     aee:	f2 e0       	ldi	r31, 0x02	; 2
     af0:	5f 2e       	mov	r5, r31
     af2:	f0 2d       	mov	r31, r0
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     af4:	0f 2e       	mov	r0, r31
     af6:	fd e2       	ldi	r31, 0x2D	; 45
     af8:	2f 2e       	mov	r2, r31
     afa:	f2 e0       	ldi	r31, 0x02	; 2
     afc:	3f 2e       	mov	r3, r31
     afe:	f0 2d       	mov	r31, r0
	else{
		// groeneotter is het antwoord op de handshake
		
			ser_writeln("200");
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
				ser_readln(in_buf, sizeof(in_buf), 1);
     b06:	ce 01       	movw	r24, r28
     b08:	6e e1       	ldi	r22, 0x1E	; 30
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b12:	c7 01       	movw	r24, r14
     b14:	be 01       	movw	r22, r28
     b16:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     b1a:	28 2f       	mov	r18, r24
     b1c:	39 2f       	mov	r19, r25
     b1e:	21 15       	cp	r18, r1
     b20:	31 05       	cpc	r19, r1
     b22:	a1 f4       	brne	.+40     	; 0xb4c <protocolCom+0x12e>
				if ((get_unrollStatus() % 2) == 1){
     b24:	0e 94 0c 08 	call	0x1018	; 0x1018 <get_unrollStatus>
     b28:	62 e0       	ldi	r22, 0x02	; 2
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__divmodhi4>
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	91 05       	cpc	r25, r1
     b34:	21 f4       	brne	.+8      	; 0xb3e <protocolCom+0x120>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     b36:	88 e6       	ldi	r24, 0x68	; 104
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     b3e:	0e 94 0c 08 	call	0x1018	; 0x1018 <get_unrollStatus>
     b42:	80 fd       	sbrc	r24, 0
     b44:	1f c0       	rjmp	.+62     	; 0xb84 <protocolCom+0x166>
					uitrollen();
     b46:	0e 94 1d 08 	call	0x103a	; 0x103a <uitrollen>
     b4a:	1c c0       	rjmp	.+56     	; 0xb84 <protocolCom+0x166>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b4c:	c5 01       	movw	r24, r10
     b4e:	be 01       	movw	r22, r28
     b50:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     b54:	28 2f       	mov	r18, r24
     b56:	39 2f       	mov	r19, r25
     b58:	21 15       	cp	r18, r1
     b5a:	31 05       	cpc	r19, r1
     b5c:	99 f4       	brne	.+38     	; 0xb84 <protocolCom+0x166>
				if ((get_unrollStatus() % 2) == 0){
     b5e:	0e 94 0c 08 	call	0x1018	; 0x1018 <get_unrollStatus>
     b62:	80 fd       	sbrc	r24, 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <protocolCom+0x150>
					ser_writeln("501 Zonnescherm is al opgerold!");
     b66:	80 e9       	ldi	r24, 0x90	; 144
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     b6e:	0e 94 0c 08 	call	0x1018	; 0x1018 <get_unrollStatus>
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__divmodhi4>
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	11 f4       	brne	.+4      	; 0xb84 <protocolCom+0x166>
					oprollen();
     b80:	0e 94 79 08 	call	0x10f2	; 0x10f2 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b84:	c6 01       	movw	r24, r12
     b86:	be 01       	movw	r22, r28
     b88:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     b8c:	28 2f       	mov	r18, r24
     b8e:	39 2f       	mov	r19, r25
     b90:	21 15       	cp	r18, r1
     b92:	31 05       	cpc	r19, r1
     b94:	b9 f4       	brne	.+46     	; 0xbc4 <protocolCom+0x1a6>
				printf("202 Status: %i", get_unrollStatus());
     b96:	0e 94 0c 08 	call	0x1018	; 0x1018 <get_unrollStatus>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <protocolCom+0x17e>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <protocolCom+0x180>
     b9e:	27 eb       	ldi	r18, 0xB7	; 183
     ba0:	31 e0       	ldi	r19, 0x01	; 1
     ba2:	ad b7       	in	r26, 0x3d	; 61
     ba4:	be b7       	in	r27, 0x3e	; 62
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	3c 93       	st	X, r19
     baa:	2e 93       	st	-X, r18
     bac:	11 97       	sbiw	r26, 0x01	; 1
     bae:	14 96       	adiw	r26, 0x04	; 4
     bb0:	9c 93       	st	X, r25
     bb2:	8e 93       	st	-X, r24
     bb4:	13 97       	sbiw	r26, 0x03	; 3
     bb6:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	9e cf       	rjmp	.-196    	; 0xb00 <protocolCom+0xe2>
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     bc4:	c4 01       	movw	r24, r8
     bc6:	be 01       	movw	r22, r28
     bc8:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     bcc:	28 2f       	mov	r18, r24
     bce:	39 2f       	mov	r19, r25
     bd0:	21 15       	cp	r18, r1
     bd2:	31 05       	cpc	r19, r1
     bd4:	e1 f4       	brne	.+56     	; 0xc0e <protocolCom+0x1f0>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bd6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <protocolCom+0x1c2>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <protocolCom+0x1c4>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <protocolCom+0x1c6>
     be4:	2f ec       	ldi	r18, 0xCF	; 207
     be6:	31 e0       	ldi	r19, 0x01	; 1
     be8:	ed b7       	in	r30, 0x3d	; 61
     bea:	fe b7       	in	r31, 0x3e	; 62
     bec:	32 83       	std	Z+2, r19	; 0x02
     bee:	21 83       	std	Z+1, r18	; 0x01
     bf0:	83 83       	std	Z+3, r24	; 0x03
     bf2:	94 83       	std	Z+4, r25	; 0x04
     bf4:	a5 83       	std	Z+5, r26	; 0x05
     bf6:	b6 83       	std	Z+6, r27	; 0x06
     bf8:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     bfc:	8d b7       	in	r24, 0x3d	; 61
     bfe:	9e b7       	in	r25, 0x3e	; 62
     c00:	06 96       	adiw	r24, 0x06	; 6
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	9e bf       	out	0x3e, r25	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	8d bf       	out	0x3d, r24	; 61
     c0c:	79 cf       	rjmp	.-270    	; 0xb00 <protocolCom+0xe2>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c0e:	c3 01       	movw	r24, r6
     c10:	be 01       	movw	r22, r28
     c12:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     c16:	28 2f       	mov	r18, r24
     c18:	39 2f       	mov	r19, r25
     c1a:	21 15       	cp	r18, r1
     c1c:	31 05       	cpc	r19, r1
     c1e:	49 f4       	brne	.+18     	; 0xc32 <protocolCom+0x214>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c20:	81 ef       	ldi	r24, 0xF1	; 241
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     c28:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c2c:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     c30:	67 cf       	rjmp	.-306    	; 0xb00 <protocolCom+0xe2>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c32:	c2 01       	movw	r24, r4
     c34:	be 01       	movw	r22, r28
     c36:	4e e0       	ldi	r20, 0x0E	; 14
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     c3e:	28 2f       	mov	r18, r24
     c40:	39 2f       	mov	r19, r25
     c42:	21 15       	cp	r18, r1
     c44:	31 05       	cpc	r19, r1
     c46:	71 f4       	brne	.+28     	; 0xc64 <protocolCom+0x246>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				
				if(sizeof in_buf> 18){
					printf("504 Ongeldige temperatuur");
     c48:	00 d0       	rcall	.+0      	; 0xc4a <protocolCom+0x22c>
     c4a:	83 e1       	ldi	r24, 0x13	; 19
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	ad b7       	in	r26, 0x3d	; 61
     c50:	be b7       	in	r27, 0x3e	; 62
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	9c 93       	st	X, r25
     c56:	8e 93       	st	-X, r24
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	4e cf       	rjmp	.-356    	; 0xb00 <protocolCom+0xe2>
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c64:	c1 01       	movw	r24, r2
     c66:	be 01       	movw	r22, r28
     c68:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     c6c:	28 2f       	mov	r18, r24
     c6e:	39 2f       	mov	r19, r25
     c70:	21 15       	cp	r18, r1
     c72:	31 05       	cpc	r19, r1
     c74:	c1 f4       	brne	.+48     	; 0xca6 <protocolCom+0x288>
				printf("202 LIGHT %i \n", getLight());
     c76:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <protocolCom+0x25e>
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <protocolCom+0x260>
     c7e:	ed b7       	in	r30, 0x3d	; 61
     c80:	fe b7       	in	r31, 0x3e	; 62
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	27 e3       	ldi	r18, 0x37	; 55
     c86:	32 e0       	ldi	r19, 0x02	; 2
     c88:	ad b7       	in	r26, 0x3d	; 61
     c8a:	be b7       	in	r27, 0x3e	; 62
     c8c:	12 96       	adiw	r26, 0x02	; 2
     c8e:	3c 93       	st	X, r19
     c90:	2e 93       	st	-X, r18
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	82 83       	std	Z+2, r24	; 0x02
     c96:	13 82       	std	Z+3, r1	; 0x03
     c98:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	2d cf       	rjmp	.-422    	; 0xb00 <protocolCom+0xe2>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     ca6:	86 e4       	ldi	r24, 0x46	; 70
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	be 01       	movw	r22, r28
     cac:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     cb0:	28 2f       	mov	r18, r24
     cb2:	39 2f       	mov	r19, r25
     cb4:	21 15       	cp	r18, r1
     cb6:	31 05       	cpc	r19, r1
     cb8:	49 f4       	brne	.+18     	; 0xccc <protocolCom+0x2ae>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     cba:	86 e5       	ldi	r24, 0x56	; 86
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     cc2:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     cc6:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     cca:	1a cf       	rjmp	.-460    	; 0xb00 <protocolCom+0xe2>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     ccc:	87 e6       	ldi	r24, 0x67	; 103
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	be 01       	movw	r22, r28
     cd2:	4f e0       	ldi	r20, 0x0F	; 15
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     cda:	28 2f       	mov	r18, r24
     cdc:	39 2f       	mov	r19, r25
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	61 f4       	brne	.+24     	; 0xcfc <protocolCom+0x2de>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <protocolCom+0x2c8>
     ce6:	8a e7       	ldi	r24, 0x7A	; 122
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	ed b7       	in	r30, 0x3d	; 61
     cec:	fe b7       	in	r31, 0x3e	; 62
     cee:	92 83       	std	Z+2, r25	; 0x02
     cf0:	81 83       	std	Z+1, r24	; 0x01
     cf2:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	02 cf       	rjmp	.-508    	; 0xb00 <protocolCom+0xe2>
				set_grensLicht(substring);
				ser_writeln(get_grensLight());
				}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     cfc:	89 e9       	ldi	r24, 0x99	; 153
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	be 01       	movw	r22, r28
     d02:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     d06:	28 2f       	mov	r18, r24
     d08:	39 2f       	mov	r19, r25
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	49 f4       	brne	.+18     	; 0xd22 <protocolCom+0x304>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     d10:	88 ea       	ldi	r24, 0xA8	; 168
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     d18:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     d1c:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     d20:	ef ce       	rjmp	.-546    	; 0xb00 <protocolCom+0xe2>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     d22:	89 eb       	ldi	r24, 0xB9	; 185
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	be 01       	movw	r22, r28
     d28:	4f e0       	ldi	r20, 0x0F	; 15
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     d30:	28 2f       	mov	r18, r24
     d32:	39 2f       	mov	r19, r25
     d34:	21 15       	cp	r18, r1
     d36:	31 05       	cpc	r19, r1
     d38:	71 f4       	brne	.+28     	; 0xd56 <protocolCom+0x338>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);
				
				if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <protocolCom+0x31e>
     d3c:	8b ec       	ldi	r24, 0xCB	; 203
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	ad b7       	in	r26, 0x3d	; 61
     d42:	be b7       	in	r27, 0x3e	; 62
     d44:	12 96       	adiw	r26, 0x02	; 2
     d46:	9c 93       	st	X, r25
     d48:	8e 93       	st	-X, r24
     d4a:	11 97       	sbiw	r26, 0x01	; 1
     d4c:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	d5 ce       	rjmp	.-598    	; 0xb00 <protocolCom+0xe2>
				set_substring();
				set_maxUnroll(substring);
				ser_writeln(get_maxUnroll());
				}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     d56:	86 ee       	ldi	r24, 0xE6	; 230
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	be 01       	movw	r22, r28
     d5c:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     d60:	28 2f       	mov	r18, r24
     d62:	39 2f       	mov	r19, r25
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	49 f4       	brne	.+18     	; 0xd7c <protocolCom+0x35e>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     d6a:	85 ef       	ldi	r24, 0xF5	; 245
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     d72:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     d76:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     d7a:	c2 ce       	rjmp	.-636    	; 0xb00 <protocolCom+0xe2>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	be 01       	movw	r22, r28
     d82:	4f e0       	ldi	r20, 0x0F	; 15
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     d8a:	28 2f       	mov	r18, r24
     d8c:	39 2f       	mov	r19, r25
     d8e:	21 15       	cp	r18, r1
     d90:	31 05       	cpc	r19, r1
     d92:	61 f4       	brne	.+24     	; 0xdac <protocolCom+0x38e>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				
				if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
     d94:	00 d0       	rcall	.+0      	; 0xd96 <protocolCom+0x378>
     d96:	88 e1       	ldi	r24, 0x18	; 24
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	ed b7       	in	r30, 0x3d	; 61
     d9c:	fe b7       	in	r31, 0x3e	; 62
     d9e:	92 83       	std	Z+2, r25	; 0x02
     da0:	81 83       	std	Z+1, r24	; 0x01
     da2:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	aa ce       	rjmp	.-684    	; 0xb00 <protocolCom+0xe2>
				set_minUnroll(substring);
				ser_writeln(get_minUnroll());
				}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     dac:	82 e3       	ldi	r24, 0x32	; 50
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	be 01       	movw	r22, r28
     db2:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     db6:	28 2f       	mov	r18, r24
     db8:	39 2f       	mov	r19, r25
     dba:	21 15       	cp	r18, r1
     dbc:	31 05       	cpc	r19, r1
     dbe:	49 f4       	brne	.+18     	; 0xdd2 <protocolCom+0x3b4>
				ser_write("202 "),  ser_writeln(get_Naam());
     dc0:	8b e3       	ldi	r24, 0x3B	; 59
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     dc8:	0e 94 83 02 	call	0x506	; 0x506 <get_Naam>
     dcc:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     dd0:	97 ce       	rjmp	.-722    	; 0xb00 <protocolCom+0xe2>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	be 01       	movw	r22, r28
     dd8:	48 e0       	ldi	r20, 0x08	; 8
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     de0:	28 2f       	mov	r18, r24
     de2:	39 2f       	mov	r19, r25
     de4:	21 15       	cp	r18, r1
     de6:	31 05       	cpc	r19, r1
     de8:	69 f4       	brne	.+26     	; 0xe04 <protocolCom+0x3e6>
				if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{
				set_substring();
     dea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Naam(substring);
     dee:	80 91 cc 07 	lds	r24, 0x07CC
     df2:	90 91 cd 07 	lds	r25, 0x07CD
     df6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_Naam>
				printf("200 OK \n");
     dfa:	8c e4       	ldi	r24, 0x4C	; 76
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	0e 94 23 11 	call	0x2246	; 0x2246 <puts>
     e02:	7e ce       	rjmp	.-772    	; 0xb00 <protocolCom+0xe2>
				}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     e04:	84 e5       	ldi	r24, 0x54	; 84
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	be 01       	movw	r22, r28
     e0a:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     e0e:	28 2f       	mov	r18, r24
     e10:	39 2f       	mov	r19, r25
     e12:	21 15       	cp	r18, r1
     e14:	31 05       	cpc	r19, r1
     e16:	49 f4       	brne	.+18     	; 0xe2a <protocolCom+0x40c>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     e18:	8b e3       	ldi	r24, 0x3B	; 59
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     e20:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_Locatie>
     e24:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     e28:	6b ce       	rjmp	.-810    	; 0xb00 <protocolCom+0xe2>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     e2a:	81 e6       	ldi	r24, 0x61	; 97
     e2c:	93 e0       	ldi	r25, 0x03	; 3
     e2e:	be 01       	movw	r22, r28
     e30:	4c e0       	ldi	r20, 0x0C	; 12
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     e38:	28 2f       	mov	r18, r24
     e3a:	39 2f       	mov	r19, r25
     e3c:	21 15       	cp	r18, r1
     e3e:	31 05       	cpc	r19, r1
     e40:	69 f4       	brne	.+26     	; 0xe5c <protocolCom+0x43e>
				if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{
				set_substring();
     e42:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Locatie(substring);
     e46:	80 91 cc 07 	lds	r24, 0x07CC
     e4a:	90 91 cd 07 	lds	r25, 0x07CD
     e4e:	0e 94 aa 02 	call	0x554	; 0x554 <set_Locatie>
				
				printf("200 OK \n");
     e52:	8c e4       	ldi	r24, 0x4C	; 76
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 23 11 	call	0x2246	; 0x2246 <puts>
     e5a:	52 ce       	rjmp	.-860    	; 0xb00 <protocolCom+0xe2>
				}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     e5c:	81 e7       	ldi	r24, 0x71	; 113
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	be 01       	movw	r22, r28
     e62:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     e66:	28 2f       	mov	r18, r24
     e68:	39 2f       	mov	r19, r25
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	49 f4       	brne	.+18     	; 0xe82 <protocolCom+0x464>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     e70:	8d e7       	ldi	r24, 0x7D	; 125
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
     e78:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
     e7c:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     e80:	3f ce       	rjmp	.-898    	; 0xb00 <protocolCom+0xe2>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     e82:	8a e8       	ldi	r24, 0x8A	; 138
     e84:	93 e0       	ldi	r25, 0x03	; 3
     e86:	be 01       	movw	r22, r28
     e88:	4c e0       	ldi	r20, 0x0C	; 12
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	0e 94 c9 10 	call	0x2192	; 0x2192 <strncmp>
     e90:	28 2f       	mov	r18, r24
     e92:	39 2f       	mov	r19, r25
     e94:	21 15       	cp	r18, r1
     e96:	31 05       	cpc	r19, r1
     e98:	71 f4       	brne	.+28     	; 0xeb6 <protocolCom+0x498>
					if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <protocolCom+0x47e>
     e9c:	89 e9       	ldi	r24, 0x99	; 153
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	ad b7       	in	r26, 0x3d	; 61
     ea2:	be b7       	in	r27, 0x3e	; 62
     ea4:	12 96       	adiw	r26, 0x02	; 2
     ea6:	9c 93       	st	X, r25
     ea8:	8e 93       	st	-X, r24
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	25 ce       	rjmp	.-950    	; 0xb00 <protocolCom+0xe2>
					printf("200 OK \n");
					}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     eb6:	8d ea       	ldi	r24, 0xAD	; 173
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	be 01       	movw	r22, r28
     ebc:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     ec0:	28 2f       	mov	r18, r24
     ec2:	39 2f       	mov	r19, r25
     ec4:	21 15       	cp	r18, r1
     ec6:	31 05       	cpc	r19, r1
     ec8:	89 f4       	brne	.+34     	; 0xeec <protocolCom+0x4ce>
				if ((get_unrollStatus() % 2) == 1){
     eca:	0e 94 0c 08 	call	0x1018	; 0x1018 <get_unrollStatus>
     ece:	62 e0       	ldi	r22, 0x02	; 2
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__divmodhi4>
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	91 05       	cpc	r25, r1
     eda:	11 f4       	brne	.+4      	; 0xee0 <protocolCom+0x4c2>
					uitrollen();					
     edc:	0e 94 1d 08 	call	0x103a	; 0x103a <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     ee0:	82 eb       	ldi	r24, 0xB2	; 178
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
				abort();
     ee8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     eec:	8b eb       	ldi	r24, 0xBB	; 187
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	be 01       	movw	r22, r28
     ef2:	0e 94 c0 10 	call	0x2180	; 0x2180 <strcmp>
     ef6:	28 2f       	mov	r18, r24
     ef8:	39 2f       	mov	r19, r25
     efa:	21 15       	cp	r18, r1
     efc:	31 05       	cpc	r19, r1
     efe:	29 f4       	brne	.+10     	; 0xf0a <protocolCom+0x4ec>
				ser_writeln(
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	93 e0       	ldi	r25, 0x03	; 3
     f04:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     f08:	fb cd       	rjmp	.-1034   	; 0xb00 <protocolCom+0xe2>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	96 e0       	ldi	r25, 0x06	; 6
     f0e:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
     f12:	f6 cd       	rjmp	.-1044   	; 0xb00 <protocolCom+0xe2>

00000f14 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     f14:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     f18:	83 e3       	ldi	r24, 0x33	; 51
     f1a:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     f1e:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     f22:	88 e1       	ldi	r24, 0x18	; 24
     f24:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     f2e:	8b e4       	ldi	r24, 0x4B	; 75
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	90 93 f3 07 	sts	0x07F3, r25
     f36:	80 93 f2 07 	sts	0x07F2, r24
}
     f3a:	08 95       	ret

00000f3c <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     f3c:	e0 ec       	ldi	r30, 0xC0	; 192
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	90 81       	ld	r25, Z
     f42:	95 ff       	sbrs	r25, 5
     f44:	fd cf       	rjmp	.-6      	; 0xf40 <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     f46:	80 93 c6 00 	sts	0x00C6, r24
}
     f4a:	08 95       	ret

00000f4c <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     f4c:	cf 93       	push	r28
     f4e:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     f50:	8a 30       	cpi	r24, 0x0A	; 10
     f52:	19 f4       	brne	.+6      	; 0xf5a <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     f54:	8d e0       	ldi	r24, 0x0D	; 13
     f56:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>
	}
	ser_transmit(c);
     f5a:	8c 2f       	mov	r24, r28
     f5c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>
}
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     f64:	e0 ec       	ldi	r30, 0xC0	; 192
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	ec f7       	brge	.-6      	; 0xf68 <ser_receive+0x4>
	return UDR0;
     f6e:	80 91 c6 00 	lds	r24, 0x00C6
}
     f72:	08 95       	ret

00000f74 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     f7a:	88 81       	ld	r24, Y
     f7c:	88 23       	and	r24, r24
     f7e:	31 f0       	breq	.+12     	; 0xf8c <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     f80:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     f82:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     f86:	89 91       	ld	r24, Y+
     f88:	88 23       	and	r24, r24
     f8a:	d9 f7       	brne	.-10     	; 0xf82 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     f92:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
	ser_transmit('\r');
     f96:	8d e0       	ldi	r24, 0x0D	; 13
     f98:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>
	ser_transmit('\n');
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>
}
     fa2:	08 95       	ret

00000fa4 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	5c 01       	movw	r10, r24
     fba:	d4 2f       	mov	r29, r20
	int i=0;
     fbc:	6c 01       	movw	r12, r24
     fbe:	ee 24       	eor	r14, r14
     fc0:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     fc2:	8b 01       	movw	r16, r22
     fc4:	01 50       	subi	r16, 0x01	; 1
     fc6:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     fc8:	0e 94 b2 07 	call	0xf64	; 0xf64 <ser_receive>
     fcc:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
     fce:	dd 23       	and	r29, r29
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <ser_readln+0x32>
     fd2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>
		if (c=='\r') {
     fd6:	cd 30       	cpi	r28, 0x0D	; 13
     fd8:	31 f4       	brne	.+12     	; 0xfe6 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
     fda:	dd 23       	and	r29, r29
     fdc:	71 f0       	breq	.+28     	; 0xffa <ser_readln+0x56>
     fde:	8a e0       	ldi	r24, 0x0A	; 10
     fe0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ser_transmit>
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
     fe6:	e0 16       	cp	r14, r16
     fe8:	f1 06       	cpc	r15, r17
     fea:	74 f7       	brge	.-36     	; 0xfc8 <ser_readln+0x24>
			buf[i++]=c;
     fec:	f6 01       	movw	r30, r12
     fee:	c1 93       	st	Z+, r28
     ff0:	6f 01       	movw	r12, r30
     ff2:	08 94       	sec
     ff4:	e1 1c       	adc	r14, r1
     ff6:	f1 1c       	adc	r15, r1
     ff8:	e7 cf       	rjmp	.-50     	; 0xfc8 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
     ffa:	ea 0c       	add	r14, r10
     ffc:	fb 1c       	adc	r15, r11
     ffe:	f7 01       	movw	r30, r14
    1000:	10 82       	st	Z, r1
}
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	08 95       	ret

00001018 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    1018:	80 91 d2 06 	lds	r24, 0x06D2
    101c:	90 91 d3 06 	lds	r25, 0x06D3
    1020:	08 95       	ret

00001022 <init_scherm_ports>:


void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    1022:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    1024:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    1026:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    1028:	e9 e6       	ldi	r30, 0x69	; 105
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    1036:	2d 9a       	sbi	0x05, 5	; 5
}
    1038:	08 95       	ret

0000103a <uitrollen>:

void uitrollen(){
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
	IN = (IN + 1);
    1042:	80 91 d2 06 	lds	r24, 0x06D2
    1046:	90 91 d3 06 	lds	r25, 0x06D3
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	90 93 d3 06 	sts	0x06D3, r25
    1050:	80 93 d2 06 	sts	0x06D2, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    1054:	89 e5       	ldi	r24, 0x59	; 89
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    105c:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    105e:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    1060:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <strtod>
    106c:	6b 01       	movw	r12, r22
    106e:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    1070:	14 c0       	rjmp	.+40     	; 0x109a <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1072:	2c 9a       	sbi	0x05, 4	; 5
    1074:	8f e3       	ldi	r24, 0x3F	; 63
    1076:	9d e0       	ldi	r25, 0x0D	; 13
    1078:	a3 e0       	ldi	r26, 0x03	; 3
    107a:	81 50       	subi	r24, 0x01	; 1
    107c:	90 40       	sbci	r25, 0x00	; 0
    107e:	a0 40       	sbci	r26, 0x00	; 0
    1080:	e1 f7       	brne	.-8      	; 0x107a <uitrollen+0x40>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <uitrollen+0x4a>
    1084:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    1086:	2c 98       	cbi	0x05, 4	; 5
    1088:	8f e3       	ldi	r24, 0x3F	; 63
    108a:	9d e0       	ldi	r25, 0x0D	; 13
    108c:	a3 e0       	ldi	r26, 0x03	; 3
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	90 40       	sbci	r25, 0x00	; 0
    1092:	a0 40       	sbci	r26, 0x00	; 0
    1094:	e1 f7       	brne	.-8      	; 0x108e <uitrollen+0x54>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <uitrollen+0x5e>
    1098:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    109a:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    109e:	a7 01       	movw	r20, r14
    10a0:	96 01       	movw	r18, r12
    10a2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	24 f3       	brlt	.-56     	; 0x1072 <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    10aa:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <uitrollen+0x7a>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <uitrollen+0x7c>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <uitrollen+0x7e>
    10b8:	2f e5       	ldi	r18, 0x5F	; 95
    10ba:	36 e0       	ldi	r19, 0x06	; 6
    10bc:	ed b7       	in	r30, 0x3d	; 61
    10be:	fe b7       	in	r31, 0x3e	; 62
    10c0:	32 83       	std	Z+2, r19	; 0x02
    10c2:	21 83       	std	Z+1, r18	; 0x01
    10c4:	83 83       	std	Z+3, r24	; 0x03
    10c6:	94 83       	std	Z+4, r25	; 0x04
    10c8:	a5 83       	std	Z+5, r26	; 0x05
    10ca:	b6 83       	std	Z+6, r27	; 0x06
    10cc:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    10d0:	8d b7       	in	r24, 0x3d	; 61
    10d2:	9e b7       	in	r25, 0x3e	; 62
    10d4:	06 96       	adiw	r24, 0x06	; 6
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	9e bf       	out	0x3e, r25	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	8d bf       	out	0x3d, r24	; 61
    10e0:	83 e8       	ldi	r24, 0x83	; 131
    10e2:	96 e0       	ldi	r25, 0x06	; 6
    10e4:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
}
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret

000010f2 <oprollen>:
	
	


void oprollen(){
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
	IN = (IN + 1);
    10fa:	80 91 d2 06 	lds	r24, 0x06D2
    10fe:	90 91 d3 06 	lds	r25, 0x06D3
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	90 93 d3 06 	sts	0x06D3, r25
    1108:	80 93 d2 06 	sts	0x06D2, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    110c:	81 ea       	ldi	r24, 0xA1	; 161
    110e:	96 e0       	ldi	r25, 0x06	; 6
    1110:	0e 94 ba 07 	call	0xf74	; 0xf74 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    1114:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1116:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1118:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <strtod>
    1124:	6b 01       	movw	r12, r22
    1126:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    112a:	2c 9a       	sbi	0x05, 4	; 5
    112c:	8f e3       	ldi	r24, 0x3F	; 63
    112e:	9d e0       	ldi	r25, 0x0D	; 13
    1130:	a3 e0       	ldi	r26, 0x03	; 3
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	90 40       	sbci	r25, 0x00	; 0
    1136:	a0 40       	sbci	r26, 0x00	; 0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <oprollen+0x40>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <oprollen+0x4a>
    113c:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    113e:	2c 98       	cbi	0x05, 4	; 5
    1140:	8f e3       	ldi	r24, 0x3F	; 63
    1142:	9d e0       	ldi	r25, 0x0D	; 13
    1144:	a3 e0       	ldi	r26, 0x03	; 3
    1146:	81 50       	subi	r24, 0x01	; 1
    1148:	90 40       	sbci	r25, 0x00	; 0
    114a:	a0 40       	sbci	r26, 0x00	; 0
    114c:	e1 f7       	brne	.-8      	; 0x1146 <oprollen+0x54>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <oprollen+0x5e>
    1150:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    1152:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    1156:	a7 01       	movw	r20, r14
    1158:	96 01       	movw	r18, r12
    115a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__gesf2>
    115e:	18 16       	cp	r1, r24
    1160:	24 f3       	brlt	.-56     	; 0x112a <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    1162:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    1166:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	00 d0       	rcall	.+0      	; 0x1170 <oprollen+0x7e>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <oprollen+0x80>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <oprollen+0x82>
    1174:	2f e5       	ldi	r18, 0x5F	; 95
    1176:	36 e0       	ldi	r19, 0x06	; 6
    1178:	ed b7       	in	r30, 0x3d	; 61
    117a:	fe b7       	in	r31, 0x3e	; 62
    117c:	32 83       	std	Z+2, r19	; 0x02
    117e:	21 83       	std	Z+1, r18	; 0x01
    1180:	83 83       	std	Z+3, r24	; 0x03
    1182:	94 83       	std	Z+4, r25	; 0x04
    1184:	a5 83       	std	Z+5, r26	; 0x05
    1186:	b6 83       	std	Z+6, r27	; 0x06
    1188:	0e 94 0e 11 	call	0x221c	; 0x221c <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    118c:	8d b7       	in	r24, 0x3d	; 61
    118e:	9e b7       	in	r25, 0x3e	; 62
    1190:	06 96       	adiw	r24, 0x06	; 6
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	9e bf       	out	0x3e, r25	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	8d bf       	out	0x3d, r24	; 61
    119c:	86 ea       	ldi	r24, 0xA6	; 166
    119e:	96 e0       	ldi	r25, 0x06	; 6
    11a0:	0e 94 c9 07 	call	0xf92	; 0xf92 <ser_writeln>
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	08 95       	ret

000011ae <__subsf3>:
    11ae:	50 58       	subi	r21, 0x80	; 128

000011b0 <__addsf3>:
    11b0:	bb 27       	eor	r27, r27
    11b2:	aa 27       	eor	r26, r26
    11b4:	0e d0       	rcall	.+28     	; 0x11d2 <__addsf3x>
    11b6:	dc c0       	rjmp	.+440    	; 0x1370 <__fp_round>
    11b8:	cd d0       	rcall	.+410    	; 0x1354 <__fp_pscA>
    11ba:	30 f0       	brcs	.+12     	; 0x11c8 <__addsf3+0x18>
    11bc:	d2 d0       	rcall	.+420    	; 0x1362 <__fp_pscB>
    11be:	20 f0       	brcs	.+8      	; 0x11c8 <__addsf3+0x18>
    11c0:	31 f4       	brne	.+12     	; 0x11ce <__addsf3+0x1e>
    11c2:	9f 3f       	cpi	r25, 0xFF	; 255
    11c4:	11 f4       	brne	.+4      	; 0x11ca <__addsf3+0x1a>
    11c6:	1e f4       	brtc	.+6      	; 0x11ce <__addsf3+0x1e>
    11c8:	c2 c0       	rjmp	.+388    	; 0x134e <__fp_nan>
    11ca:	0e f4       	brtc	.+2      	; 0x11ce <__addsf3+0x1e>
    11cc:	e0 95       	com	r30
    11ce:	e7 fb       	bst	r30, 7
    11d0:	b8 c0       	rjmp	.+368    	; 0x1342 <__fp_inf>

000011d2 <__addsf3x>:
    11d2:	e9 2f       	mov	r30, r25
    11d4:	de d0       	rcall	.+444    	; 0x1392 <__fp_split3>
    11d6:	80 f3       	brcs	.-32     	; 0x11b8 <__addsf3+0x8>
    11d8:	ba 17       	cp	r27, r26
    11da:	62 07       	cpc	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	95 07       	cpc	r25, r21
    11e2:	18 f0       	brcs	.+6      	; 0x11ea <__addsf3x+0x18>
    11e4:	71 f4       	brne	.+28     	; 0x1202 <__addsf3x+0x30>
    11e6:	9e f5       	brtc	.+102    	; 0x124e <__addsf3x+0x7c>
    11e8:	f6 c0       	rjmp	.+492    	; 0x13d6 <__fp_zero>
    11ea:	0e f4       	brtc	.+2      	; 0x11ee <__addsf3x+0x1c>
    11ec:	e0 95       	com	r30
    11ee:	0b 2e       	mov	r0, r27
    11f0:	ba 2f       	mov	r27, r26
    11f2:	a0 2d       	mov	r26, r0
    11f4:	0b 01       	movw	r0, r22
    11f6:	b9 01       	movw	r22, r18
    11f8:	90 01       	movw	r18, r0
    11fa:	0c 01       	movw	r0, r24
    11fc:	ca 01       	movw	r24, r20
    11fe:	a0 01       	movw	r20, r0
    1200:	11 24       	eor	r1, r1
    1202:	ff 27       	eor	r31, r31
    1204:	59 1b       	sub	r21, r25
    1206:	99 f0       	breq	.+38     	; 0x122e <__addsf3x+0x5c>
    1208:	59 3f       	cpi	r21, 0xF9	; 249
    120a:	50 f4       	brcc	.+20     	; 0x1220 <__addsf3x+0x4e>
    120c:	50 3e       	cpi	r21, 0xE0	; 224
    120e:	68 f1       	brcs	.+90     	; 0x126a <__addsf3x+0x98>
    1210:	1a 16       	cp	r1, r26
    1212:	f0 40       	sbci	r31, 0x00	; 0
    1214:	a2 2f       	mov	r26, r18
    1216:	23 2f       	mov	r18, r19
    1218:	34 2f       	mov	r19, r20
    121a:	44 27       	eor	r20, r20
    121c:	58 5f       	subi	r21, 0xF8	; 248
    121e:	f3 cf       	rjmp	.-26     	; 0x1206 <__addsf3x+0x34>
    1220:	46 95       	lsr	r20
    1222:	37 95       	ror	r19
    1224:	27 95       	ror	r18
    1226:	a7 95       	ror	r26
    1228:	f0 40       	sbci	r31, 0x00	; 0
    122a:	53 95       	inc	r21
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__addsf3x+0x4e>
    122e:	7e f4       	brtc	.+30     	; 0x124e <__addsf3x+0x7c>
    1230:	1f 16       	cp	r1, r31
    1232:	ba 0b       	sbc	r27, r26
    1234:	62 0b       	sbc	r22, r18
    1236:	73 0b       	sbc	r23, r19
    1238:	84 0b       	sbc	r24, r20
    123a:	ba f0       	brmi	.+46     	; 0x126a <__addsf3x+0x98>
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	a1 f0       	breq	.+40     	; 0x1268 <__addsf3x+0x96>
    1240:	ff 0f       	add	r31, r31
    1242:	bb 1f       	adc	r27, r27
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	c2 f7       	brpl	.-16     	; 0x123c <__addsf3x+0x6a>
    124c:	0e c0       	rjmp	.+28     	; 0x126a <__addsf3x+0x98>
    124e:	ba 0f       	add	r27, r26
    1250:	62 1f       	adc	r22, r18
    1252:	73 1f       	adc	r23, r19
    1254:	84 1f       	adc	r24, r20
    1256:	48 f4       	brcc	.+18     	; 0x126a <__addsf3x+0x98>
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	9e 3f       	cpi	r25, 0xFE	; 254
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__addsf3x+0x96>
    1266:	b3 cf       	rjmp	.-154    	; 0x11ce <__addsf3+0x1e>
    1268:	93 95       	inc	r25
    126a:	88 0f       	add	r24, r24
    126c:	08 f0       	brcs	.+2      	; 0x1270 <__addsf3x+0x9e>
    126e:	99 27       	eor	r25, r25
    1270:	ee 0f       	add	r30, r30
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	08 95       	ret

00001278 <__cmpsf2>:
    1278:	40 d0       	rcall	.+128    	; 0x12fa <__fp_cmp>
    127a:	08 f4       	brcc	.+2      	; 0x127e <__cmpsf2+0x6>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	08 95       	ret

00001280 <__floatunsisf>:
    1280:	e8 94       	clt
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <__floatsisf+0x12>

00001284 <__floatsisf>:
    1284:	97 fb       	bst	r25, 7
    1286:	3e f4       	brtc	.+14     	; 0x1296 <__floatsisf+0x12>
    1288:	90 95       	com	r25
    128a:	80 95       	com	r24
    128c:	70 95       	com	r23
    128e:	61 95       	neg	r22
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	8f 4f       	sbci	r24, 0xFF	; 255
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	99 23       	and	r25, r25
    1298:	a9 f0       	breq	.+42     	; 0x12c4 <__floatsisf+0x40>
    129a:	f9 2f       	mov	r31, r25
    129c:	96 e9       	ldi	r25, 0x96	; 150
    129e:	bb 27       	eor	r27, r27
    12a0:	93 95       	inc	r25
    12a2:	f6 95       	lsr	r31
    12a4:	87 95       	ror	r24
    12a6:	77 95       	ror	r23
    12a8:	67 95       	ror	r22
    12aa:	b7 95       	ror	r27
    12ac:	f1 11       	cpse	r31, r1
    12ae:	f8 cf       	rjmp	.-16     	; 0x12a0 <__floatsisf+0x1c>
    12b0:	fa f4       	brpl	.+62     	; 0x12f0 <__floatsisf+0x6c>
    12b2:	bb 0f       	add	r27, r27
    12b4:	11 f4       	brne	.+4      	; 0x12ba <__floatsisf+0x36>
    12b6:	60 ff       	sbrs	r22, 0
    12b8:	1b c0       	rjmp	.+54     	; 0x12f0 <__floatsisf+0x6c>
    12ba:	6f 5f       	subi	r22, 0xFF	; 255
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	8f 4f       	sbci	r24, 0xFF	; 255
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	16 c0       	rjmp	.+44     	; 0x12f0 <__floatsisf+0x6c>
    12c4:	88 23       	and	r24, r24
    12c6:	11 f0       	breq	.+4      	; 0x12cc <__floatsisf+0x48>
    12c8:	96 e9       	ldi	r25, 0x96	; 150
    12ca:	11 c0       	rjmp	.+34     	; 0x12ee <__floatsisf+0x6a>
    12cc:	77 23       	and	r23, r23
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <__floatsisf+0x54>
    12d0:	9e e8       	ldi	r25, 0x8E	; 142
    12d2:	87 2f       	mov	r24, r23
    12d4:	76 2f       	mov	r23, r22
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <__floatsisf+0x5e>
    12d8:	66 23       	and	r22, r22
    12da:	71 f0       	breq	.+28     	; 0x12f8 <__floatsisf+0x74>
    12dc:	96 e8       	ldi	r25, 0x86	; 134
    12de:	86 2f       	mov	r24, r22
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	2a f0       	brmi	.+10     	; 0x12f0 <__floatsisf+0x6c>
    12e6:	9a 95       	dec	r25
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	da f7       	brpl	.-10     	; 0x12e6 <__floatsisf+0x62>
    12f0:	88 0f       	add	r24, r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	97 f9       	bld	r25, 7
    12f8:	08 95       	ret

000012fa <__fp_cmp>:
    12fa:	99 0f       	add	r25, r25
    12fc:	00 08       	sbc	r0, r0
    12fe:	55 0f       	add	r21, r21
    1300:	aa 0b       	sbc	r26, r26
    1302:	e0 e8       	ldi	r30, 0x80	; 128
    1304:	fe ef       	ldi	r31, 0xFE	; 254
    1306:	16 16       	cp	r1, r22
    1308:	17 06       	cpc	r1, r23
    130a:	e8 07       	cpc	r30, r24
    130c:	f9 07       	cpc	r31, r25
    130e:	c0 f0       	brcs	.+48     	; 0x1340 <__fp_cmp+0x46>
    1310:	12 16       	cp	r1, r18
    1312:	13 06       	cpc	r1, r19
    1314:	e4 07       	cpc	r30, r20
    1316:	f5 07       	cpc	r31, r21
    1318:	98 f0       	brcs	.+38     	; 0x1340 <__fp_cmp+0x46>
    131a:	62 1b       	sub	r22, r18
    131c:	73 0b       	sbc	r23, r19
    131e:	84 0b       	sbc	r24, r20
    1320:	95 0b       	sbc	r25, r21
    1322:	39 f4       	brne	.+14     	; 0x1332 <__fp_cmp+0x38>
    1324:	0a 26       	eor	r0, r26
    1326:	61 f0       	breq	.+24     	; 0x1340 <__fp_cmp+0x46>
    1328:	23 2b       	or	r18, r19
    132a:	24 2b       	or	r18, r20
    132c:	25 2b       	or	r18, r21
    132e:	21 f4       	brne	.+8      	; 0x1338 <__fp_cmp+0x3e>
    1330:	08 95       	ret
    1332:	0a 26       	eor	r0, r26
    1334:	09 f4       	brne	.+2      	; 0x1338 <__fp_cmp+0x3e>
    1336:	a1 40       	sbci	r26, 0x01	; 1
    1338:	a6 95       	lsr	r26
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	81 1d       	adc	r24, r1
    133e:	81 1d       	adc	r24, r1
    1340:	08 95       	ret

00001342 <__fp_inf>:
    1342:	97 f9       	bld	r25, 7
    1344:	9f 67       	ori	r25, 0x7F	; 127
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	08 95       	ret

0000134e <__fp_nan>:
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	80 ec       	ldi	r24, 0xC0	; 192
    1352:	08 95       	ret

00001354 <__fp_pscA>:
    1354:	00 24       	eor	r0, r0
    1356:	0a 94       	dec	r0
    1358:	16 16       	cp	r1, r22
    135a:	17 06       	cpc	r1, r23
    135c:	18 06       	cpc	r1, r24
    135e:	09 06       	cpc	r0, r25
    1360:	08 95       	ret

00001362 <__fp_pscB>:
    1362:	00 24       	eor	r0, r0
    1364:	0a 94       	dec	r0
    1366:	12 16       	cp	r1, r18
    1368:	13 06       	cpc	r1, r19
    136a:	14 06       	cpc	r1, r20
    136c:	05 06       	cpc	r0, r21
    136e:	08 95       	ret

00001370 <__fp_round>:
    1370:	09 2e       	mov	r0, r25
    1372:	03 94       	inc	r0
    1374:	00 0c       	add	r0, r0
    1376:	11 f4       	brne	.+4      	; 0x137c <__fp_round+0xc>
    1378:	88 23       	and	r24, r24
    137a:	52 f0       	brmi	.+20     	; 0x1390 <__fp_round+0x20>
    137c:	bb 0f       	add	r27, r27
    137e:	40 f4       	brcc	.+16     	; 0x1390 <__fp_round+0x20>
    1380:	bf 2b       	or	r27, r31
    1382:	11 f4       	brne	.+4      	; 0x1388 <__fp_round+0x18>
    1384:	60 ff       	sbrs	r22, 0
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <__fp_round+0x20>
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	08 95       	ret

00001392 <__fp_split3>:
    1392:	57 fd       	sbrc	r21, 7
    1394:	90 58       	subi	r25, 0x80	; 128
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	59 f0       	breq	.+22     	; 0x13b2 <__fp_splitA+0x10>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	71 f0       	breq	.+28     	; 0x13bc <__fp_splitA+0x1a>
    13a0:	47 95       	ror	r20

000013a2 <__fp_splitA>:
    13a2:	88 0f       	add	r24, r24
    13a4:	97 fb       	bst	r25, 7
    13a6:	99 1f       	adc	r25, r25
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <__fp_splitA+0x20>
    13aa:	9f 3f       	cpi	r25, 0xFF	; 255
    13ac:	79 f0       	breq	.+30     	; 0x13cc <__fp_splitA+0x2a>
    13ae:	87 95       	ror	r24
    13b0:	08 95       	ret
    13b2:	12 16       	cp	r1, r18
    13b4:	13 06       	cpc	r1, r19
    13b6:	14 06       	cpc	r1, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	f2 cf       	rjmp	.-28     	; 0x13a0 <__fp_split3+0xe>
    13bc:	46 95       	lsr	r20
    13be:	f1 df       	rcall	.-30     	; 0x13a2 <__fp_splitA>
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <__fp_splitA+0x30>
    13c2:	16 16       	cp	r1, r22
    13c4:	17 06       	cpc	r1, r23
    13c6:	18 06       	cpc	r1, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	f1 cf       	rjmp	.-30     	; 0x13ae <__fp_splitA+0xc>
    13cc:	86 95       	lsr	r24
    13ce:	71 05       	cpc	r23, r1
    13d0:	61 05       	cpc	r22, r1
    13d2:	08 94       	sec
    13d4:	08 95       	ret

000013d6 <__fp_zero>:
    13d6:	e8 94       	clt

000013d8 <__fp_szero>:
    13d8:	bb 27       	eor	r27, r27
    13da:	66 27       	eor	r22, r22
    13dc:	77 27       	eor	r23, r23
    13de:	cb 01       	movw	r24, r22
    13e0:	97 f9       	bld	r25, 7
    13e2:	08 95       	ret

000013e4 <__gesf2>:
    13e4:	8a df       	rcall	.-236    	; 0x12fa <__fp_cmp>
    13e6:	08 f4       	brcc	.+2      	; 0x13ea <__gesf2+0x6>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	08 95       	ret

000013ec <__mulsf3>:
    13ec:	0b d0       	rcall	.+22     	; 0x1404 <__mulsf3x>
    13ee:	c0 cf       	rjmp	.-128    	; 0x1370 <__fp_round>
    13f0:	b1 df       	rcall	.-158    	; 0x1354 <__fp_pscA>
    13f2:	28 f0       	brcs	.+10     	; 0x13fe <__mulsf3+0x12>
    13f4:	b6 df       	rcall	.-148    	; 0x1362 <__fp_pscB>
    13f6:	18 f0       	brcs	.+6      	; 0x13fe <__mulsf3+0x12>
    13f8:	95 23       	and	r25, r21
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__mulsf3+0x12>
    13fc:	a2 cf       	rjmp	.-188    	; 0x1342 <__fp_inf>
    13fe:	a7 cf       	rjmp	.-178    	; 0x134e <__fp_nan>
    1400:	11 24       	eor	r1, r1
    1402:	ea cf       	rjmp	.-44     	; 0x13d8 <__fp_szero>

00001404 <__mulsf3x>:
    1404:	c6 df       	rcall	.-116    	; 0x1392 <__fp_split3>
    1406:	a0 f3       	brcs	.-24     	; 0x13f0 <__mulsf3+0x4>

00001408 <__mulsf3_pse>:
    1408:	95 9f       	mul	r25, r21
    140a:	d1 f3       	breq	.-12     	; 0x1400 <__mulsf3+0x14>
    140c:	95 0f       	add	r25, r21
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	55 1f       	adc	r21, r21
    1412:	62 9f       	mul	r22, r18
    1414:	f0 01       	movw	r30, r0
    1416:	72 9f       	mul	r23, r18
    1418:	bb 27       	eor	r27, r27
    141a:	f0 0d       	add	r31, r0
    141c:	b1 1d       	adc	r27, r1
    141e:	63 9f       	mul	r22, r19
    1420:	aa 27       	eor	r26, r26
    1422:	f0 0d       	add	r31, r0
    1424:	b1 1d       	adc	r27, r1
    1426:	aa 1f       	adc	r26, r26
    1428:	64 9f       	mul	r22, r20
    142a:	66 27       	eor	r22, r22
    142c:	b0 0d       	add	r27, r0
    142e:	a1 1d       	adc	r26, r1
    1430:	66 1f       	adc	r22, r22
    1432:	82 9f       	mul	r24, r18
    1434:	22 27       	eor	r18, r18
    1436:	b0 0d       	add	r27, r0
    1438:	a1 1d       	adc	r26, r1
    143a:	62 1f       	adc	r22, r18
    143c:	73 9f       	mul	r23, r19
    143e:	b0 0d       	add	r27, r0
    1440:	a1 1d       	adc	r26, r1
    1442:	62 1f       	adc	r22, r18
    1444:	83 9f       	mul	r24, r19
    1446:	a0 0d       	add	r26, r0
    1448:	61 1d       	adc	r22, r1
    144a:	22 1f       	adc	r18, r18
    144c:	74 9f       	mul	r23, r20
    144e:	33 27       	eor	r19, r19
    1450:	a0 0d       	add	r26, r0
    1452:	61 1d       	adc	r22, r1
    1454:	23 1f       	adc	r18, r19
    1456:	84 9f       	mul	r24, r20
    1458:	60 0d       	add	r22, r0
    145a:	21 1d       	adc	r18, r1
    145c:	82 2f       	mov	r24, r18
    145e:	76 2f       	mov	r23, r22
    1460:	6a 2f       	mov	r22, r26
    1462:	11 24       	eor	r1, r1
    1464:	9f 57       	subi	r25, 0x7F	; 127
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	8a f0       	brmi	.+34     	; 0x148c <__mulsf3_pse+0x84>
    146a:	e1 f0       	breq	.+56     	; 0x14a4 <__mulsf3_pse+0x9c>
    146c:	88 23       	and	r24, r24
    146e:	4a f0       	brmi	.+18     	; 0x1482 <__mulsf3_pse+0x7a>
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	bb 1f       	adc	r27, r27
    1476:	66 1f       	adc	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	88 1f       	adc	r24, r24
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	a9 f7       	brne	.-22     	; 0x146c <__mulsf3_pse+0x64>
    1482:	9e 3f       	cpi	r25, 0xFE	; 254
    1484:	51 05       	cpc	r21, r1
    1486:	70 f0       	brcs	.+28     	; 0x14a4 <__mulsf3_pse+0x9c>
    1488:	5c cf       	rjmp	.-328    	; 0x1342 <__fp_inf>
    148a:	a6 cf       	rjmp	.-180    	; 0x13d8 <__fp_szero>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	ec f3       	brlt	.-6      	; 0x148a <__mulsf3_pse+0x82>
    1490:	98 3e       	cpi	r25, 0xE8	; 232
    1492:	dc f3       	brlt	.-10     	; 0x148a <__mulsf3_pse+0x82>
    1494:	86 95       	lsr	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	b7 95       	ror	r27
    149c:	f7 95       	ror	r31
    149e:	e7 95       	ror	r30
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	c1 f7       	brne	.-16     	; 0x1494 <__mulsf3_pse+0x8c>
    14a4:	fe 2b       	or	r31, r30
    14a6:	88 0f       	add	r24, r24
    14a8:	91 1d       	adc	r25, r1
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret

000014b2 <vfprintf>:
    14b2:	a5 e1       	ldi	r26, 0x15	; 21
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ef e5       	ldi	r30, 0x5F	; 95
    14b8:	fa e0       	ldi	r31, 0x0A	; 10
    14ba:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__prologue_saves__>
    14be:	4c 01       	movw	r8, r24
    14c0:	7f 87       	std	Y+15, r23	; 0x0f
    14c2:	6e 87       	std	Y+14, r22	; 0x0e
    14c4:	fc 01       	movw	r30, r24
    14c6:	17 82       	std	Z+7, r1	; 0x07
    14c8:	16 82       	std	Z+6, r1	; 0x06
    14ca:	83 81       	ldd	r24, Z+3	; 0x03
    14cc:	81 fd       	sbrc	r24, 1
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <vfprintf+0x26>
    14d0:	76 c3       	rjmp	.+1772   	; 0x1bbe <vfprintf+0x70c>
    14d2:	4c 85       	ldd	r20, Y+12	; 0x0c
    14d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <vfprintf+0x2e>
    14d8:	1e 01       	movw	r2, r28
    14da:	08 94       	sec
    14dc:	21 1c       	adc	r2, r1
    14de:	31 1c       	adc	r3, r1
    14e0:	f4 01       	movw	r30, r8
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    14e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    14e8:	93 fd       	sbrc	r25, 3
    14ea:	85 91       	lpm	r24, Z+
    14ec:	93 ff       	sbrs	r25, 3
    14ee:	81 91       	ld	r24, Z+
    14f0:	ff 87       	std	Y+15, r31	; 0x0f
    14f2:	ee 87       	std	Y+14, r30	; 0x0e
    14f4:	88 23       	and	r24, r24
    14f6:	09 f4       	brne	.+2      	; 0x14fa <vfprintf+0x48>
    14f8:	5e c3       	rjmp	.+1724   	; 0x1bb6 <vfprintf+0x704>
    14fa:	85 32       	cpi	r24, 0x25	; 37
    14fc:	41 f4       	brne	.+16     	; 0x150e <vfprintf+0x5c>
    14fe:	93 fd       	sbrc	r25, 3
    1500:	85 91       	lpm	r24, Z+
    1502:	93 ff       	sbrs	r25, 3
    1504:	81 91       	ld	r24, Z+
    1506:	ff 87       	std	Y+15, r31	; 0x0f
    1508:	ee 87       	std	Y+14, r30	; 0x0e
    150a:	85 32       	cpi	r24, 0x25	; 37
    150c:	59 f4       	brne	.+22     	; 0x1524 <vfprintf+0x72>
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	b4 01       	movw	r22, r8
    1512:	4c 8b       	std	Y+20, r20	; 0x14
    1514:	5d 8b       	std	Y+21, r21	; 0x15
    1516:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    151a:	4c 89       	ldd	r20, Y+20	; 0x14
    151c:	5d 89       	ldd	r21, Y+21	; 0x15
    151e:	5d 87       	std	Y+13, r21	; 0x0d
    1520:	4c 87       	std	Y+12, r20	; 0x0c
    1522:	d7 cf       	rjmp	.-82     	; 0x14d2 <vfprintf+0x20>
    1524:	ff 24       	eor	r15, r15
    1526:	dd 24       	eor	r13, r13
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	10 32       	cpi	r17, 0x20	; 32
    152c:	b0 f4       	brcc	.+44     	; 0x155a <vfprintf+0xa8>
    152e:	8b 32       	cpi	r24, 0x2B	; 43
    1530:	69 f0       	breq	.+26     	; 0x154c <vfprintf+0x9a>
    1532:	8c 32       	cpi	r24, 0x2C	; 44
    1534:	28 f4       	brcc	.+10     	; 0x1540 <vfprintf+0x8e>
    1536:	80 32       	cpi	r24, 0x20	; 32
    1538:	51 f0       	breq	.+20     	; 0x154e <vfprintf+0x9c>
    153a:	83 32       	cpi	r24, 0x23	; 35
    153c:	71 f4       	brne	.+28     	; 0x155a <vfprintf+0xa8>
    153e:	0b c0       	rjmp	.+22     	; 0x1556 <vfprintf+0xa4>
    1540:	8d 32       	cpi	r24, 0x2D	; 45
    1542:	39 f0       	breq	.+14     	; 0x1552 <vfprintf+0xa0>
    1544:	80 33       	cpi	r24, 0x30	; 48
    1546:	49 f4       	brne	.+18     	; 0x155a <vfprintf+0xa8>
    1548:	11 60       	ori	r17, 0x01	; 1
    154a:	2c c0       	rjmp	.+88     	; 0x15a4 <vfprintf+0xf2>
    154c:	12 60       	ori	r17, 0x02	; 2
    154e:	14 60       	ori	r17, 0x04	; 4
    1550:	29 c0       	rjmp	.+82     	; 0x15a4 <vfprintf+0xf2>
    1552:	18 60       	ori	r17, 0x08	; 8
    1554:	27 c0       	rjmp	.+78     	; 0x15a4 <vfprintf+0xf2>
    1556:	10 61       	ori	r17, 0x10	; 16
    1558:	25 c0       	rjmp	.+74     	; 0x15a4 <vfprintf+0xf2>
    155a:	17 fd       	sbrc	r17, 7
    155c:	2e c0       	rjmp	.+92     	; 0x15ba <vfprintf+0x108>
    155e:	28 2f       	mov	r18, r24
    1560:	20 53       	subi	r18, 0x30	; 48
    1562:	2a 30       	cpi	r18, 0x0A	; 10
    1564:	98 f4       	brcc	.+38     	; 0x158c <vfprintf+0xda>
    1566:	16 ff       	sbrs	r17, 6
    1568:	08 c0       	rjmp	.+16     	; 0x157a <vfprintf+0xc8>
    156a:	8f 2d       	mov	r24, r15
    156c:	88 0f       	add	r24, r24
    156e:	f8 2e       	mov	r15, r24
    1570:	ff 0c       	add	r15, r15
    1572:	ff 0c       	add	r15, r15
    1574:	f8 0e       	add	r15, r24
    1576:	f2 0e       	add	r15, r18
    1578:	15 c0       	rjmp	.+42     	; 0x15a4 <vfprintf+0xf2>
    157a:	8d 2d       	mov	r24, r13
    157c:	88 0f       	add	r24, r24
    157e:	d8 2e       	mov	r13, r24
    1580:	dd 0c       	add	r13, r13
    1582:	dd 0c       	add	r13, r13
    1584:	d8 0e       	add	r13, r24
    1586:	d2 0e       	add	r13, r18
    1588:	10 62       	ori	r17, 0x20	; 32
    158a:	0c c0       	rjmp	.+24     	; 0x15a4 <vfprintf+0xf2>
    158c:	8e 32       	cpi	r24, 0x2E	; 46
    158e:	21 f4       	brne	.+8      	; 0x1598 <vfprintf+0xe6>
    1590:	16 fd       	sbrc	r17, 6
    1592:	11 c3       	rjmp	.+1570   	; 0x1bb6 <vfprintf+0x704>
    1594:	10 64       	ori	r17, 0x40	; 64
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <vfprintf+0xf2>
    1598:	8c 36       	cpi	r24, 0x6C	; 108
    159a:	11 f4       	brne	.+4      	; 0x15a0 <vfprintf+0xee>
    159c:	10 68       	ori	r17, 0x80	; 128
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0xf2>
    15a0:	88 36       	cpi	r24, 0x68	; 104
    15a2:	59 f4       	brne	.+22     	; 0x15ba <vfprintf+0x108>
    15a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    15a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    15a8:	93 fd       	sbrc	r25, 3
    15aa:	85 91       	lpm	r24, Z+
    15ac:	93 ff       	sbrs	r25, 3
    15ae:	81 91       	ld	r24, Z+
    15b0:	ff 87       	std	Y+15, r31	; 0x0f
    15b2:	ee 87       	std	Y+14, r30	; 0x0e
    15b4:	88 23       	and	r24, r24
    15b6:	09 f0       	breq	.+2      	; 0x15ba <vfprintf+0x108>
    15b8:	b8 cf       	rjmp	.-144    	; 0x152a <vfprintf+0x78>
    15ba:	98 2f       	mov	r25, r24
    15bc:	95 54       	subi	r25, 0x45	; 69
    15be:	93 30       	cpi	r25, 0x03	; 3
    15c0:	18 f4       	brcc	.+6      	; 0x15c8 <vfprintf+0x116>
    15c2:	10 61       	ori	r17, 0x10	; 16
    15c4:	80 5e       	subi	r24, 0xE0	; 224
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x122>
    15c8:	98 2f       	mov	r25, r24
    15ca:	95 56       	subi	r25, 0x65	; 101
    15cc:	93 30       	cpi	r25, 0x03	; 3
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <vfprintf+0x120>
    15d0:	a2 c1       	rjmp	.+836    	; 0x1916 <vfprintf+0x464>
    15d2:	1f 7e       	andi	r17, 0xEF	; 239
    15d4:	16 fd       	sbrc	r17, 6
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x12a>
    15d8:	e6 e0       	ldi	r30, 0x06	; 6
    15da:	fe 2e       	mov	r15, r30
    15dc:	1f 73       	andi	r17, 0x3F	; 63
    15de:	85 36       	cpi	r24, 0x65	; 101
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <vfprintf+0x134>
    15e2:	10 64       	ori	r17, 0x40	; 64
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <vfprintf+0x140>
    15e6:	86 36       	cpi	r24, 0x66	; 102
    15e8:	11 f4       	brne	.+4      	; 0x15ee <vfprintf+0x13c>
    15ea:	10 68       	ori	r17, 0x80	; 128
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x140>
    15ee:	f1 10       	cpse	r15, r1
    15f0:	fa 94       	dec	r15
    15f2:	17 ff       	sbrs	r17, 7
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <vfprintf+0x152>
    15f6:	fb e3       	ldi	r31, 0x3B	; 59
    15f8:	ff 15       	cp	r31, r15
    15fa:	48 f0       	brcs	.+18     	; 0x160e <vfprintf+0x15c>
    15fc:	ef 2c       	mov	r14, r15
    15fe:	e3 94       	inc	r14
    1600:	27 e0       	ldi	r18, 0x07	; 7
    1602:	0d c0       	rjmp	.+26     	; 0x161e <vfprintf+0x16c>
    1604:	27 e0       	ldi	r18, 0x07	; 7
    1606:	2f 15       	cp	r18, r15
    1608:	30 f0       	brcs	.+12     	; 0x1616 <vfprintf+0x164>
    160a:	2f 2d       	mov	r18, r15
    160c:	07 c0       	rjmp	.+14     	; 0x161c <vfprintf+0x16a>
    160e:	27 e0       	ldi	r18, 0x07	; 7
    1610:	7c e3       	ldi	r23, 0x3C	; 60
    1612:	e7 2e       	mov	r14, r23
    1614:	04 c0       	rjmp	.+8      	; 0x161e <vfprintf+0x16c>
    1616:	27 e0       	ldi	r18, 0x07	; 7
    1618:	67 e0       	ldi	r22, 0x07	; 7
    161a:	f6 2e       	mov	r15, r22
    161c:	ee 24       	eor	r14, r14
    161e:	ca 01       	movw	r24, r20
    1620:	04 96       	adiw	r24, 0x04	; 4
    1622:	9d 87       	std	Y+13, r25	; 0x0d
    1624:	8c 87       	std	Y+12, r24	; 0x0c
    1626:	fa 01       	movw	r30, r20
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	a1 01       	movw	r20, r2
    1632:	0e 2d       	mov	r16, r14
    1634:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__ftoa_engine>
    1638:	5c 01       	movw	r10, r24
    163a:	c9 80       	ldd	r12, Y+1	; 0x01
    163c:	2c 2d       	mov	r18, r12
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	39 8b       	std	Y+17, r19	; 0x11
    1642:	28 8b       	std	Y+16, r18	; 0x10
    1644:	c0 fe       	sbrs	r12, 0
    1646:	03 c0       	rjmp	.+6      	; 0x164e <vfprintf+0x19c>
    1648:	38 89       	ldd	r19, Y+16	; 0x10
    164a:	33 ff       	sbrs	r19, 3
    164c:	06 c0       	rjmp	.+12     	; 0x165a <vfprintf+0x1a8>
    164e:	11 fd       	sbrc	r17, 1
    1650:	06 c0       	rjmp	.+12     	; 0x165e <vfprintf+0x1ac>
    1652:	12 ff       	sbrs	r17, 2
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x1b0>
    1656:	00 e2       	ldi	r16, 0x20	; 32
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <vfprintf+0x1b2>
    165a:	0d e2       	ldi	r16, 0x2D	; 45
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <vfprintf+0x1b2>
    165e:	0b e2       	ldi	r16, 0x2B	; 43
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <vfprintf+0x1b2>
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	88 89       	ldd	r24, Y+16	; 0x10
    1666:	99 89       	ldd	r25, Y+17	; 0x11
    1668:	8c 70       	andi	r24, 0x0C	; 12
    166a:	90 70       	andi	r25, 0x00	; 0
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	09 f4       	brne	.+2      	; 0x1672 <vfprintf+0x1c0>
    1670:	3c c0       	rjmp	.+120    	; 0x16ea <vfprintf+0x238>
    1672:	00 23       	and	r16, r16
    1674:	11 f0       	breq	.+4      	; 0x167a <vfprintf+0x1c8>
    1676:	84 e0       	ldi	r24, 0x04	; 4
    1678:	01 c0       	rjmp	.+2      	; 0x167c <vfprintf+0x1ca>
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	8d 15       	cp	r24, r13
    167e:	58 f4       	brcc	.+22     	; 0x1696 <vfprintf+0x1e4>
    1680:	d8 1a       	sub	r13, r24
    1682:	13 fd       	sbrc	r17, 3
    1684:	09 c0       	rjmp	.+18     	; 0x1698 <vfprintf+0x1e6>
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	b4 01       	movw	r22, r8
    168c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1690:	da 94       	dec	r13
    1692:	c9 f7       	brne	.-14     	; 0x1686 <vfprintf+0x1d4>
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <vfprintf+0x1e6>
    1696:	dd 24       	eor	r13, r13
    1698:	00 23       	and	r16, r16
    169a:	29 f0       	breq	.+10     	; 0x16a6 <vfprintf+0x1f4>
    169c:	80 2f       	mov	r24, r16
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	b4 01       	movw	r22, r8
    16a2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    16a6:	88 89       	ldd	r24, Y+16	; 0x10
    16a8:	83 fd       	sbrc	r24, 3
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <vfprintf+0x204>
    16ac:	3c e6       	ldi	r19, 0x6C	; 108
    16ae:	e3 2e       	mov	r14, r19
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	f3 2e       	mov	r15, r19
    16b4:	11 c0       	rjmp	.+34     	; 0x16d8 <vfprintf+0x226>
    16b6:	28 e6       	ldi	r18, 0x68	; 104
    16b8:	e2 2e       	mov	r14, r18
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	f2 2e       	mov	r15, r18
    16be:	0c c0       	rjmp	.+24     	; 0x16d8 <vfprintf+0x226>
    16c0:	01 15       	cp	r16, r1
    16c2:	11 05       	cpc	r17, r1
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <vfprintf+0x216>
    16c6:	80 52       	subi	r24, 0x20	; 32
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	b4 01       	movw	r22, r8
    16cc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    16d0:	08 94       	sec
    16d2:	e1 1c       	adc	r14, r1
    16d4:	f1 1c       	adc	r15, r1
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <vfprintf+0x22e>
    16d8:	01 2f       	mov	r16, r17
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	00 71       	andi	r16, 0x10	; 16
    16de:	10 70       	andi	r17, 0x00	; 0
    16e0:	f7 01       	movw	r30, r14
    16e2:	84 91       	lpm	r24, Z
    16e4:	88 23       	and	r24, r24
    16e6:	61 f7       	brne	.-40     	; 0x16c0 <vfprintf+0x20e>
    16e8:	63 c2       	rjmp	.+1222   	; 0x1bb0 <vfprintf+0x6fe>
    16ea:	17 ff       	sbrs	r17, 7
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <vfprintf+0x258>
    16ee:	ea 0c       	add	r14, r10
    16f0:	f8 89       	ldd	r31, Y+16	; 0x10
    16f2:	f4 ff       	sbrs	r31, 4
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <vfprintf+0x24c>
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	81 33       	cpi	r24, 0x31	; 49
    16fa:	09 f4       	brne	.+2      	; 0x16fe <vfprintf+0x24c>
    16fc:	ea 94       	dec	r14
    16fe:	1e 14       	cp	r1, r14
    1700:	4c f5       	brge	.+82     	; 0x1754 <vfprintf+0x2a2>
    1702:	28 e0       	ldi	r18, 0x08	; 8
    1704:	2e 15       	cp	r18, r14
    1706:	48 f1       	brcs	.+82     	; 0x175a <vfprintf+0x2a8>
    1708:	2c c0       	rjmp	.+88     	; 0x1762 <vfprintf+0x2b0>
    170a:	16 fd       	sbrc	r17, 6
    170c:	2a c0       	rjmp	.+84     	; 0x1762 <vfprintf+0x2b0>
    170e:	8f 2d       	mov	r24, r15
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	8a 15       	cp	r24, r10
    1714:	9b 05       	cpc	r25, r11
    1716:	44 f0       	brlt	.+16     	; 0x1728 <vfprintf+0x276>
    1718:	3c ef       	ldi	r19, 0xFC	; 252
    171a:	a3 16       	cp	r10, r19
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	b3 06       	cpc	r11, r19
    1720:	1c f0       	brlt	.+6      	; 0x1728 <vfprintf+0x276>
    1722:	10 68       	ori	r17, 0x80	; 128
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <vfprintf+0x276>
    1726:	fa 94       	dec	r15
    1728:	ff 20       	and	r15, r15
    172a:	49 f0       	breq	.+18     	; 0x173e <vfprintf+0x28c>
    172c:	e2 e0       	ldi	r30, 0x02	; 2
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	ec 0f       	add	r30, r28
    1732:	fd 1f       	adc	r31, r29
    1734:	ef 0d       	add	r30, r15
    1736:	f1 1d       	adc	r31, r1
    1738:	80 81       	ld	r24, Z
    173a:	80 33       	cpi	r24, 0x30	; 48
    173c:	a1 f3       	breq	.-24     	; 0x1726 <vfprintf+0x274>
    173e:	17 ff       	sbrs	r17, 7
    1740:	10 c0       	rjmp	.+32     	; 0x1762 <vfprintf+0x2b0>
    1742:	ef 2c       	mov	r14, r15
    1744:	e3 94       	inc	r14
    1746:	8f 2d       	mov	r24, r15
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a8 16       	cp	r10, r24
    174c:	b9 06       	cpc	r11, r25
    174e:	44 f4       	brge	.+16     	; 0x1760 <vfprintf+0x2ae>
    1750:	fa 18       	sub	r15, r10
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <vfprintf+0x2b0>
    1754:	ee 24       	eor	r14, r14
    1756:	e3 94       	inc	r14
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <vfprintf+0x2b0>
    175a:	98 e0       	ldi	r25, 0x08	; 8
    175c:	e9 2e       	mov	r14, r25
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <vfprintf+0x2b0>
    1760:	ff 24       	eor	r15, r15
    1762:	17 ff       	sbrs	r17, 7
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <vfprintf+0x2c2>
    1766:	1a 14       	cp	r1, r10
    1768:	1b 04       	cpc	r1, r11
    176a:	3c f4       	brge	.+14     	; 0x177a <vfprintf+0x2c8>
    176c:	95 01       	movw	r18, r10
    176e:	2f 5f       	subi	r18, 0xFF	; 255
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x2cc>
    1774:	25 e0       	ldi	r18, 0x05	; 5
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x2cc>
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	00 23       	and	r16, r16
    1780:	11 f0       	breq	.+4      	; 0x1786 <vfprintf+0x2d4>
    1782:	2f 5f       	subi	r18, 0xFF	; 255
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	ff 20       	and	r15, r15
    1788:	29 f0       	breq	.+10     	; 0x1794 <vfprintf+0x2e2>
    178a:	8f 2d       	mov	r24, r15
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	28 0f       	add	r18, r24
    1792:	39 1f       	adc	r19, r25
    1794:	8d 2d       	mov	r24, r13
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	28 17       	cp	r18, r24
    179a:	39 07       	cpc	r19, r25
    179c:	14 f4       	brge	.+4      	; 0x17a2 <vfprintf+0x2f0>
    179e:	d2 1a       	sub	r13, r18
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <vfprintf+0x2f2>
    17a2:	dd 24       	eor	r13, r13
    17a4:	61 2e       	mov	r6, r17
    17a6:	77 24       	eor	r7, r7
    17a8:	c3 01       	movw	r24, r6
    17aa:	89 70       	andi	r24, 0x09	; 9
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	49 f4       	brne	.+18     	; 0x17c4 <vfprintf+0x312>
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <vfprintf+0x30e>
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	b4 01       	movw	r22, r8
    17ba:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    17be:	da 94       	dec	r13
    17c0:	dd 20       	and	r13, r13
    17c2:	c1 f7       	brne	.-16     	; 0x17b4 <vfprintf+0x302>
    17c4:	00 23       	and	r16, r16
    17c6:	29 f0       	breq	.+10     	; 0x17d2 <vfprintf+0x320>
    17c8:	80 2f       	mov	r24, r16
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	b4 01       	movw	r22, r8
    17ce:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    17d2:	63 fc       	sbrc	r6, 3
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <vfprintf+0x336>
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <vfprintf+0x332>
    17d8:	80 e3       	ldi	r24, 0x30	; 48
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	b4 01       	movw	r22, r8
    17de:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    17e2:	da 94       	dec	r13
    17e4:	dd 20       	and	r13, r13
    17e6:	c1 f7       	brne	.-16     	; 0x17d8 <vfprintf+0x326>
    17e8:	17 ff       	sbrs	r17, 7
    17ea:	48 c0       	rjmp	.+144    	; 0x187c <vfprintf+0x3ca>
    17ec:	85 01       	movw	r16, r10
    17ee:	b7 fe       	sbrs	r11, 7
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <vfprintf+0x344>
    17f2:	00 e0       	ldi	r16, 0x00	; 0
    17f4:	10 e0       	ldi	r17, 0x00	; 0
    17f6:	66 24       	eor	r6, r6
    17f8:	77 24       	eor	r7, r7
    17fa:	95 01       	movw	r18, r10
    17fc:	2e 19       	sub	r18, r14
    17fe:	31 09       	sbc	r19, r1
    1800:	3b 8b       	std	Y+19, r19	; 0x13
    1802:	2a 8b       	std	Y+18, r18	; 0x12
    1804:	25 01       	movw	r4, r10
    1806:	40 1a       	sub	r4, r16
    1808:	51 0a       	sbc	r5, r17
    180a:	42 0c       	add	r4, r2
    180c:	53 1c       	adc	r5, r3
    180e:	6f 2d       	mov	r22, r15
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	ee 24       	eor	r14, r14
    1814:	ff 24       	eor	r15, r15
    1816:	e6 1a       	sub	r14, r22
    1818:	f7 0a       	sbc	r15, r23
    181a:	3f ef       	ldi	r19, 0xFF	; 255
    181c:	0f 3f       	cpi	r16, 0xFF	; 255
    181e:	13 07       	cpc	r17, r19
    1820:	29 f4       	brne	.+10     	; 0x182c <vfprintf+0x37a>
    1822:	8e e2       	ldi	r24, 0x2E	; 46
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	b4 01       	movw	r22, r8
    1828:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    182c:	a0 16       	cp	r10, r16
    182e:	b1 06       	cpc	r11, r17
    1830:	54 f0       	brlt	.+20     	; 0x1846 <vfprintf+0x394>
    1832:	2a 89       	ldd	r18, Y+18	; 0x12
    1834:	3b 89       	ldd	r19, Y+19	; 0x13
    1836:	20 17       	cp	r18, r16
    1838:	31 07       	cpc	r19, r17
    183a:	2c f4       	brge	.+10     	; 0x1846 <vfprintf+0x394>
    183c:	f2 01       	movw	r30, r4
    183e:	e6 0d       	add	r30, r6
    1840:	f7 1d       	adc	r31, r7
    1842:	81 81       	ldd	r24, Z+1	; 0x01
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <vfprintf+0x396>
    1846:	80 e3       	ldi	r24, 0x30	; 48
    1848:	01 50       	subi	r16, 0x01	; 1
    184a:	10 40       	sbci	r17, 0x00	; 0
    184c:	08 94       	sec
    184e:	61 1c       	adc	r6, r1
    1850:	71 1c       	adc	r7, r1
    1852:	0e 15       	cp	r16, r14
    1854:	1f 05       	cpc	r17, r15
    1856:	2c f0       	brlt	.+10     	; 0x1862 <vfprintf+0x3b0>
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	b4 01       	movw	r22, r8
    185c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1860:	dc cf       	rjmp	.-72     	; 0x181a <vfprintf+0x368>
    1862:	0a 15       	cp	r16, r10
    1864:	1b 05       	cpc	r17, r11
    1866:	41 f4       	brne	.+16     	; 0x1878 <vfprintf+0x3c6>
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	96 33       	cpi	r25, 0x36	; 54
    186c:	20 f4       	brcc	.+8      	; 0x1876 <vfprintf+0x3c4>
    186e:	95 33       	cpi	r25, 0x35	; 53
    1870:	19 f4       	brne	.+6      	; 0x1878 <vfprintf+0x3c6>
    1872:	38 89       	ldd	r19, Y+16	; 0x10
    1874:	34 ff       	sbrs	r19, 4
    1876:	81 e3       	ldi	r24, 0x31	; 49
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	49 c0       	rjmp	.+146    	; 0x190e <vfprintf+0x45c>
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	81 33       	cpi	r24, 0x31	; 49
    1880:	11 f0       	breq	.+4      	; 0x1886 <vfprintf+0x3d4>
    1882:	9f ee       	ldi	r25, 0xEF	; 239
    1884:	c9 22       	and	r12, r25
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	b4 01       	movw	r22, r8
    188a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    188e:	ff 20       	and	r15, r15
    1890:	89 f0       	breq	.+34     	; 0x18b4 <vfprintf+0x402>
    1892:	8e e2       	ldi	r24, 0x2E	; 46
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	b4 01       	movw	r22, r8
    1898:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    189c:	12 e0       	ldi	r17, 0x02	; 2
    189e:	f1 01       	movw	r30, r2
    18a0:	e1 0f       	add	r30, r17
    18a2:	f1 1d       	adc	r31, r1
    18a4:	1f 5f       	subi	r17, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	b4 01       	movw	r22, r8
    18ac:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    18b0:	fa 94       	dec	r15
    18b2:	a9 f7       	brne	.-22     	; 0x189e <vfprintf+0x3ec>
    18b4:	64 fe       	sbrs	r6, 4
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <vfprintf+0x40c>
    18b8:	85 e4       	ldi	r24, 0x45	; 69
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <vfprintf+0x410>
    18be:	85 e6       	ldi	r24, 0x65	; 101
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b4 01       	movw	r22, r8
    18c4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    18c8:	b7 fc       	sbrc	r11, 7
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <vfprintf+0x424>
    18cc:	a1 14       	cp	r10, r1
    18ce:	b1 04       	cpc	r11, r1
    18d0:	41 f4       	brne	.+16     	; 0x18e2 <vfprintf+0x430>
    18d2:	c4 fe       	sbrs	r12, 4
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <vfprintf+0x430>
    18d6:	b0 94       	com	r11
    18d8:	a1 94       	neg	r10
    18da:	b1 08       	sbc	r11, r1
    18dc:	b3 94       	inc	r11
    18de:	8d e2       	ldi	r24, 0x2D	; 45
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <vfprintf+0x432>
    18e2:	8b e2       	ldi	r24, 0x2B	; 43
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b4 01       	movw	r22, r8
    18e8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    18ec:	80 e3       	ldi	r24, 0x30	; 48
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <vfprintf+0x448>
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	e6 ef       	ldi	r30, 0xF6	; 246
    18f4:	ff ef       	ldi	r31, 0xFF	; 255
    18f6:	ae 0e       	add	r10, r30
    18f8:	bf 1e       	adc	r11, r31
    18fa:	fa e0       	ldi	r31, 0x0A	; 10
    18fc:	af 16       	cp	r10, r31
    18fe:	b1 04       	cpc	r11, r1
    1900:	bc f7       	brge	.-18     	; 0x18f0 <vfprintf+0x43e>
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b4 01       	movw	r22, r8
    1906:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    190a:	c5 01       	movw	r24, r10
    190c:	c0 96       	adiw	r24, 0x30	; 48
    190e:	b4 01       	movw	r22, r8
    1910:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1914:	4d c1       	rjmp	.+666    	; 0x1bb0 <vfprintf+0x6fe>
    1916:	83 36       	cpi	r24, 0x63	; 99
    1918:	31 f0       	breq	.+12     	; 0x1926 <vfprintf+0x474>
    191a:	83 37       	cpi	r24, 0x73	; 115
    191c:	89 f0       	breq	.+34     	; 0x1940 <vfprintf+0x48e>
    191e:	83 35       	cpi	r24, 0x53	; 83
    1920:	09 f0       	breq	.+2      	; 0x1924 <vfprintf+0x472>
    1922:	59 c0       	rjmp	.+178    	; 0x19d6 <vfprintf+0x524>
    1924:	22 c0       	rjmp	.+68     	; 0x196a <vfprintf+0x4b8>
    1926:	9a 01       	movw	r18, r20
    1928:	2e 5f       	subi	r18, 0xFE	; 254
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	3d 87       	std	Y+13, r19	; 0x0d
    192e:	2c 87       	std	Y+12, r18	; 0x0c
    1930:	fa 01       	movw	r30, r20
    1932:	80 81       	ld	r24, Z
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	e8 2e       	mov	r14, r24
    193a:	f1 2c       	mov	r15, r1
    193c:	51 01       	movw	r10, r2
    193e:	13 c0       	rjmp	.+38     	; 0x1966 <vfprintf+0x4b4>
    1940:	9a 01       	movw	r18, r20
    1942:	2e 5f       	subi	r18, 0xFE	; 254
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	3d 87       	std	Y+13, r19	; 0x0d
    1948:	2c 87       	std	Y+12, r18	; 0x0c
    194a:	fa 01       	movw	r30, r20
    194c:	a0 80       	ld	r10, Z
    194e:	b1 80       	ldd	r11, Z+1	; 0x01
    1950:	16 ff       	sbrs	r17, 6
    1952:	03 c0       	rjmp	.+6      	; 0x195a <vfprintf+0x4a8>
    1954:	6f 2d       	mov	r22, r15
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	02 c0       	rjmp	.+4      	; 0x195e <vfprintf+0x4ac>
    195a:	6f ef       	ldi	r22, 0xFF	; 255
    195c:	7f ef       	ldi	r23, 0xFF	; 255
    195e:	c5 01       	movw	r24, r10
    1960:	0e 94 d7 10 	call	0x21ae	; 0x21ae <strnlen>
    1964:	7c 01       	movw	r14, r24
    1966:	1f 77       	andi	r17, 0x7F	; 127
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <vfprintf+0x4e0>
    196a:	9a 01       	movw	r18, r20
    196c:	2e 5f       	subi	r18, 0xFE	; 254
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	3d 87       	std	Y+13, r19	; 0x0d
    1972:	2c 87       	std	Y+12, r18	; 0x0c
    1974:	fa 01       	movw	r30, r20
    1976:	a0 80       	ld	r10, Z
    1978:	b1 80       	ldd	r11, Z+1	; 0x01
    197a:	16 ff       	sbrs	r17, 6
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <vfprintf+0x4d2>
    197e:	6f 2d       	mov	r22, r15
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <vfprintf+0x4d6>
    1984:	6f ef       	ldi	r22, 0xFF	; 255
    1986:	7f ef       	ldi	r23, 0xFF	; 255
    1988:	c5 01       	movw	r24, r10
    198a:	0e 94 aa 10 	call	0x2154	; 0x2154 <strnlen_P>
    198e:	7c 01       	movw	r14, r24
    1990:	10 68       	ori	r17, 0x80	; 128
    1992:	13 fd       	sbrc	r17, 3
    1994:	1c c0       	rjmp	.+56     	; 0x19ce <vfprintf+0x51c>
    1996:	06 c0       	rjmp	.+12     	; 0x19a4 <vfprintf+0x4f2>
    1998:	80 e2       	ldi	r24, 0x20	; 32
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	b4 01       	movw	r22, r8
    199e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    19a2:	da 94       	dec	r13
    19a4:	8d 2d       	mov	r24, r13
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	e8 16       	cp	r14, r24
    19aa:	f9 06       	cpc	r15, r25
    19ac:	a8 f3       	brcs	.-22     	; 0x1998 <vfprintf+0x4e6>
    19ae:	0f c0       	rjmp	.+30     	; 0x19ce <vfprintf+0x51c>
    19b0:	f5 01       	movw	r30, r10
    19b2:	17 fd       	sbrc	r17, 7
    19b4:	85 91       	lpm	r24, Z+
    19b6:	17 ff       	sbrs	r17, 7
    19b8:	81 91       	ld	r24, Z+
    19ba:	5f 01       	movw	r10, r30
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	b4 01       	movw	r22, r8
    19c0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    19c4:	d1 10       	cpse	r13, r1
    19c6:	da 94       	dec	r13
    19c8:	08 94       	sec
    19ca:	e1 08       	sbc	r14, r1
    19cc:	f1 08       	sbc	r15, r1
    19ce:	e1 14       	cp	r14, r1
    19d0:	f1 04       	cpc	r15, r1
    19d2:	71 f7       	brne	.-36     	; 0x19b0 <vfprintf+0x4fe>
    19d4:	ed c0       	rjmp	.+474    	; 0x1bb0 <vfprintf+0x6fe>
    19d6:	84 36       	cpi	r24, 0x64	; 100
    19d8:	11 f0       	breq	.+4      	; 0x19de <vfprintf+0x52c>
    19da:	89 36       	cpi	r24, 0x69	; 105
    19dc:	71 f5       	brne	.+92     	; 0x1a3a <vfprintf+0x588>
    19de:	9a 01       	movw	r18, r20
    19e0:	17 ff       	sbrs	r17, 7
    19e2:	0a c0       	rjmp	.+20     	; 0x19f8 <vfprintf+0x546>
    19e4:	2c 5f       	subi	r18, 0xFC	; 252
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	3d 87       	std	Y+13, r19	; 0x0d
    19ea:	2c 87       	std	Y+12, r18	; 0x0c
    19ec:	fa 01       	movw	r30, r20
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	a2 81       	ldd	r26, Z+2	; 0x02
    19f4:	b3 81       	ldd	r27, Z+3	; 0x03
    19f6:	0b c0       	rjmp	.+22     	; 0x1a0e <vfprintf+0x55c>
    19f8:	2e 5f       	subi	r18, 0xFE	; 254
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	3d 87       	std	Y+13, r19	; 0x0d
    19fe:	2c 87       	std	Y+12, r18	; 0x0c
    1a00:	fa 01       	movw	r30, r20
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	aa 27       	eor	r26, r26
    1a08:	97 fd       	sbrc	r25, 7
    1a0a:	a0 95       	com	r26
    1a0c:	ba 2f       	mov	r27, r26
    1a0e:	01 2f       	mov	r16, r17
    1a10:	0f 76       	andi	r16, 0x6F	; 111
    1a12:	b7 ff       	sbrs	r27, 7
    1a14:	08 c0       	rjmp	.+16     	; 0x1a26 <vfprintf+0x574>
    1a16:	b0 95       	com	r27
    1a18:	a0 95       	com	r26
    1a1a:	90 95       	com	r25
    1a1c:	81 95       	neg	r24
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	af 4f       	sbci	r26, 0xFF	; 255
    1a22:	bf 4f       	sbci	r27, 0xFF	; 255
    1a24:	00 68       	ori	r16, 0x80	; 128
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	a1 01       	movw	r20, r2
    1a2c:	2a e0       	ldi	r18, 0x0A	; 10
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__ultoa_invert>
    1a34:	e8 2e       	mov	r14, r24
    1a36:	e2 18       	sub	r14, r2
    1a38:	41 c0       	rjmp	.+130    	; 0x1abc <vfprintf+0x60a>
    1a3a:	85 37       	cpi	r24, 0x75	; 117
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <vfprintf+0x594>
    1a3e:	1f 7e       	andi	r17, 0xEF	; 239
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	20 c0       	rjmp	.+64     	; 0x1a86 <vfprintf+0x5d4>
    1a46:	19 7f       	andi	r17, 0xF9	; 249
    1a48:	8f 36       	cpi	r24, 0x6F	; 111
    1a4a:	a9 f0       	breq	.+42     	; 0x1a76 <vfprintf+0x5c4>
    1a4c:	80 37       	cpi	r24, 0x70	; 112
    1a4e:	20 f4       	brcc	.+8      	; 0x1a58 <vfprintf+0x5a6>
    1a50:	88 35       	cpi	r24, 0x58	; 88
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <vfprintf+0x5a4>
    1a54:	b0 c0       	rjmp	.+352    	; 0x1bb6 <vfprintf+0x704>
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <vfprintf+0x5bc>
    1a58:	80 37       	cpi	r24, 0x70	; 112
    1a5a:	21 f0       	breq	.+8      	; 0x1a64 <vfprintf+0x5b2>
    1a5c:	88 37       	cpi	r24, 0x78	; 120
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <vfprintf+0x5b0>
    1a60:	aa c0       	rjmp	.+340    	; 0x1bb6 <vfprintf+0x704>
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <vfprintf+0x5b4>
    1a64:	10 61       	ori	r17, 0x10	; 16
    1a66:	14 ff       	sbrs	r17, 4
    1a68:	09 c0       	rjmp	.+18     	; 0x1a7c <vfprintf+0x5ca>
    1a6a:	14 60       	ori	r17, 0x04	; 4
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <vfprintf+0x5ca>
    1a6e:	14 ff       	sbrs	r17, 4
    1a70:	08 c0       	rjmp	.+16     	; 0x1a82 <vfprintf+0x5d0>
    1a72:	16 60       	ori	r17, 0x06	; 6
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <vfprintf+0x5d0>
    1a76:	28 e0       	ldi	r18, 0x08	; 8
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <vfprintf+0x5d4>
    1a7c:	20 e1       	ldi	r18, 0x10	; 16
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <vfprintf+0x5d4>
    1a82:	20 e1       	ldi	r18, 0x10	; 16
    1a84:	32 e0       	ldi	r19, 0x02	; 2
    1a86:	ca 01       	movw	r24, r20
    1a88:	17 ff       	sbrs	r17, 7
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <vfprintf+0x5ec>
    1a8c:	04 96       	adiw	r24, 0x04	; 4
    1a8e:	9d 87       	std	Y+13, r25	; 0x0d
    1a90:	8c 87       	std	Y+12, r24	; 0x0c
    1a92:	fa 01       	movw	r30, r20
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	08 c0       	rjmp	.+16     	; 0x1aae <vfprintf+0x5fc>
    1a9e:	02 96       	adiw	r24, 0x02	; 2
    1aa0:	9d 87       	std	Y+13, r25	; 0x0d
    1aa2:	8c 87       	std	Y+12, r24	; 0x0c
    1aa4:	fa 01       	movw	r30, r20
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a1 01       	movw	r20, r2
    1ab0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__ultoa_invert>
    1ab4:	e8 2e       	mov	r14, r24
    1ab6:	e2 18       	sub	r14, r2
    1ab8:	01 2f       	mov	r16, r17
    1aba:	0f 77       	andi	r16, 0x7F	; 127
    1abc:	06 ff       	sbrs	r16, 6
    1abe:	09 c0       	rjmp	.+18     	; 0x1ad2 <vfprintf+0x620>
    1ac0:	0e 7f       	andi	r16, 0xFE	; 254
    1ac2:	ef 14       	cp	r14, r15
    1ac4:	30 f4       	brcc	.+12     	; 0x1ad2 <vfprintf+0x620>
    1ac6:	04 ff       	sbrs	r16, 4
    1ac8:	06 c0       	rjmp	.+12     	; 0x1ad6 <vfprintf+0x624>
    1aca:	02 fd       	sbrc	r16, 2
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <vfprintf+0x624>
    1ace:	0f 7e       	andi	r16, 0xEF	; 239
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <vfprintf+0x624>
    1ad2:	1e 2d       	mov	r17, r14
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <vfprintf+0x626>
    1ad6:	1f 2d       	mov	r17, r15
    1ad8:	80 2f       	mov	r24, r16
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	04 ff       	sbrs	r16, 4
    1ade:	0c c0       	rjmp	.+24     	; 0x1af8 <vfprintf+0x646>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ee 0d       	add	r30, r14
    1ae4:	f1 1d       	adc	r31, r1
    1ae6:	20 81       	ld	r18, Z
    1ae8:	20 33       	cpi	r18, 0x30	; 48
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <vfprintf+0x63e>
    1aec:	09 7e       	andi	r16, 0xE9	; 233
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <vfprintf+0x650>
    1af0:	02 ff       	sbrs	r16, 2
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <vfprintf+0x64e>
    1af4:	1e 5f       	subi	r17, 0xFE	; 254
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <vfprintf+0x650>
    1af8:	86 78       	andi	r24, 0x86	; 134
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <vfprintf+0x650>
    1b00:	1f 5f       	subi	r17, 0xFF	; 255
    1b02:	a0 2e       	mov	r10, r16
    1b04:	bb 24       	eor	r11, r11
    1b06:	03 fd       	sbrc	r16, 3
    1b08:	12 c0       	rjmp	.+36     	; 0x1b2e <vfprintf+0x67c>
    1b0a:	00 ff       	sbrs	r16, 0
    1b0c:	0d c0       	rjmp	.+26     	; 0x1b28 <vfprintf+0x676>
    1b0e:	fe 2c       	mov	r15, r14
    1b10:	1d 15       	cp	r17, r13
    1b12:	50 f4       	brcc	.+20     	; 0x1b28 <vfprintf+0x676>
    1b14:	fd 0c       	add	r15, r13
    1b16:	f1 1a       	sub	r15, r17
    1b18:	1d 2d       	mov	r17, r13
    1b1a:	06 c0       	rjmp	.+12     	; 0x1b28 <vfprintf+0x676>
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b4 01       	movw	r22, r8
    1b22:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1b26:	1f 5f       	subi	r17, 0xFF	; 255
    1b28:	1d 15       	cp	r17, r13
    1b2a:	c0 f3       	brcs	.-16     	; 0x1b1c <vfprintf+0x66a>
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <vfprintf+0x684>
    1b2e:	1d 15       	cp	r17, r13
    1b30:	10 f4       	brcc	.+4      	; 0x1b36 <vfprintf+0x684>
    1b32:	d1 1a       	sub	r13, r17
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <vfprintf+0x686>
    1b36:	dd 24       	eor	r13, r13
    1b38:	a4 fe       	sbrs	r10, 4
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <vfprintf+0x6a8>
    1b3c:	80 e3       	ldi	r24, 0x30	; 48
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	b4 01       	movw	r22, r8
    1b42:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1b46:	a2 fe       	sbrs	r10, 2
    1b48:	1f c0       	rjmp	.+62     	; 0x1b88 <vfprintf+0x6d6>
    1b4a:	a1 fe       	sbrs	r10, 1
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <vfprintf+0x6a2>
    1b4e:	88 e5       	ldi	r24, 0x58	; 88
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	10 c0       	rjmp	.+32     	; 0x1b74 <vfprintf+0x6c2>
    1b54:	88 e7       	ldi	r24, 0x78	; 120
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0d c0       	rjmp	.+26     	; 0x1b74 <vfprintf+0x6c2>
    1b5a:	c5 01       	movw	r24, r10
    1b5c:	86 78       	andi	r24, 0x86	; 134
    1b5e:	90 70       	andi	r25, 0x00	; 0
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	91 f0       	breq	.+36     	; 0x1b88 <vfprintf+0x6d6>
    1b64:	a1 fc       	sbrc	r10, 1
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <vfprintf+0x6ba>
    1b68:	80 e2       	ldi	r24, 0x20	; 32
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <vfprintf+0x6bc>
    1b6c:	8b e2       	ldi	r24, 0x2B	; 43
    1b6e:	07 fd       	sbrc	r16, 7
    1b70:	8d e2       	ldi	r24, 0x2D	; 45
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	b4 01       	movw	r22, r8
    1b76:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1b7a:	06 c0       	rjmp	.+12     	; 0x1b88 <vfprintf+0x6d6>
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	b4 01       	movw	r22, r8
    1b82:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1b86:	fa 94       	dec	r15
    1b88:	ef 14       	cp	r14, r15
    1b8a:	c0 f3       	brcs	.-16     	; 0x1b7c <vfprintf+0x6ca>
    1b8c:	ea 94       	dec	r14
    1b8e:	f1 01       	movw	r30, r2
    1b90:	ee 0d       	add	r30, r14
    1b92:	f1 1d       	adc	r31, r1
    1b94:	80 81       	ld	r24, Z
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	b4 01       	movw	r22, r8
    1b9a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1b9e:	ee 20       	and	r14, r14
    1ba0:	a9 f7       	brne	.-22     	; 0x1b8c <vfprintf+0x6da>
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <vfprintf+0x6fe>
    1ba4:	80 e2       	ldi	r24, 0x20	; 32
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	b4 01       	movw	r22, r8
    1baa:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <fputc>
    1bae:	da 94       	dec	r13
    1bb0:	dd 20       	and	r13, r13
    1bb2:	c1 f7       	brne	.-16     	; 0x1ba4 <vfprintf+0x6f2>
    1bb4:	8e cc       	rjmp	.-1764   	; 0x14d2 <vfprintf+0x20>
    1bb6:	f4 01       	movw	r30, r8
    1bb8:	86 81       	ldd	r24, Z+6	; 0x06
    1bba:	97 81       	ldd	r25, Z+7	; 0x07
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <vfprintf+0x710>
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	9f ef       	ldi	r25, 0xFF	; 255
    1bc2:	65 96       	adiw	r28, 0x15	; 21
    1bc4:	e2 e1       	ldi	r30, 0x12	; 18
    1bc6:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__epilogue_restores__>

00001bca <__divmodhi4>:
    1bca:	97 fb       	bst	r25, 7
    1bcc:	09 2e       	mov	r0, r25
    1bce:	07 26       	eor	r0, r23
    1bd0:	0a d0       	rcall	.+20     	; 0x1be6 <__divmodhi4_neg1>
    1bd2:	77 fd       	sbrc	r23, 7
    1bd4:	04 d0       	rcall	.+8      	; 0x1bde <__divmodhi4_neg2>
    1bd6:	43 d0       	rcall	.+134    	; 0x1c5e <__udivmodhi4>
    1bd8:	06 d0       	rcall	.+12     	; 0x1be6 <__divmodhi4_neg1>
    1bda:	00 20       	and	r0, r0
    1bdc:	1a f4       	brpl	.+6      	; 0x1be4 <__divmodhi4_exit>

00001bde <__divmodhi4_neg2>:
    1bde:	70 95       	com	r23
    1be0:	61 95       	neg	r22
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255

00001be4 <__divmodhi4_exit>:
    1be4:	08 95       	ret

00001be6 <__divmodhi4_neg1>:
    1be6:	f6 f7       	brtc	.-4      	; 0x1be4 <__divmodhi4_exit>
    1be8:	90 95       	com	r25
    1bea:	81 95       	neg	r24
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	08 95       	ret

00001bf0 <__prologue_saves__>:
    1bf0:	2f 92       	push	r2
    1bf2:	3f 92       	push	r3
    1bf4:	4f 92       	push	r4
    1bf6:	5f 92       	push	r5
    1bf8:	6f 92       	push	r6
    1bfa:	7f 92       	push	r7
    1bfc:	8f 92       	push	r8
    1bfe:	9f 92       	push	r9
    1c00:	af 92       	push	r10
    1c02:	bf 92       	push	r11
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	ca 1b       	sub	r28, r26
    1c1a:	db 0b       	sbc	r29, r27
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	09 94       	ijmp

00001c28 <__epilogue_restores__>:
    1c28:	2a 88       	ldd	r2, Y+18	; 0x12
    1c2a:	39 88       	ldd	r3, Y+17	; 0x11
    1c2c:	48 88       	ldd	r4, Y+16	; 0x10
    1c2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c3e:	df 80       	ldd	r13, Y+7	; 0x07
    1c40:	ee 80       	ldd	r14, Y+6	; 0x06
    1c42:	fd 80       	ldd	r15, Y+5	; 0x05
    1c44:	0c 81       	ldd	r16, Y+4	; 0x04
    1c46:	1b 81       	ldd	r17, Y+3	; 0x03
    1c48:	aa 81       	ldd	r26, Y+2	; 0x02
    1c4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c4c:	ce 0f       	add	r28, r30
    1c4e:	d1 1d       	adc	r29, r1
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	ed 01       	movw	r28, r26
    1c5c:	08 95       	ret

00001c5e <__udivmodhi4>:
    1c5e:	aa 1b       	sub	r26, r26
    1c60:	bb 1b       	sub	r27, r27
    1c62:	51 e1       	ldi	r21, 0x11	; 17
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <__udivmodhi4_ep>

00001c66 <__udivmodhi4_loop>:
    1c66:	aa 1f       	adc	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	a6 17       	cp	r26, r22
    1c6c:	b7 07       	cpc	r27, r23
    1c6e:	10 f0       	brcs	.+4      	; 0x1c74 <__udivmodhi4_ep>
    1c70:	a6 1b       	sub	r26, r22
    1c72:	b7 0b       	sbc	r27, r23

00001c74 <__udivmodhi4_ep>:
    1c74:	88 1f       	adc	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	5a 95       	dec	r21
    1c7a:	a9 f7       	brne	.-22     	; 0x1c66 <__udivmodhi4_loop>
    1c7c:	80 95       	com	r24
    1c7e:	90 95       	com	r25
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	08 95       	ret

00001c86 <strtod>:
    1c86:	a0 e0       	ldi	r26, 0x00	; 0
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e9 e4       	ldi	r30, 0x49	; 73
    1c8c:	fe e0       	ldi	r31, 0x0E	; 14
    1c8e:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__prologue_saves__+0x8>
    1c92:	5b 01       	movw	r10, r22
    1c94:	61 15       	cp	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	21 f0       	breq	.+8      	; 0x1ca2 <strtod+0x1c>
    1c9a:	db 01       	movw	r26, r22
    1c9c:	8c 93       	st	X, r24
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	9c 93       	st	X, r25
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	e7 01       	movw	r28, r14
    1ca6:	08 94       	sec
    1ca8:	e1 1c       	adc	r14, r1
    1caa:	f1 1c       	adc	r15, r1
    1cac:	08 81       	ld	r16, Y
    1cae:	67 01       	movw	r12, r14
    1cb0:	80 2f       	mov	r24, r16
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 8a 10 	call	0x2114	; 0x2114 <isspace>
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	a1 f7       	brne	.-24     	; 0x1ca4 <strtod+0x1e>
    1cbc:	0d 32       	cpi	r16, 0x2D	; 45
    1cbe:	41 f4       	brne	.+16     	; 0x1cd0 <strtod+0x4a>
    1cc0:	09 81       	ldd	r16, Y+1	; 0x01
    1cc2:	42 e0       	ldi	r20, 0x02	; 2
    1cc4:	c4 2e       	mov	r12, r20
    1cc6:	d1 2c       	mov	r13, r1
    1cc8:	cc 0e       	add	r12, r28
    1cca:	dd 1e       	adc	r13, r29
    1ccc:	11 e0       	ldi	r17, 0x01	; 1
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <strtod+0x5c>
    1cd0:	0b 32       	cpi	r16, 0x2B	; 43
    1cd2:	31 f4       	brne	.+12     	; 0x1ce0 <strtod+0x5a>
    1cd4:	09 81       	ldd	r16, Y+1	; 0x01
    1cd6:	32 e0       	ldi	r19, 0x02	; 2
    1cd8:	c3 2e       	mov	r12, r19
    1cda:	d1 2c       	mov	r13, r1
    1cdc:	cc 0e       	add	r12, r28
    1cde:	dd 1e       	adc	r13, r29
    1ce0:	10 e0       	ldi	r17, 0x00	; 0
    1ce2:	e6 01       	movw	r28, r12
    1ce4:	21 97       	sbiw	r28, 0x01	; 1
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	60 e7       	ldi	r22, 0x70	; 112
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	43 e0       	ldi	r20, 0x03	; 3
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	0e 94 92 10 	call	0x2124	; 0x2124 <strncasecmp_P>
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	d1 f4       	brne	.+52     	; 0x1d2c <strtod+0xa6>
    1cf8:	e6 01       	movw	r28, r12
    1cfa:	22 96       	adiw	r28, 0x02	; 2
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	63 e7       	ldi	r22, 0x73	; 115
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	45 e0       	ldi	r20, 0x05	; 5
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	0e 94 92 10 	call	0x2124	; 0x2124 <strncasecmp_P>
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	11 f4       	brne	.+4      	; 0x1d12 <strtod+0x8c>
    1d0e:	e6 01       	movw	r28, r12
    1d10:	27 96       	adiw	r28, 0x07	; 7
    1d12:	a1 14       	cp	r10, r1
    1d14:	b1 04       	cpc	r11, r1
    1d16:	19 f0       	breq	.+6      	; 0x1d1e <strtod+0x98>
    1d18:	f5 01       	movw	r30, r10
    1d1a:	d1 83       	std	Z+1, r29	; 0x01
    1d1c:	c0 83       	st	Z, r28
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	90 e8       	ldi	r25, 0x80	; 128
    1d24:	11 23       	and	r17, r17
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <strtod+0xa4>
    1d28:	0a c1       	rjmp	.+532    	; 0x1f3e <strtod+0x2b8>
    1d2a:	04 c1       	rjmp	.+520    	; 0x1f34 <strtod+0x2ae>
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	68 e7       	ldi	r22, 0x78	; 120
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	43 e0       	ldi	r20, 0x03	; 3
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	0e 94 92 10 	call	0x2124	; 0x2124 <strncasecmp_P>
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	59 f4       	brne	.+22     	; 0x1d54 <strtod+0xce>
    1d3e:	a1 14       	cp	r10, r1
    1d40:	b1 04       	cpc	r11, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <strtod+0xc0>
    1d44:	f9 c0       	rjmp	.+498    	; 0x1f38 <strtod+0x2b2>
    1d46:	c6 01       	movw	r24, r12
    1d48:	02 96       	adiw	r24, 0x02	; 2
    1d4a:	d5 01       	movw	r26, r10
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	9c 93       	st	X, r25
    1d50:	8e 93       	st	-X, r24
    1d52:	f2 c0       	rjmp	.+484    	; 0x1f38 <strtod+0x2b2>
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	ba 01       	movw	r22, r20
    1d5a:	88 24       	eor	r8, r8
    1d5c:	99 24       	eor	r9, r9
    1d5e:	00 53       	subi	r16, 0x30	; 48
    1d60:	0a 30       	cpi	r16, 0x0A	; 10
    1d62:	90 f5       	brcc	.+100    	; 0x1dc8 <strtod+0x142>
    1d64:	12 60       	ori	r17, 0x02	; 2
    1d66:	21 2f       	mov	r18, r17
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	c9 01       	movw	r24, r18
    1d6c:	88 70       	andi	r24, 0x08	; 8
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	12 ff       	sbrs	r17, 2
    1d72:	06 c0       	rjmp	.+12     	; 0x1d80 <strtod+0xfa>
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f5       	brne	.+90     	; 0x1dd2 <strtod+0x14c>
    1d78:	08 94       	sec
    1d7a:	81 1c       	adc	r8, r1
    1d7c:	91 1c       	adc	r9, r1
    1d7e:	29 c0       	rjmp	.+82     	; 0x1dd2 <strtod+0x14c>
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <strtod+0x104>
    1d84:	08 94       	sec
    1d86:	81 08       	sbc	r8, r1
    1d88:	91 08       	sbc	r9, r1
    1d8a:	db 01       	movw	r26, r22
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	d2 e0       	ldi	r29, 0x02	; 2
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	aa 1f       	adc	r26, r26
    1d96:	bb 1f       	adc	r27, r27
    1d98:	da 95       	dec	r29
    1d9a:	d1 f7       	brne	.-12     	; 0x1d90 <strtod+0x10a>
    1d9c:	48 0f       	add	r20, r24
    1d9e:	59 1f       	adc	r21, r25
    1da0:	6a 1f       	adc	r22, r26
    1da2:	7b 1f       	adc	r23, r27
    1da4:	44 0f       	add	r20, r20
    1da6:	55 1f       	adc	r21, r21
    1da8:	66 1f       	adc	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	40 0f       	add	r20, r16
    1dae:	51 1d       	adc	r21, r1
    1db0:	61 1d       	adc	r22, r1
    1db2:	71 1d       	adc	r23, r1
    1db4:	48 39       	cpi	r20, 0x98	; 152
    1db6:	b9 e9       	ldi	r27, 0x99	; 153
    1db8:	5b 07       	cpc	r21, r27
    1dba:	b9 e9       	ldi	r27, 0x99	; 153
    1dbc:	6b 07       	cpc	r22, r27
    1dbe:	b9 e1       	ldi	r27, 0x19	; 25
    1dc0:	7b 07       	cpc	r23, r27
    1dc2:	38 f0       	brcs	.+14     	; 0x1dd2 <strtod+0x14c>
    1dc4:	14 60       	ori	r17, 0x04	; 4
    1dc6:	05 c0       	rjmp	.+10     	; 0x1dd2 <strtod+0x14c>
    1dc8:	0e 3f       	cpi	r16, 0xFE	; 254
    1dca:	39 f4       	brne	.+14     	; 0x1dda <strtod+0x154>
    1dcc:	13 fd       	sbrc	r17, 3
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <strtod+0x1d0>
    1dd0:	18 60       	ori	r17, 0x08	; 8
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	01 91       	ld	r16, Z+
    1dd6:	6f 01       	movw	r12, r30
    1dd8:	c2 cf       	rjmp	.-124    	; 0x1d5e <strtod+0xd8>
    1dda:	05 33       	cpi	r16, 0x35	; 53
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <strtod+0x15c>
    1dde:	05 31       	cpi	r16, 0x15	; 21
    1de0:	d1 f5       	brne	.+116    	; 0x1e56 <strtod+0x1d0>
    1de2:	d6 01       	movw	r26, r12
    1de4:	ec 91       	ld	r30, X
    1de6:	ed 32       	cpi	r30, 0x2D	; 45
    1de8:	11 f4       	brne	.+4      	; 0x1dee <strtod+0x168>
    1dea:	10 61       	ori	r17, 0x10	; 16
    1dec:	08 c0       	rjmp	.+16     	; 0x1dfe <strtod+0x178>
    1dee:	eb 32       	cpi	r30, 0x2B	; 43
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <strtod+0x176>
    1df2:	c6 01       	movw	r24, r12
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <strtod+0x186>
    1dfc:	d6 01       	movw	r26, r12
    1dfe:	11 96       	adiw	r26, 0x01	; 1
    1e00:	ec 91       	ld	r30, X
    1e02:	11 97       	sbiw	r26, 0x01	; 1
    1e04:	c6 01       	movw	r24, r12
    1e06:	02 96       	adiw	r24, 0x02	; 2
    1e08:	22 e0       	ldi	r18, 0x02	; 2
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	e0 53       	subi	r30, 0x30	; 48
    1e0e:	ea 30       	cpi	r30, 0x0A	; 10
    1e10:	20 f0       	brcs	.+8      	; 0x1e1a <strtod+0x194>
    1e12:	6c 01       	movw	r12, r24
    1e14:	c2 1a       	sub	r12, r18
    1e16:	d3 0a       	sbc	r13, r19
    1e18:	1e c0       	rjmp	.+60     	; 0x1e56 <strtod+0x1d0>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	fc e0       	ldi	r31, 0x0C	; 12
    1e22:	20 38       	cpi	r18, 0x80	; 128
    1e24:	3f 07       	cpc	r19, r31
    1e26:	5c f4       	brge	.+22     	; 0x1e3e <strtod+0x1b8>
    1e28:	c9 01       	movw	r24, r18
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	28 0f       	add	r18, r24
    1e34:	39 1f       	adc	r19, r25
    1e36:	22 0f       	add	r18, r18
    1e38:	33 1f       	adc	r19, r19
    1e3a:	2e 0f       	add	r18, r30
    1e3c:	31 1d       	adc	r19, r1
    1e3e:	ed 91       	ld	r30, X+
    1e40:	e0 53       	subi	r30, 0x30	; 48
    1e42:	6d 01       	movw	r12, r26
    1e44:	ea 30       	cpi	r30, 0x0A	; 10
    1e46:	60 f3       	brcs	.-40     	; 0x1e20 <strtod+0x19a>
    1e48:	14 ff       	sbrs	r17, 4
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <strtod+0x1cc>
    1e4c:	30 95       	com	r19
    1e4e:	21 95       	neg	r18
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	82 0e       	add	r8, r18
    1e54:	93 1e       	adc	r9, r19
    1e56:	c1 2f       	mov	r28, r17
    1e58:	d0 e0       	ldi	r29, 0x00	; 0
    1e5a:	11 ff       	sbrs	r17, 1
    1e5c:	08 c0       	rjmp	.+16     	; 0x1e6e <strtod+0x1e8>
    1e5e:	a1 14       	cp	r10, r1
    1e60:	b1 04       	cpc	r11, r1
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <strtod+0x1e8>
    1e64:	c6 01       	movw	r24, r12
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	d5 01       	movw	r26, r10
    1e6a:	8d 93       	st	X+, r24
    1e6c:	9c 93       	st	X, r25
    1e6e:	cb 01       	movw	r24, r22
    1e70:	ba 01       	movw	r22, r20
    1e72:	0e 94 40 09 	call	0x1280	; 0x1280 <__floatunsisf>
    1e76:	6b 01       	movw	r12, r22
    1e78:	7c 01       	movw	r14, r24
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	83 70       	andi	r24, 0x03	; 3
    1e7e:	90 70       	andi	r25, 0x00	; 0
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	91 05       	cpc	r25, r1
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <strtod+0x208>
    1e86:	f7 fa       	bst	r15, 7
    1e88:	f0 94       	com	r15
    1e8a:	f7 f8       	bld	r15, 7
    1e8c:	f0 94       	com	r15
    1e8e:	c7 01       	movw	r24, r14
    1e90:	b6 01       	movw	r22, r12
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	a9 01       	movw	r20, r18
    1e98:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <strtod+0x21c>
    1ea0:	44 c0       	rjmp	.+136    	; 0x1f2a <strtod+0x2a4>
    1ea2:	97 fe       	sbrs	r9, 7
    1ea4:	07 c0       	rjmp	.+14     	; 0x1eb4 <strtod+0x22e>
    1ea6:	90 94       	com	r9
    1ea8:	81 94       	neg	r8
    1eaa:	91 08       	sbc	r9, r1
    1eac:	93 94       	inc	r9
    1eae:	c7 ea       	ldi	r28, 0xA7	; 167
    1eb0:	d0 e0       	ldi	r29, 0x00	; 0
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <strtod+0x232>
    1eb4:	cf e8       	ldi	r28, 0x8F	; 143
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	98 ee       	ldi	r25, 0xE8	; 232
    1eba:	69 2e       	mov	r6, r25
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	79 2e       	mov	r7, r25
    1ec0:	6c 0e       	add	r6, r28
    1ec2:	7d 1e       	adc	r7, r29
    1ec4:	20 e2       	ldi	r18, 0x20	; 32
    1ec6:	a2 2e       	mov	r10, r18
    1ec8:	b1 2c       	mov	r11, r1
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <strtod+0x264>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	05 91       	lpm	r16, Z+
    1ed0:	15 91       	lpm	r17, Z+
    1ed2:	25 91       	lpm	r18, Z+
    1ed4:	34 91       	lpm	r19, Z
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	b6 01       	movw	r22, r12
    1eda:	a9 01       	movw	r20, r18
    1edc:	98 01       	movw	r18, r16
    1ede:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
    1ee2:	6b 01       	movw	r12, r22
    1ee4:	7c 01       	movw	r14, r24
    1ee6:	8a 18       	sub	r8, r10
    1ee8:	9b 08       	sbc	r9, r11
    1eea:	8a 14       	cp	r8, r10
    1eec:	9b 04       	cpc	r9, r11
    1eee:	74 f7       	brge	.-36     	; 0x1ecc <strtod+0x246>
    1ef0:	24 97       	sbiw	r28, 0x04	; 4
    1ef2:	b5 94       	asr	r11
    1ef4:	a7 94       	ror	r10
    1ef6:	c6 15       	cp	r28, r6
    1ef8:	d7 05       	cpc	r29, r7
    1efa:	b9 f7       	brne	.-18     	; 0x1eea <strtod+0x264>
    1efc:	c6 01       	movw	r24, r12
    1efe:	d7 01       	movw	r26, r14
    1f00:	2a 2f       	mov	r18, r26
    1f02:	22 0f       	add	r18, r18
    1f04:	2b 2f       	mov	r18, r27
    1f06:	22 1f       	adc	r18, r18
    1f08:	2f 3f       	cpi	r18, 0xFF	; 255
    1f0a:	49 f0       	breq	.+18     	; 0x1f1e <strtod+0x298>
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	a9 01       	movw	r20, r18
    1f16:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	31 f4       	brne	.+12     	; 0x1f2a <strtod+0x2a4>
    1f1e:	82 e2       	ldi	r24, 0x22	; 34
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	90 93 f7 07 	sts	0x07F7, r25
    1f26:	80 93 f6 07 	sts	0x07F6, r24
    1f2a:	3c 2d       	mov	r19, r12
    1f2c:	2d 2d       	mov	r18, r13
    1f2e:	9e 2d       	mov	r25, r14
    1f30:	8f 2d       	mov	r24, r15
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <strtod+0x2ba>
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <strtod+0x2ba>
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	90 ec       	ldi	r25, 0xC0	; 192
    1f3e:	8f e7       	ldi	r24, 0x7F	; 127
    1f40:	b9 01       	movw	r22, r18
    1f42:	ac 01       	movw	r20, r24
    1f44:	87 2f       	mov	r24, r23
    1f46:	92 2f       	mov	r25, r18
    1f48:	a5 2f       	mov	r26, r21
    1f4a:	b4 2f       	mov	r27, r20
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	ee e0       	ldi	r30, 0x0E	; 14
    1f56:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__epilogue_restores__+0x8>

00001f5a <abort>:
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	f8 94       	cli
    1f60:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <_exit>

00001f64 <__ftoa_engine>:
    1f64:	28 30       	cpi	r18, 0x08	; 8
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <__ftoa_engine+0x6>
    1f68:	27 e0       	ldi	r18, 0x07	; 7
    1f6a:	33 27       	eor	r19, r19
    1f6c:	da 01       	movw	r26, r20
    1f6e:	99 0f       	add	r25, r25
    1f70:	31 1d       	adc	r19, r1
    1f72:	87 fd       	sbrc	r24, 7
    1f74:	91 60       	ori	r25, 0x01	; 1
    1f76:	00 96       	adiw	r24, 0x00	; 0
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	39 f4       	brne	.+14     	; 0x1f8c <__ftoa_engine+0x28>
    1f7e:	32 60       	ori	r19, 0x02	; 2
    1f80:	2e 5f       	subi	r18, 0xFE	; 254
    1f82:	3d 93       	st	X+, r19
    1f84:	30 e3       	ldi	r19, 0x30	; 48
    1f86:	2a 95       	dec	r18
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <__ftoa_engine+0x1e>
    1f8a:	08 95       	ret
    1f8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8e:	30 f0       	brcs	.+12     	; 0x1f9c <__ftoa_engine+0x38>
    1f90:	80 38       	cpi	r24, 0x80	; 128
    1f92:	71 05       	cpc	r23, r1
    1f94:	61 05       	cpc	r22, r1
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <__ftoa_engine+0x36>
    1f98:	3c 5f       	subi	r19, 0xFC	; 252
    1f9a:	3c 5f       	subi	r19, 0xFC	; 252
    1f9c:	3d 93       	st	X+, r19
    1f9e:	91 30       	cpi	r25, 0x01	; 1
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <__ftoa_engine+0x40>
    1fa2:	80 68       	ori	r24, 0x80	; 128
    1fa4:	91 1d       	adc	r25, r1
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	1f 93       	push	r17
    1fac:	0f 93       	push	r16
    1fae:	ff 92       	push	r15
    1fb0:	ef 92       	push	r14
    1fb2:	19 2f       	mov	r17, r25
    1fb4:	98 7f       	andi	r25, 0xF8	; 248
    1fb6:	96 95       	lsr	r25
    1fb8:	e9 2f       	mov	r30, r25
    1fba:	96 95       	lsr	r25
    1fbc:	96 95       	lsr	r25
    1fbe:	e9 0f       	add	r30, r25
    1fc0:	ff 27       	eor	r31, r31
    1fc2:	eb 5f       	subi	r30, 0xFB	; 251
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	99 27       	eor	r25, r25
    1fc8:	33 27       	eor	r19, r19
    1fca:	ee 24       	eor	r14, r14
    1fcc:	ff 24       	eor	r15, r15
    1fce:	a7 01       	movw	r20, r14
    1fd0:	e7 01       	movw	r28, r14
    1fd2:	05 90       	lpm	r0, Z+
    1fd4:	08 94       	sec
    1fd6:	07 94       	ror	r0
    1fd8:	28 f4       	brcc	.+10     	; 0x1fe4 <__ftoa_engine+0x80>
    1fda:	36 0f       	add	r19, r22
    1fdc:	e7 1e       	adc	r14, r23
    1fde:	f8 1e       	adc	r15, r24
    1fe0:	49 1f       	adc	r20, r25
    1fe2:	51 1d       	adc	r21, r1
    1fe4:	66 0f       	add	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	06 94       	lsr	r0
    1fee:	a1 f7       	brne	.-24     	; 0x1fd8 <__ftoa_engine+0x74>
    1ff0:	05 90       	lpm	r0, Z+
    1ff2:	07 94       	ror	r0
    1ff4:	28 f4       	brcc	.+10     	; 0x2000 <__ftoa_engine+0x9c>
    1ff6:	e7 0e       	add	r14, r23
    1ff8:	f8 1e       	adc	r15, r24
    1ffa:	49 1f       	adc	r20, r25
    1ffc:	56 1f       	adc	r21, r22
    1ffe:	c1 1d       	adc	r28, r1
    2000:	77 0f       	add	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	66 1f       	adc	r22, r22
    2008:	06 94       	lsr	r0
    200a:	a1 f7       	brne	.-24     	; 0x1ff4 <__ftoa_engine+0x90>
    200c:	05 90       	lpm	r0, Z+
    200e:	07 94       	ror	r0
    2010:	28 f4       	brcc	.+10     	; 0x201c <__ftoa_engine+0xb8>
    2012:	f8 0e       	add	r15, r24
    2014:	49 1f       	adc	r20, r25
    2016:	56 1f       	adc	r21, r22
    2018:	c7 1f       	adc	r28, r23
    201a:	d1 1d       	adc	r29, r1
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	66 1f       	adc	r22, r22
    2022:	77 1f       	adc	r23, r23
    2024:	06 94       	lsr	r0
    2026:	a1 f7       	brne	.-24     	; 0x2010 <__ftoa_engine+0xac>
    2028:	05 90       	lpm	r0, Z+
    202a:	07 94       	ror	r0
    202c:	20 f4       	brcc	.+8      	; 0x2036 <__ftoa_engine+0xd2>
    202e:	49 0f       	add	r20, r25
    2030:	56 1f       	adc	r21, r22
    2032:	c7 1f       	adc	r28, r23
    2034:	d8 1f       	adc	r29, r24
    2036:	99 0f       	add	r25, r25
    2038:	66 1f       	adc	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	88 1f       	adc	r24, r24
    203e:	06 94       	lsr	r0
    2040:	a9 f7       	brne	.-22     	; 0x202c <__ftoa_engine+0xc8>
    2042:	84 91       	lpm	r24, Z
    2044:	10 95       	com	r17
    2046:	17 70       	andi	r17, 0x07	; 7
    2048:	41 f0       	breq	.+16     	; 0x205a <__ftoa_engine+0xf6>
    204a:	d6 95       	lsr	r29
    204c:	c7 95       	ror	r28
    204e:	57 95       	ror	r21
    2050:	47 95       	ror	r20
    2052:	f7 94       	ror	r15
    2054:	e7 94       	ror	r14
    2056:	1a 95       	dec	r17
    2058:	c1 f7       	brne	.-16     	; 0x204a <__ftoa_engine+0xe6>
    205a:	eb ea       	ldi	r30, 0xAB	; 171
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	68 94       	set
    2060:	15 90       	lpm	r1, Z+
    2062:	15 91       	lpm	r17, Z+
    2064:	35 91       	lpm	r19, Z+
    2066:	65 91       	lpm	r22, Z+
    2068:	95 91       	lpm	r25, Z+
    206a:	05 90       	lpm	r0, Z+
    206c:	7f e2       	ldi	r23, 0x2F	; 47
    206e:	73 95       	inc	r23
    2070:	e1 18       	sub	r14, r1
    2072:	f1 0a       	sbc	r15, r17
    2074:	43 0b       	sbc	r20, r19
    2076:	56 0b       	sbc	r21, r22
    2078:	c9 0b       	sbc	r28, r25
    207a:	d0 09       	sbc	r29, r0
    207c:	c0 f7       	brcc	.-16     	; 0x206e <__ftoa_engine+0x10a>
    207e:	e1 0c       	add	r14, r1
    2080:	f1 1e       	adc	r15, r17
    2082:	43 1f       	adc	r20, r19
    2084:	56 1f       	adc	r21, r22
    2086:	c9 1f       	adc	r28, r25
    2088:	d0 1d       	adc	r29, r0
    208a:	7e f4       	brtc	.+30     	; 0x20aa <__ftoa_engine+0x146>
    208c:	70 33       	cpi	r23, 0x30	; 48
    208e:	11 f4       	brne	.+4      	; 0x2094 <__ftoa_engine+0x130>
    2090:	8a 95       	dec	r24
    2092:	e6 cf       	rjmp	.-52     	; 0x2060 <__ftoa_engine+0xfc>
    2094:	e8 94       	clt
    2096:	01 50       	subi	r16, 0x01	; 1
    2098:	30 f0       	brcs	.+12     	; 0x20a6 <__ftoa_engine+0x142>
    209a:	08 0f       	add	r16, r24
    209c:	0a f4       	brpl	.+2      	; 0x20a0 <__ftoa_engine+0x13c>
    209e:	00 27       	eor	r16, r16
    20a0:	02 17       	cp	r16, r18
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <__ftoa_engine+0x142>
    20a4:	20 2f       	mov	r18, r16
    20a6:	23 95       	inc	r18
    20a8:	02 2f       	mov	r16, r18
    20aa:	7a 33       	cpi	r23, 0x3A	; 58
    20ac:	28 f0       	brcs	.+10     	; 0x20b8 <__ftoa_engine+0x154>
    20ae:	79 e3       	ldi	r23, 0x39	; 57
    20b0:	7d 93       	st	X+, r23
    20b2:	2a 95       	dec	r18
    20b4:	e9 f7       	brne	.-6      	; 0x20b0 <__ftoa_engine+0x14c>
    20b6:	10 c0       	rjmp	.+32     	; 0x20d8 <__ftoa_engine+0x174>
    20b8:	7d 93       	st	X+, r23
    20ba:	2a 95       	dec	r18
    20bc:	89 f6       	brne	.-94     	; 0x2060 <__ftoa_engine+0xfc>
    20be:	06 94       	lsr	r0
    20c0:	97 95       	ror	r25
    20c2:	67 95       	ror	r22
    20c4:	37 95       	ror	r19
    20c6:	17 95       	ror	r17
    20c8:	17 94       	ror	r1
    20ca:	e1 18       	sub	r14, r1
    20cc:	f1 0a       	sbc	r15, r17
    20ce:	43 0b       	sbc	r20, r19
    20d0:	56 0b       	sbc	r21, r22
    20d2:	c9 0b       	sbc	r28, r25
    20d4:	d0 09       	sbc	r29, r0
    20d6:	98 f0       	brcs	.+38     	; 0x20fe <__ftoa_engine+0x19a>
    20d8:	23 95       	inc	r18
    20da:	7e 91       	ld	r23, -X
    20dc:	73 95       	inc	r23
    20de:	7a 33       	cpi	r23, 0x3A	; 58
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <__ftoa_engine+0x180>
    20e2:	70 e3       	ldi	r23, 0x30	; 48
    20e4:	7c 93       	st	X, r23
    20e6:	20 13       	cpse	r18, r16
    20e8:	b8 f7       	brcc	.-18     	; 0x20d8 <__ftoa_engine+0x174>
    20ea:	7e 91       	ld	r23, -X
    20ec:	70 61       	ori	r23, 0x10	; 16
    20ee:	7d 93       	st	X+, r23
    20f0:	30 f0       	brcs	.+12     	; 0x20fe <__ftoa_engine+0x19a>
    20f2:	83 95       	inc	r24
    20f4:	71 e3       	ldi	r23, 0x31	; 49
    20f6:	7d 93       	st	X+, r23
    20f8:	70 e3       	ldi	r23, 0x30	; 48
    20fa:	2a 95       	dec	r18
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <__ftoa_engine+0x192>
    20fe:	11 24       	eor	r1, r1
    2100:	ef 90       	pop	r14
    2102:	ff 90       	pop	r15
    2104:	0f 91       	pop	r16
    2106:	1f 91       	pop	r17
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	99 27       	eor	r25, r25
    210e:	87 fd       	sbrc	r24, 7
    2110:	90 95       	com	r25
    2112:	08 95       	ret

00002114 <isspace>:
    2114:	91 11       	cpse	r25, r1
    2116:	3d c1       	rjmp	.+634    	; 0x2392 <__ctype_isfalse>
    2118:	80 32       	cpi	r24, 0x20	; 32
    211a:	19 f0       	breq	.+6      	; 0x2122 <isspace+0xe>
    211c:	89 50       	subi	r24, 0x09	; 9
    211e:	85 50       	subi	r24, 0x05	; 5
    2120:	d0 f7       	brcc	.-12     	; 0x2116 <isspace+0x2>
    2122:	08 95       	ret

00002124 <strncasecmp_P>:
    2124:	fb 01       	movw	r30, r22
    2126:	dc 01       	movw	r26, r24
    2128:	41 50       	subi	r20, 0x01	; 1
    212a:	50 40       	sbci	r21, 0x00	; 0
    212c:	88 f0       	brcs	.+34     	; 0x2150 <strncasecmp_P+0x2c>
    212e:	8d 91       	ld	r24, X+
    2130:	81 34       	cpi	r24, 0x41	; 65
    2132:	1c f0       	brlt	.+6      	; 0x213a <strncasecmp_P+0x16>
    2134:	8b 35       	cpi	r24, 0x5B	; 91
    2136:	0c f4       	brge	.+2      	; 0x213a <strncasecmp_P+0x16>
    2138:	80 5e       	subi	r24, 0xE0	; 224
    213a:	65 91       	lpm	r22, Z+
    213c:	61 34       	cpi	r22, 0x41	; 65
    213e:	1c f0       	brlt	.+6      	; 0x2146 <strncasecmp_P+0x22>
    2140:	6b 35       	cpi	r22, 0x5B	; 91
    2142:	0c f4       	brge	.+2      	; 0x2146 <strncasecmp_P+0x22>
    2144:	60 5e       	subi	r22, 0xE0	; 224
    2146:	86 1b       	sub	r24, r22
    2148:	61 11       	cpse	r22, r1
    214a:	71 f3       	breq	.-36     	; 0x2128 <strncasecmp_P+0x4>
    214c:	99 0b       	sbc	r25, r25
    214e:	08 95       	ret
    2150:	88 1b       	sub	r24, r24
    2152:	fc cf       	rjmp	.-8      	; 0x214c <strncasecmp_P+0x28>

00002154 <strnlen_P>:
    2154:	fc 01       	movw	r30, r24
    2156:	05 90       	lpm	r0, Z+
    2158:	61 50       	subi	r22, 0x01	; 1
    215a:	70 40       	sbci	r23, 0x00	; 0
    215c:	01 10       	cpse	r0, r1
    215e:	d8 f7       	brcc	.-10     	; 0x2156 <strnlen_P+0x2>
    2160:	80 95       	com	r24
    2162:	90 95       	com	r25
    2164:	8e 0f       	add	r24, r30
    2166:	9f 1f       	adc	r25, r31
    2168:	08 95       	ret

0000216a <strchr>:
    216a:	fc 01       	movw	r30, r24
    216c:	81 91       	ld	r24, Z+
    216e:	86 17       	cp	r24, r22
    2170:	21 f0       	breq	.+8      	; 0x217a <strchr+0x10>
    2172:	88 23       	and	r24, r24
    2174:	d9 f7       	brne	.-10     	; 0x216c <strchr+0x2>
    2176:	99 27       	eor	r25, r25
    2178:	08 95       	ret
    217a:	31 97       	sbiw	r30, 0x01	; 1
    217c:	cf 01       	movw	r24, r30
    217e:	08 95       	ret

00002180 <strcmp>:
    2180:	fb 01       	movw	r30, r22
    2182:	dc 01       	movw	r26, r24
    2184:	8d 91       	ld	r24, X+
    2186:	01 90       	ld	r0, Z+
    2188:	80 19       	sub	r24, r0
    218a:	01 10       	cpse	r0, r1
    218c:	d9 f3       	breq	.-10     	; 0x2184 <strcmp+0x4>
    218e:	99 0b       	sbc	r25, r25
    2190:	08 95       	ret

00002192 <strncmp>:
    2192:	fb 01       	movw	r30, r22
    2194:	dc 01       	movw	r26, r24
    2196:	41 50       	subi	r20, 0x01	; 1
    2198:	50 40       	sbci	r21, 0x00	; 0
    219a:	30 f0       	brcs	.+12     	; 0x21a8 <strncmp+0x16>
    219c:	8d 91       	ld	r24, X+
    219e:	01 90       	ld	r0, Z+
    21a0:	80 19       	sub	r24, r0
    21a2:	19 f4       	brne	.+6      	; 0x21aa <strncmp+0x18>
    21a4:	00 20       	and	r0, r0
    21a6:	b9 f7       	brne	.-18     	; 0x2196 <strncmp+0x4>
    21a8:	88 1b       	sub	r24, r24
    21aa:	99 0b       	sbc	r25, r25
    21ac:	08 95       	ret

000021ae <strnlen>:
    21ae:	fc 01       	movw	r30, r24
    21b0:	61 50       	subi	r22, 0x01	; 1
    21b2:	70 40       	sbci	r23, 0x00	; 0
    21b4:	01 90       	ld	r0, Z+
    21b6:	01 10       	cpse	r0, r1
    21b8:	d8 f7       	brcc	.-10     	; 0x21b0 <strnlen+0x2>
    21ba:	80 95       	com	r24
    21bc:	90 95       	com	r25
    21be:	8e 0f       	add	r24, r30
    21c0:	9f 1f       	adc	r25, r31
    21c2:	08 95       	ret

000021c4 <fputc>:
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	8c 01       	movw	r16, r24
    21ce:	eb 01       	movw	r28, r22
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	81 ff       	sbrs	r24, 1
    21d4:	1b c0       	rjmp	.+54     	; 0x220c <fputc+0x48>
    21d6:	82 ff       	sbrs	r24, 2
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <fputc+0x30>
    21da:	2e 81       	ldd	r18, Y+6	; 0x06
    21dc:	3f 81       	ldd	r19, Y+7	; 0x07
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	28 17       	cp	r18, r24
    21e4:	39 07       	cpc	r19, r25
    21e6:	64 f4       	brge	.+24     	; 0x2200 <fputc+0x3c>
    21e8:	e8 81       	ld	r30, Y
    21ea:	f9 81       	ldd	r31, Y+1	; 0x01
    21ec:	01 93       	st	Z+, r16
    21ee:	f9 83       	std	Y+1, r31	; 0x01
    21f0:	e8 83       	st	Y, r30
    21f2:	06 c0       	rjmp	.+12     	; 0x2200 <fputc+0x3c>
    21f4:	e8 85       	ldd	r30, Y+8	; 0x08
    21f6:	f9 85       	ldd	r31, Y+9	; 0x09
    21f8:	80 2f       	mov	r24, r16
    21fa:	09 95       	icall
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	31 f4       	brne	.+12     	; 0x220c <fputc+0x48>
    2200:	8e 81       	ldd	r24, Y+6	; 0x06
    2202:	9f 81       	ldd	r25, Y+7	; 0x07
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	9f 83       	std	Y+7, r25	; 0x07
    2208:	8e 83       	std	Y+6, r24	; 0x06
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <fputc+0x4c>
    220c:	0f ef       	ldi	r16, 0xFF	; 255
    220e:	1f ef       	ldi	r17, 0xFF	; 255
    2210:	c8 01       	movw	r24, r16
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret

0000221c <printf>:
    221c:	a0 e0       	ldi	r26, 0x00	; 0
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e4 e1       	ldi	r30, 0x14	; 20
    2222:	f1 e1       	ldi	r31, 0x11	; 17
    2224:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__prologue_saves__+0x20>
    2228:	fe 01       	movw	r30, r28
    222a:	35 96       	adiw	r30, 0x05	; 5
    222c:	61 91       	ld	r22, Z+
    222e:	71 91       	ld	r23, Z+
    2230:	80 91 f2 07 	lds	r24, 0x07F2
    2234:	90 91 f3 07 	lds	r25, 0x07F3
    2238:	af 01       	movw	r20, r30
    223a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <vfprintf>
    223e:	20 96       	adiw	r28, 0x00	; 0
    2240:	e2 e0       	ldi	r30, 0x02	; 2
    2242:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__epilogue_restores__+0x20>

00002246 <puts>:
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	8c 01       	movw	r16, r24
    2250:	e0 91 f2 07 	lds	r30, 0x07F2
    2254:	f0 91 f3 07 	lds	r31, 0x07F3
    2258:	83 81       	ldd	r24, Z+3	; 0x03
    225a:	81 ff       	sbrs	r24, 1
    225c:	1a c0       	rjmp	.+52     	; 0x2292 <puts+0x4c>
    225e:	c0 e0       	ldi	r28, 0x00	; 0
    2260:	d0 e0       	ldi	r29, 0x00	; 0
    2262:	05 c0       	rjmp	.+10     	; 0x226e <puts+0x28>
    2264:	09 95       	icall
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	11 f0       	breq	.+4      	; 0x226e <puts+0x28>
    226a:	cf ef       	ldi	r28, 0xFF	; 255
    226c:	df ef       	ldi	r29, 0xFF	; 255
    226e:	f8 01       	movw	r30, r16
    2270:	81 91       	ld	r24, Z+
    2272:	8f 01       	movw	r16, r30
    2274:	60 91 f2 07 	lds	r22, 0x07F2
    2278:	70 91 f3 07 	lds	r23, 0x07F3
    227c:	db 01       	movw	r26, r22
    227e:	18 96       	adiw	r26, 0x08	; 8
    2280:	ed 91       	ld	r30, X+
    2282:	fc 91       	ld	r31, X
    2284:	19 97       	sbiw	r26, 0x09	; 9
    2286:	88 23       	and	r24, r24
    2288:	69 f7       	brne	.-38     	; 0x2264 <puts+0x1e>
    228a:	8a e0       	ldi	r24, 0x0A	; 10
    228c:	09 95       	icall
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	11 f0       	breq	.+4      	; 0x2296 <puts+0x50>
    2292:	cf ef       	ldi	r28, 0xFF	; 255
    2294:	df ef       	ldi	r29, 0xFF	; 255
    2296:	ce 01       	movw	r24, r28
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	08 95       	ret

000022a2 <__ultoa_invert>:
    22a2:	fa 01       	movw	r30, r20
    22a4:	aa 27       	eor	r26, r26
    22a6:	28 30       	cpi	r18, 0x08	; 8
    22a8:	51 f1       	breq	.+84     	; 0x22fe <__ultoa_invert+0x5c>
    22aa:	20 31       	cpi	r18, 0x10	; 16
    22ac:	81 f1       	breq	.+96     	; 0x230e <__ultoa_invert+0x6c>
    22ae:	e8 94       	clt
    22b0:	6f 93       	push	r22
    22b2:	6e 7f       	andi	r22, 0xFE	; 254
    22b4:	6e 5f       	subi	r22, 0xFE	; 254
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	af 4f       	sbci	r26, 0xFF	; 255
    22be:	b1 e0       	ldi	r27, 0x01	; 1
    22c0:	3e d0       	rcall	.+124    	; 0x233e <__ultoa_invert+0x9c>
    22c2:	b4 e0       	ldi	r27, 0x04	; 4
    22c4:	3c d0       	rcall	.+120    	; 0x233e <__ultoa_invert+0x9c>
    22c6:	67 0f       	add	r22, r23
    22c8:	78 1f       	adc	r23, r24
    22ca:	89 1f       	adc	r24, r25
    22cc:	9a 1f       	adc	r25, r26
    22ce:	a1 1d       	adc	r26, r1
    22d0:	68 0f       	add	r22, r24
    22d2:	79 1f       	adc	r23, r25
    22d4:	8a 1f       	adc	r24, r26
    22d6:	91 1d       	adc	r25, r1
    22d8:	a1 1d       	adc	r26, r1
    22da:	6a 0f       	add	r22, r26
    22dc:	71 1d       	adc	r23, r1
    22de:	81 1d       	adc	r24, r1
    22e0:	91 1d       	adc	r25, r1
    22e2:	a1 1d       	adc	r26, r1
    22e4:	20 d0       	rcall	.+64     	; 0x2326 <__ultoa_invert+0x84>
    22e6:	09 f4       	brne	.+2      	; 0x22ea <__ultoa_invert+0x48>
    22e8:	68 94       	set
    22ea:	3f 91       	pop	r19
    22ec:	2a e0       	ldi	r18, 0x0A	; 10
    22ee:	26 9f       	mul	r18, r22
    22f0:	11 24       	eor	r1, r1
    22f2:	30 19       	sub	r19, r0
    22f4:	30 5d       	subi	r19, 0xD0	; 208
    22f6:	31 93       	st	Z+, r19
    22f8:	de f6       	brtc	.-74     	; 0x22b0 <__ultoa_invert+0xe>
    22fa:	cf 01       	movw	r24, r30
    22fc:	08 95       	ret
    22fe:	46 2f       	mov	r20, r22
    2300:	47 70       	andi	r20, 0x07	; 7
    2302:	40 5d       	subi	r20, 0xD0	; 208
    2304:	41 93       	st	Z+, r20
    2306:	b3 e0       	ldi	r27, 0x03	; 3
    2308:	0f d0       	rcall	.+30     	; 0x2328 <__ultoa_invert+0x86>
    230a:	c9 f7       	brne	.-14     	; 0x22fe <__ultoa_invert+0x5c>
    230c:	f6 cf       	rjmp	.-20     	; 0x22fa <__ultoa_invert+0x58>
    230e:	46 2f       	mov	r20, r22
    2310:	4f 70       	andi	r20, 0x0F	; 15
    2312:	40 5d       	subi	r20, 0xD0	; 208
    2314:	4a 33       	cpi	r20, 0x3A	; 58
    2316:	18 f0       	brcs	.+6      	; 0x231e <__ultoa_invert+0x7c>
    2318:	49 5d       	subi	r20, 0xD9	; 217
    231a:	31 fd       	sbrc	r19, 1
    231c:	40 52       	subi	r20, 0x20	; 32
    231e:	41 93       	st	Z+, r20
    2320:	02 d0       	rcall	.+4      	; 0x2326 <__ultoa_invert+0x84>
    2322:	a9 f7       	brne	.-22     	; 0x230e <__ultoa_invert+0x6c>
    2324:	ea cf       	rjmp	.-44     	; 0x22fa <__ultoa_invert+0x58>
    2326:	b4 e0       	ldi	r27, 0x04	; 4
    2328:	a6 95       	lsr	r26
    232a:	97 95       	ror	r25
    232c:	87 95       	ror	r24
    232e:	77 95       	ror	r23
    2330:	67 95       	ror	r22
    2332:	ba 95       	dec	r27
    2334:	c9 f7       	brne	.-14     	; 0x2328 <__ultoa_invert+0x86>
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	61 05       	cpc	r22, r1
    233a:	71 05       	cpc	r23, r1
    233c:	08 95       	ret
    233e:	9b 01       	movw	r18, r22
    2340:	ac 01       	movw	r20, r24
    2342:	0a 2e       	mov	r0, r26
    2344:	06 94       	lsr	r0
    2346:	57 95       	ror	r21
    2348:	47 95       	ror	r20
    234a:	37 95       	ror	r19
    234c:	27 95       	ror	r18
    234e:	ba 95       	dec	r27
    2350:	c9 f7       	brne	.-14     	; 0x2344 <__ultoa_invert+0xa2>
    2352:	62 0f       	add	r22, r18
    2354:	73 1f       	adc	r23, r19
    2356:	84 1f       	adc	r24, r20
    2358:	95 1f       	adc	r25, r21
    235a:	a0 1d       	adc	r26, r0
    235c:	08 95       	ret

0000235e <__eerd_byte_m328p>:
    235e:	f9 99       	sbic	0x1f, 1	; 31
    2360:	fe cf       	rjmp	.-4      	; 0x235e <__eerd_byte_m328p>
    2362:	92 bd       	out	0x22, r25	; 34
    2364:	81 bd       	out	0x21, r24	; 33
    2366:	f8 9a       	sbi	0x1f, 0	; 31
    2368:	99 27       	eor	r25, r25
    236a:	80 b5       	in	r24, 0x20	; 32
    236c:	08 95       	ret

0000236e <__eeupd_byte_m328p>:
    236e:	26 2f       	mov	r18, r22

00002370 <__eeupd_r18_m328p>:
    2370:	f9 99       	sbic	0x1f, 1	; 31
    2372:	fe cf       	rjmp	.-4      	; 0x2370 <__eeupd_r18_m328p>
    2374:	92 bd       	out	0x22, r25	; 34
    2376:	81 bd       	out	0x21, r24	; 33
    2378:	f8 9a       	sbi	0x1f, 0	; 31
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	00 b4       	in	r0, 0x20	; 32
    237e:	02 16       	cp	r0, r18
    2380:	39 f0       	breq	.+14     	; 0x2390 <__eeupd_r18_m328p+0x20>
    2382:	1f ba       	out	0x1f, r1	; 31
    2384:	20 bd       	out	0x20, r18	; 32
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	fa 9a       	sbi	0x1f, 2	; 31
    238c:	f9 9a       	sbi	0x1f, 1	; 31
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	08 95       	ret

00002392 <__ctype_isfalse>:
    2392:	99 27       	eor	r25, r25
    2394:	88 27       	eor	r24, r24

00002396 <__ctype_istrue>:
    2396:	08 95       	ret

00002398 <_exit>:
    2398:	f8 94       	cli

0000239a <__stop_program>:
    239a:	ff cf       	rjmp	.-2      	; 0x239a <__stop_program>
