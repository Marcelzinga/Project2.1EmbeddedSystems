
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005fa  00800100  000023ea  0000247e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  008006fa  008006fa  00002a78  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b21  00000000  00000000  00005cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000067d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002617  00000000  00000000  00006a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de4  00000000  00000000  00009027  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f7  00000000  00000000  00009e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  0000b404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000873  00000000  00000000  0000bb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dae  00000000  00000000  0000c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000e185  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_2>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_14>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__c.1905>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.1903>:
      6c:	69 6e 66 00                                         inf.

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_nan>:
      78:	4e 41 4e                                            NAN

0000007b <pwr_p10>:
      7b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      8b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000093 <pwr_m10>:
      93:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a3:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
      b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     103:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     113:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     123:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     133:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     143:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     153:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     163:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     173:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     183:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     193:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1a3:	3d 27 00                                            ='.

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	16 e0       	ldi	r17, 0x06	; 6
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	ea ee       	ldi	r30, 0xEA	; 234
     1ba:	f3 e2       	ldi	r31, 0x23	; 35
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	aa 3f       	cpi	r26, 0xFA	; 250
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	18 e0       	ldi	r17, 0x08	; 8
     1ca:	aa ef       	ldi	r26, 0xFA	; 250
     1cc:	b6 e0       	ldi	r27, 0x06	; 6
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ae 32       	cpi	r26, 0x2E	; 46
     1d4:	b1 07       	cpc	r27, r17
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1dc:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <ADC_init>:


void ADC_init()
{
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     1e4:	87 e8       	ldi	r24, 0x87	; 135
     1e6:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC5D); //!!Disables pin 5? not sure what it does atm
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 7e 00 	sts	0x007E, r24
	
}
     1f0:	08 95       	ret

000001f2 <get_adc_value>:

// Dit was om te kijken of de code wat geoptimaliseerd kon worden
// Geen succes, dus gaat het via 2 aparte get adc's
uint8_t get_adc_value(uint8_t inputPin)
{
	ADCSRA |= (1<<ADSC); // start conversion
     1f2:	ea e7       	ldi	r30, 0x7A	; 122
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     1fc:	80 81       	ld	r24, Z
     1fe:	86 fd       	sbrc	r24, 6
     200:	fd cf       	rjmp	.-6      	; 0x1fc <get_adc_value+0xa>
	return ADCH; // 8bit resolution, left adjusted
     202:	80 91 79 00 	lds	r24, 0x0079
	else{
		ADCSRA |= (1<<ADSC); // start conversion
		loop_until_bit_is_clear(ADCSRA, ADSC);
		return ADCH; // 8bit resolution, left adjusted
	}*/	
}
     206:	08 95       	ret

00000208 <get_temp_adc>:




uint8_t get_temp_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // port A5
     208:	85 e4       	ldi	r24, 0x45	; 69
     20a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     218:	80 81       	ld	r24, Z
     21a:	86 fd       	sbrc	r24, 6
     21c:	fd cf       	rjmp	.-6      	; 0x218 <get_temp_adc+0x10>
	return ADC;
     21e:	80 91 78 00 	lds	r24, 0x0078
     222:	90 91 79 00 	lds	r25, 0x0079
}
     226:	08 95       	ret

00000228 <get_light_adc>:

uint8_t get_light_adc(){
	ADMUX = (1 << REFS0) | (1 << MUX1)| (1<<ADLAR); // port A2
     228:	82 e6       	ldi	r24, 0x62	; 98
     22a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC); // start conversion
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 64       	ori	r24, 0x40	; 64
     236:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     238:	80 81       	ld	r24, Z
     23a:	86 fd       	sbrc	r24, 6
     23c:	fd cf       	rjmp	.-6      	; 0x238 <get_light_adc+0x10>
	return ADCH; // 8bit resolution, left adjusted
     23e:	80 91 79 00 	lds	r24, 0x0079
     242:	08 95       	ret

00000244 <init_ports>:

volatile int timerVariable = 0;


void init_ports(void){
	DDRD = 0b11110111; //set PORTD4 as INPUT
     244:	87 ef       	ldi	r24, 0xF7	; 247
     246:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //set PORTB as output
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	84 b9       	out	0x04, r24	; 4
}
     24c:	08 95       	ret

0000024e <init_ext_int>:

void init_ext_int(void){
	EICRA =(1<<ISC10); //setting interrupt triggering logic change
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	80 93 69 00 	sts	0x0069, r24
	EIMSK =(1<<INT1); //enabling interrupt1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;
     258:	10 92 80 00 	sts	0x0080, r1
}
     25c:	08 95       	ret

0000025e <get_timerVariable>:
		protocolCom();
	 }	
}

int get_timerVariable(){
	return timerVariable;
     25e:	80 91 fa 06 	lds	r24, 0x06FA
     262:	90 91 fb 06 	lds	r25, 0x06FB
}	
     266:	08 95       	ret

00000268 <getDistance>:
	omdat wanneer ik een if else statement gebruikte het niet de 
	gewenste resultaten toonde.GET
*/

double getDistance(){
	sei();
     268:	78 94       	sei
	//PORTB = (1<<PINB0); //set trigger HIGH
	PORTB |= _BV(PORTB0);
     26a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getDistance+0x8>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getDistance+0xe>
     276:	00 00       	nop
	_delay_ms(10); //10 ms delay
	//PORTB &= ~(1<<PINB0); //set trigger LOW
	PORTB &= ~_BV(PORTB0);
     278:	28 98       	cbi	0x05, 0	; 5
     27a:	8f e3       	ldi	r24, 0x3F	; 63
     27c:	9c e9       	ldi	r25, 0x9C	; 156
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <getDistance+0x16>
     282:	00 c0       	rjmp	.+0      	; 0x284 <getDistance+0x1c>
     284:	00 00       	nop
	_delay_ms(10);
	afstand = (pulse * 0.5) * 0.0023;
     286:	60 91 02 07 	lds	r22, 0x0702
     28a:	70 91 03 07 	lds	r23, 0x0703
     28e:	80 91 04 07 	lds	r24, 0x0704
     292:	90 91 05 07 	lds	r25, 0x0705
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 1d 0a 	call	0x143a	; 0x143a <__mulsf3>
     2a2:	29 e9       	ldi	r18, 0x99	; 153
     2a4:	3b eb       	ldi	r19, 0xBB	; 187
     2a6:	46 e1       	ldi	r20, 0x16	; 22
     2a8:	5b e3       	ldi	r21, 0x3B	; 59
     2aa:	0e 94 1d 0a 	call	0x143a	; 0x143a <__mulsf3>
     2ae:	26 2f       	mov	r18, r22
     2b0:	37 2f       	mov	r19, r23
     2b2:	f8 2f       	mov	r31, r24
     2b4:	e9 2f       	mov	r30, r25
     2b6:	46 2f       	mov	r20, r22
     2b8:	57 2f       	mov	r21, r23
     2ba:	68 2f       	mov	r22, r24
     2bc:	79 2f       	mov	r23, r25
     2be:	40 93 00 01 	sts	0x0100, r20
     2c2:	50 93 01 01 	sts	0x0101, r21
     2c6:	60 93 02 01 	sts	0x0102, r22
     2ca:	70 93 03 01 	sts	0x0103, r23
	return afstand;
}
     2ce:	82 2f       	mov	r24, r18
     2d0:	93 2f       	mov	r25, r19
     2d2:	af 2f       	mov	r26, r31
     2d4:	be 2f       	mov	r27, r30
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	08 95       	ret

000002dc <getTemp>:

double getTemp(){
	//uint8_t temp = get_adc_value(PC2);
	Volt = get_temp_adc() * 0.0048828125;
     2dc:	0e 94 04 01 	call	0x208	; 0x208 <get_temp_adc>
     2e0:	68 2f       	mov	r22, r24
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__floatsisf>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5b e3       	ldi	r21, 0x3B	; 59
     2f4:	0e 94 1d 0a 	call	0x143a	; 0x143a <__mulsf3>
     2f8:	26 2f       	mov	r18, r22
     2fa:	37 2f       	mov	r19, r23
     2fc:	f8 2f       	mov	r31, r24
     2fe:	e9 2f       	mov	r30, r25
     300:	46 2f       	mov	r20, r22
     302:	57 2f       	mov	r21, r23
     304:	68 2f       	mov	r22, r24
     306:	79 2f       	mov	r23, r25
     308:	40 93 0a 07 	sts	0x070A, r20
     30c:	50 93 0b 07 	sts	0x070B, r21
     310:	60 93 0c 07 	sts	0x070C, r22
     314:	70 93 0d 07 	sts	0x070D, r23
	ADCRes = (Volt - 0.5) * 100;
     318:	82 2f       	mov	r24, r18
     31a:	93 2f       	mov	r25, r19
     31c:	af 2f       	mov	r26, r31
     31e:	be 2f       	mov	r27, r30
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__subsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	48 ec       	ldi	r20, 0xC8	; 200
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 1d 0a 	call	0x143a	; 0x143a <__mulsf3>
     33c:	26 2f       	mov	r18, r22
     33e:	37 2f       	mov	r19, r23
     340:	f8 2f       	mov	r31, r24
     342:	e9 2f       	mov	r30, r25
     344:	46 2f       	mov	r20, r22
     346:	57 2f       	mov	r21, r23
     348:	68 2f       	mov	r22, r24
     34a:	79 2f       	mov	r23, r25
     34c:	40 93 2e 07 	sts	0x072E, r20
     350:	50 93 2f 07 	sts	0x072F, r21
     354:	60 93 30 07 	sts	0x0730, r22
     358:	70 93 31 07 	sts	0x0731, r23
	return ADCRes;
}
     35c:	82 2f       	mov	r24, r18
     35e:	93 2f       	mov	r25, r19
     360:	af 2f       	mov	r26, r31
     362:	be 2f       	mov	r27, r30
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	08 95       	ret

0000036a <getLight>:

uint8_t getLight(){
	//uint8_t temp = get_adc_value(PC5);
	uint8_t temp = get_light_adc();
     36a:	0e 94 14 01 	call	0x228	; 0x228 <get_light_adc>
	return temp;
}
     36e:	08 95       	ret

00000370 <init_timer>:

void init_timer (void){
	//8bittimer
	TCCR0A = (1<< WGM01); // set CTC Bit
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156.25; // Dit geeft 1/10 miliseconde
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<< OCIE0A);
     378:	80 93 6e 00 	sts	0x006E, r24
	
	TCCR0B |= (1 << CS02) | (1 <<CS00); // start at 1024 prescaler
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	85 60       	ori	r24, 0x05	; 5
     380:	85 bd       	out	0x25, r24	; 37
}
     382:	08 95       	ret

00000384 <main>:
	TCCR1A = 0;
}

int main(void)
{
	init_scherm_ports();
     384:	0e 94 38 08 	call	0x1070	; 0x1070 <init_scherm_ports>
	init_timer();
     388:	0e 94 b8 01 	call	0x370	; 0x370 <init_timer>
	ser_init();
     38c:	0e 94 b1 07 	call	0xf62	; 0xf62 <ser_init>
	ADC_init();
     390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ADC_init>
	
	init_ports();
     394:	0e 94 22 01 	call	0x244	; 0x244 <init_ports>
	init_ext_int();
     398:	0e 94 27 01 	call	0x24e	; 0x24e <init_ext_int>
	sei(); // set external interrupt
     39c:	78 94       	sei
	  
	//printf("An interrupt should be occuring every 30 seconds\n");
	
	
	while(1){
		protocolCom();
     39e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <protocolCom>
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x1a>

000003a4 <__vector_14>:

/*
Timerinterrupt geeft om de 5* seconden een interrupt
https://eleccelerator.com/avr-timer-calculator/
*/
ISR(TIMER0_COMPA_vect){
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
	//sei();
	
	extraTime1++;
     3b2:	80 91 fc 06 	lds	r24, 0x06FC
     3b6:	90 91 fd 06 	lds	r25, 0x06FD
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 fd 06 	sts	0x06FD, r25
     3c0:	80 93 fc 06 	sts	0x06FC, r24
	if(extraTime1>100){
     3c4:	80 91 fc 06 	lds	r24, 0x06FC
     3c8:	90 91 fd 06 	lds	r25, 0x06FD
     3cc:	85 36       	cpi	r24, 0x65	; 101
     3ce:	91 05       	cpc	r25, r1
     3d0:	6c f0       	brlt	.+26     	; 0x3ec <__vector_14+0x48>
		timerVariable++;
     3d2:	80 91 fa 06 	lds	r24, 0x06FA
     3d6:	90 91 fb 06 	lds	r25, 0x06FB
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 fb 06 	sts	0x06FB, r25
     3e0:	80 93 fa 06 	sts	0x06FA, r24
		extraTime1 = 0;
     3e4:	10 92 fd 06 	sts	0x06FD, r1
     3e8:	10 92 fc 06 	sts	0x06FC, r1
	}
	extraTime++;
     3ec:	80 91 fe 06 	lds	r24, 0x06FE
     3f0:	90 91 ff 06 	lds	r25, 0x06FF
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	90 93 ff 06 	sts	0x06FF, r25
     3fa:	80 93 fe 06 	sts	0x06FE, r24
		}	
		
		// Resets de timer en de Totale timer ticks*//*
		extraTime = 0;
	}*/
}
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_2>:


// Voor de afstandsensor
ISR(INT1_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	if(i == 1)
     432:	80 91 00 07 	lds	r24, 0x0700
     436:	90 91 01 07 	lds	r25, 0x0701
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	91 05       	cpc	r25, r1
     43e:	d1 f4       	brne	.+52     	; 0x474 <__vector_2+0x68>
	{
		TCCR1B = 0; //Stop counter
     440:	10 92 81 00 	sts	0x0081, r1
		pulse = TCNT1; //Write duration (TCNT1) to pulse
     444:	c4 e8       	ldi	r28, 0x84	; 132
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	68 81       	ld	r22, Y
     44a:	79 81       	ldd	r23, Y+1	; 0x01
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 67 09 	call	0x12ce	; 0x12ce <__floatunsisf>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	80 93 02 07 	sts	0x0702, r24
     45c:	90 93 03 07 	sts	0x0703, r25
     460:	a0 93 04 07 	sts	0x0704, r26
     464:	b0 93 05 07 	sts	0x0705, r27
		TCNT1 = 0; //Reset duration
     468:	19 82       	std	Y+1, r1	; 0x01
     46a:	18 82       	st	Y, r1
		i = 0; //Reset counter
     46c:	10 92 01 07 	sts	0x0701, r1
     470:	10 92 00 07 	sts	0x0700, r1
	}

	if(i==0)
     474:	80 91 00 07 	lds	r24, 0x0700
     478:	90 91 01 07 	lds	r25, 0x0701
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	59 f4       	brne	.+22     	; 0x496 <__vector_2+0x8a>
	{
		TCCR1B |= (1<<CS10); //Start counter
     480:	e1 e8       	ldi	r30, 0x81	; 129
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 83       	st	Z, r24
		i = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 01 07 	sts	0x0701, r25
     492:	80 93 00 07 	sts	0x0700, r24
	}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <set_Naam>:
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4c4:	c0 91 06 07 	lds	r28, 0x0706
     4c8:	d0 91 07 07 	lds	r29, 0x0707
     4cc:	20 91 1c 01 	lds	r18, 0x011C
     4d0:	30 91 1d 01 	lds	r19, 0x011D
     4d4:	2c 17       	cp	r18, r28
     4d6:	3d 07       	cpc	r19, r29
     4d8:	8c f0       	brlt	.+34     	; 0x4fc <set_Naam+0x40>
char maxUnrollRes[4];


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
     4da:	8c 01       	movw	r16, r24
     4dc:	0c 0f       	add	r16, r28
     4de:	1d 1f       	adc	r17, r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
     4e0:	f8 01       	movw	r30, r16
     4e2:	61 91       	ld	r22, Z+
     4e4:	8f 01       	movw	r16, r30
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>


	 
	 //Zetten van naam.
	 void set_Naam(char* n){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	80 91 1c 01 	lds	r24, 0x011C
     4f2:	90 91 1d 01 	lds	r25, 0x011D
     4f6:	8c 17       	cp	r24, r28
     4f8:	9d 07       	cpc	r25, r29
     4fa:	94 f7       	brge	.-28     	; 0x4e0 <set_Naam+0x24>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <get_Naam>:

	 //Retourneren van naam
	 char* get_Naam(){
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     50e:	c0 91 06 07 	lds	r28, 0x0706
     512:	d0 91 07 07 	lds	r29, 0x0707
     516:	80 91 1c 01 	lds	r24, 0x011C
     51a:	90 91 1d 01 	lds	r25, 0x011D
     51e:	8c 17       	cp	r24, r28
     520:	9d 07       	cpc	r25, r29
     522:	8c f0       	brlt	.+34     	; 0x546 <get_Naam+0x40>
			 eeprom_update_byte((uint8_t*)teller,n[teller]);
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
     524:	8e 01       	movw	r16, r28
     526:	00 59       	subi	r16, 0x90	; 144
     528:	18 4f       	sbci	r17, 0xF8	; 248
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     530:	f8 01       	movw	r30, r16
     532:	81 93       	st	Z+, r24
     534:	8f 01       	movw	r16, r30
		 }
	 }

	 //Retourneren van naam
	 char* get_Naam(){
		 for (int teller = locNaam; teller <= grensTellerNaam; teller++){
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	80 91 1c 01 	lds	r24, 0x011C
     53c:	90 91 1d 01 	lds	r25, 0x011D
     540:	8c 17       	cp	r24, r28
     542:	9d 07       	cpc	r25, r29
     544:	94 f7       	brge	.-28     	; 0x52a <get_Naam+0x24>
			 naamRes[teller] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return naamRes;
	 }
     546:	80 e7       	ldi	r24, 0x70	; 112
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <set_Locatie>:

	 //Zetten van locatie.
	 void set_Locatie(char* l){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	8c 01       	movw	r16, r24
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     55e:	c0 91 0e 01 	lds	r28, 0x010E
     562:	d0 91 0f 01 	lds	r29, 0x010F
     566:	80 91 1a 01 	lds	r24, 0x011A
     56a:	90 91 1b 01 	lds	r25, 0x011B
     56e:	99 23       	and	r25, r25
     570:	cc f0       	brlt	.+50     	; 0x5a4 <set_Locatie+0x50>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
     576:	f8 01       	movw	r30, r16
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	ce 01       	movw	r24, r28
     57e:	60 81       	ld	r22, Z
     580:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>
		 return naamRes;
	 }

	 //Zetten van locatie.
	 void set_Locatie(char* l){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	80 91 0e 01 	lds	r24, 0x010E
     58a:	90 91 0f 01 	lds	r25, 0x010F
     58e:	9e 01       	movw	r18, r28
     590:	28 1b       	sub	r18, r24
     592:	39 0b       	sbc	r19, r25
     594:	c9 01       	movw	r24, r18
     596:	20 91 1a 01 	lds	r18, 0x011A
     59a:	30 91 1b 01 	lds	r19, 0x011B
     59e:	28 17       	cp	r18, r24
     5a0:	39 07       	cpc	r19, r25
     5a2:	4c f7       	brge	.-46     	; 0x576 <set_Locatie+0x22>
			 eeprom_update_byte((uint8_t*)teller,l[teller - locLocatie]);
		 }
	 }
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <get_Locatie>:

	 //Retourneren van locatie.
	 char* get_Locatie(){
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5be:	e0 90 0e 01 	lds	r14, 0x010E
     5c2:	f0 90 0f 01 	lds	r15, 0x010F
     5c6:	80 91 1a 01 	lds	r24, 0x011A
     5ca:	90 91 1b 01 	lds	r25, 0x011B
     5ce:	99 23       	and	r25, r25
     5d0:	ec f0       	brlt	.+58     	; 0x60c <get_Locatie+0x5e>
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
     5da:	0f 2e       	mov	r0, r31
     5dc:	f1 e4       	ldi	r31, 0x41	; 65
     5de:	cf 2e       	mov	r12, r31
     5e0:	f7 e0       	ldi	r31, 0x07	; 7
     5e2:	df 2e       	mov	r13, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	c7 01       	movw	r24, r14
     5e8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     5ec:	cc 0d       	add	r28, r12
     5ee:	dd 1d       	adc	r29, r13
     5f0:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van locatie.
	 char* get_Locatie(){
		 for (int teller = locLocatie; (teller - locLocatie) <= grensTellerLocatie; teller++){
     5f2:	08 94       	sec
     5f4:	e1 1c       	adc	r14, r1
     5f6:	f1 1c       	adc	r15, r1
     5f8:	e8 01       	movw	r28, r16
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	80 91 1a 01 	lds	r24, 0x011A
     602:	90 91 1b 01 	lds	r25, 0x011B
     606:	8c 17       	cp	r24, r28
     608:	9d 07       	cpc	r25, r29
     60a:	6c f7       	brge	.-38     	; 0x5e6 <get_Locatie+0x38>
			 locatieRes[teller - locLocatie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return locatieRes;
	 }
     60c:	81 e4       	ldi	r24, 0x41	; 65
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <set_Versie>:

	 //Zetten van versienummer.
	 void set_Versie(char* v){
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	8c 01       	movw	r16, r24
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     62c:	c0 91 0c 01 	lds	r28, 0x010C
     630:	d0 91 0d 01 	lds	r29, 0x010D
     634:	80 91 18 01 	lds	r24, 0x0118
     638:	90 91 19 01 	lds	r25, 0x0119
     63c:	99 23       	and	r25, r25
     63e:	cc f0       	brlt	.+50     	; 0x672 <set_Versie+0x50>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
     644:	f8 01       	movw	r30, r16
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	ce 01       	movw	r24, r28
     64c:	60 81       	ld	r22, Z
     64e:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>
		 return locatieRes;
	 }

	 //Zetten van versienummer.
	 void set_Versie(char* v){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	80 91 0c 01 	lds	r24, 0x010C
     658:	90 91 0d 01 	lds	r25, 0x010D
     65c:	9e 01       	movw	r18, r28
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	c9 01       	movw	r24, r18
     664:	20 91 18 01 	lds	r18, 0x0118
     668:	30 91 19 01 	lds	r19, 0x0119
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	4c f7       	brge	.-46     	; 0x644 <set_Versie+0x22>
			 eeprom_update_byte((uint8_t*)teller,v[teller - locVersie]);
		 }
	 }
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <get_Versie>:

	 //Retourneren versie nummer.
	 char* get_Versie(){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     68c:	e0 90 0c 01 	lds	r14, 0x010C
     690:	f0 90 0d 01 	lds	r15, 0x010D
     694:	80 91 18 01 	lds	r24, 0x0118
     698:	90 91 19 01 	lds	r25, 0x0119
     69c:	99 23       	and	r25, r25
     69e:	ec f0       	brlt	.+58     	; 0x6da <get_Versie+0x5e>
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
     6a8:	0f 2e       	mov	r0, r31
     6aa:	fc e9       	ldi	r31, 0x9C	; 156
     6ac:	cf 2e       	mov	r12, r31
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	c7 01       	movw	r24, r14
     6b6:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     6ba:	cc 0d       	add	r28, r12
     6bc:	dd 1d       	adc	r29, r13
     6be:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren versie nummer.
	 char* get_Versie(){
		 for (int teller = locVersie; (teller - locVersie) <= grensTellerVersie; teller++){
     6c0:	08 94       	sec
     6c2:	e1 1c       	adc	r14, r1
     6c4:	f1 1c       	adc	r15, r1
     6c6:	e8 01       	movw	r28, r16
     6c8:	0f 5f       	subi	r16, 0xFF	; 255
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	80 91 18 01 	lds	r24, 0x0118
     6d0:	90 91 19 01 	lds	r25, 0x0119
     6d4:	8c 17       	cp	r24, r28
     6d6:	9d 07       	cpc	r25, r29
     6d8:	6c f7       	brge	.-38     	; 0x6b4 <get_Versie+0x38>
			 versieRes[teller - locVersie] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return versieRes;
	 }
     6da:	8c e9       	ldi	r24, 0x9C	; 156
     6dc:	97 e0       	ldi	r25, 0x07	; 7
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	08 95       	ret

000006f0 <set_grensTemp>:

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	8c 01       	movw	r16, r24
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     6fa:	c0 91 0a 01 	lds	r28, 0x010A
     6fe:	d0 91 0b 01 	lds	r29, 0x010B
     702:	80 91 16 01 	lds	r24, 0x0116
     706:	90 91 17 01 	lds	r25, 0x0117
     70a:	99 23       	and	r25, r25
     70c:	cc f0       	brlt	.+50     	; 0x740 <set_grensTemp+0x50>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
     712:	f8 01       	movw	r30, r16
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	ce 01       	movw	r24, r28
     71a:	60 81       	ld	r22, Z
     71c:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>
		 return versieRes;
	 }

	 //Zetten van grens_temperatuur grenswaarde.
	 void set_grensTemp(char* t){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     720:	21 96       	adiw	r28, 0x01	; 1
     722:	80 91 0a 01 	lds	r24, 0x010A
     726:	90 91 0b 01 	lds	r25, 0x010B
     72a:	9e 01       	movw	r18, r28
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	c9 01       	movw	r24, r18
     732:	20 91 16 01 	lds	r18, 0x0116
     736:	30 91 17 01 	lds	r19, 0x0117
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4c f7       	brge	.-46     	; 0x712 <set_grensTemp+0x22>
			 eeprom_update_byte((uint8_t*)teller,t[teller - locTemp]);
		 }
	 }
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <get_grensTemp>:

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     75a:	e0 90 0a 01 	lds	r14, 0x010A
     75e:	f0 90 0b 01 	lds	r15, 0x010B
     762:	80 91 16 01 	lds	r24, 0x0116
     766:	90 91 17 01 	lds	r25, 0x0117
     76a:	99 23       	and	r25, r25
     76c:	ec f0       	brlt	.+58     	; 0x7a8 <get_grensTemp+0x5e>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
     776:	0f 2e       	mov	r0, r31
     778:	fd e6       	ldi	r31, 0x6D	; 109
     77a:	cf 2e       	mov	r12, r31
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	c7 01       	movw	r24, r14
     784:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     788:	cc 0d       	add	r28, r12
     78a:	dd 1d       	adc	r29, r13
     78c:	88 83       	st	Y, r24
		 }
	 }

	 //Retourneren van grenswaarde grens_temperatuur.
	 char* get_grensTemp(){
		 for (int teller = locTemp; (teller - locTemp) <= grensTellerTemp; teller++){
     78e:	08 94       	sec
     790:	e1 1c       	adc	r14, r1
     792:	f1 1c       	adc	r15, r1
     794:	e8 01       	movw	r28, r16
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	80 91 16 01 	lds	r24, 0x0116
     79e:	90 91 17 01 	lds	r25, 0x0117
     7a2:	8c 17       	cp	r24, r28
     7a4:	9d 07       	cpc	r25, r29
     7a6:	6c f7       	brge	.-38     	; 0x782 <get_grensTemp+0x38>
			 grens_temperatuurRes[teller - locTemp] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_TEMP:" ), ser_writeln(grens_temperatuurRes);
		 return grens_temperatuurRes;
	 }
     7a8:	8d e6       	ldi	r24, 0x6D	; 109
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <set_grensLicht>:

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	8c 01       	movw	r16, r24
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7c8:	c0 91 08 01 	lds	r28, 0x0108
     7cc:	d0 91 09 01 	lds	r29, 0x0109
     7d0:	80 91 14 01 	lds	r24, 0x0114
     7d4:	90 91 15 01 	lds	r25, 0x0115
     7d8:	99 23       	and	r25, r25
     7da:	cc f0       	brlt	.+50     	; 0x80e <set_grensLicht+0x50>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	e8 0f       	add	r30, r24
     7e4:	f9 1f       	adc	r31, r25
     7e6:	ce 01       	movw	r24, r28
     7e8:	60 81       	ld	r22, Z
     7ea:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>
		 return grens_temperatuurRes;
	 }

	 //Zetten van grens_lichtintensiteit grenswaarde.
	 void set_grensLicht(char* li){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	80 91 08 01 	lds	r24, 0x0108
     7f4:	90 91 09 01 	lds	r25, 0x0109
     7f8:	9e 01       	movw	r18, r28
     7fa:	28 1b       	sub	r18, r24
     7fc:	39 0b       	sbc	r19, r25
     7fe:	c9 01       	movw	r24, r18
     800:	20 91 14 01 	lds	r18, 0x0114
     804:	30 91 15 01 	lds	r19, 0x0115
     808:	28 17       	cp	r18, r24
     80a:	39 07       	cpc	r19, r25
     80c:	4c f7       	brge	.-46     	; 0x7e0 <set_grensLicht+0x22>
			 eeprom_update_byte((uint8_t*)teller,li[teller - locLicht]);
		 }
	 }
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <get_grensLight>:


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     824:	e0 90 08 01 	lds	r14, 0x0108
     828:	f0 90 09 01 	lds	r15, 0x0109
     82c:	80 91 14 01 	lds	r24, 0x0114
     830:	90 91 15 01 	lds	r25, 0x0115
     834:	99 23       	and	r25, r25
     836:	bc f0       	brlt	.+46     	; 0x866 <get_grensLight+0x4e>
     838:	01 e0       	ldi	r16, 0x01	; 1
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
     840:	c7 01       	movw	r24, r14
     842:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     846:	cc 55       	subi	r28, 0x5C	; 92
     848:	d8 4f       	sbci	r29, 0xF8	; 248
     84a:	88 83       	st	Y, r24
	 }


	 //Retourneren van grenswaarde grens_lichtintensiteit.
	 char* get_grensLight(){
		 for (int teller = locLicht; (teller - locLicht) <= grensTellerLicht; teller++){
     84c:	08 94       	sec
     84e:	e1 1c       	adc	r14, r1
     850:	f1 1c       	adc	r15, r1
     852:	e8 01       	movw	r28, r16
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	80 91 14 01 	lds	r24, 0x0114
     85c:	90 91 15 01 	lds	r25, 0x0115
     860:	8c 17       	cp	r24, r28
     862:	9d 07       	cpc	r25, r29
     864:	6c f7       	brge	.-38     	; 0x840 <get_grensLight+0x28>
			 grens_lichtintRes[teller - locLicht] = eeprom_read_byte((uint8_t*)teller);
		 }
		 //ser_write("202 GRENS_LIGHT:" ), ser_writeln(grens_lichtintRes);
		 return grens_lichtintRes;
	 }
     866:	84 ea       	ldi	r24, 0xA4	; 164
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <set_minUnroll>:

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	8c 01       	movw	r16, r24
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     882:	c0 91 06 01 	lds	r28, 0x0106
     886:	d0 91 07 01 	lds	r29, 0x0107
     88a:	80 91 12 01 	lds	r24, 0x0112
     88e:	90 91 13 01 	lds	r25, 0x0113
     892:	99 23       	and	r25, r25
     894:	cc f0       	brlt	.+50     	; 0x8c8 <set_minUnroll+0x50>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
     89a:	f8 01       	movw	r30, r16
     89c:	e8 0f       	add	r30, r24
     89e:	f9 1f       	adc	r31, r25
     8a0:	ce 01       	movw	r24, r28
     8a2:	60 81       	ld	r22, Z
     8a4:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>
		 return grens_lichtintRes;
	 }

	 //Zetten van de maximale inrol.
	 void set_minUnroll(char* in){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8a8:	21 96       	adiw	r28, 0x01	; 1
     8aa:	80 91 06 01 	lds	r24, 0x0106
     8ae:	90 91 07 01 	lds	r25, 0x0107
     8b2:	9e 01       	movw	r18, r28
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	c9 01       	movw	r24, r18
     8ba:	20 91 12 01 	lds	r18, 0x0112
     8be:	30 91 13 01 	lds	r19, 0x0113
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	4c f7       	brge	.-46     	; 0x89a <set_minUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,in[teller - locminUnroll]);
		 }
		 
	 }
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <get_minUnroll>:


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     8de:	e0 90 06 01 	lds	r14, 0x0106
     8e2:	f0 90 07 01 	lds	r15, 0x0107
     8e6:	80 91 12 01 	lds	r24, 0x0112
     8ea:	90 91 13 01 	lds	r25, 0x0113
     8ee:	99 23       	and	r25, r25
     8f0:	bc f0       	brlt	.+46     	; 0x920 <__stack+0x21>
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
     8fa:	c7 01       	movw	r24, r14
     8fc:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     900:	ce 5c       	subi	r28, 0xCE	; 206
     902:	d8 4f       	sbci	r29, 0xF8	; 248
     904:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale inrol waarde.
	 char* get_minUnroll(){
		 for (int teller = locminUnroll; (teller - locminUnroll) <= grensTellerminUnroll; teller++){
     906:	08 94       	sec
     908:	e1 1c       	adc	r14, r1
     90a:	f1 1c       	adc	r15, r1
     90c:	e8 01       	movw	r28, r16
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	80 91 12 01 	lds	r24, 0x0112
     916:	90 91 13 01 	lds	r25, 0x0113
     91a:	8c 17       	cp	r24, r28
     91c:	9d 07       	cpc	r25, r29
     91e:	6c f7       	brge	.-38     	; 0x8fa <get_minUnroll+0x28>
			 minUnrollRes[teller - locminUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return minUnrollRes;
	 }
     920:	82 e3       	ldi	r24, 0x32	; 50
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <set_maxUnroll>:

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	8c 01       	movw	r16, r24
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     93c:	c0 91 04 01 	lds	r28, 0x0104
     940:	d0 91 05 01 	lds	r29, 0x0105
     944:	80 91 10 01 	lds	r24, 0x0110
     948:	90 91 11 01 	lds	r25, 0x0111
     94c:	99 23       	and	r25, r25
     94e:	cc f0       	brlt	.+50     	; 0x982 <set_maxUnroll+0x50>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
     954:	f8 01       	movw	r30, r16
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ce 01       	movw	r24, r28
     95c:	60 81       	ld	r22, Z
     95e:	0e 94 de 11 	call	0x23bc	; 0x23bc <__eeupd_byte_m328p>
		 return minUnrollRes;
	 }

	 //Zetten van de maximale uitrol.
	 void set_maxUnroll(char* uit){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     962:	21 96       	adiw	r28, 0x01	; 1
     964:	80 91 04 01 	lds	r24, 0x0104
     968:	90 91 05 01 	lds	r25, 0x0105
     96c:	9e 01       	movw	r18, r28
     96e:	28 1b       	sub	r18, r24
     970:	39 0b       	sbc	r19, r25
     972:	c9 01       	movw	r24, r18
     974:	20 91 10 01 	lds	r18, 0x0110
     978:	30 91 11 01 	lds	r19, 0x0111
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	4c f7       	brge	.-46     	; 0x954 <set_maxUnroll+0x22>
			 eeprom_update_byte((uint8_t*)teller,uit[teller - locmaxUnroll]);
		 }
	 }
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <get_maxUnroll>:


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     998:	e0 90 04 01 	lds	r14, 0x0104
     99c:	f0 90 05 01 	lds	r15, 0x0105
     9a0:	80 91 10 01 	lds	r24, 0x0110
     9a4:	90 91 11 01 	lds	r25, 0x0111
     9a8:	99 23       	and	r25, r25
     9aa:	bc f0       	brlt	.+46     	; 0x9da <get_maxUnroll+0x4e>
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
     9b4:	c7 01       	movw	r24, r14
     9b6:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__eerd_byte_m328p>
     9ba:	ce 52       	subi	r28, 0x2E	; 46
     9bc:	d8 4f       	sbci	r29, 0xF8	; 248
     9be:	88 83       	st	Y, r24
	 }


	 //Retourneren van de maximale uitrol waarde.
	 char* get_maxUnroll(){
		 for (int teller = locmaxUnroll; (teller - locmaxUnroll) <= grensTellermaxUnroll; teller++){
     9c0:	08 94       	sec
     9c2:	e1 1c       	adc	r14, r1
     9c4:	f1 1c       	adc	r15, r1
     9c6:	e8 01       	movw	r28, r16
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	80 91 10 01 	lds	r24, 0x0110
     9d0:	90 91 11 01 	lds	r25, 0x0111
     9d4:	8c 17       	cp	r24, r28
     9d6:	9d 07       	cpc	r25, r29
     9d8:	6c f7       	brge	.-38     	; 0x9b4 <get_maxUnroll+0x28>
			 maxUnrollRes[teller - locmaxUnroll] = eeprom_read_byte((uint8_t*)teller);
		 }
		 return maxUnrollRes;
     9da:	82 ed       	ldi	r24, 0xD2	; 210
     9dc:	97 e0       	ldi	r25, 0x07	; 7
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <set_substring>:

//_______________________________________________________________________________________________//
	

void set_substring(){
	char * p1 = strstr (in_buf, "(");
     9ec:	86 e0       	ldi	r24, 0x06	; 6
     9ee:	98 e0       	ldi	r25, 0x08	; 8
     9f0:	68 e2       	ldi	r22, 0x28	; 40
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <strchr>
	p1[strlen(p1) -1] = '\0';
     9f8:	e8 2f       	mov	r30, r24
     9fa:	f9 2f       	mov	r31, r25
     9fc:	df 01       	movw	r26, r30
     9fe:	0d 90       	ld	r0, X+
     a00:	00 20       	and	r0, r0
     a02:	e9 f7       	brne	.-6      	; 0x9fe <set_substring+0x12>
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	ae 1b       	sub	r26, r30
     a08:	bf 0b       	sbc	r27, r31
     a0a:	a8 0f       	add	r26, r24
     a0c:	b9 1f       	adc	r27, r25
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	1c 92       	st	X, r1
	substring = p1 +1;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 03 08 	sts	0x0803, r25
     a18:	80 93 02 08 	sts	0x0802, r24
     a1c:	08 95       	ret

00000a1e <protocolCom>:
char *temporaryget;

char HANDSHAKE[10] = {'k', 'e', 'r', 's', 't', 'h', 'a', 'a', 'n', '\0'};

// De handshakeprocedure is niet compleet. Wanneer 
void protocolCom(){
     a1e:	2f 92       	push	r2
     a20:	3f 92       	push	r3
     a22:	4f 92       	push	r4
     a24:	5f 92       	push	r5
     a26:	6f 92       	push	r6
     a28:	7f 92       	push	r7
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	ser_write("201 Please enter ID");
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
	ser_readln(in_buf, sizeof(in_buf), 1);
     a4a:	c6 e0       	ldi	r28, 0x06	; 6
     a4c:	d8 e0       	ldi	r29, 0x08	; 8
     a4e:	ce 01       	movw	r24, r28
     a50:	6e e1       	ldi	r22, 0x1E	; 30
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 f9 07 	call	0xff2	; 0xff2 <ser_readln>
	int ret;
	ret = strcmp(HANDSHAKE, in_buf);
     a5a:	88 e7       	ldi	r24, 0x78	; 120
     a5c:	96 e0       	ldi	r25, 0x06	; 6
     a5e:	be 01       	movw	r22, r28
     a60:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     a64:	28 2f       	mov	r18, r24
     a66:	39 2f       	mov	r19, r25
	if(ret |= 0){
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	29 f0       	breq	.+10     	; 0xa78 <protocolCom+0x5a>
		ser_writeln("504: Verkeerde ID");
     a6e:	82 e3       	ldi	r24, 0x32	; 50
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     a76:	62 c2       	rjmp	.+1220   	; 0xf3c <protocolCom+0x51e>
	}
	else{
		// groeneotter is het antwoord op de handshake
		printf("201 groeneotter Please enter version");
     a78:	00 d0       	rcall	.+0      	; 0xa7a <protocolCom+0x5c>
     a7a:	84 e4       	ldi	r24, 0x44	; 68
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	ad b7       	in	r26, 0x3d	; 61
     a80:	be b7       	in	r27, 0x3e	; 62
     a82:	12 96       	adiw	r26, 0x02	; 2
     a84:	9c 93       	st	X, r25
     a86:	8e 93       	st	-X, r24
     a88:	11 97       	sbiw	r26, 0x01	; 1
     a8a:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
		ser_readln(in_buf, sizeof(in_buf), 1);
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	c6 e0       	ldi	r28, 0x06	; 6
     a94:	d8 e0       	ldi	r29, 0x08	; 8
     a96:	ce 01       	movw	r24, r28
     a98:	6e e1       	ldi	r22, 0x1E	; 30
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	0e 94 f9 07 	call	0xff2	; 0xff2 <ser_readln>
		char* c = get_Versie();
     aa2:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
		double x;
		x = strtod(c, NULL);
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <strtod>
		if(strcmp(get_Versie(), in_buf)){
     aae:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
     ab2:	be 01       	movw	r22, r28
     ab4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     ab8:	28 2f       	mov	r18, r24
     aba:	39 2f       	mov	r19, r25
     abc:	21 15       	cp	r18, r1
     abe:	31 05       	cpc	r19, r1
     ac0:	29 f0       	breq	.+10     	; 0xacc <protocolCom+0xae>
			ser_writeln("504 Wrong version");
     ac2:	89 e6       	ldi	r24, 0x69	; 105
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     aca:	38 c2       	rjmp	.+1136   	; 0xf3c <protocolCom+0x51e>
		}
		else{
			ser_writeln("200");
     acc:	8b e7       	ldi	r24, 0x7B	; 123
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     ad4:	0f e7       	ldi	r16, 0x7F	; 127
     ad6:	11 e0       	ldi	r17, 0x01	; 1
				ser_readln(in_buf, sizeof(in_buf), 1);
     ad8:	c6 e0       	ldi	r28, 0x06	; 6
     ada:	d8 e0       	ldi	r29, 0x08	; 8
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     adc:	0f 2e       	mov	r0, r31
     ade:	f8 e9       	ldi	r31, 0x98	; 152
     ae0:	ef 2e       	mov	r14, r31
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	ff 2e       	mov	r15, r31
     ae6:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 0){
					uitrollen();
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     ae8:	0f 2e       	mov	r0, r31
     aea:	f0 ec       	ldi	r31, 0xC0	; 192
     aec:	af 2e       	mov	r10, r31
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	bf 2e       	mov	r11, r31
     af2:	f0 2d       	mov	r31, r0
				} if((get_unrollStatus() % 2) == 1){
					oprollen();
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     af4:	0f 2e       	mov	r0, r31
     af6:	f7 ee       	ldi	r31, 0xE7	; 231
     af8:	cf 2e       	mov	r12, r31
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	df 2e       	mov	r13, r31
     afe:	f0 2d       	mov	r31, r0
				printf("202 Status: %i", get_unrollStatus());
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     b00:	0f 2e       	mov	r0, r31
     b02:	fd ef       	ldi	r31, 0xFD	; 253
     b04:	8f 2e       	mov	r8, r31
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	9f 2e       	mov	r9, r31
     b0a:	f0 2d       	mov	r31, r0
				printf("202 TEMP= % 6.2f \n", getTemp());
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     b0c:	0f 2e       	mov	r0, r31
     b0e:	f9 e1       	ldi	r31, 0x19	; 25
     b10:	6f 2e       	mov	r6, r31
     b12:	f2 e0       	ldi	r31, 0x02	; 2
     b14:	7f 2e       	mov	r7, r31
     b16:	f0 2d       	mov	r31, r0
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     b18:	0f 2e       	mov	r0, r31
     b1a:	f8 e3       	ldi	r31, 0x38	; 56
     b1c:	4f 2e       	mov	r4, r31
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	5f 2e       	mov	r5, r31
     b22:	f0 2d       	mov	r31, r0
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     b24:	0f 2e       	mov	r0, r31
     b26:	f4 e6       	ldi	r31, 0x64	; 100
     b28:	2f 2e       	mov	r2, r31
     b2a:	f2 e0       	ldi	r31, 0x02	; 2
     b2c:	3f 2e       	mov	r3, r31
     b2e:	f0 2d       	mov	r31, r0
			ser_writeln("504 Wrong version");
		}
		else{
			ser_writeln("200");
			while (1) {
				ser_write("Wat kan ik voor u doen? ");
     b30:	c8 01       	movw	r24, r16
     b32:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
				ser_readln(in_buf, sizeof(in_buf), 1);
     b36:	ce 01       	movw	r24, r28
     b38:	6e e1       	ldi	r22, 0x1E	; 30
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	0e 94 f9 07 	call	0xff2	; 0xff2 <ser_readln>
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("UNROLL", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     b42:	c7 01       	movw	r24, r14
     b44:	be 01       	movw	r22, r28
     b46:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     b4a:	28 2f       	mov	r18, r24
     b4c:	39 2f       	mov	r19, r25
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	a1 f4       	brne	.+40     	; 0xb7c <protocolCom+0x15e>
				if ((get_unrollStatus() % 2) == 1){
     b54:	0e 94 33 08 	call	0x1066	; 0x1066 <get_unrollStatus>
     b58:	62 e0       	ldi	r22, 0x02	; 2
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__divmodhi4>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	91 05       	cpc	r25, r1
     b64:	21 f4       	brne	.+8      	; 0xb6e <protocolCom+0x150>
					ser_writeln("501 Zonnescherm is al uitgerold!");
     b66:	8f e9       	ldi	r24, 0x9F	; 159
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
				} if((get_unrollStatus() % 2) == 0){
     b6e:	0e 94 33 08 	call	0x1066	; 0x1066 <get_unrollStatus>
     b72:	80 fd       	sbrc	r24, 0
     b74:	1f c0       	rjmp	.+62     	; 0xbb4 <protocolCom+0x196>
					uitrollen();
     b76:	0e 94 44 08 	call	0x1088	; 0x1088 <uitrollen>
     b7a:	1c c0       	rjmp	.+56     	; 0xbb4 <protocolCom+0x196>
				}				
			}
/*---------------------------------------------------------Zonnescherm oprollen------------------------------------------------------------*/ 
			else if(strcmp("ROLLUP", in_buf) == 0){
     b7c:	c5 01       	movw	r24, r10
     b7e:	be 01       	movw	r22, r28
     b80:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     b84:	28 2f       	mov	r18, r24
     b86:	39 2f       	mov	r19, r25
     b88:	21 15       	cp	r18, r1
     b8a:	31 05       	cpc	r19, r1
     b8c:	99 f4       	brne	.+38     	; 0xbb4 <protocolCom+0x196>
				if ((get_unrollStatus() % 2) == 0){
     b8e:	0e 94 33 08 	call	0x1066	; 0x1066 <get_unrollStatus>
     b92:	80 fd       	sbrc	r24, 0
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <protocolCom+0x180>
					ser_writeln("501 Zonnescherm is al opgerold!");
     b96:	87 ec       	ldi	r24, 0xC7	; 199
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
				} if((get_unrollStatus() % 2) == 1){
     b9e:	0e 94 33 08 	call	0x1066	; 0x1066 <get_unrollStatus>
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__divmodhi4>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	11 f4       	brne	.+4      	; 0xbb4 <protocolCom+0x196>
					oprollen();
     bb0:	0e 94 a0 08 	call	0x1140	; 0x1140 <oprollen>
				}				
			} 
/**********************************************************Zonnescherm uitrollen************************************************************/
			if (strcmp("STATUS", in_buf) == 0){ //Wanneer uitrollen wordt gerequest
     bb4:	c6 01       	movw	r24, r12
     bb6:	be 01       	movw	r22, r28
     bb8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     bbc:	28 2f       	mov	r18, r24
     bbe:	39 2f       	mov	r19, r25
     bc0:	21 15       	cp	r18, r1
     bc2:	31 05       	cpc	r19, r1
     bc4:	99 f4       	brne	.+38     	; 0xbec <protocolCom+0x1ce>
				printf("202 Status: %i", get_unrollStatus());
     bc6:	0e 94 33 08 	call	0x1066	; 0x1066 <get_unrollStatus>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <protocolCom+0x1ae>
     bcc:	00 d0       	rcall	.+0      	; 0xbce <protocolCom+0x1b0>
     bce:	2e ee       	ldi	r18, 0xEE	; 238
     bd0:	31 e0       	ldi	r19, 0x01	; 1
     bd2:	ed b7       	in	r30, 0x3d	; 61
     bd4:	fe b7       	in	r31, 0x3e	; 62
     bd6:	32 83       	std	Z+2, r19	; 0x02
     bd8:	21 83       	std	Z+1, r18	; 0x01
     bda:	94 83       	std	Z+4, r25	; 0x04
     bdc:	83 83       	std	Z+3, r24	; 0x03
     bde:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	a2 cf       	rjmp	.-188    	; 0xb30 <protocolCom+0x112>
			}
/*--------------------------------------------------------Get Temperatuur -----------------------------------------------------------------*/
			else if(strcmp("GET_TEMP", in_buf) == 0){
     bec:	c4 01       	movw	r24, r8
     bee:	be 01       	movw	r22, r28
     bf0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     bf4:	28 2f       	mov	r18, r24
     bf6:	39 2f       	mov	r19, r25
     bf8:	21 15       	cp	r18, r1
     bfa:	31 05       	cpc	r19, r1
     bfc:	e1 f4       	brne	.+56     	; 0xc36 <protocolCom+0x218>
				printf("202 TEMP= % 6.2f \n", getTemp());
     bfe:	0e 94 6e 01 	call	0x2dc	; 0x2dc <getTemp>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	00 d0       	rcall	.+0      	; 0xc08 <protocolCom+0x1ea>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <protocolCom+0x1ec>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <protocolCom+0x1ee>
     c0c:	26 e0       	ldi	r18, 0x06	; 6
     c0e:	32 e0       	ldi	r19, 0x02	; 2
     c10:	ed b7       	in	r30, 0x3d	; 61
     c12:	fe b7       	in	r31, 0x3e	; 62
     c14:	32 83       	std	Z+2, r19	; 0x02
     c16:	21 83       	std	Z+1, r18	; 0x01
     c18:	83 83       	std	Z+3, r24	; 0x03
     c1a:	94 83       	std	Z+4, r25	; 0x04
     c1c:	a5 83       	std	Z+5, r26	; 0x05
     c1e:	b6 83       	std	Z+6, r27	; 0x06
     c20:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	06 96       	adiw	r24, 0x06	; 6
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	9e bf       	out	0x3e, r25	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	8d bf       	out	0x3d, r24	; 61
     c34:	7d cf       	rjmp	.-262    	; 0xb30 <protocolCom+0x112>
			
			}
			else if(strcmp("GET_GRENS_TEMP", in_buf) == 0){
     c36:	c3 01       	movw	r24, r6
     c38:	be 01       	movw	r22, r28
     c3a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     c3e:	28 2f       	mov	r18, r24
     c40:	39 2f       	mov	r19, r25
     c42:	21 15       	cp	r18, r1
     c44:	31 05       	cpc	r19, r1
     c46:	49 f4       	brne	.+18     	; 0xc5a <protocolCom+0x23c>
				//printf("202 GRENS_TEMP: % 6.2f \n", grens_temperatuurRes);
				ser_write("202 GRENS_TEMP:" ), ser_writeln(get_grensTemp());
     c48:	88 e2       	ldi	r24, 0x28	; 40
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     c50:	0e 94 a5 03 	call	0x74a	; 0x74a <get_grensTemp>
     c54:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     c58:	6b cf       	rjmp	.-298    	; 0xb30 <protocolCom+0x112>
			}
			else if(strncmp("SET_GRENS_TEMP(Z)", in_buf, 14) == 0){
     c5a:	c2 01       	movw	r24, r4
     c5c:	be 01       	movw	r22, r28
     c5e:	4e e0       	ldi	r20, 0x0E	; 14
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     c66:	28 2f       	mov	r18, r24
     c68:	39 2f       	mov	r19, r25
     c6a:	21 15       	cp	r18, r1
     c6c:	31 05       	cpc	r19, r1
     c6e:	71 f4       	brne	.+28     	; 0xc8c <protocolCom+0x26e>
				//printf("203 GRENS_TEMP: %6.2f -> %6.2f ", grens_temperatuurRes, in_buf);
				
				if(sizeof in_buf> 18){
					printf("504 Ongeldige temperatuur");
     c70:	00 d0       	rcall	.+0      	; 0xc72 <protocolCom+0x254>
     c72:	8a e4       	ldi	r24, 0x4A	; 74
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	ad b7       	in	r26, 0x3d	; 61
     c78:	be b7       	in	r27, 0x3e	; 62
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	9c 93       	st	X, r25
     c7e:	8e 93       	st	-X, r24
     c80:	11 97       	sbiw	r26, 0x01	; 1
     c82:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	52 cf       	rjmp	.-348    	; 0xb30 <protocolCom+0x112>
				set_grensTemp(substring);
				ser_writeln(get_grensTemp());
				}
			}				
/*----------------------------------------------------------Get Lichtintensiteit---------------------------------------------------------------------*/
			else if(strcmp("GET_LIGHT", in_buf) == 0){
     c8c:	c1 01       	movw	r24, r2
     c8e:	be 01       	movw	r22, r28
     c90:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     c94:	28 2f       	mov	r18, r24
     c96:	39 2f       	mov	r19, r25
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	c1 f4       	brne	.+48     	; 0xcce <protocolCom+0x2b0>
				printf("202 LIGHT %i \n", getLight());
     c9e:	0e 94 b5 01 	call	0x36a	; 0x36a <getLight>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <protocolCom+0x286>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <protocolCom+0x288>
     ca6:	ed b7       	in	r30, 0x3d	; 61
     ca8:	fe b7       	in	r31, 0x3e	; 62
     caa:	31 96       	adiw	r30, 0x01	; 1
     cac:	2e e6       	ldi	r18, 0x6E	; 110
     cae:	32 e0       	ldi	r19, 0x02	; 2
     cb0:	ad b7       	in	r26, 0x3d	; 61
     cb2:	be b7       	in	r27, 0x3e	; 62
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	3c 93       	st	X, r19
     cb8:	2e 93       	st	-X, r18
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	82 83       	std	Z+2, r24	; 0x02
     cbe:	13 82       	std	Z+3, r1	; 0x03
     cc0:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	31 cf       	rjmp	.-414    	; 0xb30 <protocolCom+0x112>
			}
			
			else if(strcmp("GET_GRENS_LIGHT", in_buf) == 0){
     cce:	8d e7       	ldi	r24, 0x7D	; 125
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	be 01       	movw	r22, r28
     cd4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     cd8:	28 2f       	mov	r18, r24
     cda:	39 2f       	mov	r19, r25
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	49 f4       	brne	.+18     	; 0xcf4 <protocolCom+0x2d6>
				//printf("202 GRENS_LIGHT: % 6.2f \n", grens_lichtint);
				ser_write("202 GRENS_LIGHT:" ), ser_writeln(get_grensLight());
     ce2:	8d e8       	ldi	r24, 0x8D	; 141
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     cea:	0e 94 0c 04 	call	0x818	; 0x818 <get_grensLight>
     cee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     cf2:	1e cf       	rjmp	.-452    	; 0xb30 <protocolCom+0x112>
				
			}
			else if(strncmp("SET_GRENS_LIGHT(Z)", in_buf, 15) == 0){
     cf4:	8e e9       	ldi	r24, 0x9E	; 158
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	be 01       	movw	r22, r28
     cfa:	4f e0       	ldi	r20, 0x0F	; 15
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     d02:	28 2f       	mov	r18, r24
     d04:	39 2f       	mov	r19, r25
     d06:	21 15       	cp	r18, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	61 f4       	brne	.+24     	; 0xd24 <protocolCom+0x306>
				//printf("203 GRENS_LIGHT: %6.2f -> %6.2f ", grens_lichtintRes, in_buf);
				if(sizeof in_buf> 20){
					printf("504 Ongeldige lichtintensiteit");
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <protocolCom+0x2f0>
     d0e:	81 eb       	ldi	r24, 0xB1	; 177
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	ed b7       	in	r30, 0x3d	; 61
     d14:	fe b7       	in	r31, 0x3e	; 62
     d16:	92 83       	std	Z+2, r25	; 0x02
     d18:	81 83       	std	Z+1, r24	; 0x01
     d1a:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	06 cf       	rjmp	.-500    	; 0xb30 <protocolCom+0x112>
				set_grensLicht(substring);
				ser_writeln(get_grensLight());
				}				
			}
/*----------------------------------------------------------Afstandsensor---------------------------------------------------------------------*/
			else if(strcmp("GET_MAX_UNROLL", in_buf) == 0){
     d24:	80 ed       	ldi	r24, 0xD0	; 208
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	be 01       	movw	r22, r28
     d2a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     d2e:	28 2f       	mov	r18, r24
     d30:	39 2f       	mov	r19, r25
     d32:	21 15       	cp	r18, r1
     d34:	31 05       	cpc	r19, r1
     d36:	49 f4       	brne	.+18     	; 0xd4a <protocolCom+0x32c>
				//printf("202 MAX_UNROLL= % 6.2f \n", max_unroll);
				ser_write("203 MAX_UNROLL: "), ser_writeln(get_maxUnroll());
     d38:	8f ed       	ldi	r24, 0xDF	; 223
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     d40:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
     d44:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     d48:	f3 ce       	rjmp	.-538    	; 0xb30 <protocolCom+0x112>
			}
			else if(strncmp("SET_MAX_UNROLL(Z)", in_buf, 15) == 0){
     d4a:	80 ef       	ldi	r24, 0xF0	; 240
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	be 01       	movw	r22, r28
     d50:	4f e0       	ldi	r20, 0x0F	; 15
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     d58:	28 2f       	mov	r18, r24
     d5a:	39 2f       	mov	r19, r25
     d5c:	21 15       	cp	r18, r1
     d5e:	31 05       	cpc	r19, r1
     d60:	71 f4       	brne	.+28     	; 0xd7e <protocolCom+0x360>
				//printf("203 MAX_UNROLL: %6.2f -> %6.2f ", maxUnrollRes, in_buf);
				
				if(sizeof in_buf> 19){
					printf("504 Ongeldige uitrolwaarde");
     d62:	00 d0       	rcall	.+0      	; 0xd64 <protocolCom+0x346>
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	ad b7       	in	r26, 0x3d	; 61
     d6a:	be b7       	in	r27, 0x3e	; 62
     d6c:	12 96       	adiw	r26, 0x02	; 2
     d6e:	9c 93       	st	X, r25
     d70:	8e 93       	st	-X, r24
     d72:	11 97       	sbiw	r26, 0x01	; 1
     d74:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	d9 ce       	rjmp	.-590    	; 0xb30 <protocolCom+0x112>
				set_substring();
				set_maxUnroll(substring);
				ser_writeln(get_maxUnroll());
				}
			}				
			else if(strcmp("GET_MIN_UNROLL", in_buf) == 0){
     d7e:	8d e1       	ldi	r24, 0x1D	; 29
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	be 01       	movw	r22, r28
     d84:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     d88:	28 2f       	mov	r18, r24
     d8a:	39 2f       	mov	r19, r25
     d8c:	21 15       	cp	r18, r1
     d8e:	31 05       	cpc	r19, r1
     d90:	49 f4       	brne	.+18     	; 0xda4 <protocolCom+0x386>
				//printf("202 MIN_UNROLL= % 6.2f \n", minUnrollRes);
				ser_write("203 MIN_UNROLL: "), ser_writeln(get_minUnroll());
     d92:	8c e2       	ldi	r24, 0x2C	; 44
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     d9a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
     d9e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     da2:	c6 ce       	rjmp	.-628    	; 0xb30 <protocolCom+0x112>
				
			}
			else if(strncmp("SET_MIN_UNROLL(Z)", in_buf, 15) == 0){
     da4:	8d e3       	ldi	r24, 0x3D	; 61
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	be 01       	movw	r22, r28
     daa:	4f e0       	ldi	r20, 0x0F	; 15
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     db2:	28 2f       	mov	r18, r24
     db4:	39 2f       	mov	r19, r25
     db6:	21 15       	cp	r18, r1
     db8:	31 05       	cpc	r19, r1
     dba:	61 f4       	brne	.+24     	; 0xdd4 <protocolCom+0x3b6>
				//printf("203 MIN_UNROLL: %6.2f -> %6.2f ", minUnrollRes, in_buf);
				
				if(sizeof in_buf> 19){
					printf("504 Ongeldige inrolwaarde");
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <protocolCom+0x3a0>
     dbe:	8f e4       	ldi	r24, 0x4F	; 79
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	ed b7       	in	r30, 0x3d	; 61
     dc4:	fe b7       	in	r31, 0x3e	; 62
     dc6:	92 83       	std	Z+2, r25	; 0x02
     dc8:	81 83       	std	Z+1, r24	; 0x01
     dca:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	ae ce       	rjmp	.-676    	; 0xb30 <protocolCom+0x112>
				set_minUnroll(substring);
				ser_writeln(get_minUnroll());
				}				
			}
/*----------------------------------------------------------Information---------------------------------------------------------------------*/
			else if(strcmp("GET_NAME", in_buf) == 0){
     dd4:	89 e6       	ldi	r24, 0x69	; 105
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	be 01       	movw	r22, r28
     dda:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     dde:	28 2f       	mov	r18, r24
     de0:	39 2f       	mov	r19, r25
     de2:	21 15       	cp	r18, r1
     de4:	31 05       	cpc	r19, r1
     de6:	49 f4       	brne	.+18     	; 0xdfa <protocolCom+0x3dc>
				ser_write("202 "),  ser_writeln(get_Naam());
     de8:	82 e7       	ldi	r24, 0x72	; 114
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     df0:	0e 94 83 02 	call	0x506	; 0x506 <get_Naam>
     df4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     df8:	9b ce       	rjmp	.-714    	; 0xb30 <protocolCom+0x112>
			}
				
			else if(strncmp("SET_NAME(Z)", in_buf, 8) == 0){
     dfa:	87 e7       	ldi	r24, 0x77	; 119
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	be 01       	movw	r22, r28
     e00:	48 e0       	ldi	r20, 0x08	; 8
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     e08:	28 2f       	mov	r18, r24
     e0a:	39 2f       	mov	r19, r25
     e0c:	21 15       	cp	r18, r1
     e0e:	31 05       	cpc	r19, r1
     e10:	69 f4       	brne	.+26     	; 0xe2c <protocolCom+0x40e>
				if(sizeof in_buf> 49){
					printf("504 Te lange naam");
				}
				else{
				set_substring();
     e12:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Naam(substring);
     e16:	80 91 02 08 	lds	r24, 0x0802
     e1a:	90 91 03 08 	lds	r25, 0x0803
     e1e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_Naam>
				printf("200 OK \n");
     e22:	83 e8       	ldi	r24, 0x83	; 131
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 4a 11 	call	0x2294	; 0x2294 <puts>
     e2a:	82 ce       	rjmp	.-764    	; 0xb30 <protocolCom+0x112>
				}				
			}
			
			else if(strcmp("GET_LOCATION", in_buf) == 0){
     e2c:	8b e8       	ldi	r24, 0x8B	; 139
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	be 01       	movw	r22, r28
     e32:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     e36:	28 2f       	mov	r18, r24
     e38:	39 2f       	mov	r19, r25
     e3a:	21 15       	cp	r18, r1
     e3c:	31 05       	cpc	r19, r1
     e3e:	49 f4       	brne	.+18     	; 0xe52 <protocolCom+0x434>
				//printf("202 NAME %s", locatieRes);
				ser_write("202 "), ser_writeln(get_Locatie());
     e40:	82 e7       	ldi	r24, 0x72	; 114
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     e48:	0e 94 d7 02 	call	0x5ae	; 0x5ae <get_Locatie>
     e4c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     e50:	6f ce       	rjmp	.-802    	; 0xb30 <protocolCom+0x112>
			}
			else if(strncmp("SET_LOCATION(Z)", in_buf, 12) == 0){
     e52:	88 e9       	ldi	r24, 0x98	; 152
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	be 01       	movw	r22, r28
     e58:	4c e0       	ldi	r20, 0x0C	; 12
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     e60:	28 2f       	mov	r18, r24
     e62:	39 2f       	mov	r19, r25
     e64:	21 15       	cp	r18, r1
     e66:	31 05       	cpc	r19, r1
     e68:	69 f4       	brne	.+26     	; 0xe84 <protocolCom+0x466>
				if(sizeof in_buf> 53){
					printf("504 Te lange naam voor locatie");
				}
				else{
				set_substring();
     e6a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <set_substring>
				set_Locatie(substring);
     e6e:	80 91 02 08 	lds	r24, 0x0802
     e72:	90 91 03 08 	lds	r25, 0x0803
     e76:	0e 94 aa 02 	call	0x554	; 0x554 <set_Locatie>
				
				printf("200 OK \n");
     e7a:	83 e8       	ldi	r24, 0x83	; 131
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	0e 94 4a 11 	call	0x2294	; 0x2294 <puts>
     e82:	56 ce       	rjmp	.-852    	; 0xb30 <protocolCom+0x112>
				}				
			}
			
				else if(strcmp("GET_VERSION", in_buf) == 0){
     e84:	88 ea       	ldi	r24, 0xA8	; 168
     e86:	93 e0       	ldi	r25, 0x03	; 3
     e88:	be 01       	movw	r22, r28
     e8a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     e8e:	28 2f       	mov	r18, r24
     e90:	39 2f       	mov	r19, r25
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	49 f4       	brne	.+18     	; 0xeaa <protocolCom+0x48c>
					//printf("202 NAME %s", versieRes);
					ser_write("202 versie: "), ser_writeln(get_Versie());
     e98:	84 eb       	ldi	r24, 0xB4	; 180
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
     ea0:	0e 94 3e 03 	call	0x67c	; 0x67c <get_Versie>
     ea4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     ea8:	43 ce       	rjmp	.-890    	; 0xb30 <protocolCom+0x112>
				}
				else if(strncmp("SET_VERSION(Z)", in_buf, 12) == 0){
     eaa:	81 ec       	ldi	r24, 0xC1	; 193
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	be 01       	movw	r22, r28
     eb0:	4c e0       	ldi	r20, 0x0C	; 12
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <strncmp>
     eb8:	28 2f       	mov	r18, r24
     eba:	39 2f       	mov	r19, r25
     ebc:	21 15       	cp	r18, r1
     ebe:	31 05       	cpc	r19, r1
     ec0:	71 f4       	brne	.+28     	; 0xede <protocolCom+0x4c0>
					if(sizeof in_buf> 19){
						printf("504 Te groot nummer");
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <protocolCom+0x4a6>
     ec4:	80 ed       	ldi	r24, 0xD0	; 208
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	ad b7       	in	r26, 0x3d	; 61
     eca:	be b7       	in	r27, 0x3e	; 62
     ecc:	12 96       	adiw	r26, 0x02	; 2
     ece:	9c 93       	st	X, r25
     ed0:	8e 93       	st	-X, r24
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	29 ce       	rjmp	.-942    	; 0xb30 <protocolCom+0x112>
					printf("200 OK \n");
					}					
				}

/*****************************************************************Exit**********************************************************************/			
			else if(strcmp("Exit", in_buf) == 0){
     ede:	84 ee       	ldi	r24, 0xE4	; 228
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	be 01       	movw	r22, r28
     ee4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     ee8:	28 2f       	mov	r18, r24
     eea:	39 2f       	mov	r19, r25
     eec:	21 15       	cp	r18, r1
     eee:	31 05       	cpc	r19, r1
     ef0:	89 f4       	brne	.+34     	; 0xf14 <protocolCom+0x4f6>
				if ((get_unrollStatus() % 2) == 1){
     ef2:	0e 94 33 08 	call	0x1066	; 0x1066 <get_unrollStatus>
     ef6:	62 e0       	ldi	r22, 0x02	; 2
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__divmodhi4>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	11 f4       	brne	.+4      	; 0xf08 <protocolCom+0x4ea>
					uitrollen();					
     f04:	0e 94 44 08 	call	0x1088	; 0x1088 <uitrollen>
				}
				ser_writeln("221 Bye!"); //Groeting wanneer je het programma sluit
     f08:	89 ee       	ldi	r24, 0xE9	; 233
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
				abort();
     f10:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <abort>
			}

/*----------------------------------------------------------------Help---------------------------------------------------------------------*/
			else if(strcmp("Help", in_buf) == 0){
     f14:	82 ef       	ldi	r24, 0xF2	; 242
     f16:	93 e0       	ldi	r25, 0x03	; 3
     f18:	be 01       	movw	r22, r28
     f1a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <strcmp>
     f1e:	28 2f       	mov	r18, r24
     f20:	39 2f       	mov	r19, r25
     f22:	21 15       	cp	r18, r1
     f24:	31 05       	cpc	r19, r1
     f26:	29 f4       	brne	.+10     	; 0xf32 <protocolCom+0x514>
				ser_writeln(
     f28:	87 ef       	ldi	r24, 0xF7	; 247
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     f30:	ff cd       	rjmp	.-1026   	; 0xb30 <protocolCom+0x112>
				"Exit\t\t\tSluit het programma\n"
				);
			}
/*********************************************************Commando niet gevonden************************************************************/		
			else{
				ser_writeln("510 Commando niet gevonden! Type Help voor alle commando's\n");
     f32:	8c e3       	ldi	r24, 0x3C	; 60
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
     f3a:	fa cd       	rjmp	.-1036   	; 0xb30 <protocolCom+0x112>
			}		
			}
			}
			}	
			}					
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	9f 90       	pop	r9
     f52:	8f 90       	pop	r8
     f54:	7f 90       	pop	r7
     f56:	6f 90       	pop	r6
     f58:	5f 90       	pop	r5
     f5a:	4f 90       	pop	r4
     f5c:	3f 90       	pop	r3
     f5e:	2f 90       	pop	r2
     f60:	08 95       	ret

00000f62 <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
	// set the baud rate
	UBRR0H = 0;
     f62:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     f66:	83 e3       	ldi	r24, 0x33	; 51
     f68:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     f6c:	10 92 c0 00 	sts	0x00C0, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     f70:	88 e1       	ldi	r24, 0x18	; 24
     f72:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	80 93 c2 00 	sts	0x00C2, r24
	// Setup stdout
	stdout=&uart_output;
     f7c:	82 e8       	ldi	r24, 0x82	; 130
     f7e:	96 e0       	ldi	r25, 0x06	; 6
     f80:	90 93 29 08 	sts	0x0829, r25
     f84:	80 93 28 08 	sts	0x0828, r24
}
     f88:	08 95       	ret

00000f8a <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     f8a:	e0 ec       	ldi	r30, 0xC0	; 192
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	90 81       	ld	r25, Z
     f90:	95 ff       	sbrs	r25, 5
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <ser_transmit+0x4>
	// send the data
	UDR0 = data;
     f94:	80 93 c6 00 	sts	0x00C6, r24
}
     f98:	08 95       	ret

00000f9a <ser_stdio_putchar>:
// output on USB = PD1 = board pin 1
// datasheet p.190; F_OSC = 16 MHz & baud rate = 19.200
#define UBBRVAL 51

// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     f9a:	cf 93       	push	r28
     f9c:	c8 2f       	mov	r28, r24
	if (c=='\n') {
     f9e:	8a 30       	cpi	r24, 0x0A	; 10
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <ser_stdio_putchar+0xe>
		ser_transmit('\r');
     fa2:	8d e0       	ldi	r24, 0x0D	; 13
     fa4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>
	}
	ser_transmit(c);
     fa8:	8c 2f       	mov	r24, r28
     faa:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>
}
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <ser_receive>:
	UDR0 = data;
}

// Low level receive
uint8_t ser_receive() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     fb2:	e0 ec       	ldi	r30, 0xC0	; 192
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	88 23       	and	r24, r24
     fba:	ec f7       	brge	.-6      	; 0xfb6 <ser_receive+0x4>
	return UDR0;
     fbc:	80 91 c6 00 	lds	r24, 0x00C6
}
     fc0:	08 95       	ret

00000fc2 <ser_write>:

// Hele regel schrijven

void ser_write(char *s) {
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
	int i=0;
	while (s[i]!='\0') {
     fc8:	88 81       	ld	r24, Y
     fca:	88 23       	and	r24, r24
     fcc:	31 f0       	breq	.+12     	; 0xfda <ser_write+0x18>
	return UDR0;
}

// Hele regel schrijven

void ser_write(char *s) {
     fce:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	while (s[i]!='\0') {
		ser_transmit(s[i++]);
     fd0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>

// Hele regel schrijven

void ser_write(char *s) {
	int i=0;
	while (s[i]!='\0') {
     fd4:	89 91       	ld	r24, Y+
     fd6:	88 23       	and	r24, r24
     fd8:	d9 f7       	brne	.-10     	; 0xfd0 <ser_write+0xe>
		ser_transmit(s[i++]);
	}
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <ser_writeln>:

void ser_writeln(char* s) {
	ser_write(s);
     fe0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
	ser_transmit('\r');
     fe4:	8d e0       	ldi	r24, 0x0D	; 13
     fe6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>
	ser_transmit('\n');
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>
}
     ff0:	08 95       	ret

00000ff2 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	5c 01       	movw	r10, r24
    1008:	d4 2f       	mov	r29, r20
	int i=0;
    100a:	6c 01       	movw	r12, r24
    100c:	ee 24       	eor	r14, r14
    100e:	ff 24       	eor	r15, r15
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1010:	8b 01       	movw	r16, r22
    1012:	01 50       	subi	r16, 0x01	; 1
    1014:	10 40       	sbci	r17, 0x00	; 0

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
    1016:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <ser_receive>
    101a:	c8 2f       	mov	r28, r24
		if (echo) ser_transmit(c);
    101c:	dd 23       	and	r29, r29
    101e:	11 f0       	breq	.+4      	; 0x1024 <ser_readln+0x32>
    1020:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>
		if (c=='\r') {
    1024:	cd 30       	cpi	r28, 0x0D	; 13
    1026:	31 f4       	brne	.+12     	; 0x1034 <ser_readln+0x42>
			if (echo) ser_transmit('\n');
    1028:	dd 23       	and	r29, r29
    102a:	71 f0       	breq	.+28     	; 0x1048 <ser_readln+0x56>
    102c:	8a e0       	ldi	r24, 0x0A	; 10
    102e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <ser_transmit>
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <ser_readln+0x56>
			break; // ENTER ontvangen
		}
		if (i<maxlength-1) {
    1034:	e0 16       	cp	r14, r16
    1036:	f1 06       	cpc	r15, r17
    1038:	74 f7       	brge	.-36     	; 0x1016 <ser_readln+0x24>
			buf[i++]=c;
    103a:	f6 01       	movw	r30, r12
    103c:	c1 93       	st	Z+, r28
    103e:	6f 01       	movw	r12, r30
    1040:	08 94       	sec
    1042:	e1 1c       	adc	r14, r1
    1044:	f1 1c       	adc	r15, r1
    1046:	e7 cf       	rjmp	.-50     	; 0x1016 <ser_readln+0x24>
		}
	}
	buf[i]='\0';
    1048:	ea 0c       	add	r14, r10
    104a:	fb 1c       	adc	r15, r11
    104c:	f7 01       	movw	r30, r14
    104e:	10 82       	st	Z, r1
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	08 95       	ret

00001066 <get_unrollStatus>:



int get_unrollStatus(){
	return IN;
}
    1066:	80 91 08 07 	lds	r24, 0x0708
    106a:	90 91 09 07 	lds	r25, 0x0709
    106e:	08 95       	ret

00001070 <init_scherm_ports>:


void init_scherm_ports(){
	// set pin 3,4,5 of PORTB for output
	DDRB |= _BV(DDB3);
    1070:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB4);
    1072:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB5);
    1074:	25 9a       	sbi	0x04, 5	; 4
	
	EICRA |= 1 << ISC00;
    1076:	e9 e6       	ldi	r30, 0x69	; 105
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	80 83       	st	Z, r24
	EIFR =  1 << INTF0;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	8c bb       	out	0x1c, r24	; 28

	// LED op Portb5 aan = Zonnescherm opgerold (rode lampje)
	PORTB |= _BV(PORTB5);
    1084:	2d 9a       	sbi	0x05, 5	; 5
}
    1086:	08 95       	ret

00001088 <uitrollen>:

void uitrollen(){
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
	IN = (IN + 1);
    1090:	80 91 08 07 	lds	r24, 0x0708
    1094:	90 91 09 07 	lds	r25, 0x0709
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	90 93 09 07 	sts	0x0709, r25
    109e:	80 93 08 07 	sts	0x0708, r24
	ser_write("250 \n"); //Geef aan dat het commando is gelukt
    10a2:	80 e9       	ldi	r24, 0x90	; 144
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
	// Zet pin 5 uit (groene lampje)
	PORTB &= ~_BV(PORTB5);
    10aa:	2d 98       	cbi	0x05, 5	; 5
	// Zet pin 3 aan (rode lampje)
	
	PORTB |= _BV(PORTB3);
    10ac:	2b 9a       	sbi	0x05, 3	; 5
	
	
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
    10ae:	0e 94 c6 04 	call	0x98c	; 0x98c <get_maxUnroll>
	double x;
	x = strtod(c, NULL);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <strtod>
    10ba:	6b 01       	movw	r12, r22
    10bc:	7c 01       	movw	r14, r24

	while (getDistance()<x){
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <uitrollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    10c0:	2c 9a       	sbi	0x05, 4	; 5
    10c2:	8f e3       	ldi	r24, 0x3F	; 63
    10c4:	9d e0       	ldi	r25, 0x0D	; 13
    10c6:	a3 e0       	ldi	r26, 0x03	; 3
    10c8:	81 50       	subi	r24, 0x01	; 1
    10ca:	90 40       	sbci	r25, 0x00	; 0
    10cc:	a0 40       	sbci	r26, 0x00	; 0
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <uitrollen+0x40>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <uitrollen+0x4a>
    10d2:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    10d4:	2c 98       	cbi	0x05, 4	; 5
    10d6:	8f e3       	ldi	r24, 0x3F	; 63
    10d8:	9d e0       	ldi	r25, 0x0D	; 13
    10da:	a3 e0       	ldi	r26, 0x03	; 3
    10dc:	81 50       	subi	r24, 0x01	; 1
    10de:	90 40       	sbci	r25, 0x00	; 0
    10e0:	a0 40       	sbci	r26, 0x00	; 0
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <uitrollen+0x54>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <uitrollen+0x5e>
    10e6:	00 00       	nop
	// Converteer de char* naar een double
	char* c = get_maxUnroll();
	double x;
	x = strtod(c, NULL);

	while (getDistance()<x){
    10e8:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    10ec:	a7 01       	movw	r20, r14
    10ee:	96 01       	movw	r18, r12
    10f0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__cmpsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	24 f3       	brlt	.-56     	; 0x10c0 <uitrollen+0x38>
			
		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    10f8:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	00 d0       	rcall	.+0      	; 0x1102 <uitrollen+0x7a>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <uitrollen+0x7c>
    1104:	00 d0       	rcall	.+0      	; 0x1106 <uitrollen+0x7e>
    1106:	26 e9       	ldi	r18, 0x96	; 150
    1108:	36 e0       	ldi	r19, 0x06	; 6
    110a:	ed b7       	in	r30, 0x3d	; 61
    110c:	fe b7       	in	r31, 0x3e	; 62
    110e:	32 83       	std	Z+2, r19	; 0x02
    1110:	21 83       	std	Z+1, r18	; 0x01
    1112:	83 83       	std	Z+3, r24	; 0x03
    1114:	94 83       	std	Z+4, r25	; 0x04
    1116:	a5 83       	std	Z+5, r26	; 0x05
    1118:	b6 83       	std	Z+6, r27	; 0x06
    111a:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
	ser_writeln("201 Zonnescherm is uitgerold\n");
    111e:	8d b7       	in	r24, 0x3d	; 61
    1120:	9e b7       	in	r25, 0x3e	; 62
    1122:	06 96       	adiw	r24, 0x06	; 6
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	9e bf       	out	0x3e, r25	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	8d bf       	out	0x3d, r24	; 61
    112e:	8a eb       	ldi	r24, 0xBA	; 186
    1130:	96 e0       	ldi	r25, 0x06	; 6
    1132:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
}
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	08 95       	ret

00001140 <oprollen>:
	
	


void oprollen(){
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
	IN = (IN + 1);
    1148:	80 91 08 07 	lds	r24, 0x0708
    114c:	90 91 09 07 	lds	r25, 0x0709
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	90 93 09 07 	sts	0x0709, r25
    1156:	80 93 08 07 	sts	0x0708, r24
	
	ser_write("250 "); //Geef aan dat het commando is gelukt
    115a:	88 ed       	ldi	r24, 0xD8	; 216
    115c:	96 e0       	ldi	r25, 0x06	; 6
    115e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <ser_write>
	// Zet pin 3 uit (rode lampje)
	PORTB &= ~_BV(PORTB3);
    1162:	2b 98       	cbi	0x05, 3	; 5
	// Zet pin 5 aan (groene lampje)
	PORTB |= _BV(PORTB5);
    1164:	2d 9a       	sbi	0x05, 5	; 5
	
	// Converteer de char* naar een double

	char* c = get_minUnroll();
    1166:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_minUnroll>
	double x;
	x = strtod(c, NULL);
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <strtod>
    1172:	6b 01       	movw	r12, r22
    1174:	7c 01       	movw	r14, r24
	while (getDistance()> x){
    1176:	14 c0       	rjmp	.+40     	; 0x11a0 <oprollen+0x60>
		// Laat pin 4 knippen (gele lampje)
		PORTB |= _BV(PORTB4);
    1178:	2c 9a       	sbi	0x05, 4	; 5
    117a:	8f e3       	ldi	r24, 0x3F	; 63
    117c:	9d e0       	ldi	r25, 0x0D	; 13
    117e:	a3 e0       	ldi	r26, 0x03	; 3
    1180:	81 50       	subi	r24, 0x01	; 1
    1182:	90 40       	sbci	r25, 0x00	; 0
    1184:	a0 40       	sbci	r26, 0x00	; 0
    1186:	e1 f7       	brne	.-8      	; 0x1180 <oprollen+0x40>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <oprollen+0x4a>
    118a:	00 00       	nop
		_delay_ms(DELAY_MS);
		PORTB &= ~_BV(PORTB4);
    118c:	2c 98       	cbi	0x05, 4	; 5
    118e:	8f e3       	ldi	r24, 0x3F	; 63
    1190:	9d e0       	ldi	r25, 0x0D	; 13
    1192:	a3 e0       	ldi	r26, 0x03	; 3
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	90 40       	sbci	r25, 0x00	; 0
    1198:	a0 40       	sbci	r26, 0x00	; 0
    119a:	e1 f7       	brne	.-8      	; 0x1194 <oprollen+0x54>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <oprollen+0x5e>
    119e:	00 00       	nop
	// Converteer de char* naar een double

	char* c = get_minUnroll();
	double x;
	x = strtod(c, NULL);
	while (getDistance()> x){
    11a0:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11a4:	a7 01       	movw	r20, r14
    11a6:	96 01       	movw	r18, r12
    11a8:	0e 94 19 0a 	call	0x1432	; 0x1432 <__gesf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	24 f3       	brlt	.-56     	; 0x1178 <oprollen+0x38>
		//printf("% 6.2f", x);

		//j += 1;
		//if (j % 2 == 0){ser_write(".");}
	}		
	ser_writeln();
    11b0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
	//j = 0;
	printf("999 Zonneschermoprollen % 6.2f cm \n", getDistance());
    11b4:	0e 94 34 01 	call	0x268	; 0x268 <getDistance>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	00 d0       	rcall	.+0      	; 0x11be <oprollen+0x7e>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <oprollen+0x80>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <oprollen+0x82>
    11c2:	26 e9       	ldi	r18, 0x96	; 150
    11c4:	36 e0       	ldi	r19, 0x06	; 6
    11c6:	ed b7       	in	r30, 0x3d	; 61
    11c8:	fe b7       	in	r31, 0x3e	; 62
    11ca:	32 83       	std	Z+2, r19	; 0x02
    11cc:	21 83       	std	Z+1, r18	; 0x01
    11ce:	83 83       	std	Z+3, r24	; 0x03
    11d0:	94 83       	std	Z+4, r25	; 0x04
    11d2:	a5 83       	std	Z+5, r26	; 0x05
    11d4:	b6 83       	std	Z+6, r27	; 0x06
    11d6:	0e 94 35 11 	call	0x226a	; 0x226a <printf>
	ser_writeln("201 Zonnescherm is opgerold\n");
    11da:	8d b7       	in	r24, 0x3d	; 61
    11dc:	9e b7       	in	r25, 0x3e	; 62
    11de:	06 96       	adiw	r24, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	9e bf       	out	0x3e, r25	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	8d bf       	out	0x3d, r24	; 61
    11ea:	8d ed       	ldi	r24, 0xDD	; 221
    11ec:	96 e0       	ldi	r25, 0x06	; 6
    11ee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ser_writeln>
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	08 95       	ret

000011fc <__subsf3>:
    11fc:	50 58       	subi	r21, 0x80	; 128

000011fe <__addsf3>:
    11fe:	bb 27       	eor	r27, r27
    1200:	aa 27       	eor	r26, r26
    1202:	0e d0       	rcall	.+28     	; 0x1220 <__addsf3x>
    1204:	dc c0       	rjmp	.+440    	; 0x13be <__fp_round>
    1206:	cd d0       	rcall	.+410    	; 0x13a2 <__fp_pscA>
    1208:	30 f0       	brcs	.+12     	; 0x1216 <__addsf3+0x18>
    120a:	d2 d0       	rcall	.+420    	; 0x13b0 <__fp_pscB>
    120c:	20 f0       	brcs	.+8      	; 0x1216 <__addsf3+0x18>
    120e:	31 f4       	brne	.+12     	; 0x121c <__addsf3+0x1e>
    1210:	9f 3f       	cpi	r25, 0xFF	; 255
    1212:	11 f4       	brne	.+4      	; 0x1218 <__addsf3+0x1a>
    1214:	1e f4       	brtc	.+6      	; 0x121c <__addsf3+0x1e>
    1216:	c2 c0       	rjmp	.+388    	; 0x139c <__fp_nan>
    1218:	0e f4       	brtc	.+2      	; 0x121c <__addsf3+0x1e>
    121a:	e0 95       	com	r30
    121c:	e7 fb       	bst	r30, 7
    121e:	b8 c0       	rjmp	.+368    	; 0x1390 <__fp_inf>

00001220 <__addsf3x>:
    1220:	e9 2f       	mov	r30, r25
    1222:	de d0       	rcall	.+444    	; 0x13e0 <__fp_split3>
    1224:	80 f3       	brcs	.-32     	; 0x1206 <__addsf3+0x8>
    1226:	ba 17       	cp	r27, r26
    1228:	62 07       	cpc	r22, r18
    122a:	73 07       	cpc	r23, r19
    122c:	84 07       	cpc	r24, r20
    122e:	95 07       	cpc	r25, r21
    1230:	18 f0       	brcs	.+6      	; 0x1238 <__addsf3x+0x18>
    1232:	71 f4       	brne	.+28     	; 0x1250 <__addsf3x+0x30>
    1234:	9e f5       	brtc	.+102    	; 0x129c <__addsf3x+0x7c>
    1236:	f6 c0       	rjmp	.+492    	; 0x1424 <__fp_zero>
    1238:	0e f4       	brtc	.+2      	; 0x123c <__addsf3x+0x1c>
    123a:	e0 95       	com	r30
    123c:	0b 2e       	mov	r0, r27
    123e:	ba 2f       	mov	r27, r26
    1240:	a0 2d       	mov	r26, r0
    1242:	0b 01       	movw	r0, r22
    1244:	b9 01       	movw	r22, r18
    1246:	90 01       	movw	r18, r0
    1248:	0c 01       	movw	r0, r24
    124a:	ca 01       	movw	r24, r20
    124c:	a0 01       	movw	r20, r0
    124e:	11 24       	eor	r1, r1
    1250:	ff 27       	eor	r31, r31
    1252:	59 1b       	sub	r21, r25
    1254:	99 f0       	breq	.+38     	; 0x127c <__addsf3x+0x5c>
    1256:	59 3f       	cpi	r21, 0xF9	; 249
    1258:	50 f4       	brcc	.+20     	; 0x126e <__addsf3x+0x4e>
    125a:	50 3e       	cpi	r21, 0xE0	; 224
    125c:	68 f1       	brcs	.+90     	; 0x12b8 <__addsf3x+0x98>
    125e:	1a 16       	cp	r1, r26
    1260:	f0 40       	sbci	r31, 0x00	; 0
    1262:	a2 2f       	mov	r26, r18
    1264:	23 2f       	mov	r18, r19
    1266:	34 2f       	mov	r19, r20
    1268:	44 27       	eor	r20, r20
    126a:	58 5f       	subi	r21, 0xF8	; 248
    126c:	f3 cf       	rjmp	.-26     	; 0x1254 <__addsf3x+0x34>
    126e:	46 95       	lsr	r20
    1270:	37 95       	ror	r19
    1272:	27 95       	ror	r18
    1274:	a7 95       	ror	r26
    1276:	f0 40       	sbci	r31, 0x00	; 0
    1278:	53 95       	inc	r21
    127a:	c9 f7       	brne	.-14     	; 0x126e <__addsf3x+0x4e>
    127c:	7e f4       	brtc	.+30     	; 0x129c <__addsf3x+0x7c>
    127e:	1f 16       	cp	r1, r31
    1280:	ba 0b       	sbc	r27, r26
    1282:	62 0b       	sbc	r22, r18
    1284:	73 0b       	sbc	r23, r19
    1286:	84 0b       	sbc	r24, r20
    1288:	ba f0       	brmi	.+46     	; 0x12b8 <__addsf3x+0x98>
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	a1 f0       	breq	.+40     	; 0x12b6 <__addsf3x+0x96>
    128e:	ff 0f       	add	r31, r31
    1290:	bb 1f       	adc	r27, r27
    1292:	66 1f       	adc	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	c2 f7       	brpl	.-16     	; 0x128a <__addsf3x+0x6a>
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <__addsf3x+0x98>
    129c:	ba 0f       	add	r27, r26
    129e:	62 1f       	adc	r22, r18
    12a0:	73 1f       	adc	r23, r19
    12a2:	84 1f       	adc	r24, r20
    12a4:	48 f4       	brcc	.+18     	; 0x12b8 <__addsf3x+0x98>
    12a6:	87 95       	ror	r24
    12a8:	77 95       	ror	r23
    12aa:	67 95       	ror	r22
    12ac:	b7 95       	ror	r27
    12ae:	f7 95       	ror	r31
    12b0:	9e 3f       	cpi	r25, 0xFE	; 254
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <__addsf3x+0x96>
    12b4:	b3 cf       	rjmp	.-154    	; 0x121c <__addsf3+0x1e>
    12b6:	93 95       	inc	r25
    12b8:	88 0f       	add	r24, r24
    12ba:	08 f0       	brcs	.+2      	; 0x12be <__addsf3x+0x9e>
    12bc:	99 27       	eor	r25, r25
    12be:	ee 0f       	add	r30, r30
    12c0:	97 95       	ror	r25
    12c2:	87 95       	ror	r24
    12c4:	08 95       	ret

000012c6 <__cmpsf2>:
    12c6:	40 d0       	rcall	.+128    	; 0x1348 <__fp_cmp>
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <__cmpsf2+0x6>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	08 95       	ret

000012ce <__floatunsisf>:
    12ce:	e8 94       	clt
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <__floatsisf+0x12>

000012d2 <__floatsisf>:
    12d2:	97 fb       	bst	r25, 7
    12d4:	3e f4       	brtc	.+14     	; 0x12e4 <__floatsisf+0x12>
    12d6:	90 95       	com	r25
    12d8:	80 95       	com	r24
    12da:	70 95       	com	r23
    12dc:	61 95       	neg	r22
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	8f 4f       	sbci	r24, 0xFF	; 255
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	99 23       	and	r25, r25
    12e6:	a9 f0       	breq	.+42     	; 0x1312 <__floatsisf+0x40>
    12e8:	f9 2f       	mov	r31, r25
    12ea:	96 e9       	ldi	r25, 0x96	; 150
    12ec:	bb 27       	eor	r27, r27
    12ee:	93 95       	inc	r25
    12f0:	f6 95       	lsr	r31
    12f2:	87 95       	ror	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	b7 95       	ror	r27
    12fa:	f1 11       	cpse	r31, r1
    12fc:	f8 cf       	rjmp	.-16     	; 0x12ee <__floatsisf+0x1c>
    12fe:	fa f4       	brpl	.+62     	; 0x133e <__floatsisf+0x6c>
    1300:	bb 0f       	add	r27, r27
    1302:	11 f4       	brne	.+4      	; 0x1308 <__floatsisf+0x36>
    1304:	60 ff       	sbrs	r22, 0
    1306:	1b c0       	rjmp	.+54     	; 0x133e <__floatsisf+0x6c>
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	16 c0       	rjmp	.+44     	; 0x133e <__floatsisf+0x6c>
    1312:	88 23       	and	r24, r24
    1314:	11 f0       	breq	.+4      	; 0x131a <__floatsisf+0x48>
    1316:	96 e9       	ldi	r25, 0x96	; 150
    1318:	11 c0       	rjmp	.+34     	; 0x133c <__floatsisf+0x6a>
    131a:	77 23       	and	r23, r23
    131c:	21 f0       	breq	.+8      	; 0x1326 <__floatsisf+0x54>
    131e:	9e e8       	ldi	r25, 0x8E	; 142
    1320:	87 2f       	mov	r24, r23
    1322:	76 2f       	mov	r23, r22
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <__floatsisf+0x5e>
    1326:	66 23       	and	r22, r22
    1328:	71 f0       	breq	.+28     	; 0x1346 <__floatsisf+0x74>
    132a:	96 e8       	ldi	r25, 0x86	; 134
    132c:	86 2f       	mov	r24, r22
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	2a f0       	brmi	.+10     	; 0x133e <__floatsisf+0x6c>
    1334:	9a 95       	dec	r25
    1336:	66 0f       	add	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	da f7       	brpl	.-10     	; 0x1334 <__floatsisf+0x62>
    133e:	88 0f       	add	r24, r24
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	97 f9       	bld	r25, 7
    1346:	08 95       	ret

00001348 <__fp_cmp>:
    1348:	99 0f       	add	r25, r25
    134a:	00 08       	sbc	r0, r0
    134c:	55 0f       	add	r21, r21
    134e:	aa 0b       	sbc	r26, r26
    1350:	e0 e8       	ldi	r30, 0x80	; 128
    1352:	fe ef       	ldi	r31, 0xFE	; 254
    1354:	16 16       	cp	r1, r22
    1356:	17 06       	cpc	r1, r23
    1358:	e8 07       	cpc	r30, r24
    135a:	f9 07       	cpc	r31, r25
    135c:	c0 f0       	brcs	.+48     	; 0x138e <__fp_cmp+0x46>
    135e:	12 16       	cp	r1, r18
    1360:	13 06       	cpc	r1, r19
    1362:	e4 07       	cpc	r30, r20
    1364:	f5 07       	cpc	r31, r21
    1366:	98 f0       	brcs	.+38     	; 0x138e <__fp_cmp+0x46>
    1368:	62 1b       	sub	r22, r18
    136a:	73 0b       	sbc	r23, r19
    136c:	84 0b       	sbc	r24, r20
    136e:	95 0b       	sbc	r25, r21
    1370:	39 f4       	brne	.+14     	; 0x1380 <__fp_cmp+0x38>
    1372:	0a 26       	eor	r0, r26
    1374:	61 f0       	breq	.+24     	; 0x138e <__fp_cmp+0x46>
    1376:	23 2b       	or	r18, r19
    1378:	24 2b       	or	r18, r20
    137a:	25 2b       	or	r18, r21
    137c:	21 f4       	brne	.+8      	; 0x1386 <__fp_cmp+0x3e>
    137e:	08 95       	ret
    1380:	0a 26       	eor	r0, r26
    1382:	09 f4       	brne	.+2      	; 0x1386 <__fp_cmp+0x3e>
    1384:	a1 40       	sbci	r26, 0x01	; 1
    1386:	a6 95       	lsr	r26
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	81 1d       	adc	r24, r1
    138c:	81 1d       	adc	r24, r1
    138e:	08 95       	ret

00001390 <__fp_inf>:
    1390:	97 f9       	bld	r25, 7
    1392:	9f 67       	ori	r25, 0x7F	; 127
    1394:	80 e8       	ldi	r24, 0x80	; 128
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	08 95       	ret

0000139c <__fp_nan>:
    139c:	9f ef       	ldi	r25, 0xFF	; 255
    139e:	80 ec       	ldi	r24, 0xC0	; 192
    13a0:	08 95       	ret

000013a2 <__fp_pscA>:
    13a2:	00 24       	eor	r0, r0
    13a4:	0a 94       	dec	r0
    13a6:	16 16       	cp	r1, r22
    13a8:	17 06       	cpc	r1, r23
    13aa:	18 06       	cpc	r1, r24
    13ac:	09 06       	cpc	r0, r25
    13ae:	08 95       	ret

000013b0 <__fp_pscB>:
    13b0:	00 24       	eor	r0, r0
    13b2:	0a 94       	dec	r0
    13b4:	12 16       	cp	r1, r18
    13b6:	13 06       	cpc	r1, r19
    13b8:	14 06       	cpc	r1, r20
    13ba:	05 06       	cpc	r0, r21
    13bc:	08 95       	ret

000013be <__fp_round>:
    13be:	09 2e       	mov	r0, r25
    13c0:	03 94       	inc	r0
    13c2:	00 0c       	add	r0, r0
    13c4:	11 f4       	brne	.+4      	; 0x13ca <__fp_round+0xc>
    13c6:	88 23       	and	r24, r24
    13c8:	52 f0       	brmi	.+20     	; 0x13de <__fp_round+0x20>
    13ca:	bb 0f       	add	r27, r27
    13cc:	40 f4       	brcc	.+16     	; 0x13de <__fp_round+0x20>
    13ce:	bf 2b       	or	r27, r31
    13d0:	11 f4       	brne	.+4      	; 0x13d6 <__fp_round+0x18>
    13d2:	60 ff       	sbrs	r22, 0
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <__fp_round+0x20>
    13d6:	6f 5f       	subi	r22, 0xFF	; 255
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	8f 4f       	sbci	r24, 0xFF	; 255
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	08 95       	ret

000013e0 <__fp_split3>:
    13e0:	57 fd       	sbrc	r21, 7
    13e2:	90 58       	subi	r25, 0x80	; 128
    13e4:	44 0f       	add	r20, r20
    13e6:	55 1f       	adc	r21, r21
    13e8:	59 f0       	breq	.+22     	; 0x1400 <__fp_splitA+0x10>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	71 f0       	breq	.+28     	; 0x140a <__fp_splitA+0x1a>
    13ee:	47 95       	ror	r20

000013f0 <__fp_splitA>:
    13f0:	88 0f       	add	r24, r24
    13f2:	97 fb       	bst	r25, 7
    13f4:	99 1f       	adc	r25, r25
    13f6:	61 f0       	breq	.+24     	; 0x1410 <__fp_splitA+0x20>
    13f8:	9f 3f       	cpi	r25, 0xFF	; 255
    13fa:	79 f0       	breq	.+30     	; 0x141a <__fp_splitA+0x2a>
    13fc:	87 95       	ror	r24
    13fe:	08 95       	ret
    1400:	12 16       	cp	r1, r18
    1402:	13 06       	cpc	r1, r19
    1404:	14 06       	cpc	r1, r20
    1406:	55 1f       	adc	r21, r21
    1408:	f2 cf       	rjmp	.-28     	; 0x13ee <__fp_split3+0xe>
    140a:	46 95       	lsr	r20
    140c:	f1 df       	rcall	.-30     	; 0x13f0 <__fp_splitA>
    140e:	08 c0       	rjmp	.+16     	; 0x1420 <__fp_splitA+0x30>
    1410:	16 16       	cp	r1, r22
    1412:	17 06       	cpc	r1, r23
    1414:	18 06       	cpc	r1, r24
    1416:	99 1f       	adc	r25, r25
    1418:	f1 cf       	rjmp	.-30     	; 0x13fc <__fp_splitA+0xc>
    141a:	86 95       	lsr	r24
    141c:	71 05       	cpc	r23, r1
    141e:	61 05       	cpc	r22, r1
    1420:	08 94       	sec
    1422:	08 95       	ret

00001424 <__fp_zero>:
    1424:	e8 94       	clt

00001426 <__fp_szero>:
    1426:	bb 27       	eor	r27, r27
    1428:	66 27       	eor	r22, r22
    142a:	77 27       	eor	r23, r23
    142c:	cb 01       	movw	r24, r22
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <__gesf2>:
    1432:	8a df       	rcall	.-236    	; 0x1348 <__fp_cmp>
    1434:	08 f4       	brcc	.+2      	; 0x1438 <__gesf2+0x6>
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	08 95       	ret

0000143a <__mulsf3>:
    143a:	0b d0       	rcall	.+22     	; 0x1452 <__mulsf3x>
    143c:	c0 cf       	rjmp	.-128    	; 0x13be <__fp_round>
    143e:	b1 df       	rcall	.-158    	; 0x13a2 <__fp_pscA>
    1440:	28 f0       	brcs	.+10     	; 0x144c <__mulsf3+0x12>
    1442:	b6 df       	rcall	.-148    	; 0x13b0 <__fp_pscB>
    1444:	18 f0       	brcs	.+6      	; 0x144c <__mulsf3+0x12>
    1446:	95 23       	and	r25, r21
    1448:	09 f0       	breq	.+2      	; 0x144c <__mulsf3+0x12>
    144a:	a2 cf       	rjmp	.-188    	; 0x1390 <__fp_inf>
    144c:	a7 cf       	rjmp	.-178    	; 0x139c <__fp_nan>
    144e:	11 24       	eor	r1, r1
    1450:	ea cf       	rjmp	.-44     	; 0x1426 <__fp_szero>

00001452 <__mulsf3x>:
    1452:	c6 df       	rcall	.-116    	; 0x13e0 <__fp_split3>
    1454:	a0 f3       	brcs	.-24     	; 0x143e <__mulsf3+0x4>

00001456 <__mulsf3_pse>:
    1456:	95 9f       	mul	r25, r21
    1458:	d1 f3       	breq	.-12     	; 0x144e <__mulsf3+0x14>
    145a:	95 0f       	add	r25, r21
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	55 1f       	adc	r21, r21
    1460:	62 9f       	mul	r22, r18
    1462:	f0 01       	movw	r30, r0
    1464:	72 9f       	mul	r23, r18
    1466:	bb 27       	eor	r27, r27
    1468:	f0 0d       	add	r31, r0
    146a:	b1 1d       	adc	r27, r1
    146c:	63 9f       	mul	r22, r19
    146e:	aa 27       	eor	r26, r26
    1470:	f0 0d       	add	r31, r0
    1472:	b1 1d       	adc	r27, r1
    1474:	aa 1f       	adc	r26, r26
    1476:	64 9f       	mul	r22, r20
    1478:	66 27       	eor	r22, r22
    147a:	b0 0d       	add	r27, r0
    147c:	a1 1d       	adc	r26, r1
    147e:	66 1f       	adc	r22, r22
    1480:	82 9f       	mul	r24, r18
    1482:	22 27       	eor	r18, r18
    1484:	b0 0d       	add	r27, r0
    1486:	a1 1d       	adc	r26, r1
    1488:	62 1f       	adc	r22, r18
    148a:	73 9f       	mul	r23, r19
    148c:	b0 0d       	add	r27, r0
    148e:	a1 1d       	adc	r26, r1
    1490:	62 1f       	adc	r22, r18
    1492:	83 9f       	mul	r24, r19
    1494:	a0 0d       	add	r26, r0
    1496:	61 1d       	adc	r22, r1
    1498:	22 1f       	adc	r18, r18
    149a:	74 9f       	mul	r23, r20
    149c:	33 27       	eor	r19, r19
    149e:	a0 0d       	add	r26, r0
    14a0:	61 1d       	adc	r22, r1
    14a2:	23 1f       	adc	r18, r19
    14a4:	84 9f       	mul	r24, r20
    14a6:	60 0d       	add	r22, r0
    14a8:	21 1d       	adc	r18, r1
    14aa:	82 2f       	mov	r24, r18
    14ac:	76 2f       	mov	r23, r22
    14ae:	6a 2f       	mov	r22, r26
    14b0:	11 24       	eor	r1, r1
    14b2:	9f 57       	subi	r25, 0x7F	; 127
    14b4:	50 40       	sbci	r21, 0x00	; 0
    14b6:	8a f0       	brmi	.+34     	; 0x14da <__mulsf3_pse+0x84>
    14b8:	e1 f0       	breq	.+56     	; 0x14f2 <__mulsf3_pse+0x9c>
    14ba:	88 23       	and	r24, r24
    14bc:	4a f0       	brmi	.+18     	; 0x14d0 <__mulsf3_pse+0x7a>
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	bb 1f       	adc	r27, r27
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	91 50       	subi	r25, 0x01	; 1
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <__mulsf3_pse+0x64>
    14d0:	9e 3f       	cpi	r25, 0xFE	; 254
    14d2:	51 05       	cpc	r21, r1
    14d4:	70 f0       	brcs	.+28     	; 0x14f2 <__mulsf3_pse+0x9c>
    14d6:	5c cf       	rjmp	.-328    	; 0x1390 <__fp_inf>
    14d8:	a6 cf       	rjmp	.-180    	; 0x1426 <__fp_szero>
    14da:	5f 3f       	cpi	r21, 0xFF	; 255
    14dc:	ec f3       	brlt	.-6      	; 0x14d8 <__mulsf3_pse+0x82>
    14de:	98 3e       	cpi	r25, 0xE8	; 232
    14e0:	dc f3       	brlt	.-10     	; 0x14d8 <__mulsf3_pse+0x82>
    14e2:	86 95       	lsr	r24
    14e4:	77 95       	ror	r23
    14e6:	67 95       	ror	r22
    14e8:	b7 95       	ror	r27
    14ea:	f7 95       	ror	r31
    14ec:	e7 95       	ror	r30
    14ee:	9f 5f       	subi	r25, 0xFF	; 255
    14f0:	c1 f7       	brne	.-16     	; 0x14e2 <__mulsf3_pse+0x8c>
    14f2:	fe 2b       	or	r31, r30
    14f4:	88 0f       	add	r24, r24
    14f6:	91 1d       	adc	r25, r1
    14f8:	96 95       	lsr	r25
    14fa:	87 95       	ror	r24
    14fc:	97 f9       	bld	r25, 7
    14fe:	08 95       	ret

00001500 <vfprintf>:
    1500:	a5 e1       	ldi	r26, 0x15	; 21
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e6 e8       	ldi	r30, 0x86	; 134
    1506:	fa e0       	ldi	r31, 0x0A	; 10
    1508:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__prologue_saves__>
    150c:	4c 01       	movw	r8, r24
    150e:	7f 87       	std	Y+15, r23	; 0x0f
    1510:	6e 87       	std	Y+14, r22	; 0x0e
    1512:	fc 01       	movw	r30, r24
    1514:	17 82       	std	Z+7, r1	; 0x07
    1516:	16 82       	std	Z+6, r1	; 0x06
    1518:	83 81       	ldd	r24, Z+3	; 0x03
    151a:	81 fd       	sbrc	r24, 1
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <vfprintf+0x26>
    151e:	76 c3       	rjmp	.+1772   	; 0x1c0c <vfprintf+0x70c>
    1520:	4c 85       	ldd	r20, Y+12	; 0x0c
    1522:	5d 85       	ldd	r21, Y+13	; 0x0d
    1524:	04 c0       	rjmp	.+8      	; 0x152e <vfprintf+0x2e>
    1526:	1e 01       	movw	r2, r28
    1528:	08 94       	sec
    152a:	21 1c       	adc	r2, r1
    152c:	31 1c       	adc	r3, r1
    152e:	f4 01       	movw	r30, r8
    1530:	93 81       	ldd	r25, Z+3	; 0x03
    1532:	ee 85       	ldd	r30, Y+14	; 0x0e
    1534:	ff 85       	ldd	r31, Y+15	; 0x0f
    1536:	93 fd       	sbrc	r25, 3
    1538:	85 91       	lpm	r24, Z+
    153a:	93 ff       	sbrs	r25, 3
    153c:	81 91       	ld	r24, Z+
    153e:	ff 87       	std	Y+15, r31	; 0x0f
    1540:	ee 87       	std	Y+14, r30	; 0x0e
    1542:	88 23       	and	r24, r24
    1544:	09 f4       	brne	.+2      	; 0x1548 <vfprintf+0x48>
    1546:	5e c3       	rjmp	.+1724   	; 0x1c04 <vfprintf+0x704>
    1548:	85 32       	cpi	r24, 0x25	; 37
    154a:	41 f4       	brne	.+16     	; 0x155c <vfprintf+0x5c>
    154c:	93 fd       	sbrc	r25, 3
    154e:	85 91       	lpm	r24, Z+
    1550:	93 ff       	sbrs	r25, 3
    1552:	81 91       	ld	r24, Z+
    1554:	ff 87       	std	Y+15, r31	; 0x0f
    1556:	ee 87       	std	Y+14, r30	; 0x0e
    1558:	85 32       	cpi	r24, 0x25	; 37
    155a:	59 f4       	brne	.+22     	; 0x1572 <vfprintf+0x72>
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	b4 01       	movw	r22, r8
    1560:	4c 8b       	std	Y+20, r20	; 0x14
    1562:	5d 8b       	std	Y+21, r21	; 0x15
    1564:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1568:	4c 89       	ldd	r20, Y+20	; 0x14
    156a:	5d 89       	ldd	r21, Y+21	; 0x15
    156c:	5d 87       	std	Y+13, r21	; 0x0d
    156e:	4c 87       	std	Y+12, r20	; 0x0c
    1570:	d7 cf       	rjmp	.-82     	; 0x1520 <vfprintf+0x20>
    1572:	ff 24       	eor	r15, r15
    1574:	dd 24       	eor	r13, r13
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	10 32       	cpi	r17, 0x20	; 32
    157a:	b0 f4       	brcc	.+44     	; 0x15a8 <vfprintf+0xa8>
    157c:	8b 32       	cpi	r24, 0x2B	; 43
    157e:	69 f0       	breq	.+26     	; 0x159a <vfprintf+0x9a>
    1580:	8c 32       	cpi	r24, 0x2C	; 44
    1582:	28 f4       	brcc	.+10     	; 0x158e <vfprintf+0x8e>
    1584:	80 32       	cpi	r24, 0x20	; 32
    1586:	51 f0       	breq	.+20     	; 0x159c <vfprintf+0x9c>
    1588:	83 32       	cpi	r24, 0x23	; 35
    158a:	71 f4       	brne	.+28     	; 0x15a8 <vfprintf+0xa8>
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <vfprintf+0xa4>
    158e:	8d 32       	cpi	r24, 0x2D	; 45
    1590:	39 f0       	breq	.+14     	; 0x15a0 <vfprintf+0xa0>
    1592:	80 33       	cpi	r24, 0x30	; 48
    1594:	49 f4       	brne	.+18     	; 0x15a8 <vfprintf+0xa8>
    1596:	11 60       	ori	r17, 0x01	; 1
    1598:	2c c0       	rjmp	.+88     	; 0x15f2 <vfprintf+0xf2>
    159a:	12 60       	ori	r17, 0x02	; 2
    159c:	14 60       	ori	r17, 0x04	; 4
    159e:	29 c0       	rjmp	.+82     	; 0x15f2 <vfprintf+0xf2>
    15a0:	18 60       	ori	r17, 0x08	; 8
    15a2:	27 c0       	rjmp	.+78     	; 0x15f2 <vfprintf+0xf2>
    15a4:	10 61       	ori	r17, 0x10	; 16
    15a6:	25 c0       	rjmp	.+74     	; 0x15f2 <vfprintf+0xf2>
    15a8:	17 fd       	sbrc	r17, 7
    15aa:	2e c0       	rjmp	.+92     	; 0x1608 <vfprintf+0x108>
    15ac:	28 2f       	mov	r18, r24
    15ae:	20 53       	subi	r18, 0x30	; 48
    15b0:	2a 30       	cpi	r18, 0x0A	; 10
    15b2:	98 f4       	brcc	.+38     	; 0x15da <vfprintf+0xda>
    15b4:	16 ff       	sbrs	r17, 6
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <vfprintf+0xc8>
    15b8:	8f 2d       	mov	r24, r15
    15ba:	88 0f       	add	r24, r24
    15bc:	f8 2e       	mov	r15, r24
    15be:	ff 0c       	add	r15, r15
    15c0:	ff 0c       	add	r15, r15
    15c2:	f8 0e       	add	r15, r24
    15c4:	f2 0e       	add	r15, r18
    15c6:	15 c0       	rjmp	.+42     	; 0x15f2 <vfprintf+0xf2>
    15c8:	8d 2d       	mov	r24, r13
    15ca:	88 0f       	add	r24, r24
    15cc:	d8 2e       	mov	r13, r24
    15ce:	dd 0c       	add	r13, r13
    15d0:	dd 0c       	add	r13, r13
    15d2:	d8 0e       	add	r13, r24
    15d4:	d2 0e       	add	r13, r18
    15d6:	10 62       	ori	r17, 0x20	; 32
    15d8:	0c c0       	rjmp	.+24     	; 0x15f2 <vfprintf+0xf2>
    15da:	8e 32       	cpi	r24, 0x2E	; 46
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <vfprintf+0xe6>
    15de:	16 fd       	sbrc	r17, 6
    15e0:	11 c3       	rjmp	.+1570   	; 0x1c04 <vfprintf+0x704>
    15e2:	10 64       	ori	r17, 0x40	; 64
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <vfprintf+0xf2>
    15e6:	8c 36       	cpi	r24, 0x6C	; 108
    15e8:	11 f4       	brne	.+4      	; 0x15ee <vfprintf+0xee>
    15ea:	10 68       	ori	r17, 0x80	; 128
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0xf2>
    15ee:	88 36       	cpi	r24, 0x68	; 104
    15f0:	59 f4       	brne	.+22     	; 0x1608 <vfprintf+0x108>
    15f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    15f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    15f6:	93 fd       	sbrc	r25, 3
    15f8:	85 91       	lpm	r24, Z+
    15fa:	93 ff       	sbrs	r25, 3
    15fc:	81 91       	ld	r24, Z+
    15fe:	ff 87       	std	Y+15, r31	; 0x0f
    1600:	ee 87       	std	Y+14, r30	; 0x0e
    1602:	88 23       	and	r24, r24
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x108>
    1606:	b8 cf       	rjmp	.-144    	; 0x1578 <vfprintf+0x78>
    1608:	98 2f       	mov	r25, r24
    160a:	95 54       	subi	r25, 0x45	; 69
    160c:	93 30       	cpi	r25, 0x03	; 3
    160e:	18 f4       	brcc	.+6      	; 0x1616 <vfprintf+0x116>
    1610:	10 61       	ori	r17, 0x10	; 16
    1612:	80 5e       	subi	r24, 0xE0	; 224
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <vfprintf+0x122>
    1616:	98 2f       	mov	r25, r24
    1618:	95 56       	subi	r25, 0x65	; 101
    161a:	93 30       	cpi	r25, 0x03	; 3
    161c:	08 f0       	brcs	.+2      	; 0x1620 <vfprintf+0x120>
    161e:	a2 c1       	rjmp	.+836    	; 0x1964 <vfprintf+0x464>
    1620:	1f 7e       	andi	r17, 0xEF	; 239
    1622:	16 fd       	sbrc	r17, 6
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x12a>
    1626:	e6 e0       	ldi	r30, 0x06	; 6
    1628:	fe 2e       	mov	r15, r30
    162a:	1f 73       	andi	r17, 0x3F	; 63
    162c:	85 36       	cpi	r24, 0x65	; 101
    162e:	11 f4       	brne	.+4      	; 0x1634 <vfprintf+0x134>
    1630:	10 64       	ori	r17, 0x40	; 64
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <vfprintf+0x140>
    1634:	86 36       	cpi	r24, 0x66	; 102
    1636:	11 f4       	brne	.+4      	; 0x163c <vfprintf+0x13c>
    1638:	10 68       	ori	r17, 0x80	; 128
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <vfprintf+0x140>
    163c:	f1 10       	cpse	r15, r1
    163e:	fa 94       	dec	r15
    1640:	17 ff       	sbrs	r17, 7
    1642:	07 c0       	rjmp	.+14     	; 0x1652 <vfprintf+0x152>
    1644:	fb e3       	ldi	r31, 0x3B	; 59
    1646:	ff 15       	cp	r31, r15
    1648:	48 f0       	brcs	.+18     	; 0x165c <vfprintf+0x15c>
    164a:	ef 2c       	mov	r14, r15
    164c:	e3 94       	inc	r14
    164e:	27 e0       	ldi	r18, 0x07	; 7
    1650:	0d c0       	rjmp	.+26     	; 0x166c <vfprintf+0x16c>
    1652:	27 e0       	ldi	r18, 0x07	; 7
    1654:	2f 15       	cp	r18, r15
    1656:	30 f0       	brcs	.+12     	; 0x1664 <vfprintf+0x164>
    1658:	2f 2d       	mov	r18, r15
    165a:	07 c0       	rjmp	.+14     	; 0x166a <vfprintf+0x16a>
    165c:	27 e0       	ldi	r18, 0x07	; 7
    165e:	7c e3       	ldi	r23, 0x3C	; 60
    1660:	e7 2e       	mov	r14, r23
    1662:	04 c0       	rjmp	.+8      	; 0x166c <vfprintf+0x16c>
    1664:	27 e0       	ldi	r18, 0x07	; 7
    1666:	67 e0       	ldi	r22, 0x07	; 7
    1668:	f6 2e       	mov	r15, r22
    166a:	ee 24       	eor	r14, r14
    166c:	ca 01       	movw	r24, r20
    166e:	04 96       	adiw	r24, 0x04	; 4
    1670:	9d 87       	std	Y+13, r25	; 0x0d
    1672:	8c 87       	std	Y+12, r24	; 0x0c
    1674:	fa 01       	movw	r30, r20
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	a1 01       	movw	r20, r2
    1680:	0e 2d       	mov	r16, r14
    1682:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__ftoa_engine>
    1686:	5c 01       	movw	r10, r24
    1688:	c9 80       	ldd	r12, Y+1	; 0x01
    168a:	2c 2d       	mov	r18, r12
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	39 8b       	std	Y+17, r19	; 0x11
    1690:	28 8b       	std	Y+16, r18	; 0x10
    1692:	c0 fe       	sbrs	r12, 0
    1694:	03 c0       	rjmp	.+6      	; 0x169c <vfprintf+0x19c>
    1696:	38 89       	ldd	r19, Y+16	; 0x10
    1698:	33 ff       	sbrs	r19, 3
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <vfprintf+0x1a8>
    169c:	11 fd       	sbrc	r17, 1
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x1ac>
    16a0:	12 ff       	sbrs	r17, 2
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0x1b0>
    16a4:	00 e2       	ldi	r16, 0x20	; 32
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <vfprintf+0x1b2>
    16a8:	0d e2       	ldi	r16, 0x2D	; 45
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <vfprintf+0x1b2>
    16ac:	0b e2       	ldi	r16, 0x2B	; 43
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <vfprintf+0x1b2>
    16b0:	00 e0       	ldi	r16, 0x00	; 0
    16b2:	88 89       	ldd	r24, Y+16	; 0x10
    16b4:	99 89       	ldd	r25, Y+17	; 0x11
    16b6:	8c 70       	andi	r24, 0x0C	; 12
    16b8:	90 70       	andi	r25, 0x00	; 0
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <vfprintf+0x1c0>
    16be:	3c c0       	rjmp	.+120    	; 0x1738 <vfprintf+0x238>
    16c0:	00 23       	and	r16, r16
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <vfprintf+0x1c8>
    16c4:	84 e0       	ldi	r24, 0x04	; 4
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <vfprintf+0x1ca>
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	8d 15       	cp	r24, r13
    16cc:	58 f4       	brcc	.+22     	; 0x16e4 <vfprintf+0x1e4>
    16ce:	d8 1a       	sub	r13, r24
    16d0:	13 fd       	sbrc	r17, 3
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <vfprintf+0x1e6>
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	b4 01       	movw	r22, r8
    16da:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    16de:	da 94       	dec	r13
    16e0:	c9 f7       	brne	.-14     	; 0x16d4 <vfprintf+0x1d4>
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <vfprintf+0x1e6>
    16e4:	dd 24       	eor	r13, r13
    16e6:	00 23       	and	r16, r16
    16e8:	29 f0       	breq	.+10     	; 0x16f4 <vfprintf+0x1f4>
    16ea:	80 2f       	mov	r24, r16
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	b4 01       	movw	r22, r8
    16f0:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    16f4:	88 89       	ldd	r24, Y+16	; 0x10
    16f6:	83 fd       	sbrc	r24, 3
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <vfprintf+0x204>
    16fa:	3c e6       	ldi	r19, 0x6C	; 108
    16fc:	e3 2e       	mov	r14, r19
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f3 2e       	mov	r15, r19
    1702:	11 c0       	rjmp	.+34     	; 0x1726 <vfprintf+0x226>
    1704:	28 e6       	ldi	r18, 0x68	; 104
    1706:	e2 2e       	mov	r14, r18
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	f2 2e       	mov	r15, r18
    170c:	0c c0       	rjmp	.+24     	; 0x1726 <vfprintf+0x226>
    170e:	01 15       	cp	r16, r1
    1710:	11 05       	cpc	r17, r1
    1712:	09 f0       	breq	.+2      	; 0x1716 <vfprintf+0x216>
    1714:	80 52       	subi	r24, 0x20	; 32
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b4 01       	movw	r22, r8
    171a:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    171e:	08 94       	sec
    1720:	e1 1c       	adc	r14, r1
    1722:	f1 1c       	adc	r15, r1
    1724:	04 c0       	rjmp	.+8      	; 0x172e <vfprintf+0x22e>
    1726:	01 2f       	mov	r16, r17
    1728:	10 e0       	ldi	r17, 0x00	; 0
    172a:	00 71       	andi	r16, 0x10	; 16
    172c:	10 70       	andi	r17, 0x00	; 0
    172e:	f7 01       	movw	r30, r14
    1730:	84 91       	lpm	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	61 f7       	brne	.-40     	; 0x170e <vfprintf+0x20e>
    1736:	63 c2       	rjmp	.+1222   	; 0x1bfe <vfprintf+0x6fe>
    1738:	17 ff       	sbrs	r17, 7
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <vfprintf+0x258>
    173c:	ea 0c       	add	r14, r10
    173e:	f8 89       	ldd	r31, Y+16	; 0x10
    1740:	f4 ff       	sbrs	r31, 4
    1742:	04 c0       	rjmp	.+8      	; 0x174c <vfprintf+0x24c>
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	81 33       	cpi	r24, 0x31	; 49
    1748:	09 f4       	brne	.+2      	; 0x174c <vfprintf+0x24c>
    174a:	ea 94       	dec	r14
    174c:	1e 14       	cp	r1, r14
    174e:	4c f5       	brge	.+82     	; 0x17a2 <vfprintf+0x2a2>
    1750:	28 e0       	ldi	r18, 0x08	; 8
    1752:	2e 15       	cp	r18, r14
    1754:	48 f1       	brcs	.+82     	; 0x17a8 <vfprintf+0x2a8>
    1756:	2c c0       	rjmp	.+88     	; 0x17b0 <vfprintf+0x2b0>
    1758:	16 fd       	sbrc	r17, 6
    175a:	2a c0       	rjmp	.+84     	; 0x17b0 <vfprintf+0x2b0>
    175c:	8f 2d       	mov	r24, r15
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	8a 15       	cp	r24, r10
    1762:	9b 05       	cpc	r25, r11
    1764:	44 f0       	brlt	.+16     	; 0x1776 <vfprintf+0x276>
    1766:	3c ef       	ldi	r19, 0xFC	; 252
    1768:	a3 16       	cp	r10, r19
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	b3 06       	cpc	r11, r19
    176e:	1c f0       	brlt	.+6      	; 0x1776 <vfprintf+0x276>
    1770:	10 68       	ori	r17, 0x80	; 128
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <vfprintf+0x276>
    1774:	fa 94       	dec	r15
    1776:	ff 20       	and	r15, r15
    1778:	49 f0       	breq	.+18     	; 0x178c <vfprintf+0x28c>
    177a:	e2 e0       	ldi	r30, 0x02	; 2
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	ec 0f       	add	r30, r28
    1780:	fd 1f       	adc	r31, r29
    1782:	ef 0d       	add	r30, r15
    1784:	f1 1d       	adc	r31, r1
    1786:	80 81       	ld	r24, Z
    1788:	80 33       	cpi	r24, 0x30	; 48
    178a:	a1 f3       	breq	.-24     	; 0x1774 <vfprintf+0x274>
    178c:	17 ff       	sbrs	r17, 7
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <vfprintf+0x2b0>
    1790:	ef 2c       	mov	r14, r15
    1792:	e3 94       	inc	r14
    1794:	8f 2d       	mov	r24, r15
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a8 16       	cp	r10, r24
    179a:	b9 06       	cpc	r11, r25
    179c:	44 f4       	brge	.+16     	; 0x17ae <vfprintf+0x2ae>
    179e:	fa 18       	sub	r15, r10
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <vfprintf+0x2b0>
    17a2:	ee 24       	eor	r14, r14
    17a4:	e3 94       	inc	r14
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <vfprintf+0x2b0>
    17a8:	98 e0       	ldi	r25, 0x08	; 8
    17aa:	e9 2e       	mov	r14, r25
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <vfprintf+0x2b0>
    17ae:	ff 24       	eor	r15, r15
    17b0:	17 ff       	sbrs	r17, 7
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <vfprintf+0x2c2>
    17b4:	1a 14       	cp	r1, r10
    17b6:	1b 04       	cpc	r1, r11
    17b8:	3c f4       	brge	.+14     	; 0x17c8 <vfprintf+0x2c8>
    17ba:	95 01       	movw	r18, r10
    17bc:	2f 5f       	subi	r18, 0xFF	; 255
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <vfprintf+0x2cc>
    17c2:	25 e0       	ldi	r18, 0x05	; 5
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0x2cc>
    17c8:	21 e0       	ldi	r18, 0x01	; 1
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	00 23       	and	r16, r16
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <vfprintf+0x2d4>
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	3f 4f       	sbci	r19, 0xFF	; 255
    17d4:	ff 20       	and	r15, r15
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <vfprintf+0x2e2>
    17d8:	8f 2d       	mov	r24, r15
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	28 0f       	add	r18, r24
    17e0:	39 1f       	adc	r19, r25
    17e2:	8d 2d       	mov	r24, r13
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	28 17       	cp	r18, r24
    17e8:	39 07       	cpc	r19, r25
    17ea:	14 f4       	brge	.+4      	; 0x17f0 <vfprintf+0x2f0>
    17ec:	d2 1a       	sub	r13, r18
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <vfprintf+0x2f2>
    17f0:	dd 24       	eor	r13, r13
    17f2:	61 2e       	mov	r6, r17
    17f4:	77 24       	eor	r7, r7
    17f6:	c3 01       	movw	r24, r6
    17f8:	89 70       	andi	r24, 0x09	; 9
    17fa:	90 70       	andi	r25, 0x00	; 0
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	49 f4       	brne	.+18     	; 0x1812 <vfprintf+0x312>
    1800:	06 c0       	rjmp	.+12     	; 0x180e <vfprintf+0x30e>
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b4 01       	movw	r22, r8
    1808:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    180c:	da 94       	dec	r13
    180e:	dd 20       	and	r13, r13
    1810:	c1 f7       	brne	.-16     	; 0x1802 <vfprintf+0x302>
    1812:	00 23       	and	r16, r16
    1814:	29 f0       	breq	.+10     	; 0x1820 <vfprintf+0x320>
    1816:	80 2f       	mov	r24, r16
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	b4 01       	movw	r22, r8
    181c:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1820:	63 fc       	sbrc	r6, 3
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <vfprintf+0x336>
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0x332>
    1826:	80 e3       	ldi	r24, 0x30	; 48
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	b4 01       	movw	r22, r8
    182c:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1830:	da 94       	dec	r13
    1832:	dd 20       	and	r13, r13
    1834:	c1 f7       	brne	.-16     	; 0x1826 <vfprintf+0x326>
    1836:	17 ff       	sbrs	r17, 7
    1838:	48 c0       	rjmp	.+144    	; 0x18ca <vfprintf+0x3ca>
    183a:	85 01       	movw	r16, r10
    183c:	b7 fe       	sbrs	r11, 7
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x344>
    1840:	00 e0       	ldi	r16, 0x00	; 0
    1842:	10 e0       	ldi	r17, 0x00	; 0
    1844:	66 24       	eor	r6, r6
    1846:	77 24       	eor	r7, r7
    1848:	95 01       	movw	r18, r10
    184a:	2e 19       	sub	r18, r14
    184c:	31 09       	sbc	r19, r1
    184e:	3b 8b       	std	Y+19, r19	; 0x13
    1850:	2a 8b       	std	Y+18, r18	; 0x12
    1852:	25 01       	movw	r4, r10
    1854:	40 1a       	sub	r4, r16
    1856:	51 0a       	sbc	r5, r17
    1858:	42 0c       	add	r4, r2
    185a:	53 1c       	adc	r5, r3
    185c:	6f 2d       	mov	r22, r15
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	ee 24       	eor	r14, r14
    1862:	ff 24       	eor	r15, r15
    1864:	e6 1a       	sub	r14, r22
    1866:	f7 0a       	sbc	r15, r23
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	0f 3f       	cpi	r16, 0xFF	; 255
    186c:	13 07       	cpc	r17, r19
    186e:	29 f4       	brne	.+10     	; 0x187a <vfprintf+0x37a>
    1870:	8e e2       	ldi	r24, 0x2E	; 46
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	b4 01       	movw	r22, r8
    1876:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    187a:	a0 16       	cp	r10, r16
    187c:	b1 06       	cpc	r11, r17
    187e:	54 f0       	brlt	.+20     	; 0x1894 <vfprintf+0x394>
    1880:	2a 89       	ldd	r18, Y+18	; 0x12
    1882:	3b 89       	ldd	r19, Y+19	; 0x13
    1884:	20 17       	cp	r18, r16
    1886:	31 07       	cpc	r19, r17
    1888:	2c f4       	brge	.+10     	; 0x1894 <vfprintf+0x394>
    188a:	f2 01       	movw	r30, r4
    188c:	e6 0d       	add	r30, r6
    188e:	f7 1d       	adc	r31, r7
    1890:	81 81       	ldd	r24, Z+1	; 0x01
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <vfprintf+0x396>
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	01 50       	subi	r16, 0x01	; 1
    1898:	10 40       	sbci	r17, 0x00	; 0
    189a:	08 94       	sec
    189c:	61 1c       	adc	r6, r1
    189e:	71 1c       	adc	r7, r1
    18a0:	0e 15       	cp	r16, r14
    18a2:	1f 05       	cpc	r17, r15
    18a4:	2c f0       	brlt	.+10     	; 0x18b0 <vfprintf+0x3b0>
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	b4 01       	movw	r22, r8
    18aa:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    18ae:	dc cf       	rjmp	.-72     	; 0x1868 <vfprintf+0x368>
    18b0:	0a 15       	cp	r16, r10
    18b2:	1b 05       	cpc	r17, r11
    18b4:	41 f4       	brne	.+16     	; 0x18c6 <vfprintf+0x3c6>
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	96 33       	cpi	r25, 0x36	; 54
    18ba:	20 f4       	brcc	.+8      	; 0x18c4 <vfprintf+0x3c4>
    18bc:	95 33       	cpi	r25, 0x35	; 53
    18be:	19 f4       	brne	.+6      	; 0x18c6 <vfprintf+0x3c6>
    18c0:	38 89       	ldd	r19, Y+16	; 0x10
    18c2:	34 ff       	sbrs	r19, 4
    18c4:	81 e3       	ldi	r24, 0x31	; 49
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	49 c0       	rjmp	.+146    	; 0x195c <vfprintf+0x45c>
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	81 33       	cpi	r24, 0x31	; 49
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <vfprintf+0x3d4>
    18d0:	9f ee       	ldi	r25, 0xEF	; 239
    18d2:	c9 22       	and	r12, r25
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	b4 01       	movw	r22, r8
    18d8:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    18dc:	ff 20       	and	r15, r15
    18de:	89 f0       	breq	.+34     	; 0x1902 <vfprintf+0x402>
    18e0:	8e e2       	ldi	r24, 0x2E	; 46
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	b4 01       	movw	r22, r8
    18e6:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    18ea:	12 e0       	ldi	r17, 0x02	; 2
    18ec:	f1 01       	movw	r30, r2
    18ee:	e1 0f       	add	r30, r17
    18f0:	f1 1d       	adc	r31, r1
    18f2:	1f 5f       	subi	r17, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	b4 01       	movw	r22, r8
    18fa:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    18fe:	fa 94       	dec	r15
    1900:	a9 f7       	brne	.-22     	; 0x18ec <vfprintf+0x3ec>
    1902:	64 fe       	sbrs	r6, 4
    1904:	03 c0       	rjmp	.+6      	; 0x190c <vfprintf+0x40c>
    1906:	85 e4       	ldi	r24, 0x45	; 69
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x410>
    190c:	85 e6       	ldi	r24, 0x65	; 101
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	b4 01       	movw	r22, r8
    1912:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1916:	b7 fc       	sbrc	r11, 7
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <vfprintf+0x424>
    191a:	a1 14       	cp	r10, r1
    191c:	b1 04       	cpc	r11, r1
    191e:	41 f4       	brne	.+16     	; 0x1930 <vfprintf+0x430>
    1920:	c4 fe       	sbrs	r12, 4
    1922:	06 c0       	rjmp	.+12     	; 0x1930 <vfprintf+0x430>
    1924:	b0 94       	com	r11
    1926:	a1 94       	neg	r10
    1928:	b1 08       	sbc	r11, r1
    192a:	b3 94       	inc	r11
    192c:	8d e2       	ldi	r24, 0x2D	; 45
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <vfprintf+0x432>
    1930:	8b e2       	ldi	r24, 0x2B	; 43
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	b4 01       	movw	r22, r8
    1936:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <vfprintf+0x448>
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	e6 ef       	ldi	r30, 0xF6	; 246
    1942:	ff ef       	ldi	r31, 0xFF	; 255
    1944:	ae 0e       	add	r10, r30
    1946:	bf 1e       	adc	r11, r31
    1948:	fa e0       	ldi	r31, 0x0A	; 10
    194a:	af 16       	cp	r10, r31
    194c:	b1 04       	cpc	r11, r1
    194e:	bc f7       	brge	.-18     	; 0x193e <vfprintf+0x43e>
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	b4 01       	movw	r22, r8
    1954:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1958:	c5 01       	movw	r24, r10
    195a:	c0 96       	adiw	r24, 0x30	; 48
    195c:	b4 01       	movw	r22, r8
    195e:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1962:	4d c1       	rjmp	.+666    	; 0x1bfe <vfprintf+0x6fe>
    1964:	83 36       	cpi	r24, 0x63	; 99
    1966:	31 f0       	breq	.+12     	; 0x1974 <vfprintf+0x474>
    1968:	83 37       	cpi	r24, 0x73	; 115
    196a:	89 f0       	breq	.+34     	; 0x198e <vfprintf+0x48e>
    196c:	83 35       	cpi	r24, 0x53	; 83
    196e:	09 f0       	breq	.+2      	; 0x1972 <vfprintf+0x472>
    1970:	59 c0       	rjmp	.+178    	; 0x1a24 <vfprintf+0x524>
    1972:	22 c0       	rjmp	.+68     	; 0x19b8 <vfprintf+0x4b8>
    1974:	9a 01       	movw	r18, r20
    1976:	2e 5f       	subi	r18, 0xFE	; 254
    1978:	3f 4f       	sbci	r19, 0xFF	; 255
    197a:	3d 87       	std	Y+13, r19	; 0x0d
    197c:	2c 87       	std	Y+12, r18	; 0x0c
    197e:	fa 01       	movw	r30, r20
    1980:	80 81       	ld	r24, Z
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	e8 2e       	mov	r14, r24
    1988:	f1 2c       	mov	r15, r1
    198a:	51 01       	movw	r10, r2
    198c:	13 c0       	rjmp	.+38     	; 0x19b4 <vfprintf+0x4b4>
    198e:	9a 01       	movw	r18, r20
    1990:	2e 5f       	subi	r18, 0xFE	; 254
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	3d 87       	std	Y+13, r19	; 0x0d
    1996:	2c 87       	std	Y+12, r18	; 0x0c
    1998:	fa 01       	movw	r30, r20
    199a:	a0 80       	ld	r10, Z
    199c:	b1 80       	ldd	r11, Z+1	; 0x01
    199e:	16 ff       	sbrs	r17, 6
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <vfprintf+0x4a8>
    19a2:	6f 2d       	mov	r22, r15
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <vfprintf+0x4ac>
    19a8:	6f ef       	ldi	r22, 0xFF	; 255
    19aa:	7f ef       	ldi	r23, 0xFF	; 255
    19ac:	c5 01       	movw	r24, r10
    19ae:	0e 94 fe 10 	call	0x21fc	; 0x21fc <strnlen>
    19b2:	7c 01       	movw	r14, r24
    19b4:	1f 77       	andi	r17, 0x7F	; 127
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <vfprintf+0x4e0>
    19b8:	9a 01       	movw	r18, r20
    19ba:	2e 5f       	subi	r18, 0xFE	; 254
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	3d 87       	std	Y+13, r19	; 0x0d
    19c0:	2c 87       	std	Y+12, r18	; 0x0c
    19c2:	fa 01       	movw	r30, r20
    19c4:	a0 80       	ld	r10, Z
    19c6:	b1 80       	ldd	r11, Z+1	; 0x01
    19c8:	16 ff       	sbrs	r17, 6
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <vfprintf+0x4d2>
    19cc:	6f 2d       	mov	r22, r15
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0x4d6>
    19d2:	6f ef       	ldi	r22, 0xFF	; 255
    19d4:	7f ef       	ldi	r23, 0xFF	; 255
    19d6:	c5 01       	movw	r24, r10
    19d8:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <strnlen_P>
    19dc:	7c 01       	movw	r14, r24
    19de:	10 68       	ori	r17, 0x80	; 128
    19e0:	13 fd       	sbrc	r17, 3
    19e2:	1c c0       	rjmp	.+56     	; 0x1a1c <vfprintf+0x51c>
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <vfprintf+0x4f2>
    19e6:	80 e2       	ldi	r24, 0x20	; 32
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	b4 01       	movw	r22, r8
    19ec:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    19f0:	da 94       	dec	r13
    19f2:	8d 2d       	mov	r24, r13
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	e8 16       	cp	r14, r24
    19f8:	f9 06       	cpc	r15, r25
    19fa:	a8 f3       	brcs	.-22     	; 0x19e6 <vfprintf+0x4e6>
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <vfprintf+0x51c>
    19fe:	f5 01       	movw	r30, r10
    1a00:	17 fd       	sbrc	r17, 7
    1a02:	85 91       	lpm	r24, Z+
    1a04:	17 ff       	sbrs	r17, 7
    1a06:	81 91       	ld	r24, Z+
    1a08:	5f 01       	movw	r10, r30
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	b4 01       	movw	r22, r8
    1a0e:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1a12:	d1 10       	cpse	r13, r1
    1a14:	da 94       	dec	r13
    1a16:	08 94       	sec
    1a18:	e1 08       	sbc	r14, r1
    1a1a:	f1 08       	sbc	r15, r1
    1a1c:	e1 14       	cp	r14, r1
    1a1e:	f1 04       	cpc	r15, r1
    1a20:	71 f7       	brne	.-36     	; 0x19fe <vfprintf+0x4fe>
    1a22:	ed c0       	rjmp	.+474    	; 0x1bfe <vfprintf+0x6fe>
    1a24:	84 36       	cpi	r24, 0x64	; 100
    1a26:	11 f0       	breq	.+4      	; 0x1a2c <vfprintf+0x52c>
    1a28:	89 36       	cpi	r24, 0x69	; 105
    1a2a:	71 f5       	brne	.+92     	; 0x1a88 <vfprintf+0x588>
    1a2c:	9a 01       	movw	r18, r20
    1a2e:	17 ff       	sbrs	r17, 7
    1a30:	0a c0       	rjmp	.+20     	; 0x1a46 <vfprintf+0x546>
    1a32:	2c 5f       	subi	r18, 0xFC	; 252
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	3d 87       	std	Y+13, r19	; 0x0d
    1a38:	2c 87       	std	Y+12, r18	; 0x0c
    1a3a:	fa 01       	movw	r30, r20
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	a2 81       	ldd	r26, Z+2	; 0x02
    1a42:	b3 81       	ldd	r27, Z+3	; 0x03
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <vfprintf+0x55c>
    1a46:	2e 5f       	subi	r18, 0xFE	; 254
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	3d 87       	std	Y+13, r19	; 0x0d
    1a4c:	2c 87       	std	Y+12, r18	; 0x0c
    1a4e:	fa 01       	movw	r30, r20
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	aa 27       	eor	r26, r26
    1a56:	97 fd       	sbrc	r25, 7
    1a58:	a0 95       	com	r26
    1a5a:	ba 2f       	mov	r27, r26
    1a5c:	01 2f       	mov	r16, r17
    1a5e:	0f 76       	andi	r16, 0x6F	; 111
    1a60:	b7 ff       	sbrs	r27, 7
    1a62:	08 c0       	rjmp	.+16     	; 0x1a74 <vfprintf+0x574>
    1a64:	b0 95       	com	r27
    1a66:	a0 95       	com	r26
    1a68:	90 95       	com	r25
    1a6a:	81 95       	neg	r24
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	af 4f       	sbci	r26, 0xFF	; 255
    1a70:	bf 4f       	sbci	r27, 0xFF	; 255
    1a72:	00 68       	ori	r16, 0x80	; 128
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	a1 01       	movw	r20, r2
    1a7a:	2a e0       	ldi	r18, 0x0A	; 10
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__ultoa_invert>
    1a82:	e8 2e       	mov	r14, r24
    1a84:	e2 18       	sub	r14, r2
    1a86:	41 c0       	rjmp	.+130    	; 0x1b0a <vfprintf+0x60a>
    1a88:	85 37       	cpi	r24, 0x75	; 117
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <vfprintf+0x594>
    1a8c:	1f 7e       	andi	r17, 0xEF	; 239
    1a8e:	2a e0       	ldi	r18, 0x0A	; 10
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	20 c0       	rjmp	.+64     	; 0x1ad4 <vfprintf+0x5d4>
    1a94:	19 7f       	andi	r17, 0xF9	; 249
    1a96:	8f 36       	cpi	r24, 0x6F	; 111
    1a98:	a9 f0       	breq	.+42     	; 0x1ac4 <vfprintf+0x5c4>
    1a9a:	80 37       	cpi	r24, 0x70	; 112
    1a9c:	20 f4       	brcc	.+8      	; 0x1aa6 <vfprintf+0x5a6>
    1a9e:	88 35       	cpi	r24, 0x58	; 88
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <vfprintf+0x5a4>
    1aa2:	b0 c0       	rjmp	.+352    	; 0x1c04 <vfprintf+0x704>
    1aa4:	0b c0       	rjmp	.+22     	; 0x1abc <vfprintf+0x5bc>
    1aa6:	80 37       	cpi	r24, 0x70	; 112
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <vfprintf+0x5b2>
    1aaa:	88 37       	cpi	r24, 0x78	; 120
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <vfprintf+0x5b0>
    1aae:	aa c0       	rjmp	.+340    	; 0x1c04 <vfprintf+0x704>
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <vfprintf+0x5b4>
    1ab2:	10 61       	ori	r17, 0x10	; 16
    1ab4:	14 ff       	sbrs	r17, 4
    1ab6:	09 c0       	rjmp	.+18     	; 0x1aca <vfprintf+0x5ca>
    1ab8:	14 60       	ori	r17, 0x04	; 4
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <vfprintf+0x5ca>
    1abc:	14 ff       	sbrs	r17, 4
    1abe:	08 c0       	rjmp	.+16     	; 0x1ad0 <vfprintf+0x5d0>
    1ac0:	16 60       	ori	r17, 0x06	; 6
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x5d0>
    1ac4:	28 e0       	ldi	r18, 0x08	; 8
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <vfprintf+0x5d4>
    1aca:	20 e1       	ldi	r18, 0x10	; 16
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <vfprintf+0x5d4>
    1ad0:	20 e1       	ldi	r18, 0x10	; 16
    1ad2:	32 e0       	ldi	r19, 0x02	; 2
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	17 ff       	sbrs	r17, 7
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <vfprintf+0x5ec>
    1ada:	04 96       	adiw	r24, 0x04	; 4
    1adc:	9d 87       	std	Y+13, r25	; 0x0d
    1ade:	8c 87       	std	Y+12, r24	; 0x0c
    1ae0:	fa 01       	movw	r30, r20
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <vfprintf+0x5fc>
    1aec:	02 96       	adiw	r24, 0x02	; 2
    1aee:	9d 87       	std	Y+13, r25	; 0x0d
    1af0:	8c 87       	std	Y+12, r24	; 0x0c
    1af2:	fa 01       	movw	r30, r20
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a1 01       	movw	r20, r2
    1afe:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__ultoa_invert>
    1b02:	e8 2e       	mov	r14, r24
    1b04:	e2 18       	sub	r14, r2
    1b06:	01 2f       	mov	r16, r17
    1b08:	0f 77       	andi	r16, 0x7F	; 127
    1b0a:	06 ff       	sbrs	r16, 6
    1b0c:	09 c0       	rjmp	.+18     	; 0x1b20 <vfprintf+0x620>
    1b0e:	0e 7f       	andi	r16, 0xFE	; 254
    1b10:	ef 14       	cp	r14, r15
    1b12:	30 f4       	brcc	.+12     	; 0x1b20 <vfprintf+0x620>
    1b14:	04 ff       	sbrs	r16, 4
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <vfprintf+0x624>
    1b18:	02 fd       	sbrc	r16, 2
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <vfprintf+0x624>
    1b1c:	0f 7e       	andi	r16, 0xEF	; 239
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x624>
    1b20:	1e 2d       	mov	r17, r14
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <vfprintf+0x626>
    1b24:	1f 2d       	mov	r17, r15
    1b26:	80 2f       	mov	r24, r16
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	04 ff       	sbrs	r16, 4
    1b2c:	0c c0       	rjmp	.+24     	; 0x1b46 <vfprintf+0x646>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ee 0d       	add	r30, r14
    1b32:	f1 1d       	adc	r31, r1
    1b34:	20 81       	ld	r18, Z
    1b36:	20 33       	cpi	r18, 0x30	; 48
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <vfprintf+0x63e>
    1b3a:	09 7e       	andi	r16, 0xE9	; 233
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <vfprintf+0x650>
    1b3e:	02 ff       	sbrs	r16, 2
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <vfprintf+0x64e>
    1b42:	1e 5f       	subi	r17, 0xFE	; 254
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <vfprintf+0x650>
    1b46:	86 78       	andi	r24, 0x86	; 134
    1b48:	90 70       	andi	r25, 0x00	; 0
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <vfprintf+0x650>
    1b4e:	1f 5f       	subi	r17, 0xFF	; 255
    1b50:	a0 2e       	mov	r10, r16
    1b52:	bb 24       	eor	r11, r11
    1b54:	03 fd       	sbrc	r16, 3
    1b56:	12 c0       	rjmp	.+36     	; 0x1b7c <vfprintf+0x67c>
    1b58:	00 ff       	sbrs	r16, 0
    1b5a:	0d c0       	rjmp	.+26     	; 0x1b76 <vfprintf+0x676>
    1b5c:	fe 2c       	mov	r15, r14
    1b5e:	1d 15       	cp	r17, r13
    1b60:	50 f4       	brcc	.+20     	; 0x1b76 <vfprintf+0x676>
    1b62:	fd 0c       	add	r15, r13
    1b64:	f1 1a       	sub	r15, r17
    1b66:	1d 2d       	mov	r17, r13
    1b68:	06 c0       	rjmp	.+12     	; 0x1b76 <vfprintf+0x676>
    1b6a:	80 e2       	ldi	r24, 0x20	; 32
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	b4 01       	movw	r22, r8
    1b70:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1b74:	1f 5f       	subi	r17, 0xFF	; 255
    1b76:	1d 15       	cp	r17, r13
    1b78:	c0 f3       	brcs	.-16     	; 0x1b6a <vfprintf+0x66a>
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <vfprintf+0x684>
    1b7c:	1d 15       	cp	r17, r13
    1b7e:	10 f4       	brcc	.+4      	; 0x1b84 <vfprintf+0x684>
    1b80:	d1 1a       	sub	r13, r17
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <vfprintf+0x686>
    1b84:	dd 24       	eor	r13, r13
    1b86:	a4 fe       	sbrs	r10, 4
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <vfprintf+0x6a8>
    1b8a:	80 e3       	ldi	r24, 0x30	; 48
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	b4 01       	movw	r22, r8
    1b90:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1b94:	a2 fe       	sbrs	r10, 2
    1b96:	1f c0       	rjmp	.+62     	; 0x1bd6 <vfprintf+0x6d6>
    1b98:	a1 fe       	sbrs	r10, 1
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <vfprintf+0x6a2>
    1b9c:	88 e5       	ldi	r24, 0x58	; 88
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	10 c0       	rjmp	.+32     	; 0x1bc2 <vfprintf+0x6c2>
    1ba2:	88 e7       	ldi	r24, 0x78	; 120
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <vfprintf+0x6c2>
    1ba8:	c5 01       	movw	r24, r10
    1baa:	86 78       	andi	r24, 0x86	; 134
    1bac:	90 70       	andi	r25, 0x00	; 0
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	91 f0       	breq	.+36     	; 0x1bd6 <vfprintf+0x6d6>
    1bb2:	a1 fc       	sbrc	r10, 1
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <vfprintf+0x6ba>
    1bb6:	80 e2       	ldi	r24, 0x20	; 32
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <vfprintf+0x6bc>
    1bba:	8b e2       	ldi	r24, 0x2B	; 43
    1bbc:	07 fd       	sbrc	r16, 7
    1bbe:	8d e2       	ldi	r24, 0x2D	; 45
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	b4 01       	movw	r22, r8
    1bc4:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <vfprintf+0x6d6>
    1bca:	80 e3       	ldi	r24, 0x30	; 48
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	b4 01       	movw	r22, r8
    1bd0:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1bd4:	fa 94       	dec	r15
    1bd6:	ef 14       	cp	r14, r15
    1bd8:	c0 f3       	brcs	.-16     	; 0x1bca <vfprintf+0x6ca>
    1bda:	ea 94       	dec	r14
    1bdc:	f1 01       	movw	r30, r2
    1bde:	ee 0d       	add	r30, r14
    1be0:	f1 1d       	adc	r31, r1
    1be2:	80 81       	ld	r24, Z
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	b4 01       	movw	r22, r8
    1be8:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1bec:	ee 20       	and	r14, r14
    1bee:	a9 f7       	brne	.-22     	; 0x1bda <vfprintf+0x6da>
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <vfprintf+0x6fe>
    1bf2:	80 e2       	ldi	r24, 0x20	; 32
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	b4 01       	movw	r22, r8
    1bf8:	0e 94 09 11 	call	0x2212	; 0x2212 <fputc>
    1bfc:	da 94       	dec	r13
    1bfe:	dd 20       	and	r13, r13
    1c00:	c1 f7       	brne	.-16     	; 0x1bf2 <vfprintf+0x6f2>
    1c02:	8e cc       	rjmp	.-1764   	; 0x1520 <vfprintf+0x20>
    1c04:	f4 01       	movw	r30, r8
    1c06:	86 81       	ldd	r24, Z+6	; 0x06
    1c08:	97 81       	ldd	r25, Z+7	; 0x07
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x710>
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	9f ef       	ldi	r25, 0xFF	; 255
    1c10:	65 96       	adiw	r28, 0x15	; 21
    1c12:	e2 e1       	ldi	r30, 0x12	; 18
    1c14:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__epilogue_restores__>

00001c18 <__divmodhi4>:
    1c18:	97 fb       	bst	r25, 7
    1c1a:	09 2e       	mov	r0, r25
    1c1c:	07 26       	eor	r0, r23
    1c1e:	0a d0       	rcall	.+20     	; 0x1c34 <__divmodhi4_neg1>
    1c20:	77 fd       	sbrc	r23, 7
    1c22:	04 d0       	rcall	.+8      	; 0x1c2c <__divmodhi4_neg2>
    1c24:	43 d0       	rcall	.+134    	; 0x1cac <__udivmodhi4>
    1c26:	06 d0       	rcall	.+12     	; 0x1c34 <__divmodhi4_neg1>
    1c28:	00 20       	and	r0, r0
    1c2a:	1a f4       	brpl	.+6      	; 0x1c32 <__divmodhi4_exit>

00001c2c <__divmodhi4_neg2>:
    1c2c:	70 95       	com	r23
    1c2e:	61 95       	neg	r22
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255

00001c32 <__divmodhi4_exit>:
    1c32:	08 95       	ret

00001c34 <__divmodhi4_neg1>:
    1c34:	f6 f7       	brtc	.-4      	; 0x1c32 <__divmodhi4_exit>
    1c36:	90 95       	com	r25
    1c38:	81 95       	neg	r24
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	08 95       	ret

00001c3e <__prologue_saves__>:
    1c3e:	2f 92       	push	r2
    1c40:	3f 92       	push	r3
    1c42:	4f 92       	push	r4
    1c44:	5f 92       	push	r5
    1c46:	6f 92       	push	r6
    1c48:	7f 92       	push	r7
    1c4a:	8f 92       	push	r8
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	ca 1b       	sub	r28, r26
    1c68:	db 0b       	sbc	r29, r27
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	09 94       	ijmp

00001c76 <__epilogue_restores__>:
    1c76:	2a 88       	ldd	r2, Y+18	; 0x12
    1c78:	39 88       	ldd	r3, Y+17	; 0x11
    1c7a:	48 88       	ldd	r4, Y+16	; 0x10
    1c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c80:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c82:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c84:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c86:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c88:	b9 84       	ldd	r11, Y+9	; 0x09
    1c8a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c8c:	df 80       	ldd	r13, Y+7	; 0x07
    1c8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c90:	fd 80       	ldd	r15, Y+5	; 0x05
    1c92:	0c 81       	ldd	r16, Y+4	; 0x04
    1c94:	1b 81       	ldd	r17, Y+3	; 0x03
    1c96:	aa 81       	ldd	r26, Y+2	; 0x02
    1c98:	b9 81       	ldd	r27, Y+1	; 0x01
    1c9a:	ce 0f       	add	r28, r30
    1c9c:	d1 1d       	adc	r29, r1
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	ed 01       	movw	r28, r26
    1caa:	08 95       	ret

00001cac <__udivmodhi4>:
    1cac:	aa 1b       	sub	r26, r26
    1cae:	bb 1b       	sub	r27, r27
    1cb0:	51 e1       	ldi	r21, 0x11	; 17
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <__udivmodhi4_ep>

00001cb4 <__udivmodhi4_loop>:
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	bb 1f       	adc	r27, r27
    1cb8:	a6 17       	cp	r26, r22
    1cba:	b7 07       	cpc	r27, r23
    1cbc:	10 f0       	brcs	.+4      	; 0x1cc2 <__udivmodhi4_ep>
    1cbe:	a6 1b       	sub	r26, r22
    1cc0:	b7 0b       	sbc	r27, r23

00001cc2 <__udivmodhi4_ep>:
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	5a 95       	dec	r21
    1cc8:	a9 f7       	brne	.-22     	; 0x1cb4 <__udivmodhi4_loop>
    1cca:	80 95       	com	r24
    1ccc:	90 95       	com	r25
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	08 95       	ret

00001cd4 <strtod>:
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e0 e7       	ldi	r30, 0x70	; 112
    1cda:	fe e0       	ldi	r31, 0x0E	; 14
    1cdc:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__prologue_saves__+0x8>
    1ce0:	5b 01       	movw	r10, r22
    1ce2:	61 15       	cp	r22, r1
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	21 f0       	breq	.+8      	; 0x1cf0 <strtod+0x1c>
    1ce8:	db 01       	movw	r26, r22
    1cea:	8c 93       	st	X, r24
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	9c 93       	st	X, r25
    1cf0:	7c 01       	movw	r14, r24
    1cf2:	e7 01       	movw	r28, r14
    1cf4:	08 94       	sec
    1cf6:	e1 1c       	adc	r14, r1
    1cf8:	f1 1c       	adc	r15, r1
    1cfa:	08 81       	ld	r16, Y
    1cfc:	67 01       	movw	r12, r14
    1cfe:	80 2f       	mov	r24, r16
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 b1 10 	call	0x2162	; 0x2162 <isspace>
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	a1 f7       	brne	.-24     	; 0x1cf2 <strtod+0x1e>
    1d0a:	0d 32       	cpi	r16, 0x2D	; 45
    1d0c:	41 f4       	brne	.+16     	; 0x1d1e <strtod+0x4a>
    1d0e:	09 81       	ldd	r16, Y+1	; 0x01
    1d10:	42 e0       	ldi	r20, 0x02	; 2
    1d12:	c4 2e       	mov	r12, r20
    1d14:	d1 2c       	mov	r13, r1
    1d16:	cc 0e       	add	r12, r28
    1d18:	dd 1e       	adc	r13, r29
    1d1a:	11 e0       	ldi	r17, 0x01	; 1
    1d1c:	09 c0       	rjmp	.+18     	; 0x1d30 <strtod+0x5c>
    1d1e:	0b 32       	cpi	r16, 0x2B	; 43
    1d20:	31 f4       	brne	.+12     	; 0x1d2e <strtod+0x5a>
    1d22:	09 81       	ldd	r16, Y+1	; 0x01
    1d24:	32 e0       	ldi	r19, 0x02	; 2
    1d26:	c3 2e       	mov	r12, r19
    1d28:	d1 2c       	mov	r13, r1
    1d2a:	cc 0e       	add	r12, r28
    1d2c:	dd 1e       	adc	r13, r29
    1d2e:	10 e0       	ldi	r17, 0x00	; 0
    1d30:	e6 01       	movw	r28, r12
    1d32:	21 97       	sbiw	r28, 0x01	; 1
    1d34:	ce 01       	movw	r24, r28
    1d36:	60 e7       	ldi	r22, 0x70	; 112
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	43 e0       	ldi	r20, 0x03	; 3
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	0e 94 b9 10 	call	0x2172	; 0x2172 <strncasecmp_P>
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	d1 f4       	brne	.+52     	; 0x1d7a <strtod+0xa6>
    1d46:	e6 01       	movw	r28, r12
    1d48:	22 96       	adiw	r28, 0x02	; 2
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	63 e7       	ldi	r22, 0x73	; 115
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	45 e0       	ldi	r20, 0x05	; 5
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	0e 94 b9 10 	call	0x2172	; 0x2172 <strncasecmp_P>
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <strtod+0x8c>
    1d5c:	e6 01       	movw	r28, r12
    1d5e:	27 96       	adiw	r28, 0x07	; 7
    1d60:	a1 14       	cp	r10, r1
    1d62:	b1 04       	cpc	r11, r1
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <strtod+0x98>
    1d66:	f5 01       	movw	r30, r10
    1d68:	d1 83       	std	Z+1, r29	; 0x01
    1d6a:	c0 83       	st	Z, r28
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	90 e8       	ldi	r25, 0x80	; 128
    1d72:	11 23       	and	r17, r17
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <strtod+0xa4>
    1d76:	0a c1       	rjmp	.+532    	; 0x1f8c <strtod+0x2b8>
    1d78:	04 c1       	rjmp	.+520    	; 0x1f82 <strtod+0x2ae>
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	68 e7       	ldi	r22, 0x78	; 120
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	43 e0       	ldi	r20, 0x03	; 3
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	0e 94 b9 10 	call	0x2172	; 0x2172 <strncasecmp_P>
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	59 f4       	brne	.+22     	; 0x1da2 <strtod+0xce>
    1d8c:	a1 14       	cp	r10, r1
    1d8e:	b1 04       	cpc	r11, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <strtod+0xc0>
    1d92:	f9 c0       	rjmp	.+498    	; 0x1f86 <strtod+0x2b2>
    1d94:	c6 01       	movw	r24, r12
    1d96:	02 96       	adiw	r24, 0x02	; 2
    1d98:	d5 01       	movw	r26, r10
    1d9a:	11 96       	adiw	r26, 0x01	; 1
    1d9c:	9c 93       	st	X, r25
    1d9e:	8e 93       	st	-X, r24
    1da0:	f2 c0       	rjmp	.+484    	; 0x1f86 <strtod+0x2b2>
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	ba 01       	movw	r22, r20
    1da8:	88 24       	eor	r8, r8
    1daa:	99 24       	eor	r9, r9
    1dac:	00 53       	subi	r16, 0x30	; 48
    1dae:	0a 30       	cpi	r16, 0x0A	; 10
    1db0:	90 f5       	brcc	.+100    	; 0x1e16 <strtod+0x142>
    1db2:	12 60       	ori	r17, 0x02	; 2
    1db4:	21 2f       	mov	r18, r17
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	c9 01       	movw	r24, r18
    1dba:	88 70       	andi	r24, 0x08	; 8
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	12 ff       	sbrs	r17, 2
    1dc0:	06 c0       	rjmp	.+12     	; 0x1dce <strtod+0xfa>
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f5       	brne	.+90     	; 0x1e20 <strtod+0x14c>
    1dc6:	08 94       	sec
    1dc8:	81 1c       	adc	r8, r1
    1dca:	91 1c       	adc	r9, r1
    1dcc:	29 c0       	rjmp	.+82     	; 0x1e20 <strtod+0x14c>
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	19 f0       	breq	.+6      	; 0x1dd8 <strtod+0x104>
    1dd2:	08 94       	sec
    1dd4:	81 08       	sbc	r8, r1
    1dd6:	91 08       	sbc	r9, r1
    1dd8:	db 01       	movw	r26, r22
    1dda:	ca 01       	movw	r24, r20
    1ddc:	d2 e0       	ldi	r29, 0x02	; 2
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	aa 1f       	adc	r26, r26
    1de4:	bb 1f       	adc	r27, r27
    1de6:	da 95       	dec	r29
    1de8:	d1 f7       	brne	.-12     	; 0x1dde <strtod+0x10a>
    1dea:	48 0f       	add	r20, r24
    1dec:	59 1f       	adc	r21, r25
    1dee:	6a 1f       	adc	r22, r26
    1df0:	7b 1f       	adc	r23, r27
    1df2:	44 0f       	add	r20, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	66 1f       	adc	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	40 0f       	add	r20, r16
    1dfc:	51 1d       	adc	r21, r1
    1dfe:	61 1d       	adc	r22, r1
    1e00:	71 1d       	adc	r23, r1
    1e02:	48 39       	cpi	r20, 0x98	; 152
    1e04:	b9 e9       	ldi	r27, 0x99	; 153
    1e06:	5b 07       	cpc	r21, r27
    1e08:	b9 e9       	ldi	r27, 0x99	; 153
    1e0a:	6b 07       	cpc	r22, r27
    1e0c:	b9 e1       	ldi	r27, 0x19	; 25
    1e0e:	7b 07       	cpc	r23, r27
    1e10:	38 f0       	brcs	.+14     	; 0x1e20 <strtod+0x14c>
    1e12:	14 60       	ori	r17, 0x04	; 4
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <strtod+0x14c>
    1e16:	0e 3f       	cpi	r16, 0xFE	; 254
    1e18:	39 f4       	brne	.+14     	; 0x1e28 <strtod+0x154>
    1e1a:	13 fd       	sbrc	r17, 3
    1e1c:	43 c0       	rjmp	.+134    	; 0x1ea4 <strtod+0x1d0>
    1e1e:	18 60       	ori	r17, 0x08	; 8
    1e20:	f6 01       	movw	r30, r12
    1e22:	01 91       	ld	r16, Z+
    1e24:	6f 01       	movw	r12, r30
    1e26:	c2 cf       	rjmp	.-124    	; 0x1dac <strtod+0xd8>
    1e28:	05 33       	cpi	r16, 0x35	; 53
    1e2a:	11 f0       	breq	.+4      	; 0x1e30 <strtod+0x15c>
    1e2c:	05 31       	cpi	r16, 0x15	; 21
    1e2e:	d1 f5       	brne	.+116    	; 0x1ea4 <strtod+0x1d0>
    1e30:	d6 01       	movw	r26, r12
    1e32:	ec 91       	ld	r30, X
    1e34:	ed 32       	cpi	r30, 0x2D	; 45
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <strtod+0x168>
    1e38:	10 61       	ori	r17, 0x10	; 16
    1e3a:	08 c0       	rjmp	.+16     	; 0x1e4c <strtod+0x178>
    1e3c:	eb 32       	cpi	r30, 0x2B	; 43
    1e3e:	29 f0       	breq	.+10     	; 0x1e4a <strtod+0x176>
    1e40:	c6 01       	movw	r24, r12
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <strtod+0x186>
    1e4a:	d6 01       	movw	r26, r12
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	ec 91       	ld	r30, X
    1e50:	11 97       	sbiw	r26, 0x01	; 1
    1e52:	c6 01       	movw	r24, r12
    1e54:	02 96       	adiw	r24, 0x02	; 2
    1e56:	22 e0       	ldi	r18, 0x02	; 2
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	e0 53       	subi	r30, 0x30	; 48
    1e5c:	ea 30       	cpi	r30, 0x0A	; 10
    1e5e:	20 f0       	brcs	.+8      	; 0x1e68 <strtod+0x194>
    1e60:	6c 01       	movw	r12, r24
    1e62:	c2 1a       	sub	r12, r18
    1e64:	d3 0a       	sbc	r13, r19
    1e66:	1e c0       	rjmp	.+60     	; 0x1ea4 <strtod+0x1d0>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	fc e0       	ldi	r31, 0x0C	; 12
    1e70:	20 38       	cpi	r18, 0x80	; 128
    1e72:	3f 07       	cpc	r19, r31
    1e74:	5c f4       	brge	.+22     	; 0x1e8c <strtod+0x1b8>
    1e76:	c9 01       	movw	r24, r18
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	28 0f       	add	r18, r24
    1e82:	39 1f       	adc	r19, r25
    1e84:	22 0f       	add	r18, r18
    1e86:	33 1f       	adc	r19, r19
    1e88:	2e 0f       	add	r18, r30
    1e8a:	31 1d       	adc	r19, r1
    1e8c:	ed 91       	ld	r30, X+
    1e8e:	e0 53       	subi	r30, 0x30	; 48
    1e90:	6d 01       	movw	r12, r26
    1e92:	ea 30       	cpi	r30, 0x0A	; 10
    1e94:	60 f3       	brcs	.-40     	; 0x1e6e <strtod+0x19a>
    1e96:	14 ff       	sbrs	r17, 4
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <strtod+0x1cc>
    1e9a:	30 95       	com	r19
    1e9c:	21 95       	neg	r18
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	82 0e       	add	r8, r18
    1ea2:	93 1e       	adc	r9, r19
    1ea4:	c1 2f       	mov	r28, r17
    1ea6:	d0 e0       	ldi	r29, 0x00	; 0
    1ea8:	11 ff       	sbrs	r17, 1
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <strtod+0x1e8>
    1eac:	a1 14       	cp	r10, r1
    1eae:	b1 04       	cpc	r11, r1
    1eb0:	29 f0       	breq	.+10     	; 0x1ebc <strtod+0x1e8>
    1eb2:	c6 01       	movw	r24, r12
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	d5 01       	movw	r26, r10
    1eb8:	8d 93       	st	X+, r24
    1eba:	9c 93       	st	X, r25
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	ba 01       	movw	r22, r20
    1ec0:	0e 94 67 09 	call	0x12ce	; 0x12ce <__floatunsisf>
    1ec4:	6b 01       	movw	r12, r22
    1ec6:	7c 01       	movw	r14, r24
    1ec8:	ce 01       	movw	r24, r28
    1eca:	83 70       	andi	r24, 0x03	; 3
    1ecc:	90 70       	andi	r25, 0x00	; 0
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	21 f4       	brne	.+8      	; 0x1edc <strtod+0x208>
    1ed4:	f7 fa       	bst	r15, 7
    1ed6:	f0 94       	com	r15
    1ed8:	f7 f8       	bld	r15, 7
    1eda:	f0 94       	com	r15
    1edc:	c7 01       	movw	r24, r14
    1ede:	b6 01       	movw	r22, r12
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__cmpsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <strtod+0x21c>
    1eee:	44 c0       	rjmp	.+136    	; 0x1f78 <strtod+0x2a4>
    1ef0:	97 fe       	sbrs	r9, 7
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <strtod+0x22e>
    1ef4:	90 94       	com	r9
    1ef6:	81 94       	neg	r8
    1ef8:	91 08       	sbc	r9, r1
    1efa:	93 94       	inc	r9
    1efc:	c7 ea       	ldi	r28, 0xA7	; 167
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <strtod+0x232>
    1f02:	cf e8       	ldi	r28, 0x8F	; 143
    1f04:	d0 e0       	ldi	r29, 0x00	; 0
    1f06:	98 ee       	ldi	r25, 0xE8	; 232
    1f08:	69 2e       	mov	r6, r25
    1f0a:	9f ef       	ldi	r25, 0xFF	; 255
    1f0c:	79 2e       	mov	r7, r25
    1f0e:	6c 0e       	add	r6, r28
    1f10:	7d 1e       	adc	r7, r29
    1f12:	20 e2       	ldi	r18, 0x20	; 32
    1f14:	a2 2e       	mov	r10, r18
    1f16:	b1 2c       	mov	r11, r1
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <strtod+0x264>
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	05 91       	lpm	r16, Z+
    1f1e:	15 91       	lpm	r17, Z+
    1f20:	25 91       	lpm	r18, Z+
    1f22:	34 91       	lpm	r19, Z
    1f24:	c7 01       	movw	r24, r14
    1f26:	b6 01       	movw	r22, r12
    1f28:	a9 01       	movw	r20, r18
    1f2a:	98 01       	movw	r18, r16
    1f2c:	0e 94 1d 0a 	call	0x143a	; 0x143a <__mulsf3>
    1f30:	6b 01       	movw	r12, r22
    1f32:	7c 01       	movw	r14, r24
    1f34:	8a 18       	sub	r8, r10
    1f36:	9b 08       	sbc	r9, r11
    1f38:	8a 14       	cp	r8, r10
    1f3a:	9b 04       	cpc	r9, r11
    1f3c:	74 f7       	brge	.-36     	; 0x1f1a <strtod+0x246>
    1f3e:	24 97       	sbiw	r28, 0x04	; 4
    1f40:	b5 94       	asr	r11
    1f42:	a7 94       	ror	r10
    1f44:	c6 15       	cp	r28, r6
    1f46:	d7 05       	cpc	r29, r7
    1f48:	b9 f7       	brne	.-18     	; 0x1f38 <strtod+0x264>
    1f4a:	c6 01       	movw	r24, r12
    1f4c:	d7 01       	movw	r26, r14
    1f4e:	2a 2f       	mov	r18, r26
    1f50:	22 0f       	add	r18, r18
    1f52:	2b 2f       	mov	r18, r27
    1f54:	22 1f       	adc	r18, r18
    1f56:	2f 3f       	cpi	r18, 0xFF	; 255
    1f58:	49 f0       	breq	.+18     	; 0x1f6c <strtod+0x298>
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	a9 01       	movw	r20, r18
    1f64:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__cmpsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	31 f4       	brne	.+12     	; 0x1f78 <strtod+0x2a4>
    1f6c:	82 e2       	ldi	r24, 0x22	; 34
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	90 93 2d 08 	sts	0x082D, r25
    1f74:	80 93 2c 08 	sts	0x082C, r24
    1f78:	3c 2d       	mov	r19, r12
    1f7a:	2d 2d       	mov	r18, r13
    1f7c:	9e 2d       	mov	r25, r14
    1f7e:	8f 2d       	mov	r24, r15
    1f80:	06 c0       	rjmp	.+12     	; 0x1f8e <strtod+0x2ba>
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <strtod+0x2ba>
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	90 ec       	ldi	r25, 0xC0	; 192
    1f8c:	8f e7       	ldi	r24, 0x7F	; 127
    1f8e:	b9 01       	movw	r22, r18
    1f90:	ac 01       	movw	r20, r24
    1f92:	87 2f       	mov	r24, r23
    1f94:	92 2f       	mov	r25, r18
    1f96:	a5 2f       	mov	r26, r21
    1f98:	b4 2f       	mov	r27, r20
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	ee e0       	ldi	r30, 0x0E	; 14
    1fa4:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__epilogue_restores__+0x8>

00001fa8 <abort>:
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	f8 94       	cli
    1fae:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <_exit>

00001fb2 <__ftoa_engine>:
    1fb2:	28 30       	cpi	r18, 0x08	; 8
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <__ftoa_engine+0x6>
    1fb6:	27 e0       	ldi	r18, 0x07	; 7
    1fb8:	33 27       	eor	r19, r19
    1fba:	da 01       	movw	r26, r20
    1fbc:	99 0f       	add	r25, r25
    1fbe:	31 1d       	adc	r19, r1
    1fc0:	87 fd       	sbrc	r24, 7
    1fc2:	91 60       	ori	r25, 0x01	; 1
    1fc4:	00 96       	adiw	r24, 0x00	; 0
    1fc6:	61 05       	cpc	r22, r1
    1fc8:	71 05       	cpc	r23, r1
    1fca:	39 f4       	brne	.+14     	; 0x1fda <__ftoa_engine+0x28>
    1fcc:	32 60       	ori	r19, 0x02	; 2
    1fce:	2e 5f       	subi	r18, 0xFE	; 254
    1fd0:	3d 93       	st	X+, r19
    1fd2:	30 e3       	ldi	r19, 0x30	; 48
    1fd4:	2a 95       	dec	r18
    1fd6:	e1 f7       	brne	.-8      	; 0x1fd0 <__ftoa_engine+0x1e>
    1fd8:	08 95       	ret
    1fda:	9f 3f       	cpi	r25, 0xFF	; 255
    1fdc:	30 f0       	brcs	.+12     	; 0x1fea <__ftoa_engine+0x38>
    1fde:	80 38       	cpi	r24, 0x80	; 128
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	61 05       	cpc	r22, r1
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <__ftoa_engine+0x36>
    1fe6:	3c 5f       	subi	r19, 0xFC	; 252
    1fe8:	3c 5f       	subi	r19, 0xFC	; 252
    1fea:	3d 93       	st	X+, r19
    1fec:	91 30       	cpi	r25, 0x01	; 1
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <__ftoa_engine+0x40>
    1ff0:	80 68       	ori	r24, 0x80	; 128
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	1f 93       	push	r17
    1ffa:	0f 93       	push	r16
    1ffc:	ff 92       	push	r15
    1ffe:	ef 92       	push	r14
    2000:	19 2f       	mov	r17, r25
    2002:	98 7f       	andi	r25, 0xF8	; 248
    2004:	96 95       	lsr	r25
    2006:	e9 2f       	mov	r30, r25
    2008:	96 95       	lsr	r25
    200a:	96 95       	lsr	r25
    200c:	e9 0f       	add	r30, r25
    200e:	ff 27       	eor	r31, r31
    2010:	eb 5f       	subi	r30, 0xFB	; 251
    2012:	fe 4f       	sbci	r31, 0xFE	; 254
    2014:	99 27       	eor	r25, r25
    2016:	33 27       	eor	r19, r19
    2018:	ee 24       	eor	r14, r14
    201a:	ff 24       	eor	r15, r15
    201c:	a7 01       	movw	r20, r14
    201e:	e7 01       	movw	r28, r14
    2020:	05 90       	lpm	r0, Z+
    2022:	08 94       	sec
    2024:	07 94       	ror	r0
    2026:	28 f4       	brcc	.+10     	; 0x2032 <__ftoa_engine+0x80>
    2028:	36 0f       	add	r19, r22
    202a:	e7 1e       	adc	r14, r23
    202c:	f8 1e       	adc	r15, r24
    202e:	49 1f       	adc	r20, r25
    2030:	51 1d       	adc	r21, r1
    2032:	66 0f       	add	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	88 1f       	adc	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	06 94       	lsr	r0
    203c:	a1 f7       	brne	.-24     	; 0x2026 <__ftoa_engine+0x74>
    203e:	05 90       	lpm	r0, Z+
    2040:	07 94       	ror	r0
    2042:	28 f4       	brcc	.+10     	; 0x204e <__ftoa_engine+0x9c>
    2044:	e7 0e       	add	r14, r23
    2046:	f8 1e       	adc	r15, r24
    2048:	49 1f       	adc	r20, r25
    204a:	56 1f       	adc	r21, r22
    204c:	c1 1d       	adc	r28, r1
    204e:	77 0f       	add	r23, r23
    2050:	88 1f       	adc	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	66 1f       	adc	r22, r22
    2056:	06 94       	lsr	r0
    2058:	a1 f7       	brne	.-24     	; 0x2042 <__ftoa_engine+0x90>
    205a:	05 90       	lpm	r0, Z+
    205c:	07 94       	ror	r0
    205e:	28 f4       	brcc	.+10     	; 0x206a <__ftoa_engine+0xb8>
    2060:	f8 0e       	add	r15, r24
    2062:	49 1f       	adc	r20, r25
    2064:	56 1f       	adc	r21, r22
    2066:	c7 1f       	adc	r28, r23
    2068:	d1 1d       	adc	r29, r1
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	66 1f       	adc	r22, r22
    2070:	77 1f       	adc	r23, r23
    2072:	06 94       	lsr	r0
    2074:	a1 f7       	brne	.-24     	; 0x205e <__ftoa_engine+0xac>
    2076:	05 90       	lpm	r0, Z+
    2078:	07 94       	ror	r0
    207a:	20 f4       	brcc	.+8      	; 0x2084 <__ftoa_engine+0xd2>
    207c:	49 0f       	add	r20, r25
    207e:	56 1f       	adc	r21, r22
    2080:	c7 1f       	adc	r28, r23
    2082:	d8 1f       	adc	r29, r24
    2084:	99 0f       	add	r25, r25
    2086:	66 1f       	adc	r22, r22
    2088:	77 1f       	adc	r23, r23
    208a:	88 1f       	adc	r24, r24
    208c:	06 94       	lsr	r0
    208e:	a9 f7       	brne	.-22     	; 0x207a <__ftoa_engine+0xc8>
    2090:	84 91       	lpm	r24, Z
    2092:	10 95       	com	r17
    2094:	17 70       	andi	r17, 0x07	; 7
    2096:	41 f0       	breq	.+16     	; 0x20a8 <__ftoa_engine+0xf6>
    2098:	d6 95       	lsr	r29
    209a:	c7 95       	ror	r28
    209c:	57 95       	ror	r21
    209e:	47 95       	ror	r20
    20a0:	f7 94       	ror	r15
    20a2:	e7 94       	ror	r14
    20a4:	1a 95       	dec	r17
    20a6:	c1 f7       	brne	.-16     	; 0x2098 <__ftoa_engine+0xe6>
    20a8:	eb ea       	ldi	r30, 0xAB	; 171
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	68 94       	set
    20ae:	15 90       	lpm	r1, Z+
    20b0:	15 91       	lpm	r17, Z+
    20b2:	35 91       	lpm	r19, Z+
    20b4:	65 91       	lpm	r22, Z+
    20b6:	95 91       	lpm	r25, Z+
    20b8:	05 90       	lpm	r0, Z+
    20ba:	7f e2       	ldi	r23, 0x2F	; 47
    20bc:	73 95       	inc	r23
    20be:	e1 18       	sub	r14, r1
    20c0:	f1 0a       	sbc	r15, r17
    20c2:	43 0b       	sbc	r20, r19
    20c4:	56 0b       	sbc	r21, r22
    20c6:	c9 0b       	sbc	r28, r25
    20c8:	d0 09       	sbc	r29, r0
    20ca:	c0 f7       	brcc	.-16     	; 0x20bc <__ftoa_engine+0x10a>
    20cc:	e1 0c       	add	r14, r1
    20ce:	f1 1e       	adc	r15, r17
    20d0:	43 1f       	adc	r20, r19
    20d2:	56 1f       	adc	r21, r22
    20d4:	c9 1f       	adc	r28, r25
    20d6:	d0 1d       	adc	r29, r0
    20d8:	7e f4       	brtc	.+30     	; 0x20f8 <__ftoa_engine+0x146>
    20da:	70 33       	cpi	r23, 0x30	; 48
    20dc:	11 f4       	brne	.+4      	; 0x20e2 <__ftoa_engine+0x130>
    20de:	8a 95       	dec	r24
    20e0:	e6 cf       	rjmp	.-52     	; 0x20ae <__ftoa_engine+0xfc>
    20e2:	e8 94       	clt
    20e4:	01 50       	subi	r16, 0x01	; 1
    20e6:	30 f0       	brcs	.+12     	; 0x20f4 <__ftoa_engine+0x142>
    20e8:	08 0f       	add	r16, r24
    20ea:	0a f4       	brpl	.+2      	; 0x20ee <__ftoa_engine+0x13c>
    20ec:	00 27       	eor	r16, r16
    20ee:	02 17       	cp	r16, r18
    20f0:	08 f4       	brcc	.+2      	; 0x20f4 <__ftoa_engine+0x142>
    20f2:	20 2f       	mov	r18, r16
    20f4:	23 95       	inc	r18
    20f6:	02 2f       	mov	r16, r18
    20f8:	7a 33       	cpi	r23, 0x3A	; 58
    20fa:	28 f0       	brcs	.+10     	; 0x2106 <__ftoa_engine+0x154>
    20fc:	79 e3       	ldi	r23, 0x39	; 57
    20fe:	7d 93       	st	X+, r23
    2100:	2a 95       	dec	r18
    2102:	e9 f7       	brne	.-6      	; 0x20fe <__ftoa_engine+0x14c>
    2104:	10 c0       	rjmp	.+32     	; 0x2126 <__ftoa_engine+0x174>
    2106:	7d 93       	st	X+, r23
    2108:	2a 95       	dec	r18
    210a:	89 f6       	brne	.-94     	; 0x20ae <__ftoa_engine+0xfc>
    210c:	06 94       	lsr	r0
    210e:	97 95       	ror	r25
    2110:	67 95       	ror	r22
    2112:	37 95       	ror	r19
    2114:	17 95       	ror	r17
    2116:	17 94       	ror	r1
    2118:	e1 18       	sub	r14, r1
    211a:	f1 0a       	sbc	r15, r17
    211c:	43 0b       	sbc	r20, r19
    211e:	56 0b       	sbc	r21, r22
    2120:	c9 0b       	sbc	r28, r25
    2122:	d0 09       	sbc	r29, r0
    2124:	98 f0       	brcs	.+38     	; 0x214c <__ftoa_engine+0x19a>
    2126:	23 95       	inc	r18
    2128:	7e 91       	ld	r23, -X
    212a:	73 95       	inc	r23
    212c:	7a 33       	cpi	r23, 0x3A	; 58
    212e:	08 f0       	brcs	.+2      	; 0x2132 <__ftoa_engine+0x180>
    2130:	70 e3       	ldi	r23, 0x30	; 48
    2132:	7c 93       	st	X, r23
    2134:	20 13       	cpse	r18, r16
    2136:	b8 f7       	brcc	.-18     	; 0x2126 <__ftoa_engine+0x174>
    2138:	7e 91       	ld	r23, -X
    213a:	70 61       	ori	r23, 0x10	; 16
    213c:	7d 93       	st	X+, r23
    213e:	30 f0       	brcs	.+12     	; 0x214c <__ftoa_engine+0x19a>
    2140:	83 95       	inc	r24
    2142:	71 e3       	ldi	r23, 0x31	; 49
    2144:	7d 93       	st	X+, r23
    2146:	70 e3       	ldi	r23, 0x30	; 48
    2148:	2a 95       	dec	r18
    214a:	e1 f7       	brne	.-8      	; 0x2144 <__ftoa_engine+0x192>
    214c:	11 24       	eor	r1, r1
    214e:	ef 90       	pop	r14
    2150:	ff 90       	pop	r15
    2152:	0f 91       	pop	r16
    2154:	1f 91       	pop	r17
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	99 27       	eor	r25, r25
    215c:	87 fd       	sbrc	r24, 7
    215e:	90 95       	com	r25
    2160:	08 95       	ret

00002162 <isspace>:
    2162:	91 11       	cpse	r25, r1
    2164:	3d c1       	rjmp	.+634    	; 0x23e0 <__ctype_isfalse>
    2166:	80 32       	cpi	r24, 0x20	; 32
    2168:	19 f0       	breq	.+6      	; 0x2170 <isspace+0xe>
    216a:	89 50       	subi	r24, 0x09	; 9
    216c:	85 50       	subi	r24, 0x05	; 5
    216e:	d0 f7       	brcc	.-12     	; 0x2164 <isspace+0x2>
    2170:	08 95       	ret

00002172 <strncasecmp_P>:
    2172:	fb 01       	movw	r30, r22
    2174:	dc 01       	movw	r26, r24
    2176:	41 50       	subi	r20, 0x01	; 1
    2178:	50 40       	sbci	r21, 0x00	; 0
    217a:	88 f0       	brcs	.+34     	; 0x219e <strncasecmp_P+0x2c>
    217c:	8d 91       	ld	r24, X+
    217e:	81 34       	cpi	r24, 0x41	; 65
    2180:	1c f0       	brlt	.+6      	; 0x2188 <strncasecmp_P+0x16>
    2182:	8b 35       	cpi	r24, 0x5B	; 91
    2184:	0c f4       	brge	.+2      	; 0x2188 <strncasecmp_P+0x16>
    2186:	80 5e       	subi	r24, 0xE0	; 224
    2188:	65 91       	lpm	r22, Z+
    218a:	61 34       	cpi	r22, 0x41	; 65
    218c:	1c f0       	brlt	.+6      	; 0x2194 <strncasecmp_P+0x22>
    218e:	6b 35       	cpi	r22, 0x5B	; 91
    2190:	0c f4       	brge	.+2      	; 0x2194 <strncasecmp_P+0x22>
    2192:	60 5e       	subi	r22, 0xE0	; 224
    2194:	86 1b       	sub	r24, r22
    2196:	61 11       	cpse	r22, r1
    2198:	71 f3       	breq	.-36     	; 0x2176 <strncasecmp_P+0x4>
    219a:	99 0b       	sbc	r25, r25
    219c:	08 95       	ret
    219e:	88 1b       	sub	r24, r24
    21a0:	fc cf       	rjmp	.-8      	; 0x219a <strncasecmp_P+0x28>

000021a2 <strnlen_P>:
    21a2:	fc 01       	movw	r30, r24
    21a4:	05 90       	lpm	r0, Z+
    21a6:	61 50       	subi	r22, 0x01	; 1
    21a8:	70 40       	sbci	r23, 0x00	; 0
    21aa:	01 10       	cpse	r0, r1
    21ac:	d8 f7       	brcc	.-10     	; 0x21a4 <strnlen_P+0x2>
    21ae:	80 95       	com	r24
    21b0:	90 95       	com	r25
    21b2:	8e 0f       	add	r24, r30
    21b4:	9f 1f       	adc	r25, r31
    21b6:	08 95       	ret

000021b8 <strchr>:
    21b8:	fc 01       	movw	r30, r24
    21ba:	81 91       	ld	r24, Z+
    21bc:	86 17       	cp	r24, r22
    21be:	21 f0       	breq	.+8      	; 0x21c8 <strchr+0x10>
    21c0:	88 23       	and	r24, r24
    21c2:	d9 f7       	brne	.-10     	; 0x21ba <strchr+0x2>
    21c4:	99 27       	eor	r25, r25
    21c6:	08 95       	ret
    21c8:	31 97       	sbiw	r30, 0x01	; 1
    21ca:	cf 01       	movw	r24, r30
    21cc:	08 95       	ret

000021ce <strcmp>:
    21ce:	fb 01       	movw	r30, r22
    21d0:	dc 01       	movw	r26, r24
    21d2:	8d 91       	ld	r24, X+
    21d4:	01 90       	ld	r0, Z+
    21d6:	80 19       	sub	r24, r0
    21d8:	01 10       	cpse	r0, r1
    21da:	d9 f3       	breq	.-10     	; 0x21d2 <strcmp+0x4>
    21dc:	99 0b       	sbc	r25, r25
    21de:	08 95       	ret

000021e0 <strncmp>:
    21e0:	fb 01       	movw	r30, r22
    21e2:	dc 01       	movw	r26, r24
    21e4:	41 50       	subi	r20, 0x01	; 1
    21e6:	50 40       	sbci	r21, 0x00	; 0
    21e8:	30 f0       	brcs	.+12     	; 0x21f6 <strncmp+0x16>
    21ea:	8d 91       	ld	r24, X+
    21ec:	01 90       	ld	r0, Z+
    21ee:	80 19       	sub	r24, r0
    21f0:	19 f4       	brne	.+6      	; 0x21f8 <strncmp+0x18>
    21f2:	00 20       	and	r0, r0
    21f4:	b9 f7       	brne	.-18     	; 0x21e4 <strncmp+0x4>
    21f6:	88 1b       	sub	r24, r24
    21f8:	99 0b       	sbc	r25, r25
    21fa:	08 95       	ret

000021fc <strnlen>:
    21fc:	fc 01       	movw	r30, r24
    21fe:	61 50       	subi	r22, 0x01	; 1
    2200:	70 40       	sbci	r23, 0x00	; 0
    2202:	01 90       	ld	r0, Z+
    2204:	01 10       	cpse	r0, r1
    2206:	d8 f7       	brcc	.-10     	; 0x21fe <strnlen+0x2>
    2208:	80 95       	com	r24
    220a:	90 95       	com	r25
    220c:	8e 0f       	add	r24, r30
    220e:	9f 1f       	adc	r25, r31
    2210:	08 95       	ret

00002212 <fputc>:
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
    221a:	8c 01       	movw	r16, r24
    221c:	eb 01       	movw	r28, r22
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	81 ff       	sbrs	r24, 1
    2222:	1b c0       	rjmp	.+54     	; 0x225a <fputc+0x48>
    2224:	82 ff       	sbrs	r24, 2
    2226:	0d c0       	rjmp	.+26     	; 0x2242 <fputc+0x30>
    2228:	2e 81       	ldd	r18, Y+6	; 0x06
    222a:	3f 81       	ldd	r19, Y+7	; 0x07
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	9d 81       	ldd	r25, Y+5	; 0x05
    2230:	28 17       	cp	r18, r24
    2232:	39 07       	cpc	r19, r25
    2234:	64 f4       	brge	.+24     	; 0x224e <fputc+0x3c>
    2236:	e8 81       	ld	r30, Y
    2238:	f9 81       	ldd	r31, Y+1	; 0x01
    223a:	01 93       	st	Z+, r16
    223c:	f9 83       	std	Y+1, r31	; 0x01
    223e:	e8 83       	st	Y, r30
    2240:	06 c0       	rjmp	.+12     	; 0x224e <fputc+0x3c>
    2242:	e8 85       	ldd	r30, Y+8	; 0x08
    2244:	f9 85       	ldd	r31, Y+9	; 0x09
    2246:	80 2f       	mov	r24, r16
    2248:	09 95       	icall
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	31 f4       	brne	.+12     	; 0x225a <fputc+0x48>
    224e:	8e 81       	ldd	r24, Y+6	; 0x06
    2250:	9f 81       	ldd	r25, Y+7	; 0x07
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	9f 83       	std	Y+7, r25	; 0x07
    2256:	8e 83       	std	Y+6, r24	; 0x06
    2258:	02 c0       	rjmp	.+4      	; 0x225e <fputc+0x4c>
    225a:	0f ef       	ldi	r16, 0xFF	; 255
    225c:	1f ef       	ldi	r17, 0xFF	; 255
    225e:	c8 01       	movw	r24, r16
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	1f 91       	pop	r17
    2266:	0f 91       	pop	r16
    2268:	08 95       	ret

0000226a <printf>:
    226a:	a0 e0       	ldi	r26, 0x00	; 0
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f1 e1       	ldi	r31, 0x11	; 17
    2272:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__prologue_saves__+0x20>
    2276:	fe 01       	movw	r30, r28
    2278:	35 96       	adiw	r30, 0x05	; 5
    227a:	61 91       	ld	r22, Z+
    227c:	71 91       	ld	r23, Z+
    227e:	80 91 28 08 	lds	r24, 0x0828
    2282:	90 91 29 08 	lds	r25, 0x0829
    2286:	af 01       	movw	r20, r30
    2288:	0e 94 80 0a 	call	0x1500	; 0x1500 <vfprintf>
    228c:	20 96       	adiw	r28, 0x00	; 0
    228e:	e2 e0       	ldi	r30, 0x02	; 2
    2290:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__epilogue_restores__+0x20>

00002294 <puts>:
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	8c 01       	movw	r16, r24
    229e:	e0 91 28 08 	lds	r30, 0x0828
    22a2:	f0 91 29 08 	lds	r31, 0x0829
    22a6:	83 81       	ldd	r24, Z+3	; 0x03
    22a8:	81 ff       	sbrs	r24, 1
    22aa:	1a c0       	rjmp	.+52     	; 0x22e0 <puts+0x4c>
    22ac:	c0 e0       	ldi	r28, 0x00	; 0
    22ae:	d0 e0       	ldi	r29, 0x00	; 0
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <puts+0x28>
    22b2:	09 95       	icall
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	11 f0       	breq	.+4      	; 0x22bc <puts+0x28>
    22b8:	cf ef       	ldi	r28, 0xFF	; 255
    22ba:	df ef       	ldi	r29, 0xFF	; 255
    22bc:	f8 01       	movw	r30, r16
    22be:	81 91       	ld	r24, Z+
    22c0:	8f 01       	movw	r16, r30
    22c2:	60 91 28 08 	lds	r22, 0x0828
    22c6:	70 91 29 08 	lds	r23, 0x0829
    22ca:	db 01       	movw	r26, r22
    22cc:	18 96       	adiw	r26, 0x08	; 8
    22ce:	ed 91       	ld	r30, X+
    22d0:	fc 91       	ld	r31, X
    22d2:	19 97       	sbiw	r26, 0x09	; 9
    22d4:	88 23       	and	r24, r24
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <puts+0x1e>
    22d8:	8a e0       	ldi	r24, 0x0A	; 10
    22da:	09 95       	icall
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	11 f0       	breq	.+4      	; 0x22e4 <puts+0x50>
    22e0:	cf ef       	ldi	r28, 0xFF	; 255
    22e2:	df ef       	ldi	r29, 0xFF	; 255
    22e4:	ce 01       	movw	r24, r28
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <__ultoa_invert>:
    22f0:	fa 01       	movw	r30, r20
    22f2:	aa 27       	eor	r26, r26
    22f4:	28 30       	cpi	r18, 0x08	; 8
    22f6:	51 f1       	breq	.+84     	; 0x234c <__ultoa_invert+0x5c>
    22f8:	20 31       	cpi	r18, 0x10	; 16
    22fa:	81 f1       	breq	.+96     	; 0x235c <__ultoa_invert+0x6c>
    22fc:	e8 94       	clt
    22fe:	6f 93       	push	r22
    2300:	6e 7f       	andi	r22, 0xFE	; 254
    2302:	6e 5f       	subi	r22, 0xFE	; 254
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	8f 4f       	sbci	r24, 0xFF	; 255
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	af 4f       	sbci	r26, 0xFF	; 255
    230c:	b1 e0       	ldi	r27, 0x01	; 1
    230e:	3e d0       	rcall	.+124    	; 0x238c <__ultoa_invert+0x9c>
    2310:	b4 e0       	ldi	r27, 0x04	; 4
    2312:	3c d0       	rcall	.+120    	; 0x238c <__ultoa_invert+0x9c>
    2314:	67 0f       	add	r22, r23
    2316:	78 1f       	adc	r23, r24
    2318:	89 1f       	adc	r24, r25
    231a:	9a 1f       	adc	r25, r26
    231c:	a1 1d       	adc	r26, r1
    231e:	68 0f       	add	r22, r24
    2320:	79 1f       	adc	r23, r25
    2322:	8a 1f       	adc	r24, r26
    2324:	91 1d       	adc	r25, r1
    2326:	a1 1d       	adc	r26, r1
    2328:	6a 0f       	add	r22, r26
    232a:	71 1d       	adc	r23, r1
    232c:	81 1d       	adc	r24, r1
    232e:	91 1d       	adc	r25, r1
    2330:	a1 1d       	adc	r26, r1
    2332:	20 d0       	rcall	.+64     	; 0x2374 <__ultoa_invert+0x84>
    2334:	09 f4       	brne	.+2      	; 0x2338 <__ultoa_invert+0x48>
    2336:	68 94       	set
    2338:	3f 91       	pop	r19
    233a:	2a e0       	ldi	r18, 0x0A	; 10
    233c:	26 9f       	mul	r18, r22
    233e:	11 24       	eor	r1, r1
    2340:	30 19       	sub	r19, r0
    2342:	30 5d       	subi	r19, 0xD0	; 208
    2344:	31 93       	st	Z+, r19
    2346:	de f6       	brtc	.-74     	; 0x22fe <__ultoa_invert+0xe>
    2348:	cf 01       	movw	r24, r30
    234a:	08 95       	ret
    234c:	46 2f       	mov	r20, r22
    234e:	47 70       	andi	r20, 0x07	; 7
    2350:	40 5d       	subi	r20, 0xD0	; 208
    2352:	41 93       	st	Z+, r20
    2354:	b3 e0       	ldi	r27, 0x03	; 3
    2356:	0f d0       	rcall	.+30     	; 0x2376 <__ultoa_invert+0x86>
    2358:	c9 f7       	brne	.-14     	; 0x234c <__ultoa_invert+0x5c>
    235a:	f6 cf       	rjmp	.-20     	; 0x2348 <__ultoa_invert+0x58>
    235c:	46 2f       	mov	r20, r22
    235e:	4f 70       	andi	r20, 0x0F	; 15
    2360:	40 5d       	subi	r20, 0xD0	; 208
    2362:	4a 33       	cpi	r20, 0x3A	; 58
    2364:	18 f0       	brcs	.+6      	; 0x236c <__ultoa_invert+0x7c>
    2366:	49 5d       	subi	r20, 0xD9	; 217
    2368:	31 fd       	sbrc	r19, 1
    236a:	40 52       	subi	r20, 0x20	; 32
    236c:	41 93       	st	Z+, r20
    236e:	02 d0       	rcall	.+4      	; 0x2374 <__ultoa_invert+0x84>
    2370:	a9 f7       	brne	.-22     	; 0x235c <__ultoa_invert+0x6c>
    2372:	ea cf       	rjmp	.-44     	; 0x2348 <__ultoa_invert+0x58>
    2374:	b4 e0       	ldi	r27, 0x04	; 4
    2376:	a6 95       	lsr	r26
    2378:	97 95       	ror	r25
    237a:	87 95       	ror	r24
    237c:	77 95       	ror	r23
    237e:	67 95       	ror	r22
    2380:	ba 95       	dec	r27
    2382:	c9 f7       	brne	.-14     	; 0x2376 <__ultoa_invert+0x86>
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	61 05       	cpc	r22, r1
    2388:	71 05       	cpc	r23, r1
    238a:	08 95       	ret
    238c:	9b 01       	movw	r18, r22
    238e:	ac 01       	movw	r20, r24
    2390:	0a 2e       	mov	r0, r26
    2392:	06 94       	lsr	r0
    2394:	57 95       	ror	r21
    2396:	47 95       	ror	r20
    2398:	37 95       	ror	r19
    239a:	27 95       	ror	r18
    239c:	ba 95       	dec	r27
    239e:	c9 f7       	brne	.-14     	; 0x2392 <__ultoa_invert+0xa2>
    23a0:	62 0f       	add	r22, r18
    23a2:	73 1f       	adc	r23, r19
    23a4:	84 1f       	adc	r24, r20
    23a6:	95 1f       	adc	r25, r21
    23a8:	a0 1d       	adc	r26, r0
    23aa:	08 95       	ret

000023ac <__eerd_byte_m328p>:
    23ac:	f9 99       	sbic	0x1f, 1	; 31
    23ae:	fe cf       	rjmp	.-4      	; 0x23ac <__eerd_byte_m328p>
    23b0:	92 bd       	out	0x22, r25	; 34
    23b2:	81 bd       	out	0x21, r24	; 33
    23b4:	f8 9a       	sbi	0x1f, 0	; 31
    23b6:	99 27       	eor	r25, r25
    23b8:	80 b5       	in	r24, 0x20	; 32
    23ba:	08 95       	ret

000023bc <__eeupd_byte_m328p>:
    23bc:	26 2f       	mov	r18, r22

000023be <__eeupd_r18_m328p>:
    23be:	f9 99       	sbic	0x1f, 1	; 31
    23c0:	fe cf       	rjmp	.-4      	; 0x23be <__eeupd_r18_m328p>
    23c2:	92 bd       	out	0x22, r25	; 34
    23c4:	81 bd       	out	0x21, r24	; 33
    23c6:	f8 9a       	sbi	0x1f, 0	; 31
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	00 b4       	in	r0, 0x20	; 32
    23cc:	02 16       	cp	r0, r18
    23ce:	39 f0       	breq	.+14     	; 0x23de <__eeupd_r18_m328p+0x20>
    23d0:	1f ba       	out	0x1f, r1	; 31
    23d2:	20 bd       	out	0x20, r18	; 32
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	fa 9a       	sbi	0x1f, 2	; 31
    23da:	f9 9a       	sbi	0x1f, 1	; 31
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	08 95       	ret

000023e0 <__ctype_isfalse>:
    23e0:	99 27       	eor	r25, r25
    23e2:	88 27       	eor	r24, r24

000023e4 <__ctype_istrue>:
    23e4:	08 95       	ret

000023e6 <_exit>:
    23e6:	f8 94       	cli

000023e8 <__stop_program>:
    23e8:	ff cf       	rjmp	.-2      	; 0x23e8 <__stop_program>
